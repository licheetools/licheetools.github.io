{"meta":{"title":"编程思录，记录思考","subtitle":null,"description":null,"author":"Envy","url":"http://licheetools.github.io"},"pages":[{"title":"分类","date":"2017-02-22T00:39:04.000Z","updated":"2019-04-13T08:39:04.005Z","comments":false,"path":"categories/index.html","permalink":"http://licheetools.github.io/categories/index.html","excerpt":"","text":""},{"title":"data","date":"2019-04-13T08:44:34.000Z","updated":"2019-04-13T08:44:34.957Z","comments":true,"path":"categories/data/index.html","permalink":"http://licheetools.github.io/categories/data/index.html","excerpt":"","text":""},{"title":"关于博主","date":"2017-02-22T00:39:04.000Z","updated":"2019-04-13T07:44:35.475Z","comments":true,"path":"categories/about/index.html","permalink":"http://licheetools.github.io/categories/about/index.html","excerpt":"","text":""},{"title":"django","date":"2019-04-13T01:38:16.000Z","updated":"2019-04-13T01:38:16.284Z","comments":true,"path":"categories/django/index.html","permalink":"http://licheetools.github.io/categories/django/index.html","excerpt":"","text":""},{"title":"flask","date":"2019-04-13T01:38:26.000Z","updated":"2019-04-13T01:38:26.750Z","comments":true,"path":"categories/flask/index.html","permalink":"http://licheetools.github.io/categories/flask/index.html","excerpt":"","text":""},{"title":"java","date":"2019-04-13T01:38:05.000Z","updated":"2019-04-13T01:38:06.242Z","comments":true,"path":"categories/java/index.html","permalink":"http://licheetools.github.io/categories/java/index.html","excerpt":"","text":""},{"title":"life","date":"2019-04-13T01:43:45.000Z","updated":"2019-04-13T01:43:48.121Z","comments":true,"path":"categories/life/index.html","permalink":"http://licheetools.github.io/categories/life/index.html","excerpt":"","text":""},{"title":"font","date":"2019-04-13T01:37:12.000Z","updated":"2019-04-13T01:37:14.951Z","comments":true,"path":"categories/font/index.html","permalink":"http://licheetools.github.io/categories/font/index.html","excerpt":"","text":""},{"title":"你有什么话，想对我说嘛？","date":"2017-03-03T01:29:53.000Z","updated":"2019-04-13T08:12:40.356Z","comments":true,"path":"categories/liuyan/index.html","permalink":"http://licheetools.github.io/categories/liuyan/index.html","excerpt":"","text":""},{"title":"spider","date":"2019-04-13T01:38:39.000Z","updated":"2019-04-13T01:38:39.430Z","comments":true,"path":"categories/spider/index.html","permalink":"http://licheetools.github.io/categories/spider/index.html","excerpt":"","text":""},{"title":"付费内容","date":"2019-04-13T01:38:53.000Z","updated":"2019-04-13T03:12:55.310Z","comments":true,"path":"categories/money/index.html","permalink":"http://licheetools.github.io/categories/money/index.html","excerpt":"","text":""}],"posts":[{"title":"零基础使用Django2.0.1打造在线教育网站（一）：项目介绍","slug":"零基础使用Django2-0-1打造在线教育网站（一）：项目介绍","date":"2018-04-10T09:03:19.000Z","updated":"2019-04-13T09:06:00.180Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（一）：项目介绍/","link":"","permalink":"http://licheetools.github.io/2018/04/10/零基础使用Django2-0-1打造在线教育网站（一）：项目介绍/","excerpt":"","text":"写在前面嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习慕课网时的一些笔记，希望对即将学习Django的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。 项目介绍Django介绍Django是目前Python Web开发中的主流框架，因为它有许多功能强大的第三方插件，你可以很方便的开发出自己的工具包，这使得它具有很强的可扩展性，被许多大型公司使用，如Google，豆瓣，YouTube，知乎，instagram等。 在线网站介绍我们这个网站功能强大，具有完整的个人中心，用户登录，注册以及找回密码等功能。下面分别介绍各个部分的功能：12345678910111213141516171819202122232425262728293031点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。日志记录：它可以记录后台人员的操作情况。其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。 学完过后你不仅对Django的基础知识有了一个比较深刻的印象，还对MTV，MVC模式有了一个更加全面的了解，举一反三，你可以利用它开发各种类型的网站，如电商购物,在线旅游，公司官网，个人博客等其他网站。具体可以点击查看这个基于django的网站（可能要翻墙的哈）。 开发环境介绍环境介绍网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发. 后台介绍采用xadmin进行开发。之前用过django-suit，发现它只是单纯的对admin进行了美化，并没有更高级的功能。鉴于此，我们推荐使用xadmin进行后台管理。它有许多的拓展功能，如下所示：12345xadmin常用插件自定义xadmin插件xadmin的富文本编辑xadmin的excel导入功能。一些开源的django开发库。 到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。 补充资料1、[入门] 菜鸟Django 教程，非常简短的教程，可以快速让你有一个清楚的认识。2、[基础] 自强学堂Django，非常不错的教程，可以没事看一看。3、[基础] 刘江的Django教程，非常适合入门的小白阅读，还有2个例子供你练习。4、[入门] 1元学习《Django零基础到项目实战》，非常不错的基础入门视频教程。5、[基础]用Python Django快速做出高大上的BBS论坛网站，这是免费的视频教程，大家可以试着去练手。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"关于博主","slug":"关于博主","date":"2017-03-04T08:27:48.000Z","updated":"2019-04-13T08:46:42.925Z","comments":true,"path":"2017/03/04/关于博主/","link":"","permalink":"http://licheetools.github.io/2017/03/04/关于博主/","excerpt":"","text":"我，一个正在进击的技术控，相信越努力，越自由。非常高兴能和大家在这里相遇。这是我的个人博客，搭建的初衷是广交朋友，广学知识。那么你肯定觉得我是一个技术大牛（哈哈），其实我只是一个技术控，对那些有趣的技术非常好奇罢了，离真正的大神还差一个”地中海”式的发型。目前主要从事前端工作，但是非常喜欢java， python， kotlin等编程语言，所以你如果也有此爱好的话，我们不妨交流一下学习心得。今后我会在这个博客上更新一些有趣的技术和分享我学习，工作，生活上的点滴瞬间。你不努力一下，你就体会不到被人追赶的滋味.生活不只有Coding还有诗和远方~~~喜欢旅游，看电影，偶尔还玩会游戏（最近在玩王者荣耀，尽管队友坑，但我也坑。。。）对了，有一些技术上的问题可以给我发微信消息（事情多，不能立即回复，甚至忘记回复，还请不要生气）。我在很多社区都有账号，需要联系我的朋友可以关注并加好友呃…… 邮箱: 2810706745@qq.com QQ: 2810706745 微信: ZY20160801 新浪微博: 点击这里 GitHub: 点击这里 声明： 1.本博客文章只是为了个人学习以及在一些技术型社区发表，不做商业使用; 2.如其中引用到其他文章经典的部分，本人大部分都会加上引用或者在文章底部的参考文献中注明，如果不慎引用了你的文章但是却没有注明的请联系我; 3.博客内文章欢迎转载，但转载前请联系我，保留出处和作者，不做商业使用，谢谢~~~","categories":[{"name":"about","slug":"about","permalink":"http://licheetools.github.io/categories/about/"}],"tags":[{"name":"关于博主","slug":"关于博主","permalink":"http://licheetools.github.io/tags/关于博主/"}],"keywords":[{"name":"about","slug":"about","permalink":"http://licheetools.github.io/categories/about/"}]},{"title":"你有什么话，想对我说嘛？","slug":"你有什么话，想对我说嘛？","date":"2017-03-03T01:29:53.000Z","updated":"2019-04-13T09:11:30.855Z","comments":true,"path":"2017/03/03/你有什么话，想对我说嘛？/","link":"","permalink":"http://licheetools.github.io/2017/03/03/你有什么话，想对我说嘛？/","excerpt":"","text":"","categories":[{"name":"liuyan","slug":"liuyan","permalink":"http://licheetools.github.io/categories/liuyan/"}],"tags":[{"name":"留言板","slug":"留言板","permalink":"http://licheetools.github.io/tags/留言板/"}],"keywords":[{"name":"liuyan","slug":"liuyan","permalink":"http://licheetools.github.io/categories/liuyan/"}]},{"title":"爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取","slug":"爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取","date":"2017-03-02T11:09:47.000Z","updated":"2019-04-13T08:16:34.714Z","comments":true,"path":"2017/03/02/爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取/","link":"","permalink":"http://licheetools.github.io/2017/03/02/爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取/","excerpt":"","text":"说在前面在上一篇中，我们说到某个内容从属于多个分类(即它有多个标签)，应该如何把它所属的全部标签都爬取下来呢？这一期博主就将教你如何实现这一功能。我们以猫途鹰这个网站为例，向大家演示一下。 爬取内容如下图所示，我们需要爬取该图中所示景点的信息，具体包括：标题，封面图片，分类等信息。 知识补充get()方法的使用我们在上一篇中，获取标题，地址，单标签的文本信息采用了get_text()方法，但是如果要获取图片呢？我们是不能和之前一样，要采用一种新的方法：get(‘attr’)。这么说你可能有些困惑，举个简单的例子，看下面的代码:&lt;a href=http://licheetools.top&gt; share my life with you &lt;/a&gt;如果你只想获取网站信息，只需要.get(‘href’)即可。获取图片只需要.get(‘src’)因为图片的格式一般是这样的：&lt;img src=&quot;http://licheetools.top/index.html/first.jpg&quot; alt=&quot;第一张图片&quot;&gt; stripped_strings的用法在这里你可以认为是高级的get_text(),它这个可以同时取出多个文本，待会就采用这个来爬取多个标签。 字符串的格式化字符串的格式化通常采用{}和:来代替传统的%方式，具体如下：1、使用位置参数从下面的例子可以看出位置参数不受顺序约束，且可以为{},只要format里有相对应的参数值即可,参数索引从0开，传入位置参数列表可用*列表；12345678910111213141516a='my name is &#123;&#125; ,age &#123;&#125;'.format('joe',18)print(a)my name is joe ,age 18b='my name is &#123;1&#125; ,age &#123;0&#125;'.format(10,'joe')print(b)my name is joe ,age 10c='my name is &#123;1&#125; ,age &#123;0&#125; &#123;1&#125;'.format(10,'joe')print(c)my name is joe ,age 10 joedata=['joe',18]d='my name is &#123;&#125; ,age &#123;&#125;'.format(*data)print(d)my name is joe ,age 18 2、使用关键字参数采用字典当关键字参数传入值，不过关键字参数值要对得上，可以在字典前加**12345678e='my name is &#123;name&#125;,age is &#123;age&#125;'.format(name='joe',age=19)print(e)my name is joe,age is 19data=&#123;'name':'joe','age':19&#125;f='my name is &#123;name&#125;,age is &#123;age&#125;'.format(**data)print(f)my name is joe,age is 19 其他参数我在这里就不介绍了，你可以看这篇文章python之字符串格式化(formate) 代码内容123456789101112131415161718192021222324252627282930313233#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/04/15 20:15# @Author: lichexo# @File: test_05.pyfrom bs4 import BeautifulSoupimport requestsimport timeurl='https://www.tripadvisor.cn/Attractions-g60763-Activities-New_York_City_New_York.html'urls=['https://www.tripadvisor.cn/Attractions-g60763-Activities-oa&#123;&#125;-New_York_City_New_York.html#FILTERED_LIST'.format(str(i)) for i in range(30,1140,30)]def get_attraction(url,data=None): web_data = requests.get(url) time.sleep(4) soup = BeautifulSoup(web_data.text, 'lxml') titles = soup.select('div.listing_title &gt; a[target=\"_blank\"]') images = soup.select('img[width=\"180\"]') cates = soup.select('div.tag_line &gt; div') for title,image,cate in zip(titles,images,cates): data=&#123; 'title':title.get_text(), 'image':image.get('src'), 'cate':list(cate.stripped_strings), &#125; print(data)get_attraction(url)for single_url in urls: get_attraction(single_url)print(urls) 运行结果由于抓取的内容太多，这里只呈现部分信息。12345678910111213141516171819202122232425262728293031323334&#123;'title': '曼哈顿天际线', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '大都会艺术博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '艺术博物馆']&#125;&#123;'title': '中央公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '公园', ',', '景观步行区']&#125;&#123;'title': '9/11纪念馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆', ',', '景点与地标', ',', '纪念碑与雕像', ',', '古迹']&#125;&#123;'title': '峭石之巅观景台', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['观景台', ',', '瞭望台']&#125;&#123;'title': '布鲁克林大桥', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['桥梁']&#125;&#123;'title': '圣帕提克大教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['教堂']&#125;&#123;'title': '百老汇', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '大中央车站', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['建筑', ',', '景点与地标']&#125;&#123;'title': '布莱恩公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园']&#125;&#123;'title': '纽约公共图书馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆']&#125;&#123;'title': '世贸一号观景台', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['观景台', ',', '建筑']&#125;&#123;'title': '史泰登岛渡轮', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['轮渡']&#125;&#123;'title': '高线公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景观步行区', ',', '公园']&#125;&#123;'title': '帝国大厦', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['建筑', ',', '景点与地标', ',', '观景台']&#125;&#123;'title': '自由女神像', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['纪念碑与雕像', ',', '景点与地标']&#125;&#123;'title': '洛克菲勒中心', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '建筑']&#125;&#123;'title': '现代艺术博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['艺术博物馆']&#125;&#123;'title': 'The Oculus', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '无畏海空宇宙博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '阿波罗剧院', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['纪念碑与雕像', ',', '建筑']&#125;&#123;'title': '华盛顿广场公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆']&#125;&#123;'title': '圣保罗教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '圣约翰教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园', ',', '景点与地标', ',', '周边']&#125;&#123;'title': '河滨公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': 'Studio 54', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['教堂', ',', '圣地与宗教景点']&#125;&#123;'title': '埃利斯岛', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['圣地与宗教景点']&#125;&#123;'title': '切尔西市场', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': '商人之家博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园']&#125;&#123;'title': '哈德逊河公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': '艾利斯岛移民博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '犹太遗产博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['历史博物馆', ',', '景点与地标', ',', '古迹']&#125;。。。。。。 下期说明哈哈，今天总的来说还是比较简单的，容易操作，下期我们准备爬点不一样的东西。。。 今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。","categories":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}],"tags":[{"name":"爬虫实战","slug":"爬虫实战","permalink":"http://licheetools.github.io/tags/爬虫实战/"}],"keywords":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}]},{"title":"爬虫实战系列：（一）58同城-转转商品信息爬取","slug":"爬虫实战系列：（一）58同城-转转商品信息爬取","date":"2017-03-02T02:02:41.000Z","updated":"2019-04-13T07:17:03.001Z","comments":true,"path":"2017/03/02/爬虫实战系列：（一）58同城-转转商品信息爬取/","link":"","permalink":"http://licheetools.github.io/2017/03/02/爬虫实战系列：（一）58同城-转转商品信息爬取/","excerpt":"","text":"说在前面本系列教程记录了博主的爬虫之路，可谓是有苦又累，有甜有笑，如果你在看过本系列教程之后，对爬虫有独到的见解或者浓厚的兴趣，不妨留言和博主进行交流学习呢，我在这里等你来玩~~~ 爬取内容如下图所示，我们需要爬取该图中所示商品的信息，具体包括：类目，标题，价格，浏览量，所在区域等信息。 代码内容字典属性法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/4/10 15:15# @Author: lichexo# @File: zhuanzhuan.py# @Website：http：//licheetools.topfrom bs4 import BeautifulSoup #导入需要的包和模块import requestsimport time #用于控制每次爬取的时间间隔user_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'headers=&#123; 'User_Agent':'user_agent'&#125;time.sleep(4)def get_attrition(url): #定义函数，便于调用 #url = 'http://zhuanzhuan.58.com/detail/967678151307198471z.shtml ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp;metric=null&amp; PGTID=0d305a36-0000-1792-ee6b-8d43de6b3765&amp;ClickID=7' #此处URL前面的(#)不可删除，否则就出现函数调用错误，因为后面调用的link已经替换此处的url web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') casses=soup.select('#nav &gt; div &gt; span &gt; a') titles=soup.select('div.box_left_top &gt; h1') moneys=soup.select('div.price_li &gt; span[class=\"price_now\"] &gt; i') addresses=soup.select('div.palce_li &gt; span &gt; i') for cass,title,money,address in zip(casses,titles,moneys,addresses): data=&#123; 'cass':cass.get_text(), #文字调用get_text()方法 'title':title.get_text(), 'money':money.get_text(), 'address':address.get_text(), &#125; print(data)def get_all_item_info(): url='http://bj.58.com/pbdn/' web_data=requests.get(url) soup=BeautifulSoup(web_data.text,'lxml') href_list=soup.select('a.t') for href in href_list: link=href.get('href') if 'zhuanzhuan' in link: #除去网页中不需要的精准推广部分 get_attrition(link)get_all_item_info() 列表索引法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/4/10 15:15# @Author: lichexo# @File: zhuanzhuan.py# @Website：http：//licheetools.topfrom bs4 import BeautifulSoupimport requestsimport timeuser_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'headers=&#123; 'User_Agent':'user_agent'&#125;time.sleep(4)def get_item_info(url): #url='http://zhuanzhuan.58.com/detail/835458751461588996z.shtml ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp; metric=null&amp;PGTID=0d305a36-0000-123c-630d-da6c51789948&amp;ClickID=1' web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') title_list=soup.select('h1.info_titile') title=title_list[0].text #该列表有且仅有唯一一个元素，采用get_text()将其取出 price_list=soup.select('span.price_now &gt; i') price=price_list[0].text views_list=soup.select('span.look_time') view=views_list[0].text area_list=soup.select('div.palce_li &gt; span &gt; i') area=area_list[0].text cate_list=soup.select('span.crb_i &gt; a') cate=cate_list[-1].text.strip() #使用strip()函数来消除换行和空格的影响 data=&#123; 'title':title, 'price':price, 'view':view, 'area':area, 'cate':cate, &#125; print(data)def get_all_item_info(): url='http://bj.58.com/pbdn/' web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') href_list=soup.select('a.t') for href in href_list: link=href.get('href') #获取元素的某个属性采用get()方法来实现 if 'zhuanzhuan' in link: get_item_info(link)get_all_item_info() 运行结果 知识补充soup.select ( )选择标签问题你只需要在浏览器中鼠标右键点击审查(Ctrl+Shift+I) –&gt; 找到字段的具体代码 –&gt; 右键选择Copy –&gt; Copy selector即可得到你想要的代码字段。为保证你是否正确捕抓到相关信息，你可以鼠标右键点击查看网页源代码(Ctrl+U) –&gt;然后再按Ctrl+F调出搜索框 –&gt; 将你刚才捕抓到的信息进行复制黏贴并回车 –&gt; 看右侧的黄色代码区是否是包括你所需信息的最小高亮区，不是则往上一级父级标签查询。 get_text 和 get()的使用问题get_text()，是返回选择的标签文本，具体可以查看参考文档;而get(‘’)，这是选择标签中的属性(也就是里面有=符号的左边)，比如在&lt;li&gt;&lt;a class=&quot;rrence intnal&quot; href=&quot;#next-siblings-previous-siblings&quot;&gt;&lt;/li&gt;之中，选择li &gt; a这个标签之后，则可以用get(‘href’)获取其中的链接。 下期说明哈哈，今天的内容是不是很简单，不过你是不是有一个疑问，就是如果某个内容从属于多个分类(即它有多个标签)我们应该如何把它所属的全部标签都爬取下来呢？那么下期博主将教你如何实现这一功能。 本教程适合有一部分Python基础的同学，小白童鞋很抱歉。。。 今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。","categories":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}],"tags":[{"name":"爬虫实战","slug":"爬虫实战","permalink":"http://licheetools.github.io/tags/爬虫实战/"}],"keywords":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}]},{"title":"行者有梦，千里亦趋","slug":"行者有梦，千里亦趋","date":"2017-03-01T02:14:19.000Z","updated":"2019-04-13T07:09:58.592Z","comments":true,"path":"2017/03/01/行者有梦，千里亦趋/","link":"","permalink":"http://licheetools.github.io/2017/03/01/行者有梦，千里亦趋/","excerpt":"行者有梦，千里亦趋，人生几何。","text":"对不起，此文章为加密内容，只有管理员才能查看. Incorrect Password! No content to display! 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","categories":[{"name":"life","slug":"life","permalink":"http://licheetools.github.io/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"http://licheetools.github.io/tags/life/"}],"keywords":[{"name":"life","slug":"life","permalink":"http://licheetools.github.io/categories/life/"}]}]}