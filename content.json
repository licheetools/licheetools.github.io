{"meta":{"title":"编程思录，记录思考","subtitle":null,"description":null,"author":"Envy","url":"http://licheetools.github.io"},"pages":[{"title":"分类","date":"2017-02-22T00:39:04.000Z","updated":"2019-04-13T08:39:04.005Z","comments":false,"path":"categories/index.html","permalink":"http://licheetools.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于博主","date":"2017-02-22T00:39:04.000Z","updated":"2019-04-13T07:44:35.475Z","comments":true,"path":"categories/about/index.html","permalink":"http://licheetools.github.io/categories/about/index.html","excerpt":"","text":""},{"title":"data","date":"2019-04-13T08:44:34.000Z","updated":"2019-04-13T08:44:34.957Z","comments":true,"path":"categories/data/index.html","permalink":"http://licheetools.github.io/categories/data/index.html","excerpt":"","text":""},{"title":"font","date":"2019-04-13T01:37:12.000Z","updated":"2019-04-13T01:37:14.951Z","comments":true,"path":"categories/font/index.html","permalink":"http://licheetools.github.io/categories/font/index.html","excerpt":"","text":""},{"title":"django","date":"2019-04-13T01:38:16.000Z","updated":"2019-04-13T01:38:16.284Z","comments":true,"path":"categories/django/index.html","permalink":"http://licheetools.github.io/categories/django/index.html","excerpt":"","text":""},{"title":"flask","date":"2019-04-13T01:38:26.000Z","updated":"2019-04-13T01:38:26.750Z","comments":true,"path":"categories/flask/index.html","permalink":"http://licheetools.github.io/categories/flask/index.html","excerpt":"","text":""},{"title":"java","date":"2019-04-13T01:38:05.000Z","updated":"2019-04-13T01:38:06.242Z","comments":true,"path":"categories/java/index.html","permalink":"http://licheetools.github.io/categories/java/index.html","excerpt":"","text":""},{"title":"life","date":"2019-04-13T01:43:45.000Z","updated":"2019-04-13T01:43:48.121Z","comments":true,"path":"categories/life/index.html","permalink":"http://licheetools.github.io/categories/life/index.html","excerpt":"","text":""},{"title":"你有什么话，想对我说嘛？","date":"2017-03-03T01:29:53.000Z","updated":"2019-04-13T08:12:40.356Z","comments":true,"path":"categories/liuyan/index.html","permalink":"http://licheetools.github.io/categories/liuyan/index.html","excerpt":"","text":""},{"title":"付费内容","date":"2019-04-13T01:38:53.000Z","updated":"2019-04-13T03:12:55.310Z","comments":true,"path":"categories/money/index.html","permalink":"http://licheetools.github.io/categories/money/index.html","excerpt":"","text":""},{"title":"spider","date":"2019-04-13T01:38:39.000Z","updated":"2019-04-13T01:38:39.430Z","comments":true,"path":"categories/spider/index.html","permalink":"http://licheetools.github.io/categories/spider/index.html","excerpt":"","text":""}],"posts":[{"title":"趣玩爬虫实战训练（一）：12306火车车次信息爬取分析","slug":"趣玩爬虫实战训练（一）：12306火车车次信息爬取分析","date":"2019-04-01T13:38:39.000Z","updated":"2019-04-13T13:47:31.002Z","comments":true,"path":"2019/04/01/趣玩爬虫实战训练（一）：12306火车车次信息爬取分析/","link":"","permalink":"http://licheetools.github.io/2019/04/01/趣玩爬虫实战训练（一）：12306火车车次信息爬取分析/","excerpt":"本套实战教程为付费教程，请输入密码以后再进行阅读。版权所有，请勿传播，以免产生纠纷。本套教程是一次购买，终身阅读的。","text":"对不起，此文章为付费内容，请添加小编QQ：2810706745。付费以后，凭密码进行阅读，感谢您的支持与理解！ Incorrect Password! No content to display! ","categories":[{"name":"money","slug":"money","permalink":"http://licheetools.github.io/categories/money/"}],"tags":[{"name":"趣玩爬虫","slug":"趣玩爬虫","permalink":"http://licheetools.github.io/tags/趣玩爬虫/"}],"keywords":[{"name":"money","slug":"money","permalink":"http://licheetools.github.io/categories/money/"}]},{"title":"关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍","slug":"关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍","date":"2018-08-05T13:33:59.000Z","updated":"2019-04-13T13:34:34.674Z","comments":true,"path":"2018/08/05/关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍/","link":"","permalink":"http://licheetools.github.io/2018/08/05/关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍/","excerpt":"","text":"jdbc全称java database connectivity.是java程序与数据库连接的一种机制。 jdbc的过程：1、搭建开发环境2、编写程序，在程序中加载数据库驱动3、建立连接4、创建用于向数据库发送sql语句的Statement对象5、从代表结果集的ResultSet中取出数据6、断开与数据库的链接，并释放相关的资源 ###DriverManager：驱动管理类主要作用：1、注册驱动12DriverManager.registerDriver(new Driver()); //会导致驱动注册两次Class.forName(&quot;com.test.jdbc.demo1.JdbcTest1&quot;); //实际上使用这种方式 2、获得连接Connection getConnection(String url,String username,String password)；url的写法：jdbc:mysql://localhost:3306/jdbcjdbc:协议mysql:子协议localhost:主机号3306:端口号注意如果为本地ip地址，则可以简写为：jdbc:mysql:///jdbc ###jdbc工具类的书写123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107package com.test.jdbc.utils;import java.io.IOException;import java.io.InputStream;import java.sql.*;import java.util.Properties;/**** * JDBC的工具类 * @author lenovo * */public class JdbcUtils &#123; private static final String driverClass; private static final String url; private static final String username; private static final String password;//没有配置文件jdbc.properties时的代码 static &#123; driverClass = &quot;com.mysql.jdbc.Driver&quot;; url = &quot;jdbc:mysql://localhost:3306/jdbctest&quot;; username = &quot;root&quot;; password = &quot;root&quot;; &#125; /** * 注册驱动的方法 **/ public static void loadDriver() throws ClassNotFoundException &#123; Class.forName(driverClass); &#125; /*** * *获得连接的方法 * */ public static Connection getConnection() throws Exception &#123; loadDriver(); //这里必须要调用上面的注册驱动方法 Connection connection = DriverManager.getConnection(url, username, password); return connection; &#125; /*** *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作 * * */ public static void ReleaseSource(Connection connection, Statement statement) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; &#125; /*** *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作 * * */ public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; if (resultSet != null) &#123; try &#123; resultSet.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; resultSet = null; &#125; &#125;&#125; 下面是具有了jdbc.propreties属性的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118package com.test.jdbc.utils;import java.io.IOException;import java.io.InputStream;import java.sql.*;import java.util.Properties;/**** * JDBC的工具类 * @author lenovo * */public class JdbcUtils &#123; private static final String driverClass; private static final String url; private static final String username; private static final String password; //有配置文件jdbc.properties时的代码 static &#123; //加载属性文件并解析 Properties props = new Properties(); //如何获得属性文件的输入流？ //通常情况下使用类的加载器的方式进行获取 InputStream is = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;); try &#123; props.load(is); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; driverClass =props.getProperty(&quot;driverClass&quot;); url =props.getProperty(&quot;url&quot;); username =props.getProperty(&quot;username&quot;); password =props.getProperty(&quot;password&quot;); &#125; /** * 注册驱动的方法 **/ public static void loadDriver() throws ClassNotFoundException &#123; Class.forName(driverClass); &#125; /*** * *获得连接的方法 * */ public static Connection getConnection() throws Exception &#123; loadDriver(); //这里必须要调用上面的注册驱动方法 Connection connection = DriverManager.getConnection(url, username, password); return connection; &#125; /*** *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作 * * */ public static void ReleaseSource(Connection connection, Statement statement) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; &#125; /*** *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作 * * */ public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; if (resultSet != null) &#123; try &#123; resultSet.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; resultSet = null; &#125; &#125;&#125; 其中jdbc.propreties文件里面的代码是：1234driverClass = com.mysql.jdbc.Driverurl = jdbc:mysql://localhost:3306/jdbctestusername = rootpassword = root Statement的使用它的使用和我们后面所说的preparedStatement的使用有点不相同，而且我们优先后面的那种方式，因为不会产生sql注入的危险。 preparedStatement的使用123456789101112131415161718192021222324252627282930@Test /*** * 保存数据到数据库，其实就是插入操作 * */ public void demo1() &#123; Connection connection = null; PreparedStatement preparedStatement = null; try &#123; //注册驱动和获取连接 connection = JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;insert into user values(null,?,?,?)&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 preparedStatement.setString(1, &quot;xxx&quot;); preparedStatement.setString(2, &quot;0000&quot;); preparedStatement.setString(3, &quot;boyer&quot;); //执行sql语句 int i = preparedStatement.executeUpdate(); if (i &gt; 0) &#123; System.out.println(&quot;数据插入成功&quot;); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; JdbcUtils.ReleaseSource(connection, preparedStatement); &#125; &#125; 在增删改查四个操作里面，我们先来简单连接四个过程的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//保存数据到数据库，其实就是插入操作 //注册驱动和获取连接 connection = JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;insert into user values(null,?,?,?)&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 preparedStatement.setString(1, &quot;xxx&quot;); preparedStatement.setString(2, &quot;0000&quot;); preparedStatement.setString(3, &quot;boyer&quot;); //执行sql语句 int i = preparedStatement.executeUpdate(); if (i &gt; 0) &#123; System.out.println(&quot;数据插入成功&quot;); &#125;//修改数据库中的数据 //注册驱动与获取连接 connection = JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;update user set username =?,password =?,name=? where uid =?&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 preparedStatement.setString(1, &quot;eee&quot;); preparedStatement.setString(2, &quot;555&quot;); preparedStatement.setString(3, &quot;lichee&quot;); preparedStatement.setInt(4, 7); //执行sql语句 int i = preparedStatement.executeUpdate(); if (i &gt; 0) &#123; System.out.println(&quot;数据修改成功！&quot;); &#125;//删除数据库中的数据//注册驱动与获取连接 connection =JdbcUtils.getConnection(); //创建sql语句 String sql =&quot;delete from user where uid =?&quot;; //预处理sql preparedStatement =connection.prepareStatement(sql); //设置参数 preparedStatement.setInt(1,6); //执行sql语句 int i = preparedStatement.executeUpdate(); if(i&gt;0)&#123; System.out.println(&quot;数据删除成功！&quot;); &#125;//查询数据库中的全部数据 //注册驱动和获取连接 connection =JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;select * from user&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 //执行sql语句 resultSet = preparedStatement.executeQuery(); while (resultSet.next())&#123; System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\\nname：&quot;+resultSet.getString(&quot;name&quot;)); &#125;//查询数据库中的一条数据 //注册驱动和获取连接 connection =JdbcUtils.getConnection(); //创建sql语句 String sql =&quot;select * from user where uid =?&quot;; //预处理sql语句 preparedStatement =connection.prepareStatement(sql); //设置参数 preparedStatement.setInt(1,1); //执行sql语句 resultSet = preparedStatement.executeQuery(); //判断结果集中的数据 while (resultSet.next())&#123; System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\\nname：&quot;+resultSet.getString(&quot;name&quot;)); &#125; 也就是说增加，修改，删除都是使用executeUpdate函数，而且返回的是int类型的受影响的行数，然后我们就可以使用：1234int i = preparedStatement.executeUpdate(); if(i&gt;0)&#123; System.out.println(&quot;数据删除成功！&quot;); &#125; 只有查询使用的是executeQuery函数，而且返回的是resultSet类型的结果集，然后使用：12345resultSet = preparedStatement.executeQuery(); //判断结果集中的数据 while (resultSet.next())&#123; System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\\nname：&quot;+resultSet.getString(&quot;name&quot;)); &#125; 连接池连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。 C3P0连接池","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（八）：反射机制","slug":"关于JAVA你必须知道的那些事（八）：反射机制","date":"2018-08-05T13:33:08.000Z","updated":"2019-04-13T13:33:39.461Z","comments":true,"path":"2018/08/05/关于JAVA你必须知道的那些事（八）：反射机制/","link":"","permalink":"http://licheetools.github.io/2018/08/05/关于JAVA你必须知道的那些事（八）：反射机制/","excerpt":"","text":"写在前面本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。 四大类Class：class类的实例表示正在运行的java应用程序中的类和接口；Constructor：关于单个类的构造方法以及对它的访问权限;Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；Method：提供关于类或者接口上的单独某个方法的信息。 Class类Class：class类的实例表示正在运行的java应用程序中的类和接口；java中java.lang.Class类用于表示一个类的字节码（.class）文件;获取某个class文件对应的Class对象：1、在已知类和对象的情况下：类名.class对象.getClass() –由Object类提供。2、在未知类的情况下：Class.forName(“包名.类名”) Class类代表某个类的字节码，并提供了加载字节码的方法：forName(“包名.类名”)，forName方法用于类字节码到内存中，并封装成一个Class对象。 我们通过代码来测试一下：首先先新建一个测试类Person：123456789101112131415161718192021222324252627282930313233343536373839package JavaReflect;public class Person &#123; private String name; private String sex; public Person() &#123;&#125;; public Person(String name,String sex) &#123; this.name=name; this.sex =sex; &#125; public String getName() &#123; return name; &#125;; public void setName(String name) &#123; this.name=name; &#125;; public String getSex() &#123; return sex; &#125;; public void setSex(String sex) &#123; this.sex=sex; &#125;; public void eat() &#123; System.out.println(&quot;吃东西......&quot;); &#125;; @Override public String toString() &#123; return &quot;Person [name=&quot; + name + &quot;, sex=&quot; + sex + &quot;]&quot;; &#125;&#125; 再来建一个ReflectTest类：1234567891011121314151617181920212223242526272829303132333435package JavaReflect;public class ReflectTest &#123; /** * 获得Class对象： 1、通过类.class； 2、通过对象.getClass()； 3、通过Class.forName(); * * @throws ClassNotFoundException **/ public static void demo1() throws ClassNotFoundException &#123; // 1、通过类.class； Class csone = Person.class; // 2、通过对象.getClass()； Person person = new Person(); Class cstwo = person.getClass(); // 3、通过Class.forName()获取信息（推荐） Class csthree = Class.forName(&quot;JavaReflect.Person&quot;); System.out.println(csthree); &#125; public static void main(String[] args) &#123; try &#123; ReflectTest.demo1(); &#125; catch (ClassNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; 以上三种方法获得的都是类的字节码文件对应的对象在内存中的地址。 Constructor构造方法Constructor：关于单个类的构造方法以及对它的访问权限;我们在前面已经得到了类名，那么就可以调用它的getConstructor()方法来获得它的有参或者无参的构造方法，紧接着你可以利用这个获得的构造方法的newInstance()方法，来达到完成实例化一个对象的目的。 我们新建一个测试类：ConstructorTest：12345678910111213141516171819202122232425262728293031323334353637383940414243444546package JavaReflect;import java.lang.reflect.Constructor;public class ConstructorTest &#123; /** * 获得无参的构造方法 * * @throws ClassNotFoundException */ public static void demo2() throws Exception &#123; // 获得类的字节码文件对应的对象 Class cls = Class.forName(&quot;JavaReflect.Person&quot;); // 获得无参的构造方法 Constructor cs = cls.getConstructor(null); Person person = (Person) cs.newInstance(null); // 其实这里就相当于Person person =new Person(); person.eat(); &#125;; public static void demo3() throws Exception &#123; Class cls = Class.forName(&quot;JavaReflect.Person&quot;); Constructor cso = cls.getConstructor(String.class, String.class); Person person = (Person) cso.newInstance(&quot;小白&quot;, &quot;男&quot;); //这里其实就是相当于Person person =new Person(&quot;小白&quot;,&quot;男&quot;); System.out.println(person); &#125; public static void main(String[] args) &#123; try &#123; ConstructorTest.demo3(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;//输出结果：Person [name=小白, sex=男] Field类Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；我们在前面已经得到了类名，那么就可以得到它的成员变量（包括所有的成员变量和指定的成员变量）。 如果你想获得所有的（非私有）成员变量，那么你可以调用它的getFields()方法，获得该类所有public属性（包括父类继承的）； 如果你想获得所有的（含私有）成员变量getDeclaredFields()方法，获得该类所有声明的属性（包括私有属性和父类继承的）； 如果你想获得指定的（非私有）成员变量，那么你可以调用它的getField(String name)方法，获得指定的（非私有）成员变量； 如果你想获得指定的（含私有）成员变量，那么你可以调用它的getDeclaredField(String name)方法，获得指定的（含私有）成员变量; 设置Field变量是否可以访问，你可以使用field.setAccessible(boolean)，boolean为真则表示可以，反之则不可以。 Field变量值的读取与设置：field.get(obj);field.set(obj,value); 我们首先在之前的Person类中添加一个公有的属性（public Sting hobby），然后新建一个测试类:FieldTest:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package JavaReflect;import java.lang.reflect.Field;public class FieldTest &#123; /** * 测试公有属性 */ public static void publicDemoTest() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class1 = Class.forName(&quot;JavaReflect.Person&quot;); // 获得指定公有属性字段 Field field1 = class1.getField(&quot;hobby&quot;); // 给指定的公有属性赋值 Person p = (Person) class1.newInstance();// p.hobby =&quot;reading book&quot;; //通过普通的对象.属性的方法来给对象的属性赋值 field1.set(p, &quot;reading book&quot;); System.out.println(p); &#125; /** * * 测试私有属性 * @throws Exception **/ public static void privateDemoTest() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class2 = Class.forName(&quot;JavaReflect.Person&quot;); // 获得指定私有属性字段（注意这里需要注释掉该字段对应的getter和setter方法） Field field2 = class2.getDeclaredField(&quot;name&quot;); //先实例化一个对象 Person person =(Person)class2.newInstance(); //给指定的私有属性赋值（操作属性）: //1、这里必须先要设置是否可以操作 field2.setAccessible(true); //2、给对应的属性赋值 field2.set(person,&quot;小白&quot;); //3、获取对应的属性值 Object obj =field2.get(person); System.out.println(obj); System.out.println(&quot;**************************&quot;); System.out.println(person); &#125; public static void main(String[] args) &#123; try &#123; FieldTest.publicDemoTest(); FieldTest.privateDemoTest(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;//输出结果Person [name=null, sex=null, hobby=reading book]小白**************************Person [name=小白, sex=null, hobby=null] Method类Method：提供关于类或者接口上的单独某个方法的信息。Method类代表某个类中的一个成员方法Method对象的获得方法： 如果你想获得所有的（非私有）方法，那么你可以调用它的getMethods()方法； 如果你想获得所有的（含私有）方法，那么你可以调用它getDeclaredMethods()方法； 如果你想获得指定的（非私有）方法，那么你可以调用它的getMethod()方法；（常用） 如果你想获得指定的（含私有）方法，那么你可以调用它的getDeclaredMethod()方法；（常用） 得到了方法，那么如何执行方法呢？我们可以通过反射来执行方法：invoke(Object obj,Object….args) 我们依旧通过测试来完成相关信息的输出，在前面的Person类中新增两个方法：1234567private void run() &#123; System.out.println(&quot;跑步......&quot;);&#125;private String wacthTv(String name) &#123; return &quot;我在看&quot; + name + &quot;电视节目&quot;;&#125; 接着新建一个测试类MethodTest： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package JavaReflect;import java.lang.reflect.Method;public class MethodTest &#123; /** * 测试公有方法 * * @throws ClassNotFoundException */ public static void demoOne() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class1 = Class.forName(&quot;JavaReflect.Person&quot;); // 实例化对象 Person person1 = (Person) class1.newInstance(); // 获得公有方法 Method method = class1.getMethod(&quot;eat&quot;); // 执行该方法 method.invoke(person1); // 这里就相当于person.eat() &#125; /** * 测试私有方法 * * @throws Exception **/ public static void demoTwo() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class2 = Class.forName(&quot;JavaReflect.Person&quot;); // 实例化对象 Person person2 = (Person) class2.newInstance(); // 获得私有方法 Method method = class2.getDeclaredMethod(&quot;run&quot;); // 设置私有的访问权限 method.setAccessible(true); // 执行该方法 method.invoke(person2); &#125; /** * 测试私有方法（带参数） * * @throws Exception **/ public static void demoThree() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class3 = Class.forName(&quot;JavaReflect.Person&quot;); // 实例化对象 Person person3 = (Person) class3.newInstance(); // 获得带参数的私有方法 Method method = class3.getDeclaredMethod(&quot;wacthTv&quot;, String.class); //设置私有的访问权限 method.setAccessible(true); //执行该方法// method.invoke(person3, &quot;新闻联播&quot;); Object obj =method.invoke(person3, &quot;新闻联播&quot;); System.out.println(obj); &#125; public static void main(String[] args) &#123; try &#123; MethodTest.demoOne(); MethodTest.demoTwo(); MethodTest.demoThree(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;//输出信息吃东西......跑步......我在看新闻联播电视节目 上面我们测试了3种情况，分别是公有方法，私有方法，以及私有的带参数的方法。 总结一下1、什么是Java的反射机制？Java的反射机制是在运行状态中，对于任意一个类，都能够知道这个类的属性和方法；对于任意一个对象，都能够调用它的任意属性和方法；这种动态获取信息以及动态调用对象方法的功能称之为Java的反射机制。 2、Java的反射机制的作用？是用来编写一些通用性较高的代码或者框架的时候使用。","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（七）：输入输出流和集合","slug":"关于JAVA你必须知道的那些事（七）：输入输出流和集合","date":"2018-08-04T13:32:02.000Z","updated":"2019-04-13T13:32:38.131Z","comments":true,"path":"2018/08/04/关于JAVA你必须知道的那些事（七）：输入输出流和集合/","link":"","permalink":"http://licheetools.github.io/2018/08/04/关于JAVA你必须知道的那些事（七）：输入输出流和集合/","excerpt":"","text":"输入输出流程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。 那么什么是流呢？所谓的流就是指一连串流动的字符，它是以先进先出的方式发送信息的通道。 流分为两种，输出流和输入流： 输出流一般是屏幕，打印机等，用来输出的设备，而输入流则是键盘或者扫描仪等设备。 数据源（键盘）将数据放到字符流中，然后程序通过read（读操作）进行读取。 也就是说文件输入是读，文件输出是写。 File类File就是文件，它可认为是相关记录或放在一起的数据的集合，在Java中，我们使用java.io.File类对文件迸行操作。可以点击这里查看api文档：javase8 api 需要注意的是，Windows中的目录分隔符为反斜杠“\\”，而Linux的目录中的分隔符则是斜杠“/”。 eclipse的快速导包快捷键为ctrl+shift+o。 1234567// 创建File对象的三种方式File file1 =new File(&quot;F:\\\\JAVA\\\\javatest\\\\io\\\\score.txt&quot;); //方法一 File file1 =new File(&quot;F:\\\\JAVA&quot;,&quot;\\\\javatest\\\\io\\\\score.txt&quot;); //方法二 File file =new File(&quot;F:\\\\JAVA&quot;);File file1 =new File(file ,&quot;\\\\javatest\\\\io\\\\score&quot;); //方法三 下面介绍一些常见的方法：12345678isDirectory()：判断是否是目录isFile()：判断是否是文件exists()：判断是否存在mkdir()：创建一级目录mkdirs()：创建多级目录createNewFile()：创建新的文件canRead()：是否可读canWrite()：是否可写 字节流字节分为两种：字节输入流 InputStream和字节输出流 OutputStream，我从网上找了两张图片，大家可以看一下： FileInputStream文件输入流FileInputStream文件输入流有几个作用： 1、就是从文件系统中的某个文件中获得输入字节。 举个简单的例子，复制就是把原来文件的信息进行读取的操作，然后粘贴就是把读取的信息进行写入的操作； 2、用于读取图像数据之类的原始字节流。 方法名 描述 备注 public int read() 从输入流中读取一个数据字节 public int read(byte[] b) 从输入流中将最多b.length个字节的数据读入一个byte数组中 public int read(byte[] b,int off, int len) 从输入流中将最多len个字节的数据读入byte数组中 public void close() 关闭此文件输入流并释放与此流有关的所有系统资源 注意：如果int的返回值为-1，则表示已经读到了文件的末尾。1234567891011121314151617181920212223242526272829303132package JavaIO;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;public class FileDemoInputStreamOne &#123;public static void main(String[] args) &#123; // 创建一个FileInputStream try &#123; FileInputStream files =new FileInputStream(&quot;F:\\\\JAVA\\\\javatest\\\\io\\\\score.txt&quot;);// int n = files.read(); // 只能读取第一个数据字节// while(n!=-1) &#123;// System.out.print((char)n);// n =files.read();// &#125;; int n =0; while((n=files.read())!=-1) &#123; System.out.print((char)n); &#125;; files.close(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;catch(IOException e) &#123; e.printStackTrace(); &#125;; 再来看一个字节数组的例子：123456789101112131415161718192021222324252627package JavaIO;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;public class FileDemoInputStreamTwo &#123; public static void main(String[] args) &#123; // 创建一个FileInputStream try &#123; FileInputStream files = new FileInputStream(&quot;F:\\\\JAVA\\\\javatest\\\\io\\\\score.txt&quot;); byte [] b =new byte[100]; files.read(b,0,5); //后面2个是偏移量，0表示从开始读取，而5代表存取的字节的长度 System.out.println(new String(b)); files.close(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; ; &#125;&#125; FileOutputStream文件输出流上面我们说完了FileInputStream文件输入流，接下来说文件输出流FileOutputStream： 方法名 描述 备注 public void write(int b) 将指定字节写入此文件输出流 public void write(byte[] b) 将b.length个字节从指定byte数组写入此文件输出流中 public void write(byte[] b,int off,int len) 将指定byte数组中从偏移量off开始的len个字节写入此文件输出流 public void close() 关闭此文件输出流并释放与此流有关的所有系统资源 注意：在上面的方法里面都有一个默认参数为append（追加的意思），但是默认为空白（False也就是覆盖的意思），如果你设为True那么就是后面追加，会保留原来的信息。 上面的方法是不是和前面输入流很相似，是的这就是一个互逆的过程。 不过还有一个问题就是很容易发生编码错误，所以你会发现字节流其实不是很容易适合做字符相关的操作，适合做二进制数据相关的操作。但是却是非常适合文件的复制，粘贴。 缓冲流我们之前的文件读写都是直接从硬盘上读取的，其实这种方式读取非常慢的；而我们现在要说的缓冲流这表明我们可以从内存中进行读取。 缓冲流包括：缓冲输入流BufferedInputStream和缓冲输出流BufferedOutputStream 缓冲输入流是不能直接直接读取文件系统中的数据的，它必须要和文件输入流进行结合。 缓冲区满了，会自动清空；不满则需要强制清空（你可以调用flush或者close方法）。 有时候我们会比较程序的运行时间，这时候我们可以使用：1long startTime =System.currentTimeMillis(); //获取当前的时间-1970年1月1日最后就是运行时间 字符流同样字符流也分为两种：字符输入流Reader和字符输出流 Writer 字节流和字符流它们主要的区别就是应用的场景不一样：java 字节流与字符流的区别 我网上找了2张图片，大家看一下关于字符流相关的信息： 字节字符转换流接下我们来谈谈字节字符转换流，顾名思义就是供字节字符转换用的（两者过渡的桥梁）：InputStreamReader和OutputStreamWriter：掌握OutputStreamWriter和InputStreamReader类的作用 对象序列化序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。简单点说就是把java对象转换为字节序列的过程。反序列就是和它相反的过程。 序列化步骤：1、创建一个类，然后实现Serializable接口；2、创建对象：将对象写入文件；3、从文件读取对象信息这个过程会涉及到两个流：对象输入流ObjectInputStream 和 对象输出流ObjectOutputStream Java基础学习总结——Java对象的序列化和反序列化 Java对象的序列化与反序列化 集合在前面我们好像有介绍过数组（又好像没有，不管了），我们知道数组用于固定长度的数据场景，而集合更适合数据动态变化的场景。 或者说集合更加适合应用于下列场景:1、无法预测存储数据的数量；2、同时存储具有一对一关系的数据(商品信息&amp;详情或者学生&amp;学号等)；3、需要进行数据的增删；4、数据不允许重复等 集合框架的体系结构集合框架一共分为两类：Collection和Map。其中Collection用于存储类的对象，而Map用于以键值对的形式来存储信息。 为了更好的理解，我从网上找了一张图片： Collection这个类下面有3个子接口，分别是List（序列），Queue（队列），Set（集）。其中，List（序列），Queue（队列）中存放的数据必须是有序的，并且是允许重复的；Set（集）存放的数据是无序的，且不允许重复的。每个接口下面又有许多的实现类。List的实例类是ArrayList（可以看做一个长度动态增长的数组）。Queue的实现类是LinkedList（它实现了List和Queue，也就是链表）。Set的实现类是HashSet，也就是哈希集。 Map这个类可以实现的类有HashMap，也就是哈希表。 List(列表)List：是元素有序并且可以重复的集合，称为序列或者列表。 List可以精确控制每个元素的插入位置或删除某个位置的元素。 List的两个主要实现类是ArrayList和LinkedList。这里我们主要介绍ArrayList类，因为这个类使用比较多。其实ArrayList和数组是比较相似的，只是它的长度可以动态增长，它其实也是内存上一片连续的存储空间进行存储。而LinkedList本身是一个链表，这两个中方法的作用是几乎相同的。 ArrayList底层是由数组实现的，它的长度是可以动态增长的，用来满足应用程序的需求。如果你要在在列表尾部插入或删除数据，那么使用ArrayList是非常有效的(如果中间插入或者删除会过多挪位，并不适合)。当然它还更适合查找和更新元素，最重要的一点就是ArrayList中的元素可以为null值。 我们即将要将的Collection都是存放于java.util 包中的，所以在使用的时候需要我们自己进行包的导入。 下面简单介绍List接口中几种常用的方法，以便于大家在用的时候得心用手： add()：向列表末尾添加元素；clear()：清空列表中元素；contains()：判断列表中是否包含指定的对象。 get()：返回此列表中指定位置的元素； indexOf ()：返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。 isEmpty() ：集合是否为空，空返回true； iterator ()：以正确的顺序返回该列表中的元素的迭代器；remove()：删除该列表中指定位置的元素；size()：返回此列表中的元素数；sort()：对列表进行排序。 接下来我们来看ArrayList这个类，你会发现它的方法其实和我们List这个接口的方法非常类似。其中ArrayList()是它的无参构造方法：构造一个初始容量为十的空列表；ArrayList(Collection &lt;? extends E&gt; c)是它的有参构造方法，它可以通过已存在的Collection来构造ArrayList。 记住列表的索引号是从零开始的，这一点很重要，需要特别注意。 我觉得学语言很多时候就得多看Api文档，这对自己自身能力的提高非常有帮助。 ArrayList案例分析双十一的时候，很多网站都会在其首页发布一些打折的消息，我们现在的任务就是模拟这个场景，要求如下：1、添加和显示信息；2、在指定位置处插入信息；3、删除消息；4、修改消息。条件：编号 id，标题 title，创建人 creator，创建时间 createTime。 博主是一个重度的Python爱好者，所以这些要求刚写的时候，就已经想到如何用Python中的list去实现相关功能了。所以，如果你也喜欢Python不妨来交流学习。 好了，有点跑题了，你自己先尝试通过查看api文档的方式，看看自己能否独立实现这些要求，之后再来查看结果吧。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package JavaCollectionTest;import java.util.Date;public class Notice &#123; //公告的添加和显示;在指定位置处插入公告;删除公告;修改公告 // 编号 id;标题 title;创建人 creator;创建时间 createTime private int id; private String title; private String create; private Date createTime; public Notice() &#123;&#125;; public Notice(int id, String title, String create, Date createTime) &#123; super(); this.id = id; this.title = title; this.create = create; this.createTime = createTime; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getCreate() &#123; return create; &#125; public void setCreate(String create) &#123; this.create = create; &#125; public Date getCreateTime() &#123; return createTime; &#125; public void setCreateTime(Date createTime) &#123; this.createTime = createTime; &#125;&#125; 我们再来看这个类的测试类：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package JavaCollectionTest;import java.util.ArrayList;import java.util.Date;public class NoticeTest &#123;public static void main(String[] args) &#123; // 创建Notice类的对象，我们先实例化3条信息 Notice notice1 =new Notice(1,&quot;欢迎来到啃饼小白的修炼之旅&quot;,&quot;啃饼小白&quot;,new Date()); Notice notice2 =new Notice(2,&quot;欢迎来到java的世界&quot;,&quot;管理员&quot;,new Date()); Notice notice3 =new Notice(3,&quot;世界那么大，我想出去看看&quot;,&quot;思录者&quot;,new Date()); // 将消息添加到ArrayList里面 ArrayList noticelist =new ArrayList(); noticelist.add(notice1); // 默认为末尾添加 noticelist.add(notice2); noticelist.add(notice3); // 消息的显示 System.out.println(&quot;消息的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;; System.out.println(&quot;****************************************************&quot;); // 在第一条消息后面添加一条消息 Notice notice4 =new Notice(4,&quot;努力与运动兼备&quot;,&quot;拾光小白&quot;,new Date()); noticelist.add(1,notice4); System.out.println(&quot;添加完消息以后的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;; System.out.println(&quot;****************************************************&quot;); // 删除编号为3的消息：欢迎来到java的世界// noticelist.remove(2); noticelist.remove(notice2); System.out.println(&quot;删除消息以后的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;; System.out.println(&quot;****************************************************&quot;); // 修改编号为3的消息：世界那么大，我想出去看看，中的我修改为你 notice3.setTitle(&quot;世界那么大，你想出去看看&quot;); System.out.println(&quot;修改消息以后的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;;&#125;&#125; 接下来我们来介绍集合中的另一个set。 set(集)Set是元素无序且不可以重复的集合，被称为集。而我们上面刚介绍的列表则是有序且重复的，这一点要弄清楚。 set是一个接口，而它的实现类是HashSet（哈希集）。哈希集中的元素是无序且不可以重复的。而且在HashSet中，只允许有一个null元素因此它具有良好的存取和查找性能。 由于HashSet中的方法和前面介绍的ArrayList中的差不多，因此这里就不再过多的介绍其方法了，而是直接通过一个例子来进行具体方法的使用： 不过在这之前，我需要告诉你的是hashset里面是没有提供用于元素输出的get()方法，但是呢，它提供了一个iterator()方法，用于对集合元素进行遍历。 Iterator (迭代器): Iterator接口可以以统一的方式对各种集合元素进行遍历。记住这个Iterator (迭代器)是存在于java.util包里面的。 迭代器有2个方法：hasNext()和next()。其中hasNext()方法用于检测集合中是否还有下一个元素，这个是遍历的终止条件；而另一个next()方法是用于返回集合中的下一个元素。 要求：用HashSet存储多个表示颜色的英文单词,并输出。其中单词包括: “blue”,”red”,”black”,”yellow”和”white”。1234567891011121314151617181920212223package JavaCollectionTest;import java.util.HashSet;import java.util.Iterator;public class HashSetDemo1 &#123;public static void main(String[] args) &#123; // 将英文单词添加到HashSet当中, &quot;blue&quot;,&quot;red&quot;,&quot;black&quot;,&quot;yellow&quot;和&quot;white&quot; HashSet hset =new HashSet(); hset.add(&quot;red&quot;); hset.add(&quot;blue&quot;); hset.add(&quot;black&quot;); hset.add(&quot;yellow&quot;); hset.add(&quot;white&quot;); System.out.println(&quot;集合中的元素为：&quot;); Iterator it =hset.iterator(); // 遍历迭代器并进行输出 while(it.hasNext()) &#123; System.out.print(it.next()+&quot;,&quot;); &#125;&#125;&#125; 现在有一个问题，如果你把一个已经重复的对象插入到集合里面，会发生什么情况呢？答案是不会报错，可以运行，但是你会发现其实你根本插入不进去。是的，集合就是这样。 我们现在又来举一个例子，这个例子会让你对上面的介绍生产模糊，但这是必要的： 案例：如何在HashSet中添加自定义类的对象?需求：1、添加和显示宠物猫信息；2、查找某只宠物猫的信息并输出；3、修改宠物猫的信息;删除宠物猫信息 其中属性为: 名字name；年龄month；品种species方法为: 构造方法；获取和设置属性值的方法；其他方法123456789101112131415161718192021222324252627282930313233343536package JavaCollectionTest;public class Cat &#123;private String name;private int month;private String species;public Cat(String name, int month, String species) &#123; super(); this.name = name; this.month = month; this.species = species;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;public int getMonth() &#123; return month;&#125;public void setMonth(int month) &#123; this.month = month;&#125;public String getSpecies() &#123; return species;&#125;public void setSpecies(String species) &#123; this.species = species;&#125;@Overridepublic String toString() &#123; return &quot; 姓名=&quot; + name + &quot;, 年龄=&quot; + month + &quot;, 品种=&quot; + species + &quot;&quot;;&#125;&#125; 以及测试类：1234567891011121314151617181920212223242526272829303132333435363738394041package JavaCollectionTest;import java.util.HashSet;import java.util.Iterator;public class CatTest &#123; public static void main(String[] args) &#123; // 定义宠物猫对象 Cat huahua = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;); Cat fanfan = new Cat(&quot;凡凡&quot;, 10, &quot;英国短毛猫&quot;); // 将对象添加到hashset中 HashSet hset = new HashSet(); hset.add(huahua); hset.add(fanfan); // 显示宠物猫信息 Iterator it = hset.iterator(); while (it.hasNext()) &#123; System.out.println(it.next()); &#125; System.out.println(&quot;*******************************************&quot;); // 添加一个与花花属性一模一样的猫 Cat huahua1 = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;); hset.add(huahua1); Iterator its = hset.iterator(); while (its.hasNext()) &#123; System.out.println(its.next()); &#125; &#125;&#125;// 输出结果： 姓名=花花, 年龄=12, 品种=中华田园猫 姓名=凡凡, 年龄=10, 品种=英国短毛猫******************************************* 姓名=花花, 年龄=12, 品种=中华田园猫 姓名=花花, 年龄=12, 品种=中华田园猫 姓名=凡凡, 年龄=10, 品种=英国短毛猫 你运行上面的代码，你会发现一个有趣的事，你在集合里面竟然添加了一条和花花一模一样的数据，说好的集合不能添加相同的数据，你仿佛在逗我玩？我被欺骗了，宝宝不开心了。。。。。。 其实刚才那句话是适合于字符串的，为什么这么说呢，那是因为字符串是系统提供给我们的类，它里面已经将数据重复的规则，也就是这两个对象是否完全一样（属性，方法等）已经定义好了。这个你可以类比到toString方法，你直接输出对象却是对象在内存中的地址，但是你输出字符串却是字符串的值，这其实也就是字符串里面已经重写了自己的toString方法。 所以呢，如果你也希望自己定义的类也具有相似的功能，那么你需要重写hashCode()和equals()方法。我们知道equals()在字符串中是判断两个对象的值是否相等。在java里面，hashCode是与哈希表有关的，这是数据结构的知识，我这里简单说明一下。 举个例子，假如你要存储100个数字，如果你使用前面ArrayList或者数组来存储，而不是哈希表的话，在内存中连续的开辟一个空间用来存放数据，这似乎是可以的，但是一旦要是查找你就不行了。假设你要查找的数据在第100个位置，又或者说是不存在的，但你还是得从头开始查找，这样太浪费时间了。 那么如何利用哈希表来存储上述数据呢？我们可以这样：在内存中开辟3个区域来进行存放，同时为这3个区域进行编号和命名为桶0，桶1，桶2。然后我们制定一些规则用于桶里面数据的存放，而这些规则就是hashCode。假设我们定义的hashCode为n%3也就是利用数对3进行取余，来进行判断。那么桶0，桶1，桶2存放的数据分别是3的倍数，对3取余数加1，对3取余数加2。 有了这样的存储结构，我们首先是判断这个数是不是在这个桶里，然后是在哪个桶里，然后就去遍历这个桶里的元素。判断元素在哪个桶里，我们使用的是hashCode()方法，而判断桶里哪一个元素是我们要找的，则是使用equals()方法。这种方法真的好快。 下面是系统生成的equals方法，我觉得很麻烦，那么你自己是可以重写的：12345678910111213141516171819202122public boolean equals(Object obj) &#123; if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Cat other = (Cat) obj; if (month != other.month) return false; if (name == null) &#123; if (other.name != null) return false; &#125; else if (!name.equals(other.name)) return false; if (species == null) &#123; if (other.species != null) return false; &#125; else if (!species.equals(other.species)) return false; return true;&#125; 重写后的equals方法是：12345678910public boolean equals(Object obj) &#123; if(this==obj) // 判断对象是否相等，相等则返回true，没必要继续比较属性 return true; if (obj.getClass()==Cat.class) // 判断obj是否是Cat类的对象，是进行强制转换，进行对象属性的比较 &#123; Cat cat = (Cat)obj; return (cat.getName().equals(name))&amp;&amp;(cat.getMonth()==month)&amp;&amp;(cat.getSpecies().equals(species)); &#125; return false;&#125; 重写了这两个方法以后，现在你再来运行我们的测试类，你会发现花花这个重复对象是不能再次添加进去了。 现在我们想查找花花的信息，我们有多种方式，第一种是通过花花这个对象：1234567// 在集合里面查找花花的信息并进行输出 if(hset.contains(huahua)) &#123; System.out.println(&quot;花花找到了&quot;); System.out.println(huahua); &#125;else &#123; System.out.println(&quot;对不起，花花没有找到&quot;); &#125; 第二种是通过花花的名字来查找花花的信息并进行输出：12345678910111213141516171819// 在集合里面使用名字来查找花花的信息并进行输出 boolean flag =false; its = hset.iterator(); Cat cat =null ; while(its.hasNext()) &#123; // 判断是否有下一个对象 cat=(Cat)its.next(); // 输出下一个对象的信息 if(cat.getName().equals(&quot;花花&quot;)) &#123; flag =true; break; &#125; &#125; if(flag) &#123; System.out.println(&quot;花花找到了&quot;); System.out.println(cat); &#125;else &#123; System.out.println(&quot;花花没有找到&quot;); &#125; &#125; 说完了hsahset，接下来我们来聊聊map的那些事。 MapMap中的数据是以键值对( key-value )的形式存储的，这个和Python中的dict（字典）很相似。 key-value以Entry类型的对象实例存在，而MAp.Entry本身也是一个接口；你可以通过key值来快速地查找value的值。 一个key-value的映射不能包含重复的键（Key的值必须是唯一的），但是Value是可以重复的。每个键最多只能映射到一个值。 同样这个Map接口中最常用的实现类是HashMap类，我们前面说过HashSet是基于HashMap而实现的。 HashMap是基于哈希表的Map接口的实现，它允许使用null值和null键（但是只能有一个） key值不允许重复，HashMap中的Entry对象是无序排列的。 Map接口，HashSet 泛型有一个类，Map&lt;&gt;后可以有key的类型以及Value的类型。 entrySet获取键值对所有的内容，你可以通过get(key)取Value。keySet取出所有key值。HashMap中使用put添加元素，remove根据key值来移除元素。 HashMap中构造方法，默认容量16，加载因,0.75 ；你可以使用已存在map集合创建HashMap。 关于这一块，大家还是多看看api文档，多自己动手操作吧。 需求：完成一个类似字典的功能：1、将单词以及单词的注释存储到HashMap中；2、显示HashMap中的内容；3、查找某个单词的注释并显示。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package JavaCollectionTest;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Scanner;import java.util.Set;public class DictionaryDemoTest &#123;public static void main(String[] args) &#123; Map&lt;String,String&gt; animal =new HashMap&lt;String,String&gt;(); System.out.println(&quot;请输入三组单词对应的注释，并存放到HashMap当中：&quot;); Scanner console =new Scanner(System.in); int i=0; while(i&lt;3) &#123; System.out.println(&quot;请输入key值(单词)：&quot;); String key =console.next(); System.out.println(&quot;请输入value值(注释)：&quot;); String value =console.next(); animal.put(key, value); i++; &#125; // 打印输出value的值（使用迭代器） System.out.println(&quot;*************************&quot;); System.out.println(&quot;使用迭代器输出所有的value的值：&quot;); Iterator&lt;String&gt; it =animal.values().iterator(); while(it.hasNext()) &#123; System.out.print(it.next()+&quot; &quot;); &#125; System.out.println(&quot;*************************&quot;); // 打印输出key和value的值 // 通过entrySet方法得到key-value System.out.println(&quot;通过entrySet方法得到key-value：&quot;); Set&lt;Entry&lt;String,String&gt;&gt; entrySet =animal.entrySet();// 使用增强型for循环进行遍历 for(Entry&lt;String,String&gt; entryset:entrySet) &#123; System.out.print(entryset.getKey()+&quot;-&quot;); System.out.println(entryset.getValue()); &#125; System.out.println(); System.out.println(&quot;*************************&quot;); // 通过单词找到注释并输出 // 使用KeySet方法 System.out.println(&quot;请输入你要查找的key(单词)&quot;); String keySearch =console.next(); // 1、取得KeySet Set&lt;String&gt; KeySet =animal.keySet(); //2、遍历KeySet boolean flag =false; for(String key:KeySet) &#123; if(key.equals(keySearch)) &#123; System.out.println(&quot;找到了&quot;+&quot;键值对为：&quot;+key+&quot;-&quot;+animal.get(key)); flag=true; break; &#125; &#125; if(!flag) &#123; System.out.println(&quot;对不起，没有找到&quot;); &#125;&#125;&#125; 最后，我们再来看一个例子：商品信息管理的HashMap实例。 需求：使用HashMap対商品信息迸行管理：其中key是商品编号, value是商品对象；你需要对HashMap中的商品信息迸行増、刪、改、査操作。 要求：分析商品信息类:属性：商品编号: id；商品名称: name；商品价格: price方法：构造方法，获取和设置属性值的方法和其他方法。 123456789101112131415161718192021222324252627282930313233343536373839package JavaCollectionTest;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Scanner;import java.util.Set;public class GoodsTest &#123; public static void main(String[] args) &#123; Scanner console = new Scanner(System.in);// 定义HashMap对象 Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;(); System.out.println(&quot;请输入三条商品信息:&quot;); int i = 0; while (i &lt; 3) &#123; System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;); System.out.println(&quot;请输入商品的编号:&quot;); String goodsId = console.next(); System.out.println(&quot;请输入商品的名称:&quot;); String goodsName = console.next(); System.out.println(&quot;请输入商品的价格:&quot;); float goodsPrice = console.nextFloat(); // 将商品信息添加到HashMap当中 Goods goods = new Goods(goodsId, goodsName, goodsPrice); goodsMap.put(goodsId, goods); i++; &#125; // 遍历HashMap并输出商品的信息 System.out.println(&quot;输出商品的全部信息:&quot;); Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator(); while(itGoods.hasNext()) &#123; System.out.println(itGoods.next()); &#125; &#125;&#125; 这是初始的代码，这个代码尽管能运行，但是实际上运行的问题还是很多的：商品编号不可以重复（后面对前面的信息进行了覆盖）；类型输入错误。接下来我们就对这些进行修改：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package JavaCollectionTest;import java.util.HashMap;import java.util.InputMismatchException;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Scanner;import java.util.Set;public class GoodsTest &#123; public static void main(String[] args) &#123; Scanner console = new Scanner(System.in);// 定义HashMap对象 Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;(); System.out.println(&quot;请输入三条商品信息:&quot;); int i = 0; while (i &lt; 3) &#123; System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;); System.out.println(&quot;请输入商品的编号:&quot;); String goodsId = console.next(); // 判断商品编号id是否存在 if(goodsMap.containsKey(goodsId)) &#123; System.out.println(&quot;该商品编号已经存在，请重新输入&quot;); continue; &#125; System.out.println(&quot;请输入商品的名称:&quot;); String goodsName = console.next(); float goodsPrice = 0; System.out.println(&quot;请输入商品的价格:&quot;); try &#123; goodsPrice = console.nextFloat(); &#125;catch(InputMismatchException e) &#123; System.out.println(&quot;商品价格的格式不准确，请输入数值型数据&quot;); console.next(); continue; &#125; // 将商品信息添加到HashMap当中 Goods goods = new Goods(goodsId, goodsName, goodsPrice); goodsMap.put(goodsId, goods); i++; &#125; // 遍历HashMap并输出商品的信息 System.out.println(&quot;输出商品的全部信息:&quot;); Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator(); while(itGoods.hasNext()) &#123; System.out.println(itGoods.next()); &#125; &#125;&#125; 总结 我们通过这张图片，来简单的对集合进行一下总结。 我们知道Collection这个接口是有3个实现接口的，list，queue和set，而每个接口下面都有其实现的类。 Arraylist：底层由数组实现，它的元素是有序且可以重复的，它可以动态增长，以满足应用程序的需求。值得注意的是，ArrayList的元素值可以为null。 HashSet：是Set接口的实现类，它的元素是无序且不可以重复的，不过只允许一个null元素 HashMap：以键值对存储的数据，里面的键不能重复，但是允许使用null值和null键 。HashMap中的Entry对象(键值对)是无序排列的。 也就是说上面3个只有第一个是有序的，其它两个都是无序的。 Iterator (迭代器) ：Iterator接口以统一的方式对各种集合元素进行遍历。12345Iterator&lt;String&gt; it=set.iterator();while(it.hasNext())&#123; // 判断迭代器下一个是否有内容 System.out.print(it.next()+&quot; &quot;); // 取出存在的数据&#125; 我们在String对象比较的是按照ASCII值进行对比的，如果要比较我们自己定义的类呢？就必须重写我们的hashCode()方法和equals方法。如果两者的hashCode不同，那肯定不是一个对象，后面不需要使用equals方法；如果hashCode相同，我们再去调用equals方法，比较对象的其他属性或方法是否相同。 本来这里应该介绍泛型的，但是考虑到篇幅的原因，下次再介绍。","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（六）：包装类和多线程","slug":"关于JAVA你必须知道的那些事（六）：包装类和多线程","date":"2018-08-04T13:30:42.000Z","updated":"2019-04-13T13:31:19.921Z","comments":true,"path":"2018/08/04/关于JAVA你必须知道的那些事（六）：包装类和多线程/","link":"","permalink":"http://licheetools.github.io/2018/08/04/关于JAVA你必须知道的那些事（六）：包装类和多线程/","excerpt":"","text":"我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。 那么我们如何让它和我们的对象一样，具有属性和方法呢？这里你就要用到包装类了。 包装类的产生就是为了解决基本数据类型存在的上述问题。通过包装类可以让基本数据类型获取对象一样的特征，拥有属性方法，行使对象一样的权益，从而完成对象化交互。 包装类与基本数据类型之间的对应关系，见下面的表格：基本数据类型| 对应的包装类| 说明 | :-: |-:byte| Byte|原始大写short |Short|原始大写int |Integer|变形long| Long|原始大写float |Float|原始大写double| Double|原始大写char |Character|变形boolean |Boolean|原始大写注意：只有int 和char其基本数据类型与对应的包装类有一个变形以外，其余的都是其首字母的大写而已。 所有的包装类都存在于java.lang中，而且都是被final关键字所修饰，也就是说所有的包装类是没有子类的，不可以被继承的。 所有的数值型（byte,short,int,long,float,double,）都是继承自Number的： 余下的char 和 boolean是继承Object类的： 基本数据类型和包装型之间的转换基本数据类型—–》包装型（装箱）；包装型—–》基本数据类型（拆箱）； 装箱装箱：把基本数据类型转换成包装类，有自动装箱和手动装箱两种，下面分别说明：123456789101112131415// 自动装箱 int a1 =1;Integer a2=a1; // 手动装箱Integer a3 =new Integer(a1);System.out.println(&quot;基本数据类型a1的值是：&quot;+a1);System.out.println(&quot;Integer类a2的值是：&quot;+a2);System.out.println(&quot;Integer类a3的值是：&quot;+a3);//输出结果：基本数据类型a1的值是：1Integer类a2的值是：1Integer类a3的值是：1 拆箱拆箱：把包装类转换成基本数据类型，也有自动拆箱和手动拆箱两种，下面分别说明：1234567891011121314151617181920// 自动拆箱 int a4 = a1;// 手动拆箱Integer a5 = a3.intValue(); // 测试System.out.println(&quot;Interger：&quot; + a1);System.out.println(&quot;基本数据类型a4是：&quot; + a4);System.out.println(&quot;手动intValue：&quot; + a5); double a6 = a2.doubleValue();System.out.println(&quot;手动拆箱 double: &quot;+a6);//输出结果：Interger：1基本数据类型a4是：1手动intValue：1手动拆箱 double: 1.0 基本数据类型和字符串之间的转换12345678910111213141516171819// 基本数据类型转换为字符串 // 将整型转换为字符串int a1 =9;String a2 =Integer.toString(a1); //测试System.out.println(&quot;int类型转换为String类型对象a2的值：&quot;+a2);System.out.println(&quot;******************************&quot;); //字符串转换为基本数据类型// 1、包装类的parse方法int a3 =Integer.parseInt(a2); //2、包装类的valueOf方法，现将字符串转换为包装类，再通过自动拆箱完成基本数据类型的转换int a4 =Integer.valueOf(a2);System.out.println(&quot;String类型对象转换为int类型a3的值：&quot;+a3);System.out.println(&quot;String类型对象转换为int类型a4的值：&quot;+a4); 总结一下，你可以通过toString方法将基本数据类型转换为字符串。 同样可以通过Parse和valueOf将字符串转换为基本数据类型。需要注意的是，valueOf是对Parse的封装。 包装类的几点说明我们前面好像有说过基本数据类型的默认值，这里重新贴一下： 基本数据类型 默认值 说明 byte 0 short 0 int 0 long 0L float 0.0f double 0.0d char ‘\\u0000’ \\u是指Unicode编码 boolean false 那么现在问题来了，我们定义一个Integer类型的对象one ,它的初始值是不是也是0呢?答案不是0,而是null，因为此时Integer和String一样，都是类，其初始值为null。 包装类的对象信息我们先来看一段代码，你先试着猜一下它的运行结果，然后参看输出结果，看看有什么体会：12345678910111213141516171819202122public class ChangLiangTest &#123;public static void main(String[] args) &#123; Integer one =new Integer(100); Integer two =new Integer(100); System.out.println(&quot;one==two的结果：&quot;+(one==two)); //1 Integer three =100; System.out.println(&quot;three==100的结果：&quot;+(three==100)); //2 Integer four =100; System.out.println(&quot;three==four的结果：&quot;+(three==four)); //3 Integer five =200; System.out.println(&quot;five==200的结果：&quot;+(five==200)); //4 Integer six =200; System.out.println(&quot;five==six的结果：&quot;+(five==six)); //5 &#125;&#125; 我们在前面说过，使用new关键词就是直接在内存中开辟一个新的空间，one和two 只是值相等，内存中地址的引用并不相同，因此1输出的结果必然是false。 Integer three =100其实是自动装箱，而后面的three =100其实是自动拆箱，实际上执行的是Integer three =Integer.valueOf(100)，最后比较的则是2个int类型的值是否相等，因此结果必然为true。 前面说过Integer four =100是自动装箱，但是它实际上执行的是Integer four=nteger.valueOf(100);。而valueOf会自动缓存值（在缓存区或者说对象池里面），也就是说当-128&lt;参数&lt;127的时候，该参数会直接从缓存区获取。因此两者比较的是来自缓存区的同一块地址。显然该结果是true。 同样Integer five =200是自动装箱，后面five==200自动拆箱，因此这里比较的则是2个int类型的值是否相等。显然该结果是true。 而最后一个则是因为参数200，它已经超出-128&lt;参数&lt;127这个范围，因此会直接实例化new 一个Integer，所以比较的是两个内存中的对象，显然结果是false。 123456// 输出结果：one==two的结果：falsethree==100的结果：truethree==four的结果：truefive==200的结果：truefive==six的结果：false 也就是说，当参数在-128 到 128之间才能从对象池中进行获取，超出则是不可以的，需要new了。 在java基本数据类型的包装类中除了 float 和 double都是可以应用对象常量池概念的。 上面那样说你可能还不明白，我举个例子：12345Double d1 =Double.valueOf(100);System.out.println(&quot;d1==100的结果是：&quot;+(d1==100)); //1Double d2 =Double.valueOf(100);System.out.println(&quot;d1==d2的结果是：&quot;+(d1==d2)); //2 1的输出结果为true这是没有任何问题的，但是2的输出结果是false，因为float 和 double是不适用于对象常量池的。 多线程在说多线程之前，我么先来了解什么是进程？ 进程就是可执行程序并存放在计算机存储器的一个指令序列，它是一个动态执行的过程。 线程是比进程还要小的运行单位，一个进程包含多个线程，你可以把线程看做一个子程序。 我们知道程序的运行是靠CPU的，那么在只有一个CPU情况下，如何才能保证程序的正常运行呢？我们可以把CPU的运行时间进行分片，根据时间片来进行任务的轮转执行，但由于时间片的长度太短了，以至于我们认为所有任务都是同时进行的。 Thread和Runnable接口介绍如何进行线程的创建呢？在Java里面，你可以通过创建一个Thread类或者一个Thread子类的对象来创建线程。也可以创建一个实现Runnable接口的类的对象。这两种都是可以的。 Thread是-个线程类，位于java.lang包下面，你可以去api文档进行查看，这里列举部分构造方法：构造方法 | 说明| 备注 | :-: | -:Thread()| 创建一个线程对象|Thread(String name) |创建一个具有指定名称的线程对象|Thread(Runnable target) |创建一个基于Runnable接口实现类的线程对象|Thread(Runnable target,String name)| 创建一个基于Runnable接口实现类,并且具有指定名称的线程对象。| 以及Thread类的常用方法：方法 | 说明| 备注 | :-: | -:public void run() |线程相关的代码写在该方法中，一般需要重写public void start() |启动线程的方法public static void sleep(long m) |线程休眠m毫秒的方法public void join() |优先执行调用join()方法的线程 你只需要记住，我们所有线程实现的代码都必须放在run方法里面，自然run方法中的代码被称为线程体。 还需要注意的是Runnable接口，它只有一个方法run()方法。你只需要记住Runnable是Java中用以实现线程的接口，任何实现线程功能的类都必须实现Runnable接口。 你可以点击这里查看Java8 api，获取更多信息。 通过Thread类创建线程在api里面，我们知道通过Thread类是可以创建线程的。那么我们现在就来通过继承Thread类的方式创建线程类，并重写run()方法。123456789101112public class ThreadTestDemo extends Thread &#123;public void run() &#123; System.out.println(getName()+&quot;该线程正在执行！&quot;);&#125;;public static void main(String[] args) &#123;// System.out.println(&quot;主线程1正在执行&quot;); ThreadTestDemo ttd =new ThreadTestDemo();// ttd.start(); // 启动线程 ttd.start(); //线程只能启动一次，不能多次启动// System.out.println(&quot;主线程2正在执行&quot;);&#125;&#125; 大家知道除了我们刚才自定义的线程，其实还有一个主线程。现在我们自己来定义两个线程：12345678910111213141516171819202122class MyThread extends Thread &#123; public MyThread(String name) &#123; super(name); &#125;; public void run() &#123; for(int i=0;i&lt;10;i++) &#123; System.out.println(getName()+&quot;正在运行第&quot;+i+&quot;次&quot;); &#125;; &#125;;&#125;;public class ThreadTestTwo &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub MyThread t1 =new MyThread(&quot;线程1&quot;); MyThread t2 =new MyThread(&quot;线程2&quot;); t1.start(); t2.start(); &#125;&#125; 这个其实和我们上面的例子差别不是很大，只是现在我们定义了两个线程，但是主线程依然存在。运行一下，你会发现你每次的运行结果都是不相同的。对的，无论是线程还是进程，它们的运行顺序都是由系统来调度的，不是由程序员所能决定的（注意这是没有附加方法的情况，后面会说线程间的通信） 实现Runnable接口创建线程现在你可能有一个疑问，为什么要实现Runnable接口呢又或者说为什么要实现Runnable接口创建线程呢? 答案你肯定知道，因为Java是单继承的，不支持多继承。现在问题来了，如果我现在定义的类已经继承了一个类，那么就不能通过继承Thread类来创建线程了？ 又或者说，我不想重写Thread类的其他方法，只想使用run方法，这时候怎么办呢？ 这时候Runnable接口就派上用场了。（前面说过Runnable接口只有一个run方法） 12345678910111213141516171819202122class TestRunnable implements Runnable&#123; @Override public void run() &#123; // TODO Auto-generated method stub System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;); &#125;&#125;;public class ThreadRunnableTest &#123;public static void main(String[] args) &#123; TestRunnable tr =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t1 =new Thread(tr); t1.start(); TestRunnable tr2 =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t2 =new Thread(tr2); t2.start();&#125;&#125; 这个输出结果也是随机的，但都会输出打印20个线程。现在我们对其修改一下，我们看一下，是不是多个线程可以共享同一个变量（言外之意，是不是只能打印输出11个线程，还有主线程）：12345678910111213141516171819202122232425262728293031323334353637class TestRunnable implements Runnable&#123; int i=0; @Override public void run() &#123; // TODO Auto-generated method stub for(;i&lt;10;i++) &#123; System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;); &#125;; &#125;&#125;;public class ThreadRunnableTest &#123;public static void main(String[] args) &#123; TestRunnable tr =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t1 =new Thread(tr); t1.start(); // TestRunnable tr2 =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t2 =new Thread(tr); t2.start();&#125;&#125;#输出结果Thread-0正在运行Thread-1正在运行Thread-0正在运行Thread-1正在运行Thread-1正在运行Thread-0正在运行Thread-0正在运行Thread-0正在运行Thread-1正在运行Thread-0正在运行Thread-1正在运行 结果是的，所以也就是说线程之间是可以共享成员变量的。 线程的状态和生命周期通常而言，线程是有五个状态的，分别是： 新建(New)：创建一个Thread或Thread子类的对象时就会进入新建状态。 可运行(Runnable)： 调用start方法是进入可运行状态（而不是立即执行），就绪状态 正在运行(Running)： 一个Thread获取了cpu使用权就进入了正在运行状态。记住只有可运行状态才能进入到正在运行状态，其他的不可以。 阻塞(Blocked): 不再执行，缺少资源。 终止状态(Dead)：这个就是线程的停止运行了。 所谓的线程的生命周期，说白了就是这五个过程的相互转换而已，不过有些过程是双向的，有些则是单向的。我找了一张图，便于大家的理解： 下面简单说一下这个图的意思： 当你创建线程对象以后，该线程就变成了新建(New)状态，如果该线程调用start()方法，那么就变成了可运行(Runnable)状态；如果该线程调用stop()方法，那么就变成了终止状态(Dead)。 现在线程处于可运行(Runnable)状态，如果此时该线程获取到了cpu的使用权，那么该线程就开心的进入到了正在运行(Running)状态；如果该线程调用了yield()方法，或者是时间片用完了，又回到了可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。 现在线程处于正在运行(Running)状态，如果此时调用join()，wait()，sleep()或者I/O操作时，均会使该线程进入阻塞(Blocked)状态；如果此时该线程正常执行完毕或者异常终止，又或者调用stop()方法，那么就变成了终止状态(Dead)。 现在线程处于阻塞(Blocked)状态，如果此时等待执行join()方法的线程执行完毕；或者调用notify()或notifyall()方法；sleep()超时；I/O请求完成时，线程就会进入可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。 需要说明的是，stop方法已经过时了，并不提倡大家去用。 下面简单介绍几个方法的使用。 sleep方法的使用这个sleep方法是Thread类的一个方法，同时也是一个静态方法：1public static void sleep(long millis) sleep方法的作用是在指定的毫秒数内让正在执行的线程休眠(暂停执行)；其中的参数为休眠时间，单位是毫秒。 也就是说等休眠时间过了以后，程序才会继续执行。当你需要页面刷新或者计时的时候，这时候sleep就派上用场了。 join方法的使用同样这个join方法也是Thread类的一个方法，但它是一个实例方法，因为有final的修饰，因此这个方法是不能被重写的：1public final void join() join方法的作用是等待调用该方法的线程结束后才能执行，是用来抢占资源优先执行的。也就是说如果某个线程调用了这个join方法，那么后面的线程都必须等这个线程运行完成后才能运行。 同时join方法还有一个带参数的同名方法：1public final void join(long millis) 带参数的join()方法的作用是等待该线程终止的最长时间为millis，这个参数的单位是毫秒。 也就是说没有参数的join方法是谁调用了它，它就开始执行，而后面的程序就必须等它执行完毕以后才能继续进行；有参数的join方法就是谁调用了它，在规定的毫秒以内无论你有没有执行完毕，只要时间一过，后面的程序就会开始执行。说白了，这是固定时间等待和永久时间等待而已。 线程优先级现在你有一个想法，就是是否可以通过设置让某个线程优先执行呢?使用前面的join()方法尽管能完成部分要求，但还是想追求更加简单的方法。 这时候Java为线程类提供了10个优先级，优先级用整数1-10表示，超过该数字范围会抛出异常。 我们的主线程默认优先级为5，数字越大表示的优先级越高，当然你还可以使用优先级常量来进行优先级的表示： MAX_PRIORITY :线程的最高优先级10 MIN_PRIORITY :线程的最低优先级1 NORM_PRIORITY :线程的默认优先级5 我们可以使用下面提供的方法来对优先级进行操作： 方法 说明 备注 public int getPriority() 获取线程优先级的方法 public void setPriority(int newPriority) 设置线程优先级的方法 123456789101112131415161718192021222324252627282930313233class MyThreadTestTwo extends Thread&#123; private String name; public MyThreadTestTwo(String name) &#123; this.name =name; &#125;; public void run() &#123; for(int i=0;i&lt;10;i++) &#123; System.out.println(&quot;线程&quot;+name+&quot;正在运行第&quot;+i+&quot;次&quot;); &#125;; &#125;;&#125;;public class ThreadTestFive &#123; public static void main(String[] args) &#123; // 获取主线程的优先级 int mainPriority =Thread.currentThread().getPriority(); System.out.println(&quot;主线程的优先级为：&quot;+mainPriority); MyThreadTestTwo tt1 =new MyThreadTestTwo(&quot;线程1&quot;); MyThreadTestTwo tt2 =new MyThreadTestTwo(&quot;线程2&quot;); tt1.setPriority(10); //这与下面的代码的作用是一样的// tt1.setPriority(Thread.MAX_PRIORITY); tt2.setPriority(1);// tt2.setPriority(Thread.MIN_PRIORITY); tt1.start(); tt2.start();// System.out.println(&quot;主线程1的优先级为：&quot;+tt1.getPriority()); &#125;&#125; 如果你多运行上面的代码，你会发现并不是优先级大的线程先启动和执行。线程的执行和启动顺序，除了和优先级大小有关，还与操作系统调度，当前资源等有很大关系，是具有很强的随机性。 总结一下： 各个线程是通过竞争CPU时间而获得运行机会的； 各线程什么时候得到CPU时间，占用多久，都是不可预测的； 一个正在运行的线程在什么地方被暂停是不确定的。 也就是说到目前为止，我们还没有更好地办法来进行线程执行顺序的调度。 银行存取钱业务如果按照我们前面所说的线程执行顺序是随机的，而且运行的线程在什么地方被暂停是不确定的话（的确，这是真的情况），那么银行就会出现一个非常有意思的现象：你存钱和取钱的总金额会发生丢失的情况：假设你开始银行账户有2000块钱，你取了100，存进去200，余额是不是2100块，但是有可能你的余额是2000块，你的余额更新失败了。这是我们不想看到的情况，但实际上这种情况是存在的，但是银行通过一些方法，杜绝了这种事情的发送，现在我们就来看看这些方法。 为了保证在存款或取款的时候，不允许其他线程对帐户余额进行操作，银行会将操作对象进行锁定，也就是同一时刻只允许一个线程进行运行。 也其实就是使用了synchronized关键字，也就是线程同步。synchronized关键字可以用在：成员方法，静态方法和语句块里面。 123public synchronized void Test()&#123;&#125;public static synchronized void Test()&#123;&#125;synchronized(obj)&#123;......&#125; 使用关键字synchronized可以确保共享对象在同一时刻只能被一个线程访问，这种机制称为线程同步或者线程互斥。 线程间的通信线程间通信的常用方法： wait方法：中断方法的执行，使线程等待。 notify()方法: 唤醒处于等待的某一个线程,使其结束等待 notifyAll()方法: 唤醒所有处于等待的线程,使它们结束等待 建议使用notifyAll()，因为假如唤醒的单个线程还是我们刚休眠的生产线程，那么就会继续死锁，所以建议直接所有的等待线程。 详细介绍Java虚拟机（JVM）","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（五）：异常和字符串","slug":"关于JAVA你必须知道的那些事（五）：异常和字符串","date":"2018-08-03T13:28:49.000Z","updated":"2019-04-13T13:29:21.697Z","comments":true,"path":"2018/08/03/关于JAVA你必须知道的那些事（五）：异常和字符串/","link":"","permalink":"http://licheetools.github.io/2018/08/03/关于JAVA你必须知道的那些事（五）：异常和字符串/","excerpt":"","text":"异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。 异常异常:我们也称之为意外或者例外，它本质上就是程序上的错误。那么什么是错误呢？ 错误如果用定义来说，我可能说不清楚。但是在我们编写程序的过程中，错误是会经常发生的，通常会发生在编译期间和运行期间。（这也就是编译型语言和解释型语言的一个非常大的不同，编译型语言会多一个编译过程，所以出错误的概率就相对低很多） 常见的编译错误包括：括号没有正常的配对; 语句结束后少写了分号;关键字拼写错误，通常这种错误编译器会帮助我们进行检查，但是运行期间的错误，编译器就无能为力了，只能靠程序员自己了。 常见的运行时错误有：使用空的对象引用调用方法；数组访问时下标越界；算术运算时除数为0；类型转换时无法正常转换等。这些错误在编译时是没有错误提示的，只能靠自己把握了。 在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。 异常的分类异常可以理解为一种事件，它的发生会影响正常的程序运行流程。在Java中你可以通过Throwable来进行各种异常信息的描述。 Throwable是根类，它具有2个子类：Error和Exception。 Error：程序无法处理的错误，表示运行应用程序中较严重问题。通常是Java虚拟机问题(比如虚拟机错误：VirtualMachineError；内存溢出：OutOfMemoryError；线程死锁 ：ThreadDeath等)；它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。 对于设计合理的应用程序来说,即使确实发生了错误,本质上也不应该试图去处理它所引起的异常状况。 Exception是程序本身可以处理的异常，我们通常所说的异常处理就是处理这种类型的异常。 Exception又可以分为两大类:：非检查异常(Unchecked Exception)和检查异常(Checked Exception) 非检查异常：它是编译器不要求强制处置的异常，通常包括：RuntimeException（运行时异常）以及它的子类:：NullPointerException（空指针异常）；ArrayIndexOutOfBoundsException（数组下标越界异常 ）；ArithmeticException（算数异常）和ClassCastException（类型转换异常）等。 java程序在编译阶段是不会去检查上面这些RuntimeException（运行时异常）异常的。 而检查异常则是编译器要求必须处置的异常，比如: IO异常 IOException; SQL异常 SQLException等。 异常处理分类在Java应用程序中,异常处理机制为: 抛出异常和捕捉异常。异常必须要先被抛出，然后才能被捕获。 所谓抛出异常，它是指当一个方法当中出现异常，方法会去创建异常对象，并去交付给运行时系统来进行处理。 异常对象则是异常类型以及异常出现时的程序状态。 当程序运行时系统捕捉到这个异常，此时会去寻找合适的处理器，如果找到了，就会执行处理器的相关逻辑；如果始终没找到，程序就会终止运行。 对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同。 在Java中规定: 对于可查异常（检查异常(Checked Exception)）必须捕捉或者声明抛出；同时允许忽略不可查的RuntimeException(含子类)和Error(含子类)。 那么在java中，如何抛出异常和捕获异常呢？可以通过5个关键字来实现:：try catch finally throw throws。 try：将执行可能会产生异常的代码放在try里面； catch：用来捕获异常； finally：无论是否发生异常，finally里面的代码总能执行 try…catch…finally是一组：12345678910public void test()&#123; try &#123; //代码段1 //产生异常的代码段2 &#125;catch (异常类型 ex) &#123; //对异常进行处理的代码段3 &#125;finally&#123; //代码段4 &#125;&#125; try代码块后可接零个或多个catch代码块，但是如果没有catch块，那么必须跟一个finally块。说白了就是try要和catch或finally组合使用，不能单独使用。你知道的，如果没产生异常的代码，你捕获什么？ 如果有多个catch，记住要使用Exception放在最后一个，因为这个里面包含所有的你目前还未发现的异常。多个catch异常捕获的范围要满足自上而下，逐次增大的原则，否则小范围的异常会被大范围的覆盖哦。 一般情况下，finally里面的代码都会运行，但有时候你想提前停止代码运行，可以使用:1System.exit(1); 里面的状态码0代表正常退出,非0代表非正常退出（这里用了1代表，终止当前虚拟机的运行，使得程序无条件停止运行）。 也就是说，如果程序按照正常逻辑执行需要退出时，可以调用System.exit(0)。如果发生异常而退出，比如在catch块使用，那么会调用System.exit(1)。 return关键字在异常处理中的作用我们只需要记住一点：不管前面有多少个return，只要finally中有return，那么最终返回的就是finally中return的返回值。（前面的return则是按照异常捕获的顺序来返回） 使用throws声明异常类型throws：自动抛出异常类型，一次抛出很多个（多个之间用逗号隔开），在方法定义的时候被使用：123public void method() throws Exception1,Exception2,...,ExceptionN &#123; //可能产生异常的代码&#125; 也就是说，如果一个方法可能会出现异常，但没有能力处理这种异常，那么我们就可以在方法声明的时候使用throws来声明抛出异常。 举个例子：12345678910public static int test() throws ArithmeticException &#123; //声明可能会引发的异常，这里只声明异常，不去处理，谁调用谁处理 System.out.println(&quot;====运算开始====&quot;); Scanner scanner = new Scanner(System.in); System.out.print(&quot;请输入第一个数字: &quot;); int one = scanner.nextInt(); System.out.print(&quot;请输入第二个数字: &quot;); int two = scanner.nextInt(); System.out.println(&quot;====运算结束====&quot;); return one / two; &#125; 然后我们调用的时候来进行异常处理：12345678910public static void main(String[] args) &#123; try &#123; int result = test(); System.out.println(&quot;one和two的商是：&quot; + result); &#125; catch (ArithmeticException e) &#123; // TODO Auto-generated catch block System.out.println(&quot;除数不能为0&quot;); e.printStackTrace(); &#125;&#125; 注意你可以在throws声明异常的时候，尽量多考虑一些情况，然后可以在调用的时候利用surround with来进行异常的快速生成处理，这里快速生成的异常类型和你在throws抛出的类型一致。 当然，你完全可以直接抛出Exception，那样调用的时候处理就只需要直接处理Exception这个了。 还需要注意的一点就是，当throws后面直接跟Exception的时候，编译器会提示你当前方法可能会产生异常，因为Exception这个父类包含了出现检查异常的情况。但是如果你不是Exception，而是前面所列举的非检查异常，那么编译器就不会给你报错的。 说明白编译器只会对检查异常进行报错处理，但是对于非检查异常是不进行报错处理的。如果非要有一种对于非检查异常类似的报错处理，你可以使用文档注释来达到这个目的，但是报错处理不是编译器完成的，而是程序员自己发现的。 使用throw手动抛出异常throw：手动抛出异常，一次只能抛出一个异常，在方法体内被使用：throw用来抛出一个异常，如: throw new IOException()；而且throw抛出的只能是可Throwable类或者其子类的实例对象，不能是自己定义的，如: throw new String(“出错啦”)，这种明显就是错误的：1234567891011public void method()&#123; try &#123; //代码段1 throw new 异常类型(); &#125; catch(异常类型 e)&#123; //对异常进行处理的代码段2 &#125;finally&#123;// 需要执行的代码段3&#125;&#125; 你还可以，在抛出异常的地方通过throws关键字来标明异常的类型：1234public void method() throws 异常类型&#123; //代码段1 throw new 异常类型();&#125; 总结一下就是：1、通过try..catch包含throw语句，自己抛出异常，自己处理异常；2.、通过throws在方法声明出抛出异常类型，谁调用谁处理，调用者可以自己处理，也可以继续上抛，此时可以抛出与throw对象相同的类型或者其父类（但是不能是其子类）。 你可以通过throws声明将要抛出何种类型的异常，并通过throw将产生的异常进行抛出。 自定义异常尽管我们使用Java内置的异常类可以描述在编程时出现的大部分异常情况，但是还是有一些情况我们难以处理，这时候我们可以自定义异常，用来描述特定情况下产生的异常类型。 所谓自定义异常，说白了就是定义一个类，去继承Throwable类或者它的子类。然后其他的就和我们前面说过的一样。1234567891011121314151617181920212223242526272829303132public class CarTest extends Exception &#123;public CarTest() &#123; super(&quot;18岁以下，70岁以上的人不允许报考驾照&quot;);&#125;;&#125;public static void testAge() throws CarTest&#123; System.out.println(&quot;请输入你的年龄：&quot;); Scanner input = new Scanner(System.in); int age = input.nextInt(); if (age &lt; 18 || age &gt; 70) &#123; throw new CarTest(); &#125; else &#123; System.out.println(&quot;欢迎报考驾校&quot;); &#125; &#125;public static void main(String[] args) &#123; try &#123; testAge(); &#125; catch (CarTeste) &#123; // TODO Auto-generated catch block System.out.println(e.getMessage()); System.out.println(&quot;驾校前台人员不得办理相关业务&quot;); e.printStackTrace(); &#125;catch(Exception e) &#123; e.printStackTrace(); &#125;; 异常链这个顾名思义就是一系列的异常，前面捕获到了异常自己不处理而是向后面抛出，从而形成异常链。 为了更好的说明，我找了一个例子，大家可以看：12345678910111213141516171819202122232425262728293031323334353637public class TryDemoFive &#123; public static void testone() throws HotelAgeTest &#123; throw new HotelAgeTest(); &#125;; public static void testtwo() throws Exception &#123; try &#123; testone(); &#125; catch (HotelAgeTest e) &#123; // TODO Auto-generated catch block throw new Exception(&quot;我是新产生的异常1&quot;); &#125; &#125;; public static void testthree() throws Exception &#123; try &#123; testtwo(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block throw new Exception(&quot;我是新产生的异常2&quot;); &#125; &#125;; public static void main(String[] args) &#123; try &#123; testthree(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; 在上面的例子中，testone手动抛出了一个异常，但是没有处理，而是向后抛出，testtwo虽然进行了处理，但是又抛出了一个新的异常，testthree也是这样，之后最后的main方法里对testthree的异常进行了处理，并且进行了输出。 所以这段代码的运行结果就是下面的结果，只打印输出了testthree的信息，其他却没有，实际上这就造成了前面异常信息的丢失：123java.lang.Exception: 我是新产生的异常2 at JavaExceptionTest.TryDemoFive.testthree(TryDemoFive.java:23) at JavaExceptionTest.TryDemoFive.main(TryDemoFive.java:29) 那么如何解决这种异常的丢失呢？从而让异常链的情况为我们所知呢，你可以在构造方法中添加上一层异常e或者使用initCause(e)就可以了。1234567891011121314151617181920public static void testtwo() throws Exception &#123; try &#123; testone(); &#125; catch (HotelAgeTest e) &#123; // TODO Auto-generated catch block throw new Exception(&quot;我是新产生的异常1&quot;,e); &#125; &#125;;public static void testthree() throws Exception &#123; try &#123; testtwo(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block// throw new Exception(&quot;我是新产生的异常2&quot;,e); Exception e1 =new Exception(&quot;我是新产生的异常2&quot;); e1.initCause(e); &#125; &#125;; 也就是说，异常链将异常发生的原因一个传一个串起来，把底层的异常信息传给上层，这样逐层抛出。 异常总结 在Java中, 通过Throwable及其子类描述各种不同的异常类型。其中这个Error是我们无法预测的，但是Exception却是我们可以避免的。Exception又分为2类，一个是运行时异常（非检查异常），这种编译器是不会给你报错的，另一种异常是则是编译器强制你去处理的异常。 几点建议：1、处理运行时异常时,采用逻辑去合理规避同时辅助try-catch处理；2、在多重catch块后面,可以加一个catch(Exception)来处理可能会被遗漏的异常；3、对于不确定的代码,也可以加上try-catch ,处理潜在的异常；4、尽量去处理异常,切忌只是简单的调用printStackTrace()去打印输出；5、具体如何处理异常,要根据不同的业务需求和异常类型去决定；6、尽量添加finally语句块去释放占用的资源，如关闭文件和数据库连接等。 最后一点：当子类重写父类抛出异常的方法时,声明的异常必须是父类方法所声明异常的同类或子类。 字符串创建字符串的3种方式：123String str1 =&quot;hello world&quot;;String str2 =new String();String str3 =new String(&quot;hello world&quot;); 字符串的常用方法及说明：返回类型| 方法| 说明 | :-: | -:int | length() | 返回当前字符串的长度int | indexOf(int ch) | 查找ch字符在该字符串中第一次出现的位置int | indexOf(String str) | 查找str子字符串在该字符串中第一次出现的位置int | lastIndexOf(int ch) | 查找ch字符在该字符串中最后一次出现的位置int | lastIndexOf(String str) | 查找str子字符串在该字符串中最后一次出现的位置String | substring(int beginIndex) | 获取从beginIndex位置开始到结束的子字符串String | substring(int beginIndex, int endIndex) | 获取从beginIndex位置开始到endIndex位置的子字符串String | trim() | 返回去除了前后空格的字符串boolean | equals(Object obj) | 将该字符串与指定对象比较，返回true或falseString | toLowerCase() | 将字符串转换为小写String | toUpperCase() | 将字符串转换为大写char | charAt(int index) | 获取字符串中指定位置的字符String [] | split(String regex, int limit) | 将字符串分割为子字符串，返回字符串数组byte [] | getBytes() | 将该字符串转换为byte数组 ==运算符与equals方法的区别我们在前面也说过，==运算符比较的是对象在内存中的引用地址，而equals方法的用法就需要分情况了，如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容） 因为这里谈的是字符串，因此可以说equals比较的是字符串的值是否相等。 内存空间：栈存放的是类的引用，常量池存放的是字符串常量，而堆里存放的则是通过new创建的字符串对象（在这里是这样的，我们这里只谈字符串） StringBuilderString和StringBuilder的区别:：String是不可变的，而StringBuilder则是可变的，因此当频繁操作字符串时，建议使用StringBuilder。 有人就要问了，不是还有一个StringBuffer么，那这个跟前面的有啥区别么？其实StringBuilder和StringBuffer二者基本上是一样的，但是StringBuffer是线程安全的,，而StringBuilder则不是，因此也正是因为这样，所以StringBuilder性能略高一点。因为字符串处理一般都是单线程，所以我们使用StringBulider就行了。 StringBuilder常用方法append()：在末尾增加内容；delete()：删除内容；insert()：插入内容；length()：返回字符串长度；replace()：替换内容。这些方法和Python中的容器操作是很相似的，这里就不再举例说明了。 后面的内容等我有空再更新了，这次就说到这里，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（四）：单例模式和多态","slug":"关于JAVA你必须知道的那些事（四）：单例模式和多态","date":"2018-08-02T13:27:57.000Z","updated":"2019-04-13T13:28:29.457Z","comments":true,"path":"2018/08/02/关于JAVA你必须知道的那些事（四）：单例模式和多态/","link":"","permalink":"http://licheetools.github.io/2018/08/02/关于JAVA你必须知道的那些事（四）：单例模式和多态/","excerpt":"","text":"好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。 设计模式官方的解释是，设计模式是：一套被反复使用，多数人知晓的，经过分类编目，代码设计经验的总结。说人话就是：软件开发人员在软件开发过程中面临的一般问题的解决方案。 常见的设计模式可以参看这张图片： 我们可以对其按照作用来进行分类:：关注对象创建过程的：创建型模式；类和对象组合：结构型模式；对象之间的通信过程：行为型模式； 单例模式单例模式: 一个类有且仅有一个实例,并且自行实例化向整个系统提供，它的目的就是使得类的一个对象成为该类系统中的唯一实例。 要点： 某个类只能有一个实例;； 必须自行创建实例； 必须自行向整个系统提供这个实例； 实现：1、只提供私有的构造方法；2、只含有一个该类的静态私有对象；3、提供一个静态的公有方法用于创建、获取静态私有对象。 对于1的理解：private是访问限制能力最强的修饰符，只能在当前类内被使用。也就是说经过private修饰，该类的对象在类外无法通过new关键字直接实例化，这样可以做到限制类实例化产生； 对于2的理解：1可以实现有且仅有一个实例，static修饰的静态成员可以满足该类有且仅有一个，所有的对象都共享这一个静态成员； 对于3的理解：类似于封装，必须向外部系统提供唯一的公有访问方法。 在java中实现单例模式有2种方式：饿汉式和懒汉式。 饿汉式：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）如此看来确实挺饿的； 懒汉式:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）如此看来确实挺懒的。 饿汉式饿汉式：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）： 123456789101112131415161718package SingleExample;// 饿汉式：创建对象实例的时候直接初始化；（空间换时间）public class SingletonOne &#123; //1、创建类中私有的构造方法 private SingletonOne() &#123; &#125;; //2、创建该类型的私有静态实例 private static SingletonOne instance = new SingletonOne(); //3、创建公有的静态方法，返回静态实例对象 public static SingletonOne getinstance() &#123; return instance; &#125;;&#125; 测试代码：12345678910111213package SingleExample;public class SingleOneTest &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub SingletonOne one =SingletonOne.getinstance(); SingletonOne two =SingletonOne.getinstance(); System.out.println(one==two); //输出结果为true &#125; &#125; 懒汉式懒汉式:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）： 1234567891011121314151617181920package SingleExample;//懒汉式：创建对象实例的时候并不初始化；（时间换空间）public class SingletonTwo &#123; // 1、创建类中私有的构造方法 private SingletonTwo() &#123; &#125;; // 2、创建静态的该类实例对象 private static SingletonTwo instance = null; // 3、创建公有的静态方法，提供实例对象 public static SingletonTwo getinstance() &#123; if (instance == null) &#123; instance = new SingletonTwo(); &#125; return instance; &#125;;&#125; 相应的测试代码为：1234567891011121314package SingleExample;public class SingleTwoTest &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub SingletonTwo one = SingletonTwo.getinstance(); SingletonTwo two = SingletonTwo.getinstance(); System.out.println(one == two); //输出结果为true &#125;&#125; 单例模式两种实现总结饿汉式在类加载时就创建实例，第一次加载速度快；懒汉式在第一次使用时才进行实例化，第一次加载速度慢； 饿汉式：空间换时间懒汉式：时间换空间 饿汉式，类在加载时进行了对象的实例化创建，即使多个进程进行并发操作，访问的实例也是唯一的，饿汉式线程安全。 懒汉式，第一次使用才会实例化，多个线程并发操作时，由于时间片的切换，可能导致线程风险。 但是懒汉式的线程危险是可以规避的，通过关键字Synchronized实现线程的锁定，也可以通过静态内部类和枚举保证操作时的线程唯一。 单例模式优缺点及使用场景单例模式的优点：1、在内存中只有一个对象,节省内存空间；2、避免频繁的创建销毁对象, 提高性能；3、避免对共享资源的多重占用。 单例模式的缺点:1、扩展比较困难；2、如果实例化后的对象长期不利用,系统将默认为垃圾进行回收,造成对象状态丢失。 使用场景:1、创建对象时占用资源过多,但同时又需要用到该类对象；2、对系统内资源要求统一读写,如读写配置信息；3、当多个实例存在可能引起程序逻辑错误,如号码生成器； 每一种设计模式都是针对场景，针对某种具体问题的，具体场景应当进行具体分析，选用合适的设计模式。 多态终于开始进入多态的世界了，在这里你将全面了解多态的特点及使用。 多态你可以理解为不同类的对象对同一消息做出不同的响应。 一般而言，多态分为编译时多态和运行时多态这两种。 编译时多态：也称设计时多态，它是通过方法重载来实现的，编译器在编译状态可以进行不同行为的区分。 而运行时多态，则必须要求程序运行时，动态决定调用哪个方法。 我们通常在Java中的多态指的就是运行时多态。 实现多态的必要条件: 满足继承；父类引用指向子类对象 向上转型所谓的向上转型也指隐式转型（自动转型）。说通俗一点就是父类引用指向子类实例，它可以调用子类重写父类的方法以及父类派生的方法，但是无法调用子类特有方法。 举个例子，假如Dog这个类继承了我们Animal这个类，我们不仅可以这样：12Dog dog =new Dog();Animal animal =new Animal(); 你还可以这样：1Animal dog2 =new Dog(); 这就是将一个子类对象转型为一个父类对象，这个很好理解，对吧。 接下来我们来说一下，向下转型，顾名思义就是和向上转型相反的操作了，是的，你很聪明。 向下转型向下转型也称强制类型转换。它是子类引用指向父类实例，我们在之前就用过了，还记得我们在重写Object类的equals方法时，就将父类Object强制转换，然后才调用子类特有的方法。 向下转型并不是可以随便转换的，需要满足一定的转换条件。我们可以通过instanceof这个运算符来判断是否能进行强制类型转换。 通过上面的图片，我们可以很清楚的知道instanceof的作用就是判断左边对象是否是右边这个类的实例，如果是就返true，否则就返回false。 因此，我们在进行向下转型的时候，可以用instanceof来判断一个对象是否满足某个类的实例特征。满足，我们才进行类型转换，否则强制转换会报错。 总结一下：向上转型: 父类引用指向子类对象。即小变大。 向下转型: 子类引用指向父类对象。即大变小。 需要注意的是：父类中static修饰的方法允许被子类使用，但是不允许被子类重写，所以向上转型之后，只能调用到父类原有的静态方法。如果此时要用子类中的，只能通过向下转型来实现。 抽象类某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法，这样我们的抽象类就派上用场了。 抽象类可以避免子类设计的随意性，还可以避免父类无意义的实例化。 你只需知道，修饰抽象类要用abstract这个关键词，抽象类不可以直接被实例化。 抽象方法我们前面说过，父类只是规定子类拥有该项能力，但在父类中具体实现它是没有任何意义的，因此该方法应设置为抽象方法。1public abstract void test(); 你记住，抽象方法是不允许有方法体的，也就是不能有花括号。而且此时子类必须实现父类的抽象方法，如果你不实现，那么这个类就必须被设置为抽象类（不设置就会报错），然后由继承它的类去具体实现相应的方法。简单来说就是一句话：抽象方法中不允许包含方法体，子类需要重写父类的抽象方法。 一般抽象类适用于这种情况：1、父类中的实现没有意义；2、提醒子类必须要去自己实现自己的这个方法。 通常子类变多了之后，你新建一个类只要继承了抽象的父类，IDE会自动提醒你实现父类中的抽象方法的，你不实现就会报错。 抽象类和抽象方法的使用你可以使用abstract关键词来定义抽象类，抽象类不能被直接实例化，你可以通过向上转型完成对象实例，只能被继承。 abstract关键词定义抽象方法 ，你不需要具体实现也不能具体实现，也就是花括号不能有。 需要注意的是：抽象类可以没有抽象方法，但包含抽象方法的类一定是抽象类。 我们前面说过，当一个类继承抽象类，必须实现类中的抽象方法。如果不重写，则必须将该子类也变为抽象类，由其子类来实现，否则会报错。 注意：static final private 不可以和abstract同时出现（因为抽象方法是要在子类中进行重写的，而private只能在当前类被访问，final方法不允许被子类重写，static静态不允许被子类重写。）","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（三）：继承和访问修饰符","slug":"关于JAVA你必须知道的那些事（三）：继承和访问修饰符","date":"2018-08-02T13:26:44.000Z","updated":"2019-04-13T13:27:32.480Z","comments":true,"path":"2018/08/02/关于JAVA你必须知道的那些事（三）：继承和访问修饰符/","link":"","permalink":"http://licheetools.github.io/2018/08/02/关于JAVA你必须知道的那些事（三）：继承和访问修饰符/","excerpt":"","text":"今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。 继承继承：它是一种类与类之间的关系，通过使用已存在的类作为基础来建立新类。其中已存在的类称为父类(或基类); 建立的新类称为子类(或派生类)。简单的就是子类继承父类的非私有属性和方法。 需要注意的是，新定义的类可以选择继续使用父类的功能或者自己增加新的数据或新的功能，但不能选择性地继承父类。（要么继承所有（前提是非私有），要么就不继承） 只要能满足 “A is a B”的关系就可以形成继承关系，代码中是通过 extends 关键字来实现继承的。 特别注意：在java中只能继承一个父类(也就是单继承)，而且子类可以访问父类的非私有成员。这个和Python不一样，Python的继承可就灵活了。 我们知道子类继承了父类之后，可以访问父类的非私有成员；但是父类的私有成员，子类还是无法直接访问。如果我们想访问呢？可以通过父类暴露的公有方法来实现间接访问。 父类对象不可以访问到子类特有的方法或属性，同时父类不可以访问子类特有成员（那怕是公有的成员） 重载方法重载必须同时满足以下条件: 同一个类中;； 方法名相同，参数列表不同(参数顺序、个数、类型)； 方法返回值、访问修饰符任意； 与方法的参数名无关。12345678910111213141516171819202122232425public void printinfo() &#123; System.out.println(&quot;方法重载1&quot;);&#125;;public void printinfo(String name) &#123; System.out.println(&quot;方法重载2&quot;);&#125;;public String printinfo(String name, int age) &#123; return &quot;方法重载3&quot;;&#125;;public String printinfo(String age, String name) &#123; return &quot;方法重载4&quot;;&#125;;public String printinfo(int age, String name) &#123; return &quot;方法重载5&quot;;&#125;; // 与方法的参数名无关,加上下面的代码会和上面的 printinfo(int age, String name)造成重复而报错：public String printinfo(int size, String name) &#123; return &quot;方法重载5&quot;;&#125;; 重写方法重写也必须同时满足以下条件:1、在满足继承关系的子类中；2、方法名相同，参数列表相同(参数顺序、个数、类型)；3、方法返回值相同或者是子类类型（但不允许是Object类型，可以向下兼容，向上是不可以的）；4、访问修饰符的限定范围大于等于父类方法。 注意：在子类中是可以定义与父类重名的属性的，但这并不说明属性是可以重写的。 访问修饰符在Java里面一共包含4种访问修饰符，分别是：1、private：私有的；2、默认；3、protected：受保护的；4、public：公共的。 其中，private:只允许在本类范围中进行访问，离开了当前类就不允许访问； 默认: 允许在当前类，同包子类/非子类都可调用，跨包子类/非子类都不允许； protected:允许在当前类，同包中的子类/非子类都可以以及跨包子类调用。跨包的非子类不允许调用。 public:允许在任意位置访问。 按照前面的顺序，自上而下，访问范围越来越大；自下而上，限制能力越来越强： （同包包括同包子类与非子类；子类包括同包子类和跨包子类） 访问修饰符对方法重写的影响子类重写父类方法时，访问修饰符是允许改变的，要求是: 子类的访问范围必须大于等于父类的访问范围。也就是说如果父类访问修饰符是public，那么子类的访问修饰符也必须是public，其他的类似。 继承的初始化顺序继承后的初始化顺序如下： 父类静态成员 -&gt; 子类静态成员 -&gt; 父类对象的构造 -&gt; 子类对象的构造 一个问题: 访问修饰符影响成员加载顺序?静态成员优先于静态代码块执行? 访问修饰符不影响成员加载顺序,跟书写位置有关。如果把静态代码块写在静态变量的前面，那么先执行静态代码块。 super关键字如果子类继承并重写了父类的方法，那么我们通常调用的就是重写后的子类方法。如果需要调用父类的方法，我们可以使用super.方法来达到这个目的。 当然也可以使用super.属性来达到访问父类的非私有属性的目的。 尽管父类的构造方法的访问修饰符是public，但是它却不可以被子类继承和重写的。 虽然它两个不可以，但是它的存在却是非常必要的，因为子类对象的实例化要依赖于父类对象的构造方法(默认，无参或有参的构造方法)。 如果子类调用了自己有参的构造方法，而父类定义了有参和无参的构造方法，程序依然是调用父类无参的构造方法。也就是说，我们在子类的构造方法中没有显式标注的情况下，默认调用父类的无参构造方法，因此父类的无参构造方法很重要，一定要写，否则会影响子类的对象实例化。 如果子类构造方法中既没有显式标注,且父类中没有无参的构造方法,则引发编译错误。 我们可以使用super(参数)这种形式来调用父类允许被访问的其他构造方法，但是此时super()必须放在子类构造方法有效代码的第一行（必须是子类的构造方法（其他方法不行）的第一行（其他行不行））。 也就是说父类在实例化的时候会默认调用无参的构造方法（此时你不定义无参的构造方法是可以的），但是如果子类在实例化对象的时候没有显示标志（也就是会默认调用父类无参的构造方法），而此时父类其实是不存在无参的构造方法，所以会引发编译错误。 this和super的对比this:当前类对象的引用：1、访问当前类的成员方法；2、访问当前类的成员属性；3、访问当前类的构造方法；4、不能在静态方法中使用； super:父类对象的引用：1、访问父类的成员方法；2、访问父类的成员属性；3、访问父类的构造方法；4、不能在静态方法中使用； 注意：在调用构造方法时，this和super不能同时存在（前面说过两者都要求在第一行）。 Object类Object类是所有类的父类，这个其实和Python中差不多，在Python里面也是所有的类都继承于object这个基类。点这直接查看api：javase8api 一个类没有使用extends关键字明确标识继承关系,则默认继承Object类(包括数组)。123Class Object is the root of the class hierarchy.Every class has Object as a superclass. All objects, including arrays, implement the methods of this class. Object类存放于java.lang包中，这个包系统默认会为我们直接加载。 equals用法如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容） 因此我们不能这样说equals比较的两个对象的值，或者引用地址，但是我们却可以说”==”比较的却一定是两个对象的引用地址。 toString用法api告诉我们，toString最后返回的是下面这种形式：（包名.类名@内存中的哈希码）1getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode()) 同样的，子类如果没有重写Object类的toString方法，那么则会打印输出其在内存中的哈希码；而String类则重写了Object类的toString方法，所以打印输出其真实值。（言外之意，子类可以通过重写toString方法的形式，改变输出的内容） 还要说明的一点就是输出对象和对象.toString的效果是一样的，因为直接输出对象的时候其实是调用了对象.toString方法。 Final关键字当我们不希望某些类被继承，某些方法被重写或者某些数据被修改时，可以使用final关键字来实现这个目的。 如果某个类被final修饰，则表明该类不可以被继承，该类没有子类，public final class/final public class都可以，只要是放在class的前面就可以； 如果某个方法被final修饰，则表明该方法不可以被重写，但是并不影响子类去继承调用它（final不可以修饰构造方法）。 如果某个局部变量被final修饰，那么我们可以不用在声明的同时立马进行赋值，但是必须在使用之前进行赋值，一旦赋值就不能被修改； （方法内的局部变量的作用范围，从该行开始到所在大括号结束；而类的成员变量的作用范围取决于它前面的访问修饰符）； 如果某个成员变量被final修饰，我们同样不需要声明的同时进行立马赋值，但是必须在使用之前进行赋值，而且只能在构造方法或者类代码块(构造代码块)中进行赋值，一旦赋值就不能被修改；也就是说类中成员属性的赋值可以有三种方式： 1. 定义是直接初始化； 2. 构造方法; 3. 构造代码块（类代码块）。 注意: 当具有多个构造方法时，final关键字修饰的成员变量如果选择了在构造方法里面进行赋值，那么就需要在所有的构造方法里面进行赋值，但是不同构造方法是可以赋不同值的 final对数据类型的影响我们知道java 数据类型分为基本数据类型（byte,short,int,long,float,double,char,boolean） 和 引用数据类型(array,String,interface,自定义的类…) 基本数据类型是可以直接进行赋值的，而引用类型需要实例化该类的对象，然后才能给其对象进行赋值（String这个比较特殊，两种形式都是可以的） 我们知道基本数据类型在内存中存放的是数据本身，而引用数据类型在内存中存放的则是对象的引用地址。 下面的例子告诉我们，被final修饰的对象不可以修改它的引用地址，但是属性却是可以的：123final Test test=new Test(&quot;hello&quot;); // test=new Test (); Test.key=&quot;world&quot;; 总结一下就是：基本数据类型的变量其一旦被赋初值，就无法进行修改；而引用类型的变量只是在初始化之后不能再指向另一个对象，但是对象的内容却是可变的。 因此final可配合static使用，用来修饰方法和变量。通常是用于修饰配置信息等(因为这类信息只需要加载一次，而且后面不需要被修改)。言外之意，使用final修饰可以提高性能，但会降低可扩展性。 普通代码块，类代码块，构造代码块，静态代码块区别代码块都是一对大括号{}所括起来的内容。 普通代码块就是一对大括号{}所括起来的内容，只存在于类的方法之中； 类代码块和构造代码块是一个东西，就是直接在类中进行定义的，前面没有static进行修饰。构造代码块在创建对象时被调用，每次创建对象都会被调用，并且构造代码块的执行次序优先于类的构造方法。 静态代码块前面有static关键字进行修饰，它不能存在于任何方法体内，也不能直接访问实例变量和实例方法，需要通过类的实例对象来访问。 通常我们new一个对象，JVM要经过这样的初始化顺序：父类静态块&gt;子类静态块&gt;父类属性&gt;父类构造器&gt;子类属性&gt;子类构造器，这一系列的工作会消耗大量的内存和cpu。 具体的研究可以参看这里：详解java中的四种代码块。 java中的注解注解是JDK1.5版本引入的一个特性, 它可以声明在包、类、属性、方法、局部变量、方法参数等前面，作用就是对这些元素进行说明、注释。 按照运行机制来分类注解按照运行机制来进行划分，可以分为3部分:源码注解，编译时注解，运行时注解。 源码注解：只在源码.java文件中存在，编译成.class字节码文件就不存在了； 编译时注解：在源码.java文件和字节码.class文件中都存在； 运行时注解：在运行阶段还起作用,甚至会影响运行逻辑的注解。（spring框架中的@Autowired依赖注入的这种注解，它实现的就是在程序运行的过程当中自动的将外部传入的信息加载进去,它就是一种可以影响程序运行逻辑的运行时注解。） 按照来源来分注解按照来源来进行划分，可以分为3部分:JDK注解，第三方注解，自定义注解。 还有一种元注解，它是对注解进行注解的。 不行了，写着写着字数又超了，快4000字了，面向对象最后一个特性：多态，我还没说呢，下次吧，今天得滚去运动了。。。感谢你的赏阅。","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（二）：封装","slug":"关于JAVA你必须知道的那些事（二）：封装","date":"2018-08-01T13:25:15.000Z","updated":"2019-04-13T13:25:45.394Z","comments":true,"path":"2018/08/01/关于JAVA你必须知道的那些事（二）：封装/","link":"","permalink":"http://licheetools.github.io/2018/08/01/关于JAVA你必须知道的那些事（二）：封装/","excerpt":"","text":"时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。 类和对象在这之前，我们先了解什么是对象，已经什么是面向对象？对象：万物皆对象，现实中实际存在的事物都可以看成一个对象。而面向对象就是人在关注对象， 关注事物的信息。那什么是类？类就是模子，通常用于确定对象将会拥有的特征(属性)和行为(方法)。也就是说对象是类的具体存在，而类则是对象的抽象化。苹果是一个类，你手里拿的苹果就是一个实例化的对象。 刚才说了对象具有属性和方法，那么属性和方法又是什么呢？属性就是对象具有的各种静态特征，通常用来说明对象有什么；而方法就是说明对象具有的各种动态行为，也即对象能做什么。 假如我有一辆吉普车，它的颜色，价格，型号就是属性；而它能加速，减速，停止就是具有各种方法。 创建类的一般步骤为：创建类==》实例化对象==》书写具体的逻辑。 通常我们在书写类的时候，都需要遵循单一职责原则(单一功能原则)，也就是说 一个类应该有且只有一个引起功能变化的原因。如果在一个类当中承担的功能越多，那么它的交融，耦合性就越高，被复用的可能性就越低。特别是因为耦合度高，可能会因为一个职责的变化，引起其他职责的变化，进而影响整个程序的运行，这一点是我们所不想看到的。 实例化对象的过程可以分为三步：声明对象，实例化对象，将两者进行绑定。其中声明对象是在栈内存中开辟了一块内存空间，但此时还不是一个有效的对象，因为此时对象的空间里是空的。如果此时调用它的属性和方法则会引发错误。而实例化对象则是在堆空间开辟一块空间，它完成了具体对象相关信息的初始化操作。最后通过赋值进行两者绑定。 也就是声明对象和实例化对象是在内存中的不同空间完成的，通过赋值操作，将两者关联。具体的关联就是将堆中具体对象的内存地址存放在之前在栈中开辟的内存中，从而完成绑定。 构造方法构造方法也称为: 构造函数或者构造器，你可以使用构造方法来完成对象初始化相关操作。 构造方法的调用必须配合new关键字，不能被对象单独调用。注意，构造方法必须与类同名且没有返回值。 方法名中的参数列表可有可无，但是只能在对象实例化的时候被调用。 当没有指定构造方法时，系统会自动添加无参的构造方法；当有指定的构造方法时,无论是有参、无参的构造方法，系统都不会自动添加无参的构造方法，一个类中可以有多个构造方法。 this: 当前对象的默认引用; this的使用:调用成员属性,解决成员属性和局部变量同名冲突，也可以调用成员方法。 如果你想调用重载的构造方法，那么只能通过this关键字来使用this()；同时请记住，如果是通过this()来调用构造方法时,它必须放在方法体内第一行。（这个一定注意） 封装封装就是将类的某些信息隐藏在类内部, 不允许外部程序直接访问，但是通过该类提供的方法来实现对隐藏信息的操作和访问。也就是说两点：一是隐藏对象的信息，第二留出可以访问的接口（方法）。 封装的具体步骤：1、将访问修饰符替换为private；2、提供公共的setter和getter方法；3、必须有构造方法（系统会默认调用无参的构造方法）。其中setter方法是可写，getter方法是可读。我们可以在setter方法里面添加自己的业务逻辑，从而实现对值的合理性进行判断。 因为已经实现了封装，因此我们在实例化对象的时候就不需要再次传入自定义的参数了，否则就没有使我们提供的setter方法生效了。 包的管理为什么要说包的管理呢？因为包的管理太重要了，其实很多坑就是包的命令和管理不规范引起的。 我们知道文件夹可以进行文件的管理，同一个文件中可以存放多个不同的文件，同名的文件只能存放在不同的文件夹中。 在Java中我们也是通过包来管理java文件来解决同名文件的冲突问题，Java中一个包里不能存放同名类，但不同包却是可以。 包的定义必须放在Java源文件的第一行。前面说过，我们在定义类的时候，尽量遵循单一职责原则，同样的道理，在建立包的时候，建议每个包内存储的信息功能应该单一。 如何实现跨包类的调用？可以采用Import这个关键字，来实现包的导入。需要注意的是import包名.* 只能访问指定包名下的类，无法访问子包下的类。 还有就是包的效率问题，建议采用import包名.类名的方式进行包的导入，这样可以提高加载效率12import net.oschina.Test.*; // 加载包下的所有类import net.oschina.Test.Java; // 加载指定包下的指定类 注意一下，加载类的顺序跟import导入语句的位置无关:指定的具体包的优先级大于通配符。也就是下面加载会大于上面加载的速率。 最后说一下关于包管理的几个注意事项：1、必须放在Java源文件中的第一行；2、一个Java源文件中只能有一个package语句；3、包名全部采用英文字母小写的方式；4、包的命名方式为：域名倒序+模块+功能。 static关键字static修饰static表示静态的。 如果它修饰成员变量，那么该变量被称为静态成员或类成员，它是这个类所有的。也就是说无论这个类实例化出多少对象，它都会共用同一块内存空间。后面的只会覆盖前面的值。 如果它修饰属性，那么该属性被称为静态属性。 如果它修饰方法，那么该方法被称为静态方法。 如果它修饰初始化块，那么该初始化块被称为静态初始化块。 但是static是不能修饰类，不能修饰局部变量，不能内部类中修饰初始化块（不可以在内部类定义静态初始化块）。 静态成员的生命周期很长，在类加载时产生，直到类被销毁时才释放。 static访问普通的成员方法可以直接访问当前对象（该类实例化的对象）的成员属性和方法，也可以直接访问当前对象的静态属性和静态方法 静态方法或者类方法（前面被static修饰），它不能直接访问同一个类中的非静态成员，因为它缺少隐含的this参数。静态方法只能直接调用同一个类中的静态成员。如果非要访问，只能通过实例化一个对象后，采用对象.成员方法的方式来访问非静态成员。 初始化块（代码块）初始化块的说明在Java里面，被{}括起来的代码就称之为代码块（初始化块）。 当代码块出现在方法里的时候，叫做普通代码块，普通代码块和一般语句的执行顺序是一样的：从上到下，顺序执行，先出现,，先执行。 当代码块直接在类中定义，与成员方法，属性并列时，我们此时称之为构造代码块。 记住构造代码块比构造函数优先执行。构造代码块它是在创建对象的时候被调用，优先于构造方法的执行。所以不管构造代码块放在类的其他位置，它都会先于构造函数执行。 多个构造代码块之间有先后顺序，但都先于构造函数前执行。 初始化块的执行现在考虑一下，静态初始化块，普通初始化块，构造函数这三者的执行顺序？你只要记住静态初始化块静态初始化块只在类初始化时进行加载，而且只执行一次。对于三者，程序的执行优先级：静态初始化块–》初始化块–》构造方法。（这里的初始化块包括构造初始化块（直接在类中声明）和普通的初始化块（在方法中声明）。 初始化块的范围看一段代码：123456789public void test()&#123; &#123; System.out.println(&quot;我是普通代码块1&quot;); &#125; System.out.println(&quot;初始化块的范围&quot;); &#123; System.out.println(&quot;我是普通代码块2&quot;); &#125; &#125; 我们发现这个test方法空间被分成了三部分，所以我们可以利用这个功能来实现变量的命名冲突。1234public void test()&#123; int temp =10; int temp =12; &#125; 上面是不可以的，但是下面却是可以的：1234567public void test()&#123;&#123; int temp =10; &#125;; &#123; int temp =12;&#125;; &#125; 这时两个代码块空间中允许有自己的变量值，不会重名造成冲突。但是不能在方法的全局域位置添加同名变量，因为它会与两个变量都造成重复定义的问题：1234567public void test()&#123;&#123; int temp =10; &#125;; int temp =11; &#123; int temp =12;&#125;; &#125; 因为temp的作用域是从那里到结尾的，会与后面的代码块里面的变量产生命名冲突。 由于篇幅的问题，继承和多态我下次再说哈，今天就写到这里了，感谢你的赏阅！！！","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（一）：概述","slug":"关于JAVA你必须知道的那些事（一）：概述","date":"2018-08-01T13:23:38.000Z","updated":"2019-04-13T13:24:45.535Z","comments":true,"path":"2018/08/01/关于JAVA你必须知道的那些事（一）：概述/","link":"","permalink":"http://licheetools.github.io/2018/08/01/关于JAVA你必须知道的那些事（一）：概述/","excerpt":"","text":"一、JAVA的主要特性： 1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。 2、Java是面向对象的，具有类，接口等； 3、Java是解释型的语言，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。即所谓的“一次编译，永久使用”。 下面解释一下解释型语言和编译型语言的区别？ （A）解释型语言：,解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。在发布程序时，看起来省了道编译工序。但是，在运行程序的时候，解释性语言必须先解释再运行。 （B）编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++、Delphi等。 二、JAVA的开发工具（JDK），工具及运行环境（JRE） （1）Java主要分为三大体系： JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版) JavaEE(J2EE)(Java 2 Platform,EnterpriseEdition，java平台企业版) JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版) 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE,J2SE更名为Java SE，J2ME更名为Java ME。 说明： Standard Edition(标准版) J2SE 包含那些构成Java语言核心的类 比如：数据库连接、接口定义、输入/输出、网络编程 Enterprise Edition(企业版) J2EE 包含J2SE 中的类，并且还包含用于开发企业级应用的类。比如：EJB、servlet、JSP、XML、事务控制 Micro Edition(微缩版) J2ME 包含J2SE中一部分类，用于消费类电子产品的软件开发。比如：呼机、智能卡、手机、PDA、机顶盒 他们的范围是：J2SE包含于J2EE中，J2ME包含了J2SE的核心类，但新添加了一些专有类，应用场合，API的覆盖范围各不相同。 上面的每个版本都分别对应不同的JDK（java development kit），可以根据应用不同下载不同的JDK安装。对于初学者，先学习Java SE，有了一定基础之后，可以考虑深入学习Java EE，或者转战Android也行。 （2）JDK中包含了java开发需要的各种类和接口，以及运行java程序所需要的环境JRE，若是只想在各种系统平台上运行java程序而不进行开发，则可以直接下载JRE包即可。有些系统是自带JRE的，但不包括windows，因此要想在windows上运行java程序，需要在系统上安装JRE。 （3）JRE中包含了JVM（Java虚拟机）：它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。 2、工具 Java开发需要一些较好的开发工具，比较好的一个IDE就是Eclipse；eclipse、idea等IDE有自己的编译器而不是用JDKbin目录中自带的，所以在安装时你会发现他们只要求你选中jre路径就ok了；而且用eclipse的话不需要设置系统环境变量，它会自动找到安装的JRE地址。 3、开发环境 Java可以下windows和linux等系统下进行开发，这里仅介绍在windows下开发需要设置的环境参数，在安相应版本JDK之后，进行变量设置。 变量设置 变量名：JAVA_HOME 变量值：C:\\ProgramFiles\\Java\\jdk1.7.0 //这里是你JDK的安装路径，可以更换 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;//记得前面有个”.” 变量名：Path 变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 1、”开始”-&gt;;”运行”，键入”cmd”； 2、键入命令”java -version”，”java”，”javac”几个命令，出现相关画面，说明环境变量配置成功； 三、Java基础语法 1、基本语法规则 编写Java程序时，应注意以下几点： 大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。 主方法入口：所有的Java 程序由public static void main(Stringargs)方法开始执行。 另外：java中没有头文件，它是以import的方法从外面导入.class文件的； java中的main函数是包含在一个类中的，与C++是不一样的，在C++中没有定义类也是一个程序。 2、源文件声明规则 当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。 一个源文件中只能有一个public类 一个源文件可以有多个非public类 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。 如果一个类定义在某个包中，那么package语句应该在源文件的首行。 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。 import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。 类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。 3、Java包： 包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。（即包中包含很多种类的类和接口） 当编译一个.java文件（即一个编译单元）时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。如果你真的想学习java你可以来这个群前面是四九一，中间是八九七后面是一五八这里有技术大牛亲自指导帮助你 还有免费的直播课程学。因此在编译少量.java文件之后，会得到大量的.class文件。每一个.java文件编译以后都会有一个public类，以及任意数量的非public类。因此每个.java文件都是一个构件，如果希望许许多多的这样的构件从属于同一个群组，就可以在每一个.java文件中使用关键字package。而这个群组就是一个类库。 如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。 4、权限修饰符 Java中有四种权限修饰符，这些修饰符控制对类，类的成员方法，类的成员变量的访问；其作用范围如下： public：所有的类都可以访问。 private：只有在同一个类中才可以访问。 protected：同一个类中、同一个包中、子类中都可以访问，其他包不可以。 包类型的，即默认类型同一个类中、同一个包中可以访问到，其他包和子类不可以。 5、数据类型 byte: Java数据类型和c/c++基本类似，但Java中有byte类型，表示8位2进制的整数，相当于c/c++中的char. 常量：Java中常量用final表示，相当于const，final中的值是可以改变的； -包装类: 在开发过程中，有时候需要使用对象，而不是内置数据类型，因此java为每个内置数据类型提供了对应的包装类所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类Number的子类，对于字符也有相应的Character类。每个类具有相应的函数。 数组：java数组是对象，与c++不同，语法上与c++类似，java数组具有一个属性length可以获取数组的长度。（数组a，a.length为数组长度），Array类具有一些函数可以对数组进运算。 6、Java高级特性和接口 Java中类继承只允许一个父类，当需要进行多个继承时，需要使用接口。接口类似于类，定义时用interface替代类定义中的class，但里面的方法只有定义没有实现。接口文件的文件名必须与接口名相同。继承接口的关键字为implement，与类的继承extends相似，可以进行多继承。接口继承必须实现接口中的所有方法。 接口是规范，规定某个实现类里必须有那些方法，只要事先定义好接口，当大家一起合作的时候就不用特别麻烦的交互，而是每个人写好自己的接口实现类，最后拼接到一起就可以了比如数据库连接类，接口规定好有哪些方法、方法的功能，然后每个数据库厂商根据接口去实现具体的类，达到统一的目的，要不每个数据库厂商自己实现一套，那么你编程的时候就要根据不同驱动使用不同的方法，造成不必要的麻烦。 2、Java中的抽象类 只声明方法的存在而不具体实现的类，抽象类不能实例化（不能创建相应对象）定义方式：在class前加上abstract，ex： abstractclass 类名{ ;;;}抽象类中定义的没有实际意义的，必须在子类重写的方法为抽象方法，定义时前面加abstract：abstract type name(agrs)。 一般方法定义与在正常类中定义一样。 关于如何创建类和其他知识我将在后续文章陆续介绍，谢谢大家！","categories":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://licheetools.github.io/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://licheetools.github.io/categories/java/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（提示）：错误贴","slug":"零基础使用Django2-0-1打造在线教育网站（提示）：错误贴","date":"2018-04-16T13:21:05.000Z","updated":"2019-04-13T13:21:56.360Z","comments":true,"path":"2018/04/16/零基础使用Django2-0-1打造在线教育网站（提示）：错误贴/","link":"","permalink":"http://licheetools.github.io/2018/04/16/零基础使用Django2-0-1打造在线教育网站（提示）：错误贴/","excerpt":"","text":"写在前面最近有小伙伴们私聊我说出现了很多问题，这里特开一个帖子专门用于错误的指导与交流。首先是说注册和激活有问题，我对此进行了测试，发现没有问题，小伙伴们出现这种问题可能是代码粘贴时的位置出现了错误，请各位小伙伴们自己对比一下代码，注意是否对齐（部分代码进行了完善），这里贴一下代码。 注册代码123456789101112131415161718192021222324252627282930313233# 用于实现用户注册的函数class RegisterView(View): # get方法直接返回页面 def get(self, request): register_form = RegisterForm() return render(request, &quot;register.html&quot;, &#123;&apos;register_form&apos;: register_form&#125;) def post(self, request): # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息 register_form = RegisterForm(request.POST) if register_form.is_valid(): user_name = request.POST.get(&quot;email&quot;, &quot;&quot;) if UserProfile.objects.filter(email=user_name): # register_form回填信息必须有，msg是信息提示 return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;) # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;) # 实例化一个user_profile对象，存入前端页面获取的值 user_profile = UserProfile() user_profile.username = user_name user_profile.email = user_name # 默认激活状态为False，也就是未激活 user_profile.is_active = False # 对password进行加密并保存 user_profile.password = make_password(pass_word) user_profile.save() send_register_eamil(user_name, &apos;register&apos;) return render(request, &quot;login.html&quot;, ) else: return render(request, &quot;register.html&quot;, &#123;&quot;register_form&quot;: register_form&#125;) 激活代码12345678910111213141516171819# 用于实现用户激活操作的函数class ActiveUserView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) # 如果不为空也就是有用户 active_form = ActiveForm(request.GET) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 user = UserProfile.objects.get(email=email) user.is_active = True user.save() # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;, ) else: return render(request, &quot;register.html&quot;, &#123;&quot;msg&quot;: &quot;您的激活链接无效&quot;, &quot;active_form&quot;: active_form&#125;) 其次是突然所有图片显示不了，我调试发现可能是你上传图片的命名格式出了问题，所以我们的访问地址也要配置：两种形式都可以，不过呢建议大家使用第一种，因为第一种是匹配任意位数，第二种则是贪婪匹配：123456# 第一种# 配置文件上传的访问处理url re_path(&apos;media/(?P&lt;path&gt;\\d+)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;)# 第二种# 配置文件上传的访问处理url re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;), 还有因为我这个是Python3+Django2.0，如果你在部署的时候没有新建虚拟环境，那么你就很容易造成Python版本的使用混乱，而Ubuntu自带的Python版本是2.0系列，因此最好是使用虚拟环境来避免这个错误！ 目前为止就是这几个问题出的错比较多，如果你发现了其他问题，可以在文章底部留言和我交流～～～","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十七）：项目部署上线","slug":"零基础使用Django2-0-1打造在线教育网站（二十七）：项目部署上线","date":"2018-04-15T13:20:16.000Z","updated":"2019-04-13T13:20:40.793Z","comments":true,"path":"2018/04/15/零基础使用Django2-0-1打造在线教育网站（二十七）：项目部署上线/","link":"","permalink":"http://licheetools.github.io/2018/04/15/零基础使用Django2-0-1打造在线教育网站（二十七）：项目部署上线/","excerpt":"","text":"写在前面本篇笔记我们将介绍如何把我们的django项目部署到服务器上，里面涉及到的东西很多，特别是小白第一次接触可能不清楚，但是没关系，你跟着我的节奏走就可以。注意本文是部署Python3.6.4和Django2.0.1与bobby老师讲的大体上差不多，只是部分命令不一样。注意我已经把win10里面的eduline文件放到deepin的桌面上了。（推荐使用U盘导入文件，否则VMware导入本地文件很麻烦。）使用Centos的朋友请点击这里： centos7 下通过nginx+uwsgi部署django应用 nginx + uwsgi首先在win10上面利用虚拟机安装Ubantu系统，这里我个人推荐使用国产deepin操作系统。不会安装的请点击这里：VmWare安装深度deepin操作系统 安装nginx1、使用命令，安装nginx：1sudo apt-get install nginx 2、使用下面的命令查看是否启动nginx1ps aux | grep nginx 3、使用下面的命令查看本地ip1ifconfig 4、本地输入获取到的ip到浏览器访问一下（服务器用公网IP）： 安装数据库1、使用命令，安装数据库：1sudo apt-get install mysql-server 出现下面的图片： 输入root,按上下箭头进行选择，回车进行确定！2、使用下面的命令查看是否启动mysql1ps aux | grep mysql 3、使用下面的命令进入数据库：1mysql -u root -p 查看数据库命令：show databases;，退出数据库命令：exit 4、在终端中输入sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf修改其中bind-address =127.0.0.1为bind-address =0.0.0.0，注意这样会暴露端口，我们这里仅仅是为了让win10进行连接。所以真正部署的时候，尽量127.0.0.1，不要修改。（在vim中修改文件使用键盘上的i键进入，然后进行修改。修改完成以后，按键盘上的Esc键退出插入模式，再按shift+:，输入wq进行保存。仅仅输入q!是退出，而wq是保存并退出。）5、使用下面的命令重启数据库：123sudo service mysql restart # 重启数据库ifconfig # 查看ip 6、打开win10上面的Navicat，将获取到的ip地址新建数据库，然后测试一下:发现链接不允许（（服务器用公网IP））。7、在终端中输入1mysql -h 192.168.118.128 -u root -p 发现还是有问题。这时我们要修改数据库访问权限：12345mysql -u root -p # 进入数据库GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;flush privileges; 然后exit退出数据库。8、重新链接测试一下，发现可以正常连接了。9，新建数据库：10、使用下面的命令安装pip3:1sudo apt-get install python3-pip 11、使用下面的命令安装virtualenv:1sudo apt-get install virtualenv 12、使用下面的命令安装virtualenvwrapper:1sudo apt-get install virtualenvwrapper 13、修改配置文件:123456vim ~/.bashrcexport WORKON_HOME=$HOME/.virtualenvssource /usr/share/virtualenvwrapper/virtualenvwrapper.shsource ~/.bashrc 14、新建虚拟环境：123workon #测试一下mkvirtualenv eduline 15、win10导出requirements.txt1pip freeze &gt; requirements.txt 16、虚拟机deepin安装requirements.txt（虚拟环境使用pip而不是pip3而且需要把requirements.txt放到虚拟环境里面）1pip3 install -r requirements.txt 17、如果遇到安装不了的软件或者第三方库，可以使用下面的命令1pip3 install Django==2.0.1 18、出现这种情况，使用下面的命令：1sudo apt-get install libmysqlclient-dev 19、如果第三方库安装太慢，可以使用豆瓣源加速：1pip3 install -i https://pypi.douban.com/simple pillow==4.10.1 20、查看已经安装的包使用：1pip3 list 安装uwsgi1、使用下面的命令进行安装：1pip3 install uwsgi 如果安装不了，请先运行下面的命令：1sudo apt-get install libpython3.x-dev #x对应你Python3.x 然后在重新运行一下上面的安装命令。2、运行一下wsgi1uwsgi --http :8000 --module eduline.wsgi 3、启动本地服务器：1python3 manage.py runserver 4、重新设置监听窗口：1python3 manage.py runserver 0.0.0.0:8000 5、数据库迁移：6、使用你本地的ip地址进行访问，页面出现，没有问题。 7、配置nginx：1234567891011121314151617181920212223242526272829303132333435新建uc_nginx.conf# the upstream component nginx needs to connect toupstream django &#123;# server unix:///path/to/your/mysite/mysite.sock; # for a file socketserver 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)&#125;# configuration of the serverserver &#123;# the port your site will be served onlisten 80;# the domain name it will serve forserver_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDNcharset utf-8;# max upload sizeclient_max_body_size 75M; # adjust to taste# Django medialocation /media &#123; alias 你的目录/eduline/media; # 指向django的media目录&#125;location /static &#123; alias 你的目录/eduline/static; # 指向django的static目录&#125;# Finally, send all non-media requests to the Django server.location / &#123; uwsgi_pass django; include uwsgi_params; # the uwsgi_params file you installed&#125;&#125; 8、将该配置文件加入到nginx的启动配置文件中：1sudo ln -s 你的目录/eduline/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/ 9、拉取所有需要的static file 到同一个目录123在django的setting文件中，添加下面一行内容： STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;) 10、运行命令：1python3 manage.py collectstatic 11、通过配置文件启动uwsgi：1234567891011121314151617181920212223242526272829303132新建uwsgi.ini 配置文件， 内容如下： # mysite_uwsgi.ini file [uwsgi] # Django-related settings # the base directory (full path) chdir = /home/licheetools/eduline # Django&apos;s wsgi file module = eduline.wsgi # the virtualenv (full path) # process-related settings # master master = true # maximum number of worker processes processes = 10 # the socket (use the full path to be safe socket = 127.0.0.1:8000 # ... with appropriate permissions - may be needed # chmod-socket = 664 # clear environment on exit vacuum = true virtualenv = /home/licheetools/.virtualenvs/mxonline logto = /tmp/mylog.log注： chdir： 表示需要操作的目录，也就是项目的目录 module： wsgi文件的路径 processes： 进程数 virtualenv：虚拟环境的目录 检查虚拟环境是否有问题： 然后在终端输入：123workon edulineuwsgi -i 你的目录/eduline/conf/uwsgi.ini 如果在conf目录下，只需使用命令：1uwsgi -i uwsgi.ini 最后一步，在浏览器地址里面输入你的ip就可以访问到我们的项目了。 至此，我们Django项目就成功的部署到服务器上面了。回顾这个项目，收获很多，但是坑也很多，坚持到最后才会感受成功的喜悦！ 参考文章：[-] Django部署的正确打开方式 v2.0[-] Django快速部署简约版 v3.0[-] nginx一些常用命令：查看nginx进程命令ps -ef | grep nginx和pkill -9 nginx。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发","slug":"零基础使用Django2-0-1打造在线教育网站（二十六）：xadmin的进阶开发","date":"2018-04-14T13:19:18.000Z","updated":"2019-04-13T13:19:45.272Z","comments":true,"path":"2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十六）：xadmin的进阶开发/","link":"","permalink":"http://licheetools.github.io/2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十六）：xadmin的进阶开发/","excerpt":"","text":"写在前面本篇笔记我们将介绍xadmin的进阶开发，具体包括自定义icon，默认排序，字段只读，字段隐藏，搜索框，inlines，一张表分两个model来进行管理添加数据，直接列表页编辑，列表页显示章节数，显示自定义的html代码，列表页定时刷新，字段联动功能，xadmin源码目录简说，xadmin集成富文本等功能，下面我们依次介绍一下。 本篇笔记对应于第二十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。 ##首先需要把我们在前面当Debug=False时，修改的以下代码全部删除掉： 为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：1STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;) 同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：123# STATICFILES_DIRS = [# os.path.join(BASE_DIR, &quot;static&quot;), # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾# ] 打开eduline/urls.py文件，新增代码如下：1234from eduline.settings import STATIC_ROOT # 配置静态文件上传的访问处理url re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;), 恢复到Debug=True时的状态。然后进入到我们的xadmin后台，开始xadmin的进阶开发。 自定义icon所谓icon其实就是你的功能小图标：我们以修改邮箱验证码为例，打开users/adminx.py文件，在EmailVerifyRecordAdmin函数新增一行代码：1model_icon = &apos;fa fa-user&apos; 其实这个样式就是对应于font awesome里面的图标，你可以下载新的源代码对你的目录下的css和fonts文件夹进行替换： 然后刷新一下就出现自己想要的样式icon了。 默认排序，字段只读，字段隐藏我们以课程为例，来介绍这3个小功能。打开couses/adminx.py文件，在CourseAdmin中加入以下代码：12345678910# 默认排序：以点击数排序ordering = [&apos;-click_nums&apos;]# 字段只读：点击数只允许读取readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]# 字段隐藏：收藏数隐藏显示exclude = [&apos;fav_nums&apos;]# 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏 搜索框当课程很多时，我们不能以下拉菜单的形式来查找我们的课程，我们需要有搜索框。你已经知道，课程它有一个外键是课程机构，因此我们需要到课程机构里面进行搜索框的配置。打开organization/adminx.py文件，在CourseOrgAdmin函数里面添加一行代码：12# 搜索框，当课程数据量过大时，有课程指向它，会以ajax方式加载 relfield_style = &apos;fk-ajax&apos; inlines添加数据在这之前，我们新增课程的时候是不能同时新增课程章节信息的，需要跳到另一个页面，这是很麻烦的。所以我们考虑采用inlines来添加数据从而完成在一个页面直接完成章节信息的添加。 打开couses/adminx.py文件，在最顶部新定义一个函数：12345678# 课程直接添加章节class LessonInline(object): model = Lesson extra = 0# 同时在CourseAdmin中，新增一行代码# 课程直接添加章节 inlines = [LessonInline] # 数组，支持多个 刷新一下我们的后台，发现章节信息在课程页面底部出现了：同时也支持多个添加，比方再添加一个课程资源： 一张表分两个model来进行管理录播课程与非轮播课程可以分开管理，但是最好是在一张表里显示。打开courses/models.py文件，在course函数下面新增代码123456class BannerCourse(Course): # 注意是继承Course而不是object这个最高类 class Meta: verbose_name = &quot;轮播课程&quot; verbose_name_plural = verbose_name proxy = True # 很重要，否则会生成另外一张表，这样设置具有model的功能，但不会生成表 然后打开courses/adminx.py文件，修改之前的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657from .models import BannerCourseclass CourseAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 过滤器 # # 默认排序：以点击数排序 # ordering = [&apos;-click_nums&apos;] # # # 字段只读：点击数只允许读取 # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;] # # # 字段隐藏：收藏数隐藏显示 # exclude = [&apos;fav_nums&apos;] # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏 # 课程直接添加章节,课程资源 inlines = [LessonInline, CourseResourceInline] # 过滤列表中的数据 def queryset(self): qs = super(CourseAdmin, self).queryset() qs = qs.filter(is_banner=False) return qsclass BannerCourseAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 过滤器 # # 默认排序：以点击数排序 # ordering = [&apos;-click_nums&apos;] # # # 字段只读：点击数只允许读取 # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;] # # # 字段隐藏：收藏数隐藏显示 # exclude = [&apos;fav_nums&apos;] # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏 # 课程直接添加章节,课程资源 inlines = [LessonInline, CourseResourceInline] # 过滤列表中的数据 def queryset(self): qs = super(BannerCourseAdmin, self).queryset() qs = qs.filter(is_banner=True) return qsxadmin.site.register(BannerCourse, BannerCourseAdmin) 然后刷新一下后台页面，发现有2个课程管理：所以我们还是要配置一下：打开users/adminx.py文件，新增以下代码：123from courses.models import BannerCourse&#123;&apos;title&apos;: &apos;轮播课程&apos;, &apos;url&apos;: self.get_model_url(BannerCourse, &apos;changelist&apos;)&#125;, 并修改之前的course的verbose_name为普通课程。就是这个样子：刷新一下我们的后台页面： 直接列表页编辑在courses/adminx.py文件的CourseAdmin函数，新增一行代码：12# 直接列表页编辑 list_editable = [&apos;degree&apos;, &apos;desc&apos;, ] 列表页显示章节数在courses/adminx.py文件的CourseAdmin和BannerCourseAdmin函数的list_display中，新增显示字段get_zj_nums，刷新后台发现是黑色的英文，我们需要修改，新增一行代码：1get_zj_nums.short_description = &quot;章节数&quot; 显示自定义的html代码在刚才的页面下面新增以下代码： 12345def go_to(self): from django.utils.safestring import mark_safe # 如果不使用mark_safe，系统则会对其进行转义 return mark_safe(&quot;&lt;a href=&apos;http://blog.licheetools.top&apos;&gt;跳转&lt;/&gt;&quot;) go_to.short_description = &quot;跳转&quot; 就是这个样子： 列表页定时刷新打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增一行代码：1refresh_times = [3,5] # 列表页定时刷新3s或者5s 字段联动功能打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增以下代码：123456789101112# 字段联动 def save_models(self): # 在保存课程的时候,统计课程机构的课程数 obj = self.new_obj # 新增课程还没有保存，统计的课程数就会少一个 obj.save() # 必须确定存在 if obj.course_org is not None: # obj实际是一个course对象 course_org = obj.course_org course_org.course_nums = Course.objects.filter(course_org=course_org).count() course_org.save() xadmin源码目录简说 locale 对应语言包 migrations 是数据表的记录 plugins 每一个后台页面都是一个plugin插件 static 静态文件夹，里面有js,css template 这是xadmin自己使用的html文件 templatetags 这是tag模板总而言之，xadmin它是对Django admin的封装和进阶开发，正所谓青出于蓝而胜于蓝就是这个理。 xadmin集成富文本首先点击Xadmin 插件制作，我们学着官网的介绍，自己尝试做一个插件:富文本编辑器。点击DjangoUeditor，获取DjangoUeditor的安装包，然后按照帮助文档或者下面的要求安装DjangoUeditor。 1、安装方法(注意需要转到eduline这个虚拟环境下面才能安装)1234方法一：将github整个源码包下载回家，在命令行运行： python setup.py install* 方法二：使用pip工具在命令行运行(推荐)： pip install DjangoUeditor 2、在Django中安装DjangoUeditor在INSTALL_APPS里面增加DjangoUeditor app，如下：123eduline/settings.py文件:INSTALLED_APPS = ( #........ &apos;DjangoUeditor&apos;, ) 3、配置urls1234eduline/urls.py文件: # 富文本相关path配置 path(&quot;ueditor/&quot;, include(&apos;DjangoUeditor.urls&apos;)), 4、在models中的使用12345678courses/models.py文件：from DjangoUeditor.models import UEditorFieldclass Course(models.Model): detail = UEditorField(verbose_name=&apos;课程详情&apos;, width=600, height=300, imagePath=&quot;courses/ueditor/&quot;, filePath=&quot;courses/ueditor/&quot;, default=&apos;&apos;) 5、书写代码在xadmin的plugins文件夹下面，新增一个ueditor.py文件，在里面新增：1234567891011121314151617181920212223242526272829303132333435363738import xadminfrom xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminViewfrom DjangoUeditor.models import UEditorFieldfrom DjangoUeditor.widgets import UEditorWidgetfrom django.conf import settingsclass XadminUEditorWidget(UEditorWidget): def __init__(self,**kwargs): self.ueditor_options=kwargs self.Media.js = None super(XadminUEditorWidget,self).__init__(kwargs)class UeditorPlugin(BaseAdminPlugin): def get_field_style(self, attrs, db_field, style, **kwargs): if style == &apos;ueditor&apos;: if isinstance(db_field, UEditorField): widget = db_field.formfield().widget param = &#123;&#125; param.update(widget.ueditor_settings) param.update(widget.attrs) return &#123;&apos;widget&apos;: XadminUEditorWidget(**param)&#125; return attrs # 在我们生成的页面中放入自己的js文件 def block_extrahead(self, context, nodes): js = &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.config.js&quot;) #自己的静态目录 js += &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.all.min.js&quot;) #自己的静态目录 nodes.append(js) # 新增页面xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)# 修改页面xadmin.site.register_plugin(UeditorPlugin, CreateAdminView) 6、字段显示样式12345courses/adminx.py文件：class CourseAdmin(object): # 字段显示样式 style_fields = &#123;&quot;detail&quot;: &quot;ueditor&quot;&#125; 7、注册进入plugins找到plugins文件夹下的init.py文件，在PLUGINS中写入1PLUGINS= (&apos;ueditor&apos;,） 就是这样： 然后运行一下我们的项目，登录到xadmin后台查看一下，富文本出来:接着在前端刷新一下页面，如果没有出现：那可能是你的course-detail.html页面中设置的有问题：弄好以后，页面还是现实元原始的html代码，这是不允许的，所以我们需要进一步配置：在course-detail.html页面中，关闭转义功能：123&#123;% autoescape off %&#125;&#123;&#123; course.detail &#125;&#125;&#123;% endautoescape %&#125; 现在重新刷新一下我们的页面： 至此，本篇关于xadmin进阶开发的介绍就到此为止了，感谢你的赏阅！ 本篇笔记对应于第二十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十五）：常见的网络攻防","slug":"零基础使用Django2-0-1打造在线教育网站（二十五）：常见的网络攻防","date":"2018-04-14T13:18:29.000Z","updated":"2019-04-13T13:18:55.240Z","comments":true,"path":"2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十五）：常见的网络攻防/","link":"","permalink":"http://licheetools.github.io/2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十五）：常见的网络攻防/","excerpt":"","text":"写在前面本篇笔记我们将介绍常见的网络攻击与防护，具体包括SQL注入攻击及防护，XSS攻击及防护以及CSRF攻击及防护，下面我们依次介绍一下。 SQL注入攻击及防护首先我们来了解一下什么是SQL注入？ 所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击。 SQL注入的危害:下面我们通过一段代码了解一下SQL注入的过程：12345678910111213141516171819202122232425# users/views.py文件：class LoginUnsafeView(View): def get(self, request): return render(request, &quot;login.html&quot;, &#123;&#125;) def post(self, request): user_name = request.POST.get(&quot;username&quot;, &quot;&quot;) pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;) import MySQLdb conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;root&apos;, db=&apos;mxonline&apos;, charset=&apos;utf8&apos;) cursor = conn.cursor() sql_select = &quot;select * from users_userprofile where email=&apos;&#123;0&#125;&apos; and password=&apos;&#123;1&#125;&apos;&quot;.format(user_name, pass_word) result = cursor.execute(sql_select) for row in cursor.fetchall(): # 查询到用户 pass print &apos;hello&apos;# eduline/urls.py文件:from users.views import LoginUnsafeViewurlpatterns = [ path(&apos;login/&apos;, LoginUnsafeView.as_view(), name=&apos;login&apos;),] 这里竟然把sql语句写到这里，所以我们可以在参数中加入sql语句，使之拼接字符串从而为真被系统识别通过，盗取用户信息。但是在Django自带了orm,可以对这个进行验证，从而保证系统的安全。 因此建议大家都采用orm这种形式，不要使用原生的sql语句。 XSS攻击及防护首先我们来了解一下什么是XSS攻击？ XSS跨站脚本攻击(Cross Site Scripting)，是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。 XSS攻击的危害：攻击流程为：举个例子来说：当你输入iPhone6时，这个字符就会被显示到页面中： 之后，黑客就会修改js代码:然后就拿到了你的登录cookie就可以进入你的账户进行肆意掠夺你的money了。 这也就是为什么你觉得自己明明进入的是官方网站，怎么账号（经常就是QQ号）被盗了的缘故，所以不要随意点开陌生人发的链接。 XSS防护： CSRF攻击及防护首先我们来了解一下什么是CSRF攻击？ CSRF（Cross-site request forgery）跨站请求伪造，是通过伪装来自受信任用户的请求来利用受信任的网站。 CSRF攻击的危害：攻击流程为：你看，这就是伪装：用户开始访问了A，之后访问了B，而B是要求用户访问A的。用户以为这是跳转到A的链接，以为很官方，殊不知就是这种官方泄露了自己的信息。原因在于用户每次向A请求时，都会带上session id，这样就很容易出问题。 CSRF防护：提交form表单必须添加crsf token，进行crsf token验证，而攻击网站是无法生成crsf token的。还有一点，但凡涉及到敏感信息的网站，你登录进去就要及时登出，这样可以避免很多问题的发生。 至此，本篇关于常见网络攻击与防护的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十四）：全局页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十四）：全局页面配置","date":"2018-04-14T13:16:22.000Z","updated":"2019-04-13T13:18:07.458Z","comments":true,"path":"2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十四）：全局页面配置/","link":"","permalink":"http://licheetools.github.io/2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十四）：全局页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍全局页面的配置，具体包括首页登出实现，点击数加1，收藏数配置，小喇叭消息已读配置，首页的开发以及404和500页面的配置等功能，下面我们依次介绍一下。 本篇笔记对应于第二十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。 首页登出实现现在我们来完善我们首页的系统登出功能，这个没有页码，你登出后只需要跳转到首页即可，所以我们只需要写一个view就能完成这个操作。 老规矩先配置path:打开eduline/urls.py文件，新增以下代码：1234from users.views import LogoutView# 登出url path(&apos;logout/&apos;, LogoutView.as_view(), name=&quot;logout&quot;), 然后打开users/view.py文件，在login的函数下面新增以下代码：12345678910from django.urls import reversefrom django.contrib.auth import logoutfrom django.http import HttpResponseRedirect# 用于实现用户首页登出的函数class LogoutView(View): def get(self, request): # 采用Django自带的logout函数来完成我们登出的功能 logout(request) # 不采用之前的render，而是采用重定向返回到首页 return HttpResponseRedirect(reverse(&quot;index&quot;)) 接下来在base.html页面进行跳转链接的配置：别忘了还有其余2个base页面跳转的配置，很简单，这里就不介绍了。 点击数加11、为课程数加1：打开courses/view.py文件，找到CourseInfoView函数，新增以下代码：12course.students += 1course.save() 就是这个样子：2、为讲师数加1：打开organization/view.py文件，找到TeacherDetailView函数，新增以下代码：12teacher.click_nums += 1teacher.save() 就是这个样子：3、为机构数加1：打开organization/view.py文件，找到OrgHomeView函数，新增以下代码：12course_org.click_nums += 1course_org.save() 就是这个样子： 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 404和500页面的配置老规矩，从前端资料里面拷贝我们的404和500页面到templates文件夹并修改文件里面的静态文件地址。打开eduline/urls.py文件，新增代码如下：12# 全局404页面配置handler404 = &apos;users.views.page_not_found&apos; 就是这个样子：然后打开users/views.py文件，新增以下代码：123456789# 404页面对应的处理函数def page_not_found(request): from django.shortcuts import render_to_response response = render_to_response(&quot;404.html&quot;, &#123; &#125;) # 设置response的状态码 response.status_code = 404 return response 接着运行我们的项目，随意输入一个地址，发现页面并没有出来，那是因为在eduline/settings.py文件里面：DEBUG = True，所以我们需要修改它为False，还有下面的允许访问IP地址，否则404页面也是出不来的：123DEBUG = FalseALLOWED_HOSTS = [&apos;*&apos;] 这样重新运行一下我们的项目，发现页面有了，但是样子却没加载出来，这是为什么呢？ 因为DEBUG为True时，系统会自动前往STATICFILES_DIRS下寻找文件的。所以我们开始一般都会选择True，便于错误信息的显示。 但是一旦DEBUG为False时，情况就不一样了，Django就不会代管你的静态文件了，而事实上一般静态文件都是通过第三方http服务器来代理转发。（如常见的服务器Nignx 和 Apache都会自动代理这些静态文件） 为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：1STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;) 同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：123# STATICFILES_DIRS = [# os.path.join(BASE_DIR, &quot;static&quot;), # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾# ] 打开eduline/urls.py文件，新增代码如下：1234from eduline.settings import STATIC_ROOT # 配置静态文件上传的访问处理url re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;), 现在重新运行我们的项目，看看404是不是出来了。 500的页面的配置和这个一模一样（注意函数名为page_error），这里就不再赘述了。 至此，本篇关于全局页面配置的介绍就到此为止了，感谢你的赏阅。 本篇笔记对应于第二十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十三）：个人信息相关页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十三）：个人信息相关页面配置","date":"2018-04-13T13:14:52.000Z","updated":"2019-04-13T13:15:19.372Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十三）：个人信息相关页面配置/","link":"","permalink":"http://licheetools.github.io/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十三）：个人信息相关页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍个人信息相关页面的配置，具体包括我的课程，我的收藏，我的消息等功能，下面我们依次介绍一下。 本篇笔记对应于第二十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。 我的课程老规矩，让我们的usercenter_mycourse继承我们的usercenter_base.html页面：然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyCourseView # 用户个人中心我的课程url path(&quot;mycourse/&quot;, MyCourseView.as_view(), name=&quot;mycourse&quot;), 然后打开users/views.py文件，新增以下代码：123456789# 用户个人中心我的课程函数class MyCourseView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): return render(request, &quot;usercenter-mycourse.html&quot; ,&#123; &#125;) 然后去usercenter-base.html页面设置我们的跳转链接：然后运行我们的项目，就可以点击我的课程了：接下来就是课程的动态填充了，自己先尝试一下在MyCourseView这个函数里面写一下业务逻辑代码：123456789101112# 用户个人中心我的课程函数class MyCourseView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): user_courses = UserCourse.objects.filter(user=request.user) return render(request, &quot;usercenter-mycourse.html&quot;, &#123; &quot;user_courses&quot;: user_courses, &#125;) 然后打开usercenter-mycourse.html页面,配置动态加载：接着刷新我们的页面，就可以看到我的课程了： 我的收藏收藏授课机构这里面有3个页面，我们一个个的来弄，先弄usercenter_fav_org页面。老规矩，让我们的usercenter_fav_org继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyFavOrgView # 我收藏的课程机构url path(&quot;myfav/org/&quot;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;), 然后打开users/views.py文件，新增以下代码：12345678910111213141516171819from operation.models import UserFavoritefrom organization.models import CourseOrg# 我收藏的课程机构函数class MyFavOrgView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): org_list = [] fav_orgs = UserFavorite.objects.filter(user=request.user, fav_type=2) for fav_org in fav_orgs: org_id = fav_org.fav_id org = CourseOrg.objects.get(id=org_id) org_list.append(org) return render(request, &quot;usercenter-fav-org.html&quot;, &#123; &quot;org_list&quot;: org_list, &#125;) 然后去usercenter-base.html页面设置我们的跳转链接： 然后运行我们的项目，就可以点击我的课程了： 然后打开usercenter-fav_org.html页面,配置动态加载： 接着刷新我们的页面，就可以看到我收藏的课程机构了： 收藏课程机构收藏授课讲师我们现在来弄usercenter_fav_teacher页面。老规矩，让我们的usercenter_fav_teacher继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyFavTeacherView # 我收藏的授课讲师url path(&quot;myfav/teacher/&quot;, MyFavTeacherView.as_view(), name=&quot;myfav_teacher&quot;), 然后打开users/views.py文件，新增以下代码：12345678910111213141516171819from organization.models import Teacher# 我收藏的授课讲师函数class MyFavTeacherView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): teacher_list = [] fav_teachers = UserFavorite.objects.filter(user=request.user, fav_type=3) for fav_teacher in fav_teachers: teacher_id = fav_teacher.fav_id teacher = Teacher.objects.get(id=teacher_id) teacher_list.append(teacher) return render(request, &quot;usercenter-fav-teacher.html&quot;, &#123; &quot;teacher_list&quot;: teacher_list, &#125;) 然后去usercenter-fav_teacher.html页面设置我们的跳转链接和配置动态加载：打开oganization/models.py文件，在Teacher函数新增用于获取课程数的函数：12def get_course_nums(self): return self.course_set.all().count() 就是这样： 还有记得去usercenter-fav_org.html页面设置我们的跳转链接，否则就跳不到机构讲师页面了： 然后运行我们的项目，就可以看到我收藏的授课讲师了： 收藏公开课程我们现在来弄usercenter_fav_course页面。老规矩，让我们的usercenter_fav_course继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyFavCourseView # 我收藏的公开课程url path(&quot;myfav/course/&quot;, MyFavCourseView.as_view(), name=&quot;myfav_course&quot;), 然后打开users/views.py文件，新增以下代码：123456789101112131415161718from courses.models import Course# 我收藏的公开课程函数class MyFavCourseView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): course_list = [] fav_courses = UserFavorite.objects.filter(user=request.user, fav_type=1) for fav_course in fav_courses: course_id = fav_course.fav_id course = Course.objects.get(id=course_id) course_list.append(course) return render(request, &quot;usercenter-fav-course.html&quot;, &#123; &quot;course_list&quot;: course_list, &#125;) 然后去usercenter-fav_course.html页面设置我们的跳转链接和配置动态加载： 注意：双箭头指示的url跳转需要在fav_xx.html这3个页面进行修改从而可以3个页面切换自如。 然后运行我们的项目，就可以看到我收藏的公开课程了： 不过右边的取消收藏，也就是删除还没实现：我们需要在3个fav_xx.html页面修改传递的id即可： 然后打开我们的usercenter_base.html页面，找到这3段代码，这就是实现删除的js代码：注意一下，这段代码里面需要放csrf_token,否则会出错：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;script type=&quot;text/javascript&quot;&gt; $(&apos;.jsDeleteFav_course&apos;).on(&apos;click&apos;, function()&#123; var _this = $(this), favid = _this.attr(&apos;data-favid&apos;); $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;/org/add_fav/&quot;, data: &#123; fav_type: 1, fav_id: favid, csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos; &#125;, async: true, success: function(data) &#123; Dml.fun.winReload(); &#125; &#125;); &#125;); $(&apos;.jsDeleteFav_teacher&apos;).on(&apos;click&apos;, function()&#123; var _this = $(this), favid = _this.attr(&apos;data-favid&apos;); $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;/org/add_fav/&quot;, data: &#123; fav_type: 3, fav_id: favid, csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos; &#125;, async: true, success: function(data) &#123; Dml.fun.winReload(); &#125; &#125;); &#125;); $(&apos;.jsDeleteFav_org&apos;).on(&apos;click&apos;, function()&#123; var _this = $(this), favid = _this.attr(&apos;data-favid&apos;); $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;/org/add_fav/&quot;, data: &#123; fav_type: 2, fav_id: favid, csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos; &#125;, async: true, success: function(data) &#123; Dml.fun.winReload(); &#125; &#125;); &#125;);&lt;/script&gt; 至此，我的收藏3个相关页面就实现了，下面我们来配置我的消息页面。 我的消息老规矩，让我们的usercenter_message.html继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyMessageView # 我的消息url path(&quot;mymessage/&quot;, MyMessageView.as_view(), name=&quot;mymessage&quot;), 然后打开users/views.py文件，新增以下代码：12345678910111213141516171819202122232425from pure_pagination import Paginator, EmptyPage, PageNotAnIntegerfrom operation.models import UserMessage# 我的消息函数class MyMessageView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): # 取出所有的信息 all_messages = UserMessage.objects.filter(user=request.user.id) # 对消息进行分页,尝试获取前端get请求传递过来的page参数 # 如果是不合法的配置参数则默认返回第一页 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # 这里指从all_courses中取出来，每页显示9个 p = Paginator(all_messages, 9, request=request) messages = p.page(page) return render(request, &quot;usercenter-message.html&quot;, &#123; &quot;messages&quot;: messages, &#125;) 接着打开usercenter_base.html页面，我们修改页面跳转链接：然后打开usercenter_message.html页面，我们修改页面信息如下：然后打开users/views.py文件，找到我们之前的注册函数，新增以下代码：12345# 写入欢迎注册的信息 user_message = UserMessage() user_message.user = user_profile.id user_message.message = &quot;欢迎注册慕海学习网！&quot; user_message.save() 也就是这样：接下来打开xadmin后台，我们对应id给其加几条信息，然后刷新一下我们的页面： 不知道你是否注意到我们页面顶部的小喇叭，这就是未读消息的提示，所以我们需要统计一下未读消息的数量。打开users/model.py文件，在UserProfile函数里面新增用于获取用户的未读消息的数量的函数：1234def get_unread_nums(self): # 获取用户的未读消息的数量 from operation.models import UserMessage return UserMessage.objects.filter(user=self.id).count() 就是这个样子：然后打开base.html页面，找到并修改信息为图示：突然刷新一下我们的页面，回到首页，看到有2条信息未读：然后点击进入个人中心，发现消息没有了，又回到首页，发现有出现了。这是因为我们的消息页面还没配置完，我们需要全部页面配置。 Ctrl+shift+F调出全局搜索，在里面选择.html文件，然后搜索MsgNum，全部修改成那个样子： 至此，本篇关于个人信息相关页面的配置介绍就到此结束，感谢你的赏阅。 本篇笔记对应于第二十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十二）：个人资料及搜索配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十二）：个人资料及搜索配置","date":"2018-04-13T13:10:44.000Z","updated":"2019-04-13T13:14:15.874Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十二）：个人资料及搜索配置/","link":"","permalink":"http://licheetools.github.io/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十二）：个人资料及搜索配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍用户个人资料页面的配置，具体包括全局导航栏配置，全局搜索功能开发，个人中心资料展示，修改密码和头像以及页面表单提交等功能，下面我们依次介绍一下。 本篇笔记对应于第二十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。 全局导航栏配置首先修改index.html页面，让它也继承我们的base.html页面：然后打开base.html.html页面，我们做一下页面的链接跳转：12345678910111213141516&lt;div class=&quot;nav&quot;&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul&gt; &lt;li &gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li &gt; &lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt; 公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt; &lt;/a&gt; &lt;/li&gt; &lt;li &gt; &lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;active&quot; &gt;&lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; 这样跳转链接算是弄好了，但是我们暂时还不知道根据什么来判断当前页面已经被选中，所以我们需要仿照之前在课程机构里面的那样，增加一个current_nav用于指明当前页面的代号然后就可以根据某值是否相等来判断页面是否选中的状态了。12345678910111213# organizaton/views.py里面class TeacherListView(View):current_nav = &quot;teacher&quot; return render(request, &quot;teachers-list.html&quot;, &#123; &quot;current_nav&quot;: current_nav, &#125;)# base.html页面里面&lt;li &#123;% if current_nav == &apos;teacher&apos; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;&lt;/li&gt; 上述方法的确可以使用，但是有一个问题，就是为了满足前端页面的显示，你在后端每个涉及到的view里面都必须有current view，这是不是太麻烦了？这只是一级导航栏少而且没有二三级导航栏的情况下才可以，多了完全是不可以的。你看一下淘宝的页面导航栏： 那么问题来了，又什么好方法可以解决这个问题吗？答案是有的！ 我们可以根据request.path中的前几位来判断当前处于何种页面，从而选中何种状态。你可能会糊涂，别急我举个例子给你说明一下：http://127.0.0.1:8000/ 你肯定知道访问的是根目录； http://127.0.0.1:8000/course/detail/2你肯定也知道访问的是课程相关的页面；http://127.0.0.1:8000/org/teacher/detail你肯定也知道访问的是讲师相关的页面；鉴于此，我们就是采用这种方式来判断选中状态的。打开base.html.html页面，修改代码如下：12345678910111213141516&lt;ul&gt; &lt;li &#123;% if request.path == &quot;/&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt; &lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt; &lt;/li&gt; &lt;li &#123;% if request.path|slice:&quot;7&quot; == &quot;/course&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt; &lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt; 公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt; &lt;/a&gt; &lt;/li&gt; &lt;li &#123;% if request.path|slice:&quot;12&quot; == &quot;/org/teacher&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt; &lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt; &lt;/li&gt; &lt;li &#123;% if request.path|slice:&quot;9&quot; == &quot;/org/list&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125; &gt; &lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; 其中request.path是指访问的全路径地址，if request.path|slice:”12” == “/org/teacher”是指除了域名以外(此处域名为127.0.0.1)，从1-12位的地址等于/org/teacher即访问地址为：1http://127.0.0.1:8000/org/teacher 就是这个样子： 运行一下我们的项目，发现是随着我们点哪个，哪个页面就是被选中状态。 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 页面表单提交打开users/forms.py文件，新增以下代码：1234567# 用户信息修改表单提交class UserInfoForm(forms.ModelForm): # 除了继承现有的字段还可以新增字段 class Meta: model = UserProfile # 自定义需要验证的字段，注意与数据库中字段应保持一致 fields = [&quot;nick_name&quot;, &quot;birday&quot;, &quot;gender&quot;, &quot;address&quot;, &quot;mobile&quot;] 然后打开我们的users/views.py文件，找到我们之前定义的userinfoview这个函数，我们新增它的post方法：12345678910from .forms import UserInfoFormimport json def post(self, request): user_info_form = UserInfoForm(request.POST, instance=request.user) if user_info_form.is_valid(): user_info_form.save() return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;) else: return HttpResponse(json.dumps(user_info_form.errors), content_type=&apos;application/json&apos;) 然后尝试提交一下你刚才修改过的表单，发现提交没有问题。 至此，本篇关于用户个人资料页面及搜索框的配置就到此为止，感谢你的赏阅。 本篇笔记对应于第二十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十一）：讲师相关页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十一）：讲师相关页面配置","date":"2018-04-13T13:07:47.000Z","updated":"2019-04-13T13:10:01.460Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十一）：讲师相关页面配置/","link":"","permalink":"http://licheetools.github.io/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十一）：讲师相关页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍讲师相关页面的配置，具体包括讲师列表页，讲师详情页等功能，下面我们依次介绍一下。 本篇笔记对应于第二十一篇代码，对应于github的位置是https://github.com/licheetools/eduline。 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 讲师详情页配置打开teacher-detail.html页面，修改teacher_detail.html页面，保留部分信息，其余删除， 里面 是原来teacher_detail.html保留下来的一部分： 接着打开organization/urls.py文件，新增代码：12# 讲师详情页url re_path(&apos;teacher/detail/(?P&lt;teacher_id&gt;\\d+)/&apos;, TeacherDetailView.as_view(), name=&quot;teacher_detail&quot;), 然后打开organization/views.py文件，新增代码（这里面的代码用途前面已经说过，这里不再细说）：12345678910111213141516171819202122232425# 讲师详情页class TeacherDetailView(View): def get(self, request, teacher_id): # 取出当前id的讲师信息 teacher = Teacher.objects.get(id=int(teacher_id)) # 前面的teacher是数据库里面的字段，后一个则是上面取到的teacher all_courses = Course.objects.filter(teacher=teacher) has_fav_teacher = False if UserFavorite.objects.filter(user=request.user, fav_type=3, fav_id=teacher.id): has_fav_teacher = True has_fav_org = False if UserFavorite.objects.filter(user=request.user, fav_type=2, fav_id=teacher.org.id): has_fav_org = True # 讲师排行榜 sorted_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5] return render(request, &quot;teacher-detail.html&quot;, &#123; &quot;teacher&quot;: teacher, &quot;all_courses&quot;: all_courses, &quot;sorted_teacher&quot;: sorted_teacher, &quot;has_fav_teacher&quot;: has_fav_teacher, &quot;has_fav_org&quot;: has_fav_org, &#125;) 接着打开我们的teacher-detail.html页面，进行数据的动态加载以及页面的跳转，这里就不附上代码的，大家自己去和我github上的页面源代码进行对比（先尝试自己修改，之后可以看一下）。 还有页面中左右两侧的收藏功能，这里我直接附上js代码(不懂位置的可以去查看github上的页面源代码)：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&#123;% block custom_js %&#125;&lt;script type=&quot;text/javascript&quot;&gt;//收藏分享function add_fav(current_elem, fav_id, fav_type)&#123; $.ajax(&#123; cache: false, type: &quot;POST&quot;, url:&quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;, data:&#123;&apos;fav_id&apos;:fav_id, &apos;fav_type&apos;:fav_type&#125;, async: true, beforeSend:function(xhr, settings)&#123; xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;); &#125;, success: function(data) &#123; if(data.status == &apos;fail&apos;)&#123; if(data.msg == &apos;用户未登录&apos;)&#123; window.location.href=&quot;/login/?next=&#123;&#123; request.path &#125;&#125;&quot;; &#125;else&#123; alert(data.msg) &#125; &#125;else if(data.status == &apos;success&apos;)&#123; current_elem.text(data.msg) &#125; &#125;, &#125;);&#125;$(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function()&#123; add_fav($(this), &#123;&#123; teacher.id &#125;&#125;, 3);&#125;);$(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function()&#123; add_fav($(this), &#123;&#123; teacher.org.id &#125;&#125;, 2);&#125;);&lt;/script&gt;&lt;script&gt; window._bd_share_config = &#123; &quot;common&quot;:&#123;&quot;bdSnsKey&quot;:&#123;&#125;,&quot;bdText&quot;:&quot;&quot;,&quot;bdMini&quot;:&quot;1&quot;,&quot;bdMiniList&quot;:[&quot;mshare&quot;,&quot;qzone&quot;,&quot;tsina&quot;,&quot;weixin&quot;,&quot;sqq&quot;],&quot;bdPic&quot;:&quot;&quot;,&quot;bdStyle&quot;:&quot;0&quot;,&quot;bdSize&quot;:&quot;16&quot;&#125;, share : [ &#123; &quot;info&quot; : &quot;share_&#123;&#123; teacher.id &#125;&#125;&quot;, &quot;bdSize&quot; : 16, &quot;bdText&quot;:&quot;授课教师-&#123;&#123; teacher.name &#125;&#125;-慕海学习网&quot;, &quot;bdDesc&quot;: &quot;我在#慕海学习网#发现了老师“&#123;&#123; teacher.name &#125;&#125;”，对我们学习很有帮助，一起来看看吧&quot;, &quot;bdUrl&quot;: &apos;http://eduline.licheetools.top&#123;% url &apos;org:teacher_detail&apos; teacher.id %&#125;&apos;, &#125;,] &#125; //以下为js加载部分 with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt;&#123;% endblock %&#125; 顺便大家可以把之前teacher_list.html中的页面跳转弄一下（可以配置的尽量先配置）。 至此，我们本篇关于讲师详情页面的介绍就到此为止，感谢你的赏阅。 本篇笔记对应于第二十一篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十）：课程相关页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十）：课程相关页面配置","date":"2018-04-13T13:06:41.000Z","updated":"2019-04-13T13:07:19.200Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十）：课程相关页面配置/","link":"","permalink":"http://licheetools.github.io/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十）：课程相关页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍课程相关页面的配置，具体包括课程章节信息，章节视频信息，课程评论页面，相关课程推荐，课程播放页面等功能，下面我们依次介绍一下。 本篇笔记对应于第二十篇代码，对应于github的位置是https://github.com/licheetools/eduline。 课程章节信息配置老规矩，把前端资料里面的course-video.html和course-comment.html页面拷贝到我们的templates文件夹里面，接着修改course-video.html页面，保留部分信息，其余删除， 里面 是原来course-video.html保留下来的一部分：12345678910111213141516171819202122232425262728&#123;% extends &apos;base.html&apos; %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;公开课视频信息 - 慕海学习网&#123;% endblock %&#125;&#123;% block custom_bread %&#125;&lt;section&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul class=&quot;crumbs&quot;&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; course.id %&#125;&quot;&gt;课程详情&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;章节信息&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/section&gt;&#123;% endblock %&#125;&#123;% block custom_css %&#125; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/base.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/common-less.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/learn-less.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/aui.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/mooc.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/common-less.css&apos; %&#125;&quot;/&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div id=&quot;main&quot;&gt;&#123;% endblock %&#125; 就是这个样子（这里面的静态文件路径和url的跳转我都做好了，你按照图示进行修改即可）：然后打开course/urls.py文件，新增以下信息：1234from .views import CourseInfoView# 课程章节信息页url re_path(&apos;info/(?P&lt;course_id&gt;.*)/&apos;, CourseInfoView.as_view(), name=&quot;course_info&quot;), 接着打开course/views.py文件，新增以下信息：1234567# 课程章节信息class CourseInfoView(View): def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) return render(request, &quot;course-video.html&quot;, &#123; &quot;course&quot;: course, &#125;) 现在打开course-detail.html页面，ctrl+F搜索“开始学习”，配置跳转路径：1&lt;div class=&quot;buy btn&quot;&gt;&lt;a style=&quot;color: white&quot; href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;开始学习&lt;/a&gt;&lt;/div&gt; 就是这个样子： 然后运行项目，点击课程详情页面的开始学习就进入到课程章节信息页面了：现在在后台为指定某一门课添加课程章节信息，便于我们后面的测试： 章节视频信息配置接下来获取课程的章节：打开courses/models.py文件，在Course函数里面，新定义函数def get_course_lesson用于获取课程的章节：123def get_course_lesson(self): # 获取课程所有章节 return self.lesson_set.all() 在lesson函数里面，新定义函数def get_lesson_video用于获取章节的视频信息：123def get_lesson_video(self): # 获取章节视频信息 return self.video_set.all() 现在打开course-video.html页面，配置数据的动态显示：12345678910111213141516&#123;% for lesson in course.get_course_lesson %&#125; &lt;div class=&quot;chapter chapter-active&quot; &gt; &lt;h3&gt; &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt; &lt;/h3&gt; &lt;ul class=&quot;video&quot;&gt; &#123;% for video in lesson.get_lesson_video %&#125; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;) &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endfor %&#125; 就是这个样子： 前面说过，你可以选择不定义函数，自己调用它的queryset方法，那么只需修改course-video.html页面，修改如下：12345678910111213141516&#123;% for lesson in course.lesson_set.get_queryset%&#125; &lt;div class=&quot;chapter chapter-active&quot; &gt; &lt;h3&gt; &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt; &lt;/h3&gt; &lt;ul class=&quot;video&quot;&gt; &#123;% for video in lesson.video_set.get_queryset %&#125; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;) &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endfor %&#125; 刷新一下我们的页面： 资源下载功能第一步，前往xadmin后台为某一门课添加课程资源，第二步打开courses/views.py文件，修改视图函数：123456from .models import CourseResourceall_resources = CourseResource.objects.filter(course=course)return render(request, &quot;course-video.html&quot;, &#123; &quot;all_resources&quot;: all_resources, &#125;) 就是这个样子：现在打开course-video.html页面，配置资源下载的动态显示：123456&#123;% for resources in all_resources %&#125; &lt;li&gt; &lt;span &gt;&lt;i class=&quot;aui-iconfont aui-icon-file&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&#123;&#123; resources.name &#125;&#125;&lt;/span&gt; &lt;a href=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; resources.download &#125;&#125;&quot; class=&quot;downcode&quot; target=&quot;_blank&quot; download=&quot;&quot; data-id=&quot;274&quot; title=&quot;&quot;&gt;下载&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; 就是这个样子：然后刷新页面，发现显示没有问题。接下在course-video.html页面完成课程信息的修改：123456789101112131415&lt;div class=&quot;static-item &quot;&gt; &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.get_degree_display &#125;&#125;&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;难度&lt;/span&gt; &lt;em&gt;&lt;/em&gt; &lt;/div&gt; &lt;div class=&quot;static-item static-time&quot;&gt; &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.learn_times &#125;&#125;分钟&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;时长&lt;/span&gt; &lt;em&gt;&lt;/em&gt; &lt;/div&gt; &lt;div class=&quot;static-item&quot;&gt; &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.students &#125;&#125;人&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;学习人数&lt;/span&gt; &lt;em&gt;&lt;/em&gt; &lt;/div&gt; 在配置讲师提示的时候，发现讲师和课程之间没有建立外键连接，所以在courses/models.py文件的Course函数，新增讲师字段 :123from organization.models import Teacherteacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, verbose_name=&quot;讲师&quot;, null=True, blank=True) 记得数据库的变动需要两部曲：makemigrations和migrate。 然后前往xadmin后台为这门课添加一个讲师。 然后修改course-video.html页面,修改信息成图示：然后刷新页面，发现显示没有问题。 课程评论页面配置打开courses/urls.py文件，配置课程评论页面的url1234from .views import CourseCommentView # 课程评论页面url re_path(&apos;comment/(?P&lt;course_id&gt;.*)/&apos;, CourseCommentView.as_view(), name=&quot;course_comment&quot;), 然后打开courses/views.py文件，新定义课程评论页面函数：12345678910111213from operation.models import CourseComments# 课程评论页面class CourseCommentView(View): def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) all_comments = CourseComments.objects.all() return render(request, &quot;course-comment.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;all_comments&quot;: all_comments, &#125;) 接着打开course-comment.html页面,修改跳转代码：12&lt;li&gt;&lt;a class=&quot;ui-tabs-active active&quot; id=&quot;learnOn&quot; href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;&lt;span&gt;章节&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a id=&quot;commentOn&quot; class=&quot;&quot; href=&quot;&#123;% url &apos;course:course_comment&apos; course.id %&#125;&quot;&gt;&lt;span&gt;评论&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 然后打开course-comment.html页面，修改课程信息，资料下载，讲师提示等（和前面在video页面配置的一模一样，这里不再介绍）：接下来打开courses/views.py文件，新定义用于用户增加课程评论的函数：1234567891011121314151617181920# 用户增加课程评论class AddCommentView(View): def post(self, request): if not request.user.is_authenticated: # 未登录时页面提示未登录，并跳转到登录页面 return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&apos;, content_type=&apos;application/json&apos;) course_id = request.POST.get(&quot;course_id&quot;, 0) comments = request.POST.get(&quot;comments&quot;, &apos;&apos;) if course_id &gt;0 and comments: course_comments = CourseComments() # get方法只能取出一条数据，如果有多条则抛出异常而且没有数据也抛异常 # filter方法可以取一个列表出来（可以遍历的queryset），没有数据返回空的queryset，是不会抛异常的 course = Course.objects.get(id=int(course_id)) course_comments.course = course course_comments.comment = comments # 前面comment为数据库中定义字段，要保持一致，否则数据存入不数据库 course_comments.user = request.user course_comments.save() return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;评论成功&quot;&#125;&apos;, content_type=&apos;application/json&apos;) else: return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;评论失败&quot;&#125;&apos;, content_type=&apos;application/json&apos;) 现在回到courses/urls.py文件，我们来配置访问的url:1234from .views import AddCommentView # 用户增加课程评论页面url,注意此处为普通的url因为在post中，我们已经有了参数 path(&apos;add_comment/&apos;, AddCommentView.as_view(), name=&quot;add_comment&quot;), 然后打开course-comment.html页面，在页面底部增加js代码：1234567891011121314151617181920212223242526272829303132333435&#123;% block custom_js %&#125;&lt;script type=&quot;text/javascript&quot;&gt; //添加评论 $(&apos;#js-pl-submit&apos;).on(&apos;click&apos;, function()&#123; var comments = $(&quot;#js-pl-textarea&quot;).val() if(comments == &quot;&quot;)&#123; alert(&quot;评论不能为空&quot;) return &#125; $.ajax(&#123; cache: false, type: &quot;POST&quot;, url:&quot;&#123;% url &apos;course:add_comment&apos; %&#125;&quot;, data:&#123;&apos;course_id&apos;:&#123;&#123; course.id &#125;&#125;, &apos;comments&apos;:comments&#125;, async: true, beforeSend:function(xhr, settings)&#123; xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;); &#125;, success: function(data) &#123; if(data.status == &apos;fail&apos;)&#123; if(data.msg == &apos;用户未登录&apos;)&#123; window.location.href=&quot;&#123;% url &apos;login&apos; %&#125;&quot;; &#125;else&#123; alert(data.msg) &#125; &#125;else if(data.status == &apos;success&apos;)&#123; window.location.reload();//刷新当前页面. &#125; &#125;, &#125;); &#125;);&lt;/script&gt;&#123;% endblock %&#125; 继续在该页面修改如下代码，使页面评论可以动态加载出来：12345678910111213141516&#123;% for user_comments in all_comments %&#125; &lt;li class=&quot;post-row&quot;&gt; &lt;div class=&quot;media&quot;&gt; &lt;span target=&quot;_blank&quot;&gt;&lt;img src=&apos;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; user_comments.user.image &#125;&#125;&apos; width=&apos;40&apos; height=&apos;40&apos; /&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;tit&quot;&gt; &lt;span target=&quot;_blank&quot;&gt;&#123;&#123; user_comments.user.username &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;p class=&quot;cnt&quot;&gt;&#123;&#123; user_comments.user.comment &#125;&#125;&lt;/p&gt; &lt;div class=&quot;footer clearfix&quot;&gt; &lt;span title=&quot;创建时间&quot; class=&quot;l timeago&quot;&gt;&#123;&#123; user_comments.add_time &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &#123;% endfor %&#125; 然后你可以在图示位置打上断点，开启debug模式：发现没有问题，我们可以去掉断点，自己再增加一条，页面是不是已经自动更新了你的评论内容。 相关课程推荐配置打开courses/views.py文件，找到CourseInfoView这个函数，修改为如下：123456789101112131415161718192021# 课程章节信息class CourseInfoView(View): def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) # 取出所有选过这门课的学生 user_courses = UserCourse.objects.filter(course=course) # 取出所有选过这门课的学生的id,采用递归表达式形式 user_ids = [user_course.user.id for user_course in user_courses] # 取出刚才那些学生选过的所有的课程 all_user_courses = UserCourse.objects.filter(user_id__in=user_ids) # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式 course_ids = [all_user_course.course_id for all_user_course in all_user_courses] # 取出学过该课程用户学过的其他课程 relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5] return render(request, &quot;course-video.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;relate_courses&quot;: relate_courses, &#125;) 注意：双下划线代表代表传进来的是一个可以遍历的list。接着就是在前端页面配置动态加载信息了（记得course-video.html和course_comment.html这两个页面都需要配置，一模一样）：123456789101112&lt;ul class=&quot;other-list&quot;&gt; &#123;% for relate_course in relate_courses %&#125; &lt;li class=&quot;curr&quot;&gt; &lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot; alt=&quot;&#123;&#123; relate_course.name &#125;&#125;&quot;&gt; &lt;span class=&quot;name autowrap&quot;&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; 就是这个样子：然后刷新一下我们的页面，发现没有问题！ 不过还有一个问题，那就是用户如果没有登录，那是不能让他进入课程章节这个页面的，因此需要判断一下。这里因为使用的是方法型编程所以可以使用装饰器loginrequired来进行判断。 在utils文件夹下面，新建一个名为mixin_utils.py文件，在里面添加如下代码：123456789from django.contrib.auth.decorators import login_requiredfrom django.utils.decorators import method_decoratorclass LoginRequiredMixin(object): @method_decorator(login_required(login_url=&apos;/login/&apos;)) def dispatch(self, request, *args, **kwargs): return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs) 接着打开courses/views.py文件，在里面修改CourseInfoView和CourseCommentView，修改后如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748from utils.mixin_utils import LoginRequiredMixin# 课程章节信息class CourseInfoView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;redirect_to&apos; def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) # 查询用户是否已经开始学习了该课程，如果没有则开始学习 user_courses = UserCourse.objects.filter(user=request.user, course=course) if not user_courses: user_course = UserCourse(user=request.user, course=course) course.students += 1 course.save() user_course.save() # 取出所有选过这门课的学生 user_courses = UserCourse.objects.filter(course=course) # 取出所有选过这门课的学生的id,采用递归表达式形式 user_ids = [user_course.user.id for user_course in user_courses] # 取出刚才那些学生选过的所有的课程 all_user_courses = UserCourse.objects.filter(user_id__in=user_ids) # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式 course_ids = [all_user_course.course_id for all_user_course in all_user_courses] # 取出学过该课程用户学过的其他课程 relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5] return render(request, &quot;course-video.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;relate_courses&quot;: relate_courses, &#125;)# 课程评论页面class CourseCommentView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;redirect_to&apos; def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) all_comments = CourseComments.objects.all() return render(request, &quot;course-comment.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;all_comments&quot;: all_comments, &#125;) 刷新一下页面，点几个课程试试看，发现都在该同学还学过哪些课里推荐了。 课程播放页面配置老规矩，把前端资料里面的course-play.html拷贝到我们的templates文件夹里面，然后替换继承base页面，这里就不细说了，直接贴图： 打开courses/urls.py文件，新增代码：12345from .views import VideoPlayView# 视频播放页面urlre_path(&apos;video/(?P&lt;video_id&gt;.*)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),或者 re_path(&apos;video/(?P&lt;video_id&gt;\\d+)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),都是可以的 接着打开courses/views.py文件，新增代码：123456789101112131415161718192021222324252627282930313233343536from .models import Video# 视频播放页面class VideoPlayView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;redirect_to&apos; def get(self, request, video_id): video = Video.objects.get(id=int(video_id)) course = video.lesson.course all_resources = CourseResource.objects.filter(course=course) # 查询用户是否已经开始学习了该课程，如果没有则开始学习 user_courses = UserCourse.objects.filter(user=request.user, course=course) if not user_courses: user_course = UserCourse(user=request.user, course=course) course.students += 1 course.save() user_course.save() # 取出所有选过这门课的学生 user_courses = UserCourse.objects.filter(course=course) # 取出所有选过这门课的学生的id,采用递归表达式形式 user_ids = [user_course.user.id for user_course in user_courses] # 取出刚才那些学生选过的所有的课程 all_user_courses = UserCourse.objects.filter(user_id__in=user_ids) # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式 course_ids = [all_user_course.course_id for all_user_course in all_user_courses] # 取出学过该课程用户学过的其他课程 relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5] return render(request, &quot;course-play.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;relate_courses&quot;: relate_courses, &quot;video&quot;: video, &#125;) 上面的代码和之前在课程章节信息里面定义的几乎一模一样，只是course的来源不一样。 接着打开course-video.html文件，配置跳转链接：12345678&#123;% for video in lesson.get_lesson_video %&#125; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&apos;&#123;% url &apos;course:video_play&apos; video.id %&#125;&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;) &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; 然后打开course-video.html文件，配置视频链接，记住由于我们这边是type=’video/mp4’所以后台所添加的视频必须是.mp4结尾，否则会出错。刷新一下，发现页面跳转没有问题，显示也没有问题。 大家可以把自己的视频上传到七牛云，然后把生成的外键添加到后台即可,这里不详细介绍，直接开启传送大门：七牛云存储如何上传视频文件 至此，本篇关于课程相关页面的配置介绍就到此结束，感谢你的赏阅。 本篇笔记对应于第二十篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十九）：课程详情页配置","slug":"零基础使用Django2-0-1打造在线教育网站（十九）：课程详情页配置","date":"2018-04-13T13:04:54.000Z","updated":"2019-04-13T13:05:21.548Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（十九）：课程详情页配置/","link":"","permalink":"http://licheetools.github.io/2018/04/13/零基础使用Django2-0-1打造在线教育网站（十九）：课程详情页配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍课程详情页面的配置，这个页面和我们之前配置的页面差别不是很大，可以借鉴前面的配置。 本篇笔记对应于第十九篇代码，对应于github的位置是https://github.com/licheetools/eduline。 总结一下小伙伴们可能会问了，这篇笔记还没开始写怎么就开始总结了呢？是的，尽管没写但是我觉得非常有必要在这里总结一下，特别是对之前讲的信息的总结。后面随着开发进度的加快，一些东西我就不会详细介绍了，因为都是非常类似的操作。 我们现在可以理解MTV的模式就应该是这样子的：新建数据库字段(models)–&gt;配置访问路径(urls) –&gt;新建视图函数(views) –&gt; 页面信息动态加载(templates)，所以后面的操作就是这个过程，大家在学习的时候对此要有一个清醒的认识。 话不多说，我们正式进入今天的学习内容，走你。 课程列表页配置老规矩，把前端资料里面的course-list.html页面拷贝到我们的templates文件夹里面，接着配置url,在eduline/urls.py文件新增如下代码：12# 课程相关应用path配置path(&quot;course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)), 然后打开courses应用，在里面新建urls.py文件并在里面新增如下代码：123456789from django.urls import path, include, re_pathfrom .views import CourseListViewapp_name = &quot;courses&quot;urlpatterns = [ path(&apos;list/&apos;, CourseListView.as_view(), name=&apos;course_list&apos;),] 现在打开courses/views.py文件，我们添加如下代码：12345678from django.shortcuts import renderfrom django.views.generic.base import View# Create your views here.class CourseListView(View): def get(self, request): return render(request, &quot;course-list.html&quot;, &#123;&#125;) 运行一下我们的项目，在浏览器地址栏输入：http://127.0.0.1:8000/course/list/然后回车出现：![](https://upload-images.jianshu.io/upload_images/8964398-76c1aaf58130dc4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 可以发现访问没有问题，但是样式并没有加载出来。我们仔细观察course_list.html页面之后发现它和之前的org_list.html页面一样是具有共同的头部和尾部，因此我们可以继承base.html页面。 在course_list.html里面删除所有代码，新增以下代码：1234567891011121314151617&#123;% extends &apos;base.html&apos; %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;公开课列表 - 慕海学习网&#123;% endblock %&#125;&#123;% block custom_bread %&#125;&lt;section&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul class=&quot;crumbs&quot;&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;公开课&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/section&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;section&gt; &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;&#123;% endblock %&#125; 就是这个样子： 然后是回到我们的courses/views.py文件，我们修改代码如下：123456789101112from django.shortcuts import renderfrom django.views.generic.base import View# Create your views here.from .models import Courseclass CourseListView(View): def get(self, request): all_courses = Course.objects.all() return render(request, &quot;course-list.html&quot;, &#123; &quot;all_courses&quot;: all_courses, &#125;) 回到course_list.html页面，修改代码为图示信息： 分页功能配置直接仿照我们当时在org_list.html的配置，拷贝如下代码至courses/views.py文件里面：123456789101112131415from pure_pagination import Paginator, EmptyPage, PageNotAnInteger# 对课程进行分页,尝试获取前端get请求传递过来的page参数 # 如果是不合法的配置参数则默认返回第一页 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # 这里指从all_courses中取出来，每页显示9个 p = Paginator(all_courses, 9, request=request) courses = p.page(page) return render(request, &quot;course-list.html&quot;, &#123; &quot;all_courses&quot;: courses, &#125;) 接着打开course_list.html文件，修改代码为图示： 在html中注意此刻不再是all_courses，前面说过此时的all_courses已经不是一个queryset对象，而是一个purepage对象，所以应该用all_courses.object_list。 还有复制org_list的页面分页代码，并将all_orgs修改为all_courses,就是这段代码：12345678910111213141516171819202122&lt;div class=&quot;pageturn&quot;&gt; &lt;ul class=&quot;pagelist&quot;&gt; &#123;% if all_courses.has_previous %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &#123;% for page in all_courses.pages %&#125; &#123;% if page %&#125; &#123;% ifequal page all_courses.number %&#125; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endifequal %&#125; &#123;% else %&#125; &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% if all_courses.has_next %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt; 排序功能的配置和前面在org_list页面的配置一模一样，我们复制粘贴并修改一下那些代码，放到courses/views.py文件里面：1234567891011121314all_courses = Course.objects.all().order_by(&quot;-add_time&quot;) # 默认是按添加顺序反着排序# 最热门和参与人数排名 # 最热门hot根据点击数来判断 # 参与人数是根据学习人数来判断 sort = request.GET.get(&apos;sort&apos;, &apos;&apos;) if sort: if sort == &quot;students&quot;: all_courses = all_courses.order_by(&quot;-students&quot;) elif sort == &quot;hot&quot;: all_courses = all_courses.order_by(&quot;-click_nums&quot;)return render(request, &quot;course-list.html&quot;, &#123; &quot;sort&quot;: sort, &#125;) 现在打开course_list.html文件，我们将上述功能和选中状态进行配置：12345&lt;ul class=&quot;tab_header&quot;&gt; &lt;li class=&quot;&#123;% ifequal sort &apos;&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=&quot;&gt;最新 &lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;&#123;% ifequal sort &apos;hot&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=hot&quot;&gt;最热门&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;&#123;% ifequal sort &apos;students&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&quot;&gt;参与人数&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 就是这个样子： 热门课程推荐打开courses/views.py文件，新增以下代码：12345# 热门课程推荐 hot_courses = Course.objects.all().order_by(&quot;-students&quot;)[:3] return render(request, &quot;course-list.html&quot;, &#123; &quot;hot_courses&quot;: hot_courses, &#125;) 然后打开course_list.html文件，将热门课程推荐进行动态加载：运行一下我们的项目，在浏览器地址栏输入http://127.0.0.1:8000/course/list/回车，发现课程难度显示有问题：![](https://upload-images.jianshu.io/upload_images/8964398-81c3e7a2a4f9840d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 我们需要修改{ hot_course.degree }}为 { hot_course.get_degree_display }}，这个字段的意思是说得到degree的字段显示，并不是得到它本身，事实上它本身为英文。（专门针对choices的显示） 现在刷新一下我们的页面，难度等级正常显示了，没有问题： 至此课程列表页的介绍到此结束，下面我们介绍课程详情页面。 课程详情页配置老规矩，把前端资料里面的course-detail.html页面拷贝到我们的templates文件夹里面，正常情况下我们应该配置url，但是鉴于此处的course-detail.html页面会继承我们之前的course-list.html页面，所以我们就先把course-detail.html页面给配置完，然后才开始url的配置。 打开course-detail.html页面，删除所有代码，新增以下代码：12345678910111213141516171819&#123;% extends &apos;base.html&apos; %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;课程详情页 - 慕海学习网&#123;% endblock %&#125;&#123;% block custom_bread %&#125;&lt;section&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul class=&quot;crumbs&quot;&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&#123;&#123; course.name &#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/section&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;section&gt; &lt;section&gt; &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;&#123;% endblock %&#125; 接着配置url,打开courses/urls.py文件并在里面新增如下代码：1234from .views import CourseDetailView # 课程机构首页url re_path(&apos;detail/(?P&lt;course_id&gt;.*)/&apos;, CourseDetailView.as_view(), name=&quot;course_detail&quot;), 现在书写我们的视图函数，打开courses/views.py文件，在里面添加如下代码：1234# 课程详情页class CourseDetailView(View): def get(self, request，course_id): # 所有re_path在请求参数的时候必须带上id return render(request, &quot;course-detail.html&quot;, &#123;&#125;) 然后配置页面的跳转链接，我们希望可以从课程列表页面跳转进来，所以打开course_list.html页面，将图中信息修改为所示信息：接下来修改我们的view(courses/views.py文件)，准备页面信息的动态加载：12345678# 课程详情页class CourseDetailView(View): def get(self, request, course_id):#注意一下此处的id是数据库表默认为我们添加的 course = Course.objects.get(id=int(course_id)) return render(request, &quot;course-detail.html&quot;, &#123; &quot;course&quot;: course, &#125;) 然后打开course_detail.html页面，使我们的数据得到动态加载并显示出来。 注意章节数和学习用户的获取方式：在courses/modles.py文件里面的Course类里面定义一个get-zj-nums方法：123def get_zj_nums(self): # 获取课程章节数 return self.lesson_set.all().count() 还有学习用户的获取方式：我们之前在operation中专门定义了一个类UserCourse用于对用户学习作记录的。既然存在了这个类（数据库生成和迁移操作之后是一张表），那我们就可以采用获取学习章节数的方式来获取它。 同样在courses/modles.py文件里面的Course类里面定义一个get-learn-users方法：123def get_learn_users(self): # 获取学习用户数，此处不用统计，我们只取出5个即可 return self.usercourse_set.all()[:5] 就是这个样子：现在打开course_detail.html页面，将信息修改为图示那样：然后去xadmin后台新增用户课程，记得把刚才展示的课程加里面去，便于我们观察是否成功显示：还有一个问题，就是你现在点进这个页面，那么相应课程的点击数应该加1，所以在我们的view(courses/views.py文件),新增以下代码：123# 课程点击数增加 course.click_nums += 1 course.save() 就是这个样子： 授课机构的配置注意教师数的获取方式：注意章节数和学习用户的获取方式：在organization/modles.py文件里面的CourseOrg类里面定义一个get_teacher_nums方法：123def get_teacher_nums(self):# 获取教师数return self.teacher_set.all().count() 然后html页面调用，采用如下代码：1&#123;&#123; course.course_org.get_teacher_nums &#125;&#125; 当然如果你不想自定义函数，那也是可以的，你仅仅只需要在前端页面采用如下代码即可,是不是更简单：1&#123;&#123; course.course_org.teacher_set.count &#125;&#125; 接下来我们完成右侧下面的相关课程推荐模块。 相关课程推荐这个就是相关课程推荐的页面，我们接下来就是完成这个功能：打开courses/views.py文件，在CourseDetailView函数里面新增用于实现相关课程推荐功能的代码：1234567891011# 相关课程推荐 # 此处为course而不是Course,我们是用前面取出的课程 tag = course.tag if tag:# 这里必须从1开始不然会推荐自己，也就是索引0 relate_courses = Course.objects.filter(tag=tag)[1:2] else: relate_courses = [] return render(request, &quot;course-detail.html&quot;, &#123; &quot;relate_courses&quot;: relate_courses, &#125;) 就是这个样子：接着在course-detail.html页面修改页面展示信息：123456789101112131415&#123;% for relate_course in relate_courses %&#125; &lt;dl&gt; &lt;dt&gt; &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt; &lt;img width=&quot;240&quot; height=&quot;220&quot; class=&quot;scrollLoading&quot; src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot;/&gt; &lt;/a&gt; &lt;/dt&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt; &lt;h2&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt; &lt;span class=&quot;fl&quot;&gt;学习时长：&lt;i class=&quot;key&quot;&gt;&#123;&#123; relate_course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt; &lt;/dd&gt; &lt;/dl&gt; &#123;% endfor %&#125; 就是这个样子： 然后去xadmin后台或者数据库中将几个课程的tag修改为同一个，然后再运行一下我们的项目，就出现： 现在还差页面中的收藏和开始学习这两个功能的配置了，开始学习我们在下一篇介绍。 实现收藏功能我们之前在课程机构里面配置过收藏的功能，如果不熟悉的小伙伴们可以回顾一下第十八篇：零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置，这里我就快速介绍一下：首先在course-detail.html页面底部添加如下代码：1234567891011121314151617181920212223242526272829303132333435363738&#123;% block custom_js %&#125; &lt;script type=&quot;text/javascript&quot;&gt; //收藏分享 function add_fav(current_elem, fav_id, fav_type) &#123; $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;, data: &#123;&apos;fav_id&apos;: fav_id, &apos;fav_type&apos;: fav_type&#125;, async: true, beforeSend: function (xhr, settings) &#123; xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;); &#125;, success: function (data) &#123; if (data.status == &apos;fail&apos;) &#123; if (data.msg == &apos;用户未登录&apos;) &#123; window.location.href = &quot;&#123;% url &apos;login&apos; %&#125;?next=&#123;&#123; request.path &#125;&#125;&quot;; &#125; else &#123; alert(data.msg) &#125; &#125; else if (data.status == &apos;success&apos;) &#123; current_elem.text(data.msg) &#125; &#125;, &#125;); &#125; $(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function () &#123; add_fav($(this), &#123;&#123; course.id &#125;&#125;, 1); &#125;); $(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function () &#123; add_fav($(this), &#123;&#123; course.course_org.id &#125;&#125;, 2); &#125;); &lt;/script&gt;&#123;% endblock %&#125; 然后再打开course/views.py文件，补充 CourseDetailView函数：123456789101112131415161718from operation.models import UserFavorite# 是否收藏课程，默认为否 has_fav_course = False has_fav_org = False # 用户必须已登录我们才判断，否则不需要 if request.user.is_authenticated: if UserFavorite.objects.filter(user=request.user, fav_id=course.id, fav_type=1): has_fav_course = True if UserFavorite.objects.filter(user=request.user, fav_id=course.course_org.id, fav_type=2): has_fav_org = Truereturn render(request, &quot;course-detail.html&quot;, &#123; &quot;has_fav_course&quot;: has_fav_course, &quot;has_fav_org&quot;: has_fav_org, &#125;) 就是这个样子：接着打开course-detail.html页面，修改收藏的显示：123456789&lt;div class=&quot;btn colectgroupbtn&quot; id=&quot;jsLeftBtn&quot;&gt; &#123;% if has_fav_course %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125; &lt;/div&gt;&lt;div class=&quot;btn notlogin &quot;data-favid=&quot;14&quot; id=&quot;jsRightBtn&quot;&gt; &#123;% if has_fav_org %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125; &lt;/div&gt; 运行一下项目，两个都点击试试： 数据库已经有了，点击就没有了。 备注 如果出现上面两个收藏按钮点击没反应的情况，大家可以先尝试用浏览器f12（博主用的是chrome浏览器）看一下浏览器有没有post请求发出去以及参数和url的配置是否出错。如果还是有问题，那么回到base.html页面，将的位置由开头放置到底部：原来：现在： 知道为什么会出现这种情况么？那是因为jQuery 入口函数与 JavaScript 入口函数是有区别的：jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。而JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行的。这里是js还未加载完就去执行，所以才出现的问题，放在底部就没问题了。 至此本篇关于课程详情页面的配置介绍就到此结束了，感谢你的赏阅。 本篇笔记对应于第十九篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置","slug":"零基础使用Django2-0-1打造在线教育网站（十八）：机构详情页配置","date":"2018-04-13T13:02:21.000Z","updated":"2019-04-13T13:03:56.623Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（十八）：机构详情页配置/","link":"","permalink":"http://licheetools.github.io/2018/04/13/零基础使用Django2-0-1打造在线教育网站（十八）：机构详情页配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍机构详情页面的配置，主要包括四个部分：机构首页、机构课程、机构介绍和机构讲师，以及用户收藏的介绍下面我将逐一介绍说明。 本篇笔记对应于第十八篇代码，对应于github的位置是https://github.com/licheetools/eduline。 机构首页打开浏览器，在地址栏输入:http://127.0.0.1:8000/xadmin，往里面新增10门课程和10位讲师信息:![](https://upload-images.jianshu.io/upload_images/8964398-ebb88cd33034ae62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)新增课程信息的时候发现课程没有所属课程机构，这是不行的，因为我们后面还有机构课程这个模块，如果课程与课程机构之间没有外键来链接的话就无法实现相应的功能。所以我们需要在courses/models.py文件中，新增外键连接：123from organization.models import CourseOrgcourse_org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=&quot;课程机构&quot;, null=True, blank=True) 就是这个样子：记住我们需要在外键里面增加要求null=True, blank=True,你可能会问，为什么之前的外键不用呢？那是因为之前没有课程数据，可是现在里面已经有了一门课程（之前添加的），如果不加这个要求，系统会提示之前的那门课的外键怎么办。所以为了避免这个问题，我们就加上这个要求。 接下来进行数据库的生成和迁移操作：12makemigration coursesmigrate courses 就是这个样子： 然后继续在xadmin后台新增课程信息： 完成以后，现在将前端资料里面与org相关的四个页面拷贝到我们的templates文件夹里面： 接下来，通过观察新建org_base.html页面,将org_homepage页面全部复制过去，然后修改block： 接下来就是三部曲了：1231、页面第三行加上&#123;% load staticfiles %&#125;2、修改全部类型文件的static相对路径3、修改其中已经设置好的url，配置跳转链接 现在仿照之前的Base继承，清空org_homepage页面，往里面新增图示代码：然后删除org_base.html页面中的`和`之间的代码，就是这个样子： 接下来打开我们的organization/views.py文件，在底部新增如下代码：12345678910111213141516# 机构首页class OrgHomeView(View): def get(self, request, org_id): # 根据id来获取课程机构 course_org = CourseOrg.objects.get(id=int(org_id)) # 根据取到的课程机构直接获取它的所有课程，我们取3个 all_courses = course_org.course_set.all()[:3] # 根据取到的课程机构直接获取它的所有讲师，我们取1个 all_teachers = course_org.teacher_set.all()[:1] render(request, &quot;org-detail-homepage.html&quot;, &#123; &quot;all_courses&quot;: all_courses, &quot;all_teachers&quot;: all_teachers, &#125;) 然后配置我们的path,打开organization/urls.py文件，在底部新增如下代码：1234from .views import OrgHomeView# 课程机构首页url,此处不是普通的url是因为我们必须知道是哪个机构的首页re_path(&apos;home/(?P&lt;org_id&gt;.*)/&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;), 接着打开org_homepage页面，删除多余的课程，采用for循环来遍历数据库中的课程信息：顺便修改其中的课程信息：1234567891011121314151617&#123;% for course in all_courses %&#125; &lt;div class=&quot;module1_5 box&quot;&gt;&lt;a href=&quot;course-detail.html&quot;&gt;&lt;img width=&quot;214&quot; src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course.image &#125;&#125;&quot;/&gt;&lt;/a&gt; &lt;div class=&quot;des&quot;&gt; &lt;a href=&quot;course-detail.html&quot;&gt;&lt;h2&gt;&#123;&#123; course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt; &lt;span class=&quot;fl&quot;&gt;课时：&lt;i class=&quot;key&quot;&gt;&#123;&#123; course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt; &lt;span class=&quot;fr&quot;&gt;参加人数：&#123;&#123; course.students &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt; &lt;span class=&quot;fl&quot;&gt;&#123;&#123; course.course_org.name &#125;&#125;&lt;/span&gt; &lt;span class=&quot;star fr notlogin &quot; data-favid=&quot;13&quot; data-fav-type=&quot;4&quot;&gt; &#123;&#123; course.fav_nums &#125;&#125; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endfor %&#125; 然后三部曲走一下，这里就不详细说明了。 接着打开org_list页面，配置跳转链接： 修改如下：1&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; course_org.id %&#125;&quot;&gt; 记住因为之前我们的org_home配置的不是普通的path,所以你如果写成普通的:1&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; %&#125;&quot;&gt; 那是会报错的，我们需要在此后空一格，然后带上我们在path中定义的id,因为是跳转到课程机构首页，所以写上它的id。 然后运行一下我们的项目：发现课程机构显示不同步，那我们把刚才获取到的数据返回到页面显示一下： 那我们就打开我们的organization/views.py文件，在底部修改为如下代码：1234567891011121314151617# 机构首页class OrgHomeView(View): def get(self, request, org_id): # 根据id来获取课程机构 course_org = CourseOrg.objects.get(id=int(org_id)) # 根据取到的课程机构直接获取它的所有课程，我们取3个 all_courses = course_org.course_set.all()[:3] # 根据取到的课程机构直接获取它的所有讲师，我们取1个 all_teachers = course_org.teacher_set.all()[:1] render(request, &quot;org-detail-homepage.html&quot;, &#123; &quot;all_courses&quot;: all_courses, &quot;all_teachers&quot;: all_teachers, &quot;course_org&quot;: course_org, &#125;) 接着返回org_base页面,我们修改如下代码： 这里的数据会向上传递，所以后面的那些org页面都是可以用到的。完成以后就是这个样子：接着运行一下我们的项目，发现显示没有问题： 下面继续完成它的其余两个：机构教师和机构介绍。机构教师：打开org_homepage页面，将信息修改成图示：机构介绍：还是在org_homepage页面，将信息修改成图示：接着运行一下我们的项目，发现显示没有问题。 至此，第一个机构首页的信息就全部配置完全了，其余几个很类似，所以介绍的就比较快了，当做复习一下。 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，本篇关于机构详情页面的配置以及用户收藏的介绍就到此为止了，感谢你的赏阅。 本篇笔记对应于第十八篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十七）：我要学习配置","slug":"零基础使用Django2-0-1打造在线教育网站（十七）：我要学习配置","date":"2018-04-13T12:59:07.000Z","updated":"2019-04-13T13:01:08.466Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（十七）：我要学习配置/","link":"","permalink":"http://licheetools.github.io/2018/04/13/零基础使用Django2-0-1打造在线教育网站（十七）：我要学习配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍我要学习小页面的配置，为什么需要单独介绍，是因为这个和其他页面的耦合度不是很高，单独写一篇便于今后学习的需要。 本篇笔记对应于第十七篇代码，对应于github的位置是https://github.com/licheetools/eduline。 配置我要学习这就是我要学习的页面，它是通过Ajax来控制的，也就是异步的javascript和xml。它可以在保证当前页面不被重新刷新的条件下，提交表单向后台传送数据。正如你在前面所学习的那样，但凡涉及到了表单的提交都会有一个form验证。我们仿照前面的逻辑在operation应用下面新建一个forms.py文件，用于此处表单的验证。 然后在里面添加如下代码：12345678from django import formsclass UserAskForm(forms.Form): name = forms.CharField(required=True, min_length=2, max_length=20) mobile = forms.CharField(required=True, min_length=11, max_length=11) course_name = forms.CharField(required=True, min_length=5, max_length=50) 就是这个样子：接着打开operation/models.py文件,发现这两个函数定义的字段信息非常相似，连要求都是一样的：那么我们就有一个疑问，如何让代码重复利用，不需要再次重新造轮子呢？我们可以利用Django自带的ModelForm,这比form强大多了，除了继承现有的字段还可以新增字段！新增代码如下：1234567# 进阶版的函数class AnotherUserAskForm(forms.ModelForm): # 除了继承现有的字段还可以新增字段 class Meta: model = UserAsk # 自定义需要验证的字段 fields = [&quot;name&quot;, &quot;mobile&quot;, &quot;course_name&quot;] 就是这个样子： 接下来的一步就是path的配置了，现在有一个疑问，就是我们的项目url文件，已经存放了很多url，如果我们再往里面新增url就很容易造成管理上的混乱： 我们在思考能不能像高考考场一样，有许多分考场，学生在各个分考场的试卷会送到省里，在保证考试有效的情况下，避免人员来往市区的麻烦。Django里面其实也是有的，所以我们就采用include的机制，来达到这个目的：在保证path的有效情况下，将各个app应用的path分开放置，最后将app的path引入项目的path就可以了。下面我们开始在organization应用下面，新建urls.py文件，里面增加如下代码：12345678from django.urls import path, include, re_pathfrom .views import OrgViewurlpatterns = [ # 课程机构列表页url path(&quot;list/&quot;, OrgView.as_view(), name=&quot;org_list&quot;),] 然后回到我们的eduline/urls.py文件，我们将刚才的那行path用下面的一行include代码替换掉：1234567### 继续Ajax配置前面说到我要学习的页面，它是通过Ajax来控制的，是一种异步加载方式，所以我们此时不能在view里面直接render一个页面回来，应该是给前端返回json数据，而不是页面。这里我们就要用到HttpResponse这个类，它指明了给用户返回哪种类型的数据。打开organization/views.py文件，在里面添加如下代码： from operation.forms import AnotherUserAskForm 我要学习功能实现class AddUserAskView(View): def post(self, request): userask_form = AnotherUserAskForm(request.POST) # 判断form是否有效 if userask_form.is_valid(): # 注意modelform和form的区别，modelform它有model的属性，而且有个参数commit，当它为真时会把数据存入到数据库 user_ask = userask_form.save(commit=True) # 如果保存成功,则返回json,不过后面必须有content_type用于告诉浏览器返回的类型 return HttpResponse(&quot;{&apos;status&apos;: &apos;success&apos;}&quot;, content_type=&apos;application/json&apos;) else: # 如果保存失败，则返回json,并将form的错误信息通过msg传递到前端进行显示 return HttpResponse(&quot;{&apos;status&apos;: &apos;fail&apos;, &apos;msg&apos;:{0}}&quot;.format(userask_form.errors), content_type=&apos;application/json&apos;) 12345678*******由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！*******打开我们的operation/forms.py文件，里面加上如下代码： import re 验证手机号码是否合法def clean_mobile(self): mobile = self.cleaned_data[&quot;mobile&quot;] REGEX_MOBILE = &quot;^1[358]\\d{9}$|^147\\d{8}$|^176\\d{8}$&quot; p = re.compile(REGEX_MOBILE) if p.match(mobile): return mobile else: raise forms.ValidationError(&quot;手机号码非法&quot;, code=&quot;mobile_invalid&quot;) `关于正则表达式的用法，大家可以关注我的另一个专题《趣玩Python爬虫》，我目前在筹划中，预计9月份就会更新了。 接下来你可以重复刚才的测试操作，看手机号码验证是否生效了，这里就不一一演示了。 至此，我们关于我要学习的小页面的配置就到此为止了，感谢你的赏阅。下一篇笔记，我们就介绍课程机构的详情页面的配置了。 本篇笔记对应于第十七篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十六）：列表分页功能","slug":"零基础使用Django2-0-1打造在线教育网站（十六）：列表分页功能","date":"2018-04-12T12:49:21.000Z","updated":"2019-04-13T12:55:39.701Z","comments":true,"path":"2018/04/12/零基础使用Django2-0-1打造在线教育网站（十六）：列表分页功能/","link":"","permalink":"http://licheetools.github.io/2018/04/12/零基础使用Django2-0-1打造在线教育网站（十六）：列表分页功能/","excerpt":"","text":"写在前面本篇笔记我们将介绍列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的实现。 本篇笔记对应于第十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。 列表分页各位小伙伴们看下面的图片，这就是列表分页，怎么样是不是觉得很简单，其实它挺复杂的，下面介绍如何实现这个功能： 我们是通过django-pure-pagination这个库来实现的，所以首先进入到我们的虚拟环境，安装这个库：12345678910111213C:\\Users\\YC&gt;F:F:\\&gt;cd envsF:\\Envs&gt;cd edulineF:\\Envs\\eduline&gt;workon eduline(eduline) F:\\Envs\\eduline&gt;pip install django-pure-pagination -i https://pypi.tuna.tsinghua.edu.cn/simpleCollecting django-pure-paginationInstalling collected packages: django-pure-paginationSuccessfully installed django-pure-pagination-0.3.0(eduline) F:\\Envs\\eduline&gt; 然后去settings.py文件里，注册这个app:1&apos;pure_pagination&apos;, 接下来点击github上的项目地址django-pure-pagination，然后下拉至settings：我们看一下可设置的参数：123456PAGINATION_SETTINGS = &#123; &apos;PAGE_RANGE_DISPLAYED&apos;: 10, &apos;MARGIN_PAGES_DISPLAYED&apos;: 2, &apos;SHOW_FIRST_PAGE_WHEN_INVALID&apos;: True,&#125; 解释一下上面参数的意义：123PAGE_RANGE_DISPLAYED: 表示总共会显示多少个页数。(包括省略号，两边和中间)MARGIN_PAGES_DISPLAYED: 表示旁边会显示多少个。SHOW_FIRST_PAGE_WHEN_INVALID: 表示当输入页数不合法是否要跳到第一页 我们继续下拉，看一下官方给的例子：1234567891011121314151617181920212223# views.pyfrom django.shortcuts import render_to_responsefrom pure_pagination import Paginator, EmptyPage, PageNotAnIntegerdef index(request): # 尝试获取页数参数 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # objects是取到的数据 objects = [&apos;john&apos;, &apos;edward&apos;, &apos;josh&apos;, &apos;frank&apos;] # 对取到的数据进行分页 p = Paginator(objects, request=request) # 此时前台显示的就是我们此前获取的第几页的数据 people = p.page(page) return render_to_response(&apos;index.html&apos;, &#123; &apos;people&apos;: people, &#125; 我们尝试对照实现：1234567891011121314151617181920212223242526# 课程机构列表功能class OrgView(View): def get(self, request): # 查找所有的城市信息 all_citys = CityDict.objects.all() # 查找所有的课程机构信息 all_orgs = CourseOrg.objects.all() # 统计课程机构的数量 org_nums = all_orgs.count() # 对课程机构进行分页,尝试获取前端get请求传递过来的page参数 # 如果是不合法的配置参数则默认返回第一页 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # 这里指从all_org中取五个出来，每页显示6个,这个字段必填 p = Paginator(all_orgs, 6, request=request) orgs = p.page(page) return render(request, &quot;org-list.html&quot;, &#123; &quot;all_citys&quot;: all_citys, &quot;all_orgs&quot;: orgs, &quot;org_nums&quot;: org_nums, &#125;) 继续看我们的官方文档：我们知道，因为我们返回给后端的是QueryDict，所以在前端页面可以使用for循环进行遍历显示，但是这里的orgs却不一定可以，查看文档，果真不能那样遍历，而是遍历其object_list,这一点很容易出错，需要格外注意。我们在前端页面配置如下：1&#123;% for course_org in all_orgs.object_list %&#125; 也就是这个地方：现在考虑如何在前端页面显示分页：如果使用默认的render:前端页面配置如下：运行项目结果： 这有点丑，所以我们还是自定义html页面的代码吧！怎么定义呢，还是查阅官方文档吧！ 往下拉，可以看到这段代码，这就是官方文档告诉我们如何自定义分页样式的：123456789101112131415161718192021222324&#123;% load i18n %&#125;&lt;div class=&quot;pagination&quot;&gt; &#123;% if page_obj.has_previous %&#125; &lt;a href=&quot;?&#123;&#123; page_obj.previous_page_number.querystring &#125;&#125;&quot; class=&quot;prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/a&gt; &#123;% else %&#125; &lt;span class=&quot;disabled prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/span&gt; &#123;% endif %&#125; &#123;% for page in page_obj.pages %&#125; &#123;% if page %&#125; &#123;% ifequal page page_obj.number %&#125; &lt;span class=&quot;current page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/span&gt; &#123;% else %&#125; &lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot; class=&quot;page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt; &#123;% endifequal %&#125; &#123;% else %&#125; ... &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% if page_obj.has_next %&#125; &lt;a href=&quot;?&#123;&#123; page_obj.next_page_number.querystring &#125;&#125;&quot; class=&quot;next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/a&gt; &#123;% else %&#125; &lt;span class=&quot;disabled next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/span&gt; &#123;% endif %&#125;&lt;/div&gt; 注意：这里面的page_obj其实就是我们的all_orgs！ 下面我们继续尝试对照实现，打开org-list.html页面，找到对应位置，复制官方文档内容，然后进行替换（代码格式化ctrl+alt+L）：123456789101112131415161718192021&lt;div class=&quot;pageturn&quot;&gt; &lt;ul class=&quot;pagelist&quot;&gt; &#123;% if all_orgs.has_previous %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% for page in all_orgs.pages %&#125; &#123;% if page %&#125; &#123;% ifequal page all_orgs.number %&#125; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endifequal %&#125; &#123;% else %&#125; &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% if all_orgs.has_next %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt; 就是这个样子：刷新一下我们的页面，出现了分页： 因为只有10个课程机构，每页只显示6个所以最多只有2页！ 城市分类的筛选首先打开我们的organization/views.py文件，在里面添加如下数据：12345678city_id = request.GET.get(&apos;city&apos;, &apos;&apos;) # 选中了某个城市之后，根据城市Id与数据库中的city_id进行判断（外键city在数据库中名为city_id且为字符串类型） if city_id: all_orgs = all_orgs.filter(city_id=int(city_id))return render(request, &quot;org-list.html&quot;, &#123; &quot;city_id&quot;: city_id, &#125;) 就是这个样子：然后打开org-list.html页面，我们需要回传我们的city_id并加以显示出来：123456&lt;div class=&quot;cont&quot;&gt; &lt;a href=&quot;?ct=&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt; # 判断是否选择城市，如果没有则显示全部，并显示加绿状态 &#123;% for city in all_citys %&#125; &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt; # 判断是否选择城市并显示加绿状态 &#123;% endfor %&#125;&lt;/div&gt; 解释一下这行代码的意思：1class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot; 这行代码的意思是说，如果所选城市的city_id与数据库中的city_id（其实就是city,不过在数据库中自动变成了字符串类型的city_id）相等，就是选择了当前城市，并且为加绿状态。city.id|stringformat:&quot;i&quot;就是把数据库中的字符串类型的city_id转换成整型值并加以比对，此处city.id中的id对象其实就是刚才转换成的整型值！ 变成了这个样子： 你可以刷新一下页面后，切换几个城市试试看，没有问题的！接下来我们仿照上面的操作，对机构的类别也进行一下分类筛选。 机构类别的筛选首先打开我们的organization/views.py文件，在里面添加如下数据：12345678910# 机构类别的筛选# ct是我们前端页面用于判断机构类别用的category = request.GET.get(&apos;ct&apos;, &apos;&apos;)# 选中了类别之后，根据category与数据库中的category进行判断，从而显示授课机构 if category: all_orgs = all_orgs.filter(category=category)return render(request, &quot;org-list.html&quot;, &#123; &quot;category&quot;: category, &#125;) 就是这个样子：然后打开org-list.html页面，我们需要回传我们的category并加以显示出来：12345678&lt;div class=&quot;cont&quot;&gt;&lt;a href=&quot;?city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;?ct=pxjg&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=gx&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=gr&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;&lt;/div&gt; 也就是这个样子：然后去数据库里修改几个课程机构的类别，便于我们后续的进行：不过这样还是不行的，我们需要对城市信息与机构分类进行联动，也就是说可以进行二次选择，可以选择所有在北京市的培训机构，而不是只能显示全北京市的机构（包括培训机构，个人和高校），下面我们在org-list.html页面进行修改代码：1234567891011121314151617 &lt;a href=&quot;?city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=pxjg&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;?ct=gx&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=gr&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;spanclass=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt; &#123;% for city in all_citys %&#125; &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&amp;ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt; &#123;% endfor %&#125; 也就是这个样子：我们刷新一下我们的页面，可以发现已经可以联动了：不过右边的机构数量统计错了，我们刚才统计机构数目过早，应该移到后面，在已经筛选过后，才能开始统计，所以只需要把刚才用于统计的那行代码挪到筛选代码的后面即可：12# 统计课程机构的数量org_nums = all_orgs.count() 就是这样：再来刷新一下我们的页面，发现课程机构数量统计没有问题！ 授课机构排名授课机构排名就是图片中右边的那个，我们根据课程机构的点击数来进行排名： 首先打开我们的organization/views.py文件，在里面添加如下数据：12# 授课机构的排名 hot_orgs = all_orgs.order_by(&quot;click_nums&quot;)[:3] # 返回的是一个QueryDict我们取前三个 然后我们在org-list.html页面进行修改代码：12345678910111213&lt;div class=&quot;right companyrank layout&quot;&gt; &lt;div class=&quot;head&quot;&gt;授课机构排名&lt;/div&gt; &#123;% for current_org in hot_orgs %&#125; &lt;dl class=&quot;des&quot;&gt; &lt;dt class=&quot;num fl&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/dt&gt; &lt;dd&gt; &lt;a href=&quot;/company/2/&quot;&gt;&lt;h1&gt;&#123;&#123; current_org.name &#125;&#125;&lt;/h1&gt;&lt;/a&gt; &lt;p&gt;&#123;&#123; current_org.address &#125;&#125;&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &#123;% endfor %&#125; &lt;/div&gt; 其中是Django内置的用于统计循环变量循环到第几次的次数。 完成以后，我们再来刷新一下我们的页面，发现授课机构排名没有问题！ 学习人数和课程人数排名其实这个功能和前面介绍的几个功能很相似，这里就简单介绍一下(步骤和前面的类似) 首先打开我们的organization/views.py文件，在里面添加如下数据：1234567891011 # 学习人数和课程人数排名 sort = request.GET.get(&apos;sort&apos;, &apos;&apos;) if sort: if sort == &quot;students&quot;: all_orgs = all_orgs.order_by(&quot;-students&quot;) elif sort == &quot;courses&quot;: all_orgs = all_orgs.order_by(&quot;-course_nums&quot;)return render(request, &quot;org-list.html&quot;, &#123; &quot;sort&quot;: sort, &#125;) 然后我们在org-list.html页面进行修改代码：12345&lt;ul class=&quot;tab_header&quot;&gt;&lt;li class=&quot;&#123;% if sort == &apos;&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;全部&lt;/a&gt; &lt;/li&gt;&lt;li class=&quot;&#123;% if sort == &apos;students&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;学习人数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&#123;% if sort == &apos;courses&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=courses&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;课程数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; sort=students&amp;ct=&amp;city=和sort=courses&amp;ct=&amp;city=也是为了和前面的保持联动状态。 完成以后刷新一下我们的页面，看上面的各个功能是不是都实现了。 至此本篇关于列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的介绍就到此为止了，感谢你的赏阅。 本篇笔记对应于第十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十五）：模板继承应用","slug":"零基础使用Django2-0-1打造在线教育网站（十五）：模板继承应用","date":"2018-04-12T12:46:27.000Z","updated":"2019-04-13T12:48:28.308Z","comments":true,"path":"2018/04/12/零基础使用Django2-0-1打造在线教育网站（十五）：模板继承应用/","link":"","permalink":"http://licheetools.github.io/2018/04/12/零基础使用Django2-0-1打造在线教育网站（十五）：模板继承应用/","excerpt":"","text":"写在前面本篇笔记我们将开始进入课程机构前端页面的配置，你会了解到模板继承，城市筛选，数量统计等功能的实现。 本篇笔记对应于第十五篇代码，对应于github的位置是https://github.com/licheetools/eduline。 模板继承通过观察，我们发现很多页面都是有相同的结构，例如header和footer都是一样的，我们是不是可以考虑单独给它们分别放在2个HTML页面里面，然后当需要用到的时候，可以include进来，这就是早期的模板继承原理。不过这个只能用于那些页面是固定的内容，也就是说如果要根据自己的想法随意对include进来的页面进行修改这是不可能的。鉴于此，人们在吸收了挖坑填坑的思想之后，提出了一种新的方法：子本继承父本，将需要修改的地方挖坑，然后采用不同的方式来填坑，这样就解决了这个问题（类似于子类继承父类的方法）。这就是模板继承的原理！ 新建父本base.html页面在templates文件夹中新建base.html，同时将前端页面org-list.html拷贝到我们的templates里面，然后把org-list.html的全部内容复制粘贴到base.html页面中来，然后收起标签，成了下面这个样子： 然后配置静态的文件相对路径，只需要修改图中的即可： 开始定义父本挖坑操作1、每个org-list网页的标题会发生变化，所以修改如下：1&lt;title&gt;&#123;% block title%&#125;课程机构列表 - 慕海学习网&#123;% endblock %&#125;&lt;/title&gt; 2、每个页面都具有公共的js和css，但又具有各自特殊的js和css,所以修改如下：123&#123;% block custom_css %&#125;&#123;% endblock %&#125; &#123;% block custom_js %&#125;&#123;% endblock %&#125; 公共的js和css都不变，允许自定义样式,12步就是这个样子：3、面包屑和内容的修改如下：至此，我们的base.html的配置就差不多完成了，接下来是对它的引用！ 非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 总结一下页面的继承关系可以让我们直接使用变量，比如user中的表单数据传递到register页面当中（register页面继承了base页面）那么你在base页面当中也是可以使用这些数据的。这就是参数的向上传递！ 课程机构列表页面数据显示通过观察页面，我们确定哪些数据是动态的，哪些是静态的，动态的需要从后台来显示，静态的可以通过HTML代码直接实现：（红色为动态，蓝色为静态） 登录xadmin后台管理系统，新增10个城市信息，10门课程信息数据：在新建课程信息之前，我们需要配置文件的上传路径，打开eduline/settings.py文件，在里面加入：123# 设置我们上传文件的路径MEDIA_URL = &apos;/media/&apos;MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;) 然后在主目录下新建media文件夹，用于存放上传文件： 完成上面2步之后就可以增加10门课程信息数据了： 查看media 文件夹，里面10张图片，就是10个课程机构的logo:然后继续完善我们的organization/views.py文件：12345678910111213from .models import CityDict, CourseOrg# 课程机构列表功能class OrgView(View): def get(self, request): # 查找所有的城市信息 all_citys = CityDict.objects.all() # 查找所有的课程机构信息 all_orgs = CourseOrg.objects.all() return render(request, &quot;org-list.html&quot;, &#123; &quot;all_citys&quot;: all_citys, &quot;all_orgs&quot;: all_orgs &#125;) 现在是回填动态的城市信息：在org_list页面，找到如下代码：我们使用Django自带的for循环来从刚才获取到的城市信息中回填城市，并显示出来,修改代码如下：123&#123;% for city in all_citys %&#125; &lt;a href=&quot;?city=1&amp;ct=&quot;&gt;&lt;span class=&quot;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;&#123;% endfor %&#125; 就是下面这个样子：运行一下我们的项目：现在城市就是动态的信息了，不再是被前端人员写死的页面了。同理我们现在把课程信息也给显示出来：通过折叠代码分析发现，每一个des 就是一个课程，所以我们继续刚才的操作，把多余的删掉，保留一个：12345&#123;% for course_org in all_orgs %&#125; &lt;dl class=&quot;des difdes&quot;&gt; &lt;/dl&gt; &#123;% endfor %&#125; 接下来对&lt;dl class=&quot;des difdes&quot;&gt; &lt;/dl&gt;里面的内容进行分析：我们尝试利用对象的属性来获取图片的地址，也就是这样：1data-url=&quot;&#123;&#123; course_org.image &#125;&#125;&quot; 对，正如你想的那样，这其实获得只是图片的相对路径，系统根本找不到我们前面定义的路径。而且我们在数据库中的图片地址其实是字符串类型，也更加证明了这一点：因此，我们需要补全地址，变成下面这个样子：1data-url=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course_org.image &#125;&#125;&quot; 不过这样还不够，我们需要配置图片处理器,打开eduline/settings.py文件，找到TEMPLATES，在后面添加一行：12# 图片处理器，可以使&#123;&#123; MEDIA_URL &#125;&#125;产生作用 &apos;django.template.context_processors.media&apos;, 就是这个样子：然后刷新一下我们的页面，发现图片还是没有加载出来，那是因为path中没有处理图片相应路径的url，我们需要配置一下：12345from django.views.static import servefrom eduline.settings import MEDIA_ROOT # 配置文件上传的访问处理url re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT &#125;), 然后再来刷新一下:成功了！ 接下来，我们来统计课程机构的数量，打开organization/views.py文件，我们修改如下：1234567891011121314# 课程机构列表功能class OrgView(View): def get(self, request): # 查找所有的城市信息 all_citys = CityDict.objects.all() # 查找所有的课程机构信息 all_orgs = CourseOrg.objects.all() # 统计课程机构的数量 org_nums = all_orgs.count() return render(request, &quot;org-list.html&quot;, &#123; &quot;all_citys&quot;: all_citys, &quot;all_orgs&quot;: all_orgs, &quot;org_nums&quot;: org_nums &#125;) 然后在org_list页面找到共的位置，填写这个变量：至此，本篇关于模板继承，城市筛选，数量统计等功能的实现就介绍到这里，感谢你的赏阅。 本篇笔记对应于第十五篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十四）：用户密码找回","slug":"零基础使用Django2-0-1打造在线教育网站（十四）：用户密码找回","date":"2018-04-11T12:44:30.000Z","updated":"2019-04-13T12:45:09.439Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十四）：用户密码找回/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十四）：用户密码找回/","excerpt":"","text":"写在前面本篇笔记我们将实现用户的激活，用户密码找回，重置密码，修改密码等功能，前面所介绍的知识大家没事可以复习一下，加深对知识的理解和应用，后面很多东西就是前面讲过的知识的应用。 本篇笔记对应于第十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。 用户激活的操作打开我们的Navicat，去数据库中找到我们的用户信息表：这里面有个字段is_active，它是用来判别用户是否激活的，默认是未激活也就是0，这里都是1肯定是不行的，所以我们需要定义激活用户的函数，来完成用户的激活操作。 先配置一下路径path，打开eduline/urls.py文件，在里面添加一行代码:123456from django.urls import re_pathfrom users.views import ActiveUserView #ActiveUserView目前未定义，后面马上定义# 激活用户urlre_path(&apos;active/(?P&lt;active_code&gt;.*)/&apos;, ActiveUserView.as_view(), name=&quot;user_active&quot;) &#39;active/(?P&lt;active_code&gt;.*)/&#39;是正则表达式模式，用于匹配验证码！ 打开users/views.py文件，我们设置默认未激活：12# 默认激活状态为False，也就是未激活user_profile.is_active = False 并且在下面新增代码：123456789101112131415161718from .models import EmailVerifyRecord# 用于实现用户激活操作的函数class ActiveUserView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 user = UserProfile.objects.filter(email=email) user.is_active = True #激活用户 user.save() # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;) 现在回到我们的LoginView函数，我们当时没有判断用户是否激活，现在需要判断，修改代码如下：1234567891011if user is not None: if user.is_active: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;index.html&quot;) else: return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;) else: # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) 将数据表中的licheetools@sina.cn 用户的is_active修改为0，我们来测试一下，在图中所示位置打上断点，开始调试：我们的用户测试激活调试没有问题，再来看一下验证码激活：我们去新浪邮箱，将获取到的链接访问一下：1请点击下面的链接激活你的账号: http://127.0.0.1:8000/active/HekaM6EfZfeKy1Zc 按图示来测试一下，也没有问题！ 至此，我们完成了邮箱验证码的激活以及用户的激活。 不过我们还有两个问题，一个就是前面没有判断邮箱是否已经存在，我们不能用旧的邮箱来注册，所以我们需要配置一下，打开users/views.py文件，修改代码如下：123456789101112131415161718192021222324def post(self, request): # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息 register_form = RegisterForm(request.POST) if register_form.is_valid(): user_name = request.POST.get(&quot;email&quot;, &quot;&quot;) if UserProfile.objects.filter(email=user_name): # register_form回填信息必须有，msg是信息提示 return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;) else: # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;) # 实例化一个user_profile对象，存入前端页面获取的值 user_profile = UserProfile() user_profile.username = user_name user_profile.email = user_name # 默认激活状态为False，也就是未激活 user_profile.is_active = False # 对password进行加密并保存 user_profile.password = make_password(pass_word) user_profile.save() send_register_eamil(user_name, &apos;register&apos;) pass 另一个就是我们对于链接的处理不够完善，正如你所了解的那样，链接肯定有有效时间，在这个规定的时间内点击才有用，过了规定时间就没有用，所以我们需要新建一个链接超时的html文件：新建active_fail.html文件，里面就几行代码：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;链接失效&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;对不起，链接失效了&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 然后我们来users/views.py文件，修改一下激活的代码：1234567891011121314151617# 用于实现用户激活操作的函数class ActiveUserView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 user = UserProfile.objects.filter(email=email) user.is_active = True user.save() else: return render(request, &quot;active_fail.html&quot;) # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;) 按照图示打上断点并开始调试：调试没有问题！ 好，解决了上面两个问题之后，下面我们来进行忘记密码，找回密码的操作。 忘记密码的操作拷贝forgetpwd页面将forgetpwd.html页面拷贝到我们的templates文件夹里面： 定义（忘记）找回密码的视图打开users/views.py文件，在里面添加如下代码：1234# 用于实现用户忘记码（找回密码）的函数class ForgetPwdView(View): def get(self, request): return render(request, &quot;forgetpwd.html&quot;, &#123;&#125;) 然后在eduline/urls.py文件里面配置url信息：1234from users.views import ForgetPwdView# 找回密码url，注意是普通的urlpath(&quot;forget/&quot;, ForgetPwdView.as_view(), name=&quot;forget_pwd&quot;), 接下来配置跳转路径，首先ctrl+F 搜索login.html,找到忘记密码，修改href属性：1&lt;a class=&quot;fr&quot; href=&quot;forgetpwd.html&quot;&gt;忘记密码？&lt;/a&gt; 修改为：1&lt;a class=&quot;fr&quot; href=&quot;&#123;% url &apos;forget_pwd&apos; %&#125;&quot;&gt;忘记密码？&lt;/a&gt; 注意外部有双引号，里面就只能使用单引号。 接着继续修改forgetpwd.html页面的跳转链接，一样的操作，这里就不演示了！ 现在运行一下我们的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/forget/，出现了：![](https://upload-images.jianshu.io/upload_images/8964398-37f7bdbd37ebfc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现：1231、页面第三行加上&#123;% load staticfiles %&#125;2、修改全部类型文件的static相对路径3、修改其中的url，配置跳转链接 配置完刷新一下页面：这个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：1234# 用户找回密码时的表单，注意字段与前端页面保持一致class ForgetForm(forms.Form): email = forms.CharField(required=True) # 用户名不能为空 captcha = CaptchaField(error_messages=&#123;&quot;invalid&quot;: &quot;验证码错误&quot;&#125;) 接着回到我们的views.py文件，继续完善ForgetPwdView：1234567from users.forms import ForgetForm# 用于实现用户忘记码（找回密码）的函数class ForgetPwdView(View): def get(self, request): forget_form = ForgetForm() return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;) 然后回到我们的forgetpwd.html页面，我们删除captcha那一行，并修改为： 1234&lt;div class=&quot;form-group captcha1 marb38&quot;&gt; &lt;label&gt;验&amp;nbsp;证&amp;nbsp;码&lt;/label&gt; &#123;&#123; forget_form.captcha &#125;&#125; &lt;/div&gt; 我们再来刷新一下我们的页面：页面正常显示了！ 既然我们是找回密码，那么我们肯定需要发送邮件，我们前面新建了发送失败的html页面，那我们肯定也需要新建一个发送成功的html页面吧,新建send_success.html文件：里面添加如下代码：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;邮件发送成功&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;邮件已发送，请注意查收！&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 还是回到我们的views.py文件，继续完善ForgetPwdView的post方法：123456789101112131415# 用于实现用户忘记码（找回密码）的函数class ForgetPwdView(View): def get(self, request): forget_form = ForgetForm() return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;) def post(self, request): forget_form = ForgetForm(request.POST) if forget_form.is_valid(): email = request.POST.get(&apos;email&apos;, &apos;&apos;) # 发送找回密码的邮件 send_register_eamil(email, &apos;forget&apos;) return render(request, &apos;send_success.html&apos;) else: return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;) 再回到前端页面，看看这些是不是都修改完了：还有页面的提示信息也要修改（参考前面的介绍）： 至此，我们密码找回就已经完成了，我们来测试一下： 测试成功了！ 下面完成重置密码和修改密码的操作！ 重置密码的操作拷贝password_reset.html页面将password_reset.html页面拷贝到我们的templates文件夹里面： 定义重置密码的视图打开users/views.py文件，在里面添加如下代码：123456789101112131415# 用于实现用户重置密码的函数class ResetView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email&#125;) # 告诉页面是哪个用户在重置密码 else: return render(request, &quot;active_fail.html&quot;) # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;) 然后在eduline/urls.py文件里面配置url信息：1234from users.views import ResetView # 密码重置url re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;), 接下来我们在页面隐式回填刚才的email，在password_reset.html页面，添加下面一行代码：1&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;&#123;&#123; email &#125;&#125;&quot;&gt; 就是这个样子： 现在调试一下我们的项目，在图示位置打上断点： 接着我们登录新浪邮箱（前面是QQ邮箱就用QQ邮箱），查找我们的之前的重置密码邮件： 接着将重置密码链接复制到浏览器地址栏打开，页面进入到Pycharm出现了： 然后step out结束： 还记得我们刚才在里面加的那个input么，它的作用是告知页面哪个用户此时此刻正在重置密码，我们点击查看网页源代码，看是不是input起了作用：看到没有，确实起了作用，不过我们除非查看了源码，否则是看不到的！ 不过样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现：1231、页面第三行加上&#123;% load staticfiles %&#125;2、修改全部类型文件的static相对路径3、修改其中的url，配置跳转链接 配置完以后我们刷新页面会出错，这是正常现象，因为我们在url跳转时缺少参数，这个先放在这里（如果你为了不影响心情，可以不刷新页面）！ 刚才那个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：1234# 用户修改密码时的表单，注意字段与前端页面保持一致class ModifyPwdForm(forms.Form): password1 = forms.CharField(required=True, min_length=5) # 新密码不能为空 password2 = forms.CharField(required=True, min_length=5) # 确认密码不能为空 记得与前端页面字段一致： 接着回到我们的views.py文件，继续完善ResetView：1234567891011121314151617181920212223from users.forms import ModifyPwdForm def post(self, request): modify_form = ModifyPwdForm(request.POST) if modify_form.is_valid(): pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;) pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;) email = request.POST.get(&quot;email&quot;, &apos;&apos;) # 如果前后两次密码不相等，那么回填信息并返回错误提示 if pwd1 != pwd2: return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;) # 如果前后两次密码相等，那么进入我们的密码修改保存 # 取出用户信息 user = UserProfile.objects.get(email=email) # 随意取出一个密码并将其进行加密 user.password = make_password(pwd1) # 将更新后的用户信息保存到数据库里面 user.save() # 密码重置成功以后，跳转到登录页面 return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;) else: email = request.POST.get(&quot;email&quot;, &apos;&apos;) return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;) 我们现在来解决刚才url出错的问题，我们在path中的配置是这样的：1re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;), 它和我们普通的path不一样，里面有一个匹配active_code的正则表达式，所以在前端页面不能和普通的url那样写：1action=&quot;&#123;% url &apos;reset_pwd&apos; %&#125;&quot; 既然不能这样写，那我们可以用一个普通的path来定义它，作用是修改密码即可：1234from users.views import ModifyPwdView# 修改密码urlpath(&quot;modify/&quot;, ModifyPwdView.as_view(), name=&quot;modify_pwd&quot;), 这里面的ModifyPwdView是我们新建的视图函数，可以将前面的ResetView中的post方法脱离出来，成为ModifyPwdView的一部分：1234567891011121314151617181920212223# 用于实现用户修改密码的函数class ModifyPwdView(View): def post(self, request): modify_form = ModifyPwdForm(request.POST) if modify_form.is_valid(): pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;) pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;) email = request.POST.get(&quot;email&quot;, &apos;&apos;) # 如果前后两次密码不相等，那么回填信息并返回错误提示 if pwd1 != pwd2: return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;) # 如果前后两次密码相等，那么进入我们的密码修改保存 # 取出用户信息 user = UserProfile.objects.get(email=email) # 随意取出一个密码并将其进行加密 user.password = make_password(pwd1) # 将更新后的用户信息保存到数据库里面 user.save() # 密码重置成功以后，跳转到登录页面 return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;) else: email = request.POST.get(&quot;email&quot;, &apos;&apos;) return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;) 也就是这个样子： 然后修改前端页面：1&lt;form id=&quot;reset_password_form&quot; action=&quot;&#123;% url &apos;modify_pwd&apos; %&#125;&quot; method=&quot;post&quot;&gt; 也就是这个样子： 在图示位置打上断点,开始调试我们的项目，具体操作和前面类似，这里就不介绍了。复制密码重置链接去浏览器地址栏打开，输入新的密码： 然后点击提交按钮，就进入下面的Pycharm页面： 注意：如果点击提交按钮没有反应，页面没有进入view.py里面的方法，可能是按钮的类型错了，type=”submit”而不是type=”button”，也就是这个样子： 最后，修改password_reset.html的错误信息的提示： 前面说了这么多调试命令，小伙伴们可能会不太明白其中的意思，下面我详细介绍一下Pycharm是如何调试代码的！ Pycharm中的调试如果你熟悉Eclipse，那你肯定知道它的快捷键：1234F5：跳入方法F6：向下逐行调试F7：跳出方法F8：直接跳转到下一个断点 当然Pycharm也是可以采用Eclipse的快捷键来调试代码的，具体设置方法如下： 点击File–&gt; Settings–&gt; Apperance–&gt; Keymap–&gt; 右侧下拉选Eclipse–&gt; Apply –&gt; OK这几步就完成了，没看懂的可以看下面的图片（记得按照序号的顺序来操作哈） 当然如果你没用过Eclipse，也不想记那些快捷键，这也是可以的，那看下面的图片： 这个页面你总是经常看到吧，下面分别解释一下各个键的名称及功能作用（括号内是默认的快捷键，也就是Pycharm自己设定的）： 1、step over（F8）作用是在同一个调用栈层中移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将在函数调用之后的下一条语句停止。调试器不会进入函数体。如果当前行是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。 2、step into（F7）作用是移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将进入函数，并停止在函数体的第一行。step-into可以帮助初步揭开代码位置的谜团。例如，函数调用和函数本身可能在不同的文件中是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。 3、Force step into（Ctrl+shift+F7）可以看做是step into的升级版本，可以越过代码，强力执行。 4、step-out（shift+F8）作用是在栈中前进到下一层，并在调用函数的下一行停止。 还有，如果你有多个断点，如何在pycharm中从第一个断点跳转至第二个断点呢？例如第一个断点在第一行，第二个断点在第五十行，那么开始debug后，你首先停在第一行，随后点击菜单栏的Run-&gt; Resume Program即可跳转至第二个断点了，是不是很简单! 至此，关于用户的激活，用户密码找回，重置密码，修改密码，调试代码等功能的介绍就到此为止，感谢你的赏阅！ 本篇笔记对应于第十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十三）：邮箱验证码实现","slug":"零基础使用Django2-0-1打造在线教育网站（十三）：邮箱验证码实现","date":"2018-04-11T12:35:31.000Z","updated":"2019-04-13T12:43:46.634Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十三）：邮箱验证码实现/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十三）：邮箱验证码实现/","excerpt":"","text":"写在前面本篇笔记主要解决用户注册，验证码的实现，邮箱验证码的发送这3个问题。 本篇笔记对应于第十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。 非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，本篇关于用户注册，验证码的实现，邮箱验证码的发送这3个问题的介绍就到此结束了，下一篇我们将实现用户的激活，用户密码找回等功能的实现，感谢你的赏阅。 本篇笔记对应于第十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十二）：错误信息提示","slug":"零基础使用Django2-0-1打造在线教育网站（十二）：错误信息提示","date":"2018-04-11T12:33:17.000Z","updated":"2019-04-13T12:33:55.335Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十二）：错误信息提示/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十二）：错误信息提示/","excerpt":"","text":"写在前面本篇笔记主要解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题。 本篇笔记对应于第十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。 基于类的用户登录实现在前面我们实现用户登录是基于视图函数来实现的，也就是下面这段代码：123456789101112131415161718192021222324# 当我们配置的url被这个view处理时，将会自动传入request对象.def user_login(request): # 前端向后端发送的请求方式有两种: get和post # 登录提交表单时为post if request.method == &quot;POST&quot;: # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &apos;index.html&apos;) else: # 说明里面的值是None，再次跳转回主页面并报错 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) # 获取登录页面时为get elif request.method == &quot;GET&quot;: # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) 同时在eduline/urls.py文件的路径配置为：123from users.views import user_loginpath(&apos;login/&apos;, user_login, name=&quot;login&quot;) 现在我们采用基于类的方法来实现用户的登录，因为基于类可以便于重载和调用。下面是基于类的代码，小伙伴们试着体验一下两者的不同之处吧：1234567891011121314151617181920212223# 基于类实现用户的登录，它需要继承viewclass LoginView(View): # 不需要判断，直接调用get方法 def get(self, request): # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) # 不需要判断，直接调用post方法 def post(self, request): # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;index.html&quot;) else: # 说明里面的值是None，再次跳转回主页面并报错 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) 同时在eduline/urls.py文件的路径配置为：12 # 基于类的用户登录path配置path(&apos;login/&apos;, LoginView.as_view(), name=&quot;login&quot;) 你是不是觉得很方便了，不用判断请求的方法类型，直接就可以调用了！不过现在有个疑问，如果用户在提交表单的时候，都不满足我们表单的要求，比方说我们要求密码不得少于5位数，不能为空等，那样我们还需要用刚才的方法去验证么，其实根本就可以不用验证，这就是非法的字符。因此，我们有必要在表单提交时就定义一个可以检查是否需要继续后续操作的验证方法。 我们继续往下进行： 我们打开users这个应用，在里面新建forms.py文件,然后在里面输入如下代码：1234567from django import forms# 用户登录表单的验证class LoginForm(forms.Form): username = forms.CharField(required=True) # 用户名不能为空 password = forms.CharField(required=True, min_length=5) # 密码不能为空，而且最小6位数 既然我们写好了表单的验证条件，接下来我们就把它用起来，继续回到我们的users/views.py文件，我们对登录函数做一个修改：12345678910111213141516171819202122232425262728# 基于类实现用户的登录，它需要继承viewclass LoginView(View): # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证 def get(self, request): # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) # 不需要判断，直接调用post方法 def post(self, request): # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息 login_form = LoginForm(request.POST) # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息 if login_form.is_valid(): # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;login.html&quot;) else: # 说明里面的值是None，再次跳转回主页面并报错 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) 现在我们又有一个疑问，假定你密码输入错误以后，你是不是只需要重新输入密码即可，用户名还是存在的，我们不希望还要去重新输入用户名。因此，我们的错误提示信息需要修改，继续完善我们的views.py文件。1234567891011if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;login.html&quot;) else: # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息 else: return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;) 就是下面这个样子：注意：forms.py文件中的username和password必须和html中的保持一致，因为它是我们从request.POST中得到的（request.POST也是从前端页面获取到的）。 Debug测试一下我们在views.py文件的if login_form.is_valid():处打上一个断点，开启调式模式：我们不输入用户名，密码输ad这2个数，然后回车，页面进入Pycharm，单击一步步调试按钮，可以出现：放大一下：所以我们知道，这个errors其实是一个ErrorDict,我们可以通过这个来获取错误信息的提示，然后把它放在前端页面即可，还记得我们说过如果表单提交验证不通过直接刷新返回到登录页面，就是这段代码起的作用：12else: return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;) 现在我们在前端登录页面login.html配置错误提示信息： 加上错误提示代码：123&lt;div class=&quot;form-group marb20 &#123;% if login_form.errors.username %&#125;errorput&#123;% endif %&#125;&quot;&gt;&lt;div class=&quot;form-group marb8 &#123;% if login_form.errors.password %&#125;errorput&#123;% endif %&#125;&quot;&gt; 就是这个样子：仅仅这样还不够，我们需要将forms.py文件里定义的错误信息给显示出来，那需要修改并添加一下代码：123456&lt;div class=&quot;error btns login-form-tips&quot; id=&quot;jsLoginTips&quot;&gt; &#123;% for key,error in login_form.errors.items %&#125; &#123;&#123; error &#125;&#125; &#123;% endfor %&#125; &#123;&#123; msg &#125;&#125;&lt;/div&gt; 就是这个样子：我们现在运行一下我们的项目：runserver一下，不写任何信息： cookie和session自动登录cookie的用途正如你所知道的http请求是一种无状态的请求，也就是说每次请求是独立的。假如用户向服务器发起两次请求，那么这两次请求是没有状态的，服务器不知道这两次请求都是同一个用户发起的。 所以为了解决这个无状态请求，人们引入了cookie这个概念，这使得每次请求变得有状态起来：记住cookie是不能跨域访问的！我们以chrome浏览器为例，打开百度的首页，并按键盘上的F12（或者ctrl+shift+I），开启监控模式：然后我们尝试清空一下cookies,重新刷新一下页面：cookie又出现了，所以cookie可以把你的用户名和密码保存在浏览器本地。 不过这样做有个坏处，那就是你的密码和用户名都是缓存在本地的，一旦别人拿到你的电脑，那你的信息将被剽窃，非常不安全。 那么我们在想有没有一种可以把数据缓存在服务器，然后发给用户的只是类似于钥匙的东西，而且这个钥匙最好是有过期时间，这样人家就算拿到你的电脑，也只是知道类似于钥匙的东西还必须在规定的时间内才能打开，这样一来安全得到了非常好的保证，session就是在满足这些条件下诞生的。 session的安全护航用户在向服务器发起第一次请求后，服务器会给用户随机地分派一个id（可以是用户的user id，也可以一段任意的字符串），我们把它叫做session id。这个session id是服务器采用自己的规则生成，它保存在本地cookie里面。当用户再次发起请求时，这个session id会上传至服务器，服务器接收后会识别它，并返回相关的信息。 我们登录的session就是这样：1、用户输入用户名 &amp;和密码，点击提交；2、调用 login()命令, 后端程序会根据用户名密码生成session id并保存在数据库中；3、用户登录之后，需要通过这个session id取出相关的基本信息。 我们打开我们的navicat,去我们的数据库中找到我们Django自带的session表：这个表中是登录后才有的，如果你此刻没有登录，请先登录一下我们的后台管理系统：你还可以清空我们这张表，然后重新登录试试，这里就不一一演示了（结果都是一样）。这个表中包含：session_key（钥匙）, session_data（数据）,expire_date（过期时间）。 我们运行一下我们的项目，用户先登录，然后我们按键盘上的F12（或者ctrl+shift+I），开启监控模式，查看cookie里面的信息是不是包含session id,而且主要检查数据是不是一样的：看到没有，和我们刚才数据库中看到的一模一样，不过session_key 在浏览器就叫做session id了，名字不同而已。这主要归功于django自带的session功能： 如果你对cookie和session的原理感兴趣，可以浏览这篇文章：django从请求到返回都经历了什么? 至此，本篇关于解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题的介绍就到此结束了，感谢你的赏阅！ 本篇笔记对应于第十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现","slug":"零基础使用Django2-0-1打造在线教育网站（十一）：登录页面实现","date":"2018-04-11T12:29:28.000Z","updated":"2019-04-13T12:32:24.613Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十一）：登录页面实现/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十一）：登录页面实现/","excerpt":"","text":"写在前面从本篇笔记开始，我们就正式进入到前端页面的配置了，里面包含的信息很多，主要解决网站首页显示，发送接收验证码，用户注册，登录，密码找回，修改密码等问题。鉴于篇幅可能有点长，所以这里分3篇进行介绍，分别是第十一，十二，十三篇笔记。本篇笔记主要解决网站首页显示和登录页面的配置以及登录方式的自定义这3个问题。 本篇笔记对应于第十一篇代码，对应于github的位置是https://github.com/licheetools/eduline。 网站首页显示和登录页面的配置放置前端网站首页index.html正如大家平时所看到的那样，一般网站首页都是直接在根目录下显示的，所以我们就要在我们的初始前端资料里面，把我们的index.html文件放在templates目录里面，就是这个样子： 新建静态文件夹static在主项目树里面新建静态文件夹static，再在里面新建5个文件夹，用于放置css，img，images，js，media等文件。就是这样： 前面说过Django的web开发是采用MTV模式的，现在如果我们想在浏览器中显示前端页面，我们只需要配置一下url就可以了。 前端静态页面的URL的配置打开我们的eduline/urls.py文件，修改为如下代码： 12345678910from django.urls import pathfrom django.views.generic import TemplateViewimport xadminurlpatterns = [ path(&apos;xadmin/&apos;, xadmin.site.urls), # 用&apos;&apos;指代根目录，TemplateView.as_view可以将template转换为view path(&apos;&apos;, TemplateView.as_view(template_name=&apos;index.html&apos;), name=&apos;index&apos;),] 接下来我们运行一下我们的项目:runserver,直接在浏览器地址栏中输入：http://127.0.0.1:8000/或者http://127.0.0.1回车一下，出现：![](https://upload-images.jianshu.io/upload_images/8964398-0ba43f22a440a851.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)我们的index页面已经成功加载出来了，但是很丑，因为样式还没有加载出来，我们需要配置一下路径。 配置静态static文件的路径打开我们的eduline/settings.py文件，拉到最底下，添加修改为如下：12345STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = [ os.path.join(BASE_DIR, &quot;static&quot;), # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾] 静态文件路径修改了，所以我们需要在前端页面代码里面对其引用路径都作修改：将所有的../,全部替换为/static/，你可以使用ctrl+f，先查找出所有再替换也可以的： 变成了这个样子： 接着，把我们前端资料里的文件都放在指定的文件夹里面（资料里都有文件夹名，而且都是和你刚才创建的名字一样） 偷懒的话可以直接复制粘贴相关文件。 现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：说明我们的前端网站页面已经成功显示了。（如果出现页面残缺问题，可以使用本篇笔记上传的旧版前端资料。） 登录页面的配置放置前端登录页面login.html在前端资料里面把我们的login.html文件放在templates目录里面，就是这个样子： 替换路径同样将所有的../,全部替换为/static/，你可以使用ctrl+f，先查找出所有再替换也可以的，这里就不细说了。 登录页面的URL的配置打开我们的eduline/urls.py文件，添加如下代码：12# 登录urlpath(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot; 取消注释并修改登录路径打开我们的index.html页面，找到第27,28行，取消注释（删除注释符号），再将里面的href=”login.html”修改为：href=”/login/“，再找到第30行代码，将一对&lt;div class=&quot;personal&quot;&gt; &lt;/div&gt;给收起来，并注释掉，因为我们目前还用不到它。就是下面的一段代码：1234567891011121314151617181920&lt;!-- &lt;div class=&quot;personal&quot;&gt; &lt;dl class=&quot;user fr&quot;&gt; &lt;dd&gt;bobby&lt;img class=&quot;down fr&quot; src=&quot;/static/images/top_down.png&quot;/&gt;&lt;/dd&gt; &lt;dt&gt;&lt;img width=&quot;20&quot; height=&quot;20&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt; &lt;/dl&gt; &lt;div class=&quot;userdetail&quot;&gt; &lt;dl&gt; &lt;dt&gt;&lt;img width=&quot;80&quot; height=&quot;80&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt; &lt;dd&gt; &lt;h2&gt;django&lt;/h2&gt; &lt;p&gt;bobby&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;div class=&quot;btn&quot;&gt; &lt;a class=&quot;personcenter fl&quot; href=&quot;usercenter-info.html&quot;&gt;进入个人中心&lt;/a&gt; &lt;a class=&quot;fr&quot; href=&quot;/logout/&quot;&gt;退出&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; --&gt; 现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：然后点击登录按钮，跳转到如下地址：http://127.0.0.1:8000/login/，页面成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-3786426fe6c9e08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)恭喜你，我们登录页面也已经正常显示出来了，下面是如何实现登录的交互功能。 登录页面的交互实现Django的MTV模式你还差一个V，也就是view你还没用到过，这里就到了它大显身手的时候了。尽管前面我们已经把网站首页和登录页面在浏览器中显示了，但是那些信息都是固定的，也就是说当初前端人员在设计网页的时候就确定了，我们现在所要做的就是更改它们的信息，使满足自己的信息得到显示。 接下来我们就通过编写视图函数，来实现这个，不过前提是需要挖坑与填坑操作，这里先不介绍，后面会具体说明。 视图函数View的创建我们打开，apps/users/views.py文件，在里面添加如下代码：123456789101112# 当我们配置的url被这个view处理时，将会自动传入request对象.def user_login(request): # 前端向后端发送的请求方式有两种: get和post # 登录提交表单时为post if request.method == &quot;POST&quot;: pass # 获取登录页面时为get elif request.method == &quot;GET&quot;: # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) 然后打开eduline/urls.py文件，将login的登录路径修改为如下：12345from users.views import login # 登录url # path(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot;) path(&apos;login/&apos;, login, name=&quot;login&quot;) 现在我们准备测试一下，我们获取登录页面时的method是不是为get，在两行返回语句的位置打上断点：然后开启debug模式，待网站首页显示出来以后点击登录按钮，可以看到蓝色行跳到render那一行了，并发现Method就是GET: 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，我们本篇关于网站首页显示和登录页面的配置以及登录方式的自定义这3个问题的介绍，就到此结束了，感谢你的赏阅。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置","slug":"零基础使用Django2-0-1打造在线教育网站（十）：后台管理配置","date":"2018-04-11T12:26:24.000Z","updated":"2019-04-13T12:26:57.676Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十）：后台管理配置/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十）：后台管理配置/","excerpt":"","text":"写在前面本篇笔记主要完善上篇笔记中遗留的其余3个apps的注册，还有xadmin的全局配置，让你打造一个属于自己的网站后台管理系统。 本篇笔记对应于第十篇代码，对应于github的位置是https://github.com/licheetools/eduline。 其余3个apps的注册courses的注册我们打开eduline/apps/courses这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始进行app的注册,在其中添加如下代码：123456789101112131415161718192021222324252627282930313233343536import xadminfrom .models import Course, Lesson, Video, CourseResourceclass CourseAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;, &apos;get_zj_nums&apos;, &apos;go_to&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 过滤器class LessonAdmin(object): list_display = [&apos;course&apos;, &apos;name&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;course&apos;, &apos;name&apos;] # 查询你想要的数据 list_filter = [&apos;course__name&apos;, &apos;name&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class VideosAdmin(object): list_display = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;lesson&apos;, &apos;name&apos;] # 查询你想要的数据 list_filter = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class CourseResourceAdmin(object): list_display = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;] # 查询你想要的数据 list_filter = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。xadmin.site.register(Course, CourseAdmin)xadmin.site.register(Lesson, LessonAdmin)xadmin.site.register(Video, VideosAdmin)xadmin.site.register(CourseResource, CourseResourceAdmin) 运行一下你的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-f01e68630a744bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) organization的注册我们打开eduline/apps/organization这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始进行app的注册,在其中添加如下代码：1234567891011121314151617181920212223242526import xadminfrom .models import CityDict, CourseOrg, Teacherclass CityDictAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class CourseOrgAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class TeacherAdmin(object): list_display = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。xadmin.site.register(CityDict, CityDictAdmin)xadmin.site.register(CourseOrg, CourseOrgAdmin)xadmin.site.register(Teacher, TeacherAdmin) 运行一下你的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-d11e1dfd1f6be110.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) operation的注册我们打开eduline/apps/operation这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始进行app的注册,在其中添加如下代码：12345678910111213141516171819202122232425262728293031323334353637383940import xadminfrom .models import UserAsk,CourseComments,UserFavorite,UserMessage,UserCourseclass UserAskAdmin(object): list_display = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class CourseCommentsAdmin(object): list_display = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class UserFavoriteAdmin(object): list_display = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class UserMessageAdmin(object): list_display = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class UserCourseAdmin(object): list_display = [&apos;user&apos;, &apos;course&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;course&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;course&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。xadmin.site.register(UserAsk, UserAskAdmin)xadmin.site.register(CourseComments, CourseCommentsAdmin)xadmin.site.register(UserFavorite, UserFavoriteAdmin)xadmin.site.register(UserMessage, UserMessageAdmin)xadmin.site.register(UserCourse, UserCourseAdmin) 运行一下你的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-e162226c8ebcb58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 至此，我们所有的apps都已经注册完了。接下来我们就开始定制属于自己的后台管理系统吧。 xadmin的全局配置开启主题功能打开users/adminx.py文件，在里面添加如下代码：12345678from xadmin import views# 创建xadmin的全局管理器并与view进行绑定class BaseSetting(object): enable_themes = True # 修改主题 use_bootswatch = True # 增加主题的可选内容# 将全局配置管理与view进行绑定注册xadmin.site.register(views.BaseAdminView, BaseSetting) 看到没，已经出现更换主题按钮了，你可以自定义喜欢的主题了： 后台管理名称配置如图，我们需要修改站点标题，站点尾注，折叠菜单等以下内容：为了更好地管理这些不变动的信息，我们依旧放在users/adminx.py文件里面。我们打开它，并在其中加入以下代码：123456class GlobalSettings(object): site_title = &apos;慕学后台管理系统&apos; # 站点标题 site_footer = &apos;慕海学习网&apos; # 站点尾注 menu_style = &apos;accordion&apos; # 折叠收起菜单# 将站点标题与站点尾注进行注册:xadmin.site.register(views.CommAdminView, GlobalSettings) 刷新一下我们的网页，就变成了这个样子：不知你发现没有，还有一个问题就是折叠后apps还是显示英文： 我们想变成中文，可以吗？答案是当然可以的！ 配置apps的后台显示打开每个app下面的apps.py文件，追加verbose_name信息。我们以users/apps.py为例,修改为如下：123456from django.apps import AppConfigclass UsersConfig(AppConfig): name = &apos;users&apos; verbose_name = &apos;用户信息&apos; 就是这个样子： 其余apps的apps.py文件修改如下：courses/apps.py:12345from django.apps import AppConfigclass CoursesConfig(AppConfig): name = &apos;courses&apos; verbose_name = &apos;课程管理&apos; operation/apps.py:12345from django.apps import AppConfigclass OperationConfig(AppConfig): name = &apos;operation&apos; verbose_name = &apos;用户操作&apos; organization/apps.py:12345from django.apps import AppConfigclass OrganizationConfig(AppConfig): name = &apos;organization&apos; verbose_name = &apos;机构管理&apos; 再来刷新一下我们的页面，我们发现页面还是老样子，并没有出现与我们设想的页面，那是因为我们还没有配置信息，我们需要在每个app应用的–init–.py文件里加上引用apps的配置信息，就一行代码：default_app_config = &quot;appname.apps.AppnameConfig&quot; # 注意第二个Appname首字母大写。我们设置如下：以users/–init–.py:为例，记住是箭头2不是箭头1（箭头1是apps这个文件的）！！！添加如下一行代码：1default_app_config = &apos;users.apps.UsersConfig&apos; courses/–init–.py:1default_app_config = &apos;courses.apps.CoursesConfig&apos; operation/–init–.py:1default_app_config = &apos;operation.apps.OperationConfig&apos; organization/–init–.py:1default_app_config = &apos;organization.apps.OrganizationConfig&apos; 现在我们刷新一下我们的页面，成功了： 自定义菜单显示顺序上面菜单的显示是根据我们注册的时间来显示的，我们可以自定义我们的菜单显示顺序：在users/adminx.py文件加上以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445from users.models import EmailVerifyRecord, Banner, UserProfilefrom courses.models import Course, CourseResource, Lesson, Videofrom organization.models import CourseOrg, CityDict, Teacherfrom operation.models import CourseComments, UserMessage, UserFavorite, UserCourse, UserAskfrom django.contrib.auth.models import Group, Permissionfrom xadmin.models import Logclass GlobalSettings(object): site_title = &apos;慕学后台管理系统&apos; site_footer = &apos;慕海学习网&apos; menu_style = &apos;accordion&apos; def get_site_menu(self): return ( &#123;&apos;title&apos;: &apos;课程管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;课程信息&apos;, &apos;url&apos;: self.get_model_url(Course, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;章节信息&apos;, &apos;url&apos;: self.get_model_url(Lesson, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;视频信息&apos;, &apos;url&apos;: self.get_model_url(Video, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;课程资源&apos;, &apos;url&apos;: self.get_model_url(CourseResource, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;课程评论&apos;, &apos;url&apos;: self.get_model_url(CourseComments, &apos;changelist&apos;)&#125;, )&#125;, &#123;&apos;title&apos;: &apos;机构管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;所在城市&apos;, &apos;url&apos;: self.get_model_url(CityDict, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;机构讲师&apos;, &apos;url&apos;: self.get_model_url(Teacher, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;机构信息&apos;, &apos;url&apos;: self.get_model_url(CourseOrg, &apos;changelist&apos;)&#125;, )&#125;, &#123;&apos;title&apos;: &apos;用户管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;用户信息&apos;, &apos;url&apos;: self.get_model_url(UserProfile, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户验证&apos;, &apos;url&apos;: self.get_model_url(EmailVerifyRecord, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户课程&apos;, &apos;url&apos;: self.get_model_url(UserCourse, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户收藏&apos;, &apos;url&apos;: self.get_model_url(UserFavorite, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户消息&apos;, &apos;url&apos;: self.get_model_url(UserMessage, &apos;changelist&apos;)&#125;, )&#125;, &#123;&apos;title&apos;: &apos;系统管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;用户咨询&apos;, &apos;url&apos;: self.get_model_url(UserAsk, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;首页轮播&apos;, &apos;url&apos;: self.get_model_url(Banner, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户分组&apos;, &apos;url&apos;: self.get_model_url(Group, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户权限&apos;, &apos;url&apos;: self.get_model_url(Permission, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;日志记录&apos;, &apos;url&apos;: self.get_model_url(Log, &apos;changelist&apos;)&#125;, )&#125;,)xadmin.site.register(views.CommAdminView, GlobalSettings) 记住这段代码是和我们之前定义全局配置放在同一个函数里面的注意：是from users.models import EmailVerifyRecord, Banner, UserProfile而不是：from apps.users.models import EmailVerifyRecord, Banner, UserProfile1RuntimeError: Model class apps.users.models.UserProfile doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS. 也就是说直接from users.models，不用再写上from apps.users.models。 最后我们运行一下我们的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin,然后回车，就成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-b129d1c498227dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)说明一下，这个日志记录就是用来记录我们之前进行过什么操作的文件。 你可能会问，这些apps的图片都是圆圈，我们可以自定义图标么？答案是当然了！这里我就不介绍了，有兴趣的小伙伴们可以自己设置，这里我开启传送大门：xadmin管理员详情页面布局，导航图标设置 至此，我们自己专属的网站后台就搭建成功了，感谢你的赏阅！下一篇我们就正式进入到前端页面的配置了，主要解决用户注册，登录的问题。 本篇笔记对应于第十篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理","slug":"零基础使用Django2-0-1打造在线教育网站（九）：初识后台管理","date":"2018-04-11T12:24:23.000Z","updated":"2019-04-13T12:25:15.933Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（九）：初识后台管理/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（九）：初识后台管理/","excerpt":"","text":"写在前面在前面的笔记中我们进行了需求分析和数据库的设计，本篇笔记主要介绍Django自带的用于后台管理的admin，并在此基础上介绍另一个插件xadmin的使用。 本篇笔记对应于第九篇代码，对应于github的位置是https://github.com/licheetools/eduline django自带的admin介绍先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：runserver再回车：在浏览器地址栏中输入http://127.0.0.1:8000/admin出现：恭喜你，你已经进入到Django admin的后台管理网页了。 你可能会问，为什么会有这个页面，我可是什么操作也没干啊（一脸无辜）。对的，你确实什么也不用干，因为Django已经帮你做好了。 打开eduline/settings.py文件，找到第34行代码：看到没，admin它其实也是一个app，不过在我们新建项目时就已经创建好了，不用你去动手，是不是很人性化。 我们现在再来打开eduline/urls.py文件，找到第19行代码： 看到没，admin竟然已经自动在url中进行了配置（整个项目就它一个配置了url，可见重要性不一般），所以你前面访问http://127.0.0.1:8000/admin才会有响应。 我们回到后台页面： 有登录按钮，所以我们需要先注册一个账号，Django默认是不会给你创建账号的。 注册超级管理员先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入1createsuperuser 然后系统会提示你输入以下信息：Username，Email address，Password： 接下来进行数据库的生成和迁移操作（因为users应用中多了一个名为NewBee的超级管理员），我们只需要对users 这个应用进行相关操作：12makemigrations usersmigrate users 登入admin后台运行一下我们的项目，在浏览器地址栏输入：http://127.0.0.1:8000/admin，并在登录页面输入刚才注册的账号信息(默认登录方式是用户名 + 密码,后面会教你如何实现用户名或邮箱+密码登录的登录形式)，点击登录，就进入后台了： 全是英文，我们去设置里配置一下：打开eduline/settings.py文件，找到第117行代码：123LANGUAGE_CODE = &apos;en-us&apos;TIME_ZONE = &apos;UTC&apos; 我们修改为如下：12345678# 将语言修改为中文LANGUAGE_CODE = &apos;zh-hans&apos;# 将时区修改为上海TIME_ZONE = &apos;Asia/Shanghai&apos;# 数据库存储使用时间，True时间会被存为UTC的时间。所以采用FalseUSE_TZ = False 刷新一下我们的后台网页：恭喜你，admin被汉化成功了。接下来就是把我们前面定义的数据库字段都显示出来，首先把我们的UserProfile注册进来。 注册UserProfile打开eduline/apps/users/admin.py文件，添加如下代码：1234567891011121314from django.contrib import admin# Register your models here.# 因为处于同一个目录之下，所以可以直接使用.models代替当前目录from .models import UserProfile# 写一个管理器，命名规则：Model+Adminclass UserProfileAdmin(admin.ModelAdmin): pass# 将UserProfile注册进我们的admin中, 并为它选择管理器UserProfileAdminadmin.site.register(UserProfile, UserProfileAdmin) 刷新一下我们的后台网页： Users 是用户所在表的名称： 点击右侧的增加用户信息：我们看到一下信息：我们尝试再次新建一个用户：NewBai：新建成功了，同时注意Django会自动帮我们把密码进行加密，而且不能反解，也就是说单向密码加密。 xadmin的安装还记得前面的一篇笔记吗，我让你新建一个文件夹A，把下载的xadmin文件放在里面，不记得请查阅这篇笔记：零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置（更新一下，那个版本里面有太多的坑需要自己填，这里我就把已经填完坑的版本贴一下，大家在本篇笔记对应的Github上下载包，亲测有用）。现在，我们新建一个名为extra_apps的Python package ,用来存放我们的第三方插件，并将前面下载的xadmin文件（解压之后）移入其中：同时需要对路径进行配置：打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：123456import os, sys# Build paths inside the project like this: os.path.join(BASE_DIR, ...)BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))sys.path.insert(0,os.path.join(BASE_DIR, &apos;extra_apps&apos;)) 接下来是xadmin的安装:在确保前面的操作完成以后，我们打开eduline/settings.py文件，找到里面的第35行代码，在后面修改为如下： 1234567891011121314INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;, &apos;courses&apos;, &apos;organization&apos;, &apos;operation&apos;, &apos;xadmin&apos;, &apos;crispy_forms&apos;] 然后打开eduline/urls.py文件，把urls中默认的admin修改为xadmin:123456from django.urls import pathimport xadminurlpatterns = [ path(&apos;xadmin/&apos;, xadmin.site.urls),] 然后进行我们数据库的生成和迁移操作：makemigrations和migrate： 你会发现执行第一个命令就报错了，那是因为我们缺少一些库的支持，我们依次按照如下库：123456pip install futurepip install sixpip install httplib2pip install django-import-exportpip install django-crispy-formspip install django-formtools==2.1 # 记住一定是2.1的版本，否则会出错 使用的命令为：pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple之后会安装一大堆库，我们使用pip list命令查看一下： 为了便于你查看自己是否缺少某个库，我这里贴一下我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）：123456789101112131415161718192021222324252627282930(eduline) F:\\Envs\\eduline&gt;pip listPackage Version-------------------------------- --------confusable-homoglyphs 3.1.1diff-match-patch 20121119Django 2.0.1django-crispy-forms 1.7.2django-crispy-forms-registration 0.1.3django-formtools 2.1django-import-export 1.0.1django-registration 2.4.1django-reversion 3.0.0et-xmlfile 1.0.1future 0.16.0httplib2 0.11.3jdcal 1.4mysqlclient 1.3.13odfpy 1.3.6openpyxl 2.5.4Pillow 5.2.0pip 18.0pytz 2018.5PyYAML 3.13setuptools 40.0.0six 1.11.0tablib 0.12.1unicodecsv 0.14.1wheel 0.31.1xlrd 1.1.0xlwt 1.3.0 接下来，我们重新进行数据库的生成和迁移操作：makemigrations和migrate：,看到没有，它也生成了几个数据表，我们打开Navicat，去数据库里看一下：现在我们运行一下我们的项目，在浏览器地址中输入http://127.0.0.1/xadmin,然后看到：![](https://upload-images.jianshu.io/upload_images/8964398-1b7b25d8b012310f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)恭喜你，xadmin的配置已经完成了，xadmin的页面是不是比admin的页面好看多了。 Xadmin使用Bootstrap3.0框架精心打造。基于Bootstrap3，Xadmin天生就支持在多种屏幕上无缝浏览，并完全支持Bootstrap主题模板，让您的管理后台也动感、多样起来。，这是它的的官方网站: 你可以去看一下它的示例和文档，可能需要翻墙，不过这对你以后的运用确实帮助很大的。 Xadmin的使用介绍正如前面你所知道的，Xadmin是基于Django的admin来开发的，所以Xadmin也继承了许多admin的用法，下面就分别介绍一下它们的使用情况： 因为我们之前在admin里面已经注册了UserProfile，所以xadmin里面也就有了这个信息，那我们接下来就设置一下我们文件的格式，让系统默认去寻找我们xadmin的adminx.py文件，而不是去寻找原来admin的admin.py文件。 验证码功能的实现我们打开eduline/apps/users这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始验证码功能的实现,在其中添加如下代码：12345678910111213141516171819#！/user/bin/python# -*- coding:utf-8 -*-# @Time: 2018/3/26 10:05# @Author: Envse# @File: adminx.py# 导入xadmin，如果出现字体底下出现红色属于正常现象（实际上环境已经配置过）import xadmin# 因为处于同一个目录之下，所以可以直接使用.models代替当前目录from .models import EmailVerifyRecord# 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类class EmailVerifyRecordAdmin(object): pass# 将EmailVerifyRecord注册进我们的admin中, 并为它选择管理器EmailVerifyRecordAdminxadmin.site.register(EmailVerifyRecord, EmailVerifyRecordAdmin) 现在我们重新运行一下我们的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin回车，出现：![](https://upload-images.jianshu.io/upload_images/8964398-96113eee67682a4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 你可能会好奇这个是怎样实现的，其实这就是你数据库设计的字段啊：你打开users/models.py文件，看到第30行代码：Meta信息就是用于后台显示的，其中verbose_name定义的是后台主页面显示字段，verbose_name_plural是verbose_name的复数形式，如果这两者不相等，那么verbose_name_plural就是在verbose_name后面加个s字母而已，所以我们尽量一样，便于管理和查看。 我们现在尝试添加一个邮箱验证码，点击右侧的增加邮箱验证码按钮，输入相关信息，可以看到添加成功了： 接下来，我们看一下右侧的显示列，点击一下：里面可以选择显示的内容，我们现在想在刚才的页面同时显示这些全部信息，所以需要配置一下:我们打开users/adminx.py文件，在里面的管理器中设置list_display字段:12345# 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类class EmailVerifyRecordAdmin(object): # 配置后台显示的列信息 list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;] # 一次显示你想出现的多行数据，# 这里面的字段都是你在前面数据库中定义的，请保持数据的一致 然后还可以配置过滤器，搜索框等，这里就不一一说明，直接贴上代码了：123456# 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类class EmailVerifyRecordAdmin(object): # 配置后台显示的列信息 list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;] # 查询你想要的数据,一般不依据时间进行查询 list_filter = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;] # 过滤器 之后刷新一下你的网页，成了这个样子： 细心的小伙伴们可能发现，这里竟然可以导出操作，是的，这样变得很方便了：你可以根据自己的喜好来导出不同的文件格式，比如xml: admin, xadmin和其他后台管理系统的区别像PHP，JAVA等其他语言，它们是按照一个功能模块来进行一个功能设计的。而admin和 xadmin就不一样了，它们是对于每张表都可以进行增删改查的管理器，因此我们还可以在增删改查的基础上加上我们自己的后台逻辑，完成我们自定义的功能。因此，从某种程度可以说它是不依赖于具体业务的，不管什么系统后台都是由表组成。 既然这样，我们可以在其余的各个表中，都加上这些个功能。 打开users/adminx.py文件，我们来实现轮播图的注册，和前面验证码的操作类似，这里就不细说，直接贴上代码：123456789from .models import Bannerclass BannerAdmin(object): list_display = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;] # 查询你想要的数据 list_filter = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;] # 过滤器xadmin.site.register(Banner, BannerAdmin) 再次强调一下：这里面的字段都是你前面在数据库中定义的，请保持数据库字段定义的一致性，不要乱写，否则后面会出很大的BUG！ 刷新一下你的页面，就变成了这个样子： 好了小伙伴们，你现在可以照葫芦画瓢了，尝试着把其余3个apps都注册到后台吧。那些，我们下一篇笔记再介绍，接下来教你一个自定义文件信息的技能。 自定义文件信息打开Pycharm,点击一下主菜单的File,选择下拉的Settings,选择Editor，再选择Code Style，选择文件模板：看到5的信息了么：12345#！/user/bin/python # -*- coding:utf-8 -*- # 编码格式# @Time: $&#123;DATE&#125; $&#123;TIME&#125; # 文件生成时间# @Author: Envse # 作者# @File: $&#123;NAME&#125;.py # 文件名 你可以自定义这些信息，当然还可以根据4的选择不同来添加不同的信息。然后点击apply,最后是ok,这样你每次创建新的py文件以后，这些信息就都会出现在文件的头部了。怎么样，新技能Get了没有？ 至此，关于初识后台管理这一部分就先说这么多，下一篇笔记就完善其余3个apps的注册，还有xadmin的全局配置，打造一个属于自己的网站后台管理系统。 本篇笔记对应于第九篇代码，对应于github的位置是https://github.com/licheetools/eduline，另外xadmin的原始安装包我也上传了，大家可以前往下载，有空的话，可以给项目一个star,感谢你的赏阅。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)","slug":"零基础使用Django2-0-1打造在线教育网站（八）：数据库字段的定义-下","date":"2018-04-11T12:21:58.000Z","updated":"2019-04-13T12:22:54.603Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（八）：数据库字段的定义-下/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（八）：数据库字段的定义-下/","excerpt":"","text":"写在前面本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于users应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。 本篇笔记对应于第八篇代码，对应于github的位置是https://github.com/licheetools/eduline 3个apps应用的创建1、课程版块(course)a、创建courses应用先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp courses b、确定数据库中的数据表数量首先，课程本身需要一张表用于保存自身信息：随意点开一门课程，你会发现以下内容：点击右侧的开始学习，你会进入章节信息详情： 每个课程包含多个章节，每个章节下面又包含多个视频和右侧的课程资料。其中：课程和章节是一对多的映射关系；章节和视频也是一对多的映射关系；课程和资料也是一对多的映射关系。所以通过分析，我们需要新建4个表，用于信息的存取： c、开始数据库字段的定义打开我们的courses/models.py文件，添加并修改如下代码:12345678910111213141516171819202122232425262728293031323334from django.db import modelsfrom datetime import datetime# Create your models here.# 课程信息class Course(models.Model): name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;) # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式 desc = models.CharField(max_length=300, verbose_name=&quot;课程描述&quot;) detail = models.TextField(max_length=500, verbose_name=&quot;课程详情&quot;) is_banner = models.BooleanField(default=False, verbose_name=&quot;是否轮播&quot;) degree = models.CharField(max_length=2, choices=((&apos;cj&apos;, &apos;初级&apos;), (&apos;zj&apos;, &apos;中级&apos;), (&apos;gj&apos;, &apos;高级&apos;)), verbose_name=&quot;难度等级&quot;) # 学习数这里使用分钟数作计量单位，便于后台记录(存储最小单位)和前台转换 learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;) # 学习人数从点击开始学习算起 students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;) # 收藏人数从点击收藏按钮算起 fav_nums = models.IntegerField(default=0, verbose_name=&quot;收藏人数&quot;) image = models.ImageField(upload_to=&apos;courses/%Y/%m&apos;, max_length=100, verbose_name=&quot;封面图片&quot;) # 点击数从点击页面算起 click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;) category = models.CharField(default=&quot;后端开发&quot;, max_length=20, verbose_name=&quot;课程类别&quot;) tag = models.CharField(default=&apos;&apos;, max_length=10, verbose_name=&quot;课程标签&quot;) youneeded_know = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;课程须知&quot;) teacher_tell = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;老师告诉你&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;课程&quot; verbose_name_plural = verbose_name def __str__(self): return self.name 接着刚才的代码，我们在下面添加如下内容：12345678910111213141516# 章节信息class Lesson(models.Model): # 前面知道一个课程对应多个章节，所以在章节表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个章节属于哪个课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;) name = models.CharField(max_length=100, verbose_name=&quot;章节名&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;章节&quot; verbose_name_plural = verbose_name def __str__(self): # 采用了字符串的格式化方式来同时引用多个数据 return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的章节》&#123;1&#125;&apos;.format(self.course, self.name) # return self.name也是可以 在上面的外键字course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)，这其实就是一个用于告知信息的字段，包含3个参数：Course是指你与哪个对象存在外键关系（记住是表的名称，不是字段的名称）；on_delete=models.CASCADE是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示） 我们继续接着刚才的代码，我们在下面添加如下内容：123456789101112131415161718192021222324252627282930313233# 视频信息class Video(models.Model): # 前面知道一个章节对应多个视频，所以在视频表中将章节设置为外键。 # 此处的lesson其实就是一个用来告诉我们这个视频属于哪个章节的字段 lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, verbose_name=&quot;章节&quot;) name = models.CharField(max_length=100, verbose_name=&quot;视频名称&quot;) url = models.URLField(max_length=200, default=&apos;&apos;, verbose_name=&quot;访问地址&quot;) learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;视频&quot; verbose_name_plural = verbose_name def __str__(self): return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;章节的视频》&#123;1&#125;&apos;.format(self.lesson, self.name) # return self.name也是可以# 课程资料信息class CourseResource(models.Model): # 前面知道一个课程对应多个课程资料，所以在课程资料表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个课程资料属于哪个课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;) name = models.CharField(max_length=100, verbose_name=&quot;名称&quot;) download = models.FileField(max_length=100, upload_to=&apos;course/resource/%Y/%m&apos;, verbose_name=&quot;资源文件&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;课程资源&quot; verbose_name_plural = verbose_name def __str__(self): return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的课程资料》&#123;1&#125;&apos;.format(self.course, self.name) # return self.name也行 点击左侧的structure，我们可以看到如下的4个函数（数据表）： 至此，我们course应用的数据库字段的定义到此告一段落，不过以后可能会有新的字段加入，所以我们就先不进行数据库生成和迁移操作。 2、授课教师与授课机构板块(organization)a、创建organization应用先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp organization b、确定数据库中的数据表数量顾名思义授课教师与授课机构板块，里面肯定有授课教师和授课机构这2个表吧。然后我们来观察一下页面： 看到没有，里面有一个用于筛选的城市列表，所以这个内容我们也是要单独放在一张表里面的。 也就是说，我们需要新建3张表： 其中，课程是属于课程机构的, 课程机构又有机构类别，城市，授课讲师等字段。 上面则是教师信息表应当具有的一些字段。 c、开始数据库字段的定义打开我们的organization/models.py文件，添加并修改如下代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869from django.db import modelsfrom datetime import datetime# Create your models here.# 城市信息class CityDict(models.Model): name = models.CharField(max_length=20, verbose_name=&quot;城市&quot;) # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式 desc = models.CharField(max_length=200, verbose_name=&quot;描述&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;城市&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息# 课程机构class CourseOrg(models.Model): name = models.CharField(max_length=50, verbose_name=&quot;机构名称&quot;) desc = models.TextField(verbose_name=&quot;机构描述&quot;) tag = models.CharField(max_length=10, default=&quot;全国知名&quot;, verbose_name=&quot;机构标签&quot;) category = models.CharField(max_length=20, default=&apos;pxjg&apos;, choices=((&apos;pxjg&apos;, &apos;培训机构&apos;), (&apos;gr&apos;, &apos;个人&apos;), (&apos;gx&apos;, &apos;高校&apos;)), verbose_name=&quot;机构类别&quot;) click_nums = models.IntegerField(default=0, verbose_name=&apos;点击数&apos;) fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;) image = models.ImageField(max_length=50, upload_to=&quot;org/%Y/%m&quot;, verbose_name=&quot;logo&quot;) address = models.CharField(max_length=150, verbose_name=&quot;机构地址&quot;) # 前面知道一个城市对应多个课程机构，所以在课程机构表中将城市设置为外键。 # 此处的city其实就是一个用来告诉我们这个课程机构属于哪个城市的字段 city = models.ForeignKey(CityDict, on_delete=models.CASCADE, verbose_name=&quot;所在城市说明&quot;) students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;) course_nums = models.IntegerField(default=0, verbose_name=&quot;课程数&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;课程机构&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息# 教师信息class Teacher(models.Model): # 前面知道一个课程机构对应多个教师，所以在教师信息表中将授课机构设置为外键。 # 此处的org其实就是一个用来告诉我们这个教师属于哪个课程机构的字段 org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=&quot;所属教师&quot;) name = models.CharField(max_length=50, verbose_name=&quot;教师名&quot;) work_years = models.IntegerField(default=0, verbose_name=&quot;工作年限&quot;) work_position = models.CharField(max_length=50, verbose_name=&quot;公司职位&quot;) work_company = models.CharField(max_length=50, verbose_name=&quot;就职公司&quot;) points = models.CharField(max_length=50, verbose_name=&quot;教学特点&quot;) click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;) fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;) age = models.IntegerField(default=18, verbose_name=&apos;年龄&apos;) image = models.ImageField(default=&apos;&apos;, upload_to=&apos;teacher/%Y/%m&apos;, verbose_name=&apos;头像&apos;, max_length=100) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;教师&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息 点击左侧的structure，我们可以看到如下的3个函数（数据表）： 3、用户操作板块(operation)a、创建operation应用先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp operation b、确定数据库中的数据表数量这个app应用主要用于用户操作信息的记录，主要包括： 1、用户提交我要学习的个人需求记录；2、用户的课程评论信息记录；3、用户用于收藏公开课, 授课讲师, 授课机构以及用户消息提醒的记录；4、用户个人中心里面我的课程说明，用户和课程之间的学习信息记录；5、用户咨询消息的记录等。 如下图所示： c、开始数据库字段的定义打开我们的operation/models.py文件，添加并修改如下代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495from django.db import modelsfrom datetime import datetime# Create your models here.from users.models import UserProfilefrom courses.models import Course# 用户我要学习信息class UserAsk(models.Model): name = models.CharField(max_length=20, verbose_name=&quot;姓名&quot;) mobile = models.CharField(max_length=11, verbose_name=&quot;手机&quot;) course_name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &quot;用户咨询&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息# 课程评论class CourseComments(models.Model): # 前面知道一个用户发表多个课程评论，所以在课程评论表中将用户设置为外键。 # 此处的user其实就是一个用来告诉我们这个课程评论属于哪个用户的字段 user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;) # 前面知道一门课程具有多个课程评论，所以在课程评论表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个课程评论属于哪个课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;) comment = models.CharField(max_length=200, verbose_name=&quot;评论&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &apos;课程评论&apos; verbose_name_plural = verbose_name def __str__(self): return self.comment # 这里很重要，否则在后台就显示不出Meta信息# 用户收藏信息class UserFavorite(models.Model): # 前面知道一个用户可以收藏多个内容，所以在用户收藏表中将用户设置为外键。 # 此处的user其实就是一个用来告诉我们这个用户收藏属于哪个用户的字段 user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;) fav_id = models.IntegerField(default=0, verbose_name=&apos;数据Id&apos;) fav_type = models.CharField(choices=((&apos;1&apos;, &apos;课程&apos;), (&apos;2&apos;, &apos;课程机构&apos;), (&apos;3&apos;, &apos;讲师&apos;)), default=1, verbose_name=&apos;收藏类型&apos;,max_length=2) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &quot;用户收藏&quot; verbose_name_plural = verbose_name def __str__(self): return self.user # 这里很重要，否则在后台就显示不出Meta信息# 用户消息信息class UserMessage(models.Model): # 我们的消息有两种:一种是发给全员，另一种则是发给特定某一个用户。 # 所以如果使用外键，那么每个消息就要对应一个用户，比较难以实现全员消息的通知。 # 因此我们设置用户id,如果为0就发给所有用户，不为0就是发给特定Id的用户。 user = models.IntegerField(default=0, verbose_name=&quot;接收用户&quot;) message = models.CharField(max_length=500, verbose_name=&apos;消息内容&apos;) # 设置消息是否已读，采用布尔类型 BooleanField： False表示未读,True表示已读。 has_read = models.BooleanField(default=False, verbose_name=&apos;是否已读&apos;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &apos;用户消息&apos; verbose_name_plural = verbose_name def __str__(self): return self.message # 这里很重要，否则在后台就显示不出Meta信息# 用户课程信息class UserCourse(models.Model): # 前面知道一个用户可以学习多门课程，所以在用户课程表中将用户设置为外键。 # 此处的user其实就是一个用来告诉我们这个课程属于哪个用户的字段 user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&apos;用户名&apos;) # 前面知道一门课程可以有多个课程的信息，所以在用户课程表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个课程信息属于哪门课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&apos;课程&apos;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;学习时间&apos;) class Meta: verbose_name = &apos;用户课程&apos; verbose_name_plural = verbose_name def __str__(self): return self.user # 这里很重要，否则在后台就显示不出Meta信息 点击左侧的structure，我们可以看到如下的5个函数（数据表）：至此，我们所有apps都已经创建完成，它们所包含的数据库字段的定义也都完成。 注册我们的4个apps打开eduline/settings.py文件，找到第33行代码，在其中加入以下代码：123456789101112INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;, &apos;courses&apos;, &apos;organization&apos;, &apos;operation&apos;,] 如图所示： 数据库生成和迁移操作先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：12makemirgrationmigrate 上面是对所有apps都进行数据库生成和迁移操作，如果你想对某个app操作，你可以使用下面的命令：12makemirgration appnamemigrate appname 上图分别为makemirgrations和migrate过程中输出的信息。下图是由于我们做的改动导致文件的变动记录：courses/migrations/0001_initial.py:这个文件是我们migrations时生成的新initial文件，这是很重要的变动文件，不能随意删除。 打开Navicat，查看数据表我们看到许多自定义的表都已经有了，而且命名规则都是 app名称 + 我们的类名转变为小写： 现在我们打开django_migrations表去查看一下我们的migration记录： 0001_inital是初始文件，其他的表明该应用已经在运行了。 新建管理文件夹现在你看我们的目录树结构已经变成了这样：所有的应用apps都是直接裸露在树干上，如果有10个，甚至更多100个呢？这样的管理方式就显得很混乱，业务逻辑分离不够明显。这时，我们可以新建一个文件夹，专门用于apps的管理。 新建一个Python package,名字叫apps，把我们之前的4个apps都拖进去：不要勾选search for references,直接点击确定即可。现在就变成了这个结构，是不是好看多了：不过上面那种操作会出问题，系提示找不到那些import的模块：还得我们前面在回顾Django基础知识的时候，也出现过类似的情况，忘了的话可以查看这篇笔记：零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾 这里我们就直接设置文件查找路径了。打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：12345import os, sys# Build paths inside the project like this: os.path.join(BASE_DIR, ...)BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;)) 在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数，将项目的绝对路径与apps进行拼接，返回一个新的地址,插入第0是希望它首先在apps下面搜索我们的内容。 测试运行一下项目先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：runserver再回车：在浏览器地址栏中输入http://127.0.0.1:8000/或者http://127.0.0.1，出现：![](https://upload-images.jianshu.io/upload_images/8964398-d7faf520cd534d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)恭喜你，我们的Django网页已经跑起来了。 至此，我们关于在线教育网站项目的app应用的创建和数据库字段的定义就到此结束了，感谢你的赏阅！ 下一篇笔记，我们就开始进行后台的管理和配置了！ 本篇笔记对应于第八篇代码，对应于github的位置是https://github.com/licheetools/eduline","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)","slug":"零基础使用Django2-0-1打造在线教育网站（七）：数据库字段的定义-上","date":"2018-04-11T12:20:09.000Z","updated":"2019-04-13T12:21:08.421Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（七）：数据库字段的定义-上/","link":"","permalink":"http://licheetools.github.io/2018/04/11/零基础使用Django2-0-1打造在线教育网站（七）：数据库字段的定义-上/","excerpt":"","text":"写在前面本篇笔记主要就是对上篇遗留的2个问题的解决：4个app项目的创建和数据库字段的定义，鉴于篇幅的原因，这里分上下两篇进行介绍。 本篇笔记对应于第七篇代码，对应于github的位置是https://github.com/licheetools/eduline 4个app项目的创建users app的创建先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp users 然后在Navicat中打开我们的数据库eduline，会发现生成了很多表，我们打开其中的auth_user这个表：下面我简要说明一下表中个字段的含义： id代表主键, password是密码, last_login 这是Django用于自动记录用户最后登录时间的字段。is_superuser 表明用户是否是超级用户(后台管理中会用到)，username 表示用户名（该字段不要随便修改），last_name和first_name分别是姓和名，email 表示邮箱,is_staff 表示是否是员工(后台管理中会用到)，is_active 表示用户是否是激活状态,date_joined 表示注册时间。 这其实是满足不了我们的需求的，因为我们的个人中心通常包括：昵称，性别，生日，地址，手机号，邮箱等信息，所以我们要扩展这些字段来满足我们的需求。 user表的自定义方法官方文档已经给出了，这里开启传送大门https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。 打开我们的users/models.py文件，添加并修改如下代码:12345678910111213141516171819202122232425262728from django.db import modelsfrom datetime import datetime# Create your models here.from django.contrib.auth.models import AbstractUser # 导入需要的类class UserProfile(AbstractUser): # 昵称 nick_name=models.CharField(max_length=50,verbose_name=&apos;昵称&apos;,default=&apos;&apos;) # 生日，可以为空 birday=models.DateTimeField(verbose_name=&apos;生日&apos;,null=True,blank=True) # 性别，默认为女 gender=models.CharField(max_length=6, choices=((&apos;male&apos;,&apos;男&apos;),(&apos;female&apos;,&apos;女&apos;)),default=&apos;female&apos;,verbose_name=&apos;性别&apos;) # 地址 address=models.CharField(max_length=100,default=&apos;&apos;, verbose_name=&apos;地址&apos;) # 手机号，可以为空 mobile=models.CharField(max_length=11,null=True,blank=True, verbose_name=&apos;手机号&apos;) # 图片，默认为default.png,upload_to为上传路径，记住图片字段必须有字段最大值 image=models.ImageField(upload_to=&apos;image/%Y/%m&apos;,default=&apos;image/default.png&apos;,max_length=100,verbose_name=&apos;图片&apos;) # meta信息，即后台管理中的名称 class Meta: verbose_name= &apos;用户信息&apos; verbose_name_plural=verbose_name # 重载str方法，打印实例会打印username，username为继承自Abstractuser这个类 def __str__(self): return self.username 注意：1、按住ctrl然后单击我们的AbstractUser，就可以进入到这个类的定义文件：auth/models.py,这也就是我们之前导入的位置：看到没，我们之前保留的字段它都有，所以我们只需要继承它就可以了。2、前面说过CharField必须有max_length, 但实际上Imagefield也是Charfield，所以也要有max_length。3、因为使用到了Imagefield字段，所以需要用到Pillow这个库，我们可以通过Pycharm或者pip安装它。 注册APP和重载AUTH_USER_MODEL注册APP打开eduline/settings.py文件，找到第30行代码，最底下加上我们的app名称。123456789INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;,] 重载AUTH_USER_MODEL打开eduline/settings.py文件，在刚才代码的底下加上重载我们的UserProfile代码：123456789101112INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;,]# 重载UserProfile使其生效AUTH_USER_MODEL=&apos;users.UserProfile&apos; 数据库更新点击Tools 菜单下 Run manage.py Task，运行我们的makemigrations users和migrate users命令。你会发现运行前者没问题，运行后者却出了问题：1django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin.0001_initial is applied before its dependency users.0001_initial on database &apos;default&apos;. 其实这个问题就是你之前已经定义了userProfile并且还设置了重载它的语句，现在又来定义它，它是不会再给你提供那么多的初始表的：所以我们需要删除除了auth_user以外的其他表，如果一次删除不了（那是因为表与表之间存在外键联系）就一个个的删除：现在再来点击Tools 菜单下 Run manage.py Task，按顺序运行如下命令：1234makemigrationsmigratemakemigrations usersmigrate users 注意：只运行后面那2个命令是不可以的，会缺少部分表！！！ 看到没，这次没有问题出现了：打开数据库，看一下我们的表，一共有11个表：打开这个自定义表（users_usersprofile）,你会发现我们需要的字段都有了： 注意一下我们以后不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错了。 至此我们完成了第一个app的配置和其自定义字段的设计！ 循环引用看下面这个图：我们通常会在user中定义userCourse这个字段，用来记录用户学习的课程，它会有两个外键：user和course。所以在用到的时候，我们需要import Courses.models。 同样，如果用户对于某个课程需要评论，那么我们需要定义CourseComment这个字段，而且它肯定会放在 Courses.models当中。所以在用到的时候，我们又需要import User.models。 这是只有2个app的情况，当还有更多的情况：3个，4个，5个…apps时，循环调用import会出错导致系统不能正确识别，而且最起码会造成时间上的等待。那么有没有好的方法来解决这个问题呢？答案是有的！可以采用分层设计的思想来解决这个难题。 分层设计在前面的第六篇笔记中我们已经说过，准备新建4个app,其中的3个apps: (users)用户版块,(course)课程版块,(organization)授课教师与授课机构板块, 就是一些常规的信息存储，而第4个(operation)用户操作板块就是采用分层设计的思想来设计的，而且我们保证operation这个app的优先级高于其他3个，所以可以随时import这些底层的apps。各个apps的层级关系如下图所示：在users这个app中，我们自定义了UserProfile这个表用来覆盖系统默认的user表。这样其实我们这个users应用已经设计完了。不过呢，通过研究我们发现有些功能是非常独立的，我们为了平衡一些app的代码量，可以将它们放在这个users项目里面。 EmailVerifyRecord - 邮箱验证码Banner - 轮播图 邮箱验证码的设计验证码分三种类型，分别用于不同的功能：注册；找回密码；修改邮箱，所以在设计验证码类型的时候注意选择的条件，通常验证码包括这些字段：code,email,send_type,send_time。 我们打开users/models.py文件，接着之前的代码在后面添加如下内容:123456789101112131415161718from datetime import datetimeclass EmailVerifyRecord(models.Model): code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;) email = models.EmailField(max_length=50, verbose_name=&quot;邮箱&quot;) send_type = models.CharField(verbose_name=&quot;验证码类型&quot;, choices=((&apos;register&apos;, &apos;注册&apos;), (&apos;forget&apos;, &apos;找回密码&apos;), (&apos;update_email&apos;, &apos;修改邮箱&apos;)), max_length=30)# 这里的now得去掉(),如果不去掉则会根据编译时间，而不是我们要的实例化时间。 send_time = models.DateTimeField(verbose_name=&quot;发送时间&quot;, default=datetime.now) class Meta: verbose_name = &quot;邮箱验证码&quot; verbose_name_plural = verbose_name def __str__(self): return self.email #这里很重要，否则在后台就显示不出Meta信息 轮播图的设计轮播图是一个可以自动切换图片的效果，它包括标题，具体的图片，点击图片后的跳转地址，图片的轮播顺序，添加时间等要素：title,image,url,index,add_time。我们打开users/models.py文件，接着之前的代码在后面添加如下内容:123456789101112131415class Banner(models.Model): title = models.CharField(max_length=100, verbose_name=&quot;标题&quot;) image = models.ImageField(max_length=100, upload_to=&apos;banneer/%Y/&amp;m&apos;,verbose_name=&quot;轮播图&quot;) url = models.URLField(max_length=200, verbose_name=&apos;访问地址&apos;) # index的值默认越大越靠后，可以自定义修改index值。 index = models.IntegerField(default=100, verbose_name=&apos;轮播顺序&apos;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &quot;轮播图&quot; verbose_name_plural = verbose_name def __str__(self): return self.title # 这里很重要，否则在后台就显示不出Meta信息 你可能会问，为什么不把与用户相关的评论，点赞，学习的课程，课程进度等信息也放到这个app中呢？其实是因为那些信息的相关性很大，经常是循环引用，所以我们把那些信息都放到operation这个app中。 我们把鼠标移至models.py这个文件上，再点击右侧的structure，可以发现我们刚才新创建的3个类（其实就是数据库里的数据表）： 至此第一个app应用的数据库字段定义算是完成了，下面大家可以思考一下其他3个应用的数据库字段的定义应该是怎样的，给大家留点时间思考一下，我们下一篇笔记再来介绍！下面介绍一个Python的规范，可以让你的代码更具有可读性和维护性。 PEP8规范（一） 代码的编排1、 缩进。每行需要4个空格的缩进，不要使用Tap键，更不能混合使用Tap键和空格。2 、每行最大长度79，换行可以使用反斜杠，但最好使用圆括号。换行点要在操作符的后边敲回车。3 、类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。 （二 ）文档的编排1、 模块内容的顺序：模块说明和docstring—import—globals&amp;constants—其他定义。其中import部分，又按标准、第三方和自己编写顺序依次排放，之间空一行。123456from django.db import modelsfrom datetime import datetime# Create your models here.from django.contrib.auth.models import AbstractUser# 自己定义代码放置处 2 、不要在一行import多个库，比如import os, sys，虽说没有错误但是并不推荐。3、 如果采用from xx import xx的方式来引用某个库，可以省略module.，但是可能会出现命名的冲突，所以这时就要采用import xx的方式。 （三）空格的使用总体原则，避免不必要的空格。1、 各种右括号前不要加空格。2、 逗号、冒号、分号前不要加空格。3 、函数的左括号前不要加空格。如function(1)。4 、序列的左括号前不要加空格。如list[2]。5、操作符左右各加一个空格，不要为了对齐增加空格。6 、函数默认参数使用的赋值符左右省略空格。7、不要将多句语句写在同一行，尽管使用；允许。8、 if/for/while语句中，即使执行语句只有一句，也必须另起一行。 （四）命名的规范总体原则，新编代码必须按下面命名风格进行，现有库的编码尽量保持风格。1 、尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。2、 模块命名尽量短小，使用全部小写的方式，可以使用下划线。3、 包命名尽量短小，使用全部小写的方式，不可以使用下划线。4、 类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。5、 异常命名使用CapWords+Error后缀的方式。6 、全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是all机制;二是前缀一个下划线。7 、函数命名使用全部小写的方式，可以使用下划线。8 、常量命名使用全部大写的方式，可以使用下划线。9 、类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。10、类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。11 、类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。12 、为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明a,访问时，只能通过Foo._Fooa，避免歧义。如果子类也叫Foo，那就无能为力了。13 、类的方法第一个参数必须是self，而静态方法第一个参数必须是cls。 （五）编码的建议1、编码中考虑到其他python实现的效率等问题，比如运算符‘+’在CPython（Python）中效率很高，都是Jython中却非常低，所以应该采用.join()的方式。2 、尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。3 、使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。4 、异常中不要使用裸露的except，except后跟具体的exceptions。5 、异常中try的代码尽可能少。比如：123456try:value = collection[key]except KeyError:return key_not_found(key)else:return handle_value(value) 要优于123456try:# Too broad!return handle_value(collection[key])except KeyError:# Will also catch KeyError raised by handle_value()return key_not_found(key) 6 、使用startswith() and endswith()代替切片进行序列前缀或后缀的检查。比如:Yes: if foo.startswith(‘bar’):优于No: if foo[:3] == ‘bar’:7 、使用isinstance()比较对象的类型。比如:Yes: if isinstance(obj, int):优于No: if type(obj) is type(1):8、 判断序列空或不空，有如下规则:12Yes: if not seq:if seq: 优于12No: if len(seq)if not len(seq) 9 、字符串不要以空格收尾。10、二进制数据判断使用 if boolvalue的方式。 如果你想获得更多关于PEP8的信息，可以查阅这篇信息PEP8 Python 编码规范整理或者官方文档PEP8的官方文档 至此，我们第七篇：在线教育网站的数据库字段的定义(上)就到此结束了，感谢你的赏阅。下一篇，我们就完善其余3个apps应用的数据库字段的定义。 本篇笔记对应于第七篇代码，对应于github的位置是https://github.com/licheetools/eduline","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置","slug":"零基础使用Django2-0-1打造在线教育网站（六）：教育网站开发配置","date":"2018-04-10T12:11:10.000Z","updated":"2019-04-13T12:19:23.209Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（六）：教育网站开发配置/","link":"","permalink":"http://licheetools.github.io/2018/04/10/零基础使用Django2-0-1打造在线教育网站（六）：教育网站开发配置/","excerpt":"","text":"写在前面小伙伴们，今天终于进入了我们在线教育网站的项目开发阶段，这是这个项目的第一篇，主要给大家创建我们的虚拟环境和相关软件的安装（可能部分软件的安装在前面已经介绍了，这里就不再赘述了，必要的时候会开启传送大门。） 本篇笔记对应于第六篇代码，对应于github的位置是https://github.com/licheetools/eduline 虚拟环境配置首先请大家回顾阅读一下我们之前写的第二篇：零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置，然后我会给大家演示这个项目的虚拟环境配置，作用就是加深大家对虚拟环境搭建的印象。 1、创建虚拟环境eduline（名字可以随意取）12345678910C:\\Users\\YC&gt;F: # 进入F盘F:\\&gt;cd Envs # 进入到Envs这个文件夹（系统默认在C盘，我自定义在F盘）F:\\Envs&gt;mkvirtualenv eduline # 创建虚拟环境edulineUsing base prefix &apos;f:\\\\python\\\\pystall&apos;New python executable in F:\\Envs\\eduline\\Scripts\\python.exeInstalling setuptools, pip, wheel...done.(eduline) F:\\Envs&gt; # 表示已经进入到eduline这个虚拟环境中 2、安装Django2.0.112345678910111213(eduline) F:\\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple # 采用清华镜像源安装djangoLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleCollecting django==2.0.1 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB) 100% |████████████████████████████████| 7.1MB 2.9MB/sCollecting pytz (from django==2.0.1) Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB) 100% |████████████████████████████████| 512kB 1.5MB/sInstalling collected packages: pytz, djangoSuccessfully installed django-2.0.1 pytz-2018.5 # 提示已经安装成功了，新版本会自动安装pytz这个库(eduline) F:\\Envs&gt; # 然后就可以开始pip安装库和包了 3、创建我们的django项目打开Pycharm，新建django项目，各步骤如下（这里演示的是没有虚拟环境的版本，已经有虚拟环境的直接点击Existing interpreter，选择已有的虚拟环境即可）： 至于各个箭头所填内容的原因，我这里就不再说明了，如果忘记了可以翻看之前的第二篇笔记。最后点击确定按钮即可，进入到如下页面： 至此，虚拟环境以及项目的搭建就完成了。 mysqlclient的安装正如你前面所看到的，因为我们后面需要连接数据库，所以数据库驱动mysqlclient的安装是必不可少的，这里就先安装一下。（零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发，前面已经介绍过了，所以这里简单演示一下即可）这里就采用网上下载到本地的方式来安装一下：1、点击下面的蓝色字，即可跳转到下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住Ctrl+F键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！2、将下载好的mysqlclient放置到虚拟环境eduline里面： 3、在虚拟环境中安装mysqlclient，如图所示：12345678910111213C:\\Users\\YC&gt;F:F:\\&gt;cd Envs F:\\Envs&gt;workon eduline(eduline) F:\\Envs&gt;cd eduline # 必须进入到你的项目中才能开始安装，否则会出错(eduline) F:\\Envs\\eduline&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whlProcessing f:\\envs\\eduline\\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whlInstalling collected packages: mysqlclientSuccessfully installed mysqlclient-1.3.13(eduline) F:\\Envs\\eduline&gt; 4、配置settings.py文件打开eduline/eduline/settings.py文件，找到第77行代码：123456DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;&#125; 修改为如下代码：123456789DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;eduline&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;密码&apos;, &apos;HOST&apos;:&apos;127.0.0.1&apos; &#125;&#125; 5、新建数据库eduline打开Navicat，新建数据库eduline:然后点击Tools 菜单下 Run manage.py Task，运行我们的makemigrations和migrate命令，最后运行一下我们的项目：runserver，在浏览器地址栏中输入：http://127.0.0.1:8000/或者（http://127.0.0.1）出现：![](https://upload-images.jianshu.io/upload_images/8964398-dcc125590f7a79d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)表明我们的项目初始搭建完成了。 Xadmin的安装尽管Django自带了admin用于后台的管理，但是我们觉得它的可支配性不是很大，所以这里推荐采用Xadmin来对后台进行管理。（还有一个叫做django-suit的插件，它其实只是美化了admin，功能上并没有做过多的拓展，这里开启传送大门，有兴趣的可以了解一下：django-suit官网）大家可以点击这里下载xadmin（下载后的文件放置位置，后面会介绍，这里你先新建一个文件夹A临时存放一下！） DjangoUeditor的安装因为后面课程的添加需要富文本的支持，所以需要用到富文本插件，这里依旧开启传送大门：大家可以点击这里下载DjangoUeditor（下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！） 课程的前端初始代码因为我们这里主要说的是前端，所以这个在线教育网站的前端页面源代码就直接给大家了，大家自行下载，开启传送大门：初始前端源码.rar（下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！） 至此，项目开发所需要的额外软件算是准备完全了，接下来则是业务逻辑分析了。 业务逻辑分析其实在第一篇的时候我们就已经介绍完了这个网站的业务逻辑，但是鉴于时间的原因，我这里再次介绍一下，其目的就是让大家更加的熟悉我们的业务逻辑，为接下来数据库的设计做一个铺垫。12345678910111213141516171819202122232425262728293031点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。日志记录：它可以记录后台人员的操作情况。其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。 所以我们的app一共有4个，用于分别实现不同的功能，具体如下： (users)用户版块：负责记录用户的个人信息，轮播图等相关内容, (course)课程版块：用于记录课程相关的内容, (organization)授课教师与授课机构板块：用于记录授课讲师，机构相关内容, (operation)用户操作板块：用于记录用户操作的相关内容。 关于这4个app项目的创建和数据库字段的定义，我们下一篇笔记再介绍。接下来我们介绍如何利用Pycharm来同步更新代码至github，前面那篇介绍了如何利用Pycharm来新建repositories 并把代码上传过去，这次就是介绍如何更新之前上传的代码了。 利用Pycharm来同步更新代码至github其实很简单的，分2个步骤。1、点击菜单栏下的VCS，下拉找到第三个Commit，点击一下，就会出现下面的页面：选择完以后，点击下面的commit按钮，至此第一步就完成了，接下来第二步。2、还是点击菜单栏下的VCS，下拉找到第八个Git，点击一下，下拉找到那个倒数第四个Push按钮，点击一下，就会出现如下页面：如果你第一步Commit的话，这里就有你上传的Commit信息，我这第一步因为没有提交所以就没有了。然后选择你的提交项目，点击下面的Push按钮，等待几分钟，去你的Github仓库看一下，发现出现了：那么恭喜你，你已经Get了这个技能。 至此本篇关于‘’教育网站开发配置‘’的笔记就到此为止了，下一篇就开始4个app项目的创建和数据库字段的定义的介绍了，感谢你的赏阅。 本篇笔记对应于第六篇代码，对应于github的位置是https://github.com/licheetools/eduline","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（五）：简易留言簿交互实现","slug":"零基础使用Django2-0-1打造在线教育网站（五）：简易留言簿交互实现","date":"2018-04-10T11:57:33.000Z","updated":"2019-04-13T12:19:13.724Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（五）：简易留言簿交互实现/","link":"","permalink":"http://licheetools.github.io/2018/04/10/零基础使用Django2-0-1打造在线教育网站（五）：简易留言簿交互实现/","excerpt":"","text":"写在前面本篇笔记主要是简易留言簿的交互实现，笔记中本篇（第五篇）对应上传的仓库为:https://github.com/licheetools/djangoTest对应第五篇截止代码。 好了，我们先来看一下我们上篇笔记的最终效果： 交互实现对象关系映射ORM通常而言，为了实现我们数据意义上的增删改查，你可能会选择使用原生的数据库查询语句如:select * from database where id =8;又比如下面一段代码：12345678910111213import MySQLdb # 导入数据库驱动模块def book_list(request): # 使用原生sql获取书的列表 # 创建一个数据库的连接: 指明用户名，数据库名，密码，服务器名 db = MySQLdb.connect(user = &apos;me&apos;, db=&apos;mydb&apos;, passwd=&apos;secret&apos;, host=&apos;localhost&apos;) # 创建一个游标对象执行器 cursor = db.cursor() # 书写我们需要的sql语句，可以在Navicat中执行 cursor.execute(&apos;SELECT name FROM books ORDER BY name&apos;) # 对于fetchall()的结果做遍历，并将遍历回来的结果当做数组，再取出第0个值name（必须一一对应）。 names = [row[0] for row in cursor.fetchall()] db.close() 尽管这种方法可以对数据进行操作，但是一旦需要进行操作的数据过多而且不仅仅是查询操作，这种方法就显得很捉襟见肘了。那么有没有一种简便的方法呢？答案是有的！这就用到了我们的ORM了。 对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换 。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。 你可以借鉴面向对象编程的思想这么理解，把数据当做对象（事实上在面向对象编程的思想里，一切都是对象，别忘了Python也就是面向对象编程语言），那么它就有方法和属性了。举个例子来说：car，它的属性可以是颜色（color），大小（size），长度（length）等，可以这么表示为1car.color car.size car.length ；它的方法可以是启动（start），运行（run），停车（stop）等,也可以这样表示为：1car.start() car.run() car.stop() 创建我们的models(数据库信息)从前面的描述中你就知道了，models.py这个文件就是用于数据库的操作，包括连接，访问，数据定义，修改等，接下来我们就开始定义数据，写我们的代码了。在空白处输入以下代码：12345678910class UserMessage(models.Model): # 继承于django.db.models.Model# max_length设置最大长度，verbose_name在后台显示字段会用到，也就是中文显示文本内容 name = models.CharField(max_length=20, verbose_name=&quot;昵称&quot;) email = models.EmailField(verbose_name=&quot;邮箱&quot;) address = models.CharField(max_length=100 ,verbose_name=&quot;联系地址&quot;) message = models.CharField(max_length=500, verbose_name=&quot;你的轨迹&quot;) class Meta: verbose_name = &quot;用户留言信息&quot;# class Meta，内嵌于 UserMessage 这个类的定义中，主要是用于后台管理显示中文信息 前面说到，一旦数据发现变动就必须执行我们的makemigrations和migrate操作，我们运行一下：为什么会这样呢，怎么一点反应也没有，其实因为你还没有把新创建的apps在setting中注册，所以才会出现这样的情况。 在settings.py中注册我们新创建的apps在djangoTest/settings.py 第33行的INSTALLED_APPS:的尾部加上一行代码&#39;liuyan&#39;,如下图所示：123456789INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;liuyan&apos;,] 这时候我们再来重新运行Tools 菜单下 Run manage.py Task然后输入makemigrations或者makemigrations liuyan,因为这里只有一个app所以我就直接makemigrations，多个可以根据自己的需要来选择makemigrations的对象，如下图所示：接着运行migrate命令：提示生成了一些文件信息，我们打开Navicat去看一下：看到没，我们的数据信息在数据库成功显示了。默认数据表的名称为app名称_类名（转换为小写），自动生成的id作为主键（数据查询必备，这里系统给我们自己添加了）。 关于Models的一些说明前面我们用到了一些字段如CharField，EmailField等，还有一些这里没用到但是今后会用到的字段，我列举了一下：1234567models.TextField # 文本注意与CharField的区别，范围大小不一样models.ForeignKey # 外键models.DateTimeField # 时间models.IntegerField # 整型models.IPAddressField # IP地址models.FileField # 文件models.ImageField # 图片 如果你想看全部的信息可以，将光标放在models上面，按住ctrl+然后单击，进入models/–init–.py文件，之后以同样的操作点击任意一个fields单词，就可以打开fields/–init–.py文件了，在最前面就可以看到所有字段： 字段参数的说明1、CharField必须指明默认的最大长度（max_length）。null=True,blank=True指明字段可以为空,defalut = “ “指定默认值为空。通常我们地址这一栏可以为空，所以修改如下：1address = models.CharField(max_length=100 ,null=True,blank=True,verbose_name=&quot;联系地址&quot;) 2、表的id是自动生成的，如果需要自定义主键,那么需要在models.py中添加字段：1object_id = models.CharField(primary_key=True,max_length=100 ,verbose_name=&quot;主键&quot;) 再来makemigrations和migrate一下：我们发现出错了，其实是要求我们需要给object_id添加默认值，那我们默认为空：1object_id = models.CharField(primary_key=True,max_length=100,default=&quot;&quot; ,verbose_name=&quot;主键&quot;) 重新运行一下，makemigrations和migrate：我们现在再次刷新一下Navicat，发现系统默认生成的主键id没了,主键变成了我们自定义的object_id。右键liuyan_usermessage这个表，选择设计表打开： Meta的说明1、在Meta信息中我们可以指定表的名称，如db_table：1db_table = &quot;user_liuyan&quot; 2、可以指定排序的字段，如ordering：1ordering = &apos;object_id&apos; 这是以其升序的，倒序的话只需要这样ordering = &#39;-object_id&#39;即可。3、可以更改后台信息，如verbose_name_plural：verbose_name_plural是verbose_name的复数形式，如果不改则会在其后面加s。1234verbose_name = &quot;用户留言信息&quot;则verbose_name_plural 会显示 &quot;用户留言信息s&quot;，所以一般这2个的值都是相同的即verbose_name =verbose_name_plural=&quot;用户留言信息&quot; 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，所有Django的基础知识我们就回顾完了，下一篇正式开始在线教育网站的项目开发！ 笔记中本篇（第五篇）对应上传的仓库为:https://github.com/licheetools/djangoTest对应第五篇截止代码。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发","slug":"零基础使用Django2-0-1打造在线教育网站（四）：简易留言簿基础开发","date":"2018-04-10T09:23:25.000Z","updated":"2019-04-13T11:56:34.942Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（四）：简易留言簿基础开发/","link":"","permalink":"http://licheetools.github.io/2018/04/10/零基础使用Django2-0-1打造在线教育网站（四）：简易留言簿基础开发/","excerpt":"","text":"写在前面本篇笔记主要是简易留言簿的基础开发，接下来的一篇才是开发的重点，但是这样为了缓冲一下大家，希望大家不要有大大的鸭梨。。。笔记中上篇（第三篇）对应上传的仓库为:https://github.com/licheetools/djangoTest对应第三篇截止代码。我们从这开始正式进入到简易留言簿的基础开发。（前面的必要工作已经做完，如果没跟上节奏，请回头补上，这里就不细说了。） 页面介绍这个页面就是我们即将开发的简易留言簿，初始页面就是这样，关于这个页面的实现是html和css搭建的，这是前端的部分，有兴趣的小伙伴自己去查找资料学习一下，这里因为只讲后端，就不介绍了哈。 这里主要是介绍Django从请求到响应的整个完整流程，为我们后面开发在线教育平台打下基础。本篇笔记所要用到的静态html页面请前往Github下载：start.html 业务逻辑介绍用户填写信息和留言 –&gt; 点击提交 –&gt;数据被存储到数据库（我们可以去数据库查询的到）。 开始分析1、将下载的start.html文件拖到前面创建的templates文件夹里，如下图：2、通过观察我们发现，这个页面里面把所需的css样式都写进去了，不利于我们对其样式的个性化管理，所以我打算新建一个css文件，用于存放css样式表单。 在static的下面新创建css和js文件夹，可能js文件夹用不上，但是这也是为后面的开发在线教育平台打下基础，你最好也试着创建一下，一般这些文件都是经常用到的。（这里因为功能的原因用不上。）然后在css这个文件夹下面新建一个style.css的文件。3、打开start.html，点击&lt;style&gt;标签，将样式收起来，然后将其复制到刚才新建的style.css这个样式表中。记得在复制的时候把开头和结尾的&lt;style&gt;标签给去掉，并且可以按键盘上的shift + tab键，格式一下代码。就是下面的样子！ 4、别忘了将你新建的css样式文件引入到我们的html文件里去，否则后面文件的样式可能就加载不出来呀。事实上，我们在html里面已经引入了。 数据库的连接5、打开djangoTest这个项目目录下面的settings.py文件，找到下面第80行代码，因为Django自带的数据库是sqlite3，前面说过我们采用的数MySQL数据库，所以需要对其进行修改。也就是说默认的连接是这样的：123456DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;&#125; 但我们应当修改成这个样子：123456789DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;djangoTest&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;密码&apos;, &apos;HOST&apos;: &quot;127.0.0.1&quot; &#125;&#125; 我们中在Navicat中新建的数据库名字与其中的NAME的名称应设置为一致，否则会出错！！6、在Navicat中新建的数据库djangoTest，如图： 安装 mysqlclient和配置seeting文件。7、点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。 还记的在Pycharm里面安装第三方库么？如果不记得请翻看前面的笔记。这里简单说明一下：点击4中的绿色+号，就可以搜索第三方库，然后点击install即可，是不是很简单，但有时候会出现安装失败的情况，所以最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门，https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住`Ctrl+F`键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。![](https://upload-images.jianshu.io/upload_images/8964398-20977829a37ddad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！ 8、在虚拟环境中安装mysqlclient，如图所示：注意安装的命令是：pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl（后面的是你刚才下载的版本名称，带whl）9、接下来我们再次点击Tools 菜单下 Run manage.py Task，我们会发现刚才的错误不再出现了。 makemigrations和migrate10、现在介绍一下我们前面讲到用于数据迁移的两个命令：makemigrations和migrate，下面我们分别运行这两个命令，看有什么大的变化。在调用makemigrations这个命令之后，结果是这样的：紧接着，在调用migrate这个命令之后，结果变成这样了：我们会发现它生成了好多文件，我们打开Navicat中新建的数据库djangoTest，发现了很多表：这些都是Django系统默认的内置数据表，我们在后面会用到它们。11、运行一下我们的项目：runserver，然后到http://127.0.0.1:8000/来访问看是否运行成功。如果成功，则页面显示It worked。最后结果如下： 你可能会问，为什么显示的不是留言这个页面，而是原始页面呢？那是因为我们还没有配置app的信息，下面开始配置。 展示留言页面12、将djangoTest/urls.py修改如下:1234urlpatterns = [ path(&apos;admin/&apos;, admin.site.urls), path(&apos;start/&apos;, getstart), # 新增加的一行] 这里新增加path(‘start/‘, getstart),是代表以start为开头的地址。getstart 是这个url相对应连接（映射）的view。我们先去创建一个视图函数，其名字就是getstart。13、在apps/liuyan/views.py添加如下代码：12def getstart(request): return render(request, &apos;start.html&apos;) request 这个参数是django的一个httpRequest对象，关于它的用法你可以按住ctrl + 左键 跟踪到我们的render函数里面。Alt + 左箭头返回原位。一般来说，render函数，我常用的就是它的2个参数：request和template-name。上图中start.html就是我们的原始页面名称。14、回过头，对我们之前的urls.py进行重新配置完善：也就是12步中的urls.py，增加一行包的引入：1from liuyan.views import getstart 变成了这个样子：15、重新启动运行一下我们的项目：runserver，发现报错了：其实并没有报错，只是因为我们在path中加入了自己的配置’start/‘,它就不会采用默认配置了，所以我们的IP地址应该是：http://127.0.0.1:8000/start/。你点进去看看：现在页面出来了但是样式却没有加载成功，也就是说static/css/style.css文件没有找到。那是因为setting.py中静态文件的配置出了问题，第124行代码需要修改。它只说明了目录的名称，并没有指明查找的根路径，所以需要添加下面代码：1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = [ os.path.join(BASE_DIR, &apos;static&apos;)] 16、我们再次运行一下:runserver。如果你前面没有按ctrl+v停止，那你只需要ctrl+s 即可重新刷新运行。最后运行结果如下：成功了，这就是今天最基本的页面信息配置了，把页面动态加载出来了。下一篇笔记将给这个动态的留言板加交互特效了。 不过很多小伙伴说，自己看的是云里雾里，对这个过程不熟悉，自己没有接触过MVC、MVVC等网页设计模式，所以我总结一下这个项目的配置流程。 项目配置流程图刚才的流程顺序1、把html文件导入进来；2、通过简单的url配置来访问这个html；3、发现找不到页面，所以我们就设置setting中DIRS路径；4、页面可以正常显示，但css样式不能正常加载，我们设置了STATICFILES_DIRS；。。。这样一步的，我们发现经常遇到错误，其实我们是从倒的顺序来执行的，目的就是让大家能通过很多的错误来加深自己对Django开发流程的熟悉程度。 正常的开发流程看到没有，这样做的好处就是避免少犯错误。你可以尝试以顺的顺序来创建一个新的项目，试着体会一下这2种开发顺序的感觉。 后面我们的开发会从migration生成数据表这里开始往下编辑内容。本篇笔记中对应上传的仓库为:https://github.com/licheetools/djangoTest对应第四篇截止代码。 至此，简易静态留言簿的基础开发就到这里了，感谢你的赏阅。下一篇将实现留言簿的交互功能。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾","slug":"零基础使用Django2-0-1打造在线教育网站（三）：Django基础知识回顾","date":"2018-04-10T09:03:19.000Z","updated":"2019-04-13T09:22:30.230Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（三）：Django基础知识回顾/","link":"","permalink":"http://licheetools.github.io/2018/04/10/零基础使用Django2-0-1打造在线教育网站（三）：Django基础知识回顾/","excerpt":"","text":"写在前面在前面的第二篇里，我们创建了一个名为djangoTest的项目，现在我们通过利用这个项目制作一个简单的留言簿来对django的基础知识进行一个回顾。笔记中本篇对应上传的仓库为:https://github.com/licheetools/djangoTest对应第三篇截止代码。 知识目录在前面创建Django的时候，你会出现这样的目录结构，但是在运行命令manage.py runserver 8000之后，你会发现变成了下面这个样子：看到没，是不是多了一个db.sqlite3文件，这是因为你在运行的时候联接了已经存在的数据库，从而自动生成了一个sqlite3文件。 好，接下来介绍一下该目录树的结构以及各个节点文件的作用（为了更加清楚准确的介绍，我把这个结构树分为了6个部分）： 1、djangoTest: 这个djangoTest与2中的不一样，这是树的开始，也就是主目录； 2、djangoTest: 这个djangoTest与1中的不一样，这是项目目录，记住主目录和项目目录名称是一样的，且在创建Django项目的开始时候确定；对于2中的文件介绍如下： –init–.py: 一个空文件，用于告诉计算机这是一个Python包;settings.py: 用于对项目的全局进行配置的文件（该 Django 项目的设置/配置）；urls.py: 主要的urls配置入口（该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”）;wsgi.py: 是Django启动的必须文件（一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目）； 3、templates：它的作用是放置静态的html文件 4、db.sqlite3: 用于保存数据，开始没有，必须运行之后才有，且不固定，Django默认是sqlite数据库，但你也可以用MySQL，自然文件类型就发生改变了，但都是数据库文件。 5、manage.py： 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互（启动Django需要的主要文件，主要的Django命令都通过manage.py来运行) 6、External Libraries：这是扩展包的入口（外部库存放地址）。 上面只是project（项目），但是真正来实现各种不同功能的却是各种app（应用）,下面我们来利用pycharm创建app。 项目与应用你可能会有疑惑，我们之前都已经创建了djangoTest这个项目，为什么还要创建各种app应用呢？别急，我来告诉你其中的原因，我们以常用的手机软件微信来说明这个道理。你知道微信这个手机软件的名字对吧，其实这个名字就是一个项目，而且你还知道微信可以用来语音聊天，视频聊天，发图片，文字。。。等，这些不同的功能我们就称之为应用。现在明白了吧，不同功能的应用构成了项目。那么问题来了，我们如何利用Pycharm来创建app呢？ 利用Pycharm创建app第一步：在 Tools -&gt; Run manage.py Task进入创建app的命令入口；第二步：在命令入口输入创建命令startapp appname,然后回车即可。你会发现生产了一个新的应用，而且目录树的结构发生了变化，多了这么一个东西：这个红色框里面的都是我们刚才创建liuyan这个app里面的文件，下面继续给大家介绍一下新目录树的结构和节点文件。 1、migrations:它是一个Python包，里面目前只有–init–.py这个用于计算机识别这个包的空文件，这个包是用来存放数据迁移文件的，每次数据的变动，我们都需要更新数据库，否则会出错，更新的命令是makemigrations和migrate而且顺序不能对换！关于这一点，我后面还会继续说明，这里你只需要有一个大概的认识即可;2、admin.py: 用于身份验证；3、apps.py: app信息；4、models.py： 用于数据定义；5、tests.py： 用于app测试；6、views.py： 用于视图的创建。 创建static文件夹当然我们的项目肯定不只有html,肯定还有javascript,css，图片等文件，所以我们需要创建一个static文件用于存放静态的文件。将鼠标移至djangoTest这个主目录上，右键new–&gt; python package–&gt;写入名字static回车即可！如图： 创建log文件夹当然，我们还需要创建log文件夹，用来存放网站的日志文件，这是必不可少的。 创建media文件夹与此同时，因为是Web应用，就必须有一个用于存放用户上传的图片，视频等资源文件夹。 至此，web的文件夹都已经创建完成了。 创建apps文件夹但是还有一个问题，正如你所知道的一个项目是由很多个app构成的，我们不可能每个app都直接放在项目根目录下，这样会导致我们的文件夹太多了，不利于管理，所以我们可以新建一个apps文件夹，用于存放各个app，这样就好看多了。然后将我们刚才新建的liuyan这个app拖入到apps这个文件夹里面，会自动生成一个init文件。 不过这样做就是有一个坏处，就是我们在导入包的时候可能会出错误，我们需要每次在导入的时候前面加上apps.,这样太麻烦了， 但是我有方法可以解决这个问题，往下看：我们可以在apps这个文件夹上面，右键拉到底部，看到Mark Directory as以后单击Sources Root即可，你会发现apps这个文件夹变成了蓝色（前面第一篇有介绍）。 其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数来，将项目的绝对路径与apps进行拼接，返回一个新的地址。 至此，前期准备我们做完了，接下来便是开始敲我们的留言簿代码了。有朋友问我如何利用Pycharm把代码直接分享（上传）到github 仓库，这里我简单介绍一下。 利用Pycharm把代码直接上传到github 仓库在此之前，你的电脑需要安装git和你必须要有一个github账号，在这里我就不详细介绍这些了，直接开启传送大门，点这里。GitHub的注册与使用（详细图解)或者这个 GitHub账户注册 ;git的安装和配置。 接下来的步骤看仔细了，前方高能，请坐好扶稳。1、点击左上角的File,选择Settings，然后选择Version Control，点击出现的GitHub，在出现的页面右上角选择Auth Type,选择password，然后输入你的github账号和密码，再点击下面的Test按钮Test连接是否正常，下面的Clone git repositories using ssh可以勾选一下，最后点击右下角的apply,然后ok一下就可以了。2、将鼠标移至左侧的Git，单击一下，然后选择git的路径之后，基本上点击右下角的apply,然后ok一下就可以了。放大一下，每个人的不一样，这是我的git安装地址：3、点击开始页面顶部的VCS，然后再点击出现的倒数第三个import into Version Control，再选择出现的最后一个Share project on github，再点击就出现一个窗口，填写你的项目名称，描述，点击share。弹窗让你选择需要上传的项目文件与commit信息输入之后，项目将会上传至github。登录你的github账号，你就会发现你的项目已经上传成功了。至此，关于Django的基本知识就先介绍到这里，下篇我将开始利用代码对留言簿这个小应用进行开发","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（一）：项目介绍","slug":"零基础使用Django2-0-1打造在线教育网站（一）：项目介绍","date":"2018-04-10T09:03:19.000Z","updated":"2019-04-13T09:06:00.180Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（一）：项目介绍/","link":"","permalink":"http://licheetools.github.io/2018/04/10/零基础使用Django2-0-1打造在线教育网站（一）：项目介绍/","excerpt":"","text":"写在前面嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习慕课网时的一些笔记，希望对即将学习Django的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。 项目介绍Django介绍Django是目前Python Web开发中的主流框架，因为它有许多功能强大的第三方插件，你可以很方便的开发出自己的工具包，这使得它具有很强的可扩展性，被许多大型公司使用，如Google，豆瓣，YouTube，知乎，instagram等。 在线网站介绍我们这个网站功能强大，具有完整的个人中心，用户登录，注册以及找回密码等功能。下面分别介绍各个部分的功能：12345678910111213141516171819202122232425262728293031点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。日志记录：它可以记录后台人员的操作情况。其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。 学完过后你不仅对Django的基础知识有了一个比较深刻的印象，还对MTV，MVC模式有了一个更加全面的了解，举一反三，你可以利用它开发各种类型的网站，如电商购物,在线旅游，公司官网，个人博客等其他网站。具体可以点击查看这个基于django的网站（可能要翻墙的哈）。 开发环境介绍环境介绍网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发. 后台介绍采用xadmin进行开发。之前用过django-suit，发现它只是单纯的对admin进行了美化，并没有更高级的功能。鉴于此，我们推荐使用xadmin进行后台管理。它有许多的拓展功能，如下所示：12345xadmin常用插件自定义xadmin插件xadmin的富文本编辑xadmin的excel导入功能。一些开源的django开发库。 到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。 补充资料1、[入门] 菜鸟Django 教程，非常简短的教程，可以快速让你有一个清楚的认识。2、[基础] 自强学堂Django，非常不错的教程，可以没事看一看。3、[基础] 刘江的Django教程，非常适合入门的小白阅读，还有2个例子供你练习。4、[入门] 1元学习《Django零基础到项目实战》，非常不错的基础入门视频教程。5、[基础]用Python Django快速做出高大上的BBS论坛网站，这是免费的视频教程，大家可以试着去练手。","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置","slug":"零基础使用Django2-0-1打造在线教育网站（二）：开发环境配置","date":"2018-04-09T09:03:19.000Z","updated":"2019-04-13T09:20:44.027Z","comments":true,"path":"2018/04/09/零基础使用Django2-0-1打造在线教育网站（二）：开发环境配置/","link":"","permalink":"http://licheetools.github.io/2018/04/09/零基础使用Django2-0-1打造在线教育网站（二）：开发环境配置/","excerpt":"","text":"俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python下面结合我的版本给大家一一演示如何安装。 软件介绍我的软件版本 Pycharm 我这里没有升级，采用的是JetBrains PyCharm 2017.3.4 x64 Mysql ，这里我采用了比较好用的mysql-5.7.21-winx64 Navicat ，这里采用了Navicat Premium ，当然其他如 Navicat for Mysql也可以 Python，写文章的时候Python3.7.0刚刚发布，鉴于其他插件还没有进行适配，我采用Python3.6.4这个版本进行开发。 Pycharm 的安装1、软件位置PyCharm2017/64位下载地址：链接：https://pan.baidu.com/s/1nwhmx2D密码：pc612、右击软件压缩包选择解压到pycharm2017 3、在解压文件夹里面找到pycharm-professional-171.3780.47，右击打开。 4、点击Next。 5、点击Browse更改安装路径，建议安装到除C盘以外的磁盘，可在D盘或者其它盘创建一个PyCharm 2017文件夹，然后点击Next。 6、64位系统勾选64-bit launcher，32位系统勾选32-bit launcher，然后点击Next。 7、点击Install。 8、安装中（等待5分钟左右）。 9、点击Finish。 10、找到安装包解压后的PyCharm 2017文件夹，右击打开。 11、找到lib文件夹，右击打开。 12、选中其中的resource.cn.jar，右击复制。 13、打开安装文件夹PyCharm 2017里的lib文件夹，然后在空白处鼠标右击选择粘贴。 14、在桌面找到JetBrainsPyCharm 2017.1 x64，右击打开。 15、点击确定。 16、点击Accept。 17、勾选License server，在License server address：处填入http://intellij.mandroid.cn/ （或http://idea.imsxm.com/ 或http://idea.iteblog.com/key.php）三者中的任意一个即可，然后点击Activate。 18、点击确定。 19、安装完成。这个破解版的验证码可能在今年10月份左右就要过期，你到时候告诉我，我给你找一个新的破解码。 Mysql的安装1、下载压缩包 下载地址 2、解压到文件夹目录下 3、新建txt文件内容如下： 设置mysql客户端默认字符集** default-character-set=utf8 设置3306端口 port = 3306 设置mysql的安装目录 basedir=D:\\Program Files\\mysql-5.7.21-winx64 设置mysql数据库的数据的存放目录 datadir=D:\\Program Files\\mysql-5.7.21-winx64\\data 允许最大连接数 max_connections=200 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB 注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini 4 添加bin目录到path环境变量 5 安装 MySQL服务，以管理员身份运行cmd 执行 mysqld install 命令 若出现“缺少xxx.dll，请安装微软运行库 http://www.pc6.com/softview/SoftView_104246.html 6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下 运行 mysqld –initialize-insecure –user=mysql 查看data文件夹 查看data目录内容是否正确 7 运行MySQL服务 net start mysql 关闭MySQL服务的命令是net stop mysql 8 登陆MySQL mysql -u root –p 所有命令：安装服务 mysqld install 进入bin目录 cd E:\\mysql-5.7.21-winx64\\bin 生成data文件夹 mysqld --initialize-insecure --user=mysql 启动服务 net start mysql 登录 mysql -u root –p 修改密码： 在忘记root密码的时候，可以这样 以windows为例： 1. 关闭正在运行的MySQL服务。 2. 打开DOS窗口，转到mysql\\bin目录。 3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\\bin目录。 5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 6. 连接权限数据库： use mysql; 。 6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。 7. 刷新权限（必须步骤）：flush privileges; 。 8. 退出 quit。 9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。 Navicat的安装步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。 步骤二 在欢迎画面点击“下一步”。 步骤三 阅读许可协议，接受并点击“下一步”。 步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。 步骤五 运行其余的步骤。 步骤六 点击“完成”，结束安装进程。 步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。 Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV其余版本的可以参考这个链接 Python的安装官网传送Python3.6.4版本下载链接由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接python3.6.3安装教程。 virtualenv的安装和配置使用虚拟环境的好处我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。 安装pip我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹(记住要和Python放在同一目录下)，采用添加环境变量的方法（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path），我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格， C:\\Users\\YC-Jiang&gt;F:F:&gt;cd PythonF:\\Python&gt;cd pystallF:\\Python\\pystall&gt; 然后输入：python setup.py install回车，等待几分钟即可。 最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者Windows徽标+R中输入 pip -—version 小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句） 如果已经成功安装 pip，会提示类似下面的： pip 1.5.6 from C:\\Python35\\lib\\site-packages\\pip-1.5.6-py3.5.egg pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。 如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考这个方法为你的 Windows电脑安装pip: pip安装问题windows安装pip 安装virtualenv在终端输入以下命令：12345678pip install virtualenv virtualenv testvir # 在当前用户目录(win+r %HOMEPATH%可查看)生成cd %homepath%cd testvircd Scriptsactivate.bat # 激活pip list deactivate.bat 其实这种方法挺麻烦的，这里我推荐一种简单方法，安装virtualenvwrapper 安装virtualenvwrapper在终端输入如下命令：1pip install virtualenvwrapper-win 接下来便是创建虚拟环境了，同样采用如下命令：1mkvirtualenv djangoTest # djangoTest为你新建虚拟环境的名称 它会创建在C:\\Users\\YC\\Envs当前用户目录下的Envs目录。 你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME退出激活状态命令1deactivate 知道有哪些虚拟环境命令1workon 直接进入虚拟环境命令1workon djangoTest 如果出现这种情况，表示你已经进入到虚拟环境中。1D:\\Envs\\Test\\django(djangoTest) 再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。 使用镜像安装库有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的镜像,并简单介绍一下如何使用。正常我们下载Django的命令是：1pip install django==2.0.1 (请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:1pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple (注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！) 简单介绍一下各个软件的基本使用Pycharm安装第三方库File–&gt;Default Settings–&gt;Version Control–&gt;Project InterPreter–&gt;右边绿色的+ –&gt;搜索库名–&gt;install package ，不懂的童鞋可以点击下面的示例：Pycharm安装第三库，Django也是可以利用这样的方式进行安装，但是速度不及使用pip安装的快。 Pycharm新建Django项目首先如果你已经打开了其他项目，你需要File–&gt;Close project，然后和没有项目的步骤一样如下：1、点击出现的Create New Project按钮；2、安装过程如下顺序；顺序解读 1、选择使用的是django项目，即可进入右侧页面； 2、Location: F:\\Django\\untitled ,它表示你创建的Django项目的存放地址，以后各个文件就在这里，我这里是untitled文件夹下，这个名称是默认的，你可以自行修改。 3、Project interpreter：表示的是你这个项目的Python解释器，下面7那个则是已经存在的Python解释器，我们推荐自己使用独立的解释器。所以点击3以后，再点击4 ，下拉4你会发现还有一个Conda，但是我们不选这个，选用Virtualenv这个，也就是第一个。 4、接下来我们看5这步，此处的Location是指你这个项目虚拟环境存放的位置文件夹，一般情况下，我们都取和项目一样的名称（前提是你前面没有创建虚拟环境，这里Pycharm自动帮你创建了，如果之前已经创建了，那么选择已经存在的虚拟环境即可）。6这一步是具体到你这个项目用的是哪个Python.exe程序，它一般在你虚拟环境下面的Scripts\\pyhton.exe这个程序。 5、最后7这步你不用考虑，因为我们开发都是采用独立的开发环境，不会用到已经存在的环境，当然特殊情况除外。 然后就出现 完整过程演示1、创建虚拟环境djangoTest12345678910111213Microsoft Windows [版本 10.0.14393](c) 2016 Microsoft Corporation。保留所有权利。C:\\Users\\YC&gt;F: # 进入F盘F:\\&gt;cd Envs # 进入到Envs这个文件夹F:\\Envs&gt;mkvirtualenv djangoTest # 创建虚拟环境djangoTestUsing base prefix &apos;f:\\\\python\\\\pystall&apos;New python executable in F:\\Envs\\djangoTest\\Scripts\\python.exe # 看到没，新的解释器位置Installing setuptools, pip, wheel...done.(djangoTest) F:\\Envs&gt; # 表示已经进入到djangoTest这个虚拟环境中 2、安装Django2.0.112345678910111213(djangoTest) F:\\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple # 采用清华镜像源安装djangoLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleCollecting django==2.0.1 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB) 100% |████████████████████████████████| 7.1MB 2.9MB/sCollecting pytz (from django==2.0.1) Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB) 100% |████████████████████████████████| 512kB 1.5MB/sInstalling collected packages: pytz, djangoSuccessfully installed django-2.0.1 pytz-2018.5 # 提示已经安装成功了，新版本会自动安装pytz这个库(djangoTest) F:\\Envs&gt; # 然后就可以开始pip安装库和包了 3、创建我们的django项目打开Pycharm，新建django项目，个步骤如下：最后点击确定按钮即可，进入到如下页面：放大一下：这里面各个目录和文件的具体意思，下篇文章介绍，这里我就不详细说明了。 然后单击运行按钮运行一下。出现这个界面以后，在浏览器导航栏中输入http://127.0.0.1:8000/ 然后回车，如果出现下面的界面，表明你的djangoTest项目可以正常使用了！在pycharm中按Ctrl+C即可停止运行！ 不知道你注意没有，这个dajngoTest是灰色的， 我们可以右键mark为source Root目录，就变成了蓝色， 这样做的好处就是可以避免包的导入问题，我们在import模块时pycharm会根据设置从而智能提示。如果不mark可能会出现很多我们在pycharm中报红色，但是cmd可以运行的情况。至此，关于djangoTest项目的介绍就先到这里。下面介绍navicat基本使用 navicat基本使用1、新建连接 在出现的下拉菜单里，选择MySQL，其他的类似。连接名和主机名一般写本地地址127.0.0.1或者localhost，端口默认3306，这里用户名和密码我均设置为root，然后点击左边的连接测试，如果出现连接成功的提示框，便点击确定，和这个框的确定。双击这个连接，如果该连接由灰色变为绿色的时候，就可以开始右键它，出现新建数据库，然后如下所示： 数据库名可以随便写，这里我写的是djangoTest这个项目名称，字符集选择图上所示那个，不要选择其他类型，这个很重要！排序规则选择第一个即可，也就是图上所示，这个也很重要，请按照图上要求，否则后期中文编码会出现编码错误。 2、新建数据表双击数据库testdjango使它变绿，然后选中表，再右键新建表。或使用右侧新建表按钮也可以。接下来就是正常的增加数据了。点击右侧上方的查询按钮，再点击下面的新建查询按钮，输入查询语句就可开始查询！3、表的复制粘贴与数据库传输以及数据库导入导出Navicat支持我们把不同数据库的表进行复制粘贴操作同时还支持数据传输，你可以点击工具数据传输即可，是不是很简单。 导入：右键点击运行SQL文件。导出：在需要导出的数据库上右键，可以转储SQL文件也可以选择只转存结构或连带数据一起转存。 至此，关于项目开发环境的搭建就先介绍到这里，下篇我将利用之前建立的djangoTest项目来简单回顾一下django的基础知识","categories":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://licheetools.github.io/tags/django建站/"}],"keywords":[{"name":"django","slug":"django","permalink":"http://licheetools.github.io/categories/django/"}]},{"title":"关于博主","slug":"关于博主","date":"2017-03-04T08:27:48.000Z","updated":"2019-04-13T08:46:42.925Z","comments":true,"path":"2017/03/04/关于博主/","link":"","permalink":"http://licheetools.github.io/2017/03/04/关于博主/","excerpt":"","text":"我，一个正在进击的技术控，相信越努力，越自由。非常高兴能和大家在这里相遇。这是我的个人博客，搭建的初衷是广交朋友，广学知识。那么你肯定觉得我是一个技术大牛（哈哈），其实我只是一个技术控，对那些有趣的技术非常好奇罢了，离真正的大神还差一个”地中海”式的发型。目前主要从事前端工作，但是非常喜欢java， python， kotlin等编程语言，所以你如果也有此爱好的话，我们不妨交流一下学习心得。今后我会在这个博客上更新一些有趣的技术和分享我学习，工作，生活上的点滴瞬间。你不努力一下，你就体会不到被人追赶的滋味.生活不只有Coding还有诗和远方~~~喜欢旅游，看电影，偶尔还玩会游戏（最近在玩王者荣耀，尽管队友坑，但我也坑。。。）对了，有一些技术上的问题可以给我发微信消息（事情多，不能立即回复，甚至忘记回复，还请不要生气）。我在很多社区都有账号，需要联系我的朋友可以关注并加好友呃…… 邮箱: 2810706745@qq.com QQ: 2810706745 微信: ZY20160801 新浪微博: 点击这里 GitHub: 点击这里 声明： 1.本博客文章只是为了个人学习以及在一些技术型社区发表，不做商业使用; 2.如其中引用到其他文章经典的部分，本人大部分都会加上引用或者在文章底部的参考文献中注明，如果不慎引用了你的文章但是却没有注明的请联系我; 3.博客内文章欢迎转载，但转载前请联系我，保留出处和作者，不做商业使用，谢谢~~~","categories":[{"name":"about","slug":"about","permalink":"http://licheetools.github.io/categories/about/"}],"tags":[{"name":"关于博主","slug":"关于博主","permalink":"http://licheetools.github.io/tags/关于博主/"}],"keywords":[{"name":"about","slug":"about","permalink":"http://licheetools.github.io/categories/about/"}]},{"title":"你有什么话，想对我说嘛？","slug":"你有什么话，想对我说嘛？","date":"2017-03-03T01:29:53.000Z","updated":"2019-04-13T09:11:30.855Z","comments":true,"path":"2017/03/03/你有什么话，想对我说嘛？/","link":"","permalink":"http://licheetools.github.io/2017/03/03/你有什么话，想对我说嘛？/","excerpt":"","text":"","categories":[{"name":"liuyan","slug":"liuyan","permalink":"http://licheetools.github.io/categories/liuyan/"}],"tags":[{"name":"留言板","slug":"留言板","permalink":"http://licheetools.github.io/tags/留言板/"}],"keywords":[{"name":"liuyan","slug":"liuyan","permalink":"http://licheetools.github.io/categories/liuyan/"}]},{"title":"爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取","slug":"爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取","date":"2017-03-02T11:09:47.000Z","updated":"2019-04-13T08:16:34.714Z","comments":true,"path":"2017/03/02/爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取/","link":"","permalink":"http://licheetools.github.io/2017/03/02/爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取/","excerpt":"","text":"说在前面在上一篇中，我们说到某个内容从属于多个分类(即它有多个标签)，应该如何把它所属的全部标签都爬取下来呢？这一期博主就将教你如何实现这一功能。我们以猫途鹰这个网站为例，向大家演示一下。 爬取内容如下图所示，我们需要爬取该图中所示景点的信息，具体包括：标题，封面图片，分类等信息。 知识补充get()方法的使用我们在上一篇中，获取标题，地址，单标签的文本信息采用了get_text()方法，但是如果要获取图片呢？我们是不能和之前一样，要采用一种新的方法：get(‘attr’)。这么说你可能有些困惑，举个简单的例子，看下面的代码:&lt;a href=http://licheetools.top&gt; share my life with you &lt;/a&gt;如果你只想获取网站信息，只需要.get(‘href’)即可。获取图片只需要.get(‘src’)因为图片的格式一般是这样的：&lt;img src=&quot;http://licheetools.top/index.html/first.jpg&quot; alt=&quot;第一张图片&quot;&gt; stripped_strings的用法在这里你可以认为是高级的get_text(),它这个可以同时取出多个文本，待会就采用这个来爬取多个标签。 字符串的格式化字符串的格式化通常采用{}和:来代替传统的%方式，具体如下：1、使用位置参数从下面的例子可以看出位置参数不受顺序约束，且可以为{},只要format里有相对应的参数值即可,参数索引从0开，传入位置参数列表可用*列表；12345678910111213141516a='my name is &#123;&#125; ,age &#123;&#125;'.format('joe',18)print(a)my name is joe ,age 18b='my name is &#123;1&#125; ,age &#123;0&#125;'.format(10,'joe')print(b)my name is joe ,age 10c='my name is &#123;1&#125; ,age &#123;0&#125; &#123;1&#125;'.format(10,'joe')print(c)my name is joe ,age 10 joedata=['joe',18]d='my name is &#123;&#125; ,age &#123;&#125;'.format(*data)print(d)my name is joe ,age 18 2、使用关键字参数采用字典当关键字参数传入值，不过关键字参数值要对得上，可以在字典前加**12345678e='my name is &#123;name&#125;,age is &#123;age&#125;'.format(name='joe',age=19)print(e)my name is joe,age is 19data=&#123;'name':'joe','age':19&#125;f='my name is &#123;name&#125;,age is &#123;age&#125;'.format(**data)print(f)my name is joe,age is 19 其他参数我在这里就不介绍了，你可以看这篇文章python之字符串格式化(formate) 代码内容123456789101112131415161718192021222324252627282930313233#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/04/15 20:15# @Author: lichexo# @File: test_05.pyfrom bs4 import BeautifulSoupimport requestsimport timeurl='https://www.tripadvisor.cn/Attractions-g60763-Activities-New_York_City_New_York.html'urls=['https://www.tripadvisor.cn/Attractions-g60763-Activities-oa&#123;&#125;-New_York_City_New_York.html#FILTERED_LIST'.format(str(i)) for i in range(30,1140,30)]def get_attraction(url,data=None): web_data = requests.get(url) time.sleep(4) soup = BeautifulSoup(web_data.text, 'lxml') titles = soup.select('div.listing_title &gt; a[target=\"_blank\"]') images = soup.select('img[width=\"180\"]') cates = soup.select('div.tag_line &gt; div') for title,image,cate in zip(titles,images,cates): data=&#123; 'title':title.get_text(), 'image':image.get('src'), 'cate':list(cate.stripped_strings), &#125; print(data)get_attraction(url)for single_url in urls: get_attraction(single_url)print(urls) 运行结果由于抓取的内容太多，这里只呈现部分信息。12345678910111213141516171819202122232425262728293031323334&#123;'title': '曼哈顿天际线', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '大都会艺术博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '艺术博物馆']&#125;&#123;'title': '中央公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '公园', ',', '景观步行区']&#125;&#123;'title': '9/11纪念馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆', ',', '景点与地标', ',', '纪念碑与雕像', ',', '古迹']&#125;&#123;'title': '峭石之巅观景台', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['观景台', ',', '瞭望台']&#125;&#123;'title': '布鲁克林大桥', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['桥梁']&#125;&#123;'title': '圣帕提克大教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['教堂']&#125;&#123;'title': '百老汇', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '大中央车站', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['建筑', ',', '景点与地标']&#125;&#123;'title': '布莱恩公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园']&#125;&#123;'title': '纽约公共图书馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆']&#125;&#123;'title': '世贸一号观景台', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['观景台', ',', '建筑']&#125;&#123;'title': '史泰登岛渡轮', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['轮渡']&#125;&#123;'title': '高线公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景观步行区', ',', '公园']&#125;&#123;'title': '帝国大厦', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['建筑', ',', '景点与地标', ',', '观景台']&#125;&#123;'title': '自由女神像', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['纪念碑与雕像', ',', '景点与地标']&#125;&#123;'title': '洛克菲勒中心', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '建筑']&#125;&#123;'title': '现代艺术博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['艺术博物馆']&#125;&#123;'title': 'The Oculus', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '无畏海空宇宙博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '阿波罗剧院', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['纪念碑与雕像', ',', '建筑']&#125;&#123;'title': '华盛顿广场公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆']&#125;&#123;'title': '圣保罗教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '圣约翰教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园', ',', '景点与地标', ',', '周边']&#125;&#123;'title': '河滨公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': 'Studio 54', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['教堂', ',', '圣地与宗教景点']&#125;&#123;'title': '埃利斯岛', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['圣地与宗教景点']&#125;&#123;'title': '切尔西市场', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': '商人之家博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园']&#125;&#123;'title': '哈德逊河公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': '艾利斯岛移民博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '犹太遗产博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['历史博物馆', ',', '景点与地标', ',', '古迹']&#125;。。。。。。 下期说明哈哈，今天总的来说还是比较简单的，容易操作，下期我们准备爬点不一样的东西。。。 今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。","categories":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}],"tags":[{"name":"爬虫实战","slug":"爬虫实战","permalink":"http://licheetools.github.io/tags/爬虫实战/"}],"keywords":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}]},{"title":"爬虫实战系列：（一）58同城-转转商品信息爬取","slug":"爬虫实战系列：（一）58同城-转转商品信息爬取","date":"2017-03-02T02:02:41.000Z","updated":"2019-04-13T07:17:03.001Z","comments":true,"path":"2017/03/02/爬虫实战系列：（一）58同城-转转商品信息爬取/","link":"","permalink":"http://licheetools.github.io/2017/03/02/爬虫实战系列：（一）58同城-转转商品信息爬取/","excerpt":"","text":"说在前面本系列教程记录了博主的爬虫之路，可谓是有苦又累，有甜有笑，如果你在看过本系列教程之后，对爬虫有独到的见解或者浓厚的兴趣，不妨留言和博主进行交流学习呢，我在这里等你来玩~~~ 爬取内容如下图所示，我们需要爬取该图中所示商品的信息，具体包括：类目，标题，价格，浏览量，所在区域等信息。 代码内容字典属性法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/4/10 15:15# @Author: lichexo# @File: zhuanzhuan.py# @Website：http：//licheetools.topfrom bs4 import BeautifulSoup #导入需要的包和模块import requestsimport time #用于控制每次爬取的时间间隔user_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'headers=&#123; 'User_Agent':'user_agent'&#125;time.sleep(4)def get_attrition(url): #定义函数，便于调用 #url = 'http://zhuanzhuan.58.com/detail/967678151307198471z.shtml ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp;metric=null&amp; PGTID=0d305a36-0000-1792-ee6b-8d43de6b3765&amp;ClickID=7' #此处URL前面的(#)不可删除，否则就出现函数调用错误，因为后面调用的link已经替换此处的url web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') casses=soup.select('#nav &gt; div &gt; span &gt; a') titles=soup.select('div.box_left_top &gt; h1') moneys=soup.select('div.price_li &gt; span[class=\"price_now\"] &gt; i') addresses=soup.select('div.palce_li &gt; span &gt; i') for cass,title,money,address in zip(casses,titles,moneys,addresses): data=&#123; 'cass':cass.get_text(), #文字调用get_text()方法 'title':title.get_text(), 'money':money.get_text(), 'address':address.get_text(), &#125; print(data)def get_all_item_info(): url='http://bj.58.com/pbdn/' web_data=requests.get(url) soup=BeautifulSoup(web_data.text,'lxml') href_list=soup.select('a.t') for href in href_list: link=href.get('href') if 'zhuanzhuan' in link: #除去网页中不需要的精准推广部分 get_attrition(link)get_all_item_info() 列表索引法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/4/10 15:15# @Author: lichexo# @File: zhuanzhuan.py# @Website：http：//licheetools.topfrom bs4 import BeautifulSoupimport requestsimport timeuser_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'headers=&#123; 'User_Agent':'user_agent'&#125;time.sleep(4)def get_item_info(url): #url='http://zhuanzhuan.58.com/detail/835458751461588996z.shtml ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp; metric=null&amp;PGTID=0d305a36-0000-123c-630d-da6c51789948&amp;ClickID=1' web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') title_list=soup.select('h1.info_titile') title=title_list[0].text #该列表有且仅有唯一一个元素，采用get_text()将其取出 price_list=soup.select('span.price_now &gt; i') price=price_list[0].text views_list=soup.select('span.look_time') view=views_list[0].text area_list=soup.select('div.palce_li &gt; span &gt; i') area=area_list[0].text cate_list=soup.select('span.crb_i &gt; a') cate=cate_list[-1].text.strip() #使用strip()函数来消除换行和空格的影响 data=&#123; 'title':title, 'price':price, 'view':view, 'area':area, 'cate':cate, &#125; print(data)def get_all_item_info(): url='http://bj.58.com/pbdn/' web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') href_list=soup.select('a.t') for href in href_list: link=href.get('href') #获取元素的某个属性采用get()方法来实现 if 'zhuanzhuan' in link: get_item_info(link)get_all_item_info() 运行结果 知识补充soup.select ( )选择标签问题你只需要在浏览器中鼠标右键点击审查(Ctrl+Shift+I) –&gt; 找到字段的具体代码 –&gt; 右键选择Copy –&gt; Copy selector即可得到你想要的代码字段。为保证你是否正确捕抓到相关信息，你可以鼠标右键点击查看网页源代码(Ctrl+U) –&gt;然后再按Ctrl+F调出搜索框 –&gt; 将你刚才捕抓到的信息进行复制黏贴并回车 –&gt; 看右侧的黄色代码区是否是包括你所需信息的最小高亮区，不是则往上一级父级标签查询。 get_text 和 get()的使用问题get_text()，是返回选择的标签文本，具体可以查看参考文档;而get(‘’)，这是选择标签中的属性(也就是里面有=符号的左边)，比如在&lt;li&gt;&lt;a class=&quot;rrence intnal&quot; href=&quot;#next-siblings-previous-siblings&quot;&gt;&lt;/li&gt;之中，选择li &gt; a这个标签之后，则可以用get(‘href’)获取其中的链接。 下期说明哈哈，今天的内容是不是很简单，不过你是不是有一个疑问，就是如果某个内容从属于多个分类(即它有多个标签)我们应该如何把它所属的全部标签都爬取下来呢？那么下期博主将教你如何实现这一功能。 本教程适合有一部分Python基础的同学，小白童鞋很抱歉。。。 今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。","categories":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}],"tags":[{"name":"爬虫实战","slug":"爬虫实战","permalink":"http://licheetools.github.io/tags/爬虫实战/"}],"keywords":[{"name":"spider","slug":"spider","permalink":"http://licheetools.github.io/categories/spider/"}]},{"title":"行者有梦，千里亦趋","slug":"行者有梦，千里亦趋","date":"2017-03-01T02:14:19.000Z","updated":"2019-04-13T07:09:58.592Z","comments":true,"path":"2017/03/01/行者有梦，千里亦趋/","link":"","permalink":"http://licheetools.github.io/2017/03/01/行者有梦，千里亦趋/","excerpt":"行者有梦，千里亦趋，人生几何。","text":"对不起，此文章为加密内容，只有管理员才能查看. Incorrect Password! No content to display! U2FsdGVkX1/I1b6wLC6j2gc6ZcNG+5VxM8pZlpXXsfe9Wr8SNQe3CQIYz8yhdTVvHJnVocR/I6zbtoK8n9QraT135iV04n8OyUXgwfzP6qSx6YPc0Efupjcj2wGLpVQeCodvyC6qDfN77PsZ261niU7lovDzk6SBSm7d5WcEsae+WvhSw1mJT1skE9361V02bVnrbeN2Owow28qZBXUzcy7Be5lOxtDT0N0W154wRVRC8Ttcfg1KKP68EH2NuDnVT36gUvQLV5FBt2d2XKfBRD2LrCQYvuOArZRlXgmQTOx0QszgI0XIIuLbym3Jc4q/aFgRSmZdZhNq+qjsSfj9raI5FQ0e277KgL2t0dzvVl8gIpa2hsGOakBgEzezCg6XpF6+xQKNp0STJtcHqHn6pSSFkHaZeA9GFElWpUgfAOsyBrfscD2ZHkWQRfX5xNYHqksNZbdFUb1DZLyBwqdvFO8nEwmNPIe7PLqpZhVo4ZmSM6veDeW9DfwgIlkR5x5DK7l8SVhQjAw4XErpkV+MLsTOZa5zhldOQ+7pJTf65xvTnJA/3z6FJYAOonAYAYLDmTMuN7gX8ezM6Jsg8oCywD8XN2CjyQ6MfMDTTyqIAviKFLNl2DxTZ60v33TlDhGl0L3nASNXBngPqMkl2cwAvFEeitZM1l/CjDTjwUZKQZe+d6XetvCOXmFcpKdux29kqYMr+ZqvJ129B1/vxmxE6qSNYC9K2jmvNLNOBiNPFi5REiS7BTH7GkuAOGBatAYWRvWbMK1RZNdlIuJeaa3wCzH26uQq3TCv0m8UkvZfhXmW/mTv3RvsZlZSUYvG6lPrkl2pfCnZDoiCJt7sAu7HhyA52rf9gfNMgE0EkgzzDAWPDcvUFum1SP7X2VQliJzpkbvbwdf5tOeZ6/0kU0ibz5n9yQ5dmXgN/hKWzs/yX3aZtN+b4wu1elGJn07qkxWQemy1Mb/lx2cLRcghotvLSkjDDsY2jolDxPTnSgR7Bsu/jpHy21gv74yoeCkY9GixThJCXRe0RNAkD0WPMh4u37h+1Lbe26487kyh2XMDWB5NtaVrZBt8nwq+hQqpFHP3PJrG54Bn2vxl4FXjAmNo8BIE0+DCufd1wwzzHV1+W2TQRyBMYnFwRGkQru/CQfIh8xIalYHAJW7IS4UE+cb06hfdJSUOiKY4O8VOp2Ca6ge7HwLq3utbdYvkItYwJeEM2VJ3Jr9BIvfm/fy4l8Xf822CZQ/7Q1GDrBzEmlfXdbJ2HN1MXfi5V9XBfLt/RXWkkDEe+hHaHMfU/7We96W6jKtAvXCeHRR4nPGBBUWtOpWUpgWxkXtIv86YEdnAt2hWL8/un+dqP5MWtONbAJjebh7HFuK9xLjIs5htKCEuN9DsHl9+jPk7i35ivmGlCXo0kJmPnCZLyOESEfyPQWsulngo5FXTSa6/PT0TBff3++OzhOTs5RIP0vLzhan/1ZHxkIFdFNCgn3+usEt3BwJBQ8rlBTjMQ+n7sD5Zvqa5X0A9IGg0PmRk47EQ6bSGflydeWE6oKHFSXsAmSPbdCcgeZSKXwY+XDaidQw58nrc6Euavs3zIOrE4D2ABBY2fPL8aiPJaE2f/DRw2YbQvJRv+Hf1oxyTddBUDkmNj4CxMzZS6hVjAJD/PSfoi15XyUx/bsNdHbPrqIbJEcvRscs4vPZRTXXDvvzV8doSnTbrdKKQu9JLYF0AYfyo2mKaZMQvbd51VA/r1SwrCFnFRU039In+wT4LZiodE9TAqBNaoZ/I563pJ48SKqjA0wge/IY3IA5/VPatQ6cLWCZgWTKPfRyKGHFiM8X4Ih+wcQrVxHLVFW4oaIJWRKIZefSVJgRj4LT5tXbFaUwpd+to7AOhgwC/kyTcwdpnuc62PUWkszs1m8XfFnAlhYgBsUJBKOMh0haiThYI494JAERxqgh1vl/ejh7M0SNDmJm0YmWguLvykvPXv0huoJSQNTl6J0s2fyiUS8lukt2N4CPY55U3hPXhisxZ4+JMbLwjo5H+NFNkE4Iyk3OT4mA1nb69a6h8XhvDdr9JA4roSCTHB+fAXa1Ps7XOgyKiqC2K7lx3VkBBZ4C2dAa9kA6FEu2AOuMRJBmXa9tG8kqqdMz2GAituLZ+SHE/QZfdldCvk7Q0SUpGU7c1EZhBT8ryE9F1yJGi0VbHvEM7dmGBLZzNFcN+xomkZ+BmuteAGzKNsliCJYJHPX0yD4y4K1GV+h9VglMbuHfJiCaEDHVsinfuBXhGQcYeOIt7W8V50/9KjuhllJ5Mt+kINPEf974lSMyUO8I9HVqrTvMc6NScYEOGaCQll6tZ0alLEtlcSOjsczxJjOyhvx0Fl5lVao3rm08UPYgFc728q0u05Y76KagiMp/aEu9LnmfYYnmVls+1ZduTdk9qZiR3H4lR1OWeTeUE18vwCu9PxVZKG6bUe/wUKRJp5G96nI8JeeyyCjlE7jsK67eRZbHGpWIJmPpvgPK+rWsxe1kNy9/3+wqXWYE5EtLcTnZSPRTQDU3eKuOt4M2kziEMo5zzR211aUHNpetgJB4FFmIDxeK0/Aj5pYkFBphM8q7drm66ckUIGv/u0c9BjlT+MMZ+gc/RlJ44T4lqCWM0/Rs7IvGCzcpK4SYDIsxlqFu3zo0AZzcMJXt6zP6RFt6Dz6RJGvDQxaQG3KCJttZB2dpQXMOXBPZImIGsTvo6eRgWVfODMQvg7gk3nebUgpOrtUAsUnIsx2/ur00tgxR2WcKYAJYdcc4rXARoFYlhbA7m5b8QInJb4G9m4hac8/JvKssn5I7o/g7gep3FKoZp5Jy2Cj4QchY0tuBVKLddT88nrGaoU8bzK75yNMSv9v2FQVD1YV9MHCTVLy/qiFeG2p+EVruc0t5T/VUJVthZ2PccTvn+AOMVzm9/HLb+bhzpeW1USiJzOsPJ03mY6123LcICmeTZ9GUQU/YnYsiJdaM803kTxTRyeXO3jesI/H9xkx7mH09vpKEZhaXLyhi9/Mk1MCSvmaURdo2SYG4VAOa4gnNf9SJJl07tELivGRtH9A66J0QgtH2B7ChS3RyHmESDN6fTQu1wffSk/6uLuRpsYdP4glaDP2zjwm78W6XHdlhLCEJAnVugxVlRdgmgHvt0eQwlsFA0dtYLYL1PEF6LvXO/3pF2aRbf2h5QC6p88YN588iwNzOl7yEJNee6W8euGNDsRfdd4JF4BuhGED6zO/FMJZS3qagwwJS+GatakLOGXmNg+hlC40aMlPSBCl5hlpbC1ebxWikDFXuwyURNSeISU4b7DCU7oXwyjkr8mYyMo+qSOr15W6GiYFaBblfemTr1G98e0/5Cac6X3PXFBqlIR0tzIAG+49P7y6W2u9Qvum1qogxITsyBRnm84VxusM52o8yGG1sD/+aB1izBjZUztxrXLfnMX9V88RGNZc/Y02wVMwuhVR4HxIOoAau98YaqUDhVCejkj+h8NyC4cIscc5+TTNTQxxVhLO/bswAM91i9gQgujzdX1IS6a+COfE0jqD12tXfXDOWBuaIOaMiacEYtPuBhtAX0ZV2u5ClvjdIpFt12Rp+jG1nN/fGHqLf9nrJaUeNLWPuebZENviSaLvo9cTWVayRtiw5HANV8BS9YHy5hMyE5d0D+Qfrp5Jwkmc4kpIeQGX3FcCM8EXzkDhc/2Oh9fXvrB/kjFEpF0vVET4t07UoFpC5F8CrwbC1kWfW9sqgsGG465gXc/5YoxXPtuHM95zXfXWb87UX4C+Oc6qILiT95A4b1DB0zCPubdBzpXmaWnbHDLjGZgr/KsJluxstsGuyXCCuZ36cNoviAK1F/CRrWaOgSMi0bNMLIT2/3WcJid+inijf01m72WCwwpiXT0b9e5UxNxGRxqpu+c2OVnO8arRdIB8isNKfTsyh/qyS1Q2vPG7+C3UfLhUUTuQvKMrcjxqFyT67JX483mRGMCHb8vQv9JSCAYQ+Xes/bioft/5zy/T4c+RZYf1hzYHAHDvjQLTYu1YCtSDRadEQ0PxaXHZQiOaV9q22xVO6z+6qVlALdCYP+EbC4a/uMCwXPtX9EXCiRBCxbfjH42DzHZ3Y/sKwRXtPpy0BW9SAu9pzy1u8peFNY75FntXl270KRIQUudvX+9fK80gb2Wf5K+4aYDOd6o/hO8HaL2OE5jdbn8Eql/F5RxDanHV8YEPHwbb4xvNTeUti4xxDgPcfwN9wFF7PWGl/tLaidUpN38thoN13AZm94qD6PSimjD39P5/FCGQRXTmYGxtrTecsNLlcX4Caf2BrM1WX2l7xAB1fXCZSb+vO5BI/FuXjljzJD22AmmyHoMKbO0j+iNC6ervZ/MfUuG4iom/VN+UJ+HVk0rjhlFC4oFcVvkr0jGbzM/82tTwToNYtOq6i3DZ4BU2Z0eBBw49bQXuUYt0YkazRqkhGBb1goq9lABtd+VyTxXJykQNP85eRaodxoBdw2T3Gs8f29eFdsS0bUATSc6zCPUMGcrvymI1HTIOT9i1Z1tVhDzJBvbpvWlMzdvKi/X5amwvuwZ/at+JrZeMnCO92rC8Drae7j0Mdirj4hlaqxI0ZoksmfIZW7eLI9EGLnNEKRXk0LJETUhP9OMCSXZfZm+tbZmt9kpyYTMa6HrvrIqtc5HIcT3C7B1bwKDRvcjemtCBGXGBdZRzsqygJFLfnsX/Ks20ITupev4/vTRfkA0kHkcHA88EAMNyIKwBedi9YD/PABl0+Q6ZI34c3TMbMDU5czaIYeyrlBap0jk00YG/OV9R1PeDr4hdEhgSld+NEqaNH5DivnTa8cvOxYCeC64kLC4tzPFcXlj9cykXcq23taFcP8YjVxfp87aenIw9/l4kRbF4jFsrusZZKa4YGRv6Ing5n/DFymMUAWZsjXeqhs9Zoyz8+QwKQcIfPEIBCJCowOQSY963H7iWFBJAo+121h2ubHzsF47CgqM4r3fe56ekJ/X0M8Xb+hPwkgT09OgvcBoQ67/qYmG+VAYNpYNi8f2hoacqwgcBAAwtukOFeN9pLyQNmZXvDqCAYQP73i64Ml4P3prf7k3+SiwuaO4CQvJVEqaMwVvpu4XA1w+7Q7cy3XWG4CF0lvCXLYbVW/rJdM5VFJb+vojcjyhKEE25z0yD5v5hjeaYj+r+33YDrOTpXDv47mIDwSVuUQ26CtlaWROPRwEGhMlXzR8VjYLzDvlRLr71W7lf7muOwr7zvVbu7An3j4rGwQJJQ1CuHBZlfdyaqXutlfa101TlGFcAI8J2gZnZyiQOtOZ4YiuzoSObJdU4LmvSzikKnIcc0RJ5fPlVx8IpcNwbvjqpeQ4QoOP6xN4rPUKAFrdXLi8QQ0uj+nDa+a3zM4n87bYNTOkIUpxcJd5NleMPbnNOHf8ZW7REo3RFnEnISU+tFk6FzUOxcCccBz4qhIbkAEwLJRCUoKHUAfmOzhvNzwU9rJd16hGYRK3piWYn+2lud9uy7pC+ieNVllYv0bajZmdHhGVG9TUiIRcI2gXoQ4ljs4OfeQYIgUPHSJ4UfmNX3r+KLotJ+9FjUlUWD9YOyxQcGbPW1stcxiXToljqhy5f+CC+e5LVkglEaJG95omoU3pyqc+v8Jdzm6A0msn/91B7P6LqL1i7qRJQjrTat6NJjaCO4Anh8ruEU1OqRFWIoA0vmdJLfxgdliN1YaNyiY6j4TCxvgnkxGxX6McyiiUDCL3eU1Ucz9rePkmmCpT8SwKHfgjiICiYTxeCjiNsJ5xvtLGds1Vu0MV7GSZEhZu4RaqgbrXmGSmdir/qS1ti2RbDMgEwjdqgOygyzHP3ReuksKGgAbwzEFmQB+JE6cMRoaJM692v5r+ZHEdIogpgOMzh9akD4b+r3ZFqyeOTD9ao6l7qbTMHfJ0KpzBnX/HtNoSOjSDMD9Fjd03Uz0IQfMxCwRcJn3IXgtN7NnHBBXlEypwitFjzXLMlf2ljiUmrniaZo4egnK4scqMm2dREDY05gj8uJA7N1Js5h82hFW6aG9wXN63otRs6QA8J2d28IAOPT9k+kSXk2xlxNy/gECwxCWufYGFsUetgEYx+BAvwfWCigIG4/uIxfUgh75h7dMgD3N32MHHemLFKwGZfedUmeh9xV7g35pwkgcYVEIX2DLldJc72Osp0/EE79Wpsdq1zlbbqJNazo/7OZJ3TlN/GfVQNLlBJZeYAinYIat61Uvc39ZNVp4u90yl1ZY5r0hRFCPnobd7ng6qrvXG7M6DVxwDLPAWJKHOVqATJ2h0X8cMmnhp3B1f80dt7bewc2swX79+WdH8ymut4hVR7d6etzEFv0CfCK3sGabEHV9C4qBMDLJ+Um6x4Tz+3c6LwExdh4um0ETIVH/1eOLejRJqRVEvzcavmeZtahHlkcelO0vO5eO25hz8BK3/gTIGZ3v6f2THHbiav8+/AtTHvyEbznbQLGdXuZAnQ7FzekWzD2wRyQgL+cw8xiaTDbJvcKSUHkRD21HsuuuV3Jty/a4HzVSVXc4vLqKq8mpM/pT2uKzCIdWnrhaYXK6l5VZoe6V29HYfBzpof8DsuDLMd/btpX0L4WRsMqks/SK6WZTL6p1Af5lUmvRXI7VWtWOoSRkadVwOwHUkNYcRounLPWFbim9m3jJuMzKOaJfkf7q+odjf7Uqn13QH1VfMXKxeTCnWhxdyhRQY8vMVDeqEWjs5LO1KvAuPgaX6+j3CNou3eGyVWmEmC+EgrwIEn0tAFi2+9GOglfGlDtv/PCVZmqENY//0Zk=","categories":[{"name":"life","slug":"life","permalink":"http://licheetools.github.io/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"http://licheetools.github.io/tags/life/"}],"keywords":[{"name":"life","slug":"life","permalink":"http://licheetools.github.io/categories/life/"}]}]}