{"meta":{"title":"编程思录，记录思考","subtitle":null,"description":null,"author":"Envy","url":"http://blog.licheetools.top"},"pages":[{"title":"分类","date":"2017-02-22T00:39:04.000Z","updated":"2019-04-13T08:39:04.005Z","comments":false,"path":"categories/index.html","permalink":"http://blog.licheetools.top/categories/index.html","excerpt":"","text":""},{"title":"data","date":"2019-04-13T08:44:34.000Z","updated":"2019-04-13T08:44:34.957Z","comments":true,"path":"categories/data/index.html","permalink":"http://blog.licheetools.top/categories/data/index.html","excerpt":"","text":""},{"title":"font","date":"2019-04-13T01:37:12.000Z","updated":"2019-04-13T01:37:14.951Z","comments":true,"path":"categories/font/index.html","permalink":"http://blog.licheetools.top/categories/font/index.html","excerpt":"","text":""},{"title":"go","date":"2019-04-13T01:38:26.000Z","updated":"2019-11-04T13:03:21.269Z","comments":true,"path":"categories/go/index.html","permalink":"http://blog.licheetools.top/categories/go/index.html","excerpt":"","text":""},{"title":"life","date":"2019-04-13T01:43:45.000Z","updated":"2019-04-13T01:43:48.121Z","comments":true,"path":"categories/life/index.html","permalink":"http://blog.licheetools.top/categories/life/index.html","excerpt":"","text":""},{"title":"付费内容","date":"2019-04-13T01:38:53.000Z","updated":"2019-04-13T03:12:55.310Z","comments":true,"path":"categories/money/index.html","permalink":"http://blog.licheetools.top/categories/money/index.html","excerpt":"","text":""},{"title":"你有什么话，想对我说嘛？","date":"2017-03-03T01:29:53.000Z","updated":"2019-04-13T08:12:40.356Z","comments":true,"path":"categories/liuyan/index.html","permalink":"http://blog.licheetools.top/categories/liuyan/index.html","excerpt":"","text":""},{"title":"python","date":"2019-04-13T01:38:16.000Z","updated":"2019-11-04T13:02:58.081Z","comments":true,"path":"categories/python/index.html","permalink":"http://blog.licheetools.top/categories/python/index.html","excerpt":"","text":""},{"title":"java","date":"2019-04-13T01:38:05.000Z","updated":"2019-04-13T01:38:06.242Z","comments":true,"path":"categories/java/index.html","permalink":"http://blog.licheetools.top/categories/java/index.html","excerpt":"","text":""},{"title":"spider","date":"2019-04-13T01:38:39.000Z","updated":"2019-04-13T01:38:39.430Z","comments":true,"path":"categories/spider/index.html","permalink":"http://blog.licheetools.top/categories/spider/index.html","excerpt":"","text":""},{"title":"关于博主","date":"2017-02-22T00:39:04.000Z","updated":"2019-04-13T07:44:35.475Z","comments":true,"path":"categories/about/index.html","permalink":"http://blog.licheetools.top/categories/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Go语言学习笔记（8）：函数式编程","slug":"Go语言学习笔记（8）：函数式编程","date":"2019-05-16T04:45:09.000Z","updated":"2019-11-04T14:06:38.967Z","comments":true,"path":"2019/05/16/Go语言学习笔记（8）：函数式编程/","link":"","permalink":"http://blog.licheetools.top/2019/05/16/Go语言学习笔记（8）：函数式编程/","excerpt":"","text":"函数式编程本篇来学习Go语言的函数式编程，函数式编程不是Go语言独有的，像Python也是支持函数式编程的，不过Go语言支持函数式编程主要体现在闭包上。 Go语言闭包应用：1）不需要修饰如何访问自由变量；2）没有Lambda表达式，但是有匿名函数 （其实两者差不多）。 接下来谈一谈函数式编程和函数指针的区别，其实我个人更倾向于函数式编程，因为在函数式编程（如Python）中，函数是一等公民，因此参数，变量及返回值都可以是函数；而像函数指针（如C++、Java）函数只是一个名字，其实就是指针。 在函数式编程中，有一个高阶函数的概念，也就是说一个函数可以作为参数传给另外一个函数，或者一个函数的返回值为另外一个函数（若返回值为该函数本身，则为递归），满足其一则为高阶函数，如python中的map，reduce，filter等。还有就是闭包这个概念。 当然可能有人要拿出”正统”函数式编程来说话了，需要满足两点：1）不可变性：不能有状态，只有常量和函数；2）函数只能有一个参数。 这个”正统”函数式编程要求里面不能有变量，只有常量和函数这两种，甚至连选择、循环语句都不能使用；更过分的要求是参数只能有一个参数，之前的参数列表都不能用了，太特么变态了吧。由于Go语言设计时要求按照了这个规定，但是实际上灵活性很大，可以不按照上面”正统”函数式编程的要求来。 下面结合一个例子说明Go语言的函数式编程：计算1+2+3+…+9=?我们先用普通的方法，接着使用函数式编程，然后试着体会两者的不同之处。 普通方法实现的代码如下，这个其实非常简单：12345678910111213141516package mainimport &quot;fmt&quot;//定义求和函数，测试函数式编程func test(n int)int&#123; sum:=0 for i:=0;i&lt;n;i++&#123; sum+=i &#125; return sum&#125;func main() &#123; fmt.Println(test(10))&#125;//运行结果：45 接下来看一下如何使用函数式编程来实现这个功能：123456789101112131415161718192021222324252627package mainimport &quot;fmt&quot;//定义求和函数，测试函数式编程func functionaltest()func(int)int&#123; sum:=0 return func(v int) int &#123; sum+=v return sum &#125;&#125;func main() &#123; a:=functionaltest() for i:=0;i&lt;10;i++&#123; fmt.Printf(&quot;0+1+...+%d=%d\\n&quot;,i,a(i)) &#125;&#125;//运行结果：0+1+...+0=00+1+...+1=10+1+...+2=30+1+...+3=60+1+...+4=100+1+...+5=150+1+...+6=210+1+...+7=280+1+...+8=360+1+...+9=45 其实上面就是闭包，在函数体中包含自由变量和局部变量，这里的sum就是自由变量，v是局部变量。 下面是我从网上找的其他语言如何通过闭包来实现相应的功能：1）Python中的闭包：python原生支持闭包、使用_closure_来查看闭包内容1234567def test(): sum = 0 def f(value): nonlocal sum sum += value return sum return f 2)C++中的闭包：过去stl或者boost带有类似库；C++11及以后：支持闭包，以下是C++14下编译通过的：1234567auto test()&#123; auto sum = 0; return [-] (int value) mutable &#123; sum += value; return sum; &#125;&#125; 3)Java中的闭包：1.8以后使用Function接口和Lambda表达式来创建函数对象，函数本身不能作为参数和返回值的；1.8以前匿名类或Lambda表达式均支持闭包1234567Function&lt;Integer,Integer&gt; test() &#123; final Holder&lt;Integer&gt; sum = new Holder&lt;&gt;(0); return (Integer value) -&gt; &#123; sum.value += value; return sum.value; &#125;&#125; 还有一个问题就是前面说的”正统”函数式编程要求：1）不可变性：不能有状态，只有常量和函数；2）函数只能有一个参数。我们尝试使用代码来实现这个要求，但是实现正统函数式编程不能有状态，那么应该将状态（函数执行结果）放在另一个函数中：12345678910111213141516171819202122232425262728//使用正统函数式编程,只有常量和函数，没有变量type itest func(int)(int,itest)func ftest(base int)itest&#123; return func(v int) (int, itest) &#123; return base+v,ftest(base+v) &#125;&#125;func main() &#123; a:=ftest(0) for i:=0;i&lt;10;i++&#123; var s int s,a =a(i) fmt.Printf(&quot;0+1+...+%d=%d\\n&quot;,i,s) &#125;&#125;//运行结果：0+1+...+0=00+1+...+1=10+1+...+2=30+1+...+3=60+1+...+4=100+1+...+5=150+1+...+6=210+1+...+7=280+1+...+8=360+1+...+9=45 不过这种正统函数式编程理解起来非常困难，写起来也不容易理解。 斐波那契数列理解闭包接下来通过斐波那契数列来加深自己对于闭包的理解，同样先使用普通方法，然后使用闭包的方式实现。 普通方法实现输出斐波那契数列：1234567891011121314151617181920212223242526//chapter06/fibonaqitest/fibonaqi.go文件package fibonaqi//1,1,2,3,5,8,13,21...func FBtest(n int)int&#123; a,b:=0,1 for i:=0;i&lt;n;i++&#123; a,b = b,a+b &#125; return a&#125;//chapter06/fibonaqitest/main.go文件：package mainimport ( &quot;chapter06/fibonaqitest/fibonaqi&quot; &quot;fmt&quot;)func main() &#123; fmt.Println(fibonaqi.FBtest(5))&#125;//运行结果：5 再来试试闭包的实现：123456789//chapter06/fibonaqitest/fibonaqi.go文件//闭包func FPtest()func()int&#123; a, b:=0,1 return func() int &#123; a,b=b,a+b return a &#125;&#125; 但是这边有一个问题，就是这个函数内无法判断何时输出。其实这种和生成器非常相似，因此每次调用会执行一次该函数：123456789func main() &#123; f:=fibonaqi.FPtest() fmt.Println(f()) //闭包函数测试 fmt.Println(f()) &#125;//运行结果：11 但是这个闭包其实变成了生成器，如果我们想输出斐波那契数列中小于10000的元素，我们需要多次调用这个生成器，直到输出的元素小于10000才停止运行，那么有没有简单的方法呢？我们可以让这个斐波那契函数实现一个输出内容的接口就行了：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657//闭包func FPtest()func()int&#123; a, b:=0,1 return func() int &#123; a,b = b,a+b return a &#125;&#125;type IntGenerator func() intfunc (g IntGenerator)Read(p[]byte)(n int,err error)&#123; next:=g() //获取下一个元素 if next &gt;10000&#123; //达到10000以上结束 return 0, io.EOF &#125; s:=fmt.Sprintf(&quot;%d\\n&quot;,next) //转换成字符串 // TODO: incorrect if p is too small! return strings.NewReader(s).Read(p)&#125;//之前用于从文件中输出内容的函数func PrintFileContent(reader io.Reader)&#123; scanner:=bufio.NewScanner(reader) for scanner.Scan()&#123; fmt.Println(scanner.Text()) &#125;&#125;func main() &#123; var ft fibonaqi.IntGenerator =fibonaqi.FPtest() fibonaqi.PrintFileContent(ft)&#125;//运行结果：11235813213455891442333776109871597258441816765 不过这个代码有一个瑕疵就是这个p对象不能太小，太小就无法输出信息，后续会对这段代码进行修改。 二分搜索树遍历理解闭包接下来使用之前介绍的二分搜索树遍历的例子来加深对闭包的理解。学过二分搜索树的人肯定知道中序遍历结果是0 9 2 0 6： 但是之前的遍历函数只能实现遍历的功能，接下来让函数实现接口，那它就能干很多事了：123456789101112131415161718192021222324252627282930313233343536373839404142434445//函数闭包，演示二分搜索树的遍历func (node *treeNode)Traverse()&#123; node.TraverseFunc(func(n *treeNode) &#123; n.Print() &#125;) fmt.Println()&#125;func (node *treeNode)TraverseFunc(f func(*treeNode))&#123; if node==nil&#123; return &#125; node.left.TraverseFunc(f) f(node) node.right.TraverseFunc(f)&#125;func main() &#123; var root treeNode //声明一个二分搜索树对象 root = treeNode&#123;value: 2&#125; //二分搜索树root节点初始化 root.left = &amp;treeNode&#123;&#125; //二分搜索树root节点左子树初始化 root.right = &amp;treeNode&#123;6, nil, nil&#125; //二分搜索树root节点右子树初始化,其本质也是一个treeNode对象 root.right.left =new(treeNode) //给二分搜索树root节点的左子树的左侧创建一个节点 root.left.right = createTreeNode(9) root.reverse() fmt.Println(&quot;********************&quot;) root.Traverse() //数一下二分搜索树中元素的个数 nodeCount:=0 root.TraverseFunc(func(node *treeNode) &#123; nodeCount++ &#125;) fmt.Println(&quot;********************&quot;) fmt.Println(&quot;节点总数为：&quot;,nodeCount)&#125;//运行结果：09206节点总数为： 5 看到没，我们后实现的TraverseFunc函数的功能非常强大，不仅仅限于遍历。","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"Go语言学习笔记（7）：面向接口","slug":"Go语言学习笔记（7）：面向接口","date":"2019-05-15T12:57:31.000Z","updated":"2019-11-04T14:06:07.147Z","comments":true,"path":"2019/05/15/Go语言学习笔记（7）：面向接口/","link":"","permalink":"http://blog.licheetools.top/2019/05/15/Go语言学习笔记（7）：面向接口/","excerpt":"","text":"接口本篇主要介绍Go语言中的特色功能面向接口，由于Go语言的面向对象只支持封装，因此需要借助于接口来实现类似于继承和多态的功能。 Duck Typing简介在介绍接口之前，有必要介绍Duck Typing（鸭子类型），学过Python的应该就知道这个。”当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子，”这就是所谓的鸭子类型。 对于一门强类型的静态语言来说，要想通过运行时多态来隔离变化，多个实现类就必须属于同一类型体系，必须通过继承的方式与同一抽象类型建立is-a关系。而Duck Typing则是一种基于特征，而不是基于类型的多态方式。Duck Typing仍然关心is-a，只不过is-a关系是以对方是否具备相关的特征来确定的。是否满足is-a关系可以使用所谓的鸭子测试（Duck Test）进行判断。 当初提Duck Typing的前提是需要动态绑定，但是Go语言是在编译时就绑定的，因此从这个角度看其实Go语言并不是Duck Typing。但是我们假如只是关注描述事物的外部行为而非内部结构时，可以说Go语言是Duck Typing。 Python中的Duck Typing来看看Python中的Duck Typing:（图片来自于互联网） 我们发现Python中的Duck Typing其实是非常灵活的，无需关注retriever到底是哪个，只需要它里面具有get方法就能作为参数传入download函数。不过只有在运行的时候才知道传入的retriever是否包含get，因此想要提前知道必须借助于注释来说明这个问题。 C++中的Duck Typing再来看一下C++中的Duck Typing：（C++原生支持Duck Typing，图片来自于互联网） C++通过使用模板继承来实现Duck Typing，同样这个retriever也是只需要具有get方法时，就能作为参数传入download函数。不过只有在编译的时候（敲代码的时候不知道）才知道传入的retriever是否包含get，因此想要提前知道还是必须借助于注释来说明这个问题。 总的来说Python和C++差不多，只是Python没有编译器，而C++有而已。 Java中没有Duck TypingJava没有Duck Typing，只有实现该功能的类似代码：（图片来自于互联网） 我们发现首先其实也是使用了模板R，然后实现了Retriever接口，因此download方法的参数必须是实现了Retriever接口的对象，不过这样做的好处就是不需要判断对象是否具有get方法了，因为你已经强制每个对象都必须包含get方法了。但是这个并不是Duck Typing，因为它强调了必须要实现Retriever接口，你传入的对象仅仅包含get方法还不行，必须实现Retriever接口方可。Java这样做的好处就是不在需要借助于注释来说明接口。 Java那种方式尽管不错，但是当download方法需要传入的R对象必须实现多个接口时，这就显得非常麻烦了。如同时需要Readable、Appendable怎么办？（可以使用apache polygene，但是依旧非常麻烦）。 我们希望Go语言中的Duck Typing能解决Java中的接口组装问题，具有Python、C++中的灵活性，还具有Java中的类型检查（在敲代码的时候提示），Go语言的设计者就真的做到了这一点。 Go语言中的Duck Typing 注意Go语言的接口是由使用者来定义的，这与传统的接口不同，传统的接口是由实现者定义的，你只要实现了我这个接口就能干什么事情。 接下来通过代码来理解Go语言的接口是由使用者来定义的这句话。 第一步，先创建retriever文件夹，再在里面创建一个envy文件夹，里面新建一个envyretriever.go文件：12345678910package envy//envy来实现这个接口的Get方法type Retriever struct &#123; Contents string&#125;func (r Retriever)Get(url string)string&#123; return r.Contents&#125; 第二步，在retriever文件夹里面再创建一个real文件夹，里面新建一个realretriever.go文件（一个简易的爬虫）：123456789101112131415161718192021222324252627282930package realimport ( &quot;net/http&quot; &quot;net/http/httputil&quot; &quot;time&quot;)//创建一个真实的retrievertype Retriever struct &#123; UserAgent string Timeout time.Duration //时间段&#125;func (r Retriever) Get(url string) string &#123; //这个Get方法说Caller should close resp.Body when done reading from it. response ,err:= http.Get(url) if err !=nil&#123; panic(err) &#125; //一个参数是response，另一个是否把response作为body result, err:= httputil.DumpResponse(response,true) //因此需要读完这个response需要关闭这个response.Body _ = response.Body.Close() if err !=nil&#123; panic(err) &#125; return string(result)&#125; 第三步，在retriever文件夹里面再次创建一个main.go文件作为程序的入口：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package mainimport ( &quot;chapter05/retriever/envy&quot; real2 &quot;chapter05/retriever/real&quot; &quot;fmt&quot;)type Retriever interface &#123; Get(url string) string //Get方法是接口中的方法，不过不需要使用func关键词定义，因为它本身就是函数&#125;func download(r Retriever)string&#123; //Retriever是接口 return r.Get(&quot;http://www.baidu.com&quot;)&#125;func main() &#123; var r Retriever //此时运行会出错，因为引发空指针异常 r = envy.Retriever&#123;&quot;这是envy创建的Retriever对象&quot;&#125; //fmt.Println(download(envy.Retriever&#123;&quot;这是envy创建的Retriever对象&quot;&#125;)) r = real2.Retriever&#123;&#125; fmt.Println(download(r))&#125;//运行结果：这是envy创建的Retriever对象&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt; &lt;meta content=&quot;always&quot; name=&quot;referrer&quot;&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#2932e1&quot;&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt; &lt;link rel=&quot;search&quot; type=&quot;application&quot; href=&quot;/content-search.xml&quot; title=&quot;百度搜索&quot; /&gt; &lt;link rel=&quot;icon&quot; sizes=&quot;any&quot; mask href=&quot;//www.baidu.com/img/baidu_&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//s1.bdstatic.com&quot;/&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t1.baidu.com&quot;/&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t2.baidu.com&quot;/&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t3.baidu.com&quot;/&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t10.baidu.com&quot;/&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t11.baidu.com&quot;/&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//t12.baidu.com&quot;/&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//b1.bdstatic.com&quot;/&gt; ...................................... 通过上面三个步骤，相信大家现在一定对Go语言的接口是由使用者来定义的这句话有了更深刻的理解。我们知道Go语言中只有值传递，因此上面的对象r都不是指针，都是实际存在的东西，那我们输出打印看看它们到底是什么：（%T输出类型，%v输出值）12345678910111213141516func main() &#123; var r Retriever //此时运行会出错，因为引发空指针异常 r = envy.Retriever&#123;&quot;这是envy创建的Retriever对象&quot;&#125; //fmt.Println(download(envy.Retriever&#123;&quot;这是envy创建的Retriever对象&quot;&#125;)) fmt.Printf(&quot;%T,%v\\n&quot;,r,r) r = real2.Retriever&#123; UserAgent:&quot;Chrome/70.0.3538.110&quot;, Timeout: time.Minute, &#125; //fmt.Println(download(r)) fmt.Printf(&quot;%T,%v\\n&quot;,r,r)&#125;//运行结果：envy.Retriever,&#123;这是envy创建的Retriever对象&#125;real.Retriever,&#123;Chrome/70.0.3538.110 1m0s&#125; 我们尝试修改real2.Retriever的参数，使之传入指针参数：12345678910func (r *Retriever) Get(url string) string &#123;&#125;r = &amp;real2.Retriever&#123; UserAgent:&quot;Chrome/70.0.3538.110&quot;, Timeout: time.Minute, &#125;//运行结果：envy.Retriever,&#123;这是envy创建的Retriever对象&#125;*real.Retriever,&amp;&#123;Chrome/70.0.3538.110 1m0s&#125; 看到没最后输出的其实都是类型和值，不过我们一般都不会使用到接口的指针。 我们其实可以根据r对象的类型不同让它输出不同的信息：1234567891011121314151617181920212223242526func main() &#123; var r Retriever //此时运行会出错，因为引发空指针异常 r = envy.Retriever&#123;&quot;这是envy创建的Retriever对象&quot;&#125; inspect(r) r = real2.Retriever&#123; UserAgent:&quot;Chrome/70.0.3538.110&quot;, Timeout: time.Minute, &#125; inspect(r)&#125;func inspect(r Retriever)&#123; fmt.Printf(&quot;%T,%v\\n&quot;,r,r) switch v:=r.(type)&#123; case envy.Retriever: fmt.Println(&quot;内容是：&quot;,v.Contents) case real2.Retriever: fmt.Println(&quot;内容是：&quot;,v.UserAgent) &#125;&#125;//运行结果：envy.Retriever,&#123;这是envy创建的Retriever对象&#125;内容是： 这是envy创建的Retriever对象real.Retriever,&#123;Chrome/70.0.3538.110 1m0s&#125;内容是： Chrome/70.0.3538.110 r.(type)是Go语言中的断言（Type Assertion），检查r的动态类型是否是type，在本篇的后续会介绍Go语言中的断言。 如果我们尝试将real.Retriever对象当做envy.Retriever来使用，那么程序会报错：12345678910r = real2.Retriever&#123; UserAgent:&quot;Chrome/70.0.3538.110&quot;, Timeout: time.Minute, &#125;envyRetriever :=r.(envy.Retriever)fmt.Println(envyRetriever.Contents)//运行会报错panic: interface conversion: main.Retriever is real.Retriever, not envy.Retriever 你还可以借助于返回值状态进行判断：12345678//通过断言判断if envyretriever,ok :=r.(envy.Retriever);ok&#123; fmt.Println(envyretriever.Contents)&#125;else&#123; fmt.Println(&quot;该对象不是envy.Retriever&quot;)&#125;//运行结果：该对象不是envy.Retriever 那么接口变量中到底包含什么呢？其实它包含实现者的类型和实现者的值这两部分： 或者说是实现者和实现者指针指向实现者： 也就是说接口变量其实是自带指针的，接口变量同样采用值传递，因此几乎不需要接口的指针。指针接收者只能以指针方式使用；值接收者传递地址和指针两种方式都可以。12345678910111213141516171819202122//envyretriever.go文件中：func (r Retriever)Get(url string)string&#123;&#125; //值传递//realretriever.go文件中：func (r *Retriever) Get(url string) string &#123;&#125; //指针传递//main.go文件中：func main() &#123; var r Retriever //此时运行会出错，因为引发空指针异常 r = &amp;envy.Retriever&#123;&quot;这是envy创建的Retriever对象&quot;&#125; //使用地址 fmt.Printf(&quot;%T,%v\\n&quot;,r,r) r = &amp;real2.Retriever&#123; //使用地址 UserAgent:&quot;Chrome/70.0.3538.110&quot;, Timeout: time.Minute, &#125; fmt.Printf(&quot;%T,%v\\n&quot;,r,r)&#125;//运行结果：*envy.Retriever,&amp;&#123;这是envy创建的Retriever对象&#125;*real.Retriever,&amp;&#123;Chrome/70.0.3538.110 1m0s&#125; 看到没有，值接收者对于参数是没有要求的，而指针接收者要求必须传入指针参数。 如何查看接口变量呢？表示任何类型可以使用interface{}，Type Assertion（断言），Type Switch(类型判断)。 接下来通过常见的数据结构队列来演示如何用interface{}表示任何类型。不过一开始还是定义一个只是int类型的队列：(Queue包/Queue.go文件)12345678910111213141516package Queuetype Queue [] int //定义int切片类型的Queuefunc (q Queue)Push(v int)&#123; q = append(q,v)&#125;func (q Queue)Pop()int&#123; head:=q[0] return head&#125;func (q Queue)IsEmpty()bool&#123; return len(q)==0&#125; 再来看一下(main包/main.go文件)123456789101112131415161718192021222324package mainimport ( &quot;chapter05/Queue&quot; &quot;fmt&quot;)func main() &#123; q :=Queue.Queue&#123;1&#125; q.Push(2) q.Push(3) fmt.Println(q.Pop()) fmt.Println(q.Pop()) fmt.Println(q.IsEmpty()) fmt.Println(q.Pop()) fmt.Println(q.IsEmpty())&#125;//运行结果：11false1false 因为Go语言是值传递，因此这个代码写的其实有问题，需要借助于指针才能修改队列信息，只需要修改：(Queue包/Queue.go文件)1234567891011121314151617package Queuetype Queue [] int //定义int切片类型的Queuefunc (q *Queue)Push(v int)&#123; *q = append(*q,v)&#125;func (q *Queue)Pop()int&#123; head:=(*q)[0] *q = (*q)[1:] return head&#125;func (q *Queue)IsEmpty()bool&#123; return len(*q)==0&#125; 然后点击运行结果：1234512false3true 这样就能修改队列数据了，但是只能传入int类型，一旦我们将Queue包/Queue.go文件中的type Queue [] int修改为type Queue [] interface{},修改后的代码如下：123456789101112131415161718package Queue//type Queue [] int //定义int切片类型的Queuetype Queue [] interface&#123;&#125; //定义Queuefunc (q *Queue)Push(v interface&#123;&#125; )&#123; *q = append(*q,v)&#125;func (q *Queue)Pop()interface&#123;&#125; &#123; head:=(*q)[0] *q = (*q)[1:] return head&#125;func (q *Queue)IsEmpty()bool&#123; return len(*q)==0&#125; 然后在mian.go中添加以下代码：12345q.Push(&quot;test&quot;)fmt.Println(q)//运行结果：[test] 这样我们的队列就支持插入不同的数据类型了。 接口的组合其实Go语言中的接口和Java中的接口都差不多，都是具有什么样的功能罢了，因此所谓的接口组合其实就是定义了多个接口，可以一起拿来使用罢了： 之前我们在retriever/main.go文件中只是定义了一个Retriever接口，接下来增加其他的接口：12345678910111213141516171819202122232425262728293031323334type Retriever interface &#123; //获取信息接口 Get(url string) string //Get方法是接口中的方法，不过不需要使用func关键词定义，因为它本身就是函数&#125;type Poster interface &#123; //提交信息接口 Post(url string, form map[string]string)string //Post方法是接口中的方法，不过不需要使用func关键词定义，因为它本身就是函数&#125;func download(r Retriever)string&#123; //Retriever是接口 return r.Get(&quot;http://www.baidu.com&quot;)&#125;func post(poster Poster)&#123; //Poster是接口 poster.Post(&quot;http://www.baidu.com&quot;, map[string]string&#123; &quot;name&quot;: &quot;envy&quot;, &quot;language&quot;: &quot;golang&quot;, &#125;)&#125;type RetrieverPoster interface &#123; Retriever //此处直接调用之前的接口 Poster&#125;func session(reposter RetrieverPoster)&#123; reposter.Get(&quot;http://www.baidu.com&quot;) reposter.Post(&quot;http://www.baidu.com&quot;, map[string]string&#123; &quot;name&quot;: &quot;envy&quot;, &quot;language&quot;: &quot;golang&quot;, &#125;)&#125; 在上面我们定义了两个接口Retriever和Poster，然后各自接口都有一个对象分别去调用接口中实现的方法，接着我们还定义了一个组合接口RetrieverPoster，这个RetrieverPoster接口中只是分别调用了Retriever和Poster这两个接口，这就是组合接口，最后的session方法中传入的RetrieverPoster对象可以调用Get和Post方法。 接下来在envyretriever.go文件中新增Post方法：123456789func (r Retriever)Get(url string)string&#123; //通过值传递无法修改其参数的值 return r.Contents&#125;func (r Retriever)Post(url string, form map[string]string)string&#123; //我们这里的Retriever对象实现了Poster接口中的Post方法 r.Contents = form[&quot;contents&quot;] //通过值传递无法修改其参数的值 return &quot;ok&quot;&#125; 这里我们的Retriever对象现在有了Get和Post方法，按照Go语言中鸭子类型的说法，那这个Retriever对象其实就是”RetrieverPoster”对象了，那就可以调用session方法了。打开retriever/main.go文件：1234567891011121314151617func session(reposter RetrieverPoster)string&#123; reposter.Post(url, map[string]string&#123; &quot;contents&quot;: &quot;这是组合接口中的RetrieverPoster对象&quot;, &#125;) return reposter.Get(url)&#125;func main() &#123; retriever := envy.Retriever&#123;&quot;这是envy创建的Retriever对象&quot;&#125; fmt.Println(&quot;调用session方法&quot;) fmt.Println(session(retriever))//运行结果：调用session方法这是envy创建的Retriever对象 你会发现怎么输出结果不是&quot;这是组合接口中的RetrieverPoster对象&quot;这句话呢？那是因为你忘记了Go语言中只有值传递，值传递无法修改其参数，因此需要使用指针，也就是在类型参数前加*，在变量值后加&amp;取地址，之后运行结果为：12调用session方法这是组合接口中的RetrieverPoster对象 这也正确验证了Go语言中的鸭子类型是准确的。再次强调Go语言中的接口是由使用者来定义的，因此灵活度非常高，而实现者只需实现相应的方法即可，至于具体使用哪种接口则无所谓。 其实在Go语言中这种组合接口非常常见，如IO库中的ReadWriter、ReadCloser等：1234567891011121314151617// ReadWriter is the interface that groups the basic Read and Write methods.type ReadWriter interface &#123; Reader Writer&#125;// ReadCloser is the interface that groups the basic Read and Close methods.type ReadCloser interface &#123; Reader Closer&#125;// WriteCloser is the interface that groups the basic Write and Close methods.type WriteCloser interface &#123; Writer Closer&#125; Go语言中常用的标准接口接下来介绍Go语言中几个非常有用的标准接口，这对于平时开发有很大的帮助。 StringerStringer其实就是Java中的toString方法，Stringer存在于fmt包中，查看一下它的源码：12345678// Stringer is implemented by any value that has a String method,// which defines the ``native&apos;&apos; format for that value.// The String method is used to print values passed as an operand// to any format that accepts a string or to an unformatted printer// such as Print.type Stringer interface &#123; String() string&#125; 我们尝试在之前的envyretriever.go文件中新增String方法：1234func (r *Retriever)String()string&#123; return fmt.Sprintf( &quot;Retriever:&#123;Contents=%s&#125;&quot;,r.Contents)&#125; 注意此时既然是String方法，那当然是仅仅对参数是值对象才行，因此需要将envyretriever.go文件中的Get和Post方法修改为值接收者，然后在main.go文件中传入值参数就能自动调用这个String方法。 Reader和WriterReader及Writer接口存在于io包中，查看一下它的源码：1234567type Reader interface &#123; Read(p []byte) (n int, err error)&#125;type Writer interface &#123; Write(p []byte) (n int, err error)&#125; Reader和Writer接口是对文件的一个抽象，不一定是文件才能使用ReaderWriter接口，磁盘上的、网络上的都可以。 Go语言中的接口是由是由使用者定义的，实现者只需要实现其中的方法即可。 go语言的类型断言(Type Assertion)","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"Go语言学习笔记（6）：面向对象","slug":"Go语言学习笔记（6）：面向对象","date":"2019-05-13T03:08:39.000Z","updated":"2019-11-04T14:05:33.866Z","comments":true,"path":"2019/05/13/Go语言学习笔记（6）：面向对象/","link":"","permalink":"http://blog.licheetools.top/2019/05/13/Go语言学习笔记（6）：面向对象/","excerpt":"","text":"写在前面Go语言中的面向”对象”和其他语言非常不同，仅仅支持封装，不支持继承和多态。那么你可能要问了，仅仅依靠封装能实现一些较为复杂的事情么？Go语言通过接口和封装来实现较为复杂的事，所以更多的是成为接口编程。 既然只有封装，就没有class(类)，只有struct(结构体)。 结构体结构体是用户定义的类型，表示若干个字段的集合。当需要将多个数据分组到一个整体，而不是将每个数据作为单独的类型进行维护时，可以使用结构体。是不是有点类的概念？ 二分搜索树例子理解结构体知识下面尝试通过一个二分搜索树的例子来介绍关于结构体的知识。二分搜索树分为3部分，某个节点的值，节点的左子树，节点的右子树。 其实结构体的声明和面向对象中类的声明非常类似：12345//定义一个二分搜索树type treeNode struct&#123; value int //节点值为int类型 left, right *treeNode //左右子树为指针类型&#125; 在声明好结构体后，接下来就是定义它了：1234567891011121314151617181920func main() &#123; var root treeNode //定义一个二分搜索树对象 root = treeNode&#123;value: 2&#125; //二分搜索树root节点初始化 root.left = &amp;treeNode&#123;&#125; //二分搜索树root节点左子树初始化 root.right = &amp;treeNode&#123;value: 6, left: nil, right: nil&#125; //二分搜索树root节点右子树初始化 // root.right = &amp;treeNode&#123;6,nil, nil&#125; root.left.left =new(treeNode) //给二分搜索树root节点的左子树的左侧创建一个节点 nodes :=[]treeNode&#123; &#123;value:3&#125;, &#123;&#125;, &#123;5,nil,nil&#125;, &#123;8,nil,&amp;root&#125;, &#125; fmt.Println(nodes)&#125;//运行结果：[&#123;3 &lt;nil&gt; &lt;nil&gt;&#125; &#123;0 &lt;nil&gt; &lt;nil&gt;&#125; &#123;5 &lt;nil&gt; &lt;nil&gt;&#125; &#123;8 &lt;nil&gt; 0xc000048420&#125;] 你发现了么，声明结构体就相当于Java中的创建一个类，然后实例化这个结构体就是Java中类的实例化过程。在Go语言中，不论是地址还是结构体本身，一律使用.来访问成员。 123456var root treeNode //定义一个二分搜索树对象root = treeNode&#123;value: 2&#125; //二分搜索树root节点初始化root.left = &amp;treeNode&#123;&#125; //二分搜索树root节点左子树初始化root.right = &amp;treeNode&#123;value: 6, left: nil, right: nil&#125; //二分搜索树root节点右子树初始化 // root.right = &amp;treeNode&#123;6,nil, nil&#125; root.left.left =new(treeNode) //给二分搜索树root节点的左子树的左侧创建一个节点 Go语言提供了很多实例化结构体的方法，因此结构体是没有构造方法的。当然如果你可以创建一个工厂方法用于实例化构造体：1234//用于创建一个结构体对象func createTreeNode(value int) *treeNode&#123; return &amp;treeNode&#123;value:value&#125; //这是一个局部变量的地址，但是Go语言允许返回局部变量&#125; 相信聪明的你发现这个createTreeNode函数返回了一个局部对象的地址，这在C++中是不允许的，但是Go语言支持允许返回局部变量地址。然后使用该方法创建一个结构体对象：123 root.left.right = createTreeNode(9)//运行结果：&amp;&#123;9 &lt;nil&gt; &lt;nil&gt;&#125; 看到这里你可能会问，返回的局部对象是存在于堆上还是栈上呢？像C++，它的局部变量是分配在栈中，函数一旦退出，则局部变量会被销毁，只有定义在堆上的变量才能传递出去，不过这样就有一个麻烦，这个变量就需要你手动释放。而在Java中，通过New关键词生成的对象一般都在堆上，然后等到不使用的时候由垃圾回收机制回收。在Go语言中，你不需要知道它具体分配在何处，因为它是由Go语言编译器和运行环境决定的。 例如下面的treeNode没有取地址且不用返回出去，则这个treeNode可以在栈上分配它；当这个treeNode取了地址且返回出去给其他使用时，这个treeNode就可以在堆上分配，然后这个treeNode就会参与垃圾回收，当这个treeNode的指针不再使用的时候就会被回收。因此不能说函数退出这个局部变量就销毁了，这个在Go语言中是不一定的。既然能返回局部变量，那就不用考虑对象到底在哪里分配了，程序相对来说就好写一些：123func createTreeNode(value int) &#123; return treeNode&#123;value:value&#125; //这是一个局部变量的地址，但是Go语言允许返回局部变量&#125; 接下来猜猜这段代码，创建了一个怎样的二分搜索树：123456var root treeNode root = treeNode&#123;value: 2&#125; root.left = &amp;treeNode&#123;&#125; root.right = &amp;treeNode&#123;6, nil, nil&#125; root.right.left =new(treeNode) root.left.right = createTreeNode(9) 接下来介绍如何遍历这个二分搜索树，但在此之前先介绍如何为结构体定义方法。注意结构体方法并不是写在结构体中的，而是写在结构体外面的，它有一个接收者，其他和普通函数差别不大：1234//定义结构体方法，用于输出二分搜索树的信息func (tnode treeNode)print()&#123; fmt.Println(tnode.value)&#125; 注意到这个func (tnode treeNode)print(){}没有？普通的方法都是func print(){}，这里多了由小括号包含的(tnode treeNode)，我们称之为接收者。其实也就是告诉我们这个函数就是treeNode对象使用的：1root.print() 当然如果你理解不了这个意思，可以使用普通函数的写法：12345func uprint(tnode treeNode)&#123; fmt.Println(tnode.value)&#125;uprint(root) 看到没有，这个就是区别，使用前者指定了接收者，故无需再次输入参数，使用后者则需传入指定参数。Go语言中只有值传递。我们尝试修改一下之前创建的那个空子树：1root.right.left =new(treeNode) //给二分搜索树root节点的左子树的左侧创建一个节点 就是上面那个，我们定义一个方法，看看能不能将其结点的值修改为8:123456789func (tnode treeNode)setValue(value int)&#123; tnode.value=value&#125;root.right.left.setValue(8)root.right.left.print()//运行结果：0 再次强调一点Go语言中只有值传递。因此这样做是无法修改root.right.left节点的值的，此时可以借助于指针来完成：123456789func (tnode *treeNode)setValueByPointer(value int)&#123; tnode.value=value&#125;root.right.left.setValue(8)root.right.left.print()//运行结果：8 通过指针传入对象（其实就是原来对象的地址，最后结果反映到原来对象上）就能修改其值。 总结一下为结构体定义方法，如下所示，注意就是将普通的函数返回到方法名称之前罢了，其实是普通方法没有什么区别？不过这样写能让大家一眼就能找到哪些是结构体方法，增强了辨识度：123func (tnode treeNode)print()&#123; fmt.Println(tnode.value)&#125; 结构体定义方法显示定义和命名方法接收者，只有使用指针作为方法接收者时才能修改结构的内容。nil指针其实也是可以调用方法的 怎么理解nil指针也可以调用方法呢？我们尝试进行一个判断，并输出后测试一下：1234567891011121314151617func (tnode *treeNode)setValueByPointer(value int)&#123; if tnode == nil&#123; fmt.Println(&quot;你传入的是空指针&quot;) &#125; tnode.value=value&#125;var testnil *treeNodetestnil.setValueByPointer(99999)testnil = &amp;roottestnil.setValueByPointer(2345)testnil.print()//运行结果：你传入的是空指针panic: runtime error: invalid memory address or nil pointer dereference[signal 0xc0000005 code=0x1 addr=0x0 pc=0x49122d] 出错是意料之中的事，因为第一次传进去的testnil是一个空指针nil，而setValueByPointer函数是需要有返回值的，而空指针nil是没有值的，因此会报错，其实你只需要在里面添加一个return就可以的解决这个问题：1234567891011func (tnode *treeNode)setValueByPointer(value int)&#123; if tnode == nil&#123; fmt.Println(&quot;你传入的是空指针&quot;) return &#125; tnode.value=value&#125;//运行结果：你传入的是空指针2345 不过需要说明的是并不是每次都需要判断传入的对象是不是nil，然后才进行后续操作，这个需要结合具体场景来的。 接下来介绍如何遍历这个二分搜索树：（学过二分搜索树的人肯定知道中序遍历结果是0 9 2 0 6)： 采用中序遍历的方式（遍历方式的名称是由该节点的遍历顺序来决定的，节点在最前面是前序，中间是中序，最后是后序）因此这里的中序就是先遍历左子树，再遍历节点，最后遍历右子树：12345678910111213141516//二分搜索树的中序遍历,其实采用了递归的思想func (tnode *treeNode)reverse()&#123; if tnode ==nil&#123; return &#125; tnode.left.reverse() tnode.print() tnode.right.reverse()&#125;//运行结果：09206 结果和我们的预期完全吻合，但是你有没有我们只是判断了tnode节点是否是nil，但是对于其左右子树没有判断，事实上在JavaScript和Java中这个是不用判断的，但是C++中可能需要判断。 接下来谈谈值接收者和指针接收者的区别：1、需要修改结构体内容的必须使用指针接收者；2、当结果过大时，也必须使用指针接收者；3、在具有指针接收者的情况下，建议都采用指针接收者；4、值接收者是Go语言独有的；很多语言都有指针接收者如Python中的self，Java中的引用等； 封装接下来介绍封装，在Java中就是使用一些关键词如private、default、protected、public，按照前面的顺序，自上而下，访问范围越来越大；自下而上，限制能力越来越强，它们所控制的范围如下所示： 但是在Go语言中就不一样了，Go语言通过函数的名字来进行范围控制的，名字一般使用CamelCase。首字母大写表示public，首字母小写表示private，这两个都是针对包而言的 包package main这个就是一个main包，默认使用的就是这个main包，main包包含了可执行入口。在Go语言中，每个目录都只能有一个包，包名不一定要和目录名一致。为结构体定义的方法必须放在同一个包内。 尝试将之前的关于二分搜索树的代码拆分成不同的文件，然后进行导包操作： tree包里面包含一个包entry和文件node.go，而entry包中又包含entry.go文件。其中entry.go中只含有main方法，定义前面package为main包，当然也可以定义为entry包（每个目录都只能有一个包，包名不一定要和目录名一致。），但是我们只是让他运行main方法，因此定义package为main包。既然这样设置，那么以后包entry所有的go文件的package都必须是mian，否则会出错。同样外面的node.go文件中的package定义为tree包，因此以后tree文件里面所有go文件的package都必须定义为tree！ 扩展已有类型现在有一个问题，就是你在开发过程中需要使用别人的包，那应该怎样使用呢？也就是如何扩展系统类型或别人的类型呢？你可以使用别名或者组合来解决这个问题。 这个需要配置GoPATH环境变量的，默认情况unix和linux是在，~/go下，Windows是在%USERPROFILE%\\go。官方建议所有项目和第三方库都放在同一个GoPATH下面，但也可以将每个项目放在不同的GoPATH下面。Go语言会在编译时去各个GoPATH中找到不同的包。 Go语言导包正确操作那么如何保证自己的go语言程序能正常运行呢？下面教大家如何设置(假设我准备所有go项目存放在I:\\Go\\GoTest文件夹下面，而我的Go语言安装在G:\\Applications\\Go文件夹下面): 第一步：在I:\\Go\\GoTest文件夹下面新建src文件夹，注意必须是这个名字，不能随意修改； 第二步：设置环境变量GOROOT=G:\\Applications\\Go（其实就是Go语言安装路径）和Path=G:\\Applications\\Go\\bin;及GOPATH=I:\\Go\\GoTest（项目存放的地址，注意不能写成I:\\Go\\GoTest\\src，仅仅写到GoTest文件夹为止）。 第三步：配置GoLand参数，File–&gt;Settings–&gt;Go，如下图所示： 之后点击确认，可能需要重启GoLand，然后使用Alt+Enter键就能实现自动导包了！ 获取第三方库接下来介绍如何获取Go语言的第三方库。在Python中你可以使用pip install +库名的方式，而在Go语言中可以使用go get +库名的办法。但是直接从谷歌服务器上下载库在国内似乎不行，这时推荐使用gopm +库名的方式: 需要说明的是go get是内置的命令，而gopm是第三方工具，因此在使用前需要使用go get来安装gopm：1go get github.com/gpmgo/gopm 之后会在你的src文件夹里面多了两个新的文件夹bin和github.com： 还记得前面设置的Path=G:\\Applications\\Go\\bin;这个环境变量么，打开该文件夹发现里面都是可执行的exe文件： 而我们刚才生成的bin目录下有一个gopm.exe，因此需要将这个gopm.exe复制到G:\\Applications\\Go\\bin文件夹下面才能保证其正常运行。如果你觉得这种操作很麻烦可以直接修改path参数为Path=%GOPATH%\\bin;这样就不需要导入了，那这样我们GOROOT下面的bin目录中的go、godoc、gofmt就无法正常运行了，那没事因为我们用到它的时候不多，手动使用他们也是可以接受的。 这个src文件夹里面会存有你的项目和你下载的第三方库。关于Go内置的一些其他命令可以查看这里GO 命令教程。 下面介绍gopm的使用。其实也是使用gopm get+库名的方式，当然还可以使用gopm help查看各种参数实现自定义下载位置配置：1234567891011121314151617181920212223242526272829NAME: Gopm - Go Package ManagerUSAGE: Gopm [global options] command [command options] [arguments...]VERSION: 0.8.8.0307 BetaCOMMANDS: list list all dependencies of current project gen generate a gopmfile for current Go project get fetch remote package(s) and dependencies bin download and link dependencies and build binary config configure gopm settings run link dependencies and go run test link dependencies and go test build link dependencies and go build install link dependencies and go install clean clean all temporary files update check and update gopm resources including itself help, h Shows a list of commands or help for one commandGLOBAL OPTIONS: --noterm, -n disable color output --strict, -s strict mode --debug, -d debug mode --help, -h show help --version, -v print the version 还可以使用go build来编译，使用go install会产生pkg文件和可执行文件；使用go run会直接编译且运行。 其实看到这里有一个非常大的问题，就是有些文件夹里面有多个main方法的入口，这是不允许的，特别是在go build时候，因此建议一个文件夹下面就仅仅只有一个go程序。","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"Go语言学习笔记（4）：内建容器之数组、切片","slug":"Go语言学习笔记（4）：内建容器之数组、切片","date":"2019-05-12T13:58:57.000Z","updated":"2019-11-04T14:04:11.529Z","comments":true,"path":"2019/05/12/Go语言学习笔记（4）：内建容器之数组、切片/","link":"","permalink":"http://blog.licheetools.top/2019/05/12/Go语言学习笔记（4）：内建容器之数组、切片/","excerpt":"","text":"写在前面本篇笔记主要介绍内建容器相关的知识，具体包括数组和切片等内容。 数组Go语言中的数组和其他语言中的数组差不多，都是只能存放同一类型的数据。创建数组有多种方式，这里推荐几种：12345678910111213141516171819202122package mainimport &quot;fmt&quot;func main() &#123; //创建数组的第一种方式 var array1 [6] int //创建数组的第二种方式,需要写出具体的数组内容 array2 := [3] int &#123;1,2,3&#125; //创建数组的第二种方式,不需要写出具体的数组内容，...表示让编译器来帮我们数有几个int array3 := [...] int &#123;1,2,3,4,5,6,7,8&#125; //定义一个二维数组，2行3列为int类型的数组 var twoarray [2][3] int fmt.Println(array1, array2, array3) fmt.Println(twoarray)&#125;//运行结果：[0 0 0 0 0 0] [1 2 3] [1 2 3 4 5 6 7 8][[0 0 0] [0 0 0]] 注使用:=操作符时，需要指明具体的数组内容。Go语言数组规范和其他有点不同，数量写在类型前面。 接下来是数组的遍历，借鉴于其他语言的遍历方式非常容易想到这种方式：1234567891011121314 //创建数组的第二种方式,不需要写出具体的数组内容，...表示让编译器来帮我们数有几个int array3 := [...] int &#123;2,4,6,8,10,12&#125; //一般的数组变量遍历方式 for i:=0;i&lt;len(array3);i++&#123; fmt.Println(array3[i]) &#125;//运行结果：24681012 前面使用过range这个关键词，它可以直接获取数组的下标：1234567891011121314 //创建数组的第二种方式,不需要写出具体的数组内容，...表示让编译器来帮我们数有几个int array3 := [...] int &#123;2,4,6,8,10,12&#125; //使用range关键词遍历数组 for i:=range array3&#123; fmt.Println(array3[i]) &#125;//运行结果：24681012 也可以直接输出下标和元素：123456789101112131415 //创建数组的第二种方式,不需要写出具体的数组内容，...表示让编译器来帮我们数有几个int array3 := [...] int &#123;2,4,6,8,10,12&#125; //使用range关键词遍历数组，且输出数组下标和元素 for i,v:=range array3&#123; fmt.Println(i ,v) &#125;//运行结果：0 21 42 63 84 105 12 如果只需要数值，不需要下标，可以使用_：123456789101112 //使用匿名变量来传递 for _, v := range array3&#123; fmt.Println(v) &#125;//运行结果：24681012 也就是可通过_来省略变量，不仅在range，任何地方都可以通过_来省略变量，当然如果只需要i(下标)，只需要写成：for i :=range numbers的形式。 这个range不仅仅是Go语言所具有的，Java和Python中也有(C++中没有) ，不过只能是for each value，而不能同时获取i，v对象。 数组是值类型。怎么理解这句话呢？往下看：12345678910111213141516171819202122232425package mainimport &quot;fmt&quot;func printArray(array [6] int)&#123; //使用匿名变量来传递 for _, v := range array&#123; fmt.Println(v) &#125;&#125;func main() &#123; //创建数组的第一种方式 var array1 [6] int //创建数组的第二种方式,需要写出具体的数组内容 array2 := [3] int &#123;1,2,3&#125; //创建数组的第二种方式,不需要写出具体的数组内容，...表示让编译器来帮我们数有几个int array3 := [...] int &#123;2,4,6,8,10,12&#125; printArray(array1) printArray(array2) printArray(array3)&#125;//运行结果：cannot use array2 (type [3]int) as type [6]int in argument to printArray 也就是在Go语言中，因为是值传递，因此array [6]int与array [7]int是不同的类型。调用func test(array [10] int)会拷贝数组，这种情况和大部分的编程语言是不相同的，因为大部分传递数组都是引用传递，可以改变数组中元素的值，但是Go语言不行。 现在我们尝试修改一下数组的第一个元素信息：12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport &quot;fmt&quot;func printArray(array [6] int)&#123; array[0] = 99999999 //使用匿名变量来传递 for _, v := range array&#123; fmt.Println(v) &#125;&#125;func main() &#123; //创建数组的第一种方式 var array1 [6] int //创建数组的第二种方式,不需要写出具体的数组内容，...表示让编译器来帮我们数有几个int array3 := [...] int &#123;2,4,6,8,10,12&#125; fmt.Println(&quot;导入printTest函数后&quot;) printArray(array1) fmt.Println(&quot;****************************************&quot;) printArray(array3) fmt.Println(&quot;再次打印array1和array2&quot;) fmt.Println(array1,array3)&#125;//运行结果：导入printTest函数后9999999900000****************************************999999994681012再次打印array1和array2[0 0 0 0 0 0] [2 4 6 8 10 12] 运行结果发现你只是对传进去的参数进行了修改，对于array1和array2而言其实还是没什么变化。 如果你非得修改原来的对象，可以借助于指针，修改为：1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport &quot;fmt&quot;func printArray(array *[6] int)&#123; //添加指针 array[0] = 99999999 //使用匿名变量来传递 for _, v := range array&#123; fmt.Println(v) &#125;&#125;func main() &#123; //创建数组的第一种方式 var array1 [6] int //创建数组的第二种方式,不需要写出具体的数组内容，...表示让编译器来帮我们数有几个int array3 := [...] int &#123;2,4,6,8,10,12&#125; fmt.Println(&quot;导入printTest函数后&quot;) printArray(&amp;array1) //取地址 fmt.Println(&quot;****************************************&quot;) printArray(&amp;array3) //取地址 fmt.Println(&quot;再次打印array1和array2&quot;) fmt.Println(array1,array3)&#125;//运行结果：导入printTest函数后9999999900000****************************************999999994681012再次打印array1和array2[99999999 0 0 0 0 0] [99999999 4 6 8 10 12] 上面只是*[6] int添加了指针，然后在array1和array3前加&amp;取地址，进而完成了数组元素的修改。其实，在Go语言中一般不直接使用数组，也不使用数组的指针，而是使用切片。 切片切片slice，在很多语言中都有。来看一段代码，提前了解一下什么是slice切片：12array1 := [...]int&#123;1,3,5,7,9,11,13&#125;s := array1[2:6] 其实这个s就是一个slice，如果之前学过python或者其他语言的话就非常好理解这个slice了，slice都是左闭右开，也就是[2:6]表示取第2,3,4,5个元素，不包括第6个：1234567891011package mainimport &quot;fmt&quot;func main() &#123; array1 := [...]int&#123;1,3,5,7,9,11,13&#125; fmt.Println(&quot;array1[2:6] is：&quot;,array1[2:6]) // [5 7 9 11] fmt.Println(&quot;array1[:6] is：&quot;,array1[:6]) // [1 3 5 7 9 11] fmt.Println(&quot;array1[2:] is：&quot;,array1[2:]) // [5 7 9 11 13] fmt.Println(&quot;array1[:] is：&quot;,array1[:]) // [1 3 5 7 9 11 13]&#125; 注意和Python中的切片不同，你最大数值不能超出数组的个数，也就是说使用[2:7]是可以的，因为7取不到，但是如果使用[2:8]就会报错，（言外之意，最开始更不能大于数组的个数了）这一点需要注意。 那么你可能要问这个切片到底是什么？其实这个切片就是对于某个数组的一个视图，这个视图非常灵活。在方法中定义参数的时候，如果不带具体的数字，其实这就是一个视图：12345678910111213141516171819202122232425262728293031323334353637package mainimport &quot;fmt&quot;func updateSlice(s [] int)&#123; s[0] = 999&#125;func main() &#123; array1 := [...]int&#123;1,3,5,7,9,11,13&#125; s1 := array1[5:] fmt.Println(&quot;array[5:] is:&quot;,s1) s2 := array1[:] fmt.Println(&quot;array[:] is:&quot;,s2) fmt.Println(&quot;s1切片后：&quot;) updateSlice(s1) fmt.Println(s1) fmt.Println(array1) fmt.Println(&quot;s2切片后：&quot;) updateSlice(s2) fmt.Println(s2) fmt.Println(array1)&#125;//运行结果：array[5:] is: [11 13]array[:] is: [1 3 5 7 9 11 13]s1切片后：[999 13][1 3 5 7 9 999 13]s2切片后：[999 3 5 7 9 999 13][999 3 5 7 9 999 13] 看到没有，这个切片是原来数组的一个视图，通过修改这个视图进而达到修改原数组的目的，Go语言中的切片和其他语言的切片差别很大，需要仔细体会一下其中的设计思想。slice本身没有数据，是对底层数组的一个视图view。你会发现一个非常有意思的现象：Go语言支持多次slice，你可以在slice上面再次进行slice，但是最终都会反映到原来数组的修改上，这一点非常重要。 slice支持多次slice，例如：1234567891011121314151617package mainimport &quot;fmt&quot;func main() &#123; //slice的扩展 arraytest := [...] int&#123;2,4,6,8,10,12,14&#125; s1 := arraytest[2:5] s2 := s1[3:5] fmt.Println(s1) fmt.Println(s2)&#125;//运行结果：[6 8 10][12 14] 为什么会是这样呢？难道s2取的不是s1[3]和s1[4]的值么？输出一下看看：1234 fmt.Println(s1[3]) fmt.Println(s1[4])//运行结果：panic: runtime error: index out of range 居然报了索引越界这个错误，因此这里的s1[3:5]取的根本就不是s1[3]和s1[4]的值!那它取的到底是什么呢？ 当你使用s1的时候，它是对arraytest数组的一个视图，表面上只有6,8,10这三个元素，实际上还有不可见的12和14也在这个视图中。然后使用s2的时候，发现这个看不见的两个元素满足条件就返回。因此这里的s2的取值范围不得超过这个看不见的数值。其实在数据结构中就会发现这里看不见的元素其实就是容量与实际数量的差值。 通过资料发现slice的底层实现： ptr表示slice的开头元素；len是可见的长度，即使用[]取值只能在这个范围内，否则引发索引越界错误；cap是容量，只要在这个容量内都是可以扩展的： slice可以向后扩展，但不可以向前扩展。s[i]不能越过len(s)，向后扩展可超越len(s)，但不可以超越底层数组cap(s)。 尝试输出一下之前例子的len和cap信息：123456789101112131415161718192021package mainimport &quot;fmt&quot;func main() &#123; //slice的扩展 arraytest := [...] int&#123;2,4,6,8,10,12,14&#125; s1 := arraytest[2:5] s2 := s1[3:5] fmt.Println(&quot;arraytest:&quot;,arraytest) fmt.Printf(&quot;s1=%v, len(s1)=%d, cap(s1)=%d&quot;,s1, len(s1), cap(s1)) fmt.Println(&quot;\\n&quot;) fmt.Printf(&quot;s2=%v, len(s2)=%d, cap(s2)=%d&quot;,s2, len(s2), cap(s2))&#125;//运行结果：arraytest: [2 4 6 8 10 12 14]s1=[6 8 10], len(s1)=3, cap(s1)=5s2=[12 14], len(s2)=2, cap(s2)=2 切片操作之添加元素接下来介绍如何网切片中添加元素，看一段代码：123456789101112131415161718192021222324252627282930313233package mainimport &quot;fmt&quot;func main() &#123; arraytest := [...] int&#123;2,4,6,8,10,12,14,16&#125; s1 := arraytest[2:5] //[6 8 10] s2 := s1[3:5] //s1[3]和s1[4]的值， [12 14] s3:=append(s2, 88) //s4和s5不再是对原来数组的一个视图view s4:=append(s3, 99) s5:=append(s4,66) fmt.Println(s1) fmt.Println(s2) fmt.Println(s3) fmt.Println(s4) fmt.Println(s5) fmt.Println(&quot;**********************&quot;) fmt.Println(arraytest)&#125;//运行结果：[6 8 10][12 14][12 14 88][12 14 88 99][12 14 88 99 66]**********************[2 4 6 8 10 12 14 88] 此处的arraytest中具有8个元素，s1 := arraytest[2:5]输出[6 8 10]，但是其实前面也说了里面其实是包括了看不见的其余3个元素，因此我们心里面知道它的值是[6 8 10 12 14 16]就行，然后s2 := s1[3:5]表面上输出的是[12 14]，其实心里面也知道它的值是[12 14 16]，接着使用append方法，查看一下append方法的源码可知：func append(slice []Type, elems ...Type) []Type然后添加88，你会发现它会将原有的16进行替换，因为这个appen其实也是在len范围内，也就是可见范围内修改，不可见的元素当做不存在，进而进行替换。 但是向slice中添加元素，若超过cap容量时，此时系统会重新分配更大的底层数组，若此时原来的数组不使用，则会被Go的垃圾回收机制给回收。 s4:=append(s3, 99)和 s5:=append(s4,66)因为追加的元素超过了原来数组的cap，因此它们都不再是对原来数组的一个视图view了。 由于Go语言中的值传递，因此必须append的返回值，如s=append(s,val)。 切片操作之创建切片之前使用的切片都是借助于数组来的，接下来介绍如何直接创建切片。第一种var方式，看一段代码：1234567891011package mainimport &quot;fmt&quot;func main() &#123; var s [] int //创建一个切片，如果不赋值则默认为空值nil fmt.Println(s==nil) //true&#125;//运行结果：true 接下来尝试给这个nil的切片赋值，使之包含20以内的奇数：1234567891011121314package mainimport &quot;fmt&quot;func main() &#123; var s [] int for i:=0;i&lt;10;i++&#123; s=append(s,2*i+1) &#125; fmt.Println(s)&#125;//运行结果：[1 3 5 7 9 11 13 15 17 19] 但是我们并不知道这个切片的len和cap，这时可以定义一个函数用于及时输出相关信息：1234567891011121314151617181920212223242526272829package mainimport &quot;fmt&quot;func printSlice(s [] int)&#123; fmt.Printf(&quot;len(s)=%d, cap(s)=%d\\n&quot;,len(s),cap(s))&#125;func main() &#123; var s [] int for i:=0;i&lt;10;i++&#123; printSlice(s) s=append(s,2*i+1) &#125; fmt.Println(s)&#125;//运行结果：len(s)=0, cap(s)=0len(s)=1, cap(s)=1len(s)=2, cap(s)=2len(s)=3, cap(s)=4len(s)=4, cap(s)=4len(s)=5, cap(s)=8len(s)=6, cap(s)=8len(s)=7, cap(s)=8len(s)=8, cap(s)=8len(s)=9, cap(s)=16[1 3 5 7 9 11 13 15 17 19] 我们发现刚定义的空切片其len和cap都是0，但是并不会报错，其实就相当于nil。你是不是还发现这个cap是根据2的幂数来进行扩容的，当2的某个幂数被占满时就扩容至下一个幂数。 第二种：=方式，针对不同的场景使用不同的方式创建slice，来看一段代码：1234567891011121314151617181920212223package mainimport &quot;fmt&quot;func printSlice(s [] int)&#123; fmt.Printf(&quot;value=%v,len(s)=%d, cap(s)=%d\\n&quot;,s, len(s),cap(s))&#125;func main() &#123; s1 := []int &#123;1,2,3,4,5&#125; //知道slice的类型及具体数值 printSlice(s1) s2:= make([]int ,8) //知道slice的类型，不知道具体的数值,一个参数表示len和cap是一样的 printSlice(s2) s3:=make([]int ,6, 12) //知道slice的类型，不知道具体的长度和容量,两个参数前者是len，后者是cap printSlice(s3)&#125;//运行结果：value=[1 2 3 4 5],len(s)=5, cap(s)=5value=[0 0 0 0 0 0 0 0],len(s)=8, cap(s)=8value=[0 0 0 0 0 0],len(s)=6, cap(s)=12 再来查看一下make方法的源码：func make(t Type, size ...IntegerType) Type，我们可以知道make方法第一个参数是类型，之后都是Integer类型，最后返回的是Type类型，make的作用很大，看一下源码中的解释：1234567891011121314151617// The make built-in function allocates and initializes an object of type// slice, map, or chan (only). Like new, the first argument is a type, not a// value. Unlike new, make&apos;s return type is the same as the type of its// argument, not a pointer to it. The specification of the result depends on// the type:// Slice: The size specifies the length. The capacity of the slice is// equal to its length. A second integer argument may be provided to// specify a different capacity; it must be no smaller than the// length. For example, make([]int, 0, 10) allocates an underlying array// of size 10 and returns a slice of length 0 and capacity 10 that is// backed by this underlying array.// Map: An empty map is allocated with enough space to hold the// specified number of elements. The size may be omitted, in which case// a small starting size is allocated.// Channel: The channel&apos;s buffer is initialized with the specified// buffer capacity. If zero, or the size is omitted, the channel is// unbuffered. 切片操作之复制切片接下来介绍如何复制切片，这个其实非常简单，看一段代码：1234567891011121314151617181920package mainimport &quot;fmt&quot;func printSlice(s [] int)&#123; fmt.Printf(&quot;value=%v,len(s)=%d, cap(s)=%d\\n&quot;,s, len(s),cap(s))&#125;func main() &#123; s1 := []int &#123;1,2,3,4,5&#125; //知道slice类型及具体数值，[1 2 3 4 5] s2:= make([]int ,8) //知道slice类型，不知道具体数值,一个参数表示len和cap的数值，[0 0 0 0 0 0 0 0] a:=copy(s2 ,s1) fmt.Println(a) fmt.Println(s2)&#125;//运行结果：5 //返回的是源切片长度和目标切片长度中最小的那个。[1 2 3 4 5 0 0 0] 我们查看一下copy函数的源码：func copy(dst, src []Type) int可以发现它的作用是从源切片复制元素到目标切片。而且它也会从一个字符串中复制字节到一个字节类型的切片里面。源切片和目标切片可能会溢出，最后copy函数返回的是源切片长度和目标切片长度中最小的那个。12345// The copy built-in function copies elements from a source slice into a// destination slice. (As a special case, it also will copy bytes from a// string to a slice of bytes.) The source and destination may overlap. Copy// returns the number of elements copied, which will be the minimum of// len(src) and len(dst). 切片操作之删除切片创建切片后，如果想删除它应该怎样操作呢？接下来就介绍如何删除切片，不过大家需要明确Go语言中的delete方法不适用于切片，只适用于Map，因此这里的删除操作就不能使用直接delete函数，但是还是有方法。 删除切片中间元素在前面介绍切片的时候说过切片的好处就是可以随意取值，然后拼接不就可以了么。例如现在有一个切片[1 2 3 4 5 0 0 0]，想删除其中数值为5的元素，我们应该怎么做呢？可以取[1 2 3 4]和[0 0 0]啊，然后拼起来呀s2[:4] +s2[5:]但是Go语言的切片不支持+操作，可以使用append方法，但是前面也说过append方法的源码func append(slice []Type, elems ...Type) []Type，第一个参数是切片，之后其余参数都是元素，而不是一个切片，因此我们需要将s2[5:]中所包含的[0 0 0]作为参数传进去，当然这里只有3个参数，如果有更多就不能使用这种枚举法来了，此时可以使用s2[5:]...的方式，这样就直接获取了s2[5:]中包含的所有参数：12345678910fmt.Println(&quot;切片删除操作&quot;)s5:=[]int &#123;1,2,3,4,5,0,0,0&#125; //[1 2 3 4 5 0 0 0]//删除其中数值为5的元素，可以取[1 2 3 4]和[0 0 0]啊，s2[:4] +s2[5:]s6 :=append(s5[:4],s5[5:]...)fmt.Println(s6)//运行结果：[1 2 3 4 5 0 0 0]切片删除操作[1 2 3 4 0 0 0] 删除切片首尾元素其实原理和删除中间元素一致，需要注意的是Go语言中没有Python中的-1概念，下标只能从0开始往后读，不能从后往前读：12345678910111213s8:=[]int &#123;1,2,3,4,5,0,0,0&#125; //[1 2 3 4 5 0 0 0]s9:=s8[:1]s10:=s8[1:]fmt.Println(s9,s10)s11:=s8[len(s8)-1:]s12:=s8[:len(s8)-1]fmt.Println(s11,s12)//运行结果：[1 2 3 4 5 0 0 0][1] [2 3 4 5 0 0 0][0] [1 2 3 4 5 0 0] 至此关于数组和切片的操作就到此为止，下一篇介绍Map、字符和字符串。","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"Go语言学习笔记（3）：程序结构","slug":"Go语言学习笔记（3）：程序结构","date":"2019-05-11T13:58:43.000Z","updated":"2019-11-04T14:03:33.628Z","comments":true,"path":"2019/05/11/Go语言学习笔记（3）：程序结构/","link":"","permalink":"http://blog.licheetools.top/2019/05/11/Go语言学习笔记（3）：程序结构/","excerpt":"","text":"写在前面本篇笔记主要介绍程序结构相关的知识，具体包括条件语句、循环、函数和指针等内容。 条件语句if语句给定一个自然数v，如果它在0-100之间则返回v，若大于100则返回100，小于0则返回0，使用Go语言实现的代码如下：123456789101112131415161718192021package mainimport &quot;fmt&quot;func ifTest(v int) int&#123; if v &gt;100 &#123; //if的条件里面不需要括号 return 100 &#125;else if v &lt;0 &#123; return 0 &#125;else &#123; return v &#125;&#125;func main() &#123; var a int = ifTest(5) fmt.Println(a)&#125;//运行结果：5 注意到没有if的条件里面不需要括号，创建的文件中不能包含下划线。func ifTest(v int) int中参数v的前面不需要添加var关键词，后面的int则是该函数的返回结果。 现在来使用Go语言来读取某个文件的信息，如test.txt中的内容，相应的代码如下：12345678910111213141516171819202122package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot;)func readFieTest()&#123; const filename = &quot;test.txt&quot; contents, errorinfo :=ioutil.ReadFile(filename) //var contents ,errorinfo = ioutil.ReadFile(filename) if errorinfo != nil &#123; fmt.Println(errorinfo) &#125;else&#123; fmt.Printf(&quot;%s\\n&quot;,contents) &#125;&#125;func main() &#123; readFieTest()&#125; 读取文件需要采用ioutil包中的ReadFile函数，查看源码可知该函数一次可以返回两个值：123func ReadFile(filename string) ([]byte, error) &#123;......&#125; if errorinfo != nil中的nil就是无的意思，此处就是产生了错误，可以参考这篇文章了解更多关于nil的信息：理解Go语言的nil 。其实上面那种方式不是很简介，可以使用类似于Java中的三元表达式：1234567891011121314151617181920package mainimport ( &quot;fmt&quot; &quot;io/ioutil&quot;)func readFieTest()&#123; const filename = &quot;test.txt&quot; if contents, errorinfo := ioutil.ReadFile(filename) ;errorinfo != nil &#123; //先运行前半句后进行判断 fmt.Println(errorinfo) &#125;else &#123; fmt.Printf(&quot;%s&quot;,contents) &#125;&#125;func main() &#123; readFieTest()&#125; 发现没有if的条件里可以进行赋值，且if条件里赋值的变量作用域就是这个if语句。接下来聊一聊switch，很多语言中都有switch。 switch语句switch后面是可以接表达式的（也可以不接），使用Go实现计算某两个整数的加减乘除的功能，相应的代码如下：1234567891011121314151617181920212223242526272829package mainimport &quot;fmt&quot;func eval(a, b int,operation string) int &#123; var result int switch operation &#123; case &quot;+&quot;: result = a +b case &quot;-&quot;: result = a-b case &quot;*&quot;: result = a*b case &quot;/&quot;: result = a/b default: panic(&quot;不支持的运算方式&quot;+operation) //这个panic就是报错，让程序停下来 &#125; return result&#125;func main() &#123; test:= eval(3,4,&quot;*&quot;) fmt.Println(test)&#125;//运行结果：12 细心的你发现什么奇特之处么？对，里面没有break，因为Go语言中的switch会自动break，除非使用了fallthrough。而在C、C++或者是Java中你要么在后面添加break要么添加continue。 再来举一个例子，用于判断学生成绩情况：当分数小于60，则显示不及格；60-69为及格；70-79为中等；80-89为良好；90-100为优秀。使用Go语言实现的代码如下：123456789101112131415161718192021222324252627282930313233343536package mainimport &quot;fmt&quot;func scoreTest(score int)string &#123; var result string = &quot;&quot; switch &#123; case score &lt;0 ||score &gt;100 : panic(fmt.Sprintf(&quot;无效的分数:%d&quot;,score)) //如果这个条件成立，则程序不再往下执行 case score &lt;60: result = &quot;不及格&quot; case score&lt;70: result = &quot;及格&quot; case score &lt;80: result = &quot;中等&quot; case score &lt;90: result = &quot;良好&quot; case score &lt;=100: result = &quot;优秀&quot; &#125; return result&#125;func main() &#123; fmt.Println( scoreTest(59), scoreTest(62), scoreTest(77), scoreTest(84), scoreTest(99), //scoreTest(-99), )&#125;//运行结果：不及格 及格 中等 良好 优秀 如果程序满足panic的要求，则程序会停止运行。switch后面可以没有表达式 循环语句for语句使用Go语言实现求解0-指定数字内的数字之和，如100以内整数的和，相应的代码如下：1234567891011121314package mainimport &quot;fmt&quot;func sumTest(a int) int &#123; sum := 0 for i :=0;i&lt;=a;i++ &#123; sum+=i &#125; return sum&#125;func main() &#123; fmt.Println(sumTest(100))&#125; 上面使用了for循环，可以发现这个for循环的格式除了条件中不包含括号以外，其实和Java，JavaScript的代码完全一致。且大家要学会在函数中尽量使用:=的方式替代var来声明变量。 for的条件中不包含括号，且条件中可省略初始条件，结束条件以及递增表达式 再来看一个例子，将整数转换成二进制的表达式，相应的代码如下：1234567891011121314151617181920212223package mainimport ( &quot;fmt&quot; &quot;strconv&quot;)func intToBinary(n int)string &#123; result := &quot;&quot; for ;n&gt;0;n/=2&#123; //省略初始条件，相当于while lsb := n%2 result = strconv.Itoa(lsb) +result &#125; return result&#125;func main() &#123; fmt.Println( intToBinary(5), // 101 intToBinary(13), //1101 intToBinary(121242), )&#125; 再来换一种方式读取之前那个test.txt文件中的内容，现在是一行行的进行读取：1234567891011121314151617//一行行读取func printFileTest(filename string)&#123; file, err :=os.Open(filename) if err != nil&#123; panic(err) //程序停下来去报错 &#125;else&#123; scanner := bufio.NewScanner(file) for scanner.Scan()&#123; // 这里既没有开始条件，也没有递增条件，只有结束条件，此时分号都可以不写，Go语言中没有while fmt.Println(scanner.Text()) //输出 &#125; &#125;&#125;func main() &#123; printFileTest(&quot;test.txt&quot;)&#125; 在这段代码里面for中既没有开始条件，也没有递增条件，只有结束条件，那么此时的分号都可以不写，记住Go语言中没有while。因为while的功能和for相似，所以Go语言中就没有必要存在while这个关键词了。 当for中什么也不加，则变成了一个死循环，就相当于其他语言中的while true。Go语言中的死循环实现起来非常简单，那是因为后面会经常使用到死循环。 简单总结一下循环语句的特点：1、for和if条件后面没有括号；2、if条件里面也可以定义变量；3、Go语言中没有while；4、switch中不需要定义break，也可以直接switch多个语句。 函数其实在前面我们就使用了func这个关键词用于定义函数，函数定义的格式为：123func 函数名称(参数名称，参数类型)返回值类型&#123;......&#125; 需要说明的是，Go语言的函数可以有多个返回值的，且类型可以不相同：12345678910111213141516171819202122package mainimport &quot;fmt&quot;//求解两个数的和func sumTest(a,b int)int&#123; return a+b&#125;//求两个数相除的商及余数func divTest(a ,b int) (int,int, string) &#123; return a/b, a%b, &quot;你好&quot;&#125;func main() &#123; fmt.Println(sumTest(3,6)) fmt.Println(divTest(13, 4))&#125;//运行结果：93 1 你好 在上面的代码中不知道返回的到底是什么，只知道都是int类型，其实可以像声明变量的方式那样给返回值设置名称：1234//求两个数相除的商及余数func divTest(a ,b int) (q, r int, s string) &#123; return a/b, a%b, &quot;你好&quot;&#125; 由于Go语言非常严格，定义的变量一定要使用，如果函数有多个返回值，我们只想取某个值时，那么其余的变量可以使用匿名变量_来接收。尽管Go语言支持返回多个类型值，但是不要乱用，一般返回两个，前者是数据，后者是错误nil，如下图所示。将前面实现两个数的四则运算的相关代码进行改写：1234567891011121314151617181920212223242526package mainimport &quot;fmt&quot;func calcTest(a, b int,operation string ) (int, error) &#123; switch operation &#123; case &quot;+&quot;: return a+b, nil case &quot;-&quot;: return a-b,nil case &quot;*&quot;: return a*b,nil case &quot;/&quot;: return a/b,nil default: return 0,fmt.Errorf(&quot;不支持的运算操作:%s&quot;,operation) &#125;&#125;func main() &#123; fmt.Println(calcTest(3,5,&quot;+&quot;))&#125;//运行结果：8 &lt;nil&gt; 上述代码其实还不够完善，在main方法中对正常与否需要进行判断：12345678func main() &#123; if result ,err:= calcTest(3,5,&quot;+&quot;);err != nil&#123; //程序运行存在错误 fmt.Println(&quot;程序运行存在错误&quot;,err) &#125;else&#123; fmt.Println(result) &#125;&#125; 在Go语言中函数可以返回多个值，且可以给多个值声明名称，但是返回多个值的情况仅仅适用于非常简单的函数，不过取不取名字和调用者无关。 Go语言是函数式编程，函数是一等公民（Python中也是），函数里面的参数，返回值里面都可以包含函数。通过前面求两个数的四则运算这个例子进行改写，实现将函数作为参数：12 Go语言没有其他语言中的默认参数、可变参数、函数重载等，只有一个可变参数列表:123456789101112131415//求可变参数列表中参数之和func dynamicVariable(values ... int)int &#123; sum :=0 for i:=range values&#123; sum+=values[i] &#125; return sum&#125;func main() &#123; fmt.Println(dynamicVariable(1,2,3,4,5,6))&#125;//运行结果：21 函数小结：1、函数返回值的类型写在最后面；2、函数可以返回多个值；3、函数可作为参数进行使用；4、没有默认参数和可选参数，函数重载等。 指针大家不要听到指针就害怕，Go语言中的指针和C语言中的指针差别很大（Go语言中的指针不能运算，而C语言中却可以），比C中的指针简单多了。 看到这里就必须谈到一个老生常谈的问题：Go语言中的参数传递是值传递还是引用传递？在C和C++中既可以值传递也可以引用传递。Java和Python绝大部分都是引用传递，除了系统的自建类型以外。那么什么是值传递？什么是引用传递呢？我们通过C++中的一段代码进行了解（C++中使用&amp;表示引用传递）：12345678910111213141516171819void pass_by_value(int a)&#123; //值传递a++;&#125;void pass_by_guide(int&amp; a)&#123; //引用传递a++;&#125;int main()&#123;int a =3;pass_by_value(a)printf(&quot;值传递以后的值为：%d\\n&quot;,a);pass_by_guide(a)printf(&quot;引用传递以后的值为：%d\\n&quot;,a);&#125;//运行结果：3 4 pass_by_value是值传递，会将a的值从main函数中拷贝一份到pass_by_value函数中，真正作了一份拷贝，拷贝进去的a加了1，那么main函数中的a并没有发生变化，没有动依旧是3。pass_by_guide是引用传递，它不会拷贝，此时main函数中的a和pass_by_guide中的a其实是引用了同一个变量a，因此在pass_by_guide函数中进行了加1操作，自然main函数中的a也会发生变化，因此就变成了4。值传递就是拷贝，原来值不会发生变化；引用传递不会拷贝，会导致原来的值发生变化。 Go语言只有值传递一种方式。Go语言中的参数需要配合其指针来使用，具体分情况： 上面这种就是值传递，两者没有影响。下面是使用到了指针的情况： 左侧是一个int类型名为a的变量，右侧是一个int类型名为aa的指针，通过指针实现相当于引用传递的效果，把a的地址给了你以后，可以修改a的值。这些都是基本数据类型，再来尝试一个自定义类型： 当把左侧的book对象传给右侧的read函数时，一般这个book对象本身通常包含指向data的一个指针，然后拷贝一份到右侧函数中，右侧的book对象也有一个pdata，但是是指向同一个data，其实就是拷贝了同一份指针。因此在Go语言中，自定义类型的时候需要考虑把它作为一个值还是一个指针来用。这里的book其实就是作为一个值来用。 用一个交换两个对象的值这个例子来加深大家的印象：12345678910111213//交换两个对象的值func swap(a,b int) &#123; a,b = b ,a&#125;func main() &#123; a ,b := 1,2 swap(a,b) fmt.Println(a, b)&#125;//运行结果：1,2 你会发现这个函数没有用，两个数值并没有发生交换，的确是这样的，那是因为这个需要借助于指针来完成：12345678910111213//交换两个对象的值func swap(a,b *int) &#123; *a,*b = *b ,*a //声明指针需要使用*&#125;func main() &#123; a ,b := 1,2 swap(&amp;a,&amp;b) //传递地址需要使用&amp; fmt.Println(a, b)&#125;//运行结果：2,1 不过这种看起来挺麻烦的，其实之前的代码不是没有起作用，而是没有将结果进行返回，修改一下代码其实是可以的：12345678910111213func swapTest(a,b int)(int ,int) &#123; return b ,a&#125;func main() &#123; a ,b := 1,2 a, b = swapTest(a,b) fmt.Println(a, b)&#125;//运行结果：2,1 这样就通过接收函数的返回值，进而实现交换两个数值的目的。至此程序结构部分就学到这里，后面学习Go语言中的内建容器。","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"Go语言学习笔记（5）：内建容器之Map、字符、字符串","slug":"Go语言学习笔记（5）：内建容器之Map、字符、字符串","date":"2019-05-11T01:58:30.000Z","updated":"2019-11-04T14:04:53.571Z","comments":true,"path":"2019/05/11/Go语言学习笔记（5）：内建容器之Map、字符、字符串/","link":"","permalink":"http://blog.licheetools.top/2019/05/11/Go语言学习笔记（5）：内建容器之Map、字符、字符串/","excerpt":"","text":"写在前面本篇笔记继续介绍内建容器相关的知识，具体包括Map、字符和字符串等内容。 MapMap这种数据结构在很多语言中都有，不过名字不同，JavaScript称对象，Java称Map，Python称字典，但Map其实就是键值对。 创建map的方式为map[k]v，当然也可以创建复合mapmap[k1]map[k2]v，还可以使用make方法创建：1234567891011121314151617package mainimport &quot;fmt&quot;func main() &#123; m1:=map[string]string&#123; //map[k]v &quot;name&quot;:&quot;envy&quot;, &quot;language&quot;:&quot;Golang&quot;, &quot;job&quot;:&quot;Developer&quot;, &#125; m2:=make(map[string]int) //m2 ==empty map var m3 map[string]int //m3==nil，Go语言中的nil是可以参与运算的 fmt.Println(m1,m2,m3)&#125;//运行结果：map[job:Developer language:Golang name:envy] map[] map[] 接下来介绍map的遍历操作：12345678910111213141516171819202122232425262728293031323334353637383940package mainimport &quot;fmt&quot;func main() &#123; m1:=map[string]string&#123; //map[k]v &quot;name&quot;:&quot;envy&quot;, &quot;language&quot;:&quot;Golang&quot;, &quot;job&quot;:&quot;Developer&quot;, &#125; fmt.Println(&quot;map的遍历K,V操作&quot;) for k,v:=range m1&#123; fmt.Println(k,v) &#125; fmt.Println(&quot;map的遍历K操作&quot;) for k:=range m1&#123; fmt.Println(k) &#125; fmt.Println(&quot;map的遍历V操作&quot;) for _,v:=range m1&#123; fmt.Println(v) &#125;&#125;//运行结果：map的遍历K,V操作language Golangjob Developername envymap的遍历K操作namelanguagejobmap的遍历V操作GolangDeveloperenvy 多次运行发现每次遍历结果是不相同的，这个map是无序的，其实是一个hashmap。 获取map的值接下来获取map的值，这个对于提高编码能力非常有帮助，可以使用map[“k”]的形式：12345678910111213141516171819package mainimport &quot;fmt&quot;func main() &#123; m1:=map[string]string&#123; //map[k]v &quot;name&quot;:&quot;envy&quot;, &quot;language&quot;:&quot;Golang&quot;, &quot;job&quot;:&quot;Developer&quot;, &#125; fmt.Println(&quot;获取map中value的值&quot;) myname:= m1[&quot;name&quot;] fmt.Println(myname)&#125;//运行结果：获取map中value的值envy 当你尝试使用一个map中不存在的键去获取值时，程序运行不会出错，但是没有输出，其实就是Zero Value：12myscore:=m1[&quot;test&quot;]fmt.Println(myscore) //没有输出 那么如何判断map中是否存在某个键呢？可以在m[&quot;k&quot;]的返回中取出状态，如：12345myname, ok:= m1[&quot;name&quot;]fmt.Println(myname, ok) //envy truemyscore, ok:=m1[&quot;test&quot;]fmt.Println(myscore, ok) // false 一般我们都不是这样使用，而是结合if语句进行判断：12345678 if myname,ok :=m1[&quot;test&quot;];ok&#123; fmt.Println(myname) &#125;else&#123; fmt.Println(&quot;m1中不存在该键&quot;) &#125;//运行结果：m1中不存在该键 接下来介绍如何删除map中的元素，这下就能使用到前面说过的delete方法了：1234// The delete built-in function deletes the element with the specified key// (m[key]) from the map. If m is nil or there is no such element, delete// is a no-op.func delete(m map[Type]Type1, key Type) 这个delete有两个参数，第一个是map对象，第二个是map的键：123456789job, ok:= m1[&quot;job&quot;]fmt.Println(job, ok)delete(m1, &quot;job&quot;)job, ok= m1[&quot;job&quot;]fmt.Println(job, ok)//运行结果：Developer true false 简单总结一下map的操作：1、可以使用make(map[string]int)等方式创建map；2、使用m[key]获取元素；3、当key不存在时，将会获取Value类型的初始值；4、可以使用value,ok:=m[key]来判断是否存在Key；5、可以使用delete(map,key)来删除map中的元素；6、可以使用range来遍历key或者是key、value键值对；7、无法保证map的遍历顺序，若要按照指定顺序则需手动设置（采用slice排序）；8、可以使用len来获取map的长度。 map使用哈希表，因此必须可以比较是否相等。除了slice、map和function等内建类型外，都可以作为key。自定义类型(Struct类型)中不包含上述字段，也可以作为key。它不像Java中采用equals和hascode等方法进行判断，Go语言可以自己在编译过程中自行判断是否包含上述字段。 Map例题查看leetcode中一道题目：查找最长不含有重复字符的字串。例如abcabcbb–&gt;abc；bbbb–&gt;b；pwwkew–&gt;wke。接下来好好分析这个题目： 假设字符串从X开始重复，那么两个x之间的则是不包含最长重复字符串的字串(maxlength)，暂记左侧为start，也就是字符串开始。如果之间存在重复字符串，则将右侧的x向左移动，此时将x最后出现的位置记作lastplace[x]。我们知道这个lastplace[x]会有两种情况：1)在start之前，此时大可不去理会，因为此时最大字串就是x本身；2）介于两个x之间，此时需要更新start的值，指向lastplace[x]+1的位置。无论哪种情况，最后都要更新lastplace[x]和maxlength。最后输出的是不包含最长重复字符串的字串的长度，也就是maxlength。 接下来尝试使用Go语言解决这个问题，注意一下在前面说过Go语言中的字符是rune类型是32位的，而我们遍历字符串得到的其实是一个int32的类型，因此类型不对，但是我们可以将字符串转成字节数组啊，这样每一个字符就是一个字节占8位，和通常的语言保持一致了，可以查看源码：1234// string is the set of all strings of 8-bit bytes, conventionally but not// necessarily representing UTF-8-encoded text. A string may be empty, but// not nil. Values of string type are immutable.type string string string里面的每个字节都是8位的，而我们采用for循环遍历得到的是int32类型，不过将string转为字节数组后，里面存的就是uint8类型了，满足要求：1234// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is// used, by convention, to distinguish byte values from 8-bit unsigned// integer values.type byte = uint8 然后就可以写代码了：1234567891011121314151617181920212223242526272829303132333435package mainimport &quot;fmt&quot;func returnLengthNonRepetingSubString(s string)int&#123; lastplace:=make(map[byte]int) start:=0 maxlength:=0 for i,ch :=range []byte(s)&#123; //遍历字符串,i是索引，ch是字符 if lastI,ok:= lastplace[ch]; ok &amp;&amp; lastI&gt;=start&#123; start = lastI+1 &#125; if i - start + 1 &gt;maxlength&#123; maxlength = i-start +1 &#125; lastplace[ch] = i &#125; return maxlength&#125;func main() &#123; fmt.Println(returnLengthNonRepetingSubString(&quot;abcabcbb&quot;)) fmt.Println(returnLengthNonRepetingSubString(&quot;bbbb&quot;)) fmt.Println(returnLengthNonRepetingSubString(&quot;pwwkew&quot;)) fmt.Println(returnLengthNonRepetingSubString(&quot;abcdefgh&quot;)) fmt.Println(returnLengthNonRepetingSubString(&quot;你好世界&quot;))&#125;//运行结果:313810 有一个非常奇怪的地方就是最后输出中文却是10，那是因为之前将字符串转为字节数组其实只是支持asii，并不支持utf8。接下来就介绍如何支持中文，那就是进入字符和字符串的学习了。 字符及字符串前面说过rune其实就相当于Go语言中的char，那么我们现在看一个例子，用于输出字符串的长度：1234567891011package mainimport &quot;fmt&quot;func main() &#123; a:=&quot;你好envy!&quot; fmt.Println(len(a))&#125;//运行结果：11 为什么是11呢？我们尝试输出一下它的字节：12345678910111213package mainimport &quot;fmt&quot;func main() &#123; a:=&quot;你好envy!&quot; //utf-8编码 for _,v:=range []byte(a)&#123; fmt.Printf(&quot;%x &quot;,v) &#125;&#125;//运行结果：e4 bd a0 e5 a5 bd 65 6e 76 79 21 我么发现一个中文占了3个字节，英文和符号只占一个，这个就是UTF-8编码，它是一种可变字节长度的编码。Unicode编码中一个英文占2个字节，而网上多以英文为主这会占据很多资源。而UTF-8编码是可变字节的编码，一个中文占了3个字节，英文和符号只占一个字节。12345678910111213141516171819202122package mainimport &quot;fmt&quot;func main() &#123; a:=&quot;你好envy!&quot; //utf-8编码 fmt.Println(a) for _,v:=range []byte(a)&#123; //遍历字节数组 fmt.Printf(&quot;%x &quot;,v) //e4 bd a0 e5 a5 bd 65 6e 76 79 21 &#125; fmt.Println() for i,ch :=range a&#123; //遍历字符串,i是int类型，而ch是int32类型其实也就是rune fmt.Printf(&quot;(%d %x)&quot;,i,ch) //unicode编码 &#125;&#125;//运行结果：你好envy!e4 bd a0 e5 a5 bd 65 6e 76 79 21 (0 4f60)(3 597d)(6 65)(7 6e)(8 76)(9 79)(10 21) 我们可以发现其实第二列是utf8编码，第三列就是unicode编码，字节数组就是起到了将utf8编码转为Unicode编码的作用。Go语言提供了utf8这个库，这个库提供了我们对utf8的操作:1utf8.RuneCountInString(s) //返回给定字符串中rune的个数 decode的作用是将其他编码的字符串转换成unicode编码；encode的作用是将unicode编码转换成其他编码的字符串。 我们来看一下utf8.DecodeRune这个方法的源码：1DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and its width in bytes. 可以发现它的作用就是将bytes以UTF8的形式进行解压并返回字节和字节的长度。12345678910bytes :=[]byte(a) for len(bytes)&gt;0&#123; ch, size := utf8.DecodeRune(bytes) bytes = bytes[size:] fmt.Printf(&quot;%c &quot;,ch) &#125; fmt.Println()//运行结果：你 好 e n v y ! 上面这种还不是很好理解，我们希望输出每个字符及所对应的索引号，其实转成rune不就可以了么：1234567 for i,v:=range []rune(a)&#123; fmt.Printf(&quot;(%d %c)&quot;,i,v) &#125; fmt.Println()//运行结果：(0 你)(1 好)(2 e)(3 n)(4 v)(5 y)(6 !) 也就这种是我们经常可以使用到的，前面几种其实都是比较底层的内容。 []rune(a)就是将字符串string转成字符rune，注意每个rune是4个字节，因此这里的类型转换并不是对当前这个内存的重新理解，而是转它decode出来的结果，decode出来的是每个字符占4个字节，然后重新定义了一个rune数组，并将其存起来。这个decode还有转utf8的过程，转完会存取来。12e4 bd a0 e5 a5 bd 65 6e 76 79 21 (0 4f60)(3 597d)(6 65)(7 6e)(8 76)(9 79)(10 21) 它们并不是用上面的内存去解释下面的内存，而是发生了变化，重新定义了一个rune数组用于存取字符。 总结一下，我们前面使用range来遍历pos,rune对，发现pos位置是不连续的：1(0 4f60)(3 597d)(6 65)(7 6e)(8 76)(9 79)(10 21) 中文会每次加3，英文和符号加1；使用len(string)获得的只是字节数，并不是字符数123a:=&quot;你好envy!&quot; len(a)) //字节数11utf8.RuneCountInString(a)) //字符数7 使用[]byte(a)获得a的所有字节数，使用[]rune(a)会返回一个rune数组的slice。 我们知道golang中的string类型存储的字符串是不可变的， 如果要修改string内容需要将string转换为[]byte或[]rune，并且修改后的string内容是重新分配的。 byte和rune的区别是byte是8位，rune是32位：12type byte = uint8type rune = int32 前面那个查找最长不含有重复字符的字串的代码是不支持中文的，接下来进行改造使之支持中文：1234567891011121314151617181920212223242526272829303132333435363738package mainimport &quot;fmt&quot;func returnCLengthNonRepetingSubString(s string)int&#123; lastplace:=make(map[rune]int) start:=0 maxlength:=0 for i,ch :=range []rune(s)&#123; //遍历字符串,i是索引，ch是字符 if lastI,ok:= lastplace[ch]; ok &amp;&amp; lastI&gt;=start&#123; start = lastI+1 &#125; if i - start + 1 &gt;maxlength&#123; maxlength = i-start +1 &#125; lastplace[ch] = i &#125; return maxlength&#125;func main() &#123; fmt.Println(returnCLengthNonRepetingSubString(&quot;abcabcbb&quot;)) fmt.Println(returnCLengthNonRepetingSubString(&quot;bbbb&quot;)) fmt.Println(returnCLengthNonRepetingSubString(&quot;pwwkew&quot;)) fmt.Println(returnCLengthNonRepetingSubString(&quot;abcdefgh&quot;)) fmt.Println(returnCLengthNonRepetingSubString(&quot;&quot;)) fmt.Println(returnCLengthNonRepetingSubString(&quot;你好世界&quot;))&#125;//运行结果：313804 其实你会发现我们只是将其中的byte修改为rune即可，这里有一个注意点就是for i,ch :=range []rune(s)这里面是不能直接使用s，你可以试一下，发现结果变成了这样：1234563138010 因为没有问题，中文还是出了问题，因为它会将一个中文当做3个字符来使用。所以必须使用[]rune(s)。 对于字符串的操作，Go语言提供了一个strings的库，大家可以自行使用：12345678910111213strings.Fields() strings.Join()strings.Split()strings.Contains()strings.Index()strings.ToLower()strings.ToUpper()strings.Trim()strings.TrimLeft()strings.TrimRight() 这样关于内建容器的介绍就到此为止了，后续介绍Go语言中所谓的”面向对象”。参考文章：rune 与 string 的区别和联系（笔记）","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"Go语言学习笔记（2）：变量","slug":"Go语言学习笔记（2）：变量","date":"2019-05-10T13:58:30.000Z","updated":"2019-11-04T14:02:53.059Z","comments":true,"path":"2019/05/10/Go语言学习笔记（2）：变量/","link":"","permalink":"http://blog.licheetools.top/2019/05/10/Go语言学习笔记（2）：变量/","excerpt":"","text":"写在前面本篇笔记一起来学习Go语言中的变量、内建变量类型和常量这3个非常基础的知识。 变量Go语言变量的声明使用关键词var，然后跟上变量名称，变量类型，初始值。例如：var a int = 5，string和int类型的默认值分别是空串和0。在Go语言中，推荐使用驼峰命名法来给变量进行命名，如var jobUsedTest int = 66等。12345678910111213package mainimport &quot;fmt&quot;func variableTest()&#123; var a int var s string fmt.Println(a, s)&#125;func main() &#123; variableTest()&#125;# 运行结果：0 这个空串似乎没有打印输出，那是因为fmt.Println是根据变量的名字进行输出，此时可以使用格式化输出fmt.Printf(&quot;%d, %q&quot;,a, s)，注意不能使用fmt.Printf(&quot;%d, %s&quot;,a, s)，q代表quote就是引号。 再来定义一些具有初始值的变量：12345func variableValueTest()&#123; var name string = &quot;newbee&quot; var age int = 22 fmt.Println(name, age)&#125; Go语言还可以一次声明多个相同类型的变量，需要注意的是Go语言非常严格，声明的变量一定要使用用上，否则会报错：1234func manyVariableValue()&#123; var hobby, address string = &quot;running&quot;, &quot;beijing&quot; //声明了2个变量，后面只输出了一个，所以程序会报错 fmt.Println(hobby) // 这样输出是错误的，需要添加address &#125; 修改后：12345678func manyVariableValue()&#123; var hobby, address string = &quot;running&quot;, &quot;beijing&quot; fmt.Println(hobby, address)&#125;func main() &#123; manyVariableValue()&#125; 这样运行就没问题了，可以正常输出。不过看到这里是不是觉得非常别扭，因为程序可以从后面变量值就能猜测出变量的类型，为什么后面不可以省略变量类型呢？我没说不可以啊，哈哈哈哈哈哈哈哈。其实早期的语言不可以，像C但是C现在都支持了，而我们的Go语言肯定也支持啊，因此去掉后面的变量类型也是可以的。1234567func variableTypeDeduction()&#123; var name = &quot;newbee&quot; var age = 22 var number, address, answer, words = 23, &quot;北京&quot;, true, &quot;加油&quot; fmt.Println(name, age) fmt.Println(number, address, answer, words)&#125; 看到没有，是不是觉得这个除了func和fmt.Println函数不同，是不是和JavaScript非常相似，去掉变量类型后，可以一次声明多个不同类型的变量。也就是说后面跟了变量的类型，那么一次只能声明多个相同类型的变量，没有设置变量类型就可以声明不同类型的变量。 其实上面声明变量还是有点复杂，试试更简单的：12345func variableShorterTest()&#123; number, address, answer, words := 23, &quot;北京&quot;, true, &quot;加油&quot; number = 99 // 第二次赋值的时候，不能添加:号 fmt.Println(number, address, answer, words)&#125; 第一行中的:=和var效果类似，用于定义一个变量，记住第一次的声明变量必须添加:。第二次赋值的时候，不能添加:号，因为此时是重新赋值，而不是重新声明变量。说的更明白点就是这样：1234func variableTestSingle()&#123; score:= 100 // 等同于var score =100 fmt.Println(score)&#125; 注意使用:=代替var的形式，只能用于变量被声明在函数中的，而在函数的外面（包里面）定义变量只能使用var关键词，因为函数外面只能是关键词开头。Go语言没有全局变量这种说法。 当然了当你声明的变量很多时，可以将变量放在一个小括号中，如：1234567var job_1 = &quot;IT&quot;var company_1 = &quot;jialidun&quot;||var ( job_2 = &quot;IT&quot; company_2 = &quot;jialidun&quot;) 总结一下变量这一小节的知识：var关键词可以放在函数内，也可以直接放在包内，还可以使用var()来集中定义变量。Go语言可以让编译器自动识别类型，因此在声明变量的时候可以不后跟变量类型。在函数内可以使用:=代替var声明变量，在包内是不可以的。 内建变量类型Go语言提供了7种内建的变量类型，具体如下：1、数值（16个）：整型12个[（byte（8位）、int、int8、int16、int32、int64）和(uint、uint8、uint16、uint32、uint64、uintprt)]；浮点型2个[float32、float64]；（没有Java中的double类型）复数型2个[complex64、complex128]；（complex64代表实部和虚部都是32位）（前面加u的是有符号整数，后面数值是整数的位数，没有Java中的short、long等类型，最后面的uintprt是指针，位规定长度时，其长度根据操作系统来确定）2、字符串和字符类型(2个)：string、rune；（没有Java中的char类型，在Java中char就是一个字节，不过1个字节坑太多，rune是32位的）3、接口型（1个）：error；4、布尔型（1个）：bool。 接下来对复数进行简要的复习： 再来看一个非常美丽的欧拉公式： 通过上面复数的简单复习，后面会通过Go语言来验证这个公式。先来尝试输出3+4i的模：123456789101112131415161718package mainimport ( &quot;fmt&quot; &quot;math/cmplx&quot;)func euler()&#123; euler := 3+4i //写成euler := 3+4*i是错误的，变成euler := 3+4*1i是可以的 fmt.Println(cmplx.Abs(euler)) //注意使用cmplx而不是complx&#125;func main() &#123; euler()&#125;//输出结果：5 接下来就来验证欧拉公式：12345678910111213141516171819package mainimport ( &quot;fmt&quot; &quot;math&quot; &quot;math/cmplx&quot;)func eulerTest()&#123; fmt.Println(cmplx.Exp(1i*math.Pi)+1) //不需要写底数E fmt.Println(cmplx.Pow(math.E,1i*math.Pi) +1) //需要写底数E&#125;func main() &#123; eulerTest()&#125;//运行结果：(0+1.2246467991473515e-16i)(0+1.2246467991473515e-16i) 好像结果都不是0啊，那是因为虚部后面其实是有位数的，无法精确到那么准。 我们再来尝试使用Python来试试，看看结果是怎样的：123456import cmathprint(cmath.exp(1j*cmath.pi)+1)# 输出结果：1.2246467991473532e-16j 似乎也不是那么精准呢，我前面也说过出现这样的问题就在于精度误差，如果只取小数点后5位呢，再来看看Go语言写的代码运行结果：1234fmt.Printf(&quot;%.5f&quot;,cmplx.Exp(1i*math.Pi)+1)// 运行结果：(0.00000+0.00000i) 这样就验证了欧拉公式。 再来聊一下类型转换，在Java中有隐式和强制类型转换两种，所谓的隐式就是小类型转为大类型，比如福田区是属于深圳市，而深圳市隶属于广东省，因此福田区也是广东省的。强制类型就是大类型转为小类型，如珠海市属于广东省，但你能说它属于深圳市么？因此强制类型转换可能会出现问题。在Go语言中，只有强制类型转换唯一一种。 举个例子定义两个变量a,b分别是直角三角形的两条直角边，求它的第三边c，你肯定知道是5，那么如何通过Go语言来解决呢？我们发现func Sqrt(x float64) float64这个Sqrt函数里面要求参数是float64，最后返回结果也是float64，可是我们的边长是int类型，因此需要强制类型转换，其实就是使用float64这个构造方法float64(a*a + b*b)：12345678910111213141516171819202122package mainimport ( &quot;fmt&quot; &quot;math&quot; &quot;math/cmplx&quot;)func triangleTest()&#123; var a, b int = 3, 4 var c int //c = math.Sqrt(a*a + b*b) 需要强制类型转换 c = int(math.Sqrt(float64(a*a + b*b))) //转换了两次 fmt.Println(c)&#125;func main() &#123; triangleTest()&#125;//运行结果：5 也就是说直接使用var c int = math.Sqrt(a*a + b*b)是错误的，必须采用var c int = int(math.Sqrt(float64(a*a + b*b)))，其实使用float64是有一些瑕疵的，因为精度有待提高，假设是4.9999，使用int转换后可能是4，而不是5，这个问题不是Go语言具有的，其实很多编程语言都是存在这个问题的。 常量使用const关键词定义的变量，我们称之为常量，常量可以存放函数内和包内。注意如果体会以下代码的区别：12345678const a, b = 3, 4var c = int(math.Sqrt(a*a + b*b))var a, b = 3, 4var c = int(math.Sqrt(float64(a*a + b*b)))const a, b int = 3, 4var c = int(math.Sqrt(float64(a*a + b*b))) 可以发现，使用const关键词修饰的变量，如果后面没有指明变量类型，其实它可是float32、float64亦或是int、int8……等等，因此不需要强制类型转换，而使用var关键词修饰的变量，如果后面没有指明变量类型，则就需要强制类型转换。当然如果const关键词修饰的变量，后面指明了变量类型，那就需要强制类型转换的。 你也可以使用()来同时声明一组常量，例如：1234const ( a =3 b= 4 ) 还有不知道你注意没有函数名称里面包含大写字母，我们所有的关键词和变量名称都是小写的？注意这是有规定的，因为大写的字母代表着Java中的public的意思，即访问权限的控制，所以目前大家只需要做到全部小写即可。常量的数值可以作为各种类型使用。 使用常量定义枚举类型接下来尝试使用常量来定义枚举类型，Go语言中没有定义枚举类型的关键词，也是使用const关键词进行修饰，代码如下：123456789101112131415161718//使用const来定义枚举类型func enumsTest()&#123; const( Java = 0 // 枚举类型变量必须有初始值 Python = 1 Go =2 PHP =3 JavaScript = 4 ) fmt.Println(Java , Python , Go, PHP, JavaScript)&#125;func main() &#123; enumsTest()&#125;//运行结果：0 1 2 3 4 但是这种感觉和使用const一次性定义很多变量差别不是很大，此时Go语言给我们提供了iota，它代表自增值，初始值为0。还可以使用_进行占位，这样可以跳过某个序号：1234567891011121314151617func enumsTest()&#123; const( Java = iota // 枚举类型变量必须有初始值 _ // 使用匿名变量“_” Go PHP JavaScript ) fmt.Println(Java , Go, PHP, JavaScript)&#125;func main() &#123; enumsTest()&#125;//运行结果：0 2 3 4 当然iota的功能比这大多了。假设我们想输出B,KB,MB,GB,TB,PB呢？（1KB=1024B）,相应的代码如下：12345678910111213141516171819func enumsTest()&#123; // B,KB,MB,GB,TB,PB const( B = 1 &lt;&lt; (10*iota) KB MB GB TB PB )fmt.Println(B,KB,MB,GB,TB,PB)&#125;func main() &#123; enumsTest()&#125;//运行结果：1 1024 1048576 1073741824 1099511627776 1125899906842624 其实上面介绍的就是普通枚举类型和自增值枚举类型。那么到此关于变量、内建变量类型和常量的介绍就到此为止了。 总结一下1、Go语言的变量类型写在变量名之后；2、编译器可以推测变量的类型，可省写变量类型；3、Go语言中没有char类型，只有rune类型；4、Go语言原生支持复数类型。","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"Go语言学习笔记（1）：概述","slug":"Go语言学习笔记（1）：概述","date":"2019-05-10T09:03:19.000Z","updated":"2019-11-04T14:01:42.107Z","comments":true,"path":"2019/05/10/Go语言学习笔记（1）：概述/","link":"","permalink":"http://blog.licheetools.top/2019/05/10/Go语言学习笔记（1）：概述/","excerpt":"","text":"写在前面","categories":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.licheetools.top/tags/golang/"}],"keywords":[{"name":"go","slug":"go","permalink":"http://blog.licheetools.top/categories/go/"}]},{"title":"SSM搭建二手市场交易平台（二十九）：项目部署上线","slug":"SSM搭建二手市场交易平台（二十九）：项目部署上线","date":"2018-09-06T00:21:06.000Z","updated":"2019-04-15T14:26:08.209Z","comments":true,"path":"2018/09/06/SSM搭建二手市场交易平台（二十九）：项目部署上线/","link":"","permalink":"http://blog.licheetools.top/2018/09/06/SSM搭建二手市场交易平台（二十九）：项目部署上线/","excerpt":"","text":"jdk的安装1、使用rpm -qa|grep jdk命令查看是否存在jdk。 2、新建develpoer和setup文件夹，具体是/develpoer/setup； 3、进入到setup文件夹，执行sudo wget https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.rpm?AuthParam=1553169636_b11b9e5be288ddf0358ea33e6f97682e，后面的https则是jdk的rpm地址，具体的点击这里jdk8；注意后面的AuthParam，这个需要我们F12调出开发者模式，然后再次点击下载按钮，在headers里面可以直接寻找。然后对下载完的jdk进行重命名，命令如下：sudo mv jdk-8u201-linux-x64.rpm?AuthParam=1553169636_b11b9e5be288ddf0358ea33e6f97682e jdk-8u201-linux-x64.rpm这样名字就发生了改变，变成jdk-8u201-linux-x64.rpm。4、如果觉得下载速度很慢，你可以使用sudo wget http://learning.happymmall.com/jdk/jdk-7u80-linux-x64.rpm这样我就就不需要进行修改名字了。5、接下来使用下面的命令赋予用户权限：sudo chmod +x jdk-7u80-linux-x64.rpm，或者其他的权限，如777权限。 6、接下来使用下面的命令进行安装jdk：sudo rpm -ivh jdk-7u80-linux-x64.rpm，这样改jdk就直接被安装在setup这个文件夹里面了。如果出现下面的问题，请接着看：1ubuntu RPM should not be used directly install RPM packages, use Alien instead! 方法1： 先安装 alien 和 fakeroot 这两个工具，其中前者可以将 rpm 包转换为 deb 包。安装命令为： 1sudo apt-get install alien fakeroot 将需要安装的 rpm 包下载备用，假设为 package.rpm 使用 alien 将 rpm 包转换为 deb 包： 1fakeroot alien package.rpm 一旦转换成功，我们可以即刻使用以下指令来安装： 1sudo dpkg -i package.deb 方法:2：1.输入以下代码：1sudo apt-get install rpm alien 2..输入以下代码：（过程有点慢，等待一下）1alien -d package.rpm 3..输入以下代码：1sudo dpkg -i package.deb 详细的点击这里bug解决方法如下图所示：123456789ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ls jdk1.8_1.8.0202-1_amd64.deb jdk-8u202-linux-x64.rpm &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ sudo dpkg -i jdk1.8_1.8.0202-1_amd64.debSelecting previously unselected package jdk1.8.(Reading database ... 86516 files and directories currently installed.)Preparing to unpack jdk1.8_1.8.0202-1_amd64.deb ...Unpacking jdk1.8 (1.8.0202-1) ...Setting up jdk1.8 (1.8.0202-1) ...ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ 之后就会将我们的jdk默认安装在/usr/java/jdk1.8.0_202-amd64下面，我们使用ls或者ll就能查看信息：12345678910111213141516171819ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64$ lltotal 26016drwxr-xr-x 8 root root 4096 Mar 21 22:24 ./drwxr-xr-x 4 root root 4096 Mar 21 22:23 ../drwxr-xr-x 2 root root 4096 Mar 21 22:24 bin/-rw-r--r-- 1 root root 3244 Dec 16 04:50 COPYRIGHTdrwxr-xr-x 3 root root 4096 Mar 21 22:24 include/drwxr-xr-x 4 root root 4096 Mar 21 22:23 .java/-rw-r--r-- 1 root root 5211154 Dec 12 18:20 javafx-src.zipdrwxr-xr-x 5 root root 4096 Mar 21 22:24 jre/drwxr-xr-x 5 root root 4096 Mar 21 22:24 lib/-rw-r--r-- 1 root root 40 Dec 16 04:50 LICENSEdrwxr-xr-x 4 root root 4096 Mar 21 22:24 man/-rw-r--r-- 1 root root 159 Dec 16 04:50 README.html-rw-r--r-- 1 root root 424 Dec 16 04:50 release-rw-r--r-- 1 root root 21105955 Dec 16 04:50 src.zip-rw-r--r-- 1 root root 112724 Dec 12 18:20 THIRDPARTYLICENSEREADME-JAVAFX.txt-rw-r--r-- 1 root root 153824 Dec 16 04:50 THIRDPARTYLICENSEREADME.txtubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64$ 7、接下来就是环境变量的设置了，使用下面的命令即可：1sudo vim /etc/profile 在文件的最底部添加下面的代码：（这里面把其他环境也添加了，你可以自己有选择的粘贴）12345678910export JAVA_HOME=/usr/java/jdk1.8.0_202-amd64export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport MAVEN_HOME=/home/ubuntu/java/developer/apache-maven-3.0.5export NODE_HOME=/usr/local/node-v4.4.7-linux-x64export RUBY_HOME=/usr/local/rubyexport CATALINA_HOME=/home/ubuntu/java/developer/apache-tomcat-7.0.73export PATH=$PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin:$MAVEN_HOME/bin:$NODE_HOME/bin:/usr/local/bin:$RUBY_HOME/binexport LC_ALL=en_US.UTF-8 也可以点击这里profile，选择profile文件，然后打开即可。 8、接下来我们激活刚才的命令：1source /etc/profile 9、使用java -version查看是否安装成功，出现java的版本就说明成功了。如果出现12Error occurred during initialization of VMjava/lang/NoClassDefFoundError: java/lang/Object ，请参考这篇文章：解决办法或者这篇文章：办法2，当然我这里也直接附上解决办法。因为你的/usr/java/jdk1.8.0_202-amd64/jre/lib下面缺少rt.jar；还有/usr/java/jdk1.8.0_202-amd64/lib下面缺少tools.jar。那是因为你编译过度，将jar文件编译为tools.pack和rt.pack，这里我们直接使用反编译工具unpack200即可。分两步进行，首先执行反编译，然后移动文件即可。(当然，你完全可以在对应的目录下反编译，这样就不需要移动文件了。)1、反编译，使用下面的命令：1sudo unpack200 /usr/java/jdk1.8.0_202-amd64/lib/tools.pack tools.jar 这样我们的tools.jar就被编译在当前文件夹了。同样执行：1sudo unpack200 /usr/java/jdk1.8.0_202-amd64/lib/rt.pack rt.jar 这样我们的rt.jar就被编译在当前文件夹了。2、移动文件, tools.jar就是在/usr/java/jdk1.8.0_202-amd64/lib文件下面，你使用这样的命令就可以：1sudo cp /usr/java/jdk1.8.0_202-amd64/lib/tools.jar /usr/java/jdk1.8.0_202-amd64/lib 而rt.jar则是在/usr/java/jdk1.8.0_202-amd64/jre/lib，记得不要搞错！1sudo cp /usr/java/jdk1.8.0_202-amd64/lib/rt.jar /usr/java/jdk1.8.0_202-amd64/jre/lib 接下来重复第9步，查看是否成功！12345ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64/lib$ java -versionjava version &quot;1.8.0_202&quot;Java(TM) SE Runtime Environment (build 1.8.0_202-b08)Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64/lib$ 如果有多个版本的java，这个java -version是根据你的环境设置来体现的。至此我们java的安装就结束了。 tomcat的安装进入developer文件夹，里面输入以下命令：1sudo wget http://learning.happymmall.com/tomcat/apache-tomcat-7.0.73.tar.gz 待下载完毕以后，我们就开始解压它，命令如下：1sudo tar -zxvf apache-tomcat-7.0.73.tar.gz 查看一下，发现没问题：1234567ubuntu@VM-0-4-ubuntu:~/java/developer$ lltotal 8752drwxrwxr-x 4 ubuntu ubuntu 4096 Mar 22 10:25 ./drwxrwxr-x 4 ubuntu ubuntu 4096 Mar 21 18:20 ../drwxr-xr-x 9 root root 4096 Mar 22 10:25 apache-tomcat-7.0.73/-rw-r--r-- 1 root root 8938514 Apr 17 2017 apache-tomcat-7.0.73.tar.gzdrwxrwxr-x 2 ubuntu ubuntu 4096 Mar 21 22:22 setup/ 接下来，我们可以把apache-tomcat-7.0.73.tar.gz移动到setup文件夹下面：1sudo mv apache-tomcat-7.0.73.tar.gz setup/ 发现setup里面是这样的：123456drwxrwxr-x 2 ubuntu ubuntu 4096 Mar 22 10:28 ./drwxrwxr-x 4 ubuntu ubuntu 4096 Mar 22 10:28 ../-rw-r--r-- 1 root root 8938514 Apr 17 2017 apache-tomcat-7.0.73.tar.gz-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22 jdk1.8_1.8.0202-1_amd64.deb-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12 jdk-8u202-linux-x64.rpm-rw-r--r-- 1 root root 85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos; 接下来，我们退回到上一层，也就是developer文件夹，然后进入到apache-tomcat-7.0.73这个文件夹：1234567891011121314151617ubuntu@VM-0-4-ubuntu:~/java/developer$ cd apache-tomcat-7.0.73ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73$ lltotal 124drwxr-xr-x 9 root root 4096 Mar 22 10:25 ./drwxrwxr-x 4 ubuntu ubuntu 4096 Mar 22 10:28 ../drwxr-xr-x 2 root root 4096 Mar 22 10:25 bin/drwxr-xr-x 2 root root 4096 Nov 8 2016 conf/drwxr-xr-x 2 root root 4096 Mar 22 10:25 lib/-rw-r--r-- 1 root root 56846 Nov 8 2016 LICENSEdrwxr-xr-x 2 root root 4096 Nov 8 2016 logs/-rw-r--r-- 1 root root 1239 Nov 8 2016 NOTICE-rw-r--r-- 1 root root 8965 Nov 8 2016 RELEASE-NOTES-rw-r--r-- 1 root root 16195 Nov 8 2016 RUNNING.txtdrwxr-xr-x 2 root root 4096 Mar 22 10:25 temp/drwxr-xr-x 7 root root 4096 Nov 8 2016 webapps/drwxr-xr-x 2 root root 4096 Nov 8 2016 work/ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73$ 接下来编辑conf/server.xml文件，使用的命令如下：1sudo vim conf/server.xml 我们编辑它的目的就是修改utf的字符集，我们直接在当前模式（默认情况），输入/8080，然后回车就能找到这个connection（下面的截图是我们在widows下面的配置。）1F:\\tomcat\\apache-tomcat-8.5.34\\conf\\server.xml {我的路径是这里，你打开它，找到第69-71行代码： 添加这一行代码：1URIEncoding=&quot;UTF-8&quot; 注意：截图中之所以有是因为我已经配置完了，之前是没有的。} 你添加这个以后进行保存退出即可。接下来就是开始运行，进入到bin目录，具体的可以参看这些：启动使用：在配置环境的bin目录下使用startup.bat命令；关闭使用：在配置环境的bin目录下使用shutdown.bat命令。这个的配置环境，我们在前面进行了配置，也就是这些：就是${CATALINA_HOME}/bin/startup.bat或者是${CATALINA_HOME}/bin/shutdown.bat。12345678ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73/bin$ sudo ./startup.shUsing CATALINA_BASE: /home/ubuntu/java/developer/apache-tomcat-7.0.73Using CATALINA_HOME: /home/ubuntu/java/developer/apache-tomcat-7.0.73Using CATALINA_TMPDIR: /home/ubuntu/java/developer/apache-tomcat-7.0.73/tempUsing JRE_HOME: /usrUsing CLASSPATH: /home/ubuntu/java/developer/apache-tomcat-7.0.73/bin/bootstrap.jar:/home/ubuntu/java/developer/apache-tomcat-7.0.73/bin/tomcat-juli.jarTomcat started.ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73/bin$ 出现这个Tomcat started.就说明配置成功，且启动成功了。此时，由于我们的防火墙还没有配置，你用公网IP的8080端口就能访问到我们的tomcat首页了： maven的安装我们回到developer文件夹，在里面进行相关操作，在里面输入以下命令：1sudo wget http://learning.happymmall.com/maven/apache-maven-3.0.5-bin.tar.gz 待下载完毕以后，我们就开始解压它，命令如下：1sudo tar -zxvf apache-maven-3.0.5-bin.tar.gz 查看一下，发现没问题：12345678ubuntu@VM-0-4-ubuntu:~/java/developer$ lltotal 5052drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 10:56 ./drwxrwxr-x 4 ubuntu ubuntu 4096 Mar 21 18:20 ../drwxr-xr-x 6 root root 4096 Mar 22 10:56 apache-maven-3.0.5/-rw-r--r-- 1 root root 5144659 Apr 17 2017 apache-maven-3.0.5-bin.tar.gzdrwxr-xr-x 9 root root 4096 Mar 22 10:25 apache-tomcat-7.0.73/drwxrwxr-x 2 ubuntu ubuntu 4096 Mar 22 10:28 setup/ 接下来，我们可以把apache-maven-3.0.5-bin.tar.gz移动到setup文件夹下面：1sudo mv apache-maven-3.0.5-bin.tar.gz setup/ 发现setup里面是这样的：12345678ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ lltotal 341356drwxrwxr-x 2 ubuntu ubuntu 4096 Mar 22 10:57 ./drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 10:57 ../-rw-r--r-- 1 root root 5144659 Apr 17 2017 apache-maven-3.0.5-bin.tar.gz-rw-r--r-- 1 root root 8938514 Apr 17 2017 apache-tomcat-7.0.73.tar.gz-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22 jdk1.8_1.8.0202-1_amd64.deb-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12 jdk-8u202-linux-x64.rpm 接下来，我们直接输入mvn -version，看是不是成功出现版本号了，如果没有，请检查环境变量是否设置有误:1234567ubuntu@VM-0-4-ubuntu:~/java/developer/apache-maven-3.0.5$ mvn -versionApache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 21:51:28+0800)Maven home: /home/ubuntu/java/developer/apache-maven-3.0.5Java version: 1.8.0_202, vendor: Oracle CorporationJava home: /usr/java/jdk1.8.0_202-amd64/jreDefault locale: en_US, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;4.15.0-29-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot; vsftpd的安装同样我们退回到developer文件夹，我们使用下面的命令进行安装：1sudo apt-get install vsftpd 如果你使用centOs，则使用sudo yum-y install vsftpd。现在我们需要创建一个文件夹，退回到developer文件夹的上一层，因为我们创建的这个product文件和这个developer的是同级别的:1234567ubuntu@VM-0-4-ubuntu:~/java$ mkdir productubuntu@VM-0-4-ubuntu:~/java$ cd productubuntu@VM-0-4-ubuntu:~/java/product$ lltotal 8drwxrwxr-x 2 ubuntu ubuntu 4096 Mar 22 11:13 ./drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 11:13 ../ubuntu@VM-0-4-ubuntu:~/java/product$ 接着进入到product文件夹，在里面新建一个ftpfile，然后赋予其可以登录ftpserver，但是没有登录其他的权限：12ubuntu@VM-0-4-ubuntu:~/java/product$ mkdir ftpfileubuntu@VM-0-4-ubuntu:~/java/product$ sudo useradd ftpuser -d /product/ftpfile -s /sbin/nologin 紧接着赋予其用户组：1ubuntu@VM-0-4-ubuntu:~/java/product$ sudo chown -R ftpuser.ftpuser ./ftpfile/ 查看一下，发现多了一个ftpfile文件：12345ubuntu@VM-0-4-ubuntu:~/java/product$ lltotal 12drwxrwxr-x 3 ubuntu ubuntu 4096 Mar 22 11:15 ./drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 11:13 ../drwxrwxr-x 2 ftpuser ftpuser 4096 Mar 22 11:15 ftpfile/ 接下来我们重置ftpuser的登录密码：（我的密码是admin123）12345ubuntu@VM-0-4-ubuntu:~/java/product$ sudo passwd ftpuserEnter new UNIX password: Retype new UNIX password: passwd: password updated successfullyubuntu@VM-0-4-ubuntu:~/java/product$ 接下来进入到/etc/vsftpd文件，如果没有改文件夹，说明那些都是直接在/etc下面，不安全，我们在/etc新建一个vsftpd的文件夹，依次执行下面的命令：12sudo mv /etc/ftpusers /etc/vsftpdsudo mv /etc/vsftpd.conf /etc/vsftpd 紧接着，进入vsftpd文件夹，在里面执行sudo vim chroot_list，在里面添加ftpuser即可，然后保存退出即可。 下面修改其安全策略：1sudo vim /etc/selinux/config 确保里面的代码是这样的，没有就进行添加：123SELINUX=disabledSELINUXTYPE=targeted 当然你可以使用下面的命令，这个结果和刚才修改config的效果是一样的：1sudo setsebool -P ftp_home_dir 1 接下来我们备份一下这个vsftpd.conf，并将线上的进行复制：123sudo mv vsftpd.conf vsftpd.conf.baksudo wget http://learning.happymmall.com/vsftpdconfig/vsftpd.conf 查看一下：12345678ubuntu@VM-0-4-ubuntu:/etc/vsftpd$ lltotal 32drwxr-xr-x 2 root root 4096 Mar 22 12:01 ./drwxr-xr-x 100 root root 4096 Mar 22 11:34 ../-rw-r--r-- 1 root root 8 Mar 22 11:38 chroot_list-rw-r--r-- 1 root root 132 Mar 22 11:30 ftpusers-rw-r--r-- 1 root root 4786 Apr 17 2017 vsftpd.conf-rw-r--r-- 1 root root 5850 Mar 22 11:32 vsftpd.conf.bak 这样vsftpd我们就安装好了。 nginx的安装因为nginx需要编译，因此我们需要进入到setup这个文件夹，在里面执行下面的命令：1sudo wget http://learning.happymmall.com/nginx/linux-nginx-1.10.2.tar.gz nginx的安装需要依赖，因此我们先执行：1sudo apt install build-essential libtool libpcre3 libpcre3-dev zlib1g-dev openssl 查看一下：12345678910ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ lltotal 342252drwxrwxr-x 2 ubuntu ubuntu 4096 Mar 22 12:05 ./drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 10:57 ../-rw-r--r-- 1 root root 5144659 Apr 17 2017 apache-maven-3.0.5-bin.tar.gz-rw-r--r-- 1 root root 8938514 Apr 17 2017 apache-tomcat-7.0.73.tar.gz-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22 jdk1.8_1.8.0202-1_amd64.deb-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12 jdk-8u202-linux-x64.rpm-rw-r--r-- 1 root root 85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;-rw-r--r-- 1 root root 910812 Apr 17 2017 linux-nginx-1.10.2.tar.gz 接下来进行解压安装：1sudo tar -zxvf linux-nginx-1.10.2.tar.gz 查看一下：1234567891011ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ lltotal 342256drwxrwxr-x 3 ubuntu ubuntu 4096 Mar 22 12:16 ./drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 10:57 ../-rw-r--r-- 1 root root 5144659 Apr 17 2017 apache-maven-3.0.5-bin.tar.gz-rw-r--r-- 1 root root 8938514 Apr 17 2017 apache-tomcat-7.0.73.tar.gz-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22 jdk1.8_1.8.0202-1_amd64.deb-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12 jdk-8u202-linux-x64.rpm-rw-r--r-- 1 root root 85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;-rw-r--r-- 1 root root 910812 Apr 17 2017 linux-nginx-1.10.2.tar.gzdrwxr-xr-x 8 1001 1001 4096 Oct 18 2016 nginx-1.10.2/ 进入解压好的nginx-1.10.2目录，查看一下：12345678910111213141516ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$ lltotal 700drwxr-xr-x 8 1001 1001 4096 Oct 18 2016 ./drwxrwxr-x 3 ubuntu ubuntu 4096 Mar 22 12:16 ../drwxr-xr-x 6 1001 1001 4096 Mar 22 12:16 auto/-rw-r--r-- 1 1001 1001 264254 Oct 18 2016 CHANGES-rw-r--r-- 1 1001 1001 402997 Oct 18 2016 CHANGES.rudrwxr-xr-x 2 1001 1001 4096 Mar 22 12:16 conf/-rwxr-xr-x 1 1001 1001 2481 Oct 18 2016 configure*drwxr-xr-x 4 1001 1001 4096 Mar 22 12:16 contrib/drwxr-xr-x 2 1001 1001 4096 Mar 22 12:16 html/-rw-r--r-- 1 1001 1001 1397 Oct 18 2016 LICENSEdrwxr-xr-x 2 1001 1001 4096 Mar 22 12:16 man/-rw-r--r-- 1 1001 1001 49 Oct 18 2016 READMEdrwxr-xr-x 9 1001 1001 4096 Mar 22 12:16 src/ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$ 接下来执行下面的命令：(默认编译为当前路径)1sudo ./configure 紧接着执行：1sudo make 如果运行出现下面的情况，请不要慌：1234make[1]: *** [objs/src/core/ngx_murmurhash.o] Error 1make[1]: Leaving directory &apos;/home/ubuntu/java/developer/setup/nginx-1.10.2&apos;Makefile:8: recipe for target &apos;build&apos; failedmake: *** [build] Error 2 找到我们nginx-1.10.2/objs/Makefile文件，将里面的-Werror删除掉即可：（注意只是删除-Werror，改行其余信息不能动），之后重新运行刚才的代码：1sudo make 如果最后出现下面的说明，就说明可以了，我们继续往后：1make[1]: Leaving directory &apos;/home/ubuntu/java/developer/setup/nginx-1.10.2&apos; 继续执行安装命令：1sudo make install 后面的防火墙配置，我们就专门会说的。接下来配置其详细信息。查看一下它所在的目录： 12ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$ whereis nginxnginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/local/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz 我们进入到/usr/local/nginx下面，然后进入到conf里面，接着编辑主文件：1sudo vim nginx.conf 我们往下拉，我们https server的位置添加下面一行代码：1include vhost/*.conf; （截图是我已经配置好的，目的是让大家对此有一个更清醒的认识。） 紧接着在nginx.conf文件的同级目录下面新建vhost文件夹：1sudo mkdir vhost 进入到该文件夹，添加我们反向代理的文件。 当然你也可以参考这篇文章进行安装：ubuntu安装nginx mysql的安装首先查看是否安装：1sudo rpm -qa| grep mysql-server 没有我们就开始安装：1sudo apt-get install mysql-server 这个我们就直接安装在java这个文件夹里面了。然后修改MySQL的字符集：1sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 在mysqld部分添加下面的代码：12character-set-server=utf8default-character-set=utf8 然后是mysql的启动：12sudo sysv-rc-conf mysqld onsudo sysv-rc-conf --list mysqld 注意一下，我们要的是2-5是开的，0和6是关闭的即可。123ubuntu@VM-0-4-ubuntu:/etc/apt$ sudo sysv-rc-conf --list mysqldmysqld 2:on 3:on 4:on 5:onubuntu@VM-0-4-ubuntu:/etc/apt$ 关于MySQL的防火墙的配置，我们在后面也会说明的。接下来我们开始启动mysql，使用下面的命令：1sudo service mysql restart 如果提示没有sysv-rc-conf，请参看这篇文章：ubuntu 18 当使用命令sudo apt-get install sysv-rc-conf安装不上时，提示“ E: 无法定位软件包问题.如果重启出现Can &#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock &#39;(2) &quot;;的情况，请注意，我们应该查看这篇文章：解决办法。或者这篇文章：办法2开始创建数据库：1create database `secondhandmarket` default character set utf8 COLLATE utf8_general_ci; 插入新用户：1insert into mysql.user(host,user,authentication_string)values(&quot;127.0.0.1&quot;,&quot;envy&quot;,authentication_string(&quot;envy&quot;)); 创建数据表，我们首先查看sql的路径：1/home/ubuntu/java/squirrel/secondhandmarket.sql 然后进入mysql，我们首先使用use secondhandmarket;，接着执行：1source /home/ubuntu/java/squirrel/secondhandmarket.sql 接着查看一下表：123show tables;select * from admin\\G;","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十八）：前台订单获取以及后台管理员订单管理功能开发","slug":"SSM搭建二手市场交易平台（二十八）：前台订单获取以及后台管理员订单管理功能开发","date":"2018-09-05T14:21:06.000Z","updated":"2019-04-15T14:24:13.433Z","comments":true,"path":"2018/09/05/SSM搭建二手市场交易平台（二十八）：前台订单获取以及后台管理员订单管理功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/09/05/SSM搭建二手市场交易平台（二十八）：前台订单获取以及后台管理员订单管理功能开发/","excerpt":"","text":"写在前面本篇我们来完成前台获取订单详情，用户个人中心查看订单以及后台管理员订单管理等功能的开发，里面涉及到的知识点挺多的，需要好好理解。 前台获取订单详情首先我们打开OrderController.java这个文件，里面写入代码如下：12345678910111213141516/*** * 前台获取订单详情 * @author lenovo * */ @RequestMapping(value = &quot;detail.do&quot;) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse detail(HttpSession session,Long orderNo)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台获取订单详情的逻辑 return iOrderService.getOrderDetail(user.getId(),orderNo); &#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse&lt;OrderVo&gt; getOrderDetail(Integer userId, Long orderNo); //前台获取订单详情 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：12345678910111213/*** * 前台获取订单详情 * @author lenovo * */ public ServerResponse&lt;OrderVo&gt; getOrderDetail(Integer userId,Long orderNo)&#123; Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo); if(order !=null)&#123; List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo); OrderVo orderVo =assembleOrderVo(order,orderItemList); return ServerResponse.createBySuccess(orderVo); &#125; return ServerResponse.createByErrorMessage(&quot;没有找到该订单&quot;); &#125; 这样我们前台获取订单详情功能开发就完成了，接下来我们来开发用户个人中心查看订单这个功能。 用户个人中心查看订单首先我们打开OrderController.java这个文件，里面写入代码如下：1234567891011121314151617/*** * 用户个人中心查看订单（需要分页） * @author lenovo * */@RequestMapping(value = &quot;list.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse list(HttpSession session,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum, @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们用户个人中心查看订单的逻辑 return iOrderService.getOrderList(user.getId(),pageNum,pageSize);&#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse&lt;PageInfo&gt; getOrderList(Integer userId, int pageNum, int pageSize); //前台用户个人中心查看订单（需要分页） 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：123456789101112131415161718192021222324252627282930313233343536/*** * 前台用户个人中心查看订单（需要分页） * @author lenovo * */public ServerResponse&lt;PageInfo&gt; getOrderList(Integer userId,int pageNum,int pageSize)&#123; PageHelper.startPage(pageNum,pageSize); List&lt;Order&gt; orderList =orderMapper.selectOrderByUserId(userId); List&lt;OrderVo&gt; orderVoList =assembleOrderVoList(orderList,userId); PageInfo pageResult =new PageInfo(orderList); pageResult.setList(orderVoList); return ServerResponse.createBySuccess(pageResult);&#125;private List&lt;OrderVo&gt; assembleOrderVoList(List&lt;Order&gt; orderList,Integer userId)&#123; //将List&lt;Order&gt; 对象转换为List&lt;OrderVo&gt;对象 List&lt;OrderVo&gt; orderVoList =Lists.newArrayList(); for(Order order:orderList)&#123; List&lt;OrderItem&gt; orderItemList =Lists.newArrayList(); //判断一下是不是管理员，管理员查询时不需要传入参数userId if(userId ==null)&#123; //todo 管理员查询时不需要传入参数userId orderItemList =orderItemMapper.getOrderItemByOrderNo(order.getOrderNo()); &#125;else&#123; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,order.getOrderNo()); &#125; OrderVo orderVo =assembleOrderVo(order,orderItemList); orderVoList.add(orderVo); &#125; return orderVoList;&#125; 注意一下，这里我们管理员查询订单的时候是可以不用userId的，因此需要自己去配置一个查询语句：orderItemList =orderItemMapper.getOrderItemByOrderNo(order.getOrderNo());我们打开OrderItemMapper.java文件，里面新增代码如下：1List&lt;OrderItem&gt; getOrderItemByOrderNo(@Param(value = &quot;orderNo&quot;)Long orderNo); 然后打开OrderItemMapper.xml文件，里面新增代码如下：123456&lt;select id=&quot;getOrderItemByOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;long&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_order_item where order_no =#&#123;orderNo&#125;&lt;/select&gt; 这样我们前台用户个人中心查看订单的功能就实现了，那么也就意味着我们前台关于订单的功能开发也就完成了。接下来我们需要去完成后台管理员关于订单模块的功能。 后台管理员查询订单首先我们打开controller这个包，在backend这个包里面新建OrderManageController.java这个文件，里面写入代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package top.store.controller.backend;import com.github.pagehelper.PageInfo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.pojo.User;import top.store.service.IOrderService;import top.store.service.IUserService;import javax.servlet.http.HttpSession;@Controller@RequestMapping(&quot;/manage/order&quot;)public class OrderManageController &#123; @Autowired private IUserService iUserService; @Autowired private IOrderService iOrderService; /**** * * 后台管理员查看订单（需要分页） * */ @RequestMapping(&quot;list.do&quot;) @ResponseBody //自动序列化json功能 public ServerResponse&lt;PageInfo&gt; orderList(HttpSession session,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum, @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加查看订单（需要分页）的逻辑 return iOrderService.manageList(pageNum,pageSize); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125;&#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse&lt;PageInfo&gt; manageList(int pageNum,int pageSize); //后台管理员查看订单（需要分页） 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：12345678910111213/** * * 后台管理员查询订单(不需要userId) * */public ServerResponse&lt;PageInfo&gt; manageList(int pageNum,int pageSize)&#123; PageHelper.startPage(pageNum,pageSize); List&lt;Order&gt; orderList =orderMapper.selectAllOrder(); List&lt;OrderVo&gt; orderVoList =this.assembleOrderVoList(orderList,null); PageInfo pageResult =new PageInfo(orderList); pageResult.setList(orderVoList); return ServerResponse.createBySuccess(pageResult);&#125; 这样后台管理员查询订单的功能就实现了，接下来我们就去实现后台管理员获取订单详情的功能了。 后台管理员获取订单详情首先我们打开OrderManageController.java这个文件，里面写入代码如下：12345678910111213141516171819202122/**** * * 后台管理员获取订单详情 * */@RequestMapping(&quot;detail.do&quot;)@ResponseBody //自动序列化json功能public ServerResponse&lt;OrderVo&gt; orderDetail(HttpSession session, Long orderNo)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加获取订单详情的逻辑 return iOrderService.manageDetail(orderNo); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125;&#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse&lt;OrderVo&gt; manageDetail(Long orderNo); //后台管理员获取订单详情 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：12345678910111213/** * * 后台管理员获取订单详情 * */public ServerResponse&lt;OrderVo&gt; manageDetail(Long orderNo)&#123; Order order =orderMapper.selectOrderByOrderNo(orderNo); if(order !=null)&#123; List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByOrderNo(orderNo); OrderVo orderVo =assembleOrderVo(order,orderItemList); return ServerResponse.createBySuccess(orderVo); &#125; return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);&#125; 这样后台管理员获取订单详情的功能就实现了，接下来我们就去实现后台管理员搜索订单的功能。 后台管理员搜索订单首先我们打开OrderManageController.java这个文件，里面写入代码如下：12345678910111213141516171819202122/**** * * 后台管理员搜索订单(有分页) * */ @RequestMapping(&quot;search.do&quot;) @ResponseBody //自动序列化json功能 public ServerResponse&lt;PageInfo&gt; orderSearch(HttpSession session, Long orderNo,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum, @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加搜索订单的逻辑 return iOrderService.manageSearch(orderNo,pageNum,pageSize); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse&lt;PageInfo&gt; manageSearch(Long orderNo,int pageNum,int pageSize); //后台管理员搜索订单(有分页) 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：123456789101112131415161718/**** * * 后台管理员搜索订单(有分页) * */ public ServerResponse&lt;PageInfo&gt; manageSearch(Long orderNo,int pageNum,int pageSize)&#123; PageHelper.startPage(pageNum,pageSize); Order order =orderMapper.selectOrderByOrderNo(orderNo); if(order !=null)&#123; List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByOrderNo(orderNo); OrderVo orderVo =assembleOrderVo(order,orderItemList); PageInfo pageResult =new PageInfo(Lists.newArrayList(order)); pageResult.setList(Lists.newArrayList(orderVo)); return ServerResponse.createBySuccess(pageResult); &#125; return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;); &#125; 这样后台管理员搜索订单的功能就实现了，接下来我们就去实现后台管理员订单发货的功能。 后台管理员订单发货首先我们打开OrderManageController.java这个文件，里面写入代码如下：12345678910111213141516171819202122/**** * * 后台管理员订单发货 * */@RequestMapping(&quot;send_goods.do&quot;)@ResponseBody //自动序列化json功能public ServerResponse&lt;String&gt; OrderSendGoods(HttpSession session, Long orderNo)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加获取订单发货的逻辑 return iOrderService.manageSendGoods(orderNo); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125;&#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse&lt;String&gt; manageSendGoods(Long orderNo); //后台管理员订单发货 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：12345678910111213141516171819/**** * * 后台管理员订单发货 * */public ServerResponse&lt;String&gt; manageSendGoods(Long orderNo)&#123; Order order =orderMapper.selectOrderByOrderNo(orderNo); //判断订单状态是否是已支付，然后进行发货 if(order !=null)&#123; if(order.getStatus()==Const.OrderStatusEnum.PAID.getCode())&#123; order.setStatus(Const.OrderStatusEnum.SHIPPED.getCode()); //修改状态为发货 order.setSendTime(new Date()); //修改发货时间为现在 orderMapper.updateByPrimaryKeySelective(order); //更新该订单信息 return ServerResponse.createBySuccessMassage(&quot;发货成功&quot;); &#125; &#125; return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);&#125; 这样本篇我们关于前台获取订单详情，用户个人中心查看订单以及后台管理员订单管理等功能的开发介绍就到此为止了，接下来是进行各个相关接口的测试。 由于测试比较简单，这里直接附上几张测试截图即可，不作过多说明： 那么到此为止，我们所有的功能都开发完毕，后面就是服务器的配置与部署了。","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十七）：取消订单和获取商品信息功能开发","slug":"SSM搭建二手市场交易平台（二十七）：取消订单和获取商品信息功能开发","date":"2018-09-05T08:21:06.000Z","updated":"2019-04-15T14:22:47.413Z","comments":true,"path":"2018/09/05/SSM搭建二手市场交易平台（二十七）：取消订单和获取商品信息功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/09/05/SSM搭建二手市场交易平台（二十七）：取消订单和获取商品信息功能开发/","excerpt":"","text":"写在前面本篇我们来完成前台取消订单和获取购物车中商品信息等功能的开发，里面涉及到的知识点挺多的，需要好好理解。 前台取消订单功能开发首先我们打开OrderController.java这个文件，里面写入代码如下：12345678910111213141516/*** * 前台取消订单（删除订单） * @author lenovo * */@RequestMapping(value = &quot;cancel.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse cancel(HttpSession session,Long orderNo)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台取消订单（删除订单）的逻辑 return iOrderService.cancel(user.getId(),orderNo);&#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse&lt;String&gt; cancel(Integer userId,Long orderNo); ////前台取消（删除）订单 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：12345678910111213141516171819202122232425/*** * * 前台取消订单（删除订单） */public ServerResponse&lt;String&gt; cancel(Integer userId,Long orderNo)&#123; Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo); if(order ==null)&#123; return ServerResponse.createByErrorMessage(&quot;该用户此订单不存在&quot;); &#125; if(order.getStatus() ==Const.OrderStatusEnum.PAID.getCode())&#123; return ServerResponse.createByErrorMessage(&quot;此订单已付款，无法取消&quot;);//已经付款的订单我们会通过支付宝退款的方式进行解决 &#125; Order updateOrder =new Order(); updateOrder.setId(order.getId()); updateOrder.setStatus(Const.OrderStatusEnum.CANCELED.getCode()); int rowCount =orderMapper.updateByPrimaryKeySelective(updateOrder); if(rowCount&gt;0)&#123; return ServerResponse.createBySuccess(); &#125; return ServerResponse.createByError();&#125; 这样我们前台取消订单功能开发就完成了，接下来我们来开发前台用户查看购物车商品明细这个功能。 前台用户查看购物车商品明细首先我们打开OrderController.java这个文件，里面写入代码如下：1234567891011121314151617/*** * 前台用户查看购物车选中商品明细 * 这里是购物车中已经选中的商品（假设用户购买了10件，已经付款了5件，还有5件是需要留在购物车里面的，然后通过这个接口去进行商品信息的查看） * @author lenovo * */@RequestMapping(value = &quot;get_order_cart_product.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse getOrderCartProduct(HttpSession session)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台用户查看购物车选中商品明细的逻辑 return iOrderService.getOrderCartProduct(user.getId());&#125; 接着打开IOrderService.Java文件，里面新增以下代码：1ServerResponse getOrderCartProduct(Integer userId); //前台用户查看购物车选中商品明细 最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：12345678910111213141516171819202122232425262728293031323334353637/*** * 前台用户查看购物车选中商品明细 * 这里是购物车中已经选中的商品（假设用户购买了10件，已经付款了5件，还有5件是需要留在购物车里面的，然后通过这个接口去进行商品信息的查看） * @author lenovo * */ public ServerResponse getOrderCartProduct(Integer userId)&#123; //这个是我们需要返回的对象 OrderProductVo orderProductVo = new OrderProductVo(); //根据用户id从购物车中获取已经选中的数据（返回结果是Cart类型的list） List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId); //通过前面得到的cartList来获得订单明细表（其实就是子订单） ServerResponse serverResponse =this.getCartOrderItem(userId,cartList); if(!serverResponse.isSuccess())&#123; return serverResponse; &#125; //这里得到的是所有的子订单 List&lt;OrderItem&gt; orderItemList =(List&lt;OrderItem&gt;)serverResponse.getData(); //先创建一个用于存放所有子订单中商品的集合 List&lt;OrderItemVo&gt; orderItemVoList =Lists.newArrayList(); //计算目前已经选中商品的总价 //将各个子订单进行求和，获取订单总价 BigDecimal payment = new BigDecimal(&quot;0&quot;); for(OrderItem orderItem:orderItemList)&#123; payment =BigDecimalUtil.add(payment.doubleValue(),orderItem.getTotalPrice().doubleValue()); orderItemVoList.add(assembleOrderItemVo(orderItem)); &#125; orderProductVo.setProductTotalPrice(payment); orderProductVo.setOrderItemVoList(orderItemVoList); orderProductVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)); return ServerResponse.createBySuccess(orderProductVo); &#125; 注意，在这里我们需要新建一个OrderProductVo.java文件，里面的代码如下：123456789101112131415161718192021222324252627282930313233343536package top.store.vo;import java.math.BigDecimal;import java.util.List;public class OrderProductVo &#123; private List&lt;OrderItemVo&gt; orderItemVoList; private BigDecimal productTotalPrice; private String imageHost; public List&lt;OrderItemVo&gt; getOrderItemVoList() &#123; return orderItemVoList; &#125; public void setOrderItemVoList(List&lt;OrderItemVo&gt; orderItemVoList) &#123; this.orderItemVoList = orderItemVoList; &#125; public BigDecimal getProductTotalPrice() &#123; return productTotalPrice; &#125; public void setProductTotalPrice(BigDecimal productTotalPrice) &#123; this.productTotalPrice = productTotalPrice; &#125; public String getImageHost() &#123; return imageHost; &#125; public void setImageHost(String imageHost) &#123; this.imageHost = imageHost; &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十六）：前台创建订单功能开发","slug":"SSM搭建二手市场交易平台（二十六）：前台创建订单功能开发","date":"2018-09-04T08:21:06.000Z","updated":"2019-04-15T14:21:58.945Z","comments":true,"path":"2018/09/04/SSM搭建二手市场交易平台（二十六）：前台创建订单功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/09/04/SSM搭建二手市场交易平台（二十六）：前台创建订单功能开发/","excerpt":"","text":"写在前面本篇我们来完成订单模模块功能的开发，包括前台和后台开发，里面涉及到的知识点挺多的，需要好好理解。 模块说明本模块具体包括前台和后台开发：前台功能包括：创建订单；商品信息；订单列表；订单详情和取消订单这5个部分，而后台功能则包括：订单列表；订单搜索；订单详情和订单发货这4个部分。 学会技能在本模块中，你将会学到避免业务逻辑中横向越权和纵向越权等安全漏洞；设计实用、安全、扩展性强大的常量、枚举类；订单号生成规则、订单严谨性判断；PJO 和 VO 之间的实际操练以及Mybatis的批量插入等知识。 数据表的设计这里我们会使用到两个数据表，因为订单需要和订单信息绑定在一块： 前台创建订单首先我们打开controller这个包下面的portal包，打开之前的那个OrderController，里面写入以下代码：12345678910111213141516/*** * 前台创建订单 * @author lenovo * */@RequestMapping(value = &quot;create.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse create(HttpSession session,Integer shippingId)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台创建订单的逻辑 return iOrderService.createOrder(user.getId(),shippingId);&#125; 接着打开sevcice包下面的IOrderService.Java文件，里面新增以下代码：1ServerResponse createOrder(Integer userId,Integer shippingId); //前台创建订单 接着打开sevcice包下面的Impl包，我们找到OrderServiceImpl.java文件，里面的新增代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240 /*** * * 前台订单功能开发(代码是从下往上读) * */ public ServerResponse createOrder(Integer userId,Integer shippingId)&#123; //根据用户id从购物车中获取已经选中的数据（返回结果是Cart类型的list） List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId); //计算这个订单的总价 //1、判断返回值是否成功 ServerResponse serverResponse =this.getCartOrderItem(userId,cartList); if(!serverResponse.isSuccess())&#123; return serverResponse; &#125; //2、开始计算总价 List&lt;OrderItem&gt; orderItemList =(List&lt;OrderItem&gt;)serverResponse.getData(); //这里得到的是所有的子订单 BigDecimal payment =this.getOrderTotalPrice(orderItemList); //这里得到的是所有的子订单的总价，也就是订单的总价 //生成订单(将前面的store_order_item表的信息进行汇总，生成store_order表) Order order = this.assembleOrder(userId,shippingId,payment); //判断订单是否为空 if(order==null)&#123; return ServerResponse.createByErrorMessage(&quot;生成订单错误&quot;); &#125; //判断子订单是否为空 if(CollectionUtils.isEmpty(orderItemList))&#123; return ServerResponse.createByErrorMessage(&quot;购物车为空&quot;); &#125; //在前面我们getCartOrderItem这个函数里面，我们就没有对order_no进行配置，现在需要配置了 for(OrderItem orderItem:orderItemList)&#123; orderItem.setOrderNo(order.getOrderNo()); &#125; //mybatis的批量插入(将所有的子订单进行插入,从而生成订单) orderItemMapper.batchInsert(orderItemList); //订单生成成功，我们需要减少商品的库存 this.produceProductStock(orderItemList); //订单生成成功，接着我们需要清空购物车 this.cleanCart(cartList); //然后需要将数据返回给前端 OrderVo orderVo =assembleOrderVo(order,orderItemList); return ServerResponse.createBySuccess(orderVo); &#125; //组装新的付款订单，并返回给前端(记得新建3个Vo对象便于后面进行付款订单的组装，这个付款的订单包含订单信息，子订单信息，收货地址信息) private OrderVo assembleOrderVo(Order order,List&lt;OrderItem&gt; orderItemList)&#123; //下面的信息是订单数据表里面有的信息 OrderVo orderVo =new OrderVo(); orderVo.setOrderNo(order.getOrderNo()); orderVo.setPayment(order.getPayment()); orderVo.setPaymentType(order.getPaymentType()); orderVo.setPaymentTypeDesc(Const.PaymentTypeEnum.codeOf(order.getPaymentType()).getValue()); orderVo.setPostage(order.getPostage()); orderVo.setStatus(order.getStatus()); orderVo.setStatusDesc(Const.OrderStatusEnum.codeOf(order.getStatus()).getValue()); orderVo.setShippingId(order.getShippingId()); //下面的信息是订单数据表里没有的信息，我们需要从之前的收货地址表中获取(记住此订单不是数据库中的store_order这个表) Shipping shipping =shippingMapper.selectByPrimaryKey(order.getShippingId()); if(shipping !=null)&#123; orderVo.setReceiverName(shipping.getReceiverName()); //这里就是说如果新的订单存在，显示它的姓名及信息 orderVo.setShippingVo(assembleShippingVo(shipping)); &#125; //以下是各种时间的转换 orderVo.setPaymentTime(DateTimeUtil.dateToStr(order.getPaymentTime())); orderVo.setEndTime(DateTimeUtil.dateToStr(order.getEndTime())); orderVo.setCreateTime(DateTimeUtil.dateToStr(order.getCreateTime())); orderVo.setCloseTime(DateTimeUtil.dateToStr(order.getCloseTime())); orderVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)); //下面的信息是订单数据表里没有的信息，我们需要从之前的子订单表中获取(记住此订单不是数据库中的store_order这个表) List&lt;OrderItemVo&gt; orderItemVoList =Lists.newArrayList(); for(OrderItem orderItem:orderItemList)&#123; OrderItemVo orderItemVo =assembleOrderItemVo(orderItem); orderItemVoList.add(orderItemVo); &#125; orderVo.setOrderItemVoList(orderItemVoList); return orderVo; &#125; // private OrderItemVo assembleOrderItemVo(OrderItem orderItem)&#123; OrderItemVo orderItemVo =new OrderItemVo(); orderItemVo.setOrderNo(orderItem.getOrderNo()); orderItemVo.setProductId(orderItem.getProductId()); orderItemVo.setProductName(orderItem.getProductName()); orderItemVo.setProductImage(orderItem.getProductImage()); orderItemVo .setCurrentUnitPrice(orderItem.getCurrentUnitPrice()); orderItemVo.setTotalPrice(orderItem.getTotalPrice()); orderItemVo.setQuantity(orderItem.getQuantity()); orderItemVo.setCreateTime(DateTimeUtil.dateToStr(orderItem.getCreateTime())); return orderItemVo; &#125; //通过组装成新的收货地址对象，以便后面的生成新的支付订单使用 private ShippingVo assembleShippingVo(Shipping shipping)&#123; ShippingVo shippingVo =new ShippingVo(); shippingVo.setReceiverAddress(shipping.getReceiverAddress()); shippingVo.setReceiverCity(shipping.getReceiverCity()); shippingVo.setReceiverDistrict(shipping.getReceiverDistrict()); shippingVo.setReceiverMobile(shipping.getReceiverMobile()); shippingVo.setReceiverPhone(shipping.getReceiverPhone()); shippingVo.setReceiverName(shipping.getReceiverName()); shippingVo.setReceiverProvince(shipping.getReceiverProvince()); shippingVo.setReceiverZip(shipping.getReceiverZip()); return shippingVo; &#125; //订单生成成功，接着我们需要清空购物车 private void cleanCart( List&lt;Cart&gt; cartList)&#123; for(Cart cart:cartList)&#123; cartMapper.deleteByPrimaryKey(cart.getId()); &#125; &#125; //订单生成成功，我们需要减少商品的库存 private void produceProductStock(List&lt;OrderItem&gt; orderItemList)&#123; for(OrderItem orderItem:orderItemList)&#123; Product product =productMapper.selectByPrimaryKey(orderItem.getProductId()); product.setStock(product.getStock()-orderItem.getQuantity()); productMapper.updateByPrimaryKeySelective(product); &#125; &#125; //组装订单表（将前面的store_order_item表的信息进行汇总，生成store_order表） private Order assembleOrder(Integer userId,Integer shippingId,BigDecimal payment)&#123; //这里面有三个参数：userId用户id, shippingId收货地址id, payment订单总价 //这个是我们组装成的新的订单 Order order =new Order(); long order_no =this.generateOrderNo(); //这里面的字段请依据store_order进行设置 order.setOrderNo(order_no); order.setStatus(Const.OrderStatusEnum.PAID.getCode()); order.setPostage(0); order.setPaymentType(Const.PaymentTypeEnum.ONLINE_PAY.getCode()); order.setUserId(userId); order.setShippingId(shippingId); order.setPayment(payment); //发货时间：send_time //交易完成时间：end_time //交易关闭时间：close_time // 上面的时间目前先不进行，后面会进行配置 //将新的订单插入到数据库中 int rowCount = orderMapper.insert(order); if(rowCount&gt;0)&#123; return order; &#125; return null; &#125; // 订单号order_no的生成 //订单号的生成是非常重要的，这个设计的好坏关系到以后做分布式，高并发的情况非常有效，这里采用时间戳取余的方式 private long generateOrderNo()&#123; long currentTime =System.currentTimeMillis();// return currentTime+currentTime%10; 这种方法是可以的，但是在高并发的时候，可能是同时进行的，因此时间有可能一样,那样我们对orderNum进行唯一索引的时候就会失败 return currentTime+new Random().nextInt(100); //加上一个100以内的随机数 &#125; //用于计算订单总价 private BigDecimal getOrderTotalPrice(List&lt;OrderItem&gt; orderItemList)&#123; //将各个子订单进行求和，获取订单总价 BigDecimal payment =new BigDecimal(&quot;0&quot;); for(OrderItem orderItem:orderItemList)&#123; payment= BigDecimalUtil.add(payment.doubleValue(),orderItem.getTotalPrice().doubleValue()); //这里默认就是0+一个订单 &#125; return payment; &#125; //用于返回新的子订单明细（其实就是返回一个store_order_item子订单对象） private ServerResponse getCartOrderItem(Integer userId,List&lt;Cart&gt; cartList)&#123; //这个是我们组装成的新的子订单 List&lt;OrderItem&gt; orderItemList =Lists.newArrayList(); if(CollectionUtils.isEmpty(cartList))&#123; return ServerResponse.createByErrorMessage(&quot;购物车为空&quot;); &#125; //校验购物车的数据，包括产品的状态和数量 for(Cart cartItem:cartList)&#123; //校验产品的状态是否是在售状态 Product product =productMapper.selectByPrimaryKey(cartItem.getProductId()); if(Const.ProductStatusEnum.ON_SALE.getCode() != product.getStatus() )&#123; return ServerResponse.createByErrorMessage(&quot;产品&quot;+product.getName()+&quot;不是在线售卖状态&quot;); &#125; //校验产品的库存 if(cartItem.getQuantity()&gt;product.getStock())&#123; return ServerResponse.createByErrorMessage(&quot;产品&quot;+product.getName()+&quot;库存不足&quot;); &#125; //开始组装成我们的订单对象(除了order_no这个字段需要我们后面设置以外，其余需要我们在这里进行组装也就是order_item表中的信息) OrderItem orderItem =new OrderItem(); //order_no这个字段需要我们后面设置 orderItem.setUserId(userId); orderItem.setProductId(product.getId()); orderItem.setProductName(product.getName()); orderItem.setProductImage(product.getMainImage()); orderItem.setCurrentUnitPrice(product.getPrice()); orderItem.setQuantity(cartItem.getQuantity()); orderItem.setTotalPrice(BigDecimalUtil.mut(product.getPrice().doubleValue(),cartItem.getQuantity())); orderItemList.add(orderItem); &#125; return ServerResponse.createBySuccess(orderItemList); &#125; 上面的代码很多，但是都是为了后面的调用方便而进行了封装。下面分别解释上面代码的含义（记住上面代码你必须是从下往上读，因为我们是随着开发的需要而逐渐增加代码的）1、首先我们是要创建订单，因此必须根据传入的用户id来去购物车(store_cart)这个数据表中查找相应的购物车对象，其实就是很多种商品，你知道的一个用户可能存在多个购物车商品，因此返回的是一个购物车list：1List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId); 我们需要打开CartMapper.java文件，里面新增代码如下：1List&lt;Cart&gt; selectCheckedCartByUserId(Integer userId); 然后打开CartMapper.xml文件，里面新增代码如下：1234567&lt;select id=&quot;selectCheckedCartByUserId&quot; parameterType=&quot;int&quot; resultMap=&quot;BaseResultMap&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_cart where user_id =#&#123;userId&#125; and checked =1 &lt;/select&gt; 2、然后就计算刚才那些购物车商品的总价，而这个过程比较复杂，需要创建一个getCartOrderItem函数，用于返回新的子订单明细（其实就是返回一个store_order_item子订单对象），当然在这个函数里面，你需要校验购物车的数据，包括产品的状态和库存数量。3、通过第二步，我们得到了所有的子订单，现在去定义一个getOrderTotalPrice函数，去计算所有的子订单的总价，也就是订单的总价，具体的代码参看上面。4、接着我们需要生成订单号，订单号的生成是非常重要的，这个设计的好坏关系到以后做分布式，高并发的情况非常有效，这里采用时间戳+随机函数的方式：新建一个用于生成订单号的generateOrderNo函数，我们的核心就是：1currentTime+new Random().nextInt(100); 5、将第3步中的所有子订单进行合并，生成新的支付订单，你知道的支付订单里面包含用户信息，商品信息以及收货地址。首先我们需要判断判断订单是否为空以及子订单是否为空:我们新建一个assembleOrder函数，用于组装订单表，这里面有三个参数：userId用户id, shippingId收货地址id, payment订单总价。在order.setStatus(Const.OrderStatusEnum.PAID.getCode());和order.setPaymentType(Const.PaymentTypeEnum.ONLINE_PAY.getCode());的时候，我们需要打开Const.java文件，在OrderStatusEnum这个枚举类添加codeOf方法：12345678public static OrderStatusEnum codeOf(int code)&#123; for(OrderStatusEnum orderStatusEnum:values())&#123; if(orderStatusEnum.getCode() ==code)&#123; return orderStatusEnum; &#125; &#125; throw new RuntimeException(&quot;没有找到对应的枚举&quot;); &#125; 以及新建一个枚举类PaymentTypeEnum：123456789101112131415161718192021222324252627282930313233343536373839//支付类型（目前暂支持线上支付，后面会进行扩展） public enum PaymentTypeEnum&#123; ONLINE_PAY(1,&quot;在线支付&quot;) ; private String value; private int code; PaymentTypeEnum(int code,String value)&#123; this.code =code; this.value=value; &#125; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125; public static PaymentTypeEnum codeOf(int code)&#123; for(PaymentTypeEnum paymentTypeEnum:values())&#123; if(paymentTypeEnum.getCode() ==code)&#123; return paymentTypeEnum; &#125; &#125; throw new RuntimeException(&quot;没有找到对应的枚举&quot;); &#125; &#125; 这里在注意一下时间字段，我们这里没有进行配置，我们后面会进行配置。 6、然后就是将新的订单插入到数据库中。mybatis的批量插入(将所有的子订单进行插入,从而生成订单)，我们需要打开OrderItemMapper.java文件，里面新增代码如下：1void batchInsert(@Param(value = &quot;orderItemList&quot;) List&lt;OrderItem&gt; orderItemList); 记住在mybatis里面使用多个参数时，需要使用Param注解。 紧接着，打开OrderItemMapper.xml文件，里面新增代码如下：123456789101112 &lt;insert id=&quot;batchInsert&quot; parameterType=&quot;list&quot;&gt; insert into store_order_item (id, order_no,user_id, product_id, product_name, product_image, current_unit_price, quantity, total_price, create_time, update_time) values &lt;foreach collection=&quot;orderItemList&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;,&quot;&gt; ( #&#123;item.id&#125;,#&#123;item.orderNo&#125;,#&#123;item.userId&#125;,#&#123;item.productId&#125;,#&#123;item.productName&#125;,#&#123;item.productImage&#125;,#&#123;item.currentUnitPrice&#125;,#&#123;item.quantity&#125;,#&#123;item.totalPrice&#125;,now(),now() ) &lt;/foreach&gt;&lt;/insert&gt; 这里面采用了foreach 进行循环遍历进行插入。6、订单生成以后，我们需要清空购物车和减少商品的库存。分别去定义cleanCart和produceProductStock这两个函数，去实现相关的逻辑。7、接下来我们要做的就是将数据以Json形式返回给前端，为了更好的实现这个功能，我们需要新建三个Vo文件，我们打开Vo这个包，新建OrderVo.java文件，里面的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194package top.store.vo;import top.store.pojo.Shipping;import top.store.service.ShippingVo;import java.math.BigDecimal;import java.util.Date;import java.util.List;public class OrderVo &#123; private Long orderNo; private BigDecimal payment; private Integer paymentType; private String paymentTypeDesc; private Integer postage; private Integer status; private String statusDesc; //各种时间，都采用String类型 private String paymentTime; private String sendTime; private String endTime; private String closeTime; private String createTime; private String updateTime; //子订单的明细（另外新建一个OrderItemVo用于组装需要显示的信息） private List&lt;OrderItemVo&gt; orderItemVoList; private String imageHost; private Integer shippingId; private String receiverName; //购物车明细（另外新建一个ShippingVo用于组装需要显示的信息） private ShippingVo shippingVo; public Long getOrderNo() &#123; return orderNo; &#125; public void setOrderNo(Long orderNo) &#123; this.orderNo = orderNo; &#125; public BigDecimal getPayment() &#123; return payment; &#125; public void setPayment(BigDecimal payment) &#123; this.payment = payment; &#125; public Integer getPaymentType() &#123; return paymentType; &#125; public void setPaymentType(Integer paymentType) &#123; this.paymentType = paymentType; &#125; public String getPaymentTypeDesc() &#123; return paymentTypeDesc; &#125; public void setPaymentTypeDesc(String paymentTypeDesc) &#123; this.paymentTypeDesc = paymentTypeDesc; &#125; public Integer getPostage() &#123; return postage; &#125; public void setPostage(Integer postage) &#123; this.postage = postage; &#125; public Integer getStatus() &#123; return status; &#125; public void setStatus(Integer status) &#123; this.status = status; &#125; public String getStatusDesc() &#123; return statusDesc; &#125; public void setStatusDesc(String statusDesc) &#123; this.statusDesc = statusDesc; &#125; public String getPaymentTime() &#123; return paymentTime; &#125; public void setPaymentTime(String paymentTime) &#123; this.paymentTime = paymentTime; &#125; public String getSendTime() &#123; return sendTime; &#125; public void setSendTime(String sendTime) &#123; this.sendTime = sendTime; &#125; public String getEndTime() &#123; return endTime; &#125; public void setEndTime(String endTime) &#123; this.endTime = endTime; &#125; public String getCloseTime() &#123; return closeTime; &#125; public void setCloseTime(String closeTime) &#123; this.closeTime = closeTime; &#125; public String getCreateTime() &#123; return createTime; &#125; public void setCreateTime(String createTime) &#123; this.createTime = createTime; &#125; public String getUpdateTime() &#123; return updateTime; &#125; public void setUpdateTime(String updateTime) &#123; this.updateTime = updateTime; &#125; public List&lt;OrderItemVo&gt; getOrderItemVoList() &#123; return orderItemVoList; &#125; public void setOrderItemVoList(List&lt;OrderItemVo&gt; orderItemVoList) &#123; this.orderItemVoList = orderItemVoList; &#125; public String getImageHost() &#123; return imageHost; &#125; public void setImageHost(String imageHost) &#123; this.imageHost = imageHost; &#125; public Integer getShippingId() &#123; return shippingId; &#125; public void setShippingId(Integer shippingId) &#123; this.shippingId = shippingId; &#125; public String getReceiverName() &#123; return receiverName; &#125; public void setReceiverName(String receiverName) &#123; this.receiverName = receiverName; &#125; public ShippingVo getShippingVo() &#123; return shippingVo; &#125; public void setShippingVo(ShippingVo shippingVo) &#123; this.shippingVo = shippingVo; &#125;&#125; 接着新建OrderItemVo.java文件，里面的代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889package top.store.vo;import java.math.BigDecimal;import java.util.Date;public class OrderItemVo &#123; //从store_order_item表里面选择我们将要在订单中显示的字段 private Long orderNo; private Integer productId; private String productName; private String productImage; private BigDecimal currentUnitPrice; private Integer quantity; private BigDecimal totalPrice; private String createTime; public Long getOrderNo() &#123; return orderNo; &#125; public void setOrderNo(Long orderNo) &#123; this.orderNo = orderNo; &#125; public Integer getProductId() &#123; return productId; &#125; public void setProductId(Integer productId) &#123; this.productId = productId; &#125; public String getProductName() &#123; return productName; &#125; public void setProductName(String productName) &#123; this.productName = productName; &#125; public String getProductImage() &#123; return productImage; &#125; public void setProductImage(String productImage) &#123; this.productImage = productImage; &#125; public BigDecimal getCurrentUnitPrice() &#123; return currentUnitPrice; &#125; public void setCurrentUnitPrice(BigDecimal currentUnitPrice) &#123; this.currentUnitPrice = currentUnitPrice; &#125; public Integer getQuantity() &#123; return quantity; &#125; public void setQuantity(Integer quantity) &#123; this.quantity = quantity; &#125; public BigDecimal getTotalPrice() &#123; return totalPrice; &#125; public void setTotalPrice(BigDecimal totalPrice) &#123; this.totalPrice = totalPrice; &#125; public String getCreateTime() &#123; return createTime; &#125; public void setCreateTime(String createTime) &#123; this.createTime = createTime; &#125;&#125; 最后新建ShippingVo.java文件，里面的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package top.store.vo;public class ShippingVo &#123; //从store_shipping表里面选择我们将要在订单中显示的字段 private String receiverName; private String receiverPhone; private String receiverMobile; private String receiverProvince; private String receiverCity; private String receiverDistrict; private String receiverAddress; private String receiverZip; public String getReceiverName() &#123; return receiverName; &#125; public void setReceiverName(String receiverName) &#123; this.receiverName = receiverName; &#125; public String getReceiverPhone() &#123; return receiverPhone; &#125; public void setReceiverPhone(String receiverPhone) &#123; this.receiverPhone = receiverPhone; &#125; public String getReceiverMobile() &#123; return receiverMobile; &#125; public void setReceiverMobile(String receiverMobile) &#123; this.receiverMobile = receiverMobile; &#125; public String getReceiverProvince() &#123; return receiverProvince; &#125; public void setReceiverProvince(String receiverProvince) &#123; this.receiverProvince = receiverProvince; &#125; public String getReceiverCity() &#123; return receiverCity; &#125; public void setReceiverCity(String receiverCity) &#123; this.receiverCity = receiverCity; &#125; public String getReceiverDistrict() &#123; return receiverDistrict; &#125; public void setReceiverDistrict(String receiverDistrict) &#123; this.receiverDistrict = receiverDistrict; &#125; public String getReceiverAddress() &#123; return receiverAddress; &#125; public void setReceiverAddress(String receiverAddress) &#123; this.receiverAddress = receiverAddress; &#125; public String getReceiverZip() &#123; return receiverZip; &#125; public void setReceiverZip(String receiverZip) &#123; this.receiverZip = receiverZip; &#125;&#125; 接着我们需要定义三个函数分别用于组装我们在支付订单里面的信息，为什么这么做？那是因为我们的支付订单里面包含的只是订单表，子订单表（订单明细表）和收货地址表中的部分信息，因此我们需要进行抽离封装成一个我们用在支付订单里面的信息。 这个很好理解，assembleShippingVo函数传入shipping对象进行组装；assembleOrderItemVo函数传入orderItem对象进行组装；assembleOrderVo函数传入order和orderItemList对象进行组装。 这样最后将组装成的新的支付订单对象返回给前端，就完成了我们创建订单的逻辑。","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十五）：支付宝支付回调功能开发","slug":"SSM搭建二手市场交易平台（二十五）：支付宝支付回调功能开发","date":"2018-09-03T10:21:06.000Z","updated":"2019-04-15T14:21:00.941Z","comments":true,"path":"2018/09/03/SSM搭建二手市场交易平台（二十五）：支付宝支付回调功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/09/03/SSM搭建二手市场交易平台（二十五）：支付宝支付回调功能开发/","excerpt":"","text":"写在前面本篇来完成支付宝支付回调的功能，其实这个是非常简单的，但是我专门用一篇笔记来记录主要就是希望自己可以好好的进行完善。 支付宝支付回调打开OrderController.java文件，里面新增代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/*** * 支付宝回调功能开发 * @author envy * */ @RequestMapping(value = &quot;alipay_callback.do&quot;) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public Object alipayCallback(HttpServletRequest request) &#123; //利用guava封装的map进行参数存储，记住这个是新的经过下面的代码拼接以后的map Map&lt;String,String&gt; params = Maps.newHashMap(); Map requestParams= request.getParameterMap(); //将异步通知中收到的待验证所有参数都存放到map中 for(Iterator iter=requestParams.keySet().iterator();iter.hasNext();)&#123; String name =(String)iter.next(); String [] values =(String [])requestParams.get(name); String valueStr =&quot;&quot;; for(int i=0;i&lt;values.length;i++)&#123; //判断值的长度，若为1，则直接返回values[0]，若不是那我们则需要在各个参数值之间添加逗号用于区分 valueStr =(i==values.length-1)?valueStr+values[i]:valueStr+values[i]+&quot;,&quot;; &#125; //其实这里就是将前面的map进行处理,然后变成我们所需要的params params.put(name,valueStr); &#125; logger.info(&quot;支付宝回调，sign:&#123;&#125;,trade_status:&#123;&#125;,参数:&#123;&#125;&quot;,params.get(&quot;sign&quot;),params.get(&quot;trade_status&quot;),params.toString()); //接下来的代码是非常重要的，因为它需要对我们的回调结果进行验证，并且还要避免重复通知 params.remove(&quot;sign_type&quot;); //注意这里其余参数的获取是不需要再次构建方法的，你是可以直接通过Configs来获得的 try &#123; boolean alipayRSACheckedV2 = AlipaySignature.rsaCheckV2(params, Configs.getPublicKey(),&quot;utf-8&quot;,Configs.getSignType()); if(!alipayRSACheckedV2)&#123; return ServerResponse.createByErrorMessage(&quot;非法请求，验证不通过，再恶意请求将报警找网警。&quot;); &#125; &#125; catch (AlipayApiException e) &#123; logger.error(&quot;支付宝验证回调异常&quot;, e); &#125; //商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号， // 并判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额）， // 同时需要校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方 // （有的时候，一个商户可能有多个seller_id/seller_email），上述有任何一个验证不通过， // 则表明本次通知是异常通知，务必忽略。在上述验证通过后商户必须根据支付宝不同类型的业务通知， // 正确的进行不同的业务处理，并且过滤重复的通知结果数据。在支付宝的业务通知中， // 只有交易通知状态为TRADE_SUCCESS或TRADE_FINISHED时，支付宝才会认定为买家付款成功。 //进行参数验证 ServerResponse serverResponse =iOrderService.aliCallback(params); if(serverResponse.isSuccess())&#123; return Const.AlipayCallback.RESPONSE_SUCCESS; &#125; return Const.AlipayCallback.RESPONSE_FAILED; &#125; 接着打开OrderServiceImpl.java文件，里面写入以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/*** * * 支付宝回调验证 * * 验证参数 : * out_trade_no:商户订单号 * trade_no:支付宝交易号; * trade_status:交易状态 */ public ServerResponse aliCallback(Map&lt;String,String&gt; params)&#123; Long orderNo = Long.parseLong(params.get(&quot;out_trade_no&quot;)); String tradeNo =params.get(&quot;trade_no&quot;); String tradeStatus =params.get(&quot;trade_status&quot;); //通过商户订单号来查询订单 Order order =orderMapper.selectOrderByOrderNo(orderNo); if(order ==null)&#123; return ServerResponse.createByErrorMessage(&quot;非光明二手交易市场的订单，回调忽略&quot;); &#125; //判断是否进行了重复调用（只有已取消和未支付这两种不会引起重复调用） if(order.getStatus()&gt;= Const.OrderStatusEnum.PAID.getCode())&#123; return ServerResponse.createBySuccess(&quot;支付宝重复调用&quot;); &#125; //当没有进行重复调用的时候，我们需要通过判断来设置它的支付状态 if(Const.AlipayCallback.RESPONSE_SUCCESS.equals(tradeStatus))&#123; //设置支付时间，从params里面获取,查看支付宝文档发现它其实是一个gmt_payment和时间工具类里面的配置一样 order.setPaymentTime(DateTimeUtil.strToDate(params.get(&quot;gmt_payment&quot;))); order.setStatus(Const.OrderStatusEnum.PAID.getCode()); //更新订单状态 orderMapper.updateByPrimaryKeySelective(order); &#125; //组装一个payInfo对象 /*** *下面这些字段都是payInfo支付信息表里面的字段 * user_id, 用户id * order_no, 商户订单号 * pay_platform, 支付平台 * platform_number, 交易号(tradeNo) *platform_status, 交易状态（tradeStatus） */ PayInfo payInfo =new PayInfo(); payInfo.setId(order.getUserId()); payInfo.setOrderNo(order.getOrderNo()); payInfo.setPayPlatform(Const.PayPlatformEnum.ALIPAY.getCode()); payInfo.setPlatformNumber(tradeNo); payInfo.setPlatformStatus(tradeStatus); payInfoMapper.insert(payInfo); return ServerResponse.createBySuccess(); &#125; 几点说明：1、看到这行Order order =orderMapper.selectOrderByOrderNo(orderNo);代码就说明我们需要去OrderMapper.java文件里面添加一行代码：1Order selectOrderByOrderNo(Long orderNo); 紧接着我们需要打开OrderMapper.xml文件，里面新增代码如下：123456&lt;select id=&quot;selectOrderByOrderNo&quot; parameterType=&quot;long&quot; resultMap=&quot;BaseResultMap&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_order where order_no =#&#123;orderNo&#125;&lt;/select&gt; 2、在进行是否重复调用的判断时，我们需要去Const里面新增支付状态的枚举类：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//订单状态 public enum OrderStatusEnum&#123; CANCELED(0,&quot;已取消&quot;), NO_PAY(10,&quot;未支付&quot;), PAID(20,&quot;已付款&quot;), SHIPPED(40,&quot;已发货&quot;), ORDER_SUCCESS(50,&quot;订单完成&quot;), ORDER_CLOSE(60,&quot;订单关闭&quot;); private String value; private int code; OrderStatusEnum(int code,String value)&#123; this.code =code; this.value=value; &#125; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125; &#125; public interface AlipayCallback&#123; String TRADE_STATUS_WAIT_BUYER_PAY = &quot;WAIT_BUYER_PAY&quot;; String TRADE_STATUS_TRADE_SUCCESS = &quot;TRADE_SUCCESS&quot;; String RESPONSE_SUCCESS = &quot;success&quot;; String RESPONSE_FAILED = &quot;failed&quot;; &#125; //支付平台（目前暂支持支付宝，后面会进行扩展） public enum PayPlatformEnum&#123; ALIPAY(1,&quot;支付宝&quot;) ; private String value; private int code; PayPlatformEnum(int code,String value)&#123; this.code =code; this.value=value; &#125; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125; &#125; 这后面的代码其实就是后面即将会使用到的订单状态和支付平台这个两个枚举类，里面设置了value和code这个两个字段，以及它的有参构造，getter和setter方法。3、这行代码order.setPaymentTime(DateTimeUtil.strToDate(params.get(&quot;gmt_payment&quot;)));是用来设置支付时间，从params里面获取,查看支付宝文档发现它其实是一gmt_payment和时间工具类里面的配置一样： 这是我们DateUtil的工具类里面的配置： 12//定义一下我们的日期格式public static final String STANDARD_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;; 4、然后通过我们获取到的信息，我们需要组装成一个payInfo对象，里面的数据都是我们自己设定的，经过了严格的判断。 最后打开IOrderService.java文件，添加接口抽象方法，以供controller调用：1ServerResponse aliCallback(Map&lt;String,String&gt; params); //支付宝回调验证 关于其他未说明的事情请参看下面的注意事项。 注意事项在对支付宝回调结果进行检验的时候，我们可以单击查看支付宝的开发文档，我们拉到底部： shift+ctrl+T调出类搜索框，搜索alipaysignature，接着alt+数字7（不是F7）查看该类所有方法，因为支付宝现在只提供RSA2(SHA256)密钥这种方法，因此直接查看图中所示方法rsaCheckV2： 你发现只去除了sign，并没有移除sign_type，因此我们后面需要自己进行移除。 然后你在支付宝属性配置文件里面看到了,RSA2-&gt;SHA256withRsa因此我们需要查看CheckContent的rsa类型，我们发现rsa256CheckContent这个函数里面的就是采用SIGN_SHA256RSA_ALGORITHMS来进行验证的。还有在前面我们看到了charset这个设置字符集的字段。我们搜索AlipayTradeServiceImpl.java文件，我们发现了图中所示的信息： 也就是说如果你不传入charset对应的值，那就默认使用utf-8编码，这个是非常有用的。 因此，总结一下就是我们后面会调用AlipaySignature的rsaCheckV2方法，而且该方法是含有sign_type参数的：1234567 public static boolean rsaCheckV2(Map&lt;String, String&gt; params, String publicKey, String charset,String signType) throws AlipayApiException &#123; String sign = params.get(&quot;sign&quot;); String content = getSignCheckContentV2(params); return rsaCheck(content, sign, publicKey, charset,signType);&#125; 注意上的publicKey是指图中的这个： 你填的也就是这个： com.alipay.demo.trade.config这个包里面就提供了用于获取该zfbinfo.properies里面配置信息的方法： 现在我们需要提供给前端，轮询查询订单的支付状态，我们在二维码扫码支付完成以后，前台会调用我们这个接口，查看是否支付成功了。 前台轮询查询订单状态打开OrderController.java文件，里面新增代码如下：12345678910111213141516171819202122/*** * 前台轮询查询订单状态 * @author envy * */@RequestMapping(value = &quot;query_order_pay_status.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;Boolean&gt; queryOrderPayStatus(HttpSession session,Long orderNo) &#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台轮询查询订单状态的逻辑 ServerResponse serverResponse= iOrderService.queryOrderPayStatus(user.getId(),orderNo); if (serverResponse.isSuccess()) &#123; return ServerResponse.createBySuccess(true); &#125; return ServerResponse.createBySuccess(false);&#125; 接着打开OrderServiceImpl.java文件，里面写入以下代码：123456789101112131415161718/*** * 前台轮询查询订单状态 * @author envy * */ public ServerResponse queryOrderPayStatus(Integer userId, Long orderNo)&#123; //查询订单是否存在 Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo); //如果订单不存在的话 if(order ==null)&#123; return ServerResponse.createByErrorMessage(&quot;对不起，该用户没有该订单&quot;); &#125; //存在的话，就判断订单的状态，此时则表明已经支付了 if(order.getStatus()&gt;= Const.OrderStatusEnum.PAID.getCode())&#123; return ServerResponse.createBySuccess(); &#125; return ServerResponse.createByError(); &#125; 最后打开IOrderService.java文件，添加接口抽象方法，以供controller调用：1ServerResponse queryOrderPayStatus(Integer userId, Long orderNo); //前台轮询查询订单状态 这样我们关于支付宝的3个接口的开发就都完成了，然后就是接口测试了，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了。感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十四）：支付宝支付功能开发","slug":"SSM搭建二手市场交易平台（二十四）：支付宝支付功能开发","date":"2018-09-02T05:21:06.000Z","updated":"2019-04-15T14:20:15.724Z","comments":true,"path":"2018/09/02/SSM搭建二手市场交易平台（二十四）：支付宝支付功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/09/02/SSM搭建二手市场交易平台（二十四）：支付宝支付功能开发/","excerpt":"","text":"写在前面前面那些都是一些铺垫，从现在开始我们正式进入到项目的支付宝实战阶段。 准备工作首先我们将自己在支付宝里配置的zfbinfo.properties文件复制到resources文件里面，然后将支付宝官方demo中提供的4个含有sdk的jar包复制到图中所示的lib包里面。 你也看到了，demo中不止含有那些sdk的包，还有其他的包： 这里我们就不全部拷贝了，而是通过配置文件，将包的版本信息添加到配置文件里面，然后直接从中央仓库里下载即可，其实开始的pom.xml里面就已经全部包含了： 所以这一步你其实是可以跳过的。接着打开main包下面的java包，在里面新建一个包com.alipay.demo.trade，然后将demo里面的Main和DemoHbRunner这两个文件复制过去。你会发现所有文件都报红了，那是因为我们前面4个jar包没有进行导入。打开File–&gt;project Structure–&gt;Modules，然后按照图中所示进行操作： 还有这个pom.xml的底部的这行代码，还有为什么将之前的jar包都放在lib文件夹下面，那是因为服务器只会到WEB-INF下面的lib文件去找jar包，而不是其他的地方，因此我们只能将其放在lib包下面。 然后运行一下Main函数，检测一下我们的类和包是否加载正确：（出现支付宝预下单成功的字段就代表成功了，如果没有请参考上一篇笔记进行检查） 好了现在正式进入到订单模块的开发，相应表的设计如下所示： 支付开发首先我们打开controller这个包下面的portal包，在里面新建一个OrderController.java文件，里面写入以下代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package top.store.controller.portal;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.pojo.User;import top.store.service.IOrderService;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;/** * * @author Envy * */@Controller@RequestMapping(&quot;/order/&quot;)public class OrderController &#123; @Autowired private IOrderService iOrderService; /*** * 支付宝支付功能开发 * @author envy * */ @RequestMapping(value = &quot;pay.do&quot;) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse pay(HttpSession session, Long orderNo, HttpServletRequest request)&#123; //这里传入三个参数，第一个是需要用户登录，第二个则是传入订单号，第三个则是利用它来获取我们servlet的上下文，拿到我们upload的文件夹，将自动生成的二维码上传到ftp服务器上面 //然后我们就会返回给前端一个二维码的地址，前端将二维码进行展示，用于用户进行扫码和支付 //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //从request中获取我们的服务器上图片的地址。 String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;); //这里的path后面是没有斜线的就是只有upload return iOrderService.pay(orderNo,user.getId(),path); &#125;&#125; 接着打开sevcice包下面的Impl包，我们新建一个接口的实现类OrderServiceImpl.java文件，里面的代码如下：package top.store.service.impl;import com.alipay.api.AlipayResponse;import com.alipay.api.response.AlipayTradePrecreateResponse;import com.alipay.demo.trade.config.Configs;import com.alipay.demo.trade.model.ExtendParams;import com.alipay.demo.trade.model.GoodsDetail;import com.alipay.demo.trade.model.builder.AlipayTradePrecreateRequestBuilder;import com.alipay.demo.trade.model.result.AlipayF2FPrecreateResult;import com.alipay.demo.trade.service.AlipayTradeService;import com.alipay.demo.trade.service.impl.AlipayTradeServiceImpl;import com.alipay.demo.trade.utils.ZxingUtils;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.store.common.ServerResponse;import top.store.dao.OrderItemMapper;import top.store.dao.OrderMapper;import top.store.pojo.Order;import top.store.pojo.OrderItem;import top.store.service.IOrderService;import top.store.util.BigDecimalUtil;import top.store.util.FTPUtil;import top.store.util.PropertiesUtil;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Map;/** * @author Envy * */@Service(&quot;iOrderService&quot;)public class OrderServiceImpl implements IOrderService &#123; //输出打印日志 private static final Logger logger = LoggerFactory.getLogger(OrderServiceImpl.class); @Autowired private OrderMapper orderMapper; @Autowired private OrderItemMapper orderItemMapper; // 支付宝当面付2.0服务 private static AlipayTradeService tradeService; public ServerResponse pay(Long orderNo,Integer userId,String path)&#123; Map&lt;String, String&gt; resultMap = Maps.newHashMap(); //根据用户Id和订单号orderNo来查询订单是否存在，如果不存在 Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo); if(order ==null)&#123; return ServerResponse.createByErrorMessage(&quot;对不起，该用户没有该订单&quot;); &#125; resultMap.put(&quot;orderNo&quot;,String.valueOf(order.getOrderNo())); // (必填) 商户网站订单系统中唯一订单号，64个字符以内，只能包含字母、数字、下划线， // 需保证商户系统端不能重复，建议通过数据库sequence生成， String outTradeNo = order.getOrderNo().toString(); // (必填) 订单标题，粗略描述用户的支付目的。如“xxx品牌xxx门店消费” String subject = new StringBuilder().append(&quot;光明二手商城扫码支付，订单号:&quot;).append(outTradeNo).toString(); // (必填) 订单总金额，单位为元，不能超过1亿元 // 如果同时传入了【打折金额】,【不可打折金额】,【订单总金额】三者,则必须满足如下条件:【订单总金额】=【打折金额】+【不可打折金额】 String totalAmount = order.getPayment().toString(); // (必填) 付款条码，用户支付宝钱包手机app点击“付款”产生的付款条码 String authCode = &quot;用户自己的支付宝付款码&quot;; // 条码示例，286648048691290423 // (可选，根据需要决定是否使用) 订单可打折金额，可以配合商家平台配置折扣活动，如果订单部分商品参与打折，可以将部分商品总价填写至此字段，默认全部商品可打折 // 如果该值未传入,但传入了【订单总金额】,【不可打折金额】 则该值默认为【订单总金额】- 【不可打折金额】 // String discountableAmount = &quot;1.00&quot;; // // (可选) 订单不可打折金额，可以配合商家平台配置折扣活动，如果酒水不参与打折，则将对应金额填写至此字段 // 如果该值未传入,但传入了【订单总金额】,【打折金额】,则该值默认为【订单总金额】-【打折金额】 String undiscountableAmount = &quot;0.0&quot;; // 卖家支付宝账号ID，用于支持一个签约账号下支持打款到不同的收款账号，(打款到sellerId对应的支付宝账号) // 如果该字段为空，则默认为与支付宝签约的商户的PID，也就是appid对应的PID String sellerId = &quot;&quot;; // 订单描述，可以对交易或商品进行一个详细地描述，比如填写&quot;购买商品3件共20.00元&quot; String body = new StringBuilder().append(&quot;订单&quot;).append(outTradeNo).append(&quot;购买商品共花&quot;).append(totalAmount).append(&quot;元&quot;).toString(); // 商户操作员编号，添加此参数可以为商户操作员做销售统计 String operatorId = &quot;test_operator_id&quot;; // (必填) 商户门店编号，通过门店号和商家后台可以配置精准到门店的折扣信息，详询支付宝技术支持 String storeId = &quot;test_store_id&quot;; // 业务扩展参数，目前可添加由支付宝分配的系统商编号(通过setSysServiceProviderId方法)，详情请咨询支付宝技术支持 String providerId = &quot;2088100200300400500&quot;; ExtendParams extendParams = new ExtendParams(); extendParams.setSysServiceProviderId(providerId); // 支付超时，线下扫码交易定义为5分钟 String timeoutExpress = &quot;5m&quot;; // 商品明细列表，需填写购买商品详细信息， List&lt;GoodsDetail&gt; goodsDetailList = new ArrayList&lt;GoodsDetail&gt;(); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// //这里是自己定义的逻辑，因为上面的goodsDetailList还没有信息，因此我们需要往里面添加信息 //我们根据orderId和userId来拿到这个orderItemList。然后遍历这个列表，把我们的GoodsDetail给填充上，最后添加到goodsDetailList列表中 List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo); for(OrderItem orderItem:orderItemList)&#123; // 创建一个商品信息，参数含义分别为商品id（使用国标）、名称、单价（单位为分）、数量，如果需要添加商品类别，详见GoodsDetail GoodsDetail goods = GoodsDetail.newInstance(orderItem.getId().toString(), orderItem.getProductName(), (BigDecimalUtil.mut(orderItem.getCurrentUnitPrice().doubleValue(),new Double(100).doubleValue())).longValue(), orderItem.getQuantity()); goodsDetailList.add(goods); &#125; /////////////////////////////////////////////////////////////////////////////////////////////////////////////// // 创建扫码支付请求 builder，设置请求参数 AlipayTradePrecreateRequestBuilder builder = new AlipayTradePrecreateRequestBuilder() .setSubject(subject).setTotalAmount(totalAmount).setOutTradeNo(outTradeNo) .setUndiscountableAmount(undiscountableAmount).setSellerId(sellerId).setBody(body) .setOperatorId(operatorId).setStoreId(storeId).setExtendParams(extendParams) .setTimeoutExpress(timeoutExpress) .setNotifyUrl(PropertiesUtil.getProperty(PropertiesUtil.getProperty(&quot;alipay.callback.url&quot;)))//支付宝服务器主动通知商户服务器里指定的页面 http 路径,根据需要设置 .setGoodsDetailList(goodsDetailList); /** 一定要在创建AlipayTradeService之前调用Configs.init()设置默认参数 * Configs会读取classpath下的zfbinfo.properties文件配置信息，如果找不到该文件则确认该文件是否在classpath目录 */ Configs.init(&quot;zfbinfo.properties&quot;); /** 使用Configs提供的默认参数 * AlipayTradeService可以使用单例或者为静态成员对象，不需要反复new */ tradeService = new AlipayTradeServiceImpl.ClientBuilder().build(); AlipayF2FPrecreateResult result = tradeService.tradePrecreate(builder); switch (result.getTradeStatus()) &#123; case SUCCESS: logger.info(&quot;支付宝预下单成功: )&quot;); AlipayTradePrecreateResponse response = result.getResponse(); dumpResponse(response); File folder = new File(path); if (!folder.exists()) &#123; folder.setWritable(true); folder.mkdirs(); &#125; // 需要修改为运行机器上的路径 // 细节 String qrPath = String.format(path + &quot;/qr-%s.png&quot;, response.getOutTradeNo()); //这里后面一定要添加/ String qrFileName = String.format(&quot;qr-%s.png&quot;, response.getOutTradeNo()); ZxingUtils.getQRCodeImge(response.getQrCode(), 256, qrPath); //目标文件夹 File targetFile = new File(path, qrFileName); try &#123; FTPUtil.uploadFile(Lists.newArrayList(targetFile)); &#125; catch (IOException e) &#123; logger.error(&quot;上传二维码异常&quot;, e); &#125; logger.info(&quot;qrPath:&quot; + qrPath); String qrUrl = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;) + targetFile.getName(); resultMap.put(&quot;qrUrl&quot;, qrUrl); return ServerResponse.createBySuccess(resultMap); case FAILED: logger.error(&quot;支付宝预下单失败!!!&quot;); return ServerResponse.createByErrorMessage(&quot;支付宝预下单失败!!!&quot;); case UNKNOWN: logger.error(&quot;系统异常，预下单状态未知!!!&quot;); return ServerResponse.createByErrorMessage(&quot;系统异常，预下单状态未知!!!&quot;); default: logger.error(&quot;不支持的交易状态，交易返回异常!!!&quot;); return ServerResponse.createByErrorMessage(&quot;不支持的交易状态，交易返回异常!!!&quot;); &#125; &#125; // 简单打印应答 private void dumpResponse(AlipayResponse response) &#123; if (response != null) &#123; logger.info(String.format(&quot;code:%s, msg:%s&quot;, response.getCode(), response.getMsg())); if (StringUtils.isNotEmpty(response.getSubCode())) &#123; logger.info(String.format(&quot;subCode:%s, subMsg:%s&quot;, response.getSubCode(), response.getSubMsg())); &#125; logger.info(&quot;body:&quot; + response.getBody()); &#125; &#125;&#125; 这里面的代码是非常的多，而且都是核心代码，所以我需要进行说明：1、首先用户支付以后得到的是一个支付订单，订单里面有很多信息，因此我们使用map这个图来进行数据存取，key是订单号，value则是订单值。然后我们需要去数据库里面查询订单是否存在，，所以看到这行代码Order order=orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);就说明我们需要打开OrderMapper.java文件，新增sql查询方法：12//注意在mybatis中使用多个参数时，需要使用param注解Order selectOrderByUserIdAndOrderNo(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;OrderNo&quot;) Long OrderNo); 接着打开OrderMapper.xml，在里面新增以下代码：1234567&lt;select id=&quot;selectOrderByUserIdAndOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_order where user_id =#&#123;userId&#125; and order_no =#&#123;OrderNo&#125;&lt;/select&gt; 2、后面的那些代码就是支付宝的当面付生成二维码的核心代码，你打开Main.java文件，找到test_trade_precreate这个方法，大概是第371行代码到文件末尾。大家注意两行///////之间的代码，这里是自己定义的逻辑，因为上面的goodsDetailList还没有信息，因此我们需要往里面添加信息。我们根据orderId和userId来拿到这个orderItemList，然后遍历这个列表，把我们的GoodsDetail给填充上，最后添加到goodsDetailList列表中。 同样看到这行代码List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo);就说明我们需要打开OrderItemMapper.java文件，新增sql查询方法：12//注意在mybatis中使用多个参数时，需要使用param注解List&lt;OrderItem&gt; getOrderItemByUserIdAndOrderNo(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;orderNo&quot;)Long orderNo); 接着打开OrderItemMapper.xml，在里面新增以下代码：1234567&lt;select id=&quot;getOrderItemByUserIdAndOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_order_item where order_no =#&#123;orderNo&#125; and user_id =#&#123;userId&#125;&lt;/select&gt; 3、注意这行代码setNotifyUrl(PropertiesUtil.getProperty(PropertiesUtil.getProperty(&quot;alipay.callback.url&quot;)))//支付宝服务器主动通知商户服务器里指定的页面http路径,根据需要设置。针对这个，我们需要打开store.propertise文件，配置这个属性：1alipay.callback.url=http://store.licheetools.top/order/alipay_callback.do 当然如果前面配置了这个信息，现在就可以不配置了。4、后面代码的意思生成的二维码如何保存到服务器上，以及存放的位置。这个dumpResponse函数你就可以直接拿来使用了。 最后别忘记在sevcice包下面新建一个IOrderService接口类，里面的代码如下：1234567package top.store.service;import top.store.common.ServerResponse;public interface IOrderService &#123; ServerResponse pay(Long orderNo, Integer userId, String path); //支付宝当面付&#125; 这样关于支付宝当面付的功能开发，我们就完成了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十三）：支付宝官方文档简要说明","slug":"SSM搭建二手市场交易平台（二十三）：支付宝官方文档简要说明","date":"2018-09-01T05:21:06.000Z","updated":"2019-04-15T14:19:29.283Z","comments":true,"path":"2018/09/01/SSM搭建二手市场交易平台（二十三）：支付宝官方文档简要说明/","link":"","permalink":"http://blog.licheetools.top/2018/09/01/SSM搭建二手市场交易平台（二十三）：支付宝官方文档简要说明/","excerpt":"","text":"写在前面本部分我们来进行支付宝官方文档简要说明，里面有些东西挺难理解的。。。 沙箱环境首先点击这里进行注册，选择个人开发即可。接着点击这里下载当面付DEMO，这里选择java版。然后可以点击这里参看下载文档。 然后就直接打开Demo项目，这是一个web项目，需要配置jdk和其他环境，具体如下：打开zfbinfo.properties文件，修改以下配置：1234open_api_domain = https://openapi.alipay.com/gateway.domcloud_api_domain = http://mcloudmonitor.com/gateway.dopid = 此处请填写你的PIDappid = 此处请填写你当面付的APPID 分别对应这个沙箱页面的图中所示信息：第一行代码对应2，第二行不用修改，第三行对应1，第四行对应3: 接下来是RSA私钥、公钥和支付宝公钥123# RSA私钥、公钥和支付宝公钥private_key = 此处请填写你的商户私钥且转PKCS8格式public_key = 此处请填写你的商户公钥 点击这里下载生成RSA密钥工具，然后按照要求生成密匙： 接下来是SHA256withRsa对应支付宝公钥（其中SHAwithRsa公钥已经废弃）：1alipay_public_key= 回到沙箱环境页面，点击出现的图中所示： 然后把刚才上面的public_key复制进去，就会得到支付宝公钥，填到那里即可： 这样我们相关的配置就弄好了，接下来就可以直接去运行main方法了（不要设置tomcat服务器） 运行结果里面会包含一张二维码链接： 我们去百度搜索二维码生成，把链接放进去，就会显示二维码。或者点击这里草料二维码: 注意如果出现下面的情况：1234read time out......................com.alipay.demo.trade.Main test_trade_precreate严重: 系统异常，预下单状态未知!!! 请查看这篇文章：支付宝沙箱demo运行出现read timed out的解决办法，因此从这里开始，我java版本变成了java8，不再使用java10了，大家一定要注意。 接着你点击这里下载沙箱安卓版： 然后点击这里获取买家和卖家的信息： 记住沙箱APP账号只能是上面的，不能使用自己真实的信息。 具体的可以参考这篇文章，这篇挺详细的：支付宝沙箱环境demo测试和这一篇【Java版】接入支付宝当面付功能-沙箱环境 然后扫描二维码，就能付款了。 注意在使用java8的时候，需要修改java10的配置：打开File–&gt;Project Structure，然后具体的配置按照图片所示： 注意上面4个地方的配置，一个都不能少，否则就会报错，切记切记。","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十二）：支付宝支付功能对接要点介绍","slug":"SSM搭建二手市场交易平台（二十二）：支付宝支付功能对接要点介绍","date":"2018-08-31T04:21:06.000Z","updated":"2019-04-15T14:18:44.128Z","comments":true,"path":"2018/08/31/SSM搭建二手市场交易平台（二十二）：支付宝支付功能对接要点介绍/","link":"","permalink":"http://blog.licheetools.top/2018/08/31/SSM搭建二手市场交易平台（二十二）：支付宝支付功能对接要点介绍/","excerpt":"","text":"写在前面本部分我们来完成支付宝支付功能的开发，具体包括支付宝对接，支付回调以及查询支付状态的开发，里面涉及到的知识点挺多的，需要好好理解。 模块说明本模块主要介绍支付宝对接，支付回调以及查询支付状态这三个部分。 学会技能在本模块中，你将会学到支付宝对接核心文档，调用支付宝支付功能官方 Demo；解析支付宝 SDK 对接源码；RSA1 和 RSA2 验证签名及加密；避免支付宝重复通知和数据校验；natapp 外网穿透和 Tomcat remote debug以及生成二维码，并持久化到图片服务器等功能。 数据表的设计 支付宝支付功能对接要点介绍1、一些重要的官方文档2、沙箱调试环境（买家账号测试，商家账号测试）3、支付宝扫码支付主业务流程4、支付宝扫码支付流程5、支付宝扫码支付重要的字段6、支付宝扫码支付重要细节7、支付宝扫码支付对接技巧8、支付宝扫码支付官方 Demo 调试 沙箱调试环境蚂蚁沙箱环境（Beta）：是协助开发者进行接口功能开发及主要功能联调的辅助环境，沙箱环境模拟了开放平台部分产品的主要功能和主要逻辑（参考“沙箱支持产品列表”），为保证沙箱文档，沙箱环境测试数据会进行定期数据清理，Beta 测试阶段每日的 21:00 至次日的 9:00 为维护时间，在此时间内沙箱环境部分功能可能会不可用。 为保证沙箱稳定，沙箱环境测试数据会进行定期数据清理。Beta测试阶段每周日中午12点至每周一中午12点为维护时间。在此时间内沙箱环境部分功能可能会不可用，敬请谅解。 支付宝扫码支付主业务流程这里的流程其实最主要是指当面付这个模块，你可以点击这里或者参看下面的图片来了解支付宝扫码支付主业务流程： 以及条码支付，所谓的条码支付是指：支付宝给到线下传统行业的一种收款方式。商户使用扫码枪等条码识别设备扫描用户支付宝钱包上的条码/二维码，完成收款。用户仅需出示付款码，所有操作由商户端完成。 你可以点击这里或者参看下面的图片来了解支付宝条码支付流程： 支付宝扫码支付重要的字段你可以点击这里或者参看下面的图片来了解支付宝扫码支付重要的字段： 还有其他的关键字段： 交易状态说明你可以点击这里或者参看下面的图片来了解支付宝扫码支付交易状态说明： 通知触发条件你可以点击这里或者参看下面的图片来了解支付宝扫码支付通知触发条件： 支付渠道说明你可以点击这里或者参看下面的图片来了解支付宝扫码支付渠道说明： 我们后面会使用到第二个，支付宝账户，也就是余额。 支付宝扫码支付的重要细节1、主动轮询和回调的区别 我从网上找了一个比较有意思的介绍，你可以看一下：轮询：过10分钟就到女朋友宿舍前面去看她有没有回来、没回来我就再去打游戏。监听：我搬个凳子坐到她宿舍前、直到她回来。回调：在她门口贴个条子：回来后请打电话至011 。 2、避免单边账 所谓“单边账”，即完成取(存)款操作后，银行与用户只有一方账面发生相应变化。 3、同步请求的加签和验证签名 4、回调的验证（签名、金额、订单号、订单状态、交易状态、商户 id） 5、过滤掉重复的通知 6、一定要验证并确保可接受的异步通知是支付宝发出的 7、回调请求返回 程序执行完后必须打印输出“success”（不包含引号），如果商户反馈给支付宝的字符不是 success 这 7 个字符，支付宝服务器会不断重发通知，直到超过 24 小时 22 分钟，一般情况下，25 小时以内完成 8 次通知。（通知的间隔频率一般是：4m，10m，10m，1h，2h，6h，15h） 支付宝扫码支付对接技巧回调的调试方法1、路由器设置开放本地到外网（不推荐） 2、外网远程 debug（保持远端代码版本和本地代码一致，及时关闭开放的debug端口） 3、内网穿透（ngrok，natapp、花生壳） 外网远程debug1、保持远端代码版本和本地代码版本一致 2、执行 sudo vim ${tomcat}/bin/catalina.sh 进行编辑 3、添加如下配置，其中 address 为开放远程 debug 的端口号 CATALINA_OPTS=”-server -Xdebug -Xnoagent -Djava.compile=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005” 4、把开放远程 debug 的端口加到防火墙配置中 5、及时关闭开放的 debug 端口 6、编辑 sudo vim /etc/sysconfig/iptables 7、添加如下配置 -A INPUT -p tcp -m tcp –dport 5005 -j ACCEPT 8、:wq 保存退出 9、重启防火墙 sudo service iptables restart 内网穿透（ngrok、natapp、花生壳）1、登录 https://natapp.cn 2、注册账号、可以选择是否购买隧道还是使用免费隧道 3、设置对外开放的端口 4、下载对应的客户端，如果是 Linux 或 mac 请执行 sudo chmod a+x 赋予用户、用户组、其他用户执行权限 5、按照官网操作说明运行程序，加入 authtoken 参数 6、通过开放的外网域名进行访问测试 这样本篇关于支付宝支付功能对接要点介绍就到这里了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十一）：收货地址模块开发","slug":"SSM搭建二手市场交易平台（二十一）：收货地址模块开发","date":"2018-08-30T11:21:06.000Z","updated":"2019-04-15T14:17:58.028Z","comments":true,"path":"2018/08/30/SSM搭建二手市场交易平台（二十一）：收货地址模块开发/","link":"","permalink":"http://blog.licheetools.top/2018/08/30/SSM搭建二手市场交易平台（二十一）：收货地址模块开发/","excerpt":"","text":"写在前面本篇我们来完成收货地址模块功能的开发，具体包括收货地址的增删改查操作，分页列表以及地址详情等功能的开发，里面涉及到的知识点挺多的，需要好好理解。 模块说明本模块具体包括以下几个功能：添加地址；删除地址；更新地址；地址列表；地址分页和地址详情等。 学会技能在本模块中，你将会学到SpringMVC数据绑定中对象绑定；Mybatis 自动生成主键、配置和使用；如何避免横向越权漏洞的巩固。 数据表的设计 收货地址增加首先我们打开controller这个包下面的portal包，在里面新建一个ShippingController.java文件，里面写入以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142package top.store.controller.portal;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.pojo.Shipping;import top.store.pojo.User;import top.store.service.IShippingService;import javax.servlet.http.HttpSession;@Controller@RequestMapping(&quot;/shipping/&quot;) //这是我们对整个前台商品功能配置的一个类似于namespace的东西public class ShippingController &#123; @Autowired private IShippingService iShippingService; /*** * 前台--收货地址的增加 * @author lenovo * */ @RequestMapping(value = &quot;add.do&quot;) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse add(HttpSession session, Shipping shipping)&#123; //这里是SpringMVC数据绑定中对象绑定 //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台收货地址增加的逻辑 return iShippingService.add(user.getId(),shipping); &#125;&#125; 接着打开sevcice包，新建IShippingService.Java文件，里面新增以下代码：12345678package top.store.service;import top.store.common.ServerResponse;import top.store.pojo.Shipping;public interface IShippingService &#123; ServerResponse add(Integer userId, Shipping shipping); //前台--收货地址的增加&#125; 接着打开sevcice包下面的Impl包，我们新建一个接口的实现类ShippingServiceImpl.java文件，里面的代码如下：1234567891011121314151617181920212223242526272829303132333435package top.store.service.impl;import com.google.common.collect.Maps;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.store.common.ServerResponse;import top.store.dao.ShippingMapper;import top.store.pojo.Shipping;import top.store.service.IShippingService;import java.util.Map;@Service(&quot;iShippingService&quot;)public class ShippingServiceImpl implements IShippingService &#123; @Autowired private ShippingMapper shippingMapper; /*** * 前台--收货地址的增加 * @author lenovo * */ public ServerResponse add(Integer userId,Shipping shipping)&#123; shipping.setUserId(userId); //shipping对象中的userId，我们直接从前台登录中的session中获取 int rowCount =shippingMapper.insert(shipping); //这样我们刚才获取到的userId就能直接使用了 if(rowCount&gt;0)&#123; //我们和前端约定，增加后返回shippingId，而且这个key就是shippingId，这样我们就能直接利用map来获取相关信息了 Map resultMap = Maps.newHashMap(); resultMap.put(&quot;shippingId&quot;,shipping.getId()); return ServerResponse.createBySuccess(&quot;创建新地址成功！&quot;,resultMap); &#125; return ServerResponse.createByErrorMessage(&quot;创建新地址失败&quot;); &#125;&#125; 注意，我们这里shipping对象中的userId，是直接从前台登录中的session中获取的。我们希望使用map来完成添加收货地址的功能，但是数据库中的shippingMapper.insert(shipping);里面主键id不能立即获取并使用，因此我们需要将主键赋值到自己定义的keyProperty中，这样就能立即获取了。1234567891011121314&lt;!-- useGeneratedKeys=&quot;true&quot;把新增加的主键赋值到自己定义的keyProperty（id）中 --&gt;&lt;insert id=&quot;insert&quot; parameterType=&quot;top.store.pojo.Shipping&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into store_shipping (id, user_id, receiver_name, receiver_phone, receiver_mobile, receiver_province, receiver_city, receiver_district, receiver_address, receiver_zip, create_time, update_time ) values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;userId,jdbcType=INTEGER&#125;, #&#123;receiverName,jdbcType=VARCHAR&#125;, #&#123;receiverPhone,jdbcType=VARCHAR&#125;, #&#123;receiverMobile,jdbcType=VARCHAR&#125;, #&#123;receiverProvince,jdbcType=VARCHAR&#125;, #&#123;receiverCity,jdbcType=VARCHAR&#125;, #&#123;receiverDistrict,jdbcType=VARCHAR&#125;, #&#123;receiverAddress,jdbcType=VARCHAR&#125;, #&#123;receiverZip,jdbcType=VARCHAR&#125;, now(), now() )&lt;/insert&gt;&lt;!--useGeneratedKeys 取值范围true|false 默认值是：false。 含义：设置是否使用JDBC的getGenereatedKeys方法获取主键并赋值到keyProperty设置的领域模型属性中。--&gt; 也就是第二行代码变成上面的样子：1&lt;insert id=&quot;insert&quot; parameterType=&quot;top.store.pojo.Shipping&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; 这样我们收货地址增加的功能就实现了，接下来完成收货地址删除的功能。 收货地址删除老规矩，打开ShippingController.java文件，里面写入以下代码：12345678910111213141516/*** * 前台--收货地址的删除 * @author lenovo * */@RequestMapping(value = &quot;del.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse del(HttpSession session,Integer shippingId)&#123; //这里是SpringMVC数据绑定中对象绑定 //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台收货地址删除的逻辑 return iShippingService.del(user.getId(),shippingId);&#125; 接着打开ShippingServiceImpl.java文件，里面新增代码如下：12345678910111213 /*** * 前台--收货地址的删除 * @author lenovo * */ public ServerResponse&lt;String&gt; del(Integer userId,Integer shippingId)&#123; //注意这里会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的// int rowCount = shippingMapper.deleteByPrimaryKey(shippingId); int rowCount = shippingMapper.deleteShippingByUserIdAndShippingId(userId,shippingId); if(rowCount&gt;0)&#123; return ServerResponse.createBySuccess(&quot;删除收货地址成功！&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;删除收货地址失败&quot;); &#125; 注意如果你使用int rowCount = shippingMapper.deleteByPrimaryKey(shippingId);就会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：12//注意在mybatis中使用多个参数时，需要使用param注解int deleteShippingByUserIdAndShippingId(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;shippingId&quot;) Integer shippingId); 接着打开ShippingMapper.xml文件，里面写入以下代码：12345&lt;delete id=&quot;deleteShippingByUserIdAndShippingId&quot; parameterType=&quot;map&quot;&gt; delete from store_shipping where user_id =#&#123;userId&#125; and id =#&#123;shippingId&#125;&lt;/delete&gt; 最后打开IShippingService.Java文件，里面新增以下代码：1ServerResponse&lt;String&gt; del(Integer userId,Integer shippingId); //前台--收货地址的删除 这样我们收货地址删除的功能就实现了，接下来完成收货地址修改的功能。 收货地址修改老规矩，打开ShippingController.java文件，里面写入以下代码：12345678910111213141516/*** * 前台--收货地址的更新 * @author lenovo * */@RequestMapping(value = &quot;update.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse update(HttpSession session,Shipping shipping)&#123; //这里是SpringMVC数据绑定中对象绑定 //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台收货地址更新的逻辑 return iShippingService.update(user.getId(),shipping);&#125; 接着打开ShippingServiceImpl.java文件，里面新增代码如下：123456789101112131415161718 /*** * 前台--收货地址的更新 * @author lenovo * */ public ServerResponse update(Integer userId,Shipping shipping)&#123; shipping.setUserId(userId); //shipping对象中的userId，我们直接从前台登录中的session中获取 //注意这里会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的// int rowCount =shippingMapper.insert(shipping); //这样我们刚才获取到的userId就能直接使用了 //自己定义的sql语句方法 int rowCount =shippingMapper.updateByShipping(shipping); if(rowCount&gt;0)&#123; //注意这里不需要将id进行返回给前端，因为前面已经获取到了 return ServerResponse.createBySuccess(&quot;更新新地址成功！&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;更新新地址失败&quot;); &#125; 注意如果你使用int rowCount =shippingMapper.insert(shipping);就会产生横向越权问题，因为这个update语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：1int updateByShipping(Shipping record); 接着打开ShippingMapper.xml文件，里面写入以下代码：1234567891011121314151617&lt;!--注意这里面的userId是不可以更改的，所以一定要从set里面去掉，而且and语句最后的括号一定要去掉--&gt;&lt;update id=&quot;updateByShipping&quot; parameterType=&quot;top.store.pojo.Shipping&quot;&gt; update store_shipping set receiver_name = #&#123;receiverName,jdbcType=VARCHAR&#125;, receiver_phone = #&#123;receiverPhone,jdbcType=VARCHAR&#125;, receiver_mobile = #&#123;receiverMobile,jdbcType=VARCHAR&#125;, receiver_province = #&#123;receiverProvince,jdbcType=VARCHAR&#125;, receiver_city = #&#123;receiverCity,jdbcType=VARCHAR&#125;, receiver_district = #&#123;receiverDistrict,jdbcType=VARCHAR&#125;, receiver_address = #&#123;receiverAddress,jdbcType=VARCHAR&#125;, receiver_zip = #&#123;receiverZip,jdbcType=VARCHAR&#125;, create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;, update_time = now() where id = #&#123;id,jdbcType=INTEGER&#125; and user_id = #&#123;userId,jdbcType=INTEGER&#125;&lt;/update&gt; 看到没有，这里的update语句和里面提供sql语句非常相似，但是记住里面的userId是不可以更改的，所以一定要从set里面去掉，而且and语句最后的括号一定要去掉。关于第一行代码的来源，大家可以自行查看原生的sql语句。 最后打开IShippingService.Java文件，里面新增以下代码：1ServerResponse update(Integer userId,Shipping shipping); //前台--收货地址的更新 这样我们收货地址修改的功能就实现了，接下来完成收货地址查询的功能。 收货地址查询老规矩，打开ShippingController.java文件，里面写入以下代码：12345678910111213141516/*** * 前台--收货地址的查询 * @author lenovo * */@RequestMapping(value = &quot;select.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;Shipping&gt; select(HttpSession session,Integer shippingId)&#123; //这里是SpringMVC数据绑定中对象绑定 //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台收货地址查询的逻辑 return iShippingService.select(user.getId(),shippingId);&#125; 接着打开ShippingServiceImpl.java文件，里面新增代码如下：12345678910111213 /*** * 前台--收货地址的查询 * @author lenovo * */ public ServerResponse&lt;Shipping&gt; select(Integer userId,Integer shippingId)&#123; //注意这里会产生横向越权问题，因为这个select语句里面没有与用户进行绑定，因此是不可以使用的// int rowCount =shippingMapper.selectByPrimaryKey(shippingId); Shipping shipping =shippingMapper.selectByUserIdAndShippingId(userId,shippingId); if(shipping == null)&#123; return ServerResponse.createByErrorMessage(&quot;无法查询到该地址&quot;); &#125; return ServerResponse.createBySuccess(&quot;该地址查询到了！&quot;,shipping); &#125; 注意如果你使用int rowCount =shippingMapper.selectByPrimaryKey(shippingId);就会产生横向越权问题，因为这个select语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：12//注意在mybatis中使用多个参数时，需要使用param注解Shipping selectByUserIdAndShippingId(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;shippingId&quot;) Integer shippingId); 接着打开ShippingMapper.xml文件，里面写入以下代码：1234567&lt;select id=&quot;selectByUserIdAndShippingId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_shipping where id = #&#123;shippingId&#125; and user_id = #&#123;userId&#125;&lt;/select&gt; 最后打开IShippingService.Java文件，里面新增以下代码：1ServerResponse&lt;Shipping&gt; select(Integer userId,Integer shippingId); //前台--收货地址的查询 这样我们收货地址查询的功能就实现了，接下来完成收货地址详情分页的功能。 收货地址详情分页老规矩，打开ShippingController.java文件，里面写入以下代码：12345678910111213141516/*** * 前台--收货地址的列表分页 * @author envy * */@RequestMapping(value = &quot;list.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;PageInfo&gt; list(HttpSession session, @RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum, @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们前台收货地址的列表分页的逻辑 return iShippingService.list(user.getId(),pageNum,pageSize);&#125; 接着打开ShippingServiceImpl.java文件，里面新增代码如下：1234567891011121314151617/*** * 前台--收货地址的列表分页 * @author envy * */public ServerResponse&lt;PageInfo&gt; list(Integer userId,int pageNum,int pageSize)&#123; //开始分页 PageHelper.startPage(pageNum,pageSize); //根据用户id来查询shipping对象 List&lt;Shipping&gt; shippingList =shippingMapper.selectShippingByUserId(userId); //构造PageInfo对象 PageInfo pageInfo =new PageInfo(shippingList); //返回PageInfo对象 return ServerResponse.createBySuccess(pageInfo);&#125; 注意如看到shippingMapper.selectShippingByUserId(userId);就知道应该打开ShippingMapper.java文件，里面写入一行代码：1List&lt;Shipping&gt; selectShippingByUserId(Integer userId); 接着打开ShippingMapper.xml文件，里面写入以下代码：1234567&lt;!--注意一个参数使用int或者map都是可以的--&gt;&lt;select id=&quot;selectShippingByUserId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_shipping where user_id =#&#123;userId&#125;&lt;/select&gt; 最后打开IShippingService.Java文件，里面新增以下代码：1ServerResponse&lt;PageInfo&gt; list(Integer userId, int pageNum, int pageSize); //前台--收货地址的列表分页 这样我们收货地址详情分页的功能就实现了，至此所有关于购物车的模块功能就全部实现了。接下来是模块测试，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二十）：购物车商品的状态设置","slug":"SSM搭建二手市场交易平台（二十）：购物车商品的状态设置","date":"2018-08-29T08:21:06.000Z","updated":"2019-04-15T14:17:10.615Z","comments":true,"path":"2018/08/29/SSM搭建二手市场交易平台（二十）：购物车商品的状态设置/","link":"","permalink":"http://blog.licheetools.top/2018/08/29/SSM搭建二手市场交易平台（二十）：购物车商品的状态设置/","excerpt":"","text":"写在前面本篇主要介绍如何实现购物车商品的全选，全反选，单选，单反选以及购物车商品数量查询等功能。 购物车商品的全选我们打开CartController.java文件，在里面写入以下代码：12345678910111213141516/*** * 前台购物车商品全选 * @author lenovo * */@RequestMapping(value = &quot;select_all.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;CartVo&gt; selectAll(HttpSession session)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们购物车商品全选的逻辑 return iCartService.selectOrUnSelect(user.getId(),null,Const.Cart.CHECKED);&#125; 接着打开CartServiceImpl.java文件，往里面添加如下代码：12345678/*** * 前台购物车商品全选或者全反选 * @author envy * */public ServerResponse&lt;CartVo&gt; selectOrUnSelect(Integer userId,Integer productId,Integer checked)&#123; cartMapper.checkedOrUncheckedProduct(userId,productId,checked); return this.list(userId);&#125; 注意一下，之前我们最后返回的都是两行代码：12CartVo cartVo =this.getCartVoLimit(userId);return ServerResponse.createBySuccess(cartVo); 但是呢，前面我们也说过因为这两行代码已经被list进行封装了，因此现在直接调用list即可：1return this.list(userId); 看到cartMapper.checkedOrUncheckedProduct(userId,productId,checked);这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：12//注意在mybatis中使用多个参数时，需要使用param注解int checkedOrUncheckedProduct(@Param(&quot;userId&quot;) Integer userId,@Param(&quot;productId&quot;)Integer productId,@Param(&quot;checked&quot;) Integer checked); 紧接着去CartMapper.xml文件里面新增sql查询语句：12345678910&lt;!--注意set多个值时，需要用逗号隔开--&gt; &lt;update id=&quot;checkedOrUncheckedProduct&quot; parameterType=&quot;map&quot;&gt; update store_cart set checked =#&#123;checked&#125;， update_time =now() where user_id =#&#123;userId&#125;&lt;if test=&quot;productId != null&quot;&gt; and product_id = #&#123;productId&#125; &lt;/if&gt; &lt;/update&gt; 有人可能要问了，你全选与全反选是不需要商品id的，那在这里写干嘛，的确是不需要，但是我们后面要实现的单选和单反选却是需要的，因此写在这里只是为了后面代码更好的复用。这也就是我们为什么将参数productId设置为null的原因。最后打开ICartService.java文件，新增以下代码：1ServerResponse&lt;CartVo&gt; selectOrUnSelectAll(Integer userId,Integer productId,Integer checked); //前台购物车商品全选或者全反选,或者单选，或者单反选 接下来完成购物车商品的全反选功能，这个和全选相反，你除了需要修改控制器controller里面的代码以外，其余的代码就可以不要修改了。 购物车商品的全反选我们打开CartController.java文件，在里面写入以下代码：12345678910111213141516/*** * 前台购物车商品全反选 * @author lenovo * */@RequestMapping(value = &quot;un_select_all.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;CartVo&gt; unSelectAll(HttpSession session)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们购物车商品全选的逻辑 return iCartService.selectOrUnSelectAll(user.getId(),null,Const.Cart.UN_CHECKED);&#125; 然后就可以了，是不是超级简单。 购物车商品的单选想起我们前面做的工作了莫，这个依旧很简单，和我们购物车商品的全反选操作一样。打开CartController.java文件，在里面写入以下代码：12345678910111213141516/*** * 前台购物车商品单选 * @author lenovo * */@RequestMapping(value = &quot;select_one.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;CartVo&gt; selectOne(HttpSession session,Integer productId)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们购物车商品单选的逻辑 return iCartService.selectOrUnSelect(user.getId(),productId,Const.Cart.CHECKED);&#125; 说了两次，那么购物车商品的单反选，你也就知道了吧！ 购物车商品的单反选打开CartController.java文件，在里面写入以下代码：12345678910111213141516/*** * 前台购物车商品单反选 * @author lenovo * */@RequestMapping(value = &quot;un_select_one.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;CartVo&gt; UnSelectOne(HttpSession session,Integer productId)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们购物车商品单反选的逻辑 return iCartService.selectOrUnSelect(user.getId(),productId,Const.Cart.UN_CHECKED);&#125; 接下来完成购物车商品数量查询这个功能，这个也还是简单的。 购物车商品数量查询这里的购物车商品数量查询是说，当你查询当前用户的购物车里面的商品数量时,假设一个商品有 8个,那么数量就是 8，我们是不按照商品种类来算，而是按数量算的，这也是目前电商的通用做法。 我们打开CartController.java文件，在里面写入以下代码：12345678910111213141516/*** * 前台购物车商品数量查询 * @author lenovo * */@RequestMapping(value = &quot;get_cart_product_count.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;Integer&gt; getCartProductCount(HttpSession session)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录，那么就返回0 if(user ==null)&#123; return ServerResponse.createBySuccess(0); &#125; //实现我们购物车商品数量查询的逻辑 return iCartService.getCartProductCount(user.getId());&#125; 接着打开CartServiceImpl.java文件，往里面添加如下代码：1234567891011/*** * 前台购物车商品数量查询 * @author lenovo * */public ServerResponse&lt;Integer&gt; getCartProductCount(Integer userId)&#123; if(userId ==null)&#123; return ServerResponse.createBySuccess(0); &#125; //购物车商品数量查询 return ServerResponse.createBySuccess(cartMapper.selectCartProductCount(userId));&#125; 看到cartMapper.selectCartProductCount(userId)这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：1int selectCartProductCount(Integer userId); 然后去CartMapper.xml文件里面新增sql语句：(其中select * as count 是给它起了一个别称)12345&lt;select id=&quot;selectCartProductCount&quot; parameterType=&quot;int&quot; resultType=&quot;int&quot;&gt; select sum(quantity) as count from store_cart where user_id = #&#123;userId&#125;&lt;/select&gt; 不过这样做有一个问题，就是我们前面返回的是一个int，假设我们这个sql语句最后返回的是0,而你知道Int类型是不能传给0给它的，因此可以将代码代码修改如下，使用IFNULL(sum(quantity),0)，就是说默认就是0。12345&lt;select id=&quot;selectCartProductCount&quot; parameterType=&quot;int&quot; resultType=&quot;int&quot;&gt; select IFNULL(sum(quantity),0) as count from store_cart where user_id = #&#123;userId&#125;&lt;/select&gt; 当然你也可以使用另一种方法，就是修改CartMapper.java文件的返回类型，修改为Integer这一也是可以的。 然后就是关于购物车模块的接口测试了，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了。 这样我们本篇关于如何实现购物车商品的全选，全反选，单选，单反选以及购物车商品数量查询等功能的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十九）：购物车更新删除查询商品","slug":"SSM搭建二手市场交易平台（十九）：购物车更新删除查询商品","date":"2018-08-28T07:21:06.000Z","updated":"2019-04-15T14:16:15.772Z","comments":true,"path":"2018/08/28/SSM搭建二手市场交易平台（十九）：购物车更新删除查询商品/","link":"","permalink":"http://blog.licheetools.top/2018/08/28/SSM搭建二手市场交易平台（十九）：购物车更新删除查询商品/","excerpt":"","text":"写在前面本篇主要介绍如何将更新、删除和查询购物车里面的商品功能进行实现。 更新购物车商品其实所谓的更新购物车商品就是更新商品在购物车里面的数量罢了。我们打开CartController.java文件，在里面写入以下代码：1234567891011121314151617/*** * 前台修改购物车里面的商品（其实就是商品的数量） * @author lenovo * */@RequestMapping(value = &quot;update.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;CartVo&gt; update(HttpSession session, Integer productId, Integer count)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们修改购物车里面的商品的逻辑 return iCartService.update(user.getId(),productId,count);&#125; 接着打开CartServiceImpl.java文件，往里面添加如下代码：123456789101112131415161718/*** * 前台修改购物车里面的商品（其实就是商品的数量） * @author lenovo * */public ServerResponse&lt;CartVo&gt; update(Integer userId,Integer productId,Integer count)&#123; //传入的参数不正确 if(productId ==null ||count ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; //去购物车里面更新相关的信息 Cart cart =cartMapper.selectCartByUserIdAndProductId(userId,productId); cart.setQuantity(count); cartMapper.updateByPrimaryKeySelective(cart); CartVo cartVo =this.getCartVoLimit(userId); return ServerResponse.createBySuccess(cartVo);&#125; 最后打开ICartService.java文件，新增以下代码：1ServerResponse&lt;CartVo&gt; update(Integer userId,Integer productId,Integer count); //前台修改购物车里面的商品（其实就是商品的数量） 删除购物车商品我们打开CartController.java文件，在里面写入以下代码：123456789101112131415161718/*** * 前台删除购物车里面的商品 * @author lenovo * */ @RequestMapping(value = &quot;delete_product.do&quot;) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;CartVo&gt; deleteProduct(HttpSession session, String productIds)&#123; //注意这里不需要传递数量，而且可以同时删除多个，因此我们和前端约定使用String类型的productIds同时多个参数以逗号进行分割 //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们删除购物车里面的商品的逻辑 return iCartService.deleteProduct(user.getId(),productIds); &#125; 接着打开CartServiceImpl.java文件，往里面添加如下代码：123456789101112131415161718192021222324252627 /*** * 前台删除购物车里面的商品 * @author lenovo * */ public ServerResponse&lt;CartVo&gt; deleteProduct(Integer userId,String productIds)&#123; //如果我们自己使用Java提供的方法，我们需要把productIds转成数组，然后再遍历数组添加到集合中// String[] productStringList =productIds.split(&quot;,&quot;);// List&lt;String&gt; productList =new ArrayList&lt;&gt;();// for(String product :productList)&#123;// productList.add(product);// &#125; //因此，这里我们直接使用guava提供的split方法，直接将其转化为列表，其中on代表以什么为分割线，后面的splitToList就代表转成什么函数 List&lt;String&gt; productList = Splitter.on(&quot;,&quot;).splitToList(productIds); //判断列表是否是空，如果是空也就是不指定删除什么而去执行删除命令，会报出一个参数非法 if(CollectionUtils.isEmpty(productList))&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; //不为空&lt;也就是我们需要执行删除命令了 cartMapper.deleteProductByUserIdAndProductIds(userId,productList); CartVo cartVo =this.getCartVoLimit(userId); return ServerResponse.createBySuccess(cartVo); &#125; 这里我需要说明几点：1、我们这里的删除是直接根据商品Id来的，但不是一个Id，我们和前端约定传入String类型的商品id，而且多个id之间通过逗号进行的分割。2、如果我们自己使用Java提供的方法，我们需要把productIds转成数组，然后再遍历数组添加到列表中：1234String[] productStringList =productIds.split(&quot;,&quot;);List&lt;String&gt; productList =new ArrayList&lt;&gt;();for(String product :productList)&#123;productList.add(product); 如果我们直接使用guava提供的split方法，直接将其转化为列表，其中on代表以什么为分割线，后面的splitToList就代表转成什么函数:1List&lt;String&gt; productList = Splitter.on(&quot;,&quot;).splitToList(productIds); 上面也说了我们后台通过遍历商品id这个列表从而来进行商品的删除操作。3、看到cartMapper.deleteProductByUserIdAndProductIds(userId,productList);这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：12//注意在mybatis中使用多个参数时，需要使用param注解int deleteProductByUserIdAndProductIds(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;productIdList&quot;)List&lt;String&gt; productIdList); 紧接着去CartMapper.xml文件里面新增sql查询语句：1234567891011&lt;!--删除是使用delete这个节点--&gt; &lt;delete id=&quot;deleteProductByUserIdAndProductIds&quot; parameterType=&quot;map&quot;&gt; delete from store_cart where user_id =#&#123;userId&#125; &lt;if test=&quot;productIdList != null&quot;&gt; and product_id in &lt;foreach collection=&quot;productIdList&quot; item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/if&gt;&lt;/delete&gt; 在这段代码里面，因为我们需要判断productIdList不为空，而且product_id在我们遍历的列表里面。遍历我们使用了foreach，其中collection表示你即将要遍历的对象，item表示遍历的返回对象，index表示当前迭代的次数，open表示以什么开始，separator表示分割符，close表示以什么结束。具体的可以参考写这篇文章：MyBatis的foreach语句详解 最后打开ICartService.java文件，新增一行代码：1ServerResponse&lt;CartVo&gt; deleteProduct(Integer userId,String productIds); //前台删除购物车里面的商品 查询购物车商品这个功能很简单，因为我们前面增加，删除和修改最后返回的都是CartVo，为什么呢？因为它们都调用了我们这个查询的方法，因此此功能很简单。 我们打开CartController.java文件，在里面写入以下代码：12345678910111213141516/*** * 前台查询购物车里面的商品 * @author lenovo * */@RequestMapping(value = &quot;list.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;CartVo&gt; list(HttpSession session)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们查询购物车里面商品的逻辑 return iCartService.list(user.getId());&#125; 接着打开CartServiceImpl.java文件，往里面添加如下代码：12345678/*** * 前台查询购物车里面的商品 * @author lenovo * */public ServerResponse&lt;CartVo&gt; list(Integer userId)&#123; CartVo cartVo =this.getCartVoLimit(userId); return ServerResponse.createBySuccess(cartVo);&#125; 最后打开ICartService.java文件，新增以下代码：1ServerResponse&lt;CartVo&gt; list(Integer userId); //前台查询购物车里面的商品 这样我们本篇关于更新、删除和查询购物车里面的商品功能的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十八）：购物车添加商品","slug":"SSM搭建二手市场交易平台（十八）：购物车添加商品","date":"2018-08-27T05:21:06.000Z","updated":"2019-04-15T14:15:23.661Z","comments":true,"path":"2018/08/27/SSM搭建二手市场交易平台（十八）：购物车添加商品/","link":"","permalink":"http://blog.licheetools.top/2018/08/27/SSM搭建二手市场交易平台（十八）：购物车添加商品/","excerpt":"","text":"写在前面本章节我们来介绍购物车模块相关功能的开发，具体包括加入商品；更新商品数；查询商品数；移除商品；单选/取消；全选/取消和购物车列表等这几个功能。本篇主要介绍如何将商品加入到购物车，这里面会定义一些可以复用的购物车代码，还有一些功能：如字段校验，数量校验，价格的动态变化等。 技能掌握1、购物车模块的设计思想；2、如何封装一个高复用的购物车核心方法；3、解决浮点型商业运算中丢失精度的问题； 数据表设计： 商品添加到购物车首先我们打开controller这个包下面的portal包，在里面新建一个CartController.java文件，里面写入以下代码：12345678910111213141516171819202122232425262728293031323334353637383940414243package top.store.controller.portal;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.pojo.User;import top.store.service.ICartService;import top.store.vo.CartVo;import javax.servlet.http.HttpSession;@Controller@RequestMapping(&quot;/cart/&quot;) //这是我们对整个前台商品功能配置的一个类似于namespace的东西public class CartController &#123; @Autowired private ICartService iCartService; /*** * 前台往购物车添加商品 * @author lenovo * */ @RequestMapping(value = &quot;add.do&quot;) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;CartVo&gt; add(HttpSession session, Integer productId, Integer count)&#123; //验证用户是否登录 User user =(User) session.getAttribute(Const.CURRENT_USER); //未登录需要用户强制登录 if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc()); &#125; //实现我们购物车添加商品的逻辑 return iCartService.add(user.getId(),productId,count); &#125;&#125; 然后打开service这个包，在里面新建ICartService接口，里面写入以下代码：12345678package top.store.service;import top.store.common.ServerResponse;import top.store.vo.CartVo;public interface ICartService &#123; ServerResponse&lt;CartVo&gt; add(Integer userId, Integer productId, Integer count); //前台购物车添加商品&#125; 以及在Impl包里面新建一个CartServiceImpl.java文件，里面写入以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158package top.store.service.impl;import com.google.common.collect.Lists;import org.apache.commons.collections.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.store.common.Const;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.dao.CartMapper;import top.store.dao.ProductMapper;import top.store.pojo.Cart;import top.store.pojo.Product;import top.store.service.ICartService;import top.store.util.BigDecimalUtil;import top.store.util.PropertiesUtil;import top.store.vo.CartProductVo;import top.store.vo.CartVo;import java.math.BigDecimal;import java.util.List;@Service(&quot;iCartService&quot;)public class CartServiceImpl implements ICartService &#123; @Autowired private CartMapper cartMapper; @Autowired private ProductMapper productMapper; /*** * 前台往购物车添加商品 * @author lenovo * */ //注意此处的add里面必须包含userId，因为这个必须是精确到个人进行购物车的商品添加 public ServerResponse&lt;CartVo&gt; add(Integer userId,Integer productId,Integer count)&#123; //传入的参数不正确 if(productId ==null ||count ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; //去购物车里面查询相关的信息 Cart cart =cartMapper.selectCartByUserIdAndProductId(userId,productId); //自定义的sql语句 if(cart ==null)&#123; //该产品不在这个购物车里面,因此需要新增一个这个产品的记录 Cart cartItem =new Cart(); cartItem.setQuantity(count); //往购物车里面添加count数量的商品 cartItem.setChecked(Const.Cart.CHECKED); //设置该商品被选中状态（放入购物车的产品是自动被选中的） cartItem.setProductId(productId); //设置商品id cartItem.setUserId(userId); //商品属于用户 cartMapper.insert(cartItem); //将商品插入到购物车里面 &#125;else&#123; //说明该商品已经存在于购物车里. //商品已存在,我们就要进行数量相加 count =cart.getQuantity() +count; cart.setQuantity(count); cartMapper.updateByPrimaryKeySelective(cart); &#125; //接下来是核心的功能，如数量判断，值校验，购物车里面的商品也有图片，因此需要组装一个“新的”vo对象。 CartVo cartVo = this.getCartVoLimit(userId); return ServerResponse.createBySuccess(cartVo); &#125; //创建一个用于实现购物车信息的函数 private CartVo getCartVoLimit(Integer userId)&#123; CartVo cartVo =new CartVo(); List&lt;Cart&gt; cartList =cartMapper.selectCartByUserId(userId); //自定义的sql语句 List&lt;CartProductVo&gt; cartProductVoList = Lists.newArrayList(); //记住这里一定要使用它的String构造器，否则会出现更大的错误 BigDecimal cartTotalPrice = new BigDecimal(&quot;0&quot;); if(CollectionUtils.isNotEmpty(cartList))&#123; for(Cart cartItem:cartList)&#123; CartProductVo cartProductVo =new CartProductVo(); cartProductVo.setId(cartItem.getId()); cartProductVo.setUserId(cartItem.getUserId()); cartProductVo.setProductId(cartItem.getProductId()); //根据购物车里面的商品Id来获取商品的信息 Product product =productMapper.selectByPrimaryKey(cartItem.getProductId()); //如果该商品存在的话，我们就使用前面的CartProductVo进行商品的组装(因为CartProductVo本身是一个对象，但是具体需要什么我们需要进行设置) if(product != null)&#123; //我们这里之所以不直接从商品对象里获取信息，是因为后面有些是存在于购物车的，有些存在于商品，很容易造成混乱，因此我们这里就使用了一个组装的购物车商品对象，你需要的时候调用它就可以 cartProductVo.setProductName(product.getName()); cartProductVo.setProductSubtitle(product.getSubtitle()); cartProductVo.setProductMainImage(product.getMainImage()); cartProductVo.setProductStatus(product.getStatus()); cartProductVo.setProductStock(product.getStock()); //判断库存数量 int buyLimitCount = 0; if(product.getStock() &gt;= cartItem.getQuantity())&#123; //库存充足的时候，系统会提示LIMIT_NUM_SUCCESS buyLimitCount = cartItem.getQuantity(); cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_SUCCESS); &#125;else&#123; //库存不足的时候，系统提示LIMIT_NUM_FAIL buyLimitCount =product.getStock(); cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_FAIL); //自动更新购物车的有效库存 Cart cartForQuantity =new Cart(); cartForQuantity.setId(cartItem.getId()); cartForQuantity.setQuantity(buyLimitCount); cartMapper.updateByPrimaryKeySelective(cartForQuantity); &#125; //现在更新cartProductVo对象的其他信息 cartProductVo.setQuantity(buyLimitCount); //计算该商品的总价，仅仅针对该商品 //进行乘法运算:价格*数量，注意这里的单价因为是BigDecimal类型，所以需要转换成double类型，最后再利用工具类的toString调用String构造器 //cartProductVo.setProductTotalPrice(BigDecimalUtil.mut(cartProductVo.getProductPrice().doubleValue(),cartProductVo.getQuantity())); //这样会引发空指针异常 cartProductVo.setProductTotalPrice(BigDecimalUtil.mut(product.getPrice().doubleValue(),cartProductVo.getQuantity())); cartProductVo.setProductChecked(cartItem.getChecked()); //选中状态使用购物车自带的属性，不用商品自己设置属性 &#125; //如果不判断是否有商品就进行添加购物车操作，会报空指针异常。(其实就是判断购物车是否是处于被选中状态) if(cartItem.getChecked() ==Const.Cart.CHECKED)&#123; //如果已经勾选,就把之前的商品价格添加到整个购物车总价中进行结算 //这里面有2个参数，一个是我们在初始化的时候设置的0，另一个就是上面计算出来的ProductTotalPrice，这两个都需要进行double转化 cartTotalPrice =BigDecimalUtil.add(cartTotalPrice.doubleValue(),cartProductVo.getProductTotalPrice().doubleValue()); &#125; //把我们上面设置的cartProductVo添加到cartProductVoList里面 cartProductVoList.add(cartProductVo); &#125; &#125; //把CartProductVo放入到我们的CartVo里面 cartVo.setCartTotalPrice(cartTotalPrice); cartVo.setCartProductVoList(cartProductVoList); cartVo.setAllChecked(this.getAllCheckedStatus(userId)); cartVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)); //这里需要直接从服务器中获取 return cartVo; &#125; //根据用户id来判断购物车是否处于选中状态 public boolean getAllCheckedStatus (Integer userId)&#123; if(userId ==null)&#123; return false; &#125; //如果用户不为空 //这里sql语句结果之所以没有返回boolean是因为我们去数据库里面一般返回的都是int，所以需要进行二次判断 return cartMapper.selectCartProductCheckedStatusByUserId(userId) ==0; &#125;&#125; 上面那个是我们的核心代码，所以我依旧啰嗦几句：1、首先判断传入的参数是否正确：123if(productId ==null ||count ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; 2、看到Cart cart =cartMapper.selectCartByUserIdAndProductId(userId,productId); //自定义的sql语句就知道需要去dao层的CartMapper.java文件，新增一行代码：12//注意在mybatis中使用多个参数时，需要使用param注解Cart selectCartByUserIdAndProductId(@Param(value =&quot;userId&quot; )Integer userId,@Param(value = &quot;productId&quot;) Integer productId); 接着打开mappers包的CartMapper.xml文件，里面新增以下代码：1234567&lt;select id=&quot;selectCartByUserIdAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_cart where user_id=#&#123;userId&#125; and product_id =#&#123;productId&#125;&lt;/select&gt; 3、继续回到CartServiceImpl.java文件，我们发现该产品不在这个购物车里面,因此需要新增一个这个产品的记录，而且商品的选中是自动的，也就是需要设置一个常量。我们能打开common包下面的const文件，在里面新增以下代码：1234public interface Cart&#123; int CHECKED = 1;//购物车选中状态 int UN_CHECKED = 0;//购物车中未选中状态&#125; 4、接下来是核心的功能，如数量判断，值校验，购物车里面的商品也有图片，因此需要组装一个“新的”vo对象。因此，我们需要在Vo这个包里面，新建两个java类，一个是CartProductVo，它是结合了购物车和商品的对象，因此你可以去购物车和商品对象中选择你所需要的字段，里面的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128package top.store.vo;import java.math.BigDecimal;public class CartProductVo &#123; //本vo是结合了购物车和商品的对象，因此你可以去购物车和商品对象中选择你所需要的字段 private Integer id; //购物车id private Integer userId; private Integer productId; private Integer quantity; //购物车中商品的数量 private String productName; //商品名称 private String productSubtitle; //商品子标题 private String productMainImage; //商品主图 private BigDecimal productPrice; //商品价格 private Integer productStatus; //商品状态 private BigDecimal productTotalPrice; //商品总价 private Integer productStock; //商品库存 private Integer productChecked;//商品是否勾选 private String limitQuantity;//用于限制数量的一个返回结果 public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public Integer getUserId() &#123; return userId; &#125; public void setUserId(Integer userId) &#123; this.userId = userId; &#125; public Integer getProductId() &#123; return productId; &#125; public void setProductId(Integer productId) &#123; this.productId = productId; &#125; public Integer getQuantity() &#123; return quantity; &#125; public void setQuantity(Integer quantity) &#123; this.quantity = quantity; &#125; public String getProductName() &#123; return productName; &#125; public void setProductName(String productName) &#123; this.productName = productName; &#125; public String getProductSubtitle() &#123; return productSubtitle; &#125; public void setProductSubtitle(String productSubtitle) &#123; this.productSubtitle = productSubtitle; &#125; public String getProductMainImage() &#123; return productMainImage; &#125; public void setProductMainImage(String productMainImage) &#123; this.productMainImage = productMainImage; &#125; public BigDecimal getProductPrice() &#123; return productPrice; &#125; public void setProductPrice(BigDecimal productPrice) &#123; this.productPrice = productPrice; &#125; public Integer getProductStatus() &#123; return productStatus; &#125; public void setProductStatus(Integer productStatus) &#123; this.productStatus = productStatus; &#125; public BigDecimal getProductTotalPrice() &#123; return productTotalPrice; &#125; public void setProductTotalPrice(BigDecimal productTotalPrice) &#123; this.productTotalPrice = productTotalPrice; &#125; public Integer getProductStock() &#123; return productStock; &#125; public void setProductStock(Integer productStock) &#123; this.productStock = productStock; &#125; public Integer getProductChecked() &#123; return productChecked; &#125; public void setProductChecked(Integer productChecked) &#123; this.productChecked = productChecked; &#125; public String getLimitQuantity() &#123; return limitQuantity; &#125; public void setLimitQuantity(String limitQuantity) &#123; this.limitQuantity = limitQuantity; &#125;&#125; 另一个文件是CartVo，里面的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445package top.store.vo;import java.math.BigDecimal;import java.util.List;public class CartVo &#123; //购物车Vo对象 private List&lt;CartProductVo&gt; cartProductVoList; //商品对象 private BigDecimal cartTotalPrice; //购物车所有商品总价 private boolean allChecked; //购物车是否处于选中状态 private String imageHost; //购物车对象的主图 public List&lt;CartProductVo&gt; getCartProductVoList() &#123; return cartProductVoList; &#125; public void setCartProductVoList(List&lt;CartProductVo&gt; cartProductVoList) &#123; this.cartProductVoList = cartProductVoList; &#125; public BigDecimal getCartTotalPrice() &#123; return cartTotalPrice; &#125; public void setCartTotalPrice(BigDecimal cartTotalPrice) &#123; this.cartTotalPrice = cartTotalPrice; &#125; public boolean isAllChecked() &#123; return allChecked; &#125; public void setAllChecked(boolean allChecked) &#123; this.allChecked = allChecked; &#125; public String getImageHost() &#123; return imageHost; &#125; public void setImageHost(String imageHost) &#123; this.imageHost = imageHost; &#125;&#125; 5、我们继续回到CartServiceImpl.java文件，看到这行代码List&lt;Cart&gt; cartList =cartMapper.selectCartByUserId(userId); //自定义的sql语句就知道需要去dao层的CartMapper.java文件，新增一行代码：1List&lt;Cart&gt; selectCartByUserId(Integer UserId); 接着打开mappers包的CartMapper.xml文件，里面新增以下代码：1234567&lt;select id=&quot;selectCartByUserId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;int&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_cart where user_id =#&#123;userId&#125;&lt;/select&gt; 6、Java中丢失精度的问题是一个值得注意的问题，因此我们需要进行设置。float和double只能用于科学计算和工程计算，商业运算必须使用BigDecimal。通过查看BigDecimal的String构造器，我们发现：1234567When a &#123;@code double&#125; must be used as a source for a* &#123;@code BigDecimal&#125;, note that this constructor provides an* exact conversion; it does not give the same result as* converting the &#123;@code double&#125; to a &#123;@code String&#125; using the* &#123;@link Double#toString(double)&#125; method and then using the* &#123;@link #BigDecimal(String)&#125; constructor. To get that result,* use the &#123;@code static&#125; &#123;@link #valueOf(double)&#125; method. 从上面的源码中我们也发现了这一情况，因此需要使用它的String构造器。但是呢，我们的数据库中存放的都是int类型，因此我们需要创建一个用于转换类型的工具类，打开Util这个包，我们在里面新建一个BigDecimalUtil.java的文件，在里面写入以下代码：1234567891011121314151617181920212223242526272829303132333435363738394041package top.store.util;import java.math.BigDecimal;public class BigDecimalUtil &#123; //我们不能使我们的工具类在外部进行实例化，因此将构造方法私有化 private BigDecimalUtil()&#123; &#125; //加法 public static BigDecimal add(double a1,double a2)&#123; BigDecimal b1 =new BigDecimal(Double.toString(a1)); BigDecimal b2 =new BigDecimal(Double.toString(a2)); return b1.add(b2); &#125; //减法 public static BigDecimal sub(double a1,double a2)&#123; BigDecimal b1 =new BigDecimal(Double.toString(a1)); BigDecimal b2 =new BigDecimal(Double.toString(a2)); return b1.subtract(b2); &#125; //乘法 public static BigDecimal mut(double a1,double a2)&#123; BigDecimal b1 =new BigDecimal(Double.toString(a1)); BigDecimal b2 =new BigDecimal(Double.toString(a2)); return b1.multiply(b2); &#125; //除法，注意使用四舍五入 public static BigDecimal div(double a1,double a2)&#123; BigDecimal b1 =new BigDecimal(Double.toString(a1)); BigDecimal b2 =new BigDecimal(Double.toString(a2)); return b1.divide(b2,2,BigDecimal.ROUND_HALF_UP); //四舍五入模式，保留2位小数 &#125;&#125; 你可以使用Ctrl+O（字母O）来查看该类的不同类型的构造方法,我们使用下面的构造方法，scale是指你保留的位数，roundingMode是指什么模式：ROUND_HALF_UP是四舍五入模式。1public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode) 具体的可以参看这篇文章：BigDecimal.ROUND_HALF_XXX的各种用法7、我们这里之所以不直接从商品对象里获取信息，是因为后面有些是存在于购物车的，有些存在于商品，很容易造成混乱，因此我们这里就使用了一个组装的购物车商品对象，你需要的时候调用它就可以。8、在判断库存数量的时候，我们需要注意设置一个常量，用于提示前端最低库存，继续打开common包下面的const文件，在里面新增以下代码：12String LIMIT_NUM_FAIL = &quot;LIMIT_NUM_FAIL&quot;;String LIMIT_NUM_SUCCESS = &quot;LIMIT_NUM_SUCCESS&quot;; 把之前的购物车状态代码合在一块就是：1234567public interface Cart&#123; int CHECKED = 1;//购物车选中状态 int UN_CHECKED = 0;//购物车中未选中状态 String LIMIT_NUM_FAIL = &quot;LIMIT_NUM_FAIL&quot;; String LIMIT_NUM_SUCCESS = &quot;LIMIT_NUM_SUCCESS&quot;;&#125; 9、然后就是cartVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)); //这里需要直接从服务器中获取这个很多注意事项我都在代码里面作了详细的说明。10、看到这行代码，你同样需要123//如果用户不为空//这里sql语句结果之所以没有返回boolean是因为我们去数据库里面一般返回的都是int，所以需要进行二次判断return cartMapper.selectCartProductCheckedStatusByUserId(userId) ==0; 去dao层的CartMapper.java文件，新增一行代码：1int selectCartProductCheckedStatusByUserId(Integer userId); 接着打开mappers包的CartMapper.xml文件，里面新增以下代码：1234 &lt;select id=&quot;selectCartProductCheckedStatusByUserId&quot; resultType=&quot;int&quot; parameterType=&quot;int&quot;&gt; &lt;!--这里就是说里面有没有选中的就意味着不是全选--&gt; SELECT count(1) from store_cart where checked = 0 and user_id = #&#123;userId&#125; &lt;/select&gt;&lt;/mapper&gt; 精度测试对了，还有前面的精度测试，我们打开test包下面的java包，里面新建一个包top.licheetools.test，名字随意，我这里就是这个样子，然后新建BigDecimalTest.java文件：12345678910111213141516171819202122232425262728293031323334package top.licheetools.test;import org.junit.Test;import java.math.BigDecimal;//这里因为是专门的测试包，所以不需要使用junit，也不需要加载Spring容器public class BigDecimalTest &#123; @Test public void test1()&#123; System.out.println(0.08+0.05); System.out.println(2.01-0.58); System.out.println(0.08*100); System.out.println(6.89/100); &#125; @Test public void test2()&#123; //使用BigDecimal的Integer构造函数 BigDecimal b1 =new BigDecimal(0.06); BigDecimal b2 =new BigDecimal(0.09); System.out.println(b1.add(b2)); &#125; @Test public void test3()&#123; //使用BigDecimal的String构造函数 BigDecimal b1 =new BigDecimal(&quot;0.06&quot;); BigDecimal b2 =new BigDecimal(&quot;0.09&quot;); System.out.println(b1.add(b2)); &#125;&#125; 运行结果我这里就只附上截图： 这样我们本篇关于如何将商品加入到购物车的介绍就到此为止了，这里因为需要构造一个复用的购物车模型，所以需要很多时间，但是后面功能的实现就能直接借助它了，开发起来还是快速的，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十七）：前台商品列表，搜索，动态排序","slug":"SSM搭建二手市场交易平台（十七）：前台商品列表，搜索，动态排序","date":"2018-08-26T03:21:06.000Z","updated":"2019-04-15T14:14:23.896Z","comments":true,"path":"2018/08/26/SSM搭建二手市场交易平台（十七）：前台商品列表，搜索，动态排序/","link":"","permalink":"http://blog.licheetools.top/2018/08/26/SSM搭建二手市场交易平台（十七）：前台商品列表，搜索，动态排序/","excerpt":"","text":"写在前面在前面的某一篇里面，我们完成了后台商品详情，列表，搜索，动态排序功能的开发。那么本篇我们来介绍前台商品详情，列表，搜索，动态排序功能的开发，这个和那个不一样，希望大家多看几遍，好好理解一下其中的不同。 前台商品详情获取我们打开controller包，在里面的portal包里面新建ProductController.java文件，里面写入以下代码：12345678910/*** * 前台获取商品的详情信息 * @author lenovo * */ @RequestMapping(value = &quot;detail.do&quot;) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;ProductDetailVo&gt; detail(Integer productId)&#123; //前台和后台关于商品详情信息的获取是非常相似的，除了前台需要判断商品的状态，如果下线或者删除就返回一个错误或者是不进行返回 return iProductService.getProductDetail(productId); &#125; 接着打开ProductServiceImpl.java文件，在里面新增以下代码：12345678910111213141516171819202122232425@Autowiredprivate CategoryMapper categoryMapper;/*** *前台获取商品的详情信息 * */public ServerResponse&lt;ProductDetailVo&gt; getProductDetail(Integer productId)&#123; //判断商品是否存在 if (productId == null) &#123; //商品id不存在 return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; Product product = productMapper.selectByPrimaryKey(productId); if (product == null) &#123; return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;); &#125; if(product.getStatus() != Const.ProductStatusEnum.ON_SALE.getCode())&#123; return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;); &#125; //商品存在,我们现在是进行信息的传递 ProductDetailVo productDetailVo =assembleProductDetailVo(product); return ServerResponse.createBySuccess(productDetailVo);&#125; 这段代码基本上和我们之前后台获取商品详情的逻辑一样，但是多了一部就是需要判断商品的状态，对于那些不存在或者已经下架的商品我们就不需要显示了，直接返回提示信息。 看到if(product.getStatus() != Const.ProductStatusEnum.ON_SALE.getCode()){ return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;); }这行代码，说明我们需要新建一个枚举类，打开之前的Comm包下面的Const这个java文件，在里面新增以下代码：12345678910111213141516171819public enum ProductStatusEnum&#123; ON_SALE(1,&quot;在线&quot;) ; private String value; private int code; ProductStatusEnum(int code,String value)&#123; this.code =code; this.value=value; &#125; public String getValue() &#123; return value; &#125; public int getCode() &#123; return code; &#125; &#125; 最后打开IProductService这个接口，我们把刚才的实现类的接口代码添加进去：1ServerResponse&lt;ProductDetailVo&gt; getProductDetail(Integer productId); //前台获取商品的详情信息 这样我们关于前台商品详情获取的功能开发就完成了，接下来就是前台列表的分页，搜索，动态排序功能了。 前台列表分页，搜索，动态排序实现老规矩，我们打开ProductController.java文件，里面写入以下代码：123456789101112131415/*** * 前台获取商品列表并进行分页,搜索，动态排序 * @author lenovo * */@RequestMapping(value = &quot;list.do&quot;) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;PageInfo&gt; list (@RequestParam(value = &quot;keyword&quot; ,required = false) String keyword, @RequestParam(value = &quot;categoryId&quot; ,required = false)Integer categoryId, @RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum, @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize, @RequestParam(value = &quot;orderBy&quot; ,defaultValue = &quot;&quot;)String orderBy )&#123; return iProductService.getProductByKeywordCategory(keyword,categoryId,pageNum,pageSize,orderBy);&#125; 接着打开ProductServiceImpl.java文件，在里面新增以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/*** * 前台获取商品列表并进行分页,搜索，动态排序 * @author lenovo * */ public ServerResponse&lt;PageInfo&gt; getProductByKeywordCategory(String keyword,Integer categoryId,int pageNum,int pageSize,String orderBy)&#123; //判断一下keyword和categoryId是否为空，如果是的话就显示参数错误 if(StringUtils.isBlank(keyword) &amp;&amp; categoryId ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; List&lt;Integer&gt; categoryIdList = new ArrayList&lt;Integer&gt;(); //这里声明一个list用于保存通过递归得到的它的及其子类id if(categoryId !=null)&#123; //通过categoryId来获取category这个对象 Category category =categoryMapper.selectByPrimaryKey(categoryId); if(category ==null&amp;&amp;StringUtils.isBlank(keyword))&#123; //没有该分类,并且还没有关键字,这个时候返回一个空的结果集,不能报错 //这里的意思就是说假设前端请求categoryId==1,但是我们数据库里面没有1只有2，这就是不匹配而已，并不是错误 PageHelper.startPage(pageNum,pageSize); List&lt;ProductListVo&gt; productListVoList =Lists.newArrayList(); PageInfo pageInfo =new PageInfo(productListVoList); return ServerResponse.createBySuccess(pageInfo); &#125; //这是通过之前写的递归算法拿到了它的分类以及其子分类 categoryIdList =iCategoryService.selectCategoryAndChildrenById(category.getId()).getData(); //这里需要去CategoryServiceImpl里面对我们之前写的关于递归查询子节点的函数进行一个修改，添加返回值的类型List&lt;Integer&gt; &#125; //判断keyword是否为空 if(StringUtils.isNotBlank(keyword))&#123; //将keyword变成%keyword%用于模糊查询操作 keyword =new StringBuilder().append(&quot;%&quot;).append(keyword).append(&quot;%&quot;).toString(); &#125; PageHelper.startPage(pageNum,pageSize); //进行排序处理 //我们和前端约定弄一个接口去实现orderBy的选择 //判断orderBy这个字段不为空 if(StringUtils.isNotBlank(orderBy))&#123; //判断前端传的orderBy是否在我们定义的Const集合中 if(Const.ProductListOrderBy.PRICE_ASC_DESC.contains(orderBy))&#123; //因为pageHelper.orderBy里面的参格式是price desc，所以我们需要对集合中的&quot;price_desc&quot;和&quot;price_asc&quot;进行分割 String[] orderByArray =orderBy.split(&quot;_&quot;); PageHelper.orderBy(orderByArray[0]+&quot; &quot;+orderByArray[1]); //注意一下这里双引号之间有一个空格 &#125; &#125; //进行动态搜索 //这里注意我们的keyword就是productName //仅仅使用下面的这行代码是不可以的，因为keyword和categoryIdList有可能没有，所以我们需要使用三元运算符进行判断 // List&lt;Product&gt; productList =productMapper.selectByNameAndCategoryIds(keyword,categoryIdList); //将之前的(keyword,categoryIdList)变成(StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList) //使用sql语句获取的结果 List&lt;Product&gt; productList =productMapper.selectByNameAndCategoryIds(StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList); List&lt;ProductListVo&gt; productListVoList =Lists.newArrayList(); for(Product product:productList)&#123; ProductListVo productListVo =assembleProductListVo(product); productListVoList.add(productListVo); &#125; PageInfo pageInfo =new PageInfo(productList); //注意这里传入的就是通过sql语句获得的列表 pageInfo.setList(productListVoList); return ServerResponse.createBySuccess(pageInfo); &#125; 这段代码是核心代码，对此我有几个注意事项需要说明：1、首先我们这个商品的查询是通过keyword来实现的，采用模糊查询。2、假设前端请求categoryId==1,但是我们数据库里面没有1只有2，这就是不匹配而已，并不是错误所以我们需要进行一个信息提示。3、我们前面参数中的categoryId是用来获取category这个对象，然后利用这个对象来调用递归算法拿到了它的分类以及其子分类组成的列表。4、排序处理的时候，我们打开Const这个类，在里面新增以下代码：1234public interface ProductListOrderBy&#123; //这里使用set是因为set的contain函数的时间复杂度是O(1),而List的contain函数的时间复杂度则是O(n); Set&lt;String&gt; PRICE_ASC_DESC = Sets.newHashSet(&quot;price_desc&quot;,&quot;price_asc&quot;); //按照价格进行排序&#125; 这个就是排序的依据，而且不知道你注意到没有，我们这里使用了set是因为set的contains函数的时间复杂度是O(1),而List的contains函数的时间复杂度则是O(n); 5、因为pageHelper.orderBy里面的参格式是price desc，所以我们需要对集合中的&quot;price_desc&quot;和&quot;price_asc&quot;进行分割，我们知道split函数最后返回的就是一个String类型的数组，最后直接调用它的PageHelper.orderBy(orderByArray[0]+&quot; &quot;+orderByArray[1]);就可以了。6、动态搜索，这里注意我们的keyword就是productName，而且keyword和categoryIdList有可能没有，所以我们需要使用三元运算符进行判断：1StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList 7、注意这里的selectByNameAndCategoryIds函数，所以我们需要ProductMapper.java文件，新增以下代码：12//注意在mybatis里面，多个参数时需要使用param注解 List&lt;Product&gt; selectByNameAndCategoryIds(@Param(value = &quot;productName&quot;) String productName,@Param(&quot;categoryIdList&quot;)List&lt;Integer&gt; categoryIdList); 然后记得打开ProductMapper.xml文件，新增sql语句：123456789101112131415&lt;select id=&quot;selectByNameAndCategoryIds&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_product where status = 1 &lt;if test=&quot;productName != null&quot;&gt; and name like #&#123;productName&#125; &lt;/if&gt; &lt;if test=&quot;categoryIdList != null&quot; &gt; and category_id in &lt;foreach item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot; collection=&quot;categoryIdList&quot;&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/if&gt;&lt;/select&gt; 8、categoryIdList=iCategoryService.selectCategoryAndChildrenById(category.getId()).getData();这里需要去CategoryServiceImpl里面对我们之前写的关于递归查询子节点的函数进行一个修改，添加返回值的类型List:1public ServerResponse&lt;List&lt;Integer&gt;&gt; selectCategoryAndChildrenById(Integer categoryId)&#123; 以及iCategoryService.java文件，修改为以下代码：1ServerResponse&lt;List&lt;Integer&gt;&gt; selectCategoryAndChildrenById(Integer categoryId); //后台管理员递归查询本节点及子节点的id并返回列表 最后记得打开IProductService这个接口，我们把刚才的实现类的接口代码添加进去：1ServerResponse&lt;PageInfo&gt; getProductByKeywordCategory(String keyword,Integer categoryId,int pageNum,int pageSize,String orderBy); //前台获取商品列表并进行分页,搜索，动态排序 这样我们本篇关于前台商品详情，列表，搜索，动态排序功能的开发介绍就到此为止了，接下来是进行各个相关接口的测试。 由于测试比较简单，这里直接附上几张测试截图即可，不作过多说明： 这样我们本篇关于前台商品详情，列表，搜索，动态排序功能开发的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十六）：后台文件和富文本图片上传的开发","slug":"SSM搭建二手市场交易平台（十六）：后台文件和富文本图片上传的开发","date":"2018-08-25T01:21:06.000Z","updated":"2019-04-15T14:13:36.186Z","comments":true,"path":"2018/08/25/SSM搭建二手市场交易平台（十六）：后台文件和富文本图片上传的开发/","link":"","permalink":"http://blog.licheetools.top/2018/08/25/SSM搭建二手市场交易平台（十六）：后台文件和富文本图片上传的开发/","excerpt":"","text":"写在前面本篇我们来介绍后台文件上传和后台富文本图片上传的开发，这里面涉及到的内容比较多，而且还是具有一定的难度，建议大家没事多看几遍，多敲代码。 后台文件上传首先打开ProductManageController.java文件，在里面新增以下代码：12345678910111213141516171819202122232425262728/*** * * 后台管理员--上传文件到服务器（spring mvc） * */ @RequestMapping(&quot;upload.do&quot;) @ResponseBody public ServerResponse upload(HttpSession session, @RequestParam(value = &quot;upload_file&quot;,required = false) MultipartFile file, HttpServletRequest request)&#123; //判断一下登录情况 User user = (User)session.getAttribute(Const.CURRENT_USER); if(user == null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录,请登录管理员&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就进行后台上传文件的逻辑 String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;); String targetFileName = iFileService.upload(file,path); String url = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)+targetFileName; //进行url的拼接以供前端使用 Map fileMap = Maps.newHashMap(); fileMap.put(&quot;uri&quot;,targetFileName); fileMap.put(&quot;url&quot;,url); return ServerResponse.createBySuccess(fileMap); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125; 关于这段代码，我需要说明几点：1、参数问题，这里不仅仅需要登录，而且还需要一个文件参数（非必须）和请求参数（必须因为文件上传路径需要从它里面进行获取）。2、String targetFileName = iFileService.upload(file,path);看到这里就说明你需要完成几个事情：首先新建iFileService这个接口，然后再创建一个该接口的实现类。打开service这个包，在里面新建一个IFileService.java的接口，里面的代码如下：(按照我们之前的说明应该是最后进行的，这里考虑到介绍的顺序问题，就这里写吧)1234567package top.store.service;import org.springframework.web.multipart.MultipartFile;public interface IFileService &#123; String upload(MultipartFile file, String path); //上传文件到ftp服务器上面&#125; 然后打开impl文件，在里面新建FileServiceImpl.java文件来实现我们IFileService这个接口，里面的代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package top.store.service.impl;import com.google.common.collect.Lists;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import top.store.service.IFileService;import top.store.util.FTPUtil;import java.io.File;import java.io.IOException;import java.util.UUID;@Service(&quot;iFileService&quot;)public class FileServiceImpl implements IFileService &#123; //添加一个用于目录列表为空的日志 private Logger logger = LoggerFactory.getLogger(FileServiceImpl.class); public String upload(MultipartFile file,String path)&#123; //上传文件的名称 String fileName =file.getOriginalFilename(); //扩展名test.jpg，我们要获取jpg String fileExtensionName =fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1); //文件上传的名称 String uploadFileName = UUID.randomUUID().toString()+&quot;.&quot;+fileExtensionName; logger.info(&quot;开始上传文件,上传文件的文件名:&#123;&#125;,上传的路径:&#123;&#125;,新文件名:&#123;&#125;&quot;,fileName,path,uploadFileName); File fileDir = new File(path); if(!fileDir.exists())&#123; //文件可以设置权限 fileDir.setWritable(true); //创建多个文件 fileDir.mkdirs(); &#125; File targetFile = new File(path,uploadFileName); try &#123; file.transferTo(targetFile); //文件已经上传成功了 FTPUtil.uploadFile(Lists.newArrayList(targetFile)); //已经上传到ftp服务器上 targetFile.delete(); //删除upload下面的文件 &#125; catch (IOException e) &#123; logger.error(&quot;上传文件异常&quot;,e); return null; &#125; //1:test.jpg 这里就是说明我们前面使用UUID的必要性，否则就很容易造成重复 //2:test.jpg return targetFile.getName(); &#125;&#125; 上面这个实现文件上传的类不仅仅用在文件上传，而且后台富文本图片上传也是需要依靠它的。同样这里的FTPUtil.uploadFile(Lists.newArrayList(targetFile));也是需要你注意的，打开util包，在里面新建一个FTPUtil.java的工具类，我们在里面新增以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132package top.store.util;import org.apache.commons.net.ftp.FTPClient;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.util.List;public class FTPUtil &#123; //添加一个用于目录列表为空的日志 private static final Logger logger = LoggerFactory.getLogger(FTPUtil.class); //使用我们之前定义的PropertiesUtil这个工具类来获取服务器属性 private static String ftpIp =PropertiesUtil.getProperty(&quot;ftp.server.ip&quot;); private static String ftpUser =PropertiesUtil.getProperty(&quot;ftp.user&quot;); private static String ftpPass =PropertiesUtil.getProperty(&quot;ftp.pass&quot;); private String ip; private int port; private String user; private String pwd; private FTPClient ftpClient; public FTPUtil(String ip,int port,String user,String pwd )&#123; this.ip =ip; this.port =port; this.user=user; this.pwd =pwd; &#125; //上传服务器 public static boolean uploadFile(List&lt;File&gt; fileList) throws IOException &#123; FTPUtil ftpUtil = new FTPUtil(ftpIp,21,ftpUser,ftpPass); logger.info(&quot;开始连接 ftp 服务器&quot;); boolean result = ftpUtil.uploadFile(&quot;img&quot;,fileList); logger.info(&quot;开始连接 ftp 服务器,结束上传,上传结果:&#123;&#125;&quot;); return result; &#125; private boolean uploadFile(String remotePath,List&lt;File&gt; fileList) throws IOException &#123; boolean uploaded = true; FileInputStream fis = null; //连接 FTP 服务器 if(connectServer(this.ip,this.port,this.user,this.pwd))&#123; try &#123; ftpClient.changeWorkingDirectory(remotePath); ftpClient.setBufferSize(1024); ftpClient.setControlEncoding(&quot;UTF-8&quot;); ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); //二进制类型，可以防止乱码 ftpClient.enterLocalPassiveMode(); //打开本地的被动模式 for(File fileItem : fileList)&#123; fis = new FileInputStream(fileItem); ftpClient.storeFile(fileItem.getName(),fis); &#125; &#125; catch (IOException e) &#123; logger.error(&quot;上传文件异常&quot;,e); uploaded = false; e.printStackTrace(); &#125; finally &#123; fis.close(); //释放连接 ftpClient.disconnect(); &#125; &#125; return uploaded; &#125; //连接Ftp服务器 private boolean connectServer(String ip,int port,String user,String pwd)&#123; boolean isSuccess = false; ftpClient = new FTPClient(); try &#123; ftpClient.connect(ip); isSuccess = ftpClient.login(user,pwd); &#125; catch (IOException e) &#123; logger.error(&quot;连接 FTP 服务器异常&quot;,e); &#125; return isSuccess; &#125; public String getIp() &#123; return ip; &#125; public void setIp(String ip) &#123; this.ip = ip; &#125; public int getPort() &#123; return port; &#125; public void setPort(int port) &#123; this.port = port; &#125; public String getUser() &#123; return user; &#125; public void setUser(String user) &#123; this.user = user; &#125; public String getPwd() &#123; return pwd; &#125; public void setPwd(String pwd) &#123; this.pwd = pwd; &#125; public FTPClient getFtpClient() &#123; return ftpClient; &#125; public void setFtpClient(FTPClient ftpClient) &#123; this.ftpClient = ftpClient; &#125;&#125; 这个文件的作用就是获取服务器的属性以及负责连接服务器和上传文件到服务器。 3、我们继续回到ProductManageController.java文件，在最上面进行IFileService 的注入：12@Autowiredprivate IFileService iFileService; 关于文件上传的一些参数的设置，大家可以打开dispatcher-servlet.xml文件：123456&lt;!-- 文件上传 --&gt;&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt; &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/&gt; &lt;!-- 10m --&gt; &lt;property name=&quot;maxInMemorySize&quot; value=&quot;4096&quot; /&gt; &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 上面说了允许文件上传的最大尺寸，默认编码方式以及阈值，低于此值，只保留在内存里，超过此阈值，生成硬盘上的临时文件。 为了后面进行测试，你可以打开webapp下面的index.jsp文件，在里面添加如下代码：12345&lt;%--springmvc 上传文件--%&gt;&lt;form name=&quot;form1&quot; action=&quot;/manage/product/upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;upload_file&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;springmvc 上传文件&quot; /&gt;&lt;/form&gt; 这样后台文件上传的实现就介绍完了，接下来就进行后台富文本图片上传的开发。 后台富文本图片上传的开发前面说过，我们这两个功能的接口是一样的，因此那部分代码就可以不用再写了，直接就可以进行使用。但是我们这里使用了simditor，你可以点击这里进行了解：simditor，我们这里主要使用json，因此你可以拉到底部看到这段代码：12345&#123; &quot;success&quot;: true/false, &quot;msg&quot;: &quot;error message&quot;, # optional &quot;file_path&quot;: &quot;[real file path]&quot;&#125; 所以我们后面图片文件上传之后，返回的格式就是这个样子，这里告诉大家希望大家对此有个提前的认识。我们打开ProductManageController.java文件，在里面新增以下代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/*** * * 后台管理员--富文本图片上传文件到服务器 * */@RequestMapping(&quot;richtext_img_upload.do&quot;)@ResponseBodypublic Map richtextImgUpload(HttpSession session, @RequestParam(value = &quot;upload_file&quot;,required = false) MultipartFile file, HttpServletRequest request, HttpServletResponse response)&#123; Map resultMap =Maps.newHashMap(); //判断一下登录情况 User user = (User)session.getAttribute(Const.CURRENT_USER); if(user == null)&#123; resultMap.put(&quot;success&quot;,false); resultMap.put(&quot;msg&quot;,&quot;请登录管理员&quot;); return resultMap; &#125; //富文本中对于返回值有自己的要求,我们使用simditor，因此按照simditor的要求进行返回，前面我们也说过了。 //&#123; // &quot;success&quot;: true/false, // &quot;msg&quot;: &quot;error message&quot;, # optional // &quot;file_path&quot;: &quot;[real file path]&quot; //&#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就进行后台上传富文本文件的逻辑 String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;); String targetFileName = iFileService.upload(file,path); //判断文件名是否为空，如果为空的话 if(StringUtils.isBlank(targetFileName))&#123; resultMap.put(&quot;success&quot;,false); resultMap.put(&quot;msg&quot;,&quot;上传失败&quot;); return resultMap; &#125; String url = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)+targetFileName; //进行url的拼接以供前端使用 resultMap.put(&quot;success&quot;,true); resultMap.put(&quot;msg&quot;,&quot;上传成功&quot;); resultMap.put(&quot;file_path&quot;,url); response.addHeader(&quot;Access-Control-Allow-Headers&quot;,&quot;X-File-Name&quot;); return resultMap; &#125;else&#123; resultMap.put(&quot;success&quot;,false); resultMap.put(&quot;msg&quot;,&quot;无权限操作，需要管理员权限&quot;); return resultMap; &#125;&#125; 这个段代码就是核心代码，所以我需要说明几点：1、为什么我们最后的返回是一个map，因为simditor文档要求最后返回的是一个json而且是以一种键值对的格式进行返回，所以你要莫使用map，当然使用object也是可以的，你可以参考这篇文章：list、map、对象对应json的格式。 2、记住我们本项目都是使用了guava提供的map,set,list等，因为它们进行了更深层次的封装。 3、这里的逻辑就是先判断文件存在与否，不存在就直接返回失败，存在就进行url的拼接以及保存到header里面并及时显示成功之后的信息。这个逻辑还行，能理解。 同样为了后面进行测试，你可以打开webapp下面的index.jsp文件，在里面添加如下代码：12345&lt;%--富文本图片上传文件--%&gt;&lt;form name=&quot;form2&quot; action=&quot;/manage/product/richtext_img_upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;upload_file&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;富文本图片上传文件&quot; /&gt;&lt;/form&gt; 这样我们本篇关于后台文件上传和后台富文本图片上传开发的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十五）：后台商品列表动态分页及搜索功能","slug":"SSM搭建二手市场交易平台（十五）：后台商品列表动态分页及搜索功能","date":"2018-08-24T00:21:06.000Z","updated":"2019-04-15T14:12:12.893Z","comments":true,"path":"2018/08/24/SSM搭建二手市场交易平台（十五）：后台商品列表动态分页及搜索功能/","link":"","permalink":"http://blog.licheetools.top/2018/08/24/SSM搭建二手市场交易平台（十五）：后台商品列表动态分页及搜索功能/","excerpt":"","text":"写在前面本篇我们来介绍后台商品列表动态分页和后台商品搜索功能的开发，这里面会涉及到mybatis-pagehelper的使用。 商品列表动态分页忘了告诉你，你可以按住shift+ctrl+T进行类的搜索，这个功能是非常好用的。好了，我们正式开始介绍后台商品列表动态分页功能的实现。 首先打开ProductManageController.java文件，在里面新增以下代码： 12345678910111213141516171819202122/*** * * 后台管理员--后台商品列表及动态分页 * */@RequestMapping(&quot;list.do&quot;)@ResponseBody //自动序列化json功能public ServerResponse getList(HttpSession session,@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;) int pageNum, @RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;10&quot;) int pageSize)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就进行后台商品列表及动态分页的逻辑 return iProductService.getProductList(pageNum,pageSize); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125;&#125; 接着打开ProductServiceImpl.java文件，里面写入以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142/*** * * 后台管理员--后台商品列表及动态分页 * */ public ServerResponse&lt;PageInfo&gt; getProductList(int pageNum,int pageSize)&#123; /*** * 使用mybatis-pagehelper的三个步骤： * 1、startPage--start * 2、填充自己的sql查询逻辑 * 3、pageHelper-收尾 * */ //startPage--start PageHelper.startPage(pageNum,pageSize); //填充自己的sql查询逻辑 List&lt;Product&gt; productList =productMapper.selectList(); List&lt;ProductListVo&gt; productListVoList = Lists.newArrayList(); //Lists这是guava对list的封装 for(Product productItem : productList)&#123; ProductListVo productListVo = assembleProductListVo(productItem); productListVoList.add(productListVo); &#125; //pageHelper-收尾 PageInfo pageResult = new PageInfo(productList); pageResult.setList(productListVoList); return ServerResponse.createBySuccess(pageResult); &#125; //新的商品用于商品列表信息的获取 private ProductListVo assembleProductListVo(Product product) &#123; ProductListVo productListVo = new ProductListVo(); productListVo.setId(product.getId()); productListVo.setCategoryId(product.getCategoryId()); productListVo.setName(product.getName()); productListVo.setSubtitle(product.getSubtitle()); productListVo.setMainImage(product.getMainImage()); productListVo.setPrice(product.getPrice()); productListVo.setStatus(product.getStatus()); productListVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;, &quot;http://img.licheetools.top/&quot;)); return productListVo; &#125; 关于这段代码，我需要说明几点事项：1、因为这里我们使用了mybatis-pagehelper这个分页插件，因此有必要了解一下它的官方文档：使用方法，觉得看不懂得可以参看这篇文章：手把手教你如何玩转插件：分页插件（Pagehelper）。 2、因为我们后台已经有一个实现商品详情信息的功能了，这里我们只是对其进行分页而已，而且是不需要获取更多的信息，因此有必要新建一个product对象，我们称其为ProductListVo。所以我们就要打开vo这个包，在里面新建一个ProductListVo类，里面的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package top.store.vo;import java.math.BigDecimal;public class ProductListVo &#123; private Integer id; private Integer categoryId; private String name; private String subtitle; private String mainImage; private BigDecimal price; private Integer status; private String imageHost; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public Integer getCategoryId() &#123; return categoryId; &#125; public void setCategoryId(Integer categoryId) &#123; this.categoryId = categoryId; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getSubtitle() &#123; return subtitle; &#125; public void setSubtitle(String subtitle) &#123; this.subtitle = subtitle; &#125; public String getMainImage() &#123; return mainImage; &#125; public void setMainImage(String mainImage) &#123; this.mainImage = mainImage; &#125; public BigDecimal getPrice() &#123; return price; &#125; public void setPrice(BigDecimal price) &#123; this.price = price; &#125; public Integer getStatus() &#123; return status; &#125; public void setStatus(Integer status) &#123; this.status = status; &#125; public String getImageHost() &#123; return imageHost; &#125; public void setImageHost(String imageHost) &#123; this.imageHost = imageHost; &#125;&#125; 也许你也注意到，我们就是选择自己需要的信息然后才进行组装成一个新的product。 3、我们继续回到ProductServiceImpl.java文件，这后面的那段组装新的Product的代码是不是非常眼熟，对就是和我们之前的商品详情信息组装几乎是一模一样的，但是还依然要注意ImageHost这个字段的获取，你可以照搬前面的代码。 4、看到List&lt;Product&gt; productList =productMapper.selectList();这段代码，说明我们需要需要去productMapper.java文件里面添加以下代码：1List&lt;Product&gt; selectList(); 然后打开productMapper.xml文件，往里面添加以下代码：123456&lt;select id=&quot;selectList&quot; resultMap=&quot;BaseResultMap&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_product order by id asc&lt;/select&gt; 最后打开IProductService.java文件，里面写入以下代码：1ServerResponse&lt;PageInfo&gt; getProductList(int pageNum, int pageSize); //后台管理员--后台商品列表及动态分页 后台商品搜索功能开发老规矩，我们首先打开ProductManageController.java文件，在里面新增以下代码：123456789101112131415161718192021/*** * * 后台管理员--后台商品搜索功能 * */@RequestMapping(&quot;search.do&quot;)@ResponseBody //自动序列化json功能public ServerResponse productSearch(HttpSession session,String productName,Integer productId,@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;) int pageNum, @RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;10&quot;) int pageSize)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就进行后台商品搜索功能开发的逻辑 return iProductService.productSearch(productName,productId,pageNum,pageSize); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125;&#125; 接着打开ProductServiceImpl.java文件，里面写入以下代码：1234567891011121314151617181920212223242526/*** * * 后台管理员--后台商品搜索功能(同样也需要分页) * */public ServerResponse&lt;PageInfo&gt; productSearch(String productName,Integer productId,int pageNum, int pageSize)&#123; //startPage--start PageHelper.startPage(pageNum,pageSize); if(StringUtils.isNotBlank(productName))&#123; productName = new StringBuilder().append(&quot;%&quot;).append(productName).append(&quot;%&quot;).toString(); &#125; //填充自己的sql查询逻辑 List&lt;Product&gt; productList =productMapper.selectByNameAndProductId(productName,productId); List&lt;ProductListVo&gt; productListVoList = Lists.newArrayList(); //Lists这是guava对list的封装 for(Product productItem : productList)&#123; ProductListVo productListVo = assembleProductListVo(productItem); productListVoList.add(productListVo); &#125; //pageHelper-收尾 PageInfo pageResult = new PageInfo(productList); pageResult.setList(productListVoList); return ServerResponse.createBySuccess(pageResult);&#125; 关于这段代码，我需要说明几点事项：1、productName = new StringBuilder().append(&quot;%&quot;).append(productName).append(&quot;%&quot;).toString();这行代码的意思就是构造一个新的productName对象，就是用于数据库字段的查找，我们知道如果你要进行查找，特别是模糊查找，那么相应的sql语句是：1select * from store_product where name like %productName%； 这里我们为了xml里面书写sql语句的便捷，就在这里进行了转化，此时的productName=%productName%。 2、%：表示任意0个或多个字，可匹配任意类型和长度的字符；_： 表示任意单个字符，匹配单个任意字符，它常用来限制表达式的字符长度语句。 3、看到productMapper.selectByNameAndProductId(productName,productId);你应该就知道需要打开dao包的ProductMapper.java这个接口，在里面定义一个查询sql的方法：1List&lt;Product&gt; selectByNameAndProductId(@Param(value = &quot;productName&quot;) String productName,@Param(value = &quot;productId&quot;) Integer productId); //注意在mybatis里面，多个参数时需要使用param注解。 然后我们打开ProductMapper.xml文件，在里面新增sql查询语句：123456&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_product where id=#&#123;productId&#125; || name like #&#123;productName&#125;&lt;/select&gt; 这种你觉得可以莫，我觉得不能使用短路或，因为一旦前面id为空，后面就不进行判断了，所以我们需要进行改写： 下面的如何？使用了if判断条件，但是还是有问题就是假如两个条件都不满足条件，那就会报错，因此这种也是不可以的：1234567891011&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_product &lt;if test=&quot;productName != null&quot;&gt; where name like #&#123;productName&#125; &lt;/if&gt; &lt;if test=&quot;productId != null&quot;&gt; and id =#&#123;productId&#125; &lt;/if&gt;&lt;/select&gt; 再来看看下面这个版本，这个经过使用where 1=1这个条件，的确可以满足要求，但是你不觉得这个太Low了莫？在这里加一个没有任何关系的where 1=1是不是没必要？对，mybatis给我们提供了一个where判断，可以避免这种情况的发生。123456789101112&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_product where 1=1 &lt;if test=&quot;productName != null&quot;&gt; and name like #&#123;productName&#125; &lt;/if&gt; &lt;if test=&quot;productId != null&quot;&gt; and id =#&#123;productId&#125; &lt;/if&gt;&lt;/select&gt; 就是下面的代码：12345678910111213&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_product &lt;where&gt; &lt;if test=&quot;productName != null&quot;&gt; and name like #&#123;productName&#125; &lt;/if&gt; &lt;if test=&quot;productId != null&quot;&gt; and id =#&#123;productId&#125; &lt;/if&gt; &lt;/where&gt;&lt;/select&gt; 或者是这样的，都是可以的：12345678910111213&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from store_product &lt;where&gt; &lt;if test=&quot;productName != null&quot;&gt; or name like #&#123;productName&#125; &lt;/if&gt; &lt;if test=&quot;productId != null&quot;&gt; or id =#&#123;productId&#125; &lt;/if&gt; &lt;/where&gt;&lt;/select&gt; 也就是说一旦逻辑传到where里面，而且if判断条件成立的情况下，将所有的or或者and替换为where，这样我们就不需要担心后面的where条件是否成立了。 最后打开IProductService.java文件，里面写入以下代码：1ServerResponse&lt;PageInfo&gt; productSearch(String productName,Integer productId,int pageNum, int pageSize); //后台管理员--后台商品搜索功能(同样也需要分页) 这样我们本篇关于后台商品列表动态分页和后台商品搜索功能的开发介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十四）：商品详情信息获取","slug":"SSM搭建二手市场交易平台（十四）：商品详情信息获取","date":"2018-08-23T07:21:06.000Z","updated":"2019-04-15T14:11:20.961Z","comments":true,"path":"2018/08/23/SSM搭建二手市场交易平台（十四）：商品详情信息获取/","link":"","permalink":"http://blog.licheetools.top/2018/08/23/SSM搭建二手市场交易平台（十四）：商品详情信息获取/","excerpt":"","text":"写在前面本篇我们来介绍后台商品详细信息获取的功能，这里面有几个字段的获取比较特殊，需要格外注意。 获取商品详情首先打开ProductManageController.java文件，在里面新增以下代码： 123456789101112131415161718192021/*** * * 后台管理员获取商品的详情 * */ @RequestMapping(&quot;detail.do&quot;) @ResponseBody //自动序列化json功能 public ServerResponse getDetail(HttpSession session, Integer productId)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加我们获取商品详情的逻辑 return iProductService.manageGetDetail(productId); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125; 接着打开ProductServiceImpl.java文件，里面写入以下代码：1234567891011121314151617181920212223/*** * * 后台管理员获取商品的详情 * */public ServerResponse&lt;ProductDetailVo&gt; manageGetDetail(Integer productId) &#123; //判断商品是否存在 if (productId == null) &#123; //商品id不存在 return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; Product product = productMapper.selectByPrimaryKey(productId); if (product == null) &#123; return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;); &#125; // vo对象--value object //pojo --&gt;bo(business object)---&gt;vo(view object) //我们这里还是先按照技术结构的演变，使用vo等到后面升级的时候再进行替换 //商品存在,我们现在是进行信息的传递 ProductDetailVo productDetailVo =assembleProductDetailVo(product); return ServerResponse.createBySuccess(productDetailVo);&#125; 我们知道现在是要获取商品的详细信息，那么我们可以使用不同的架构来完成，有两种架构可供选择：pojo –&gt;vo对象（value object）和pojo –&gt;bo(business object)—&gt;vo(view object)，考虑到技术的演变，我们这里还是使用vo等到后面升级的时候再进行替换。前面我们进行了商品信息是否存在的判断，现在是有商品，那么如何获取商品呢？ 这里我们写了一个方法，用于获取商品信息(在ProductServiceImpl.java文件里面继续写入以下代码：)：1234567891011121314151617181920212223242526272829303132private ProductDetailVo assembleProductDetailVo(Product product) &#123; ProductDetailVo productDetailVo = new ProductDetailVo(); productDetailVo.setId(product.getId()); productDetailVo.setSubtitle(product.getSubtitle()); productDetailVo.setPrice(product.getPrice()); productDetailVo.setMainImage(product.getMainImage()); productDetailVo.setSubImages(product.getSubImages()); productDetailVo.setCategoryId(product.getCategoryId()); productDetailVo.setDetail(product.getDetail()); productDetailVo.setName(product.getName()); productDetailVo.setStatus(product.getStatus()); productDetailVo.setStock(product.getStock()); //imageHost:这个我们需要进行单独的配置，这样便于后面的维护 productDetailVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;, &quot;http://img.licheetools.top/&quot;)); //parentCategoryId Category category = categoryMapper.selectByPrimaryKey(product.getId()); if (category ==null) &#123; productDetailVo.setParentCategoryId(0); //没有父节点就默认该节点为0 &#125;else &#123; productDetailVo.setParentCategoryId(category.getParentId()); //存在就赋值给它 &#125; //createTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置 productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime())); //updateTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置 productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime())); return productDetailVo;&#125; 既然我们使用了vo那么我们就要去vo包里面新建一个ProductDetailVo.java，在里面写入以下代码，这个文件里面就是定义一些你需要查询的商品字段：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134package top.store.vo;import java.math.BigDecimal;public class ProductDetailVo &#123; private Integer id; private Integer categoryId; private String name; private String subtitle; private String mainImage; private String subImages; private String detail; private BigDecimal price; private Integer stock; private Integer status; private String createTime; private String updateTime; private String imageHost; //这个是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问 private Integer parentCategoryId; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public Integer getCategoryId() &#123; return categoryId; &#125; public void setCategoryId(Integer categoryId) &#123; this.categoryId = categoryId; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getSubtitle() &#123; return subtitle; &#125; public void setSubtitle(String subtitle) &#123; this.subtitle = subtitle; &#125; public String getMainImage() &#123; return mainImage; &#125; public void setMainImage(String mainImage) &#123; this.mainImage = mainImage; &#125; public String getSubImages() &#123; return subImages; &#125; public void setSubImages(String subImages) &#123; this.subImages = subImages; &#125; public String getDetail() &#123; return detail; &#125; public void setDetail(String detail) &#123; this.detail = detail; &#125; public BigDecimal getPrice() &#123; return price; &#125; public void setPrice(BigDecimal price) &#123; this.price = price; &#125; public Integer getStock() &#123; return stock; &#125; public void setStock(Integer stock) &#123; this.stock = stock; &#125; public Integer getStatus() &#123; return status; &#125; public void setStatus(Integer status) &#123; this.status = status; &#125; public String getCreateTime() &#123; return createTime; &#125; public void setCreateTime(String createTime) &#123; this.createTime = createTime; &#125; public String getUpdateTime() &#123; return updateTime; &#125; public void setUpdateTime(String updateTime) &#123; this.updateTime = updateTime; &#125; public String getImageHost() &#123; return imageHost; &#125; public void setImageHost(String imageHost) &#123; this.imageHost = imageHost; &#125; public Integer getParentCategoryId() &#123; return parentCategoryId; &#125; public void setParentCategoryId(Integer parentCategoryId) &#123; this.parentCategoryId = parentCategoryId; &#125;&#125; 里面我们有一个imageHost字段，它是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问。继续回到我们的ProductServiceImpl.java文件，不知道细心的你发现没有，有4个字段的获取我们是使用了特殊的方法。其实也正是因为这个原因，我们并没有直接从product对象里面直接获取信息，因为那样获取的信息有可能不是我们所需要的格式，所以我们这里就重新定义了一个ProductDetailVo类，它的实例对象都是来源于product对象但是又进行了更深层次的处理，因此它就是我们想要的。 那么这4个特殊字段的获取应该怎么操作呢？接下来一一为你介绍。 imageHost字段获取前面说过因为imageHost是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问，所以肯定会涉及到一些服务器属性的配置，这样我们把与服务器属性相关的利用配置文件来处理，这样一旦服务器发送变动，你只需要修改一下配置文件即可，不需要进行很多代码的修改，无形中提高了代码的可维护性。 打开util包，在里面新建一个PropertiesUtil.java文件，里面写入以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package top.store.util;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.IOException;import java.io.InputStreamReader;import java.util.Properties;public class PropertiesUtil &#123; //定义日志 private static Logger logger = LoggerFactory.getLogger(PropertiesUtil.class); private static Properties properties; static &#123; String fileName =&quot;store.properties&quot;; properties =new Properties(); try &#123; properties.load(new InputStreamReader(PropertiesUtil.class.getClassLoader().getResourceAsStream(fileName),&quot;UTF-8&quot;)); &#125; catch (IOException e) &#123; logger.info(&quot;配置文件读取异常&quot;,e); &#125; &#125; //定义方法用于从store.properties文件中读取信息 public static String getProperty(String key)&#123; //可能我们写的property文件存在空格，需要去掉key包含的空格 String value =properties.getProperty(key.trim()); if(StringUtils.isBlank(value))&#123; //注意这里使用isBlank，就算是空格和制表符也是为空 return null; &#125; return value.trim(); //有可能后面的值也存在空值 &#125; //定义方法用于从store.properties文件中读取信息，添加默认参数 public static String getProperty(String key,String defaultValue)&#123; //可能我们写的property文件存在空格，需要去掉key包含的空格 String value =properties.getProperty(key.trim()); if(StringUtils.isBlank(value))&#123; //注意这里使用isBlank，就算是空格和制表符也是为空 value= defaultValue; &#125; return value.trim(); //有可能后面的值也存在空值 &#125;&#125; 我们这里利用的就是静态代码块，因为它只在类被加载时执行，而且只执行一次。这里我们重载了两个方法，目的就是适应不同的业务需求。同时为了能及时发现问题，我们定义了日志，用于相关信息的输出。 parentCategoryId字段获取因为我们这里是通过商品的Id来获取其详细信息的，这样就可能会存在一个情况就是没有父节点，所以这个字段我们需要格外注意： 1234567//parentCategoryIdCategory category = categoryMapper.selectByPrimaryKey(product.getId());if (category ==null) &#123; productDetailVo.setParentCategoryId(0); //没有父节点就默认该节点为0&#125;else &#123; productDetailVo.setParentCategoryId(category.getParentId()); //存在就赋值给它&#125; 时间字段获取在这里我们有两个关于时间的字段：createTime和updateTime，我们知道在mybatis里面时间单位都是毫秒数，这是不利于我们展示的，所以需要进行配置。我们可以自己定义一个专门用于处理时间的工具类。打开util包，在里面新建一个工具类DateTimeUtil，我们知道一般时间处理就两种格式：str-&gt;Date或者是Date-&gt;str。这里我们使用了joda-time这个专门用于处理时间的工具，具体的可以参考这里：Joda-Time的使用。DateTimeUtil文件写入以下信息： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package top.store.util;import org.apache.commons.lang3.StringUtils;import org.joda.time.DateTime;import org.joda.time.format.DateTimeFormat;import org.joda.time.format.DateTimeFormatter;import java.util.Date;public class DateTimeUtil &#123; //我们使用joda-time //定义一下我们的日期格式 public static final String STANDARD_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;; //主要完成两种类型的转换 //str-&gt;Date //Date-&gt;str //str-&gt;Date，使用前面定义的默认的日期格式 public static Date strToDate(String dateTimeStr)&#123; DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(STANDARD_FORMAT); DateTime dateTime = dateTimeFormatter.parseDateTime(dateTimeStr); return dateTime.toDate(); &#125; //str-&gt;Date public static Date strToDate(String dateTimeStr,String formatStr)&#123; DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(formatStr); DateTime dateTime = dateTimeFormatter.parseDateTime(dateTimeStr); return dateTime.toDate(); &#125; //Date-&gt;str，使用前面定义的默认的日期格式 public static String dateToStr(Date date)&#123; if(date == null)&#123; return StringUtils.EMPTY; &#125; DateTime dateTime = new DateTime(date); return dateTime.toString(STANDARD_FORMAT); &#125; //Date-&gt;str public static String dateToStr(Date date,String formatStr)&#123; if(date == null)&#123; return StringUtils.EMPTY; &#125; DateTime dateTime = new DateTime(date); return dateTime.toString(formatStr); &#125; //测试上面方法有没有问题的方法 public static void main(String[] args) &#123; System.out.println(DateTimeUtil.dateToStr(new Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;)); System.out.println(DateTimeUtil.strToDate(&quot;2008-08-08 20:08:08&quot;,&quot;yyyy-MM-dd HH:mm:ss&quot;)); &#125;&#125; 然后回到ProductServiceImpl.java文件，添加以下代码（实际上前面已经写过了）： 12345//createTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置 productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));//updateTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置 productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime())); 最后打开IProductService.java文件，里面写入以下代码： 1ServerResponse&lt;ProductDetailVo&gt; manageGetDetail(Integer productId); //后台管理员获取商品的详情 这样我们本篇，关于后台商品详细信息获取功能的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十三）：后台商品的增加与更新","slug":"SSM搭建二手市场交易平台（十三）：后台商品的增加与更新","date":"2018-08-22T06:21:06.000Z","updated":"2019-04-15T14:10:29.913Z","comments":true,"path":"2018/08/22/SSM搭建二手市场交易平台（十三）：后台商品的增加与更新/","link":"","permalink":"http://blog.licheetools.top/2018/08/22/SSM搭建二手市场交易平台（十三）：后台商品的增加与更新/","excerpt":"","text":"写在前面本篇我们来介绍后台商品新增，更新和上下架功能开发。说的比较通俗易懂的话，其实就是后台商品的增删改查一部分功能而已。 商品模块开发商品模块开发分为前台和后台两部分，其中前台包括产品搜索，动态排序列表和商品详情；后台包括：商品列表、商品搜索、图片上传、富文本上传、商品详情、商品上下架、增加商品以及更新商品等。 在此过程中，你将会学到一下知识：1、FTP 服务器的对接；2、SpringMVC 文件上传；3、流读取 Properties 配置文件；4、抽取 POJO、BO、VO 对象之间的转换关系及解决思路；5、joda-time 快速入门；6、静态块；7、Mybatis-PageHelper 高效准确地分页及动态排序；8、Mybatis 对 List 遍历的实现方法；9、Mybatis 对 where 语句动态拼装的几个版本演变等。 POJO、BO、VO POJO、VO 数据表设计： 后台产品新增在controller文件的backend包里面新建一个ProductManageController.java文件，里面写入以下代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package top.store.controller.backend;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.pojo.Product;import top.store.pojo.User;import top.store.service.IProductService;import top.store.service.IUserService;import javax.servlet.http.HttpSession;@Controller@RequestMapping(&quot;/manage/product&quot;)public class ProductManageController &#123; @Autowired private IUserService iUserService; @Autowired private IProductService iProductService; /**** * * 后台管理员保存商品 * */ @RequestMapping(&quot;save.do&quot;) @ResponseBody //自动序列化json功能 public ServerResponse productSave(HttpSession session, Product product)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加我们保存商品的逻辑 return iProductService.saveOrUpdateProduct(product); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125;&#125; 这个和之前写的关于商品分类的模块其实很类似。接着我们在impl包里面新建一个ProductServiceImpl.java文件，里面写入以下代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package top.store.service.impl;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.dao.ProductMapper;import top.store.pojo.Product;import top.store.service.IProductService;@Service(&quot;iProductService&quot;)public class ProductServiceImpl implements IProductService &#123; @Autowired private ProductMapper productMapper; /*** * 后台管理员保存商品 * */ public ServerResponse saveOrUpdateProduct(Product product)&#123; if(product != null)&#123; //产品主图的选择 if(StringUtils.isNoneBlank(product.getSubImages()))&#123; //存在子图的情况下 String[] subImageArray = product.getSubImages().split(&quot;,&quot;); if(subImageArray.length&gt;0)&#123; product.setMainImage(subImageArray[0]); &#125; &#125; //如果是更新的话，我们产品的id肯定是存在的，不能为空（与前端进行了约定） if(product.getId() != null)&#123; int rowCount = productMapper.updateByPrimaryKey(product); //前端更新肯定是全部商品 if(rowCount&gt;0)&#123; return ServerResponse.createBySuccessMassage(&quot;更新产品成功&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;更新产品失败&quot;); &#125;else&#123; //如果是新增的话，产品是没有id的，就要执行插入操作 int rowCount = productMapper.insert(product); //前端更新肯定是全部商品 if(rowCount&gt;0)&#123; return ServerResponse.createBySuccessMassage(&quot;新增产品成功&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;新增产品失败&quot;); &#125; &#125; return ServerResponse.createByErrorMessage(&quot;保存或更新产品参数不正确&quot;); &#125;&#125; 注意几点：1、我们首先需要判断产品是否存在，存在然后判断产品是否存在子图，如果存在，我们就取第一个子图作为产品的主图进行前台的显示。2、我们这里把商品的修改和更新的逻辑写在一起了，我们在前端进行了声明：就是如果是进行产品的更新就必须把产品id传进来，然后依据Id来进行判断，否则就是新增产品的操作，这个应该还是比较好理解的. 接着我们在Service包里面新建一个IProductService.java文件（记住前面是I说明是接口），里面写入以下代码：12345678package top.store.service;import top.store.common.ServerResponse;import top.store.pojo.Product;public interface IProductService &#123; ServerResponse saveOrUpdateProduct(Product product); //后台管理员保存商品&#125; 这样我们关于商品的更新和新增操作就完成了，接下来是后台管理员进行商品信息的状态设置。 上下架功能开发首先打开ProductManageController.java文件，在里面新增以下代码：123456789101112131415161718192021/*** * * 后台管理员进行商品的上下架状态修改 * */ @RequestMapping(&quot;set_sale_status.do&quot;) @ResponseBody //自动序列化json功能 public ServerResponse setSaleStatus(HttpSession session, Integer productId,Integer status)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加我们进行商品上下架的逻辑 return iProductService.setSaleStatus(productId,status); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125; 接着打开ProductServiceImpl.java文件，里面写入以下代码：123456789101112131415161718/*** * * 后台管理员进行商品的上下架状态修改 * */ public ServerResponse&lt;String&gt; setSaleStatus(Integer productId,Integer status)&#123; if(productId ==null || status ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc()); &#125; Product product =new Product(); product.setId(productId); product.setStatus(status); int rowCount = productMapper.updateByPrimaryKeySelective(product); //我们这里是仅对状态进行修改，所以只需更新选中的即可 if(rowCount&gt;0)&#123; return ServerResponse.createBySuccessMassage(&quot;修改产品销售状态成功！&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;修改产品销售状态失败！&quot;); &#125; 最后打开IProductService.java文件，里面写入以下代码：1ServerResponse&lt;String&gt; setSaleStatus(Integer productId,Integer status); //后台管理员进行商品的上下架状态修改 这样我们本篇关于后台商品新增，更新和上下架功能开发的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十二）：分类管理功能开发","slug":"SSM搭建二手市场交易平台（十二）：分类管理功能开发","date":"2018-08-21T05:21:06.000Z","updated":"2019-04-15T14:09:44.496Z","comments":true,"path":"2018/08/21/SSM搭建二手市场交易平台（十二）：分类管理功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/08/21/SSM搭建二手市场交易平台（十二）：分类管理功能开发/","excerpt":"","text":"写在前面本篇我们继续来介绍有关分类管理的内容，具体包括：查询节点和递归查找功能开发等。 查询节点功能开发我们打开CategoryManageController.java文件，在里面新增以下代码：123456789101112131415161718192021/** * 后台管理员查询品类子节点（平级） * */ @RequestMapping(value = &quot;get_category.do&quot;) @ResponseBody //自动序列化json功能 public ServerResponse getChildrenParallelCategory(HttpSession session,@RequestParam(value = &quot;categoryId&quot;,defaultValue = &quot;0&quot;) Integer categoryId)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员,我们就查询子节点的category信息，并且不递归，保持平级 return iCategoryService.getChildrenParallelCategory(categoryId); &#125;else &#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125; 接着打开CategoryServiceImpl.java文件，新增代码如下：1234567891011 /**** * *后台管理员查询品类子节点 */public ServerResponse&lt;List&lt;Category&gt;&gt; getChildrenParallelCategory(Integer categoryId)&#123; List&lt;Category&gt; categoryList = categoryMapper.selectChildrenCategoryByParentId(categoryId); if(CollectionUtils.isEmpty(categoryList))&#123; loggger.info(&quot;未找到当前分类的子分类&quot;); &#125; return ServerResponse.createBySuccess(categoryList);&#125; 几点说明：1、在这里我们自己新定义了方法selectChildrenCategoryByParentId，所以我们要去CategoryMappr.java文件里面进行配置：1List&lt;Category&gt; selectChildrenCategoryByParentId(Integer parentId); 然后自然就得去CategoryMappr.xml文件里面进行sql语句的建立：123456&lt;select id=&quot;selectChildrenCategoryByParentId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;int&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot; /&gt; from store_category where parent_id = #&#123;parentId&#125;&lt;/select&gt; 关于上面为什么这样写大家可以参看18-23行代码：(本文件)，也就是下面的代码：123456&lt;select id=&quot;selectByPrimaryKey&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;java.lang.Integer&quot; &gt; select &lt;include refid=&quot;Base_Column_List&quot; /&gt; from store_category where id = #&#123;id,jdbcType=INTEGER&#125;&lt;/select&gt; 2、这里判断列表是否为空，使用了CollectionUtils.isEmpty方法，返回的是boolean类型，注意我们之前判断字符串是否为空使用了StringUtils.isEmpty方法，我们简单看一下上面那个CollectionUtils.isEmpty方法的源码：123public static boolean isEmpty(Collection coll) &#123; return coll == null || coll.isEmpty();&#125; 对于是否是空和空集合都进行了判断，所以我们就可以不用考虑多种情况了。 最后打开ICategoryService.java文件，里面新增代码：1ServerResponse&lt;List&lt;Category&gt;&gt; getChildrenParallelCategory(Integer categoryId); //后台管理员查询品类子节点（不递归保持平级） 递归查找功能开发我们上面那个查询节点功能开发完成的只是对于平级的查询，是不进行递归查询的。接下来我们就来完成递归查找功能的开发，可能会有一些难以理解，但是我尽量以通俗易懂的方式来进行说明。 我们打开CategoryManageController.java文件，在里面新增以下代码：123456789101112131415161718192021/** * 后台管理员查询品类子节点（递归） * */@RequestMapping(value = &quot;get_deep_category.do&quot;)@ResponseBody //自动序列化json功能public ServerResponse getCategoryAndDeepChildrenCategory(HttpSession session,@RequestParam(value = &quot;categoryId&quot;,defaultValue = &quot;0&quot;) Integer categoryId)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员,我们就查询当前节点的id和递归查询子节点的id return iCategoryService.selectCategoryAndChildrenById(categoryId); &#125;else &#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125;&#125; 接着打开CategoryServiceImpl.java文件，新增代码如下：1234567891011121314 /**** * *后台管理员递归查询本节点及子节点的id并返回列表 */ public ServerResponse selectCategoryAndChildrenById(Integer categoryId)&#123;&#125; //递归算法，自己调用自己 private Set&lt;Category&gt; findChildrenCategory(Set&lt;Category&gt; categorySet,Integer categoryId)&#123;&#125; &#125; 我们现在来完成递归算法的部分，递归就是自己调用自己，我们上面那个方法（selectCategoryAndChildrenById）就是实现总的要求查询本节点及子节点的id并返回列表。而递归算法的作用就是遍历当前节点，如果有子节点就把子节点当做父节点进行遍历，当父节点没有子节点的时候就进行递归退出：1234567891011121314151617//递归算法，自己调用自己 private Set&lt;Category&gt; findChildrenCategory(Set&lt;Category&gt; categorySet,Integer categoryId)&#123; Category category =categoryMapper.selectByPrimaryKey(categoryId); //判断当前节点是否为空，不为空则继续 if(category != null)&#123; categorySet.add(category); //当前节点不为空就添加到集合里面，从它开始判断后面的子节点 &#125; //查找子节点，递归算法一定要有一个退出的条件（也就是基准条件）这里是没有子节点就退出 List&lt;Category&gt; categoryList =categoryMapper.selectChildrenCategoryByParentId(categoryId); //注意一下，因为我们这里是使用了mybatis，因此就算我们这里的categoryList是空，也不会返回null值，从而不会造成空指针异常 //对查询到的子节点进行遍历，然后调用前面查询当前节点的方法，其实也就是子节点被当做父节点使用，进行它下面的子节点的查询 for(Category categoryItem:categoryList)&#123; findChildrenCategory(categorySet,categoryItem.getId()); &#125; return categorySet; &#125; 里面的注释写的应该比较详细了。对了还有一件事就是我们这里需要保证我们的category里面是没有重复元素的，如何实现没有重复元素呢？集合就可以，所以我们需要把我们category变成具有类似于集合的无重复性功能，你只要重写hashCode和equals方法，为什么重写这两个方法就可以呢？（在pojo里面的Category.java文件里面）这里我就不介绍了，我在另一篇《关于JAVA你必须知道的那些事（七）：输入输出流和集合》里面有过介绍，大家可以去我微信公众号里进行查看。如何快速重写这两个方法呢？在idea里面：code–&gt;generate–&gt;equals() and hashCode()，然后选择id就可以了，我们是通过id来进行判断的;1234567891011121314//重写equals和hashcode方法，目的就是使我们自定义的Category类型也能和集合一样具有消除不重复元素的功能@Overridepublic boolean equals(Object o) &#123; if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Category category = (Category) o; return Objects.equals(id, category.id);&#125;@Overridepublic int hashCode() &#123; return Objects.hash(id);&#125; 我们继续回到CategoryServiceImpl.java文件，修改selectCategoryAndChildrenById方法的代码：123456789101112public ServerResponse selectCategoryAndChildrenById(Integer categoryId)&#123; Set&lt;Category&gt; categorySet = Sets.newHashSet(); //调用递归算法的时候进行初始化，使用sets这是guava提供的对于set的优化 findChildrenCategory(categorySet,categoryId); List&lt;Integer&gt; categoryIdList = Lists.newArrayList(); if(categoryId != null)&#123; for(Category categoryItem:categorySet)&#123; categoryIdList.add(categoryItem.getId()); &#125; &#125; return ServerResponse.createBySuccess(categoryIdList); //返回查到的当前包括子节点的id列表&#125; 注意Sets.newHashSet()和Lists.newArrayList()都是使用了guava提供的类，具体可以参看这里：Google Guava官方教程（中文版） 最后打开ICategoryService.java文件，里面新增代码：1ServerResponse selectCategoryAndChildrenById(Integer categoryId); //后台管理员递归查询本节点及子节点的id并返回列表 不知道细心的你发现没有，我们这里关于分类的功能的地方，都没有强制使用提交的方式GET或者POST，因为分类可以允许你带参数，也可以不带参数，所以方法就不要求了。就类似于这样的，理解了么：1@RequestMapping(value = &quot;get_deep_category.do&quot;,method = RequestMethod.POST) 接下来便是进行相关的商品品类的接口测试，这里就不介绍了，之前介绍过。 这样我们本篇关于查询节点和递归查找功能开发的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十一）：添加和更新分类名称","slug":"SSM搭建二手市场交易平台（十一）：添加和更新分类名称","date":"2018-08-20T07:21:06.000Z","updated":"2019-04-15T14:08:52.509Z","comments":true,"path":"2018/08/20/SSM搭建二手市场交易平台（十一）：添加和更新分类名称/","link":"","permalink":"http://blog.licheetools.top/2018/08/20/SSM搭建二手市场交易平台（十一）：添加和更新分类名称/","excerpt":"","text":"写在前面本篇，我们来介绍如何添加和更新分类的名称。里面的内容很多，希望大家对此有一个提前的认识。 分类管理模块开发我们在分类管理模块开发主要介绍以下内容：获取节点；增加加点；修改名字；获取分类 ID；递归子节点 ID这些功能的实现相对来说比较有意思。在此过程中我们会介绍如何设计及封装无限层级的树状数据结构；递归算法的设计思想；如何处理复杂对象排重以及重写hashcode 和equal时应当注意的事项。 添加商品分类因为商品分类都是在后台进行的，因此都在backend这个包里面。我们打开controller包下面的backend 包，在里面新建CategoryManageController.java文件，在里面新增以下代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package top.store.controller.backend;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ResponseCode;import top.store.common.ServerResponse;import top.store.pojo.User;import top.store.service.ICategoryService;import top.store.service.IUserService;import javax.servlet.http.HttpSession;@Controller@RequestMapping(&quot;/manage/category&quot;)public class CategoryManageController &#123; @Autowired private IUserService iUserService; @Autowired private ICategoryService iCategoryService; /** * 后台管理员添加商品品类 * */ @RequestMapping(value = &quot;add_category.do&quot;) @ResponseBody //自动序列化json功能 public ServerResponse addCategory(HttpSession session,String categoryName,@RequestParam(value = &quot;parentId&quot;, defaultValue = &quot;0&quot;) int parentId)&#123; //注意一下上面我们需要给parentId一个默认的值0,它是我们分类的根节点，否则就会出错 //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加我们处理分类的逻辑 return iCategoryService.addCategory(categoryName,parentId); &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125; &#125;&#125; 接着在service里面新建一个ICategoryService.java文件，用于接口的声明：1234567package top.store.service;import top.store.common.ServerResponse;public interface ICategoryService &#123; ServerResponse addCategory(String categoryName, Integer parentId); //管理员后台添加商品品类&#125; 然后在impl文件夹下新建CategoryServiceImpl.java文件，里面的代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142package top.store.service.impl;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.store.common.ServerResponse;import top.store.dao.CategoryMapper;import top.store.pojo.Category;import top.store.service.ICategoryService;@Service(&quot;iCategoryService&quot;)public class CategoryServiceImpl implements ICategoryService &#123; @Autowired private CategoryMapper categoryMapper; /** * 管理员后台添加商品品类 * */ public ServerResponse addCategory(String categoryName,Integer parentId)&#123; //校验一下两者是否为空 if(parentId ==null || StringUtils.isBlank(categoryName))&#123; return ServerResponse.createByErrorMessage(&quot;添加商品品类错误&quot;); &#125; Category category =new Category(); //实例化一个分类对象 category.setName(categoryName); //设置分类名 category.setParentId(parentId); //设置父类id category.setStatus(true); //设置这个分类是可以使用的状态 int rowCount =categoryMapper.insert(category); if(rowCount&gt;0)&#123; return ServerResponse.createBySuccess(&quot;添加商品品类成功！&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;添加商品品类失败！&quot;); &#125;&#125; 这样就完成了我们后台管理员添加商品分类的功能，你可能要问了我们还没在dao层的CategoryMapper里面定义方法呢，那是因为我们这里只是单纯的增删改查，里面已经给我们提供了它的实现，我们直接使用就可以，后面复杂的就可能需要自己定义方法和书写sql语句了。 商品品类名称修改这个和上面的差不多，就是功能实现不同而已。我们打开CategoryManageController.java文件，在里面新增以下代码：12345678910111213141516171819202122/** * 后台管理员更新商品品类名称 * */@RequestMapping(value = &quot;set_category_name.do&quot;)@ResponseBody //自动序列化json功能public ServerResponse setCategoryName(HttpSession session,Integer categoryId,String categoryName)&#123; //判断一下登录情况 User user=(User) session.getAttribute(Const.CURRENT_USER); if(user ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;); &#125; //判断一下是不是管理员身份 if(iUserService.checkAdminRole(user).isSuccess())&#123; //如果是管理员就增加我们处理更新分类名称的逻辑 return iCategoryService.setCategoryName(categoryId,categoryName); &#125;else &#123; return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;); &#125;&#125; 接着打开ICategoryService.java文件，里面新增代码：1ServerResponse setCategoryName(Integer categoryId,String categoryName); //后台管理员更新商品品类名称 最后打开CategoryServiceImpl.java文件，新增代码如下：1234567891011121314151617181920/** * 管理员后台更新商品品类名称 * */ public ServerResponse setCategoryName(Integer categoryId,String categoryName)&#123; //校验一下两者是否为空 if(categoryId ==null || StringUtils.isBlank(categoryName))&#123; return ServerResponse.createByErrorMessage(&quot;添加商品品类错误&quot;); &#125; Category category =new Category(); //实例化一个分类对象 category.setId(categoryId); //传入id category.setName(categoryName); //设置新的品类名称 int rowCount =categoryMapper.updateByPrimaryKeySelective(category); //使用有选择性的更新，根据商品的id来进行更新 if(rowCount &gt;0)&#123; return ServerResponse.createBySuccess(&quot;修改商品品类名字成功！&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;添加商品品类名字失败！&quot;); &#125; 这样我们本篇关于如何添加和更新分类的的介绍就到此为止了，感谢你的赏阅！！！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（十）：获取用户详细信息的功能开发","slug":"SSM搭建二手市场交易平台（十）：获取用户详细信息的功能开发","date":"2018-08-19T05:21:06.000Z","updated":"2019-04-15T14:07:41.041Z","comments":true,"path":"2018/08/19/SSM搭建二手市场交易平台（十）：获取用户详细信息的功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/08/19/SSM搭建二手市场交易平台（十）：获取用户详细信息的功能开发/","excerpt":"","text":"写在前面上一篇中我们介绍了登录状态下重置密码功能开发，更新用户个人信息功能开发。那么本篇我们就来介绍如何获取用户详细信息的功能开发从而完成所有用户信息功能的开发。里面的内容很多，希望大家对此有一个提前的认识。 获取用户详细信息的功能开发我们的开发顺序是service--&gt;mybatis--&gt;dao，所以再次强调它的重要性！！！打开UserController.java文件，写入以下代码：1234567891011121314/*** * * 登录状态下的获取用户的详细信息 */@RequestMapping(value = &quot;get_information.do&quot;,method = RequestMethod.POST) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;User&gt; getInformation(HttpSession session)&#123; User currentUser =(User)session.getAttribute(Const.CURRENT_USER); //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了 if(currentUser ==null)&#123; return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录需要强制登录，状态status为10&quot;); &#125; return iUserService.getInformation(currentUser.getId());&#125; 接着打开UserServiceImpl.java文件：123456789101112/*** * * 登录状态下的获取用户的详细信息 */public ServerResponse&lt;User&gt; getInformation(Integer userId)&#123; User user =userMapper.selectByPrimaryKey(userId); if(user ==null)&#123;//根据用户id来获取其详细信息 return ServerResponse.createByErrorMessage(&quot;该用户不存在&quot;); &#125; user.setPassword(StringUtils.EMPTY); //将密码这种关键信息设置为空 return ServerResponse.createBySuccess(user);&#125; 注意一下，我们这里使用了selectByPrimaryKey方法，目的就是根据userId来进行个人信息查询的。当然我们需要在后台提供一个管理员登录的方法，不会允许任何人都可以使用个人信息查询功能，只有管理员才有登录后台的权限。我们在controller 包下面再新建一个名为backend的包（backend顾名思义就是后台模块），然后在backend包下面新建UserManageController.java文件，在里面写入以下代码：12345678910111213141516171819202122232425262728293031323334353637package top.store.controller.backend;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ServerResponse;import top.store.pojo.User;import top.store.service.IUserService;import javax.servlet.http.HttpSession;@Controller@RequestMapping(&quot;/manage/user&quot;)public class UserManageController &#123; @Autowired private IUserService iUserService; @RequestMapping(value = &quot;login.do&quot;,method = RequestMethod.POST) @ResponseBody //自动序列化json功能 public ServerResponse&lt;User&gt; login (String username, String password, HttpSession session)&#123; ServerResponse&lt;User&gt; response =iUserService.login(username,password); if(response.isSuccess())&#123; //请求成功 User user = response.getData(); if(user.getRole() == Const.Role.ROLE_ADMIN)&#123; //说明登录的是管理员 session.setAttribute(Const.CURRENT_USER,user); //把用户添加到session里面 return response; &#125;else &#123; return ServerResponse.createByErrorMessage(&quot;不是管理员，无法登录&quot;); &#125; &#125; return response; &#125; &#125; 最后记得去IUserService.java文件里面添加接口类的声明：1ServerResponse&lt;User&gt; getInformation(Integer userId); //登录状态下的获取用户的详细信息 这样我们登录状态下获取用户个人详细信息的功能就开发完毕了。 最后记得去打开UserController.java文件，将里面目前为止所有的method = RequestMethod.GET修改为method = RequestMethod.POST，可以按住Ctrl+F调出搜索框，然后直接进行替换就可以了。 Md5加盐值的问题这个问题后面会教大家如何使用，现在大家了解这个网站就行：cmd5 单元测试到目前为止，关于个人用户的信息的开发已经完成了，接下来进行模块单元测试。首先确保我们的tomcat的配置没有问题，打开logback.xml文件，具体检查的内容包括：项目日志的File和fileNamePattern的前一部分相同，然后启动我们的tomcat： 正常浏览器会自动打开http://localhost:8080/页面，上面只有Hello World，但是并不影响我们的测试，我们然后打开我们的restlet client进行模块测试，我这里以注册为例进行说明（注意需要打开数据库，实时观察数据的变动）： 上面的测试过程非常简单，选择post提交方式，根据你在UserController里的mapping设置，补充完整url，然后选择form，输入你在接口类声明的参数，点击提交就能出现结果了（具体的结果根据你参数的填写而有所不同）： 上图是用户板块所有的测试接口，下面则是我们在测试时打印的日志： 通过上面的测试我们发现上面的接口都没有问题。 至此，我们关于用户的相关功能的实现就全部结束了，接下来我们开始进行商品信息的相关配置，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（九）：更新用户信息功能开发","slug":"SSM搭建二手市场交易平台（九）：更新用户信息功能开发","date":"2018-08-18T04:21:06.000Z","updated":"2019-04-15T14:06:54.881Z","comments":true,"path":"2018/08/18/SSM搭建二手市场交易平台（九）：更新用户信息功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/08/18/SSM搭建二手市场交易平台（九）：更新用户信息功能开发/","excerpt":"","text":"写在前面上一篇中我们介绍了忘记密码状态下的重置密码的开发（其实也就是未登录状态），那么本篇我们就来介绍登录状态下重置密码功能开发，更新用户个人信息功能开发和获取用户详细信息功能开发从而完成所有用户信息功能的开发。里面的内容很多，希望大家对此有一个提前的认识。 介绍登录状态下重置密码功能开发我们的开发顺序是service--&gt;mybatis--&gt;dao，所以再次强调它的重要性！！！打开UserController.java文件，写入以下代码：12345678910111213/*** * * 登录状态下的重置密码 */@RequestMapping(value = &quot;login_reset_password.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;String&gt; loginResetPassword(HttpSession session,String passwordOld,String passwordNew)&#123; User user =(User)session.getAttribute(Const.CURRENT_USER); //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了 if(user ==null)&#123; return ServerResponse.createByErrorMessage(&quot;用户未登录&quot;); &#125; return iUserService.loginResetPassword(passwordOld,passwordNew,user);&#125; 前面我们说过应该是接着打开IUserService.java文件，但是那是三者参数一致的情况下，如果参数不一致就不能进行这一步了，所以我们综合觉得还是使用下面的步骤为好：UserController---&gt;UserServiceImpl--&gt;IUserService--&gt;这样就是比较好的开发过程了：接着打开UserServiceImpl.java文件：12345678910111213141516171819 /*** * * 登录状态下的重置密码的接口类 */public ServerResponse&lt;String&gt; loginResetPassword(String passwordOld, String passwordNew,User user)&#123; //为防止横向越权，我们要检验一下这个用户的旧密码（通常我们在修改密码这种关键信息的时候需要用户输入原来的密码进行身份确认） // 而且我们查询的是一个 count(1)，如果你不指定 id（通过旧密码标识），那么结果必定是true，也就是count&gt;0; int resultCount =userMapper.checkPasswordByUserId(MD5Util.MD5EncodeUtf8(passwordOld),user.getId()); if(resultCount ==0)&#123;//如果resultCount为0说明旧密码错误 return ServerResponse.createByErrorMessage(&quot;旧密码错误&quot;); &#125; user.setPassword(MD5Util.MD5EncodeUtf8(passwordNew)); int rowCount =userMapper.updateByPrimaryKeySelective(user) ; //注意这里使用updateByPrimaryKeySelective是因为我们这里不能使用上面的根据用户名来修改密码，而且最好是选择性的更新，不是全部更新 if(rowCount&gt;0)&#123; return ServerResponse.createBySuccessMassage(&quot;密码修改成功&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;密码修改失败！&quot;); &#125; 这里需要注意几点：1、updateByPrimaryKeySelective方法，我们没有使用之前定义的updatePasswordByUsername方法是因为我们这里不根据用户名来进行密码的修改；没有使用updateByPrimaryKey方法是因为我们希望我们的更新是有选择性的，不是全部都进行修改；2、String question=userMapper.checkPasswordByUserId(MD5Util.MD5EncodeUtf8(passwordOld),user.getId());看到这行代码大家就知道后面需要干嘛了：打开UserMapper.java文件，里面新增代码：12//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置 int checkPasswordByUserId(@Param(&quot;password&quot;)String password,@Param(&quot;userId&quot;)Integer userId); //注意mybatis传递多个参数时，需要使用param注解 然后去UserMapper.xml里面新增代码： 12345&lt;select id=&quot;checkPasswordByUserId&quot; resultType=&quot;int&quot; parameterType=&quot;map&quot;&gt; &lt;!--注意使用多个参数是是需要使用map的--&gt; select count(1) from store_user where id = #&#123;userId&#125; and password = #&#123;password&#125;&lt;/select&gt; 3、需要注意的一点是这里你不能仅仅只使用password 进行条件查询,因为可能有用户密码是相同的情况，然后受影响的行数必定大于0，后台还以为密码修改通过了呢，其实并没有，所以我们通过用户id和旧密码的条件查询限定，能很好的规避这一问题的发生。 最后记得打开IUserService.java文件，把我们接口类的声明添加进去：1ServerResponse&lt;String&gt; loginResetPassword(String passwordOld, String passwordNew,User user); //登录状态下的重置密码 这样我们登录状态下重置密码功能开发就完成了，接下来是用户个人信息更新功能的开发。 用户个人信息更新功能开发打开UserController.java文件，写入以下代码：12345678910111213141516 /*** * * 登录状态下的更新用户个人信息 */ @RequestMapping(value = &quot;update_information.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;User&gt; updateInformation(HttpSession session,User user)&#123; //这里的返回值是User因为我们需要将更新的用户信息添加到session里面，而且传递给前端使用使用session将用户信息进行保存，user重载新的用户数据 User currentUser =(User)session.getAttribute(Const.CURRENT_USER); //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了 if(currentUser ==null)&#123; return ServerResponse.createByErrorMessage(&quot;用户未登录&quot;); &#125;//代码未写完！！！！ &#125; 这里我们把后面的一段代码给去掉了，没有写完是因为这里写完的话跳跃性就很大，你难以理解，后面随着介绍会慢慢补充的。接着打开UserServiceImpl.java文件：1234567891011121314151617181920212223242526/*** * * 登录状态下的更新用户个人信息的接口类 */ public ServerResponse&lt;User&gt; updateInformation(User user)&#123; //用户名不可以被更新 //邮箱也要进行校验，校验新的邮箱是不是已经存在，并且存在的邮箱与我们的新邮箱相等的话，不能是我们当前这个用户的 int resultCount =userMapper.checkEmailByUserId(user.getEmail(),user.getId()); if(resultCount&gt;0)&#123; //说明此时邮箱被他人占用，提醒用户换一个试试 return ServerResponse.createByErrorMessage(&quot;该邮箱已经被使用，请更换邮箱并再次尝试更新&quot;); &#125; User updateUser =new User(); //创建一个新的更新对象 updateUser.setId(user.getId()); //更新用户id updateUser.setEmail(user.getEmail()); //更新用户邮箱 updateUser.setPhone(user.getPhone()); //更新用户电话 updateUser.setQuestion(user.getQuestion()); //更新用户问题 updateUser.setAnswer(user.getAnswer()); //更新用户答案 //注意密码在前面我们专门对其进行了更新，这里就不再需要 int rowCount =userMapper.updateByPrimaryKeySelective(updateUser); if(rowCount&gt;0)&#123; return ServerResponse.createBySuccess(&quot;更新用户信息成功&quot;,updateUser); &#125; return ServerResponse.createByErrorMessage(&quot;更新用户信息失败&quot;); &#125; 这里需要注意几点问题：1、因为我们是根据用户名来进行登录的，因此用户名是不可以被更新的，必须从登录的用户里面取出来。还有就是在这里我们不进行密码的更新，因为我们之前针对密码已经进行过更新处理了。2、我们需要对邮箱进行校验，校验新的邮箱是不是已经存在，并且存在的邮箱与我们的新邮箱相等的话，不能是我们当前这个用户的（言外之意就是被人已经占用了这个邮箱）。怕你们不理解，我再说一遍，我们就只要校验新的邮箱是不是被别人注册过了这一情况即可。至于新邮箱不存在那就更好了，没人使用你就可以使用了；新邮箱存在而且就是本用户的，那就说明你没修改邮箱，直接提交就可以了。3、int resultCount =userMapper.checkEmailByUserId(user.getEmail(),user.getId());看到这行代码大家就知道后面需要干嘛了：打开UserMapper.java文件，里面新增代码：12//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置 int checkEmailByUserId(@Param(value = &quot;email&quot;)String email,@Param(value = &quot;userId&quot;)Integer userId); //注意mybatis传递多个参数时，需要使用param注解 然后去UserMapper.xml里面新增代码：12345&lt;select id=&quot;checkEmailByUserId&quot; resultType=&quot;int&quot; parameterType=&quot;map&quot;&gt; &lt;!--注意使用多个参数是是需要使用map的，而且邮箱被别人占用--&gt; select count(1) from store_user where email = #&#123;email&#125; and id != #&#123;userId&#125;&lt;/select&gt; 4、对于rowCount大于0或者等于0的判断成立结果是随着你在UserMapper.xml里面书写的sql语句的不同而发生变化的，不是一成不变的。5、User updateUser =new User(); 这里我们新创建了一个更新对象，其中我们是选择的更新了部分信息，你从更新的字段和updateByPrimaryKeySelective方法就能看出来。 记得打开IUserService.java文件，把我们接口类的声明添加进去：1ServerResponse&lt;User&gt; updateInformation(User user); //登录状态下的更新用户个人信息 你以为这就结束了么，按照正常步骤是到此为止了，但是我们前面特意遗留了一段代码，打开UserController.java文件：123456789101112131415161718192021/*** * * 登录状态下的更新用户个人信息 */@RequestMapping(value = &quot;update_information.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;User&gt; updateInformation(HttpSession session,User user)&#123; //这里的返回值是User因为我们需要将更新的用户信息添加到session里面，而且传递给前端使用使用session将用户信息进行保存，user重载新的用户数据 User currentUser =(User)session.getAttribute(Const.CURRENT_USER); //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了 if(currentUser ==null)&#123; return ServerResponse.createByErrorMessage(&quot;用户未登录&quot;); &#125; //因为传进来的用户信息也就是更新的用户信息里面是没有userId的，所以我们需要将它拿过来，这样可以防止越权问题 user.setId(currentUser.getId()); //所以id是不可以被更新的，我们是从登录里面获取的 user.setUsername(currentUser.getUsername()); //记得我们在接口实现类里面说过username是不可以被更新的，因为我们登录会用到它 ServerResponse&lt;User&gt; response =iUserService.updateInformation(user); if(response.isSuccess())&#123; session.setAttribute(Const.CURRENT_USER,response.getData()); &#125; return response;&#125; 注意一下：因为传进来的用户信息也就是更新的用户信息里面是没有userId的，所以我们需要将它从登录里面拿过来，这样可以防止越权问题。我们在接口的实现类也说过username是不可以被更新的，因为我们登录会用到它，所以也是采取和userId相同的办法。最后我们需要对更新的状态进行判断，并将新的信息添加到session里面去。 这样本篇，我们关于登录状态下重置密码功能开发，更新用户个人信息功能开发的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（八）：用户登录信息功能开发","slug":"SSM搭建二手市场交易平台（八）：用户登录信息功能开发","date":"2018-08-17T11:21:06.000Z","updated":"2019-04-15T14:06:05.840Z","comments":true,"path":"2018/08/17/SSM搭建二手市场交易平台（八）：用户登录信息功能开发/","link":"","permalink":"http://blog.licheetools.top/2018/08/17/SSM搭建二手市场交易平台（八）：用户登录信息功能开发/","excerpt":"","text":"写在前面本篇我们介绍用户登录获取信息，忘记密码，提示问题与答案，重置密码功能开发这四者的实现，里面的内容很多，希望大家对此有一个提前的认识。 还记得我们上一篇的UserController—&gt;IUserService–&gt;UserServiceImpl模式么，我们继续进行开发，把这个放在这里是让大家更清楚的知道我们的开发流程，不至于晕。 用户登录获取信息打开UserController.java文件，写入以下代码：123456789101112/*** * 用户登录信息的获取 * */@RequestMapping(value = &quot;get_user_info.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;User&gt; getUserInfo(HttpSession session)&#123; User user =(User) session.getAttribute(Const.CURRENT_USER); if(user != null)&#123; return ServerResponse.createBySuccess(user); &#125; return ServerResponse.createByErrorMessage(&quot;用户未登录，无法获取当前用户的信息&quot;);&#125; 这样我们那就完成了用户登录信息的获取操作，你可能会问后面那两个过程哪去了，这里需要说明的是，不涉及到数据库的访问操作就不需要后面两个过程，这一点你需要注意一下。 忘记密码打开UserController.java文件，写入以下代码：(注意我这里就是直接把这个功能的完整实现代码贴这里了，没有一步一步的写，毕竟太浪费时间了，也没有必要，你们懂我的意思吧)12345678/*** * 忘记密码 * */@RequestMapping(value = &quot;forget_get_question.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;String&gt; forgetGetQuestion(String username)&#123; return iUserService.forgetGetQuestion(username);&#125; 接着打开IUserService.java文件：1ServerResponse&lt;String&gt; forgetGetQuestion(String username); //忘记密码 继续打开UserServiceImpl.java文件：12345678910111213141516171819 /*** * *忘记密码时的接口类 * */ public ServerResponse&lt;String&gt; forgetGetQuestion(String username)&#123; //判断用户名是否存在 ServerResponse validResponse =this.checkValid(username,Const.USERNAME); if(validResponse.isSuccess())&#123; //用户名不存在 return ServerResponse.createByErrorMessage(&quot;该用户不存在&quot;); &#125; String question =userMapper.forgetgetQuestionByUsername(username); if(StringUtils.isNoneBlank(question))&#123; //开始进行校验，如果找回密码的问题不为空，那么 return ServerResponse.createBySuccess(question); &#125; return ServerResponse.createByErrorMessage(&quot;找回密码的问题是空的&quot;); &#125;&#125; String question =userMapper.forgetgetQuestionByUsername(username);这行代码我需要说明一下。大家都知道我们这个UserMapper(里面的userMapper是它的实例化对象)就是DAO层，它需要提供一个接口(IUserService)和该接口的实现类(UserServiceImpl)用于访问数据库，但是我们获取数据库里面的信息是通过sql语句来实现的，于是UserMapper.xml负责sql语句的执行，UserMapper.java就负责接收查询的结果。因此就知道我们接下来要干嘛了：打开UserMapper.java文件，里面新增代码：1String forgetgetQuestionByUsername(String username); //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置 然后去UserMapper.xml里面新增代码： 1234 &lt;select id=&quot;forgetgetQuestionByUsername&quot; resultType=&quot;String&quot; parameterType=&quot;String&quot;&gt; select question from store_user where username = #&#123;username&#125;&lt;/select&gt; 也就是说实际上我们的开发顺序与上面所说的顺序是相反的，只是为了更好的理解。接下来完成提示问题与答案这个功能。 提示问题与答案打开UserController.java文件，写入以下代码：12345678/*** * 提示问题与答案 * */ @RequestMapping(value = &quot;forget_check_answer.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;String&gt; checkAnswer(String username,String question,String answer)&#123; return iUserService.checkAnswer(username,question,answer); &#125; 接着打开IUserService.java文件：1ServerResponse&lt;String&gt; checkAnswer(String username,String question,String answer); //提示问题与答案 继续打开UserServiceImpl.java文件：1234567891011121314/*** * *提示问题与答案时的接口类 * */public ServerResponse&lt;String&gt; checkAnswer(String username,String question,String answer)&#123; int resultCount = userMapper.checkAnswer(username,question,answer); //根据用户名来检查用户设置的问题与答案是否存在 if(resultCount &gt;0)&#123; //说明提示问题及问题答案是这个用户的，并且是正确的 String forgetToken = UUID.randomUUID().toString(); TockenCache.setKey(&quot;token_&quot;+username,forgetToken); return ServerResponse.createBySuccess(forgetToken); &#125; return ServerResponse.createByErrorMessage(&quot;问题的答案错误！&quot;);&#125; 同样checkAnswer这个方法需要定义，打开UserMapper.java文件，里面新增代码：12//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置 int checkAnswer(@Param(&quot;username&quot;)String username,@Param(&quot;question&quot;)String question,@Param(&quot;answer&quot;)String answer); //注意mybatis传递多个参数时，需要使用param注解 然后去UserMapper.xml里面新增代码：123456&lt;select id=&quot;checkAnswer&quot; resultType=&quot;int&quot; parameterType=&quot;map&quot;&gt; &lt;!--注意使用多个参数是是需要使用map的--&gt; select count(1) from store_user where username = #&#123;username&#125; and question = #&#123;question&#125; and answer = #&#123;answer&#125;&lt;/select&gt; 还有因为我们这个提示问题与答案是需要写入cache的，因此我们需要在common包下面新建一个类，里面写入如下代码：1234567891011121314151617181920212223242526272829303132333435363738394041package top.store.common;import com.google.common.cache.CacheBuilder;import com.google.common.cache.CacheLoader;import com.google.common.cache.LoadingCache;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.concurrent.TimeUnit;public class TockenCache &#123; private static Logger logger = LoggerFactory.getLogger(TockenCache.class); //本地缓存 //这里采用了LRU算法，初始值是1000，最大值是10000，如果超过最大值就会使用LRU算法进行消除，其实就是删除使用频率低的值，它的有效时间为12个小时 private static LoadingCache&lt;String,String&gt; localCache = CacheBuilder.newBuilder().initialCapacity(1000).maximumSize(10000).expireAfterAccess(12, TimeUnit.HOURS).build(new CacheLoader&lt;String, String&gt;()&#123; @Override public String load(String s) throws Exception &#123; return &quot;null&quot;; &#125; &#125;); public static void setKey(String key,String value)&#123; localCache.put(key,value); &#125; public static String getKey(String key)&#123; String value = null; try&#123; value = localCache.get(key); if(&quot;null&quot;.equals(value))&#123; return null; &#125; return value; &#125;catch (Exception e)&#123; logger.error(&quot;localCache get error&quot;,e); &#125; return null; &#125;&#125; 接下来便是忘记密码中的重置密码的开发了，我们知道这个必须在忘记密码实现以后才能开始。 重置密码打开UserController.java文件，写入以下代码：123456789/*** * * 忘记密码中的重置密码 */@RequestMapping(value = &quot;forget_reset_password.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;String&gt; forgetResetPassword(String username,String passwordNew, String forgetToken)&#123; return iUserService.forgetResetPassword(username,passwordNew,forgetToken);&#125; 接着打开IUserService.java文件：1ServerResponse&lt;String&gt; forgetResetPassword(String username,String passwordNew, String forgetToken); //忘记密码中的重置密码 继续打开UserServiceImpl.java文件：1234567891011121314151617181920212223242526272829303132333435363738394041/*** * * 忘记密码中的重置密码的接口类 */ public ServerResponse&lt;String&gt; forgetResetPassword(String username,String passwordNew, String forgetToken)&#123; //首先进行token的校验 if(StringUtils.isBlank(forgetToken))&#123; //如果token是空的话 return ServerResponse.createByErrorMessage(&quot;参数错误，token还没有被传递呢&quot;); &#125; //这里我们需要校验username，因为forgetToken是通过token_与username进行拼接的，上面是验证了forgetToken不为空，但这并不代表username就不为空 ServerResponse validResponse =this.checkValid(username,Const.USERNAME); if(validResponse.isSuccess())&#123; //用户名不存在 return ServerResponse.createByErrorMessage(&quot;该用户不存在&quot;); &#125; String token = TockenCache.getKey(TockenCache.TOKEN_PREFIX+username); //可以参看第146行代码 //对caChe里的token进行校验 if(StringUtils.isBlank(token))&#123; return ServerResponse.createByErrorMessage(&quot;token无效或者过期&quot;); &#125; /*** String a = null; if(&quot;abc&quot;.equals(a))&#123;&#125; //总是错误 if(a.equals(&quot;abc&quot;))&#123;&#125; //引发空指针异常 */ //这里使用.equals方法，可以避免出现Null值在前的空指针，在后总是错误的问题 if(StringUtils.equals(forgetToken,token))&#123; //修改密码成功，我们需要更新旧的密码了 String md5Password = MD5Util.MD5EncodeUtf8(passwordNew); int rowCount = userMapper.updatePasswordByUsername(username,md5Password); if(rowCount&gt;0)&#123; return ServerResponse.createBySuccessMassage(&quot;密码修改成功！&quot;); &#125; &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;token错误，请重新获取重置密码的token&quot;); &#125; return ServerResponse.createByErrorMessage(&quot;密码修改失败！&quot;); &#125; 这里面有几个注意的事项：1、&quot;token_&quot;这个之前在写提示问题与答案时的接口类时，没有将其设定为一个常量，实际上它是一个常量，为了以后便于调用它，我们将其设定为一个常量：打开TockenCache.java文件，我们新增一行代码：1public static final String TOKEN_PREFIX = &quot;token_&quot;; //这里把token_作为一个常量。因为需要多次使用 然后你将checkAnswer方法里面的这行代码:1ockenCache.setKey(&quot;token_&quot;+username,forgetToken); //这里没有把token_当做一个全局的常量进行引用 替换为：1TockenCache.setKey(TockenCache.TOKEN_PREFIX+username,forgetToken); // 这里把token_当做一个全局的常量进行引用(在TockenCache.TOKEN_PREFIX里面) 2、StringUtils.equals(forgetToken,token)注意这里我们使用了StringUtils.equals方法，它最大的好处就是可以避免null值在前在后的问题：12345678910111213public static boolean equals(CharSequence cs1, CharSequence cs2) &#123; if (cs1 == cs2) &#123; return true; &#125; else if (cs1 != null &amp;&amp; cs2 != null) &#123; if (cs1.length() != cs2.length()) &#123; return false; &#125; else &#123; return cs1 instanceof String &amp;&amp; cs2 instanceof String ? cs1.equals(cs2) : CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length()); &#125; &#125; else &#123; return false; &#125; &#125; 那么什么是null值在前在后的问题呢？很简单我举个例子你就知道了：123String a = null;if(&quot;abc&quot;.equals(a))&#123;&#125; //总是错误if(a.equals(&quot;abc&quot;))&#123;&#125; //引发空指针异常 所以这个问题我们就可以不用考虑了。3、int rowCount = userMapper.updatePasswordByUsername(username,md5Password);这行代码中的updatePasswordByUsername方法，老规矩还是需要定义这个方法，打开UserMapper.java文件，里面新增代码：12//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置int updatePasswordByUsername(@Param(&quot;username&quot;)String username,@Param(&quot;passwordNew&quot;)String passwordNew); //注意mybatis传递多个参数时，需要使用param注解 然后去UserMapper.xml里面新增代码：12345&lt;update id=&quot;updatePasswordByUsername&quot; parameterType=&quot;map&quot;&gt; &lt;!--注意使用多个参数是是需要使用map的，而且这里因为是更新操作，因此需要使用update--&gt; update store_user set password =#&#123;passwordNew&#125;,update_time =now() where username = #&#123;username&#125;&lt;/update&gt; 这段代码因为是执行更新操作的，因此需要使用update，而且别忘记使用update_time =now()这个时间戳，否则你不知道具体什么时候修改了密码。 4、至于为什么我们每次判断的时候总是看它大于0或者等于0，那是因为我们使用的方法最后我们都是让它返回修改的行数（其实就是受影响的行数），如果为0就说明没有修改，否则就进行了修改，这个应该很好理解的吧。 这样，我们本篇关于用户登录获取信息，忘记密码，提示问题与答案，重置密码功能开发这四者的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（七）：用户登出，注册，校验功能实现","slug":"SSM搭建二手市场交易平台（七）：用户登出，注册，校验功能实现","date":"2018-08-16T03:21:06.000Z","updated":"2019-04-15T14:05:14.918Z","comments":true,"path":"2018/08/16/SSM搭建二手市场交易平台（七）：用户登出，注册，校验功能实现/","link":"","permalink":"http://blog.licheetools.top/2018/08/16/SSM搭建二手市场交易平台（七）：用户登出，注册，校验功能实现/","excerpt":"","text":"写在前面本篇我们介绍用户登出，注册和校验功能这三者的实现。大家反映之前那种方式太难理解，好吧这里我们依旧采取把实现具体功能代码放在一块，一步一步的来的模式。 用户登出打开UserController.java文件，在里面新增以下代码：12345678910/*** * 用户退出 * @author lenovo * */ @RequestMapping(value = &quot;logout.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;String&gt; logout(HttpSession session)&#123; session.removeAttribute(Const.CURRENT_USER); return ServerResponse.createBySuccess(); &#125; 通过这段代码，我们就完成了用户登出的功能看，接来下是用户的注册功能。 用户注册继续打开UserController.java文件，在里面新增以下代码：12345@RequestMapping(value = &quot;register.do&quot;,method = RequestMethod.GET)@ResponseBodypublic ServerResponse&lt;String&gt; register(User user)&#123; return null;&#125; 打开UserMapper.java文件，我们需要对前端用户注册的邮箱是否存在进行校验：1int checkEmail(String email); //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置 这个和我们之前对于用户名的校验很相似，别忘了你这个方法需要去UserMapper.xml里面进行配置：1234&lt;select id=&quot;checkEmail&quot; resultType=&quot;int&quot; parameterType=&quot;string&quot;&gt; select count(1) from store_user where email = #&#123;email&#125; &lt;/select&gt; 然后回到我们的UserServiceImpl.java文件，里面添加如下代码：12345678910111213141516171819/** * 实现注册的接口类 * */ public ServerResponse&lt;String&gt; register(User user)&#123; int resultCount = userMapper.checkUsername(user.getUsername()); //检查注册时用户名是否存在 if(resultCount &gt;0)&#123; return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;); &#125; resultCount = userMapper.checkEmail(user.getEmail()); //检查注册时邮箱是否存在 if(resultCount &gt;0)&#123; return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;); &#125; user.setRole(Const.Role.ROLE_CUSTOMER); //该注册用户为一般用户 //密码加密(定义一个工具类) &#125; 接下来我们需要定义一个对用户密码进行加密的工具类，在util包里新建一个工具类MD5Util.java，里面的代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package top.store.util;import java.security.MessageDigest;public class MD5Util &#123; private static String byteArrayToHexString(byte b[]) &#123; StringBuffer resultSb = new StringBuffer(); for (int i = 0; i &lt; b.length; i++) resultSb.append(byteToHexString(b[i])); return resultSb.toString(); &#125; private static String byteToHexString(byte b) &#123; int n = b; if (n &lt; 0) n += 256; int d1 = n / 16; int d2 = n % 16; return hexDigits[d1] + hexDigits[d2]; &#125; /** * 返回大写 MD5 * */ private static String MD5Encode(String origin, String charsetname) &#123; String resultString = null; try &#123; resultString = new String(origin); MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;); if (charsetname == null || &quot;&quot;.equals(charsetname)) resultString = byteArrayToHexString(md.digest(resultString.getBytes())); else resultString = byteArrayToHexString(md.digest(resultString.getBytes(charsetname))); &#125; catch (Exception exception) &#123; &#125; return resultString.toUpperCase(); &#125; public static String MD5EncodeUtf8(String origin) &#123; return MD5Encode(origin, &quot;utf-8&quot;); &#125; private static final String hexDigits[] = &#123;&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;&#125;;&#125; 我们继续回到UserServiceImpl.java文件：12345678910111213141516171819202122232425/** * 实现注册的接口类 * */public ServerResponse&lt;String&gt; register(User user)&#123; int resultCount = userMapper.checkUsername(user.getUsername()); //检查注册时用户名是否存在 if(resultCount &gt;0)&#123; return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;); &#125; resultCount = userMapper.checkEmail(user.getEmail()); //检查注册时邮箱是否存在 if(resultCount &gt;0)&#123; return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;); &#125; user.setRole(Const.Role.ROLE_CUSTOMER); //该注册用户为一般用户 //密码加密(定义一个工具类) user.setPassword(MD5Util.MD5EncodeUtf8(user.getPassword())); resultCount =userMapper.insert(user); if(resultCount == 0)&#123; return ServerResponse.createByErrorMessage(&quot;注册失败&quot;); //说明可能是数据库错误 &#125; return ServerResponse.createBySuccessMassage(&quot;注册成功&quot;);&#125; 看到这里就有疑问了，你注册时候都对密码进行加密了，你前面登录却还用明文进行比较，对，所以我们现在就要对此进行修改：123 //用户名登录MD5String md5Password = MD5Util.MD5EncodeUtf8(password);User user =userMapper.selectLogin(username,md5Password); 经过这样修改，我们就可以进行加密后的密码验证了。接下来我们打开IUserService.java文件，把刚才的用于实现注册的接口类放置到里面：1ServerResponse&lt;String&gt; register(User user); 这样我们UserController就能使用它了：123456789/*** * 用户注册 * @author lenovo * */ @RequestMapping(value = &quot;register.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;String&gt; register(User user)&#123; return iUserService.register(user); &#125; 接下来介绍值校验的功能，因为我们不光只有注册的时候需要校验，而且登录，修改密码，找回密码等也需要进行校验，最主要的就是每次校验的类型还不确定（言外之意就是校验的字段类型根据不同的业务场景进行变换） 校验功能针对上面的情况，我们觉得有必要专门去写一个方法，去应对不同业务场景下面的字段验证问题，首先打开UserController，里面新增代码：123456/*** * 用于值验证 * */public ServerResponse&lt;String&gt; checkValid(String str,String type)&#123; return null;&#125; 然后修改IUserService.java文件：1ServerResponse&lt;String&gt; checkValid(String str,String type); 接着修改UserServiceImpl文件：123456789101112131415161718192021222324252627/**** * * 实现值校验的接口类 */public ServerResponse&lt;String&gt;checkValid(String str,String type)&#123; if(StringUtils.isNoneBlank(type))&#123; //开始校验 if(Const.USERNAME.equals(type))&#123; int resultCount = userMapper.checkUsername(str); //检查用户名是否存在 if(resultCount &gt;0)&#123; return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;); &#125; &#125; if(Const.EMAIL.equals(type))&#123; int resultCount = userMapper.checkEmail(str); //检查邮箱是否存在 if(resultCount &gt;0)&#123; return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;); &#125; &#125; &#125;else&#123; return ServerResponse.createByErrorMessage(&quot;参数错误&quot;); &#125; return ServerResponse.createBySuccessMassage(&quot;校验成功&quot;);&#125; 好，现在既然有了这个校验方法，那么我们是否就可以对之前写的注册逻辑进行修改呢，答案是必须的，否则我们写这个方法干嘛呢！我们将之前的注册的用户名和邮箱的校验方法进行修改，打开UserServiceImpl.java：123456789ServerResponse validResponse =this.checkValid(user.getUsername(),Const.USERNAME);if(!validResponse.isSuccess())&#123; //检查注册时用户名是否存在 return validResponse;&#125;validResponse =this.checkValid(user.getEmail(),Const.EMAIL);if(!validResponse.isSuccess())&#123; //检查注册时邮箱是否存在 return validResponse;&#125; 贴上最后修改的代码：1234567891011121314151617181920212223242526272829303132333435363738 /** * 实现注册的接口类 * */ public ServerResponse&lt;String&gt; register(User user)&#123;// int resultCount = userMapper.checkUsername(user.getUsername()); //检查注册时用户名是否存在// if(resultCount &gt;0)&#123;// return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;);// &#125;// resultCount = userMapper.checkEmail(user.getEmail()); //检查注册时邮箱是否存在// if(resultCount &gt;0)&#123;// return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;);// &#125; ServerResponse validResponse =this.checkValid(user.getUsername(),Const.USERNAME); if(!validResponse.isSuccess())&#123; //检查注册时用户名是否存在 return validResponse; &#125; validResponse =this.checkValid(user.getEmail(),Const.EMAIL); if(!validResponse.isSuccess())&#123; //检查注册时邮箱是否存在 return validResponse; &#125; user.setRole(Const.Role.ROLE_CUSTOMER); //该注册用户为一般用户 //密码加密(定义一个工具类) user.setPassword(MD5Util.MD5EncodeUtf8 (user.getPassword())); int resultCount =userMapper.insert(user); if(resultCount == 0)&#123; return ServerResponse.createByErrorMessage(&quot;注册失败&quot;); //说明可能是数据库错误 &#125; return ServerResponse.createBySuccessMassage(&quot;注册成功&quot;); &#125; 最后，我们还要回到UserController里面，进行路由的配置和方法的调用：12345678/*** * 用于值验证 * */@RequestMapping(value = &quot;check_valid.do&quot;,method = RequestMethod.GET) //这里就是具体的每个方法的url链接@ResponseBody //自动序列化json功能public ServerResponse&lt;String&gt; checkValid(String str,String type)&#123; return iUserService.checkValid(str,type);&#125; 总结一下不知道你发现没有，我们不同的功能的具体实现代码虽然不一样，但是我们都有一些共同的书写方式（其实就是书写顺序）：UserController—&gt;IUserService–&gt;UserServiceImpl。而且你发现没有三者非常相似，除了访问修饰符的区别，其他的例如返回值类型，方法名，参数列表（包括参数的个数，类型，顺序一模一样），当然方法体肯定不同的啦（我们以register为例）（实际是除了第一个，后面2个是必须相同的，但一般我们都让三者相同） 这是UserController.java:123public ServerResponse&lt;String&gt; register(User user)&#123; ...... &#125; 这是IUserService.java:1ServerResponse&lt;String&gt; register(User user); 这是UserServiceImpl.java:123public ServerResponse&lt;String&gt; register(User user)&#123;....&#125; 所以大家对此有个认识以后，后面写代码心里就有数了。这样，我们本篇关于用户登出，注册，校验功能实现的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（六）：用户登录模块","slug":"SSM搭建二手市场交易平台（六）：用户登录模块","date":"2018-08-15T03:01:06.000Z","updated":"2019-04-15T14:04:11.976Z","comments":true,"path":"2018/08/15/SSM搭建二手市场交易平台（六）：用户登录模块/","link":"","permalink":"http://blog.licheetools.top/2018/08/15/SSM搭建二手市场交易平台（六）：用户登录模块/","excerpt":"","text":"写在前面本篇开始，我们介绍用户模块功能，里面包含的知识点很多，具体有：登录；用户名验证；注册；忘记密码；提交问题答案；重置密码；获取用户信息；更新用户信息；退出登录等。 学到的技术1、理解横向越权、纵向越权安全漏洞；2、MD5 明文加密机增加salt 值；3、Guava 缓存的使用；4、高复用服务响应对象的设计思想及抽象分装；5、Mybatis-plugins的使用技巧6、session 的使用；7、方法局部演进。 横向越权、纵向越权安全漏洞介绍横向越权：攻击者尝试访问与他拥有相同权限的用户的资源纵向越权：低级别攻击者尝试访问高级别用户的资源 高复用服务响应对象的设计思想及抽象分装这里的意思就是说对于一些经常使用到的代码，我们对其进行了封装，以便更好的进行使用。 用户登录功能实现在我们之前定义的controller包下新建一个包，名称为portal（门户的意思就是给前端用的，你也可以取其他的名字，随意），然后在里面创建一个类，取名UserController。 （注意一下，这里我就不再按照之前那种写到哪里，代码就粘贴到哪里的方式了，而是直接附上功能较为完整的代码） 在UserController.java里面写入如下代码：123456789101112131415161718192021222324252627282930313233343536package top.store.controller.portal;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import top.store.common.Const;import top.store.common.ServerResponse;import top.store.pojo.User;import top.store.service.IUserService;import javax.servlet.http.HttpSession;/*** * 用户登录 * @author lenovo * */@Controller@RequestMapping(&quot;/user/&quot;) //这是我们对整个用户功能配置的一个类似于namespace的东西public class UserController &#123; @Autowired private IUserService iUserService; @RequestMapping(value = &quot;login.do&quot;,method = RequestMethod.POST) //这里就是具体的每个方法的url链接 @ResponseBody //自动序列化json功能 public ServerResponse&lt;User&gt; login(String username, String password, HttpSession session)&#123; //service--&gt;mybatis--&gt;dao ServerResponse&lt;User&gt; response = iUserService.login(username,password); if(response.isSuccess())&#123; session.setAttribute(Const.CURRENT_USER,response.getData()); &#125; return response; &#125;&#125; 接着在service这个包里面创建一个IUserService的java文件（为什么取这个名字，是为了一眼知道这个是接口）: IUserService 代码如下：12345678910package top.store.service;import top.store.common.ServerResponse;import top.store.pojo.User;/**@author lenovo * */public interface IUserService &#123; ServerResponse&lt;User&gt; login(String username, String password);&#125; 然后继续在service这个包里面创建一个包impl（顾名思义这个就是实现接口的类的包，同样名字随意）存放它的实现类，接着在该impl文件下新建UserServiceImpl.java文件，让它去实现我们刚才定义的IUserService接口，里面的代码如下：12345678910111213141516171819202122232425262728293031323334package top.store.service.impl;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import top.store.common.ServerResponse;import top.store.dao.UserMapper;import top.store.pojo.User;import top.store.service.IUserService;@Service(&quot;iUserService&quot;)public class UserServiceImpl implements IUserService &#123; @Autowired private UserMapper userMapper; @Override public ServerResponse&lt;User&gt; login(String username, String password) &#123; //必须要实现接口的方法，否则该类就变成了一个抽象类 int resultCount = userMapper.checkUsername(username); //检查登录时的用户名是否存在 if(resultCount ==0)&#123; return ServerResponse.createByErrorMessage(&quot;用户名不存在&quot;); &#125; //todo 用户名登录MD5 User user =userMapper.selectLogin(username,password); if(user==null)&#123; return ServerResponse.createByErrorMessage(&quot;密码错误&quot;); &#125; user.setPassword(StringUtils.EMPTY); return ServerResponse.createBySuccess(&quot;登录成功&quot;,user); &#125;&#125; 接下来为了完成一个通用的响应对象，我们需要在common这个包里面里新建一个类 ServerResponse（顾名思义就是处理响应的类），里面的代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package top.store.common;import org.codehaus.jackson.annotate.JsonIgnore;import org.codehaus.jackson.map.annotate.JsonSerialize;import java.io.Serializable;//保证序列化 JSon 的时候，如果是 null 的对象，可以也会消失@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL) //使用这个的作用就是有的时候返回只有状态而没有其他的data和msg也是可以的，就是Key存在但是value为nullpublic class ServerResponse&lt;T&gt; implements Serializable &#123; //使用泛型来声明这个类，代表这个类需要封装的数据的类型，并且我们是使用它来进行序列化的 //这里序列化的对象的确定是根据接口来的 private int status; private String msg; private T data; //使用泛型的最大好处就是，我们可以指定泛型的类型，也可以不指定，而且可以结合具体的场景进行使用，但是我们声明的时候就只能使用一种 //一般封装的都是设置私有化的构造方法，然后提供一个公共的访问方法就可以，很类似于单例模式的思想 //下面的这些构造方法适用于不同的业务场景，具体的看情况再使用 //适用于只有状态的情况 private ServerResponse(int status)&#123; this.status=status; &#125; //适用于有状态和消息的情况 public ServerResponse(int status, String msg)&#123; this.status=status; this.msg=msg; &#125; //适用于有状态和数据的情况 public ServerResponse(int status, T data)&#123; this.status=status; this.data=data; &#125; //适用于有状态，消息和数据的情况 private ServerResponse(int status, String msg,T data)&#123; this.status=status; this.msg=msg; this.data=data; &#125; //根据responseCode这个枚举类里面设定的状态码进行状态判断 //使之不在 json 序列化结果当中 @JsonIgnore //这里添加了json的忽略序列化，就使得它不会出现在json里面 public boolean isSuccess()&#123; return this.status ==ResponseCode.SUCCESS.getCode(); &#125; //根据私有字段提供的公共访问方法 public int getStatus()&#123; return status; &#125; public String getMsg()&#123; return msg; &#125; public T getData()&#123; return data; &#125; //根据前面的构造方法来返回成功的代码 public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccess()&#123; return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode()); &#125; public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccessMassage(String msg)&#123; return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),msg); &#125; public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccess(T data)&#123; return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),data); &#125; public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccess(String msg,T data)&#123; return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),msg,data); &#125; //根据前面的构造方法来返回失败的代码 public static &lt;T&gt; ServerResponse&lt;T&gt; createByError()&#123; return new ServerResponse&lt;T&gt;(ResponseCode.ERROR.getCode(),ResponseCode.ERROR.getDesc()); &#125; public static &lt;T&gt; ServerResponse&lt;T&gt; createByErrorMessage(String errorMessage)&#123; return new ServerResponse&lt;T&gt;(ResponseCode.ERROR.getCode(),errorMessage); &#125; public static &lt;T&gt; ServerResponse&lt;T&gt; createByErrorCodeMessage(int errorCode,String errorMessage)&#123; return new ServerResponse&lt;T&gt;(errorCode,errorMessage); &#125;&#125; 为了更好的对响应的状态进行判断，我们在common包下面新建一个ResponseCode.java文件（这是一个枚举类），里面的代码如下：12345678910111213141516171819202122232425262728package top.store.common;/** * @author lenovo * */public enum ResponseCode &#123; //响应编码的枚举类 SUCCESS(0,&quot;success&quot;), //成功 ERROR(1,&quot;error&quot;), //失败 NEED_LOGIN(10,&quot;NEED_LOGIN&quot;), //需要登录 ILLEGAL_ARGUMENT(2,&quot;ILLEGAL_ARGUMENT&quot;); //参数错误 private final int code; private final String desc; ResponseCode(int code,String desc)&#123; this.code = code; this.desc = desc; &#125; public int getCode()&#123; return code; &#125; public String getDesc()&#123; return desc; &#125;&#125; 接着我们在common包里面新建一个Const.java文件，里面存放一些公共的信息，里面的代码如下：12345package top.store.common;public class Const &#123; public static final String CURRENT_USER = &quot;currentUser&quot;;&#125; 在前面我们用到了checkUsername这个方法，因此我们需要在UserMapper.xml里面进行配置：12345678910111213&lt;select id=&quot;checkUsername&quot; resultType=&quot;int&quot; parameterType=&quot;string&quot;&gt; select count(1) from store_user where username = #&#123;username&#125; &lt;/select&gt; &lt;select id=&quot;selectLogin&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt; SELECT -- *???//这里最好不要使用*，因为会查到很多你不需要的东西 &lt;include refid=&quot;Base_Column_List&quot; /&gt; from store_user where username = #&#123;username&#125; and password = #&#123;password&#125; &lt;/select&gt; 注意格式：一般就是里面的id就是下面的方法名称，resultType就是方法的返回类型，parameterType就是里面参数的数据类型。对于多个参数的方法，依旧还是那样的。1234int checkUsername(String username); //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置 //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置User selectLogin(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password); //注意mybatis传递多个参数时，需要使用param注解 这样我们的用户登录模块就实现了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（五）：spring、springmvc配置","slug":"SSM搭建二手市场交易平台（五）：spring、springmvc配置","date":"2018-08-14T02:01:06.000Z","updated":"2019-04-15T14:03:14.304Z","comments":true,"path":"2018/08/14/SSM搭建二手市场交易平台（五）：spring、springmvc配置/","link":"","permalink":"http://blog.licheetools.top/2018/08/14/SSM搭建二手市场交易平台（五）：spring、springmvc配置/","excerpt":"","text":"写在前面本篇我们就来介绍spring、springmvc的相关配置，这一篇也是单独罗列出来的，便于今后学习与应用。 点击这里查看spring-framework的官方网站：spring-framework，然后spring也提供了一些官方的demo，非常经典有spring-petclinic，greenhouse，spring-mvc-showcase等，大家没事可以去看看。需要注意的是xml的配置文件，我们不可能采取一行一行的敲的方式，最好的方式是从直接从官方拷贝，因为这样可以避免一些包的不兼容问题。 从我的github上面复制图中所示的文件至图中所示位置： 如果你是完全按照我的配置来的，那么这些配置文件你可以复制粘贴拿来用了，里面都是一些过滤器，监听器，spring，spring mvc的配置，这里就不详细介绍了。 值得注意的是，如果出现下面的问题，请按照要求进行修改： 解决办法，file–&gt;modules–&gt;图中所示： 点击确定，然后那样的提示就不存在了。 logback和ftp服务器配置接下来继续去我的github上面，复制logback.xml文件至图中所示位置： 还是那句话和我保持一致的就不需要对里面的数据进行修改。 接下来进行ftp服务器的配置，这里你需要修改之前复制的store.properties文件：123456ftp.server.ip=你的FTP服务器ip地址ftp.user=你的FTP服务器用户名ftp.pass=你的FTP服务器密码ftp.server.http.prefix=http://img.licheetools.top/alipay.callback.url=password.salt = 关于这一部分，后面会在介绍图片上传的时候再次介绍，大家对此有一个清醒的认识就可以了。 idea的注入与自动编译配置打开idea，file –&gt;settings–搜索compiler–选择出现的make peoject automatically，你勾选一下这个就可以实时进行编译。（目前最新版idea好像没有这个配置了） 还有一个idea的注入：file –&gt;settings–搜索inspections–按照图示进行操作： 注意6步骤是将红色的error，修改为黄色的warning ，最后点击apply和ok即可。 项目初始化文件的提交在idea的terminal下面，依次执行下面的命令：123456789$ git status$ git add .$ git status$ git commit -am &apos;project init commit&apos;$ git push 最后去你的github上面查看你v0.1的版本代码吧： 两个好用的插件接下来介绍两个好用的插件，我这里是chrome浏览器，推荐大家也使用这个。首先点击这里：拓展中心，然后在里面搜索fe助手，这个工具很强大，自己下载完可以玩一玩： 另一个好用的插件则是restlet client，同样你下载完可以试试，这个用于测试的，非常好用。 至此，我们本篇文章的介绍就到此为止了，从此下一篇开始，我们就开始进行项目的开发阶段了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（四）：mybatis介绍与使用","slug":"SSM搭建二手市场交易平台（四）：mybatis介绍与使用","date":"2018-08-13T12:01:06.000Z","updated":"2019-04-15T14:02:27.321Z","comments":true,"path":"2018/08/13/SSM搭建二手市场交易平台（四）：mybatis介绍与使用/","link":"","permalink":"http://blog.licheetools.top/2018/08/13/SSM搭建二手市场交易平台（四）：mybatis介绍与使用/","excerpt":"","text":"写在前面本篇我们介绍mybatis的使用与配置，里面虽说知识点不多，但是我想专门独立出来自成一篇，目的就是方便以后的学习与使用。 mybatis-generator的介绍mybatis-generator会根据我们的数据库自动生成pojo、dao和对应的xml文件。其中pojo里面放的是跟数据库的字段一一对应的对象。dao 层是一个接口，可以供我们 service调用，xml是dao层接口的实现，我们所有的SQL 语句都会写在xml 里面。 前面我们已经在pom.xml里面加载过mybatis-generator，此时插件需要的 jar 包已经加载进来了： 现在我们在main文件夹下面新建 resources 文件夹（用于存放资源），接着在该文件夹里面新建一个generatorConfig.xml 文件，在里面添加代码（由于篇幅问题，请大家去我的github上查看） 接着在同级目录下创建一个datasource.properties文件，里面的代码如下：12345678910111213141516db.driverLocation=src/main/tools/mysql-connector-java-5.1.35.jardb.driverClassName=com.mysql.jdbc.Driver #db.url=jdbc:mysql://192.168.08.10:3306/store?characterEncoding=utf-8db.url=jdbc:mysql://localhost:3306/store?characterEncoding=utf-8db.username=xxxxdb.password=xxxx db.initialSize = 20db.maxActive = 50db.maxIdle = 20db.minIdle = 10db.maxWait = 10db.defaultAutoCommit = truedb.minEvictableIdleTimeMillis = 3600000 还需要在main包下面新建一个tools文件夹，将mysql-connector-java-5.1.35.jar 导入。（这里的mysql-connector-java的版本必须与你在之前pom.xml里面的配置保持相同）当然具体的包，你可以点击这里进行下载：mysql-connector-java mybatis-generator生成数据对象首先，点击idea右侧的Maven projects，然后按照图示进行操作： 最后记得双击4，如果运行出现下面的图片所示，表明你已经成功了：（如果失败，请检查数据库的用户名和密码是否错误） 前面说过mybatis-generator会根据我们的数据库自动生成pojo、dao和对应的xml文件。那我们现在就去看一下生成的文件： 看到没有，的确生成了许多文件。 时间戳的优化我们前面说过创建时间（create_time）和更新时间（update_time）是非常好用的时间戳，但是每个数据表都有它，因此如果我们在业务代码里进行处理势必会降低我们的效率。所以我们可以通过数据库提供的函数来自动进行生成： 我们就以CartMapper.xml为例，来进行修改，打开该文件，找到第33-34行代码： 也就是这样： 以及第78，81，（101，115这两行不需要修改）104，116这四行都进行替换。 其余7个表的修改都是类似，这里就不再赘述了。 mybatis-plugin介绍与使用首先是mybatis-plugin的安装，在idea里面：file–&gt;settings–&gt;然后在里面输入plugins，接着按照图示进行操作： 搜索mybatis plugin，找到那个销量最高的（图中红箭头所指），点击 install 安装，然后重启 idea即可（这个过程必须有）： 如果重启后发生这种错误：1Cannot load project: com.intellij.ide.plugins.PluginManager$StartupAbortedException: Fatal error ini 请点击这里：解决办法，建议使用另一个： 这个是国人设计的，这个用起来还不错。（记得安装完后重启idea） 不知你发现没有，左边都有这个绿色的箭头，这个箭头的好处就是能直接定位到对应的xml文件，然后你再次点击就返回原来的地方了。 mybatis-pagehelper分页插件点击这里查看官方文档：pagehelper 其实这里面的配合，我们在pom.xml里面已经有了：12345678910111213141516171819&lt;!-- mybatis pager --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;4.2.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.miemiedev&lt;/groupId&gt; &lt;artifactId&gt;mybatis-paginator&lt;/artifactId&gt; &lt;version&gt;1.3.18&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt; &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt; &lt;version&gt;0.9.8&lt;/version&gt;&lt;/dependency&gt; 关于这个插件的使用，后面会结合实际的例子进行说明介绍。 好了，关于mybatis介绍与使用我就先说这么多，后面有需要再介绍。","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（三）：项目初始化","slug":"SSM搭建二手市场交易平台（三）：项目初始化","date":"2018-08-12T14:01:06.000Z","updated":"2019-04-15T14:01:36.007Z","comments":true,"path":"2018/08/12/SSM搭建二手市场交易平台（三）：项目初始化/","link":"","permalink":"http://blog.licheetools.top/2018/08/12/SSM搭建二手市场交易平台（三）：项目初始化/","excerpt":"","text":"写在前面本篇介绍数据库的初始化，jdk、tomcat、maven的配置及初始化web空白项目，git的初始化以及pom文件配置和项目包结构初始化 数据库的初始化首先新建数据库store: 然后新建一个查询，执行第二篇笔记里面的SQL 语句，就可以创建本项目的数据库表了。如果你觉得麻烦可以去我的github上查找一个名为store.sql的文件，然后创建完数据局以后，点击新建查询，把里面的sql语句全都插入进去，然后点击运行即可： idea的安装关于idea的安装我这里就不介绍了，我之前介绍Pycharm的时候就顺带介绍了，你看一下就可以了（说明我这里使用的idea的版本是2018.2.3）：手把手教你破解Pycharm2018.2（JetBrains全家桶） jdk、tomcat、maven配置及初始化web空白项目jdk的配置 点击上面的新建图片的首页，点击Configure–&gt;Project Defaults–&gt;project Structure: 按照图上所示进行配置，然后单击ok就好。 maven的配置 点击上面的新建图片的首页，点击Configure–&gt;Settings： 注意这里的maven的解压路径，还有如果你的maven都是默认安装，那么你4步骤使用默认的就可以了。按照图上所示进行配置，然后单击ok就好。 快捷键的配置 点击上面的新建图片的首页，点击Configure–&gt;Settings： 这里我之前使用过一段时间的eclipse，所以快捷键就默认使用eclipse的，你可以根据自己的需要进行设置。 Maven空白项目的创建 然后一直next就可以了，然后系统会自动创建项目，创建完成如图所示：（第一次使用maven可能会花一点时间，因为maven的中央仓库里面还没有文件，你需要去下载） 看到上面这张图片说明项目已经搭建完成了。 接下来便是项目文件和测试文件目录的创建：在 main 文件下面创建一个java文件夹 ，然后按照如下操作：光标移到java文件夹上面，然后右键拉到底部，找到Make Directory AS ，再单击出现的Sources Root即可，会发现该文件变成了蓝色。 紧接着在src文件下，创建mian文件的测试文件夹，名称为test，然后再在test文件夹下面新建java文件夹 ，然后按照如下操作：光标移到java文件夹上面，然后右键拉到底部，找到Make Directory AS ，再单击出现的Test Sources Root即可，会发现该文件变成了绿色。 tomcat的配置 然后选择出现的Edit Configuration，点击左上角的绿色+号，拉到底部选择Tomcat Server，再选择local服务就可以： 1处的是你的tomcat server服务的名称，这个你自己随意命名可以不和项目名称保持一致，然后就是2,3,4步骤，最后点击apply和ok就可以了。 想知道你上述配置有没有成功呢？你可以点击运行一下，注意这里必须是运行tomcat服务器，不是jsp页面： 等项目运行起来后，等20秒左右，idea会自动打开浏览器并出现localhost:8080如果出现下面的页面代表配置成功了： git的初始化这里我使用的是github，当然你可以使用gitee或者其他的代码分享平台。 关于github的安装，我就不介绍了，你可以参考这篇文章：GitHub的注册与使用（详细图解） 然后新建一个repository，名称为store，紧接着开始git的初始化： 现在开始进行git的初始化，首先在idea的terminal下面运行touch README.md创建该文件。如果无法执行git命令： 那么很抱歉你需要进行相关信息的配置，具体的参考这里：idea中Terminal终端无法执行GIT命令： touch README.md问题解决 我这里推荐使用第二种方法，不过此后bash已经内嵌到idea里面了，就不再是执行以前的cmd命令了，这一点你需要清楚。接下来重新运行代码：123$ touch README.md #创建一个 README 文件$ touch .gitignore #创建一个忽略配置文件（gitignore前面的.号必须有） .gitignore文件的作用是把我们的配置文件匹配上的信息进行忽略，不会推送到我们的Git仓库里面去，也不会检测到我们本地的一些变化，（否则的话你每次修改一个字母都会进行自动上传，这是很费时间的事情） 接下来就是.gitignore文件的配置，我们忽略什么就在里面配置什么：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# Compiled class file*.class #我们编译出来的文件不需要推送 # temp file 临时文件*.log*.cache*.diff*.patch*.tmp # BlueJ files*.ctxt # Mobile Tools for Java (J2ME).mtj.tmp/ # Package Files #包文件不进行推送*.war*.ear*.zip*.tar.gz*.rar # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xmlhs_err_pid* #kdiff3 ignore*.orig #maven ignoretarget/ #eclipse ignore.settings/.project.classpatch #idea.idea//idea/*.ipr*.iml*.iws # system ignore 忽略系统文件.DS_StoreThumbs.dbsrc/main/resources/store.propertiessrc/main/resources/datasource.properties 在上面的文件中，我们没有对.jar文件进行忽略，那是因为后面支付宝提供的jar包我们需要提交到git仓库里面。 接下来执行git的初始化：1$ git init #初始化后会生成一个隐藏的.git文件 继续执行下面的代码：1$ git status #可以知道有哪些文件发生了变化 执行下面的代码：1$ git add . #添加所有文件 接着执行下面的代码：1$ git status 你会发现此时之前的那些都new file了 : 接着执行下面的代码：1$ git commit -am &apos;first commit init project&apos; -am代表加注释的意思，操作完此时我们所有文件就提交完了，不过只是提交到本地仓库里，还没有提交到git仓库里面。 接下来便是把其提交到我们远程的仓库里面了：1$ git remote add origin git@github.com:licheetools/store.git @后面是你的github项目的地址。 紧接着查看一下我们的分支：1$ git branch #查看一下分支，发现目前我们在master上，我们后面进行修改 现在执行最重要的一步，把项目推送到github仓库上面：1$ git push -u origin master 如果运行出现下面的情况，请不要慌，按照我说的操作继续走： 首先拉取一下资源：1$ git pull 接着就重新执行刚才的代码：1$ git push -u origin master 你会发现又出了一个错误：（这可真是命途多舛啊。。。） （说你的分支太靠后了，没有远程分支线） 现在只能强制推送了，如何强制呢？可以使用下面的命令：1$ git push -u -f origin master 现在你发现没有报错了，刷新一下你的github，可以看到你的本地项目已经发送到github上面了： 我们这个项目采用分支开发，主干发布(master)的模式，所以git仓库是必须要有的。 你可以使用下面的命令查看一下分支情况：1$ git branch -r 我们新建一个分支：1$ git checkout -b v0.1 origin/master (checkout是检查，v0.1是名称，origin/master是当前的分支树节点)你同样可以使用下面的命令查看分支：1234$ git branch#运行结果：# master#* v0.1 最后我们使用下面的命令将分支推送到远程：1$ git push origin HEAD -u 就出现： 最后去刷新一下github，会发现远程仓库里面已经有了： 是不是觉得很麻烦？其实idea里面已经集成了git，因此你可以不下载git就能连接到github了（但是连接gitee目前还不支持）由于idea和pycharm非常类似，因此我这里就不介绍如何直接使用idea把代码上传到github仓库里面了，有兴趣的同学可以参考我之前的这篇文章：利用Pycharm把代码直接上传到github 仓库 pom文件配置找到图示的pom.xml文件，然后去我的github仓库找到一个名为store.xml的文件，将里面的内容复制替换到pom.xml文件里面：（由于里面的代码很多，这里就不贴出来了，注意一下里面相关包的版本） 然后点击： 需要注意的是pom.xml文件里面jdk的版本，我用的是10，你们自己注意一下：Maven 教程：IDEA开发环境中maven 项目配置JDK9，JDK10，JDK11，JDK12..等EA版本的配置方法 系列教程一 左侧就会出现已经安装的包： 项目包结构初始化现在我们需要创建几个包，具体过程我就不详细说明了，直接附上最后的结果： 简单的说一下各个包的作用：controller，dao，service这三个关系密切：dao在最下层与数据库进行交互，controller是控制层，util是各个工具的存放，vo你可以理解为ViewObject或者ValueObject，正常的这两层就够了，如果是一些比较复杂的项目，还会多一层BusinessObject。pojo是简单的数据库对象，上一层通过VO进行封装，再传递给controller让前端负责展示。我们当然可以在pojo的上层使用bo，然后再在上层使用vo。其实在这里你可以把vo当做一个值对象（ValueObject），然后传递给controller让前端负责展示。common包就是存放我们项目中使用到的常量，或者是公共类等。 至此，我们本篇关于项目的初始化的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（二）：数据表设计","slug":"SSM搭建二手市场交易平台（二）：数据表设计","date":"2018-08-11T14:00:06.000Z","updated":"2019-04-15T14:00:38.989Z","comments":true,"path":"2018/08/11/SSM搭建二手市场交易平台（二）：数据表设计/","link":"","permalink":"http://blog.licheetools.top/2018/08/11/SSM搭建二手市场交易平台（二）：数据表设计/","excerpt":"","text":"写在前面从本篇开始，我们正式开始项目的搭建，首先介绍数据表的设计，具体包括：表结构，表关系，唯一索引，单索引及组合索引，时间戳这几个内容。 数据表首先我们创建一个数据库store，然后开始创建数据表：1、用户表123456789101112131415DROP TABLE IF EXISTS `store_user`;CREATE TABLE `store_user` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;用户表 id&apos;, `username` varchar(50) NOT NULL COMMENT &apos;用户名&apos;, `password` varchar(50) NOT NULL COMMENT &apos;用户密码，MD5 加密&apos;, `email` varchar(50) DEFAULT NULL, `phone` varchar(20) DEFAULT NULL, `question` varchar(100) DEFAULT NULL COMMENT &apos;找回密码问题&apos;, `answer` varchar(100) DEFAULT NULL COMMENT &apos;找回密码答案&apos;, `role` int(4) NOT NULL COMMENT &apos;角色 0-管理员,1-普通用户&apos;, `create_time` datetime NOT NULL COMMENT &apos;创建时间&apos;, `update_time` datetime NOT NULL COMMENT &apos;最后一次更新时间&apos;, PRIMARY KEY (`id`), UNIQUE KEY `user_name_unique` (`username`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8; 上面就是构建我们项目的用户表，其中主键 id 自增长，用户名 username （在注册的时候是不允许用户名重复的，并发的时候，我们可以通过锁的机制来解决这种问题。但是如果单纯查询某个用户名是否存在，我们可以采用同步的方法，但是当我们架构变成了一个分布式的时候，这种方法就不可取了。）因此，最好的办法就是通过数据库的唯一索引UNIQUE KEY 然后通过BTREE这种方式将username设置为唯一索引，这样对于username的唯一性就交由mysql来保证了。这样在业务代码处理时就不需要去加一些锁或者同步方法来校验用户名是否存在了。 然后密码存放的是经MD5加密的值，你通过加密后的字段是看不出原来密码是多少，并且这也是一个非对称加密。2、商品分类表1234567891011DROP TABLE IF EXISTS `store_category`;CREATE TABLE `store_category` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;类别 Id&apos;, `parent_id` int(11) DEFAULT NULL COMMENT &apos;父类别 id 当 id=0 时说明是根节点,一级类别&apos;, `name` varchar(50) DEFAULT NULL COMMENT &apos;类别名称&apos;, `status` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;类别状态 1-正常,2-已废弃&apos;, `sort_order` int(4) DEFAULT NULL COMMENT &apos;排序编号,同类展示顺序,数值相等则自然排序&apos;, `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;, `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=100032 DEFAULT CHARSET=utf8; 通常在设计分类表时要考虑一个场景，保证这个表可以递归，并且这个树状结构为了以后扩展，分类有可能是无限层级扩展的。因此，我们在设计递归的时候一定要有一个结束条件。这里的结束条件就是当parent_id 为 0 则认为递归结束。（比如某些一级类目它的parent_id 就是 0 ，就说明它就是根节点。）3、商品详情表12345678910111213141516DROP TABLE IF EXISTS `store_product`;CREATE TABLE `store_product` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;商品 id&apos;, `category_id` int(11) NOT NULL COMMENT &apos;分类 id,对应 store_category 表的主键&apos;, `name` varchar(100) NOT NULL COMMENT &apos;商品名称&apos;, `subtitle` varchar(200) DEFAULT NULL COMMENT &apos;商品副标题&apos;, `main_image` varchar(500) DEFAULT NULL COMMENT &apos;产品主图,url 相对地址&apos;, `sub_images` text COMMENT &apos;图片地址,json 格式,扩展用&apos;, `detail` text COMMENT &apos;商品详情&apos;, `price` decimal(20,2) NOT NULL COMMENT &apos;价格,单位-元保留两位小数&apos;, `stock` int(11) NOT NULL COMMENT &apos;库存数量&apos;, `status` int(6) DEFAULT &apos;1&apos; COMMENT &apos;商品状态.1-在售 2-下架 3-删除&apos;, `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;, `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8; 注意一下这里的decimal(20,2)，它表示可以存取整数位18，小数位2精度比较高的数。4、购物车表123456789101112DROP TABLE IF EXISTS `store_cart`;CREATE TABLE `store_cart` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `product_id` int(11) DEFAULT NULL COMMENT &apos;商品 id&apos;, `quantity` int(11) DEFAULT NULL COMMENT &apos;数量&apos;, `checked` int(11) DEFAULT NULL COMMENT &apos;是否选择,1=已勾选,0=未勾选&apos;, `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;, `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;, PRIMARY KEY (`id`), KEY `user_id_index` (`user_id`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=146 DEFAULT CHARSET=utf8; 我们这里之所以加一个 user_id索引，是因为我们这个表l里会经常使用 user_id 来进行查询，这样做的话会提高这个表的查询效率。5、支付信息表123456789101112DROP TABLE IF EXISTS `store_pay_info`;CREATE TABLE `store_pay_info` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL COMMENT &apos;用户 id&apos;, `order_no` bigint(20) DEFAULT NULL COMMENT &apos;订单号&apos;, `pay_platform` int(10) DEFAULT NULL COMMENT &apos;支付平台:1-支付宝,2-微信&apos;, `platform_number` varchar(200) DEFAULT NULL COMMENT &apos;支付宝支付流水号&apos;, `platform_status` varchar(20) DEFAULT NULL COMMENT &apos;支付宝支付状态&apos;, `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;, `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8; 这个表非常重要，因为里面包含了很多重要信息，我们以后对账，退款，支付查询都会用到这个表。还有就是在我们生成订单并发起支付请求的时候，会生成远程的支付宝订单，而它就存在这个 platform_number 里面，代表远程平台的一个支付流水号。6、订单表12345678910111213141516171819DROP TABLE IF EXISTS `store_order`;CREATE TABLE `store_order` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;订单 id&apos;, `order_no` bigint(20) DEFAULT NULL COMMENT &apos;订单号&apos;, `user_id` int(11) DEFAULT NULL COMMENT &apos;用户 id&apos;, `shipping_id` int(11) DEFAULT NULL, `payment` decimal(20,2) DEFAULT NULL COMMENT &apos;实际付款金额,单位是元,保留两位小数&apos;, `payment_type` int(4) DEFAULT NULL COMMENT &apos;支付类型,1-在线支付&apos;, `postage` int(10) DEFAULT NULL COMMENT &apos;运费,单位是元&apos;, `status` int(10) DEFAULT NULL COMMENT &apos;订单状态:0-已取消-10-未付款，20-已付款，40-已发货，50-交易成功，60-交易关闭&apos;, `payment_time` datetime DEFAULT NULL COMMENT &apos;支付时间&apos;, `send_time` datetime DEFAULT NULL COMMENT &apos;发货时间&apos;, `end_time` datetime DEFAULT NULL COMMENT &apos;交易完成时间&apos;, `close_time` datetime DEFAULT NULL COMMENT &apos;交易关闭时间&apos;, `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;, `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;, PRIMARY KEY (`id`), UNIQUE KEY `order_no_index` (`order_no`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=118 DEFAULT CHARSET=utf8; 注意一下，我们需要给订单号添加一个唯一索引，因为我们不能生成多个相同的订单。还有这里的payment是实际的付款金额，你千万不要和产品里面的金额做成联动查询，因为产品里面的金额是随着时间不同而不同，实际付款金额在购买以后就确定了，是不可以修改的。7、订单明细表1234567891011121314151617DROP TABLE IF EXISTS `store_order_item`;CREATE TABLE `store_order_item` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;订单子表 id&apos;, `user_id` int(11) DEFAULT NULL, `order_no` bigint(20) DEFAULT NULL, `product_id` int(11) DEFAULT NULL COMMENT &apos;商品 id&apos;, `product_name` varchar(100) DEFAULT NULL COMMENT &apos;商品名称&apos;, `product_image` varchar(500) DEFAULT NULL COMMENT &apos;商品图片地址&apos;, `current_unit_price` decimal(20,2) DEFAULT NULL COMMENT &apos;生成订单时的商品单价，单位是元,保留两位小数&apos;, `quantity` int(10) DEFAULT NULL COMMENT &apos;商品数量&apos;, `total_price` decimal(20,2) DEFAULT NULL COMMENT &apos;商品总价,单位是元,保留两位小数&apos;, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), KEY `order_no_index` (`order_no`) USING BTREE, KEY `order_no_user_id_index` (`user_id`,`order_no`) USING BTREE) ENGINE=InnoDB AUTO_INCREMENT=135 DEFAULT CHARSET=utf8; 注意一下，这里 product_id不能通过链接product表，来查询name和image 的，因为当我们下单的时候商品名称叫xx，极有可能在查询订单明细的时候就变成了xxxx。所以product_name和produc_image这两个字段的设计是非常有必要的。 8、收货地址表12345678910111213141516DROP TABLE IF EXISTS `store_shipping`;CREATE TABLE `store_shipping` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL COMMENT &apos;用户 id&apos;, `receiver_name` varchar(20) DEFAULT NULL COMMENT &apos;收货姓名&apos;, `receiver_phone` varchar(20) DEFAULT NULL COMMENT &apos;收货固定电话&apos;, `receiver_mobile` varchar(20) DEFAULT NULL COMMENT &apos;收货移动电话&apos;, `receiver_province` varchar(20) DEFAULT NULL COMMENT &apos;省份&apos;, `receiver_city` varchar(20) DEFAULT NULL COMMENT &apos;城市&apos;, `receiver_district` varchar(20) DEFAULT NULL COMMENT &apos;区/县&apos;, `receiver_address` varchar(200) DEFAULT NULL COMMENT &apos;详细地址&apos;, `receiver_zip` varchar(6) DEFAULT NULL COMMENT &apos;邮编&apos;, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8; 这是我们用于收货的地址表，可以这么说是对我们的用户表进行了业务场景的拓展。 至此，我们能想到的数据表就只有这些，其他的等需要的时候我们再进行添加。 表关系我们先来看一张图： 通过该图，我们知道该项目一共有八张表，蓝色的代表该数据表里存在索引，具体的索引如下： store_user表的username 是个唯一索引；store_cart表的user_id是个唯一索引；store_order表的order_no是个唯一索引；store_order_item表的order_no是一个唯一索引，而user_id又和order_no组成组合索引。 接下来，我们按照下单的流程介绍一下数据的流向，这个过程大家必须要知道，否则后面就难以进行了。 数据流向分析首先是注册，注册之后的信息会存到store_user表里面，登录则会读取store_user表中的信息从而进行验证。 然后搜索商品就用到了分类表和商品表，我们会依据传递的关键字或者分类的id来进行查询。 如果传入的分类 id 是一个级别比较高的 id，那么我们会对分类表进行递归查询，之后查出来符合这个分类或者关键字的一个product集合（商品详情集合）。 然后我们将这个商品添加进购物车的时候，就会把商品表中的id和用户表中的id拿过来，存放到购物车表里面，从而生成product_id。 用户登录的 id 放到 user_id，然后购物车中提交订单就来到了订单确认页，订单确认页里面就要填一些收货地址。 然后用户提交订单，生成订单，生成订单之后就来到了order（订单表）和 order_item（订单明细表），order 会生成一个订单号，order_item 表和 product 表是一个一对一的关系，order_item 和 order 表是一个多对一的关系（这个很好理解，一个订单里面可以包含多个商品）。 然后开始对这个订单进行付款，接到支付宝的回调，将信息存到 pay_info 表里面，然后对回调的状态进行判断，如果支付成功会把 order 表的 payment_time 进行写入。 不知道你发现没有，我们这些表中的外键都是没有用的，为什么不用它呢？因为在以后扩展分表的时候，外键的存在会使其扩展变的非常的麻烦，还有在进行清洗数据时也会很麻烦，因此我们这里就不使用外键。同时你必须要明确的一点就是，适当的冗余对数据库的查询是有一定帮助的。 唯一索引我们知道，唯一索引可以保证数据的唯一性，在这里我们就多次使用了它。store_user表中的：1UNIQUE KEY `user_name_unique` (`username`) USING BTREE store_order表中的：1UNIQUE KEY `order_no_index` (`order_no`) USING BTREE 单索引及组合索引单索引：store_order_item表中的：1KEY `order_no_index` (`order_no`) USING BTREE, 组合索引:store_order_item表中的：1KEY `order_no_user_id_index` (`user_id`,`order_no`) USING BTREE 这里的user_id和order_no的组合查询就是提高我们的查询速度。 时间戳时间戳，又称业务查询问题的后悔药。你可能也发现了这一点，那就是我们所有的表都有create_time（数据创建时间）和 update_time（数据更新时间）这是非常重要的！ 因为有时候我们在查一些业务问题的时候，如果日志没有打印，我们就很难知道事情发生的具体时间。如果我们数据库中连时间戳也没有，那更是无从下手了，一旦这个时候会非常后悔，如果当时打印日志就好了，就能知道这个数据是什么时候变化的，至少在查业务问题的时候有一个时间范围。 为什么用这两个字段呢？因为 create_time 我们能知道数据创建时间，而 update_time 我们能知道数据更新时间，但是我们不可能保存每次更新时间（这也不是它应该干的事，否则类似的版本控制器干嘛去了？？？），它只会保留最新一次的更新时间。另外这两个字段可以便于我们进行时间的排序或者其他业务分析的时候会用到。值得注意的是，我们存的类型是datetime而不是date，因为我们想要知道具体的时间。 至此，我们本篇关于表结构，表关系，唯一索引，单索引及组合索引，时间戳这几个内容的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"SSM搭建二手市场交易平台（一）：开发流程与环境搭建","slug":"SSM搭建二手市场交易平台（一）：开发流程与环境搭建","date":"2018-08-10T13:58:07.000Z","updated":"2019-04-15T13:59:22.848Z","comments":true,"path":"2018/08/10/SSM搭建二手市场交易平台（一）：开发流程与环境搭建/","link":"","permalink":"http://blog.licheetools.top/2018/08/10/SSM搭建二手市场交易平台（一）：开发流程与环境搭建/","excerpt":"","text":"开发流程环境搭建：这里以windows10 64Bit为环境进行环境搭建。具体包括jdk的安装，Tomcat的安装，nginx的安装。数据库及接口的配置：介绍表的设计思路，接口的设计思路项目初始化：介绍Spring，Spring MVC，MyBatis的使用用户模块：介绍个人中心资料修改，商品收藏等分类模块：介绍如何进行二手商品类目的分类以及插件的使用商品模块：主要介绍商品的富文本展示购物车模块：介绍添加商品，更新购物车，查询购物车数量，价格动态显示收货地址模块：添加地址，删除更新地址，地址详情，地址的列表等支付模块：介绍支付宝的支付功能，回调功能，查询订单的支付状态，生成支付的二维码订单模块：分为前台和后台，前台就是创建订单，获取订单的信息，列表的详情页，取消订单；后台负责订单的搜索，订单的详情，订单的发货云服务器模块：介绍云服务器的配置与项目的打包上线。 淘宝技术架构这里我找了一篇文章，大家可以了解一下：淘宝技术架构 在之前我们都是采用all in one的方式来进行项目的发布与运行：就是你的Application Server里面包含了Application ，File和DataBase，这样做的好处就是节省开支，但坏处就是很容易造成服务器挂掉。 然后就各自分开，各自采用不同的服务器：Application Server，File Server，DataBase Server,这种能防止File Server挂掉以后，系统还能运行，但是还是不能满足我们高并发的要求（因为你每次数据请求都必须直接与数据库进行连接，当访问量达到一定数量的时候，数据库响应时间也是很费资源），于是架构又开始升级。 我们知道80%的数据访问只存在于20%的数据上面，而且我们不希望每次都是从数据库中取出数据，于是我们可以使用缓存。缓存分为很多种，本地缓存和远程缓存。本地缓存称为local cache，远程缓存称为Remote Disteibuted Cache。我从网上找了几张图片，大家可以了解一下： 演化过程：在Application Server这里添加添加了一个负载均衡调度器，也变成了一个集群。 利用负载均衡调度器解决服务器的Session共享的问题，但是也有缺点：假设Application1的服务器重启了，那么它上面所有的sessio就全没了；然后就是我们的负载均衡调度器成了一个有状态的服务器，实现容灾就有麻烦。如果你让每个session都在各个服务器里面有一个备份，这的确能解决这个问题，但是当数量达到一个级别以后，这种方式是很费资源的。那么你又说，为我们可以让browser在提交数据的同时带上cookie，这样就不用担心服务器不能正常识别资源了，但是你想过没有，cookie的长度是有限的而且是有时间限制的，而且还是存放在本地，它的安全性就等不到保证了。 于是又有人提出了一种新的方式，我们可以专门弄一个session服务器，用于存放session。当你想获取应用的时候，可以从session服务器获取session。但是我们需要注意这个session server是单点的，我们最好把它也做成一个集群。 现在我们继续回到前面的架构图，我们现在发现数据库是一个瓶颈，我们可以对它进行读写分离： 我们这里的Slave是辅库，Master是主库，我们把所有的读的操作都让Slave辅库来进行，把所有的写的操作都让Master主库负责。这样做的话，把你Application也需要做相应的变化： 在这个过程中，安全性，数据分析，监控，反作弊等都值得大家去注意；然后随着技术的发展，SOA架构，服务化，消息队列，任务调度，多机房等方向发展。 环境搭建jdk的安装我这里使用的是jdk10的版本，你可以使用jdk7,8,9，再低的版本就不建议使用了。关于jdk的安装，我这里就不介绍了，直接开启传送大门：java的jdk安装(超详细版) Tomcat的安装Tomcat它是一个Web容器，javaEE项目都存放在里面。同样Tomcat的安装，我也是直接开启传送大门，注意一下这里推荐使用Tomcat8系列： windows下tomcat的安装配置下面简单说一下Tomcat的启动与关闭：启动使用：在配置环境的bin目录下使用startup.bat命令；关闭使用：在配置环境的bin目录下使用shutdown.bat命令。就是${CATALINA_HOME}/bin/startup.bat或者是${CATALINA_HOME}/bin/shutdown.bat对了，你还需要配置UTF-8的字符集：1F:\\tomcat\\apache-tomcat-8.5.34\\conf\\server.xml 我的路径是这里，你打开它，找到第69-71行代码： 添加这一行代码：1URIEncoding=&quot;UTF-8&quot; 注意：截图中之所以有是因为我已经配置完了，之前是没有的。 Maven的安装Maven全称是Apache Maven Project–Apache的优秀开源项目，Maven是java项目的构建和管理工具。Maven的用途很大，这里简单说一下：1、用Maven可以方便的创建项目，基于archetype可以创建多种类型的java项目；2、Maven仓库对jar包（artifact）进行统一管理，避免jar文件的重复拷贝和版本冲突；3、团队开发，Maven管理项目的release（正式版本）和snapshot（开发版本）版本，方便多模块（module）项目的各个模块之间的快速集成 关于Maven的安装，大家可以参考这篇文章：Maven安装教程详解不过要说明的是，如果下载速度过慢，建议使用镜像下载：maven下载 随便点击一个，然后选择binaries这个文件夹，选择以.zip结尾的文件就可以了。然后安装按照文章里面的说明就可以了，最后你可以在dos状态下使用mvn -version来验证安装是否正确： 还要注意一下，就是我的Maven项目地址已经发生了改变,由默认的位置变为:F:\\Maven\\repo，这一点你注意一下。 下面是一些常用的maven命令：清除命令：mvn clean编译命令： mvn compile打包命令：mvn package跳过单元测试：mvn clean package -Dmaven.test.skip=true vsftpd安装vsftpd 是“very secure FTP daemon”的缩写，是一个完全免费的、开放源代码的ftp服务器软件,但是它是适用于linux系统，要想在windows上搭建是一件非常麻烦的事。我从网上找了很久，找到了一个小而巧的FTP Server，不需要安装，点击之后输入用户和密码就能使用。 第一步，从我的gitee上面下载一个名为FTP Server.zip的压缩文件，解压就只有下面2个文件： 你单击第二个exe，设置账户和密码，以及ftp的路径，然后去浏览器地址栏输入：ftp://localhost，就完成了自己FTP Server的搭建。 接下来是nginx的安装。 nginx的安装nginx是一款轻量级的web服务器，也是一款反向代理服务器；它的功能很强大，这里简单介绍一下：1、可直接支持Rails和PHP的程序；2、可作为HTTP反向代理服务器；3、作为负载均衡服务器；4、作为邮件代理服务器；5、帮助实现前端动静分离；nginx的特点：高稳定，高性能，资源占用少，功能丰富，模块化结构，支持热部署 具体的安装我这里就不介绍了，大家可以参考这篇文章就行了：Nginx在windows上安装 及 Nginx的配置及优化 安装完以后，打开C:\\Windows\\System32\\drivers\\etc\\hosts文件，新增一行代码：127.0.0.1 store.licheetools.top然后你去浏览器地址栏中输入127.0.0.1，store.licheetools.top，或者localhost就能正常访问到nginx的首页了。（如果访问不了，请关闭之前开启的FTP Server） 接下来就是相关文件的配置了，首先找到nginx的安装目录下面的conf文件：F:\\Maven\\nginx-1.14.1\\conf，接着我们打开其中的nginx.conf文件： 我们往下拉，我们在大概第95行的位置添加下面一行代码：1include vhost/*.conf; 截图是我已经配置好的，目的是让大家对此有一个更清醒的认识。 接着在nginx.conf文件的同级目录下面新建vhost文件夹（名字你可以不这样命令，但是必须和前面我们在nginx.conf文件中定义的代码名一样，否则就会出现找不到文件的bug） 然后在里面新建名为image.licheetools.top.conf的文件，必须与.conf结尾。你可以不命令这个名字，但怕你后面不会正常运行，建议还是按照我的命令进行运行吧。（这里你可以在F:\\Maven\\envy\\img文件夹里面放置一张名为test.jpg的图片，后面测试会用上） 在里面写入以下代码：1234567891011121314151617181920server &#123; listen 80; autoindex off; server_name image.licheetools.top; #这个名称必须和文件名一致 access_log c:/access.log combined; index index.html index.htm index.jsp index.php; #error_page 404 /404.html; if ( $query_string ~* &quot;.*[\\;&apos;\\&lt;\\&gt;].*&quot; )&#123; return 404; &#125; location ~ /(mmall_fe|mmall_admin_fe)/dist/view/* &#123; deny all; &#125; location / &#123; root F:\\Maven\\envy\\img; #这个就是前面的那个ftp server的路径 add_header Access-Control-Allow-Origin *; &#125;&#125; 然后打开：C:\\Windows\\System32\\drivers\\etc\\hosts文件，修改刚才新增的那行代码：127.0.0.1 image.licheetools.top。保存完以后，我们重新打开一个cmd命令，进入到nginx的安装目录。输入nginx.exe -t，如果配置文件没有报错，继续输入nginx.exe -s reload。然后你去浏览器地址栏中输入http://image.licheetools.top\\test.jpg就能正常访问到我们在F:\\Maven\\envy\\img下面放置的test.jpg文件了。（如果访问不了，请关闭之前开启的FTP Server） 上面介绍的是文件转发的测试，接下来我们来测试一下端口的转发。 端口转发测试我们继续在vhost里面新建名为tomcat.licheetools.top.conf的文件，必须与.conf结尾。你可以不命令这个名字，但怕你后面不会正常运行，建议还是按照我的命令进行运行吧。（这里你可以在F:\\Maven\\envy\\img文件夹里面放置一张名为test.jpg的图片，后面测试会用上） 在里面写入以下代码：123456789101112131415server &#123; listen 80; autoindex on; server_name tomcat.licheetools.top; #这个名称必须和文件名一致 access_log c:/access.log combined; index index.html index.htm index.jsp index.php; #error_page 404 /404.html; if ( $query_string ~* &quot;.*[\\;&apos;\\&lt;\\&gt;].*&quot; )&#123; return 404; &#125; location / &#123; proxy_pass http://127.0.0.1:8080; add_header Access-Control-Allow-Origin *; &#125;&#125; 然后打开：C:\\Windows\\System32\\drivers\\etc\\hosts文件，继续新增的一行代码：127.0.0.1 tomcat.licheetools.top。保存完以后，我们重新打开一个cmd命令，进入到tomcat安装目录的bin目录，在里面执行startup.bat，来启动我们的tomcat服务器。此时你去浏览器地址栏中输入http://localhost:8080/看是不是出现了tomcat的默认首页。 紧接着我们另开启一个新的cmd命令行，进入到nginx的安装目录，输入nginx.exe -s reload。 然后你去浏览器地址栏中输入http://tomcat.licheetools.top就能正常访问到tomcat的默认首页。（如果访问不了，请关闭之前开启的FTP Server） mysql的安装关于mysql的安装，我在这篇笔记里面有过详细的介绍，这里就不再介绍了。零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置 mysql的登录：在dos状态下使用mysql -uroot -p然后输入密码进行登录。mysql的配置（注意这里所说的配置不光对windows有用，对于linux或者unix也是有用的）SQL语句结尾的分号必须带上，表示语句结束（1）查看目前mysql的用户：1select user,host from mysql.user; （2）修改root密码：123set password for root@localhost=password(&apos;yourpassword&apos;);set password for root@127.0.0.1=password(&apos;yourpassword&apos;); （3）使用exit退出mysql;（4）重新登录mysql输入mysql -u root -p;（5）输入密码登录成功；（6）删除匿名用户，执行下面的命令：查看是否有匿名用户：select user,host from mysql.user;删除匿名用户：delete feom mysql.user where user = &#39;&#39;;再次查看：select user,host from mysql.user;刷新，使上述操作生效：flush privilgges;（7）插入mysql新用户：1insert into mysql.user(Host,User,Password)values(&quot;localhost&quot;,&quot;yourusername&quot;,password(&quot;yourpassword&quot;)); 刷新，使上述操作生效：flush privilgges;（8）创建新的数据库(database)1create database &apos;databasename&apos; default character set utf8 collate utf8_general_ci; （9）本地用户赋予所有权限1grant all privileges on databasename.* to yourname@localhost identified by &apos;yourpassword&apos;; （10）给账号开通外网所有权限1grant all privileges on databasename.* to &apos;yourname&apos;@&apos;%&apos; identified by &apos;yourpassword&apos;; 上面的权限可以根据自己的需要进行适当的修改，举个例子：1grant select,insert,update on databasename.* to &apos;yourname&apos;@&apos;192.168.01.01&apos; identified by &apos;yourpassword&apos;; 代表只开通增改查权限给指定的账号，并也指定了ip的地址。刷新，使上述操作生效：flush privilgges;（11）查看本地的IP地址：windows系统使用：ipconfig，而linux用户使用ifconfig git的安装关于git的安装，这里直接开启传送大门：Git安装教程（windows）下面是一些基础的配置：1、配置用户名（提交时会用到）git config --global user.name &quot;envy&quot;(envy是我的用户名)2、配置邮箱（提交时会用到）git config --global user.email &quot;envy@licheetools.top&quot;(envy@licheetools.top是我的邮箱)3、其他的一些配置git config --global merge.tools &quot;kdiff3&quot;（注意一下，如果你没安装kdiff3就不需要这一行）git config --global core.autocrlf false（设置这个的好处就是不用管不同系统中换行符错乱的问题）4、编码问题：git config --global gui.encoding utf-8（避免git gui中的中文乱码）git config --global core.quotepath off（避免git status显示的中文文件名乱码） 在windows上面一般还需要配置一下大小写的问题：git config --global core.ignorecase false git ssh key pair的配置1、你可以在linux上或者windows上的Git Bash命令行窗口中输入：ssh-keygen -t rsa -C &quot;envy@licheetools.top&quot;2、然后一路回车，不要输入任何密码，生成ssh key pair3、ssh-add ~/.ssh/id_rsa4、cat ~/.ssh/id_rsa.pub 5、复制公共钥匙到粘贴板，我这里是使用gitee（你当然可以使用github）6、查看git的版本:git --version 至此，我们关于开发流程与环境搭建的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"SSM框架","slug":"SSM框架","permalink":"http://blog.licheetools.top/tags/SSM框架/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"http://blog.licheetools.top/tags/JAVA后端/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍","slug":"关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍","date":"2018-08-05T13:33:59.000Z","updated":"2019-04-13T13:34:34.674Z","comments":true,"path":"2018/08/05/关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍/","link":"","permalink":"http://blog.licheetools.top/2018/08/05/关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍/","excerpt":"","text":"jdbc全称java database connectivity.是java程序与数据库连接的一种机制。 jdbc的过程：1、搭建开发环境2、编写程序，在程序中加载数据库驱动3、建立连接4、创建用于向数据库发送sql语句的Statement对象5、从代表结果集的ResultSet中取出数据6、断开与数据库的链接，并释放相关的资源 ###DriverManager：驱动管理类主要作用：1、注册驱动12DriverManager.registerDriver(new Driver()); //会导致驱动注册两次Class.forName(&quot;com.test.jdbc.demo1.JdbcTest1&quot;); //实际上使用这种方式 2、获得连接Connection getConnection(String url,String username,String password)；url的写法：jdbc:mysql://localhost:3306/jdbcjdbc:协议mysql:子协议localhost:主机号3306:端口号注意如果为本地ip地址，则可以简写为：jdbc:mysql:///jdbc ###jdbc工具类的书写123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107package com.test.jdbc.utils;import java.io.IOException;import java.io.InputStream;import java.sql.*;import java.util.Properties;/**** * JDBC的工具类 * @author lenovo * */public class JdbcUtils &#123; private static final String driverClass; private static final String url; private static final String username; private static final String password;//没有配置文件jdbc.properties时的代码 static &#123; driverClass = &quot;com.mysql.jdbc.Driver&quot;; url = &quot;jdbc:mysql://localhost:3306/jdbctest&quot;; username = &quot;root&quot;; password = &quot;root&quot;; &#125; /** * 注册驱动的方法 **/ public static void loadDriver() throws ClassNotFoundException &#123; Class.forName(driverClass); &#125; /*** * *获得连接的方法 * */ public static Connection getConnection() throws Exception &#123; loadDriver(); //这里必须要调用上面的注册驱动方法 Connection connection = DriverManager.getConnection(url, username, password); return connection; &#125; /*** *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作 * * */ public static void ReleaseSource(Connection connection, Statement statement) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; &#125; /*** *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作 * * */ public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; if (resultSet != null) &#123; try &#123; resultSet.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; resultSet = null; &#125; &#125;&#125; 下面是具有了jdbc.propreties属性的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118package com.test.jdbc.utils;import java.io.IOException;import java.io.InputStream;import java.sql.*;import java.util.Properties;/**** * JDBC的工具类 * @author lenovo * */public class JdbcUtils &#123; private static final String driverClass; private static final String url; private static final String username; private static final String password; //有配置文件jdbc.properties时的代码 static &#123; //加载属性文件并解析 Properties props = new Properties(); //如何获得属性文件的输入流？ //通常情况下使用类的加载器的方式进行获取 InputStream is = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;); try &#123; props.load(is); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; driverClass =props.getProperty(&quot;driverClass&quot;); url =props.getProperty(&quot;url&quot;); username =props.getProperty(&quot;username&quot;); password =props.getProperty(&quot;password&quot;); &#125; /** * 注册驱动的方法 **/ public static void loadDriver() throws ClassNotFoundException &#123; Class.forName(driverClass); &#125; /*** * *获得连接的方法 * */ public static Connection getConnection() throws Exception &#123; loadDriver(); //这里必须要调用上面的注册驱动方法 Connection connection = DriverManager.getConnection(url, username, password); return connection; &#125; /*** *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作 * * */ public static void ReleaseSource(Connection connection, Statement statement) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; &#125; /*** *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作 * * */ public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; connection = null; &#125; if (statement != null) &#123; try &#123; statement.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; statement = null; &#125; if (resultSet != null) &#123; try &#123; resultSet.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; resultSet = null; &#125; &#125;&#125; 其中jdbc.propreties文件里面的代码是：1234driverClass = com.mysql.jdbc.Driverurl = jdbc:mysql://localhost:3306/jdbctestusername = rootpassword = root Statement的使用它的使用和我们后面所说的preparedStatement的使用有点不相同，而且我们优先后面的那种方式，因为不会产生sql注入的危险。 preparedStatement的使用123456789101112131415161718192021222324252627282930@Test /*** * 保存数据到数据库，其实就是插入操作 * */ public void demo1() &#123; Connection connection = null; PreparedStatement preparedStatement = null; try &#123; //注册驱动和获取连接 connection = JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;insert into user values(null,?,?,?)&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 preparedStatement.setString(1, &quot;xxx&quot;); preparedStatement.setString(2, &quot;0000&quot;); preparedStatement.setString(3, &quot;boyer&quot;); //执行sql语句 int i = preparedStatement.executeUpdate(); if (i &gt; 0) &#123; System.out.println(&quot;数据插入成功&quot;); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; JdbcUtils.ReleaseSource(connection, preparedStatement); &#125; &#125; 在增删改查四个操作里面，我们先来简单连接四个过程的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//保存数据到数据库，其实就是插入操作 //注册驱动和获取连接 connection = JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;insert into user values(null,?,?,?)&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 preparedStatement.setString(1, &quot;xxx&quot;); preparedStatement.setString(2, &quot;0000&quot;); preparedStatement.setString(3, &quot;boyer&quot;); //执行sql语句 int i = preparedStatement.executeUpdate(); if (i &gt; 0) &#123; System.out.println(&quot;数据插入成功&quot;); &#125;//修改数据库中的数据 //注册驱动与获取连接 connection = JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;update user set username =?,password =?,name=? where uid =?&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 preparedStatement.setString(1, &quot;eee&quot;); preparedStatement.setString(2, &quot;555&quot;); preparedStatement.setString(3, &quot;lichee&quot;); preparedStatement.setInt(4, 7); //执行sql语句 int i = preparedStatement.executeUpdate(); if (i &gt; 0) &#123; System.out.println(&quot;数据修改成功！&quot;); &#125;//删除数据库中的数据//注册驱动与获取连接 connection =JdbcUtils.getConnection(); //创建sql语句 String sql =&quot;delete from user where uid =?&quot;; //预处理sql preparedStatement =connection.prepareStatement(sql); //设置参数 preparedStatement.setInt(1,6); //执行sql语句 int i = preparedStatement.executeUpdate(); if(i&gt;0)&#123; System.out.println(&quot;数据删除成功！&quot;); &#125;//查询数据库中的全部数据 //注册驱动和获取连接 connection =JdbcUtils.getConnection(); //创建sql语句 String sql = &quot;select * from user&quot;; //预处理sql语句 preparedStatement = connection.prepareStatement(sql); //设置参数 //执行sql语句 resultSet = preparedStatement.executeQuery(); while (resultSet.next())&#123; System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\\nname：&quot;+resultSet.getString(&quot;name&quot;)); &#125;//查询数据库中的一条数据 //注册驱动和获取连接 connection =JdbcUtils.getConnection(); //创建sql语句 String sql =&quot;select * from user where uid =?&quot;; //预处理sql语句 preparedStatement =connection.prepareStatement(sql); //设置参数 preparedStatement.setInt(1,1); //执行sql语句 resultSet = preparedStatement.executeQuery(); //判断结果集中的数据 while (resultSet.next())&#123; System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\\nname：&quot;+resultSet.getString(&quot;name&quot;)); &#125; 也就是说增加，修改，删除都是使用executeUpdate函数，而且返回的是int类型的受影响的行数，然后我们就可以使用：1234int i = preparedStatement.executeUpdate(); if(i&gt;0)&#123; System.out.println(&quot;数据删除成功！&quot;); &#125; 只有查询使用的是executeQuery函数，而且返回的是resultSet类型的结果集，然后使用：12345resultSet = preparedStatement.executeQuery(); //判断结果集中的数据 while (resultSet.next())&#123; System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\\nname：&quot;+resultSet.getString(&quot;name&quot;)); &#125; 连接池连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。 C3P0连接池","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（八）：反射机制","slug":"关于JAVA你必须知道的那些事（八）：反射机制","date":"2018-08-05T13:33:08.000Z","updated":"2019-04-13T13:33:39.461Z","comments":true,"path":"2018/08/05/关于JAVA你必须知道的那些事（八）：反射机制/","link":"","permalink":"http://blog.licheetools.top/2018/08/05/关于JAVA你必须知道的那些事（八）：反射机制/","excerpt":"","text":"写在前面本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。 四大类Class：class类的实例表示正在运行的java应用程序中的类和接口；Constructor：关于单个类的构造方法以及对它的访问权限;Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；Method：提供关于类或者接口上的单独某个方法的信息。 Class类Class：class类的实例表示正在运行的java应用程序中的类和接口；java中java.lang.Class类用于表示一个类的字节码（.class）文件;获取某个class文件对应的Class对象：1、在已知类和对象的情况下：类名.class对象.getClass() –由Object类提供。2、在未知类的情况下：Class.forName(“包名.类名”) Class类代表某个类的字节码，并提供了加载字节码的方法：forName(“包名.类名”)，forName方法用于类字节码到内存中，并封装成一个Class对象。 我们通过代码来测试一下：首先先新建一个测试类Person：123456789101112131415161718192021222324252627282930313233343536373839package JavaReflect;public class Person &#123; private String name; private String sex; public Person() &#123;&#125;; public Person(String name,String sex) &#123; this.name=name; this.sex =sex; &#125; public String getName() &#123; return name; &#125;; public void setName(String name) &#123; this.name=name; &#125;; public String getSex() &#123; return sex; &#125;; public void setSex(String sex) &#123; this.sex=sex; &#125;; public void eat() &#123; System.out.println(&quot;吃东西......&quot;); &#125;; @Override public String toString() &#123; return &quot;Person [name=&quot; + name + &quot;, sex=&quot; + sex + &quot;]&quot;; &#125;&#125; 再来建一个ReflectTest类：1234567891011121314151617181920212223242526272829303132333435package JavaReflect;public class ReflectTest &#123; /** * 获得Class对象： 1、通过类.class； 2、通过对象.getClass()； 3、通过Class.forName(); * * @throws ClassNotFoundException **/ public static void demo1() throws ClassNotFoundException &#123; // 1、通过类.class； Class csone = Person.class; // 2、通过对象.getClass()； Person person = new Person(); Class cstwo = person.getClass(); // 3、通过Class.forName()获取信息（推荐） Class csthree = Class.forName(&quot;JavaReflect.Person&quot;); System.out.println(csthree); &#125; public static void main(String[] args) &#123; try &#123; ReflectTest.demo1(); &#125; catch (ClassNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; 以上三种方法获得的都是类的字节码文件对应的对象在内存中的地址。 Constructor构造方法Constructor：关于单个类的构造方法以及对它的访问权限;我们在前面已经得到了类名，那么就可以调用它的getConstructor()方法来获得它的有参或者无参的构造方法，紧接着你可以利用这个获得的构造方法的newInstance()方法，来达到完成实例化一个对象的目的。 我们新建一个测试类：ConstructorTest：12345678910111213141516171819202122232425262728293031323334353637383940414243444546package JavaReflect;import java.lang.reflect.Constructor;public class ConstructorTest &#123; /** * 获得无参的构造方法 * * @throws ClassNotFoundException */ public static void demo2() throws Exception &#123; // 获得类的字节码文件对应的对象 Class cls = Class.forName(&quot;JavaReflect.Person&quot;); // 获得无参的构造方法 Constructor cs = cls.getConstructor(null); Person person = (Person) cs.newInstance(null); // 其实这里就相当于Person person =new Person(); person.eat(); &#125;; public static void demo3() throws Exception &#123; Class cls = Class.forName(&quot;JavaReflect.Person&quot;); Constructor cso = cls.getConstructor(String.class, String.class); Person person = (Person) cso.newInstance(&quot;小白&quot;, &quot;男&quot;); //这里其实就是相当于Person person =new Person(&quot;小白&quot;,&quot;男&quot;); System.out.println(person); &#125; public static void main(String[] args) &#123; try &#123; ConstructorTest.demo3(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;//输出结果：Person [name=小白, sex=男] Field类Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；我们在前面已经得到了类名，那么就可以得到它的成员变量（包括所有的成员变量和指定的成员变量）。 如果你想获得所有的（非私有）成员变量，那么你可以调用它的getFields()方法，获得该类所有public属性（包括父类继承的）； 如果你想获得所有的（含私有）成员变量getDeclaredFields()方法，获得该类所有声明的属性（包括私有属性和父类继承的）； 如果你想获得指定的（非私有）成员变量，那么你可以调用它的getField(String name)方法，获得指定的（非私有）成员变量； 如果你想获得指定的（含私有）成员变量，那么你可以调用它的getDeclaredField(String name)方法，获得指定的（含私有）成员变量; 设置Field变量是否可以访问，你可以使用field.setAccessible(boolean)，boolean为真则表示可以，反之则不可以。 Field变量值的读取与设置：field.get(obj);field.set(obj,value); 我们首先在之前的Person类中添加一个公有的属性（public Sting hobby），然后新建一个测试类:FieldTest:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package JavaReflect;import java.lang.reflect.Field;public class FieldTest &#123; /** * 测试公有属性 */ public static void publicDemoTest() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class1 = Class.forName(&quot;JavaReflect.Person&quot;); // 获得指定公有属性字段 Field field1 = class1.getField(&quot;hobby&quot;); // 给指定的公有属性赋值 Person p = (Person) class1.newInstance();// p.hobby =&quot;reading book&quot;; //通过普通的对象.属性的方法来给对象的属性赋值 field1.set(p, &quot;reading book&quot;); System.out.println(p); &#125; /** * * 测试私有属性 * @throws Exception **/ public static void privateDemoTest() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class2 = Class.forName(&quot;JavaReflect.Person&quot;); // 获得指定私有属性字段（注意这里需要注释掉该字段对应的getter和setter方法） Field field2 = class2.getDeclaredField(&quot;name&quot;); //先实例化一个对象 Person person =(Person)class2.newInstance(); //给指定的私有属性赋值（操作属性）: //1、这里必须先要设置是否可以操作 field2.setAccessible(true); //2、给对应的属性赋值 field2.set(person,&quot;小白&quot;); //3、获取对应的属性值 Object obj =field2.get(person); System.out.println(obj); System.out.println(&quot;**************************&quot;); System.out.println(person); &#125; public static void main(String[] args) &#123; try &#123; FieldTest.publicDemoTest(); FieldTest.privateDemoTest(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;//输出结果Person [name=null, sex=null, hobby=reading book]小白**************************Person [name=小白, sex=null, hobby=null] Method类Method：提供关于类或者接口上的单独某个方法的信息。Method类代表某个类中的一个成员方法Method对象的获得方法： 如果你想获得所有的（非私有）方法，那么你可以调用它的getMethods()方法； 如果你想获得所有的（含私有）方法，那么你可以调用它getDeclaredMethods()方法； 如果你想获得指定的（非私有）方法，那么你可以调用它的getMethod()方法；（常用） 如果你想获得指定的（含私有）方法，那么你可以调用它的getDeclaredMethod()方法；（常用） 得到了方法，那么如何执行方法呢？我们可以通过反射来执行方法：invoke(Object obj,Object….args) 我们依旧通过测试来完成相关信息的输出，在前面的Person类中新增两个方法：1234567private void run() &#123; System.out.println(&quot;跑步......&quot;);&#125;private String wacthTv(String name) &#123; return &quot;我在看&quot; + name + &quot;电视节目&quot;;&#125; 接着新建一个测试类MethodTest： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980package JavaReflect;import java.lang.reflect.Method;public class MethodTest &#123; /** * 测试公有方法 * * @throws ClassNotFoundException */ public static void demoOne() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class1 = Class.forName(&quot;JavaReflect.Person&quot;); // 实例化对象 Person person1 = (Person) class1.newInstance(); // 获得公有方法 Method method = class1.getMethod(&quot;eat&quot;); // 执行该方法 method.invoke(person1); // 这里就相当于person.eat() &#125; /** * 测试私有方法 * * @throws Exception **/ public static void demoTwo() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class2 = Class.forName(&quot;JavaReflect.Person&quot;); // 实例化对象 Person person2 = (Person) class2.newInstance(); // 获得私有方法 Method method = class2.getDeclaredMethod(&quot;run&quot;); // 设置私有的访问权限 method.setAccessible(true); // 执行该方法 method.invoke(person2); &#125; /** * 测试私有方法（带参数） * * @throws Exception **/ public static void demoThree() throws Exception &#123; // 获得类的字节码文件对应的对象 Class class3 = Class.forName(&quot;JavaReflect.Person&quot;); // 实例化对象 Person person3 = (Person) class3.newInstance(); // 获得带参数的私有方法 Method method = class3.getDeclaredMethod(&quot;wacthTv&quot;, String.class); //设置私有的访问权限 method.setAccessible(true); //执行该方法// method.invoke(person3, &quot;新闻联播&quot;); Object obj =method.invoke(person3, &quot;新闻联播&quot;); System.out.println(obj); &#125; public static void main(String[] args) &#123; try &#123; MethodTest.demoOne(); MethodTest.demoTwo(); MethodTest.demoThree(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125;//输出信息吃东西......跑步......我在看新闻联播电视节目 上面我们测试了3种情况，分别是公有方法，私有方法，以及私有的带参数的方法。 总结一下1、什么是Java的反射机制？Java的反射机制是在运行状态中，对于任意一个类，都能够知道这个类的属性和方法；对于任意一个对象，都能够调用它的任意属性和方法；这种动态获取信息以及动态调用对象方法的功能称之为Java的反射机制。 2、Java的反射机制的作用？是用来编写一些通用性较高的代码或者框架的时候使用。","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（七）：输入输出流和集合","slug":"关于JAVA你必须知道的那些事（七）：输入输出流和集合","date":"2018-08-04T13:32:02.000Z","updated":"2019-04-13T13:32:38.131Z","comments":true,"path":"2018/08/04/关于JAVA你必须知道的那些事（七）：输入输出流和集合/","link":"","permalink":"http://blog.licheetools.top/2018/08/04/关于JAVA你必须知道的那些事（七）：输入输出流和集合/","excerpt":"","text":"输入输出流程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。 那么什么是流呢？所谓的流就是指一连串流动的字符，它是以先进先出的方式发送信息的通道。 流分为两种，输出流和输入流： 输出流一般是屏幕，打印机等，用来输出的设备，而输入流则是键盘或者扫描仪等设备。 数据源（键盘）将数据放到字符流中，然后程序通过read（读操作）进行读取。 也就是说文件输入是读，文件输出是写。 File类File就是文件，它可认为是相关记录或放在一起的数据的集合，在Java中，我们使用java.io.File类对文件迸行操作。可以点击这里查看api文档：javase8 api 需要注意的是，Windows中的目录分隔符为反斜杠“\\”，而Linux的目录中的分隔符则是斜杠“/”。 eclipse的快速导包快捷键为ctrl+shift+o。 1234567// 创建File对象的三种方式File file1 =new File(&quot;F:\\\\JAVA\\\\javatest\\\\io\\\\score.txt&quot;); //方法一 File file1 =new File(&quot;F:\\\\JAVA&quot;,&quot;\\\\javatest\\\\io\\\\score.txt&quot;); //方法二 File file =new File(&quot;F:\\\\JAVA&quot;);File file1 =new File(file ,&quot;\\\\javatest\\\\io\\\\score&quot;); //方法三 下面介绍一些常见的方法：12345678isDirectory()：判断是否是目录isFile()：判断是否是文件exists()：判断是否存在mkdir()：创建一级目录mkdirs()：创建多级目录createNewFile()：创建新的文件canRead()：是否可读canWrite()：是否可写 字节流字节分为两种：字节输入流 InputStream和字节输出流 OutputStream，我从网上找了两张图片，大家可以看一下： FileInputStream文件输入流FileInputStream文件输入流有几个作用： 1、就是从文件系统中的某个文件中获得输入字节。 举个简单的例子，复制就是把原来文件的信息进行读取的操作，然后粘贴就是把读取的信息进行写入的操作； 2、用于读取图像数据之类的原始字节流。 方法名 描述 备注 public int read() 从输入流中读取一个数据字节 public int read(byte[] b) 从输入流中将最多b.length个字节的数据读入一个byte数组中 public int read(byte[] b,int off, int len) 从输入流中将最多len个字节的数据读入byte数组中 public void close() 关闭此文件输入流并释放与此流有关的所有系统资源 注意：如果int的返回值为-1，则表示已经读到了文件的末尾。1234567891011121314151617181920212223242526272829303132package JavaIO;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;public class FileDemoInputStreamOne &#123;public static void main(String[] args) &#123; // 创建一个FileInputStream try &#123; FileInputStream files =new FileInputStream(&quot;F:\\\\JAVA\\\\javatest\\\\io\\\\score.txt&quot;);// int n = files.read(); // 只能读取第一个数据字节// while(n!=-1) &#123;// System.out.print((char)n);// n =files.read();// &#125;; int n =0; while((n=files.read())!=-1) &#123; System.out.print((char)n); &#125;; files.close(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;catch(IOException e) &#123; e.printStackTrace(); &#125;; 再来看一个字节数组的例子：123456789101112131415161718192021222324252627package JavaIO;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;public class FileDemoInputStreamTwo &#123; public static void main(String[] args) &#123; // 创建一个FileInputStream try &#123; FileInputStream files = new FileInputStream(&quot;F:\\\\JAVA\\\\javatest\\\\io\\\\score.txt&quot;); byte [] b =new byte[100]; files.read(b,0,5); //后面2个是偏移量，0表示从开始读取，而5代表存取的字节的长度 System.out.println(new String(b)); files.close(); &#125; catch (FileNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; ; &#125;&#125; FileOutputStream文件输出流上面我们说完了FileInputStream文件输入流，接下来说文件输出流FileOutputStream： 方法名 描述 备注 public void write(int b) 将指定字节写入此文件输出流 public void write(byte[] b) 将b.length个字节从指定byte数组写入此文件输出流中 public void write(byte[] b,int off,int len) 将指定byte数组中从偏移量off开始的len个字节写入此文件输出流 public void close() 关闭此文件输出流并释放与此流有关的所有系统资源 注意：在上面的方法里面都有一个默认参数为append（追加的意思），但是默认为空白（False也就是覆盖的意思），如果你设为True那么就是后面追加，会保留原来的信息。 上面的方法是不是和前面输入流很相似，是的这就是一个互逆的过程。 不过还有一个问题就是很容易发生编码错误，所以你会发现字节流其实不是很容易适合做字符相关的操作，适合做二进制数据相关的操作。但是却是非常适合文件的复制，粘贴。 缓冲流我们之前的文件读写都是直接从硬盘上读取的，其实这种方式读取非常慢的；而我们现在要说的缓冲流这表明我们可以从内存中进行读取。 缓冲流包括：缓冲输入流BufferedInputStream和缓冲输出流BufferedOutputStream 缓冲输入流是不能直接直接读取文件系统中的数据的，它必须要和文件输入流进行结合。 缓冲区满了，会自动清空；不满则需要强制清空（你可以调用flush或者close方法）。 有时候我们会比较程序的运行时间，这时候我们可以使用：1long startTime =System.currentTimeMillis(); //获取当前的时间-1970年1月1日最后就是运行时间 字符流同样字符流也分为两种：字符输入流Reader和字符输出流 Writer 字节流和字符流它们主要的区别就是应用的场景不一样：java 字节流与字符流的区别 我网上找了2张图片，大家看一下关于字符流相关的信息： 字节字符转换流接下我们来谈谈字节字符转换流，顾名思义就是供字节字符转换用的（两者过渡的桥梁）：InputStreamReader和OutputStreamWriter：掌握OutputStreamWriter和InputStreamReader类的作用 对象序列化序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。简单点说就是把java对象转换为字节序列的过程。反序列就是和它相反的过程。 序列化步骤：1、创建一个类，然后实现Serializable接口；2、创建对象：将对象写入文件；3、从文件读取对象信息这个过程会涉及到两个流：对象输入流ObjectInputStream 和 对象输出流ObjectOutputStream Java基础学习总结——Java对象的序列化和反序列化 Java对象的序列化与反序列化 集合在前面我们好像有介绍过数组（又好像没有，不管了），我们知道数组用于固定长度的数据场景，而集合更适合数据动态变化的场景。 或者说集合更加适合应用于下列场景:1、无法预测存储数据的数量；2、同时存储具有一对一关系的数据(商品信息&amp;详情或者学生&amp;学号等)；3、需要进行数据的增删；4、数据不允许重复等 集合框架的体系结构集合框架一共分为两类：Collection和Map。其中Collection用于存储类的对象，而Map用于以键值对的形式来存储信息。 为了更好的理解，我从网上找了一张图片： Collection这个类下面有3个子接口，分别是List（序列），Queue（队列），Set（集）。其中，List（序列），Queue（队列）中存放的数据必须是有序的，并且是允许重复的；Set（集）存放的数据是无序的，且不允许重复的。每个接口下面又有许多的实现类。List的实例类是ArrayList（可以看做一个长度动态增长的数组）。Queue的实现类是LinkedList（它实现了List和Queue，也就是链表）。Set的实现类是HashSet，也就是哈希集。 Map这个类可以实现的类有HashMap，也就是哈希表。 List(列表)List：是元素有序并且可以重复的集合，称为序列或者列表。 List可以精确控制每个元素的插入位置或删除某个位置的元素。 List的两个主要实现类是ArrayList和LinkedList。这里我们主要介绍ArrayList类，因为这个类使用比较多。其实ArrayList和数组是比较相似的，只是它的长度可以动态增长，它其实也是内存上一片连续的存储空间进行存储。而LinkedList本身是一个链表，这两个中方法的作用是几乎相同的。 ArrayList底层是由数组实现的，它的长度是可以动态增长的，用来满足应用程序的需求。如果你要在在列表尾部插入或删除数据，那么使用ArrayList是非常有效的(如果中间插入或者删除会过多挪位，并不适合)。当然它还更适合查找和更新元素，最重要的一点就是ArrayList中的元素可以为null值。 我们即将要将的Collection都是存放于java.util 包中的，所以在使用的时候需要我们自己进行包的导入。 下面简单介绍List接口中几种常用的方法，以便于大家在用的时候得心用手： add()：向列表末尾添加元素；clear()：清空列表中元素；contains()：判断列表中是否包含指定的对象。 get()：返回此列表中指定位置的元素； indexOf ()：返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。 isEmpty() ：集合是否为空，空返回true； iterator ()：以正确的顺序返回该列表中的元素的迭代器；remove()：删除该列表中指定位置的元素；size()：返回此列表中的元素数；sort()：对列表进行排序。 接下来我们来看ArrayList这个类，你会发现它的方法其实和我们List这个接口的方法非常类似。其中ArrayList()是它的无参构造方法：构造一个初始容量为十的空列表；ArrayList(Collection &lt;? extends E&gt; c)是它的有参构造方法，它可以通过已存在的Collection来构造ArrayList。 记住列表的索引号是从零开始的，这一点很重要，需要特别注意。 我觉得学语言很多时候就得多看Api文档，这对自己自身能力的提高非常有帮助。 ArrayList案例分析双十一的时候，很多网站都会在其首页发布一些打折的消息，我们现在的任务就是模拟这个场景，要求如下：1、添加和显示信息；2、在指定位置处插入信息；3、删除消息；4、修改消息。条件：编号 id，标题 title，创建人 creator，创建时间 createTime。 博主是一个重度的Python爱好者，所以这些要求刚写的时候，就已经想到如何用Python中的list去实现相关功能了。所以，如果你也喜欢Python不妨来交流学习。 好了，有点跑题了，你自己先尝试通过查看api文档的方式，看看自己能否独立实现这些要求，之后再来查看结果吧。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package JavaCollectionTest;import java.util.Date;public class Notice &#123; //公告的添加和显示;在指定位置处插入公告;删除公告;修改公告 // 编号 id;标题 title;创建人 creator;创建时间 createTime private int id; private String title; private String create; private Date createTime; public Notice() &#123;&#125;; public Notice(int id, String title, String create, Date createTime) &#123; super(); this.id = id; this.title = title; this.create = create; this.createTime = createTime; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getCreate() &#123; return create; &#125; public void setCreate(String create) &#123; this.create = create; &#125; public Date getCreateTime() &#123; return createTime; &#125; public void setCreateTime(Date createTime) &#123; this.createTime = createTime; &#125;&#125; 我们再来看这个类的测试类：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package JavaCollectionTest;import java.util.ArrayList;import java.util.Date;public class NoticeTest &#123;public static void main(String[] args) &#123; // 创建Notice类的对象，我们先实例化3条信息 Notice notice1 =new Notice(1,&quot;欢迎来到啃饼小白的修炼之旅&quot;,&quot;啃饼小白&quot;,new Date()); Notice notice2 =new Notice(2,&quot;欢迎来到java的世界&quot;,&quot;管理员&quot;,new Date()); Notice notice3 =new Notice(3,&quot;世界那么大，我想出去看看&quot;,&quot;思录者&quot;,new Date()); // 将消息添加到ArrayList里面 ArrayList noticelist =new ArrayList(); noticelist.add(notice1); // 默认为末尾添加 noticelist.add(notice2); noticelist.add(notice3); // 消息的显示 System.out.println(&quot;消息的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;; System.out.println(&quot;****************************************************&quot;); // 在第一条消息后面添加一条消息 Notice notice4 =new Notice(4,&quot;努力与运动兼备&quot;,&quot;拾光小白&quot;,new Date()); noticelist.add(1,notice4); System.out.println(&quot;添加完消息以后的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;; System.out.println(&quot;****************************************************&quot;); // 删除编号为3的消息：欢迎来到java的世界// noticelist.remove(2); noticelist.remove(notice2); System.out.println(&quot;删除消息以后的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;; System.out.println(&quot;****************************************************&quot;); // 修改编号为3的消息：世界那么大，我想出去看看，中的我修改为你 notice3.setTitle(&quot;世界那么大，你想出去看看&quot;); System.out.println(&quot;修改消息以后的内容为：&quot;); for(int i=0;i&lt;noticelist.size();i++) &#123; System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle()); &#125;;&#125;&#125; 接下来我们来介绍集合中的另一个set。 set(集)Set是元素无序且不可以重复的集合，被称为集。而我们上面刚介绍的列表则是有序且重复的，这一点要弄清楚。 set是一个接口，而它的实现类是HashSet（哈希集）。哈希集中的元素是无序且不可以重复的。而且在HashSet中，只允许有一个null元素因此它具有良好的存取和查找性能。 由于HashSet中的方法和前面介绍的ArrayList中的差不多，因此这里就不再过多的介绍其方法了，而是直接通过一个例子来进行具体方法的使用： 不过在这之前，我需要告诉你的是hashset里面是没有提供用于元素输出的get()方法，但是呢，它提供了一个iterator()方法，用于对集合元素进行遍历。 Iterator (迭代器): Iterator接口可以以统一的方式对各种集合元素进行遍历。记住这个Iterator (迭代器)是存在于java.util包里面的。 迭代器有2个方法：hasNext()和next()。其中hasNext()方法用于检测集合中是否还有下一个元素，这个是遍历的终止条件；而另一个next()方法是用于返回集合中的下一个元素。 要求：用HashSet存储多个表示颜色的英文单词,并输出。其中单词包括: “blue”,”red”,”black”,”yellow”和”white”。1234567891011121314151617181920212223package JavaCollectionTest;import java.util.HashSet;import java.util.Iterator;public class HashSetDemo1 &#123;public static void main(String[] args) &#123; // 将英文单词添加到HashSet当中, &quot;blue&quot;,&quot;red&quot;,&quot;black&quot;,&quot;yellow&quot;和&quot;white&quot; HashSet hset =new HashSet(); hset.add(&quot;red&quot;); hset.add(&quot;blue&quot;); hset.add(&quot;black&quot;); hset.add(&quot;yellow&quot;); hset.add(&quot;white&quot;); System.out.println(&quot;集合中的元素为：&quot;); Iterator it =hset.iterator(); // 遍历迭代器并进行输出 while(it.hasNext()) &#123; System.out.print(it.next()+&quot;,&quot;); &#125;&#125;&#125; 现在有一个问题，如果你把一个已经重复的对象插入到集合里面，会发生什么情况呢？答案是不会报错，可以运行，但是你会发现其实你根本插入不进去。是的，集合就是这样。 我们现在又来举一个例子，这个例子会让你对上面的介绍生产模糊，但这是必要的： 案例：如何在HashSet中添加自定义类的对象?需求：1、添加和显示宠物猫信息；2、查找某只宠物猫的信息并输出；3、修改宠物猫的信息;删除宠物猫信息 其中属性为: 名字name；年龄month；品种species方法为: 构造方法；获取和设置属性值的方法；其他方法123456789101112131415161718192021222324252627282930313233343536package JavaCollectionTest;public class Cat &#123;private String name;private int month;private String species;public Cat(String name, int month, String species) &#123; super(); this.name = name; this.month = month; this.species = species;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;public int getMonth() &#123; return month;&#125;public void setMonth(int month) &#123; this.month = month;&#125;public String getSpecies() &#123; return species;&#125;public void setSpecies(String species) &#123; this.species = species;&#125;@Overridepublic String toString() &#123; return &quot; 姓名=&quot; + name + &quot;, 年龄=&quot; + month + &quot;, 品种=&quot; + species + &quot;&quot;;&#125;&#125; 以及测试类：1234567891011121314151617181920212223242526272829303132333435363738394041package JavaCollectionTest;import java.util.HashSet;import java.util.Iterator;public class CatTest &#123; public static void main(String[] args) &#123; // 定义宠物猫对象 Cat huahua = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;); Cat fanfan = new Cat(&quot;凡凡&quot;, 10, &quot;英国短毛猫&quot;); // 将对象添加到hashset中 HashSet hset = new HashSet(); hset.add(huahua); hset.add(fanfan); // 显示宠物猫信息 Iterator it = hset.iterator(); while (it.hasNext()) &#123; System.out.println(it.next()); &#125; System.out.println(&quot;*******************************************&quot;); // 添加一个与花花属性一模一样的猫 Cat huahua1 = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;); hset.add(huahua1); Iterator its = hset.iterator(); while (its.hasNext()) &#123; System.out.println(its.next()); &#125; &#125;&#125;// 输出结果： 姓名=花花, 年龄=12, 品种=中华田园猫 姓名=凡凡, 年龄=10, 品种=英国短毛猫******************************************* 姓名=花花, 年龄=12, 品种=中华田园猫 姓名=花花, 年龄=12, 品种=中华田园猫 姓名=凡凡, 年龄=10, 品种=英国短毛猫 你运行上面的代码，你会发现一个有趣的事，你在集合里面竟然添加了一条和花花一模一样的数据，说好的集合不能添加相同的数据，你仿佛在逗我玩？我被欺骗了，宝宝不开心了。。。。。。 其实刚才那句话是适合于字符串的，为什么这么说呢，那是因为字符串是系统提供给我们的类，它里面已经将数据重复的规则，也就是这两个对象是否完全一样（属性，方法等）已经定义好了。这个你可以类比到toString方法，你直接输出对象却是对象在内存中的地址，但是你输出字符串却是字符串的值，这其实也就是字符串里面已经重写了自己的toString方法。 所以呢，如果你也希望自己定义的类也具有相似的功能，那么你需要重写hashCode()和equals()方法。我们知道equals()在字符串中是判断两个对象的值是否相等。在java里面，hashCode是与哈希表有关的，这是数据结构的知识，我这里简单说明一下。 举个例子，假如你要存储100个数字，如果你使用前面ArrayList或者数组来存储，而不是哈希表的话，在内存中连续的开辟一个空间用来存放数据，这似乎是可以的，但是一旦要是查找你就不行了。假设你要查找的数据在第100个位置，又或者说是不存在的，但你还是得从头开始查找，这样太浪费时间了。 那么如何利用哈希表来存储上述数据呢？我们可以这样：在内存中开辟3个区域来进行存放，同时为这3个区域进行编号和命名为桶0，桶1，桶2。然后我们制定一些规则用于桶里面数据的存放，而这些规则就是hashCode。假设我们定义的hashCode为n%3也就是利用数对3进行取余，来进行判断。那么桶0，桶1，桶2存放的数据分别是3的倍数，对3取余数加1，对3取余数加2。 有了这样的存储结构，我们首先是判断这个数是不是在这个桶里，然后是在哪个桶里，然后就去遍历这个桶里的元素。判断元素在哪个桶里，我们使用的是hashCode()方法，而判断桶里哪一个元素是我们要找的，则是使用equals()方法。这种方法真的好快。 下面是系统生成的equals方法，我觉得很麻烦，那么你自己是可以重写的：12345678910111213141516171819202122public boolean equals(Object obj) &#123; if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Cat other = (Cat) obj; if (month != other.month) return false; if (name == null) &#123; if (other.name != null) return false; &#125; else if (!name.equals(other.name)) return false; if (species == null) &#123; if (other.species != null) return false; &#125; else if (!species.equals(other.species)) return false; return true;&#125; 重写后的equals方法是：12345678910public boolean equals(Object obj) &#123; if(this==obj) // 判断对象是否相等，相等则返回true，没必要继续比较属性 return true; if (obj.getClass()==Cat.class) // 判断obj是否是Cat类的对象，是进行强制转换，进行对象属性的比较 &#123; Cat cat = (Cat)obj; return (cat.getName().equals(name))&amp;&amp;(cat.getMonth()==month)&amp;&amp;(cat.getSpecies().equals(species)); &#125; return false;&#125; 重写了这两个方法以后，现在你再来运行我们的测试类，你会发现花花这个重复对象是不能再次添加进去了。 现在我们想查找花花的信息，我们有多种方式，第一种是通过花花这个对象：1234567// 在集合里面查找花花的信息并进行输出 if(hset.contains(huahua)) &#123; System.out.println(&quot;花花找到了&quot;); System.out.println(huahua); &#125;else &#123; System.out.println(&quot;对不起，花花没有找到&quot;); &#125; 第二种是通过花花的名字来查找花花的信息并进行输出：12345678910111213141516171819// 在集合里面使用名字来查找花花的信息并进行输出 boolean flag =false; its = hset.iterator(); Cat cat =null ; while(its.hasNext()) &#123; // 判断是否有下一个对象 cat=(Cat)its.next(); // 输出下一个对象的信息 if(cat.getName().equals(&quot;花花&quot;)) &#123; flag =true; break; &#125; &#125; if(flag) &#123; System.out.println(&quot;花花找到了&quot;); System.out.println(cat); &#125;else &#123; System.out.println(&quot;花花没有找到&quot;); &#125; &#125; 说完了hsahset，接下来我们来聊聊map的那些事。 MapMap中的数据是以键值对( key-value )的形式存储的，这个和Python中的dict（字典）很相似。 key-value以Entry类型的对象实例存在，而MAp.Entry本身也是一个接口；你可以通过key值来快速地查找value的值。 一个key-value的映射不能包含重复的键（Key的值必须是唯一的），但是Value是可以重复的。每个键最多只能映射到一个值。 同样这个Map接口中最常用的实现类是HashMap类，我们前面说过HashSet是基于HashMap而实现的。 HashMap是基于哈希表的Map接口的实现，它允许使用null值和null键（但是只能有一个） key值不允许重复，HashMap中的Entry对象是无序排列的。 Map接口，HashSet 泛型有一个类，Map&lt;&gt;后可以有key的类型以及Value的类型。 entrySet获取键值对所有的内容，你可以通过get(key)取Value。keySet取出所有key值。HashMap中使用put添加元素，remove根据key值来移除元素。 HashMap中构造方法，默认容量16，加载因,0.75 ；你可以使用已存在map集合创建HashMap。 关于这一块，大家还是多看看api文档，多自己动手操作吧。 需求：完成一个类似字典的功能：1、将单词以及单词的注释存储到HashMap中；2、显示HashMap中的内容；3、查找某个单词的注释并显示。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package JavaCollectionTest;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Scanner;import java.util.Set;public class DictionaryDemoTest &#123;public static void main(String[] args) &#123; Map&lt;String,String&gt; animal =new HashMap&lt;String,String&gt;(); System.out.println(&quot;请输入三组单词对应的注释，并存放到HashMap当中：&quot;); Scanner console =new Scanner(System.in); int i=0; while(i&lt;3) &#123; System.out.println(&quot;请输入key值(单词)：&quot;); String key =console.next(); System.out.println(&quot;请输入value值(注释)：&quot;); String value =console.next(); animal.put(key, value); i++; &#125; // 打印输出value的值（使用迭代器） System.out.println(&quot;*************************&quot;); System.out.println(&quot;使用迭代器输出所有的value的值：&quot;); Iterator&lt;String&gt; it =animal.values().iterator(); while(it.hasNext()) &#123; System.out.print(it.next()+&quot; &quot;); &#125; System.out.println(&quot;*************************&quot;); // 打印输出key和value的值 // 通过entrySet方法得到key-value System.out.println(&quot;通过entrySet方法得到key-value：&quot;); Set&lt;Entry&lt;String,String&gt;&gt; entrySet =animal.entrySet();// 使用增强型for循环进行遍历 for(Entry&lt;String,String&gt; entryset:entrySet) &#123; System.out.print(entryset.getKey()+&quot;-&quot;); System.out.println(entryset.getValue()); &#125; System.out.println(); System.out.println(&quot;*************************&quot;); // 通过单词找到注释并输出 // 使用KeySet方法 System.out.println(&quot;请输入你要查找的key(单词)&quot;); String keySearch =console.next(); // 1、取得KeySet Set&lt;String&gt; KeySet =animal.keySet(); //2、遍历KeySet boolean flag =false; for(String key:KeySet) &#123; if(key.equals(keySearch)) &#123; System.out.println(&quot;找到了&quot;+&quot;键值对为：&quot;+key+&quot;-&quot;+animal.get(key)); flag=true; break; &#125; &#125; if(!flag) &#123; System.out.println(&quot;对不起，没有找到&quot;); &#125;&#125;&#125; 最后，我们再来看一个例子：商品信息管理的HashMap实例。 需求：使用HashMap対商品信息迸行管理：其中key是商品编号, value是商品对象；你需要对HashMap中的商品信息迸行増、刪、改、査操作。 要求：分析商品信息类:属性：商品编号: id；商品名称: name；商品价格: price方法：构造方法，获取和设置属性值的方法和其他方法。 123456789101112131415161718192021222324252627282930313233343536373839package JavaCollectionTest;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Scanner;import java.util.Set;public class GoodsTest &#123; public static void main(String[] args) &#123; Scanner console = new Scanner(System.in);// 定义HashMap对象 Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;(); System.out.println(&quot;请输入三条商品信息:&quot;); int i = 0; while (i &lt; 3) &#123; System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;); System.out.println(&quot;请输入商品的编号:&quot;); String goodsId = console.next(); System.out.println(&quot;请输入商品的名称:&quot;); String goodsName = console.next(); System.out.println(&quot;请输入商品的价格:&quot;); float goodsPrice = console.nextFloat(); // 将商品信息添加到HashMap当中 Goods goods = new Goods(goodsId, goodsName, goodsPrice); goodsMap.put(goodsId, goods); i++; &#125; // 遍历HashMap并输出商品的信息 System.out.println(&quot;输出商品的全部信息:&quot;); Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator(); while(itGoods.hasNext()) &#123; System.out.println(itGoods.next()); &#125; &#125;&#125; 这是初始的代码，这个代码尽管能运行，但是实际上运行的问题还是很多的：商品编号不可以重复（后面对前面的信息进行了覆盖）；类型输入错误。接下来我们就对这些进行修改：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package JavaCollectionTest;import java.util.HashMap;import java.util.InputMismatchException;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import java.util.Scanner;import java.util.Set;public class GoodsTest &#123; public static void main(String[] args) &#123; Scanner console = new Scanner(System.in);// 定义HashMap对象 Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;(); System.out.println(&quot;请输入三条商品信息:&quot;); int i = 0; while (i &lt; 3) &#123; System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;); System.out.println(&quot;请输入商品的编号:&quot;); String goodsId = console.next(); // 判断商品编号id是否存在 if(goodsMap.containsKey(goodsId)) &#123; System.out.println(&quot;该商品编号已经存在，请重新输入&quot;); continue; &#125; System.out.println(&quot;请输入商品的名称:&quot;); String goodsName = console.next(); float goodsPrice = 0; System.out.println(&quot;请输入商品的价格:&quot;); try &#123; goodsPrice = console.nextFloat(); &#125;catch(InputMismatchException e) &#123; System.out.println(&quot;商品价格的格式不准确，请输入数值型数据&quot;); console.next(); continue; &#125; // 将商品信息添加到HashMap当中 Goods goods = new Goods(goodsId, goodsName, goodsPrice); goodsMap.put(goodsId, goods); i++; &#125; // 遍历HashMap并输出商品的信息 System.out.println(&quot;输出商品的全部信息:&quot;); Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator(); while(itGoods.hasNext()) &#123; System.out.println(itGoods.next()); &#125; &#125;&#125; 总结 我们通过这张图片，来简单的对集合进行一下总结。 我们知道Collection这个接口是有3个实现接口的，list，queue和set，而每个接口下面都有其实现的类。 Arraylist：底层由数组实现，它的元素是有序且可以重复的，它可以动态增长，以满足应用程序的需求。值得注意的是，ArrayList的元素值可以为null。 HashSet：是Set接口的实现类，它的元素是无序且不可以重复的，不过只允许一个null元素 HashMap：以键值对存储的数据，里面的键不能重复，但是允许使用null值和null键 。HashMap中的Entry对象(键值对)是无序排列的。 也就是说上面3个只有第一个是有序的，其它两个都是无序的。 Iterator (迭代器) ：Iterator接口以统一的方式对各种集合元素进行遍历。12345Iterator&lt;String&gt; it=set.iterator();while(it.hasNext())&#123; // 判断迭代器下一个是否有内容 System.out.print(it.next()+&quot; &quot;); // 取出存在的数据&#125; 我们在String对象比较的是按照ASCII值进行对比的，如果要比较我们自己定义的类呢？就必须重写我们的hashCode()方法和equals方法。如果两者的hashCode不同，那肯定不是一个对象，后面不需要使用equals方法；如果hashCode相同，我们再去调用equals方法，比较对象的其他属性或方法是否相同。 本来这里应该介绍泛型的，但是考虑到篇幅的原因，下次再介绍。","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（六）：包装类和多线程","slug":"关于JAVA你必须知道的那些事（六）：包装类和多线程","date":"2018-08-04T13:30:42.000Z","updated":"2019-04-13T13:31:19.921Z","comments":true,"path":"2018/08/04/关于JAVA你必须知道的那些事（六）：包装类和多线程/","link":"","permalink":"http://blog.licheetools.top/2018/08/04/关于JAVA你必须知道的那些事（六）：包装类和多线程/","excerpt":"","text":"我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。 那么我们如何让它和我们的对象一样，具有属性和方法呢？这里你就要用到包装类了。 包装类的产生就是为了解决基本数据类型存在的上述问题。通过包装类可以让基本数据类型获取对象一样的特征，拥有属性方法，行使对象一样的权益，从而完成对象化交互。 包装类与基本数据类型之间的对应关系，见下面的表格：基本数据类型| 对应的包装类| 说明 | :-: |-:byte| Byte|原始大写short |Short|原始大写int |Integer|变形long| Long|原始大写float |Float|原始大写double| Double|原始大写char |Character|变形boolean |Boolean|原始大写注意：只有int 和char其基本数据类型与对应的包装类有一个变形以外，其余的都是其首字母的大写而已。 所有的包装类都存在于java.lang中，而且都是被final关键字所修饰，也就是说所有的包装类是没有子类的，不可以被继承的。 所有的数值型（byte,short,int,long,float,double,）都是继承自Number的： 余下的char 和 boolean是继承Object类的： 基本数据类型和包装型之间的转换基本数据类型—–》包装型（装箱）；包装型—–》基本数据类型（拆箱）； 装箱装箱：把基本数据类型转换成包装类，有自动装箱和手动装箱两种，下面分别说明：123456789101112131415// 自动装箱 int a1 =1;Integer a2=a1; // 手动装箱Integer a3 =new Integer(a1);System.out.println(&quot;基本数据类型a1的值是：&quot;+a1);System.out.println(&quot;Integer类a2的值是：&quot;+a2);System.out.println(&quot;Integer类a3的值是：&quot;+a3);//输出结果：基本数据类型a1的值是：1Integer类a2的值是：1Integer类a3的值是：1 拆箱拆箱：把包装类转换成基本数据类型，也有自动拆箱和手动拆箱两种，下面分别说明：1234567891011121314151617181920// 自动拆箱 int a4 = a1;// 手动拆箱Integer a5 = a3.intValue(); // 测试System.out.println(&quot;Interger：&quot; + a1);System.out.println(&quot;基本数据类型a4是：&quot; + a4);System.out.println(&quot;手动intValue：&quot; + a5); double a6 = a2.doubleValue();System.out.println(&quot;手动拆箱 double: &quot;+a6);//输出结果：Interger：1基本数据类型a4是：1手动intValue：1手动拆箱 double: 1.0 基本数据类型和字符串之间的转换12345678910111213141516171819// 基本数据类型转换为字符串 // 将整型转换为字符串int a1 =9;String a2 =Integer.toString(a1); //测试System.out.println(&quot;int类型转换为String类型对象a2的值：&quot;+a2);System.out.println(&quot;******************************&quot;); //字符串转换为基本数据类型// 1、包装类的parse方法int a3 =Integer.parseInt(a2); //2、包装类的valueOf方法，现将字符串转换为包装类，再通过自动拆箱完成基本数据类型的转换int a4 =Integer.valueOf(a2);System.out.println(&quot;String类型对象转换为int类型a3的值：&quot;+a3);System.out.println(&quot;String类型对象转换为int类型a4的值：&quot;+a4); 总结一下，你可以通过toString方法将基本数据类型转换为字符串。 同样可以通过Parse和valueOf将字符串转换为基本数据类型。需要注意的是，valueOf是对Parse的封装。 包装类的几点说明我们前面好像有说过基本数据类型的默认值，这里重新贴一下： 基本数据类型 默认值 说明 byte 0 short 0 int 0 long 0L float 0.0f double 0.0d char ‘\\u0000’ \\u是指Unicode编码 boolean false 那么现在问题来了，我们定义一个Integer类型的对象one ,它的初始值是不是也是0呢?答案不是0,而是null，因为此时Integer和String一样，都是类，其初始值为null。 包装类的对象信息我们先来看一段代码，你先试着猜一下它的运行结果，然后参看输出结果，看看有什么体会：12345678910111213141516171819202122public class ChangLiangTest &#123;public static void main(String[] args) &#123; Integer one =new Integer(100); Integer two =new Integer(100); System.out.println(&quot;one==two的结果：&quot;+(one==two)); //1 Integer three =100; System.out.println(&quot;three==100的结果：&quot;+(three==100)); //2 Integer four =100; System.out.println(&quot;three==four的结果：&quot;+(three==four)); //3 Integer five =200; System.out.println(&quot;five==200的结果：&quot;+(five==200)); //4 Integer six =200; System.out.println(&quot;five==six的结果：&quot;+(five==six)); //5 &#125;&#125; 我们在前面说过，使用new关键词就是直接在内存中开辟一个新的空间，one和two 只是值相等，内存中地址的引用并不相同，因此1输出的结果必然是false。 Integer three =100其实是自动装箱，而后面的three =100其实是自动拆箱，实际上执行的是Integer three =Integer.valueOf(100)，最后比较的则是2个int类型的值是否相等，因此结果必然为true。 前面说过Integer four =100是自动装箱，但是它实际上执行的是Integer four=nteger.valueOf(100);。而valueOf会自动缓存值（在缓存区或者说对象池里面），也就是说当-128&lt;参数&lt;127的时候，该参数会直接从缓存区获取。因此两者比较的是来自缓存区的同一块地址。显然该结果是true。 同样Integer five =200是自动装箱，后面five==200自动拆箱，因此这里比较的则是2个int类型的值是否相等。显然该结果是true。 而最后一个则是因为参数200，它已经超出-128&lt;参数&lt;127这个范围，因此会直接实例化new 一个Integer，所以比较的是两个内存中的对象，显然结果是false。 123456// 输出结果：one==two的结果：falsethree==100的结果：truethree==four的结果：truefive==200的结果：truefive==six的结果：false 也就是说，当参数在-128 到 128之间才能从对象池中进行获取，超出则是不可以的，需要new了。 在java基本数据类型的包装类中除了 float 和 double都是可以应用对象常量池概念的。 上面那样说你可能还不明白，我举个例子：12345Double d1 =Double.valueOf(100);System.out.println(&quot;d1==100的结果是：&quot;+(d1==100)); //1Double d2 =Double.valueOf(100);System.out.println(&quot;d1==d2的结果是：&quot;+(d1==d2)); //2 1的输出结果为true这是没有任何问题的，但是2的输出结果是false，因为float 和 double是不适用于对象常量池的。 多线程在说多线程之前，我么先来了解什么是进程？ 进程就是可执行程序并存放在计算机存储器的一个指令序列，它是一个动态执行的过程。 线程是比进程还要小的运行单位，一个进程包含多个线程，你可以把线程看做一个子程序。 我们知道程序的运行是靠CPU的，那么在只有一个CPU情况下，如何才能保证程序的正常运行呢？我们可以把CPU的运行时间进行分片，根据时间片来进行任务的轮转执行，但由于时间片的长度太短了，以至于我们认为所有任务都是同时进行的。 Thread和Runnable接口介绍如何进行线程的创建呢？在Java里面，你可以通过创建一个Thread类或者一个Thread子类的对象来创建线程。也可以创建一个实现Runnable接口的类的对象。这两种都是可以的。 Thread是-个线程类，位于java.lang包下面，你可以去api文档进行查看，这里列举部分构造方法：构造方法 | 说明| 备注 | :-: | -:Thread()| 创建一个线程对象|Thread(String name) |创建一个具有指定名称的线程对象|Thread(Runnable target) |创建一个基于Runnable接口实现类的线程对象|Thread(Runnable target,String name)| 创建一个基于Runnable接口实现类,并且具有指定名称的线程对象。| 以及Thread类的常用方法：方法 | 说明| 备注 | :-: | -:public void run() |线程相关的代码写在该方法中，一般需要重写public void start() |启动线程的方法public static void sleep(long m) |线程休眠m毫秒的方法public void join() |优先执行调用join()方法的线程 你只需要记住，我们所有线程实现的代码都必须放在run方法里面，自然run方法中的代码被称为线程体。 还需要注意的是Runnable接口，它只有一个方法run()方法。你只需要记住Runnable是Java中用以实现线程的接口，任何实现线程功能的类都必须实现Runnable接口。 你可以点击这里查看Java8 api，获取更多信息。 通过Thread类创建线程在api里面，我们知道通过Thread类是可以创建线程的。那么我们现在就来通过继承Thread类的方式创建线程类，并重写run()方法。123456789101112public class ThreadTestDemo extends Thread &#123;public void run() &#123; System.out.println(getName()+&quot;该线程正在执行！&quot;);&#125;;public static void main(String[] args) &#123;// System.out.println(&quot;主线程1正在执行&quot;); ThreadTestDemo ttd =new ThreadTestDemo();// ttd.start(); // 启动线程 ttd.start(); //线程只能启动一次，不能多次启动// System.out.println(&quot;主线程2正在执行&quot;);&#125;&#125; 大家知道除了我们刚才自定义的线程，其实还有一个主线程。现在我们自己来定义两个线程：12345678910111213141516171819202122class MyThread extends Thread &#123; public MyThread(String name) &#123; super(name); &#125;; public void run() &#123; for(int i=0;i&lt;10;i++) &#123; System.out.println(getName()+&quot;正在运行第&quot;+i+&quot;次&quot;); &#125;; &#125;;&#125;;public class ThreadTestTwo &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub MyThread t1 =new MyThread(&quot;线程1&quot;); MyThread t2 =new MyThread(&quot;线程2&quot;); t1.start(); t2.start(); &#125;&#125; 这个其实和我们上面的例子差别不是很大，只是现在我们定义了两个线程，但是主线程依然存在。运行一下，你会发现你每次的运行结果都是不相同的。对的，无论是线程还是进程，它们的运行顺序都是由系统来调度的，不是由程序员所能决定的（注意这是没有附加方法的情况，后面会说线程间的通信） 实现Runnable接口创建线程现在你可能有一个疑问，为什么要实现Runnable接口呢又或者说为什么要实现Runnable接口创建线程呢? 答案你肯定知道，因为Java是单继承的，不支持多继承。现在问题来了，如果我现在定义的类已经继承了一个类，那么就不能通过继承Thread类来创建线程了？ 又或者说，我不想重写Thread类的其他方法，只想使用run方法，这时候怎么办呢？ 这时候Runnable接口就派上用场了。（前面说过Runnable接口只有一个run方法） 12345678910111213141516171819202122class TestRunnable implements Runnable&#123; @Override public void run() &#123; // TODO Auto-generated method stub System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;); &#125;&#125;;public class ThreadRunnableTest &#123;public static void main(String[] args) &#123; TestRunnable tr =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t1 =new Thread(tr); t1.start(); TestRunnable tr2 =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t2 =new Thread(tr2); t2.start();&#125;&#125; 这个输出结果也是随机的，但都会输出打印20个线程。现在我们对其修改一下，我们看一下，是不是多个线程可以共享同一个变量（言外之意，是不是只能打印输出11个线程，还有主线程）：12345678910111213141516171819202122232425262728293031323334353637class TestRunnable implements Runnable&#123; int i=0; @Override public void run() &#123; // TODO Auto-generated method stub for(;i&lt;10;i++) &#123; System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;); &#125;; &#125;&#125;;public class ThreadRunnableTest &#123;public static void main(String[] args) &#123; TestRunnable tr =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t1 =new Thread(tr); t1.start(); // TestRunnable tr2 =new TestRunnable();// tr.start(); // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread Thread t2 =new Thread(tr); t2.start();&#125;&#125;#输出结果Thread-0正在运行Thread-1正在运行Thread-0正在运行Thread-1正在运行Thread-1正在运行Thread-0正在运行Thread-0正在运行Thread-0正在运行Thread-1正在运行Thread-0正在运行Thread-1正在运行 结果是的，所以也就是说线程之间是可以共享成员变量的。 线程的状态和生命周期通常而言，线程是有五个状态的，分别是： 新建(New)：创建一个Thread或Thread子类的对象时就会进入新建状态。 可运行(Runnable)： 调用start方法是进入可运行状态（而不是立即执行），就绪状态 正在运行(Running)： 一个Thread获取了cpu使用权就进入了正在运行状态。记住只有可运行状态才能进入到正在运行状态，其他的不可以。 阻塞(Blocked): 不再执行，缺少资源。 终止状态(Dead)：这个就是线程的停止运行了。 所谓的线程的生命周期，说白了就是这五个过程的相互转换而已，不过有些过程是双向的，有些则是单向的。我找了一张图，便于大家的理解： 下面简单说一下这个图的意思： 当你创建线程对象以后，该线程就变成了新建(New)状态，如果该线程调用start()方法，那么就变成了可运行(Runnable)状态；如果该线程调用stop()方法，那么就变成了终止状态(Dead)。 现在线程处于可运行(Runnable)状态，如果此时该线程获取到了cpu的使用权，那么该线程就开心的进入到了正在运行(Running)状态；如果该线程调用了yield()方法，或者是时间片用完了，又回到了可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。 现在线程处于正在运行(Running)状态，如果此时调用join()，wait()，sleep()或者I/O操作时，均会使该线程进入阻塞(Blocked)状态；如果此时该线程正常执行完毕或者异常终止，又或者调用stop()方法，那么就变成了终止状态(Dead)。 现在线程处于阻塞(Blocked)状态，如果此时等待执行join()方法的线程执行完毕；或者调用notify()或notifyall()方法；sleep()超时；I/O请求完成时，线程就会进入可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。 需要说明的是，stop方法已经过时了，并不提倡大家去用。 下面简单介绍几个方法的使用。 sleep方法的使用这个sleep方法是Thread类的一个方法，同时也是一个静态方法：1public static void sleep(long millis) sleep方法的作用是在指定的毫秒数内让正在执行的线程休眠(暂停执行)；其中的参数为休眠时间，单位是毫秒。 也就是说等休眠时间过了以后，程序才会继续执行。当你需要页面刷新或者计时的时候，这时候sleep就派上用场了。 join方法的使用同样这个join方法也是Thread类的一个方法，但它是一个实例方法，因为有final的修饰，因此这个方法是不能被重写的：1public final void join() join方法的作用是等待调用该方法的线程结束后才能执行，是用来抢占资源优先执行的。也就是说如果某个线程调用了这个join方法，那么后面的线程都必须等这个线程运行完成后才能运行。 同时join方法还有一个带参数的同名方法：1public final void join(long millis) 带参数的join()方法的作用是等待该线程终止的最长时间为millis，这个参数的单位是毫秒。 也就是说没有参数的join方法是谁调用了它，它就开始执行，而后面的程序就必须等它执行完毕以后才能继续进行；有参数的join方法就是谁调用了它，在规定的毫秒以内无论你有没有执行完毕，只要时间一过，后面的程序就会开始执行。说白了，这是固定时间等待和永久时间等待而已。 线程优先级现在你有一个想法，就是是否可以通过设置让某个线程优先执行呢?使用前面的join()方法尽管能完成部分要求，但还是想追求更加简单的方法。 这时候Java为线程类提供了10个优先级，优先级用整数1-10表示，超过该数字范围会抛出异常。 我们的主线程默认优先级为5，数字越大表示的优先级越高，当然你还可以使用优先级常量来进行优先级的表示： MAX_PRIORITY :线程的最高优先级10 MIN_PRIORITY :线程的最低优先级1 NORM_PRIORITY :线程的默认优先级5 我们可以使用下面提供的方法来对优先级进行操作： 方法 说明 备注 public int getPriority() 获取线程优先级的方法 public void setPriority(int newPriority) 设置线程优先级的方法 123456789101112131415161718192021222324252627282930313233class MyThreadTestTwo extends Thread&#123; private String name; public MyThreadTestTwo(String name) &#123; this.name =name; &#125;; public void run() &#123; for(int i=0;i&lt;10;i++) &#123; System.out.println(&quot;线程&quot;+name+&quot;正在运行第&quot;+i+&quot;次&quot;); &#125;; &#125;;&#125;;public class ThreadTestFive &#123; public static void main(String[] args) &#123; // 获取主线程的优先级 int mainPriority =Thread.currentThread().getPriority(); System.out.println(&quot;主线程的优先级为：&quot;+mainPriority); MyThreadTestTwo tt1 =new MyThreadTestTwo(&quot;线程1&quot;); MyThreadTestTwo tt2 =new MyThreadTestTwo(&quot;线程2&quot;); tt1.setPriority(10); //这与下面的代码的作用是一样的// tt1.setPriority(Thread.MAX_PRIORITY); tt2.setPriority(1);// tt2.setPriority(Thread.MIN_PRIORITY); tt1.start(); tt2.start();// System.out.println(&quot;主线程1的优先级为：&quot;+tt1.getPriority()); &#125;&#125; 如果你多运行上面的代码，你会发现并不是优先级大的线程先启动和执行。线程的执行和启动顺序，除了和优先级大小有关，还与操作系统调度，当前资源等有很大关系，是具有很强的随机性。 总结一下： 各个线程是通过竞争CPU时间而获得运行机会的； 各线程什么时候得到CPU时间，占用多久，都是不可预测的； 一个正在运行的线程在什么地方被暂停是不确定的。 也就是说到目前为止，我们还没有更好地办法来进行线程执行顺序的调度。 银行存取钱业务如果按照我们前面所说的线程执行顺序是随机的，而且运行的线程在什么地方被暂停是不确定的话（的确，这是真的情况），那么银行就会出现一个非常有意思的现象：你存钱和取钱的总金额会发生丢失的情况：假设你开始银行账户有2000块钱，你取了100，存进去200，余额是不是2100块，但是有可能你的余额是2000块，你的余额更新失败了。这是我们不想看到的情况，但实际上这种情况是存在的，但是银行通过一些方法，杜绝了这种事情的发送，现在我们就来看看这些方法。 为了保证在存款或取款的时候，不允许其他线程对帐户余额进行操作，银行会将操作对象进行锁定，也就是同一时刻只允许一个线程进行运行。 也其实就是使用了synchronized关键字，也就是线程同步。synchronized关键字可以用在：成员方法，静态方法和语句块里面。 123public synchronized void Test()&#123;&#125;public static synchronized void Test()&#123;&#125;synchronized(obj)&#123;......&#125; 使用关键字synchronized可以确保共享对象在同一时刻只能被一个线程访问，这种机制称为线程同步或者线程互斥。 线程间的通信线程间通信的常用方法： wait方法：中断方法的执行，使线程等待。 notify()方法: 唤醒处于等待的某一个线程,使其结束等待 notifyAll()方法: 唤醒所有处于等待的线程,使它们结束等待 建议使用notifyAll()，因为假如唤醒的单个线程还是我们刚休眠的生产线程，那么就会继续死锁，所以建议直接所有的等待线程。 详细介绍Java虚拟机（JVM）","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（五）：异常和字符串","slug":"关于JAVA你必须知道的那些事（五）：异常和字符串","date":"2018-08-03T13:28:49.000Z","updated":"2019-04-13T13:29:21.697Z","comments":true,"path":"2018/08/03/关于JAVA你必须知道的那些事（五）：异常和字符串/","link":"","permalink":"http://blog.licheetools.top/2018/08/03/关于JAVA你必须知道的那些事（五）：异常和字符串/","excerpt":"","text":"异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。 异常异常:我们也称之为意外或者例外，它本质上就是程序上的错误。那么什么是错误呢？ 错误如果用定义来说，我可能说不清楚。但是在我们编写程序的过程中，错误是会经常发生的，通常会发生在编译期间和运行期间。（这也就是编译型语言和解释型语言的一个非常大的不同，编译型语言会多一个编译过程，所以出错误的概率就相对低很多） 常见的编译错误包括：括号没有正常的配对; 语句结束后少写了分号;关键字拼写错误，通常这种错误编译器会帮助我们进行检查，但是运行期间的错误，编译器就无能为力了，只能靠程序员自己了。 常见的运行时错误有：使用空的对象引用调用方法；数组访问时下标越界；算术运算时除数为0；类型转换时无法正常转换等。这些错误在编译时是没有错误提示的，只能靠自己把握了。 在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。 异常的分类异常可以理解为一种事件，它的发生会影响正常的程序运行流程。在Java中你可以通过Throwable来进行各种异常信息的描述。 Throwable是根类，它具有2个子类：Error和Exception。 Error：程序无法处理的错误，表示运行应用程序中较严重问题。通常是Java虚拟机问题(比如虚拟机错误：VirtualMachineError；内存溢出：OutOfMemoryError；线程死锁 ：ThreadDeath等)；它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。 对于设计合理的应用程序来说,即使确实发生了错误,本质上也不应该试图去处理它所引起的异常状况。 Exception是程序本身可以处理的异常，我们通常所说的异常处理就是处理这种类型的异常。 Exception又可以分为两大类:：非检查异常(Unchecked Exception)和检查异常(Checked Exception) 非检查异常：它是编译器不要求强制处置的异常，通常包括：RuntimeException（运行时异常）以及它的子类:：NullPointerException（空指针异常）；ArrayIndexOutOfBoundsException（数组下标越界异常 ）；ArithmeticException（算数异常）和ClassCastException（类型转换异常）等。 java程序在编译阶段是不会去检查上面这些RuntimeException（运行时异常）异常的。 而检查异常则是编译器要求必须处置的异常，比如: IO异常 IOException; SQL异常 SQLException等。 异常处理分类在Java应用程序中,异常处理机制为: 抛出异常和捕捉异常。异常必须要先被抛出，然后才能被捕获。 所谓抛出异常，它是指当一个方法当中出现异常，方法会去创建异常对象，并去交付给运行时系统来进行处理。 异常对象则是异常类型以及异常出现时的程序状态。 当程序运行时系统捕捉到这个异常，此时会去寻找合适的处理器，如果找到了，就会执行处理器的相关逻辑；如果始终没找到，程序就会终止运行。 对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同。 在Java中规定: 对于可查异常（检查异常(Checked Exception)）必须捕捉或者声明抛出；同时允许忽略不可查的RuntimeException(含子类)和Error(含子类)。 那么在java中，如何抛出异常和捕获异常呢？可以通过5个关键字来实现:：try catch finally throw throws。 try：将执行可能会产生异常的代码放在try里面； catch：用来捕获异常； finally：无论是否发生异常，finally里面的代码总能执行 try…catch…finally是一组：12345678910public void test()&#123; try &#123; //代码段1 //产生异常的代码段2 &#125;catch (异常类型 ex) &#123; //对异常进行处理的代码段3 &#125;finally&#123; //代码段4 &#125;&#125; try代码块后可接零个或多个catch代码块，但是如果没有catch块，那么必须跟一个finally块。说白了就是try要和catch或finally组合使用，不能单独使用。你知道的，如果没产生异常的代码，你捕获什么？ 如果有多个catch，记住要使用Exception放在最后一个，因为这个里面包含所有的你目前还未发现的异常。多个catch异常捕获的范围要满足自上而下，逐次增大的原则，否则小范围的异常会被大范围的覆盖哦。 一般情况下，finally里面的代码都会运行，但有时候你想提前停止代码运行，可以使用:1System.exit(1); 里面的状态码0代表正常退出,非0代表非正常退出（这里用了1代表，终止当前虚拟机的运行，使得程序无条件停止运行）。 也就是说，如果程序按照正常逻辑执行需要退出时，可以调用System.exit(0)。如果发生异常而退出，比如在catch块使用，那么会调用System.exit(1)。 return关键字在异常处理中的作用我们只需要记住一点：不管前面有多少个return，只要finally中有return，那么最终返回的就是finally中return的返回值。（前面的return则是按照异常捕获的顺序来返回） 使用throws声明异常类型throws：自动抛出异常类型，一次抛出很多个（多个之间用逗号隔开），在方法定义的时候被使用：123public void method() throws Exception1,Exception2,...,ExceptionN &#123; //可能产生异常的代码&#125; 也就是说，如果一个方法可能会出现异常，但没有能力处理这种异常，那么我们就可以在方法声明的时候使用throws来声明抛出异常。 举个例子：12345678910public static int test() throws ArithmeticException &#123; //声明可能会引发的异常，这里只声明异常，不去处理，谁调用谁处理 System.out.println(&quot;====运算开始====&quot;); Scanner scanner = new Scanner(System.in); System.out.print(&quot;请输入第一个数字: &quot;); int one = scanner.nextInt(); System.out.print(&quot;请输入第二个数字: &quot;); int two = scanner.nextInt(); System.out.println(&quot;====运算结束====&quot;); return one / two; &#125; 然后我们调用的时候来进行异常处理：12345678910public static void main(String[] args) &#123; try &#123; int result = test(); System.out.println(&quot;one和two的商是：&quot; + result); &#125; catch (ArithmeticException e) &#123; // TODO Auto-generated catch block System.out.println(&quot;除数不能为0&quot;); e.printStackTrace(); &#125;&#125; 注意你可以在throws声明异常的时候，尽量多考虑一些情况，然后可以在调用的时候利用surround with来进行异常的快速生成处理，这里快速生成的异常类型和你在throws抛出的类型一致。 当然，你完全可以直接抛出Exception，那样调用的时候处理就只需要直接处理Exception这个了。 还需要注意的一点就是，当throws后面直接跟Exception的时候，编译器会提示你当前方法可能会产生异常，因为Exception这个父类包含了出现检查异常的情况。但是如果你不是Exception，而是前面所列举的非检查异常，那么编译器就不会给你报错的。 说明白编译器只会对检查异常进行报错处理，但是对于非检查异常是不进行报错处理的。如果非要有一种对于非检查异常类似的报错处理，你可以使用文档注释来达到这个目的，但是报错处理不是编译器完成的，而是程序员自己发现的。 使用throw手动抛出异常throw：手动抛出异常，一次只能抛出一个异常，在方法体内被使用：throw用来抛出一个异常，如: throw new IOException()；而且throw抛出的只能是可Throwable类或者其子类的实例对象，不能是自己定义的，如: throw new String(“出错啦”)，这种明显就是错误的：1234567891011public void method()&#123; try &#123; //代码段1 throw new 异常类型(); &#125; catch(异常类型 e)&#123; //对异常进行处理的代码段2 &#125;finally&#123;// 需要执行的代码段3&#125;&#125; 你还可以，在抛出异常的地方通过throws关键字来标明异常的类型：1234public void method() throws 异常类型&#123; //代码段1 throw new 异常类型();&#125; 总结一下就是：1、通过try..catch包含throw语句，自己抛出异常，自己处理异常；2.、通过throws在方法声明出抛出异常类型，谁调用谁处理，调用者可以自己处理，也可以继续上抛，此时可以抛出与throw对象相同的类型或者其父类（但是不能是其子类）。 你可以通过throws声明将要抛出何种类型的异常，并通过throw将产生的异常进行抛出。 自定义异常尽管我们使用Java内置的异常类可以描述在编程时出现的大部分异常情况，但是还是有一些情况我们难以处理，这时候我们可以自定义异常，用来描述特定情况下产生的异常类型。 所谓自定义异常，说白了就是定义一个类，去继承Throwable类或者它的子类。然后其他的就和我们前面说过的一样。1234567891011121314151617181920212223242526272829303132public class CarTest extends Exception &#123;public CarTest() &#123; super(&quot;18岁以下，70岁以上的人不允许报考驾照&quot;);&#125;;&#125;public static void testAge() throws CarTest&#123; System.out.println(&quot;请输入你的年龄：&quot;); Scanner input = new Scanner(System.in); int age = input.nextInt(); if (age &lt; 18 || age &gt; 70) &#123; throw new CarTest(); &#125; else &#123; System.out.println(&quot;欢迎报考驾校&quot;); &#125; &#125;public static void main(String[] args) &#123; try &#123; testAge(); &#125; catch (CarTeste) &#123; // TODO Auto-generated catch block System.out.println(e.getMessage()); System.out.println(&quot;驾校前台人员不得办理相关业务&quot;); e.printStackTrace(); &#125;catch(Exception e) &#123; e.printStackTrace(); &#125;; 异常链这个顾名思义就是一系列的异常，前面捕获到了异常自己不处理而是向后面抛出，从而形成异常链。 为了更好的说明，我找了一个例子，大家可以看：12345678910111213141516171819202122232425262728293031323334353637public class TryDemoFive &#123; public static void testone() throws HotelAgeTest &#123; throw new HotelAgeTest(); &#125;; public static void testtwo() throws Exception &#123; try &#123; testone(); &#125; catch (HotelAgeTest e) &#123; // TODO Auto-generated catch block throw new Exception(&quot;我是新产生的异常1&quot;); &#125; &#125;; public static void testthree() throws Exception &#123; try &#123; testtwo(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block throw new Exception(&quot;我是新产生的异常2&quot;); &#125; &#125;; public static void main(String[] args) &#123; try &#123; testthree(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125;&#125; 在上面的例子中，testone手动抛出了一个异常，但是没有处理，而是向后抛出，testtwo虽然进行了处理，但是又抛出了一个新的异常，testthree也是这样，之后最后的main方法里对testthree的异常进行了处理，并且进行了输出。 所以这段代码的运行结果就是下面的结果，只打印输出了testthree的信息，其他却没有，实际上这就造成了前面异常信息的丢失：123java.lang.Exception: 我是新产生的异常2 at JavaExceptionTest.TryDemoFive.testthree(TryDemoFive.java:23) at JavaExceptionTest.TryDemoFive.main(TryDemoFive.java:29) 那么如何解决这种异常的丢失呢？从而让异常链的情况为我们所知呢，你可以在构造方法中添加上一层异常e或者使用initCause(e)就可以了。1234567891011121314151617181920public static void testtwo() throws Exception &#123; try &#123; testone(); &#125; catch (HotelAgeTest e) &#123; // TODO Auto-generated catch block throw new Exception(&quot;我是新产生的异常1&quot;,e); &#125; &#125;;public static void testthree() throws Exception &#123; try &#123; testtwo(); &#125; catch (Exception e) &#123; // TODO Auto-generated catch block// throw new Exception(&quot;我是新产生的异常2&quot;,e); Exception e1 =new Exception(&quot;我是新产生的异常2&quot;); e1.initCause(e); &#125; &#125;; 也就是说，异常链将异常发生的原因一个传一个串起来，把底层的异常信息传给上层，这样逐层抛出。 异常总结 在Java中, 通过Throwable及其子类描述各种不同的异常类型。其中这个Error是我们无法预测的，但是Exception却是我们可以避免的。Exception又分为2类，一个是运行时异常（非检查异常），这种编译器是不会给你报错的，另一种异常是则是编译器强制你去处理的异常。 几点建议：1、处理运行时异常时,采用逻辑去合理规避同时辅助try-catch处理；2、在多重catch块后面,可以加一个catch(Exception)来处理可能会被遗漏的异常；3、对于不确定的代码,也可以加上try-catch ,处理潜在的异常；4、尽量去处理异常,切忌只是简单的调用printStackTrace()去打印输出；5、具体如何处理异常,要根据不同的业务需求和异常类型去决定；6、尽量添加finally语句块去释放占用的资源，如关闭文件和数据库连接等。 最后一点：当子类重写父类抛出异常的方法时,声明的异常必须是父类方法所声明异常的同类或子类。 字符串创建字符串的3种方式：123String str1 =&quot;hello world&quot;;String str2 =new String();String str3 =new String(&quot;hello world&quot;); 字符串的常用方法及说明：返回类型| 方法| 说明 | :-: | -:int | length() | 返回当前字符串的长度int | indexOf(int ch) | 查找ch字符在该字符串中第一次出现的位置int | indexOf(String str) | 查找str子字符串在该字符串中第一次出现的位置int | lastIndexOf(int ch) | 查找ch字符在该字符串中最后一次出现的位置int | lastIndexOf(String str) | 查找str子字符串在该字符串中最后一次出现的位置String | substring(int beginIndex) | 获取从beginIndex位置开始到结束的子字符串String | substring(int beginIndex, int endIndex) | 获取从beginIndex位置开始到endIndex位置的子字符串String | trim() | 返回去除了前后空格的字符串boolean | equals(Object obj) | 将该字符串与指定对象比较，返回true或falseString | toLowerCase() | 将字符串转换为小写String | toUpperCase() | 将字符串转换为大写char | charAt(int index) | 获取字符串中指定位置的字符String [] | split(String regex, int limit) | 将字符串分割为子字符串，返回字符串数组byte [] | getBytes() | 将该字符串转换为byte数组 ==运算符与equals方法的区别我们在前面也说过，==运算符比较的是对象在内存中的引用地址，而equals方法的用法就需要分情况了，如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容） 因为这里谈的是字符串，因此可以说equals比较的是字符串的值是否相等。 内存空间：栈存放的是类的引用，常量池存放的是字符串常量，而堆里存放的则是通过new创建的字符串对象（在这里是这样的，我们这里只谈字符串） StringBuilderString和StringBuilder的区别:：String是不可变的，而StringBuilder则是可变的，因此当频繁操作字符串时，建议使用StringBuilder。 有人就要问了，不是还有一个StringBuffer么，那这个跟前面的有啥区别么？其实StringBuilder和StringBuffer二者基本上是一样的，但是StringBuffer是线程安全的,，而StringBuilder则不是，因此也正是因为这样，所以StringBuilder性能略高一点。因为字符串处理一般都是单线程，所以我们使用StringBulider就行了。 StringBuilder常用方法append()：在末尾增加内容；delete()：删除内容；insert()：插入内容；length()：返回字符串长度；replace()：替换内容。这些方法和Python中的容器操作是很相似的，这里就不再举例说明了。 后面的内容等我有空再更新了，这次就说到这里，感谢你的赏阅！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（四）：单例模式和多态","slug":"关于JAVA你必须知道的那些事（四）：单例模式和多态","date":"2018-08-02T13:27:57.000Z","updated":"2019-04-13T13:28:29.457Z","comments":true,"path":"2018/08/02/关于JAVA你必须知道的那些事（四）：单例模式和多态/","link":"","permalink":"http://blog.licheetools.top/2018/08/02/关于JAVA你必须知道的那些事（四）：单例模式和多态/","excerpt":"","text":"好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。 设计模式官方的解释是，设计模式是：一套被反复使用，多数人知晓的，经过分类编目，代码设计经验的总结。说人话就是：软件开发人员在软件开发过程中面临的一般问题的解决方案。 常见的设计模式可以参看这张图片： 我们可以对其按照作用来进行分类:：关注对象创建过程的：创建型模式；类和对象组合：结构型模式；对象之间的通信过程：行为型模式； 单例模式单例模式: 一个类有且仅有一个实例,并且自行实例化向整个系统提供，它的目的就是使得类的一个对象成为该类系统中的唯一实例。 要点： 某个类只能有一个实例;； 必须自行创建实例； 必须自行向整个系统提供这个实例； 实现：1、只提供私有的构造方法；2、只含有一个该类的静态私有对象；3、提供一个静态的公有方法用于创建、获取静态私有对象。 对于1的理解：private是访问限制能力最强的修饰符，只能在当前类内被使用。也就是说经过private修饰，该类的对象在类外无法通过new关键字直接实例化，这样可以做到限制类实例化产生； 对于2的理解：1可以实现有且仅有一个实例，static修饰的静态成员可以满足该类有且仅有一个，所有的对象都共享这一个静态成员； 对于3的理解：类似于封装，必须向外部系统提供唯一的公有访问方法。 在java中实现单例模式有2种方式：饿汉式和懒汉式。 饿汉式：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）如此看来确实挺饿的； 懒汉式:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）如此看来确实挺懒的。 饿汉式饿汉式：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）： 123456789101112131415161718package SingleExample;// 饿汉式：创建对象实例的时候直接初始化；（空间换时间）public class SingletonOne &#123; //1、创建类中私有的构造方法 private SingletonOne() &#123; &#125;; //2、创建该类型的私有静态实例 private static SingletonOne instance = new SingletonOne(); //3、创建公有的静态方法，返回静态实例对象 public static SingletonOne getinstance() &#123; return instance; &#125;;&#125; 测试代码：12345678910111213package SingleExample;public class SingleOneTest &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub SingletonOne one =SingletonOne.getinstance(); SingletonOne two =SingletonOne.getinstance(); System.out.println(one==two); //输出结果为true &#125; &#125; 懒汉式懒汉式:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）： 1234567891011121314151617181920package SingleExample;//懒汉式：创建对象实例的时候并不初始化；（时间换空间）public class SingletonTwo &#123; // 1、创建类中私有的构造方法 private SingletonTwo() &#123; &#125;; // 2、创建静态的该类实例对象 private static SingletonTwo instance = null; // 3、创建公有的静态方法，提供实例对象 public static SingletonTwo getinstance() &#123; if (instance == null) &#123; instance = new SingletonTwo(); &#125; return instance; &#125;;&#125; 相应的测试代码为：1234567891011121314package SingleExample;public class SingleTwoTest &#123; public static void main(String[] args) &#123; // TODO Auto-generated method stub SingletonTwo one = SingletonTwo.getinstance(); SingletonTwo two = SingletonTwo.getinstance(); System.out.println(one == two); //输出结果为true &#125;&#125; 单例模式两种实现总结饿汉式在类加载时就创建实例，第一次加载速度快；懒汉式在第一次使用时才进行实例化，第一次加载速度慢； 饿汉式：空间换时间懒汉式：时间换空间 饿汉式，类在加载时进行了对象的实例化创建，即使多个进程进行并发操作，访问的实例也是唯一的，饿汉式线程安全。 懒汉式，第一次使用才会实例化，多个线程并发操作时，由于时间片的切换，可能导致线程风险。 但是懒汉式的线程危险是可以规避的，通过关键字Synchronized实现线程的锁定，也可以通过静态内部类和枚举保证操作时的线程唯一。 单例模式优缺点及使用场景单例模式的优点：1、在内存中只有一个对象,节省内存空间；2、避免频繁的创建销毁对象, 提高性能；3、避免对共享资源的多重占用。 单例模式的缺点:1、扩展比较困难；2、如果实例化后的对象长期不利用,系统将默认为垃圾进行回收,造成对象状态丢失。 使用场景:1、创建对象时占用资源过多,但同时又需要用到该类对象；2、对系统内资源要求统一读写,如读写配置信息；3、当多个实例存在可能引起程序逻辑错误,如号码生成器； 每一种设计模式都是针对场景，针对某种具体问题的，具体场景应当进行具体分析，选用合适的设计模式。 多态终于开始进入多态的世界了，在这里你将全面了解多态的特点及使用。 多态你可以理解为不同类的对象对同一消息做出不同的响应。 一般而言，多态分为编译时多态和运行时多态这两种。 编译时多态：也称设计时多态，它是通过方法重载来实现的，编译器在编译状态可以进行不同行为的区分。 而运行时多态，则必须要求程序运行时，动态决定调用哪个方法。 我们通常在Java中的多态指的就是运行时多态。 实现多态的必要条件: 满足继承；父类引用指向子类对象 向上转型所谓的向上转型也指隐式转型（自动转型）。说通俗一点就是父类引用指向子类实例，它可以调用子类重写父类的方法以及父类派生的方法，但是无法调用子类特有方法。 举个例子，假如Dog这个类继承了我们Animal这个类，我们不仅可以这样：12Dog dog =new Dog();Animal animal =new Animal(); 你还可以这样：1Animal dog2 =new Dog(); 这就是将一个子类对象转型为一个父类对象，这个很好理解，对吧。 接下来我们来说一下，向下转型，顾名思义就是和向上转型相反的操作了，是的，你很聪明。 向下转型向下转型也称强制类型转换。它是子类引用指向父类实例，我们在之前就用过了，还记得我们在重写Object类的equals方法时，就将父类Object强制转换，然后才调用子类特有的方法。 向下转型并不是可以随便转换的，需要满足一定的转换条件。我们可以通过instanceof这个运算符来判断是否能进行强制类型转换。 通过上面的图片，我们可以很清楚的知道instanceof的作用就是判断左边对象是否是右边这个类的实例，如果是就返true，否则就返回false。 因此，我们在进行向下转型的时候，可以用instanceof来判断一个对象是否满足某个类的实例特征。满足，我们才进行类型转换，否则强制转换会报错。 总结一下：向上转型: 父类引用指向子类对象。即小变大。 向下转型: 子类引用指向父类对象。即大变小。 需要注意的是：父类中static修饰的方法允许被子类使用，但是不允许被子类重写，所以向上转型之后，只能调用到父类原有的静态方法。如果此时要用子类中的，只能通过向下转型来实现。 抽象类某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法，这样我们的抽象类就派上用场了。 抽象类可以避免子类设计的随意性，还可以避免父类无意义的实例化。 你只需知道，修饰抽象类要用abstract这个关键词，抽象类不可以直接被实例化。 抽象方法我们前面说过，父类只是规定子类拥有该项能力，但在父类中具体实现它是没有任何意义的，因此该方法应设置为抽象方法。1public abstract void test(); 你记住，抽象方法是不允许有方法体的，也就是不能有花括号。而且此时子类必须实现父类的抽象方法，如果你不实现，那么这个类就必须被设置为抽象类（不设置就会报错），然后由继承它的类去具体实现相应的方法。简单来说就是一句话：抽象方法中不允许包含方法体，子类需要重写父类的抽象方法。 一般抽象类适用于这种情况：1、父类中的实现没有意义；2、提醒子类必须要去自己实现自己的这个方法。 通常子类变多了之后，你新建一个类只要继承了抽象的父类，IDE会自动提醒你实现父类中的抽象方法的，你不实现就会报错。 抽象类和抽象方法的使用你可以使用abstract关键词来定义抽象类，抽象类不能被直接实例化，你可以通过向上转型完成对象实例，只能被继承。 abstract关键词定义抽象方法 ，你不需要具体实现也不能具体实现，也就是花括号不能有。 需要注意的是：抽象类可以没有抽象方法，但包含抽象方法的类一定是抽象类。 我们前面说过，当一个类继承抽象类，必须实现类中的抽象方法。如果不重写，则必须将该子类也变为抽象类，由其子类来实现，否则会报错。 注意：static final private 不可以和abstract同时出现（因为抽象方法是要在子类中进行重写的，而private只能在当前类被访问，final方法不允许被子类重写，static静态不允许被子类重写。）","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（三）：继承和访问修饰符","slug":"关于JAVA你必须知道的那些事（三）：继承和访问修饰符","date":"2018-08-02T13:26:44.000Z","updated":"2019-04-13T13:27:32.480Z","comments":true,"path":"2018/08/02/关于JAVA你必须知道的那些事（三）：继承和访问修饰符/","link":"","permalink":"http://blog.licheetools.top/2018/08/02/关于JAVA你必须知道的那些事（三）：继承和访问修饰符/","excerpt":"","text":"今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。 继承继承：它是一种类与类之间的关系，通过使用已存在的类作为基础来建立新类。其中已存在的类称为父类(或基类); 建立的新类称为子类(或派生类)。简单的就是子类继承父类的非私有属性和方法。 需要注意的是，新定义的类可以选择继续使用父类的功能或者自己增加新的数据或新的功能，但不能选择性地继承父类。（要么继承所有（前提是非私有），要么就不继承） 只要能满足 “A is a B”的关系就可以形成继承关系，代码中是通过 extends 关键字来实现继承的。 特别注意：在java中只能继承一个父类(也就是单继承)，而且子类可以访问父类的非私有成员。这个和Python不一样，Python的继承可就灵活了。 我们知道子类继承了父类之后，可以访问父类的非私有成员；但是父类的私有成员，子类还是无法直接访问。如果我们想访问呢？可以通过父类暴露的公有方法来实现间接访问。 父类对象不可以访问到子类特有的方法或属性，同时父类不可以访问子类特有成员（那怕是公有的成员） 重载方法重载必须同时满足以下条件: 同一个类中;； 方法名相同，参数列表不同(参数顺序、个数、类型)； 方法返回值、访问修饰符任意； 与方法的参数名无关。12345678910111213141516171819202122232425public void printinfo() &#123; System.out.println(&quot;方法重载1&quot;);&#125;;public void printinfo(String name) &#123; System.out.println(&quot;方法重载2&quot;);&#125;;public String printinfo(String name, int age) &#123; return &quot;方法重载3&quot;;&#125;;public String printinfo(String age, String name) &#123; return &quot;方法重载4&quot;;&#125;;public String printinfo(int age, String name) &#123; return &quot;方法重载5&quot;;&#125;; // 与方法的参数名无关,加上下面的代码会和上面的 printinfo(int age, String name)造成重复而报错：public String printinfo(int size, String name) &#123; return &quot;方法重载5&quot;;&#125;; 重写方法重写也必须同时满足以下条件:1、在满足继承关系的子类中；2、方法名相同，参数列表相同(参数顺序、个数、类型)；3、方法返回值相同或者是子类类型（但不允许是Object类型，可以向下兼容，向上是不可以的）；4、访问修饰符的限定范围大于等于父类方法。 注意：在子类中是可以定义与父类重名的属性的，但这并不说明属性是可以重写的。 访问修饰符在Java里面一共包含4种访问修饰符，分别是：1、private：私有的；2、默认；3、protected：受保护的；4、public：公共的。 其中，private:只允许在本类范围中进行访问，离开了当前类就不允许访问； 默认: 允许在当前类，同包子类/非子类都可调用，跨包子类/非子类都不允许； protected:允许在当前类，同包中的子类/非子类都可以以及跨包子类调用。跨包的非子类不允许调用。 public:允许在任意位置访问。 按照前面的顺序，自上而下，访问范围越来越大；自下而上，限制能力越来越强： （同包包括同包子类与非子类；子类包括同包子类和跨包子类） 访问修饰符对方法重写的影响子类重写父类方法时，访问修饰符是允许改变的，要求是: 子类的访问范围必须大于等于父类的访问范围。也就是说如果父类访问修饰符是public，那么子类的访问修饰符也必须是public，其他的类似。 继承的初始化顺序继承后的初始化顺序如下： 父类静态成员 -&gt; 子类静态成员 -&gt; 父类对象的构造 -&gt; 子类对象的构造 一个问题: 访问修饰符影响成员加载顺序?静态成员优先于静态代码块执行? 访问修饰符不影响成员加载顺序,跟书写位置有关。如果把静态代码块写在静态变量的前面，那么先执行静态代码块。 super关键字如果子类继承并重写了父类的方法，那么我们通常调用的就是重写后的子类方法。如果需要调用父类的方法，我们可以使用super.方法来达到这个目的。 当然也可以使用super.属性来达到访问父类的非私有属性的目的。 尽管父类的构造方法的访问修饰符是public，但是它却不可以被子类继承和重写的。 虽然它两个不可以，但是它的存在却是非常必要的，因为子类对象的实例化要依赖于父类对象的构造方法(默认，无参或有参的构造方法)。 如果子类调用了自己有参的构造方法，而父类定义了有参和无参的构造方法，程序依然是调用父类无参的构造方法。也就是说，我们在子类的构造方法中没有显式标注的情况下，默认调用父类的无参构造方法，因此父类的无参构造方法很重要，一定要写，否则会影响子类的对象实例化。 如果子类构造方法中既没有显式标注,且父类中没有无参的构造方法,则引发编译错误。 我们可以使用super(参数)这种形式来调用父类允许被访问的其他构造方法，但是此时super()必须放在子类构造方法有效代码的第一行（必须是子类的构造方法（其他方法不行）的第一行（其他行不行））。 也就是说父类在实例化的时候会默认调用无参的构造方法（此时你不定义无参的构造方法是可以的），但是如果子类在实例化对象的时候没有显示标志（也就是会默认调用父类无参的构造方法），而此时父类其实是不存在无参的构造方法，所以会引发编译错误。 this和super的对比this:当前类对象的引用：1、访问当前类的成员方法；2、访问当前类的成员属性；3、访问当前类的构造方法；4、不能在静态方法中使用； super:父类对象的引用：1、访问父类的成员方法；2、访问父类的成员属性；3、访问父类的构造方法；4、不能在静态方法中使用； 注意：在调用构造方法时，this和super不能同时存在（前面说过两者都要求在第一行）。 Object类Object类是所有类的父类，这个其实和Python中差不多，在Python里面也是所有的类都继承于object这个基类。点这直接查看api：javase8api 一个类没有使用extends关键字明确标识继承关系,则默认继承Object类(包括数组)。123Class Object is the root of the class hierarchy.Every class has Object as a superclass. All objects, including arrays, implement the methods of this class. Object类存放于java.lang包中，这个包系统默认会为我们直接加载。 equals用法如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容） 因此我们不能这样说equals比较的两个对象的值，或者引用地址，但是我们却可以说”==”比较的却一定是两个对象的引用地址。 toString用法api告诉我们，toString最后返回的是下面这种形式：（包名.类名@内存中的哈希码）1getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode()) 同样的，子类如果没有重写Object类的toString方法，那么则会打印输出其在内存中的哈希码；而String类则重写了Object类的toString方法，所以打印输出其真实值。（言外之意，子类可以通过重写toString方法的形式，改变输出的内容） 还要说明的一点就是输出对象和对象.toString的效果是一样的，因为直接输出对象的时候其实是调用了对象.toString方法。 Final关键字当我们不希望某些类被继承，某些方法被重写或者某些数据被修改时，可以使用final关键字来实现这个目的。 如果某个类被final修饰，则表明该类不可以被继承，该类没有子类，public final class/final public class都可以，只要是放在class的前面就可以； 如果某个方法被final修饰，则表明该方法不可以被重写，但是并不影响子类去继承调用它（final不可以修饰构造方法）。 如果某个局部变量被final修饰，那么我们可以不用在声明的同时立马进行赋值，但是必须在使用之前进行赋值，一旦赋值就不能被修改； （方法内的局部变量的作用范围，从该行开始到所在大括号结束；而类的成员变量的作用范围取决于它前面的访问修饰符）； 如果某个成员变量被final修饰，我们同样不需要声明的同时进行立马赋值，但是必须在使用之前进行赋值，而且只能在构造方法或者类代码块(构造代码块)中进行赋值，一旦赋值就不能被修改；也就是说类中成员属性的赋值可以有三种方式： 1. 定义是直接初始化； 2. 构造方法; 3. 构造代码块（类代码块）。 注意: 当具有多个构造方法时，final关键字修饰的成员变量如果选择了在构造方法里面进行赋值，那么就需要在所有的构造方法里面进行赋值，但是不同构造方法是可以赋不同值的 final对数据类型的影响我们知道java 数据类型分为基本数据类型（byte,short,int,long,float,double,char,boolean） 和 引用数据类型(array,String,interface,自定义的类…) 基本数据类型是可以直接进行赋值的，而引用类型需要实例化该类的对象，然后才能给其对象进行赋值（String这个比较特殊，两种形式都是可以的） 我们知道基本数据类型在内存中存放的是数据本身，而引用数据类型在内存中存放的则是对象的引用地址。 下面的例子告诉我们，被final修饰的对象不可以修改它的引用地址，但是属性却是可以的：123final Test test=new Test(&quot;hello&quot;); // test=new Test (); Test.key=&quot;world&quot;; 总结一下就是：基本数据类型的变量其一旦被赋初值，就无法进行修改；而引用类型的变量只是在初始化之后不能再指向另一个对象，但是对象的内容却是可变的。 因此final可配合static使用，用来修饰方法和变量。通常是用于修饰配置信息等(因为这类信息只需要加载一次，而且后面不需要被修改)。言外之意，使用final修饰可以提高性能，但会降低可扩展性。 普通代码块，类代码块，构造代码块，静态代码块区别代码块都是一对大括号{}所括起来的内容。 普通代码块就是一对大括号{}所括起来的内容，只存在于类的方法之中； 类代码块和构造代码块是一个东西，就是直接在类中进行定义的，前面没有static进行修饰。构造代码块在创建对象时被调用，每次创建对象都会被调用，并且构造代码块的执行次序优先于类的构造方法。 静态代码块前面有static关键字进行修饰，它不能存在于任何方法体内，也不能直接访问实例变量和实例方法，需要通过类的实例对象来访问。 通常我们new一个对象，JVM要经过这样的初始化顺序：父类静态块&gt;子类静态块&gt;父类属性&gt;父类构造器&gt;子类属性&gt;子类构造器，这一系列的工作会消耗大量的内存和cpu。 具体的研究可以参看这里：详解java中的四种代码块。 java中的注解注解是JDK1.5版本引入的一个特性, 它可以声明在包、类、属性、方法、局部变量、方法参数等前面，作用就是对这些元素进行说明、注释。 按照运行机制来分类注解按照运行机制来进行划分，可以分为3部分:源码注解，编译时注解，运行时注解。 源码注解：只在源码.java文件中存在，编译成.class字节码文件就不存在了； 编译时注解：在源码.java文件和字节码.class文件中都存在； 运行时注解：在运行阶段还起作用,甚至会影响运行逻辑的注解。（spring框架中的@Autowired依赖注入的这种注解，它实现的就是在程序运行的过程当中自动的将外部传入的信息加载进去,它就是一种可以影响程序运行逻辑的运行时注解。） 按照来源来分注解按照来源来进行划分，可以分为3部分:JDK注解，第三方注解，自定义注解。 还有一种元注解，它是对注解进行注解的。 不行了，写着写着字数又超了，快4000字了，面向对象最后一个特性：多态，我还没说呢，下次吧，今天得滚去运动了。。。感谢你的赏阅。","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（二）：封装","slug":"关于JAVA你必须知道的那些事（二）：封装","date":"2018-08-01T13:25:15.000Z","updated":"2019-04-13T13:25:45.394Z","comments":true,"path":"2018/08/01/关于JAVA你必须知道的那些事（二）：封装/","link":"","permalink":"http://blog.licheetools.top/2018/08/01/关于JAVA你必须知道的那些事（二）：封装/","excerpt":"","text":"时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。 类和对象在这之前，我们先了解什么是对象，已经什么是面向对象？对象：万物皆对象，现实中实际存在的事物都可以看成一个对象。而面向对象就是人在关注对象， 关注事物的信息。那什么是类？类就是模子，通常用于确定对象将会拥有的特征(属性)和行为(方法)。也就是说对象是类的具体存在，而类则是对象的抽象化。苹果是一个类，你手里拿的苹果就是一个实例化的对象。 刚才说了对象具有属性和方法，那么属性和方法又是什么呢？属性就是对象具有的各种静态特征，通常用来说明对象有什么；而方法就是说明对象具有的各种动态行为，也即对象能做什么。 假如我有一辆吉普车，它的颜色，价格，型号就是属性；而它能加速，减速，停止就是具有各种方法。 创建类的一般步骤为：创建类==》实例化对象==》书写具体的逻辑。 通常我们在书写类的时候，都需要遵循单一职责原则(单一功能原则)，也就是说 一个类应该有且只有一个引起功能变化的原因。如果在一个类当中承担的功能越多，那么它的交融，耦合性就越高，被复用的可能性就越低。特别是因为耦合度高，可能会因为一个职责的变化，引起其他职责的变化，进而影响整个程序的运行，这一点是我们所不想看到的。 实例化对象的过程可以分为三步：声明对象，实例化对象，将两者进行绑定。其中声明对象是在栈内存中开辟了一块内存空间，但此时还不是一个有效的对象，因为此时对象的空间里是空的。如果此时调用它的属性和方法则会引发错误。而实例化对象则是在堆空间开辟一块空间，它完成了具体对象相关信息的初始化操作。最后通过赋值进行两者绑定。 也就是声明对象和实例化对象是在内存中的不同空间完成的，通过赋值操作，将两者关联。具体的关联就是将堆中具体对象的内存地址存放在之前在栈中开辟的内存中，从而完成绑定。 构造方法构造方法也称为: 构造函数或者构造器，你可以使用构造方法来完成对象初始化相关操作。 构造方法的调用必须配合new关键字，不能被对象单独调用。注意，构造方法必须与类同名且没有返回值。 方法名中的参数列表可有可无，但是只能在对象实例化的时候被调用。 当没有指定构造方法时，系统会自动添加无参的构造方法；当有指定的构造方法时,无论是有参、无参的构造方法，系统都不会自动添加无参的构造方法，一个类中可以有多个构造方法。 this: 当前对象的默认引用; this的使用:调用成员属性,解决成员属性和局部变量同名冲突，也可以调用成员方法。 如果你想调用重载的构造方法，那么只能通过this关键字来使用this()；同时请记住，如果是通过this()来调用构造方法时,它必须放在方法体内第一行。（这个一定注意） 封装封装就是将类的某些信息隐藏在类内部, 不允许外部程序直接访问，但是通过该类提供的方法来实现对隐藏信息的操作和访问。也就是说两点：一是隐藏对象的信息，第二留出可以访问的接口（方法）。 封装的具体步骤：1、将访问修饰符替换为private；2、提供公共的setter和getter方法；3、必须有构造方法（系统会默认调用无参的构造方法）。其中setter方法是可写，getter方法是可读。我们可以在setter方法里面添加自己的业务逻辑，从而实现对值的合理性进行判断。 因为已经实现了封装，因此我们在实例化对象的时候就不需要再次传入自定义的参数了，否则就没有使我们提供的setter方法生效了。 包的管理为什么要说包的管理呢？因为包的管理太重要了，其实很多坑就是包的命令和管理不规范引起的。 我们知道文件夹可以进行文件的管理，同一个文件中可以存放多个不同的文件，同名的文件只能存放在不同的文件夹中。 在Java中我们也是通过包来管理java文件来解决同名文件的冲突问题，Java中一个包里不能存放同名类，但不同包却是可以。 包的定义必须放在Java源文件的第一行。前面说过，我们在定义类的时候，尽量遵循单一职责原则，同样的道理，在建立包的时候，建议每个包内存储的信息功能应该单一。 如何实现跨包类的调用？可以采用Import这个关键字，来实现包的导入。需要注意的是import包名.* 只能访问指定包名下的类，无法访问子包下的类。 还有就是包的效率问题，建议采用import包名.类名的方式进行包的导入，这样可以提高加载效率12import net.oschina.Test.*; // 加载包下的所有类import net.oschina.Test.Java; // 加载指定包下的指定类 注意一下，加载类的顺序跟import导入语句的位置无关:指定的具体包的优先级大于通配符。也就是下面加载会大于上面加载的速率。 最后说一下关于包管理的几个注意事项：1、必须放在Java源文件中的第一行；2、一个Java源文件中只能有一个package语句；3、包名全部采用英文字母小写的方式；4、包的命名方式为：域名倒序+模块+功能。 static关键字static修饰static表示静态的。 如果它修饰成员变量，那么该变量被称为静态成员或类成员，它是这个类所有的。也就是说无论这个类实例化出多少对象，它都会共用同一块内存空间。后面的只会覆盖前面的值。 如果它修饰属性，那么该属性被称为静态属性。 如果它修饰方法，那么该方法被称为静态方法。 如果它修饰初始化块，那么该初始化块被称为静态初始化块。 但是static是不能修饰类，不能修饰局部变量，不能内部类中修饰初始化块（不可以在内部类定义静态初始化块）。 静态成员的生命周期很长，在类加载时产生，直到类被销毁时才释放。 static访问普通的成员方法可以直接访问当前对象（该类实例化的对象）的成员属性和方法，也可以直接访问当前对象的静态属性和静态方法 静态方法或者类方法（前面被static修饰），它不能直接访问同一个类中的非静态成员，因为它缺少隐含的this参数。静态方法只能直接调用同一个类中的静态成员。如果非要访问，只能通过实例化一个对象后，采用对象.成员方法的方式来访问非静态成员。 初始化块（代码块）初始化块的说明在Java里面，被{}括起来的代码就称之为代码块（初始化块）。 当代码块出现在方法里的时候，叫做普通代码块，普通代码块和一般语句的执行顺序是一样的：从上到下，顺序执行，先出现,，先执行。 当代码块直接在类中定义，与成员方法，属性并列时，我们此时称之为构造代码块。 记住构造代码块比构造函数优先执行。构造代码块它是在创建对象的时候被调用，优先于构造方法的执行。所以不管构造代码块放在类的其他位置，它都会先于构造函数执行。 多个构造代码块之间有先后顺序，但都先于构造函数前执行。 初始化块的执行现在考虑一下，静态初始化块，普通初始化块，构造函数这三者的执行顺序？你只要记住静态初始化块静态初始化块只在类初始化时进行加载，而且只执行一次。对于三者，程序的执行优先级：静态初始化块–》初始化块–》构造方法。（这里的初始化块包括构造初始化块（直接在类中声明）和普通的初始化块（在方法中声明）。 初始化块的范围看一段代码：123456789public void test()&#123; &#123; System.out.println(&quot;我是普通代码块1&quot;); &#125; System.out.println(&quot;初始化块的范围&quot;); &#123; System.out.println(&quot;我是普通代码块2&quot;); &#125; &#125; 我们发现这个test方法空间被分成了三部分，所以我们可以利用这个功能来实现变量的命名冲突。1234public void test()&#123; int temp =10; int temp =12; &#125; 上面是不可以的，但是下面却是可以的：1234567public void test()&#123;&#123; int temp =10; &#125;; &#123; int temp =12;&#125;; &#125; 这时两个代码块空间中允许有自己的变量值，不会重名造成冲突。但是不能在方法的全局域位置添加同名变量，因为它会与两个变量都造成重复定义的问题：1234567public void test()&#123;&#123; int temp =10; &#125;; int temp =11; &#123; int temp =12;&#125;; &#125; 因为temp的作用域是从那里到结尾的，会与后面的代码块里面的变量产生命名冲突。 由于篇幅的问题，继承和多态我下次再说哈，今天就写到这里了，感谢你的赏阅！！！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"关于JAVA你必须知道的那些事（一）：概述","slug":"关于JAVA你必须知道的那些事（一）：概述","date":"2018-08-01T13:23:38.000Z","updated":"2019-04-13T13:24:45.535Z","comments":true,"path":"2018/08/01/关于JAVA你必须知道的那些事（一）：概述/","link":"","permalink":"http://blog.licheetools.top/2018/08/01/关于JAVA你必须知道的那些事（一）：概述/","excerpt":"","text":"一、JAVA的主要特性： 1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。 2、Java是面向对象的，具有类，接口等； 3、Java是解释型的语言，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。即所谓的“一次编译，永久使用”。 下面解释一下解释型语言和编译型语言的区别？ （A）解释型语言：,解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。在发布程序时，看起来省了道编译工序。但是，在运行程序的时候，解释性语言必须先解释再运行。 （B）编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++、Delphi等。 二、JAVA的开发工具（JDK），工具及运行环境（JRE） （1）Java主要分为三大体系： JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版) JavaEE(J2EE)(Java 2 Platform,EnterpriseEdition，java平台企业版) JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版) 2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE,J2SE更名为Java SE，J2ME更名为Java ME。 说明： Standard Edition(标准版) J2SE 包含那些构成Java语言核心的类 比如：数据库连接、接口定义、输入/输出、网络编程 Enterprise Edition(企业版) J2EE 包含J2SE 中的类，并且还包含用于开发企业级应用的类。比如：EJB、servlet、JSP、XML、事务控制 Micro Edition(微缩版) J2ME 包含J2SE中一部分类，用于消费类电子产品的软件开发。比如：呼机、智能卡、手机、PDA、机顶盒 他们的范围是：J2SE包含于J2EE中，J2ME包含了J2SE的核心类，但新添加了一些专有类，应用场合，API的覆盖范围各不相同。 上面的每个版本都分别对应不同的JDK（java development kit），可以根据应用不同下载不同的JDK安装。对于初学者，先学习Java SE，有了一定基础之后，可以考虑深入学习Java EE，或者转战Android也行。 （2）JDK中包含了java开发需要的各种类和接口，以及运行java程序所需要的环境JRE，若是只想在各种系统平台上运行java程序而不进行开发，则可以直接下载JRE包即可。有些系统是自带JRE的，但不包括windows，因此要想在windows上运行java程序，需要在系统上安装JRE。 （3）JRE中包含了JVM（Java虚拟机）：它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。 2、工具 Java开发需要一些较好的开发工具，比较好的一个IDE就是Eclipse；eclipse、idea等IDE有自己的编译器而不是用JDKbin目录中自带的，所以在安装时你会发现他们只要求你选中jre路径就ok了；而且用eclipse的话不需要设置系统环境变量，它会自动找到安装的JRE地址。 3、开发环境 Java可以下windows和linux等系统下进行开发，这里仅介绍在windows下开发需要设置的环境参数，在安相应版本JDK之后，进行变量设置。 变量设置 变量名：JAVA_HOME 变量值：C:\\ProgramFiles\\Java\\jdk1.7.0 //这里是你JDK的安装路径，可以更换 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;//记得前面有个”.” 变量名：Path 变量值：%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 1、”开始”-&gt;;”运行”，键入”cmd”； 2、键入命令”java -version”，”java”，”javac”几个命令，出现相关画面，说明环境变量配置成功； 三、Java基础语法 1、基本语法规则 编写Java程序时，应注意以下几点： 大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。 类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。 方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。 源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。 主方法入口：所有的Java 程序由public static void main(Stringargs)方法开始执行。 另外：java中没有头文件，它是以import的方法从外面导入.class文件的； java中的main函数是包含在一个类中的，与C++是不一样的，在C++中没有定义类也是一个程序。 2、源文件声明规则 当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。 一个源文件中只能有一个public类 一个源文件可以有多个非public类 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。 如果一个类定义在某个包中，那么package语句应该在源文件的首行。 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。 import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。 类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。 3、Java包： 包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。（即包中包含很多种类的类和接口） 当编译一个.java文件（即一个编译单元）时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。如果你真的想学习java你可以来这个群前面是四九一，中间是八九七后面是一五八这里有技术大牛亲自指导帮助你 还有免费的直播课程学。因此在编译少量.java文件之后，会得到大量的.class文件。每一个.java文件编译以后都会有一个public类，以及任意数量的非public类。因此每个.java文件都是一个构件，如果希望许许多多的这样的构件从属于同一个群组，就可以在每一个.java文件中使用关键字package。而这个群组就是一个类库。 如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。 4、权限修饰符 Java中有四种权限修饰符，这些修饰符控制对类，类的成员方法，类的成员变量的访问；其作用范围如下： public：所有的类都可以访问。 private：只有在同一个类中才可以访问。 protected：同一个类中、同一个包中、子类中都可以访问，其他包不可以。 包类型的，即默认类型同一个类中、同一个包中可以访问到，其他包和子类不可以。 5、数据类型 byte: Java数据类型和c/c++基本类似，但Java中有byte类型，表示8位2进制的整数，相当于c/c++中的char. 常量：Java中常量用final表示，相当于const，final中的值是可以改变的； -包装类: 在开发过程中，有时候需要使用对象，而不是内置数据类型，因此java为每个内置数据类型提供了对应的包装类所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类Number的子类，对于字符也有相应的Character类。每个类具有相应的函数。 数组：java数组是对象，与c++不同，语法上与c++类似，java数组具有一个属性length可以获取数组的长度。（数组a，a.length为数组长度），Array类具有一些函数可以对数组进运算。 6、Java高级特性和接口 Java中类继承只允许一个父类，当需要进行多个继承时，需要使用接口。接口类似于类，定义时用interface替代类定义中的class，但里面的方法只有定义没有实现。接口文件的文件名必须与接口名相同。继承接口的关键字为implement，与类的继承extends相似，可以进行多继承。接口继承必须实现接口中的所有方法。 接口是规范，规定某个实现类里必须有那些方法，只要事先定义好接口，当大家一起合作的时候就不用特别麻烦的交互，而是每个人写好自己的接口实现类，最后拼接到一起就可以了比如数据库连接类，接口规定好有哪些方法、方法的功能，然后每个数据库厂商根据接口去实现具体的类，达到统一的目的，要不每个数据库厂商自己实现一套，那么你编程的时候就要根据不同驱动使用不同的方法，造成不必要的麻烦。 2、Java中的抽象类 只声明方法的存在而不具体实现的类，抽象类不能实例化（不能创建相应对象）定义方式：在class前加上abstract，ex： abstractclass 类名{ ;;;}抽象类中定义的没有实际意义的，必须在子类重写的方法为抽象方法，定义时前面加abstract：abstract type name(agrs)。 一般方法定义与在正常类中定义一样。 关于如何创建类和其他知识我将在后续文章陆续介绍，谢谢大家！","categories":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}],"tags":[{"name":"java基础","slug":"java基础","permalink":"http://blog.licheetools.top/tags/java基础/"}],"keywords":[{"name":"java","slug":"java","permalink":"http://blog.licheetools.top/categories/java/"}]},{"title":"利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）","slug":"利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）","date":"2018-06-30T09:36:50.000Z","updated":"2019-11-04T13:08:27.286Z","comments":true,"path":"2018/06/30/利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）/","link":"","permalink":"http://blog.licheetools.top/2018/06/30/利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）/","excerpt":"","text":"写在前面本篇笔记，我们将介绍如何把我们的微电影视频网站部署上线。 安装LNMP环境首先我们需要在云服务器上安装LNMP，所谓的LNMP是指：Centos,Nginx,Mysql和Python： 我们需要的配置：服务器系统：Centos7数据库: Mysql编程语言: Python3.6队列缓存: Redisweb反向代理: Nginx依赖环境: flask ，mysql-connector-python ，wtform ，sqlachemy ，redis整个部署流程： 一些常用的Centos命令123456ssh root@ip # 查看服务器配置cat /etc/redhat-release # 查看内存剩余free -m # 查看硬盘剩余df -h 1、安装python3.6的依赖包12yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-develsqllite-devel 2、下载并解压Python3.6.41234567tar -zxf python-3.6.4.tgzcd python-3.6.4/./configure --prefix=/usr/localyum -y install gcc gcc-c++make altinstall 3、采用软连接配置Python1234567891011cd /usr/binmv python python.backup# 创建软连接ln -s /usr/local/bin/python3.6 /usr/bin/pythonln -s /usr/local/bin/python3.6 /usr/bin/python3cd /usr/bin/ls yum*vim yum 修改第一行尾python2: 然后就是：1vim yum-config-manager 修改第一行尾python2： 。。。。。。运行下面所有的命令，把它们第一行尾的python都改成Python2：123456vim yum-debug-restorevim yum-group-managervim yum-build-depvim yum-debug-dumpvim yumdownloadervim /usr/libexec/urlgrabber-ext-down 然后输入Python发现就是Python3.6.4的版本了。 安装MySQL直接利用命令进行安装：12345yum -y install mariadb-server # 安装MySQL服务systemctl start mariadb.service # 启动服务enable mariadb.service # 设置开机自启 然后修改密码：12mysqladmin -uroot password &quot;root&quot;mysql -uroot -proot 接下来更改MySQL的字符集：123vim /etc/my.cnfcharacter--set-server=utf8 # 更改字符集 然后重启服务器：1systemctl restart mariadb.service 安装Nginx拷贝Nginx到我们的服务器上面：1scp nginx.tar.gz root@192.168.x.x:/root/ 然后安装它的依赖包：1yum -y install gcc gcc-c++ openssl-devel pcre-devel httpd-tools 接下来进行解压安装：123456789tar -zxf nginx.tar.gzcd nginx/useradd nginx./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_mp4_module --with-http_flv_moudlemake &amp;&amp; make install # 安装和编译ln -s /usr/local/nginx/sbin/nginx /usr/sbin/ 最后启动我们的nginx服务器：12nginxnetstat -anptu | grep nginx 部署微电影视频网站部署的整个流程就是这样： 1、引入Manager首先安装Flask-Script，然后在manage.py中导入Manager：12345678from app import appfrom flask_script import Managermanage = Manager(app)if __name__ == &apos;__main__&apos;: app.run() 2、修改服务器端口 端口需要和服务器保持一致，同时关闭调试模式。 3、拷贝依赖文件到服务器首先导出项目依赖的各种包req.txt1scp req.txt movie.sql root@192.168.xx/root/ 当然如果你不熟悉，那你可以使用xshell来上传文件。 4、新建虚拟环境1mkvirtualenv --python=python3 movie 5、安装依赖的包1pip install -r req.txt 如果安装太慢就可以使用豆瓣源进行加速：1pip install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com -r req.txt 6、创建数据库并导入数据123create database movie;use movie;source /root/movie.sql; 7、将项目拷贝到nginx的html目录1cp -r movie /usr/local/nginx/html 或者 cp -r movie /usr/share/nginx/html 8、查看nginx的目录123cp nginx.conf /usr/local/nginx/conf/ubuntu: cp nginx.conf /etc/nginx/conf.d 9、运行项目123cd /usr/local/nginx/html/movie_projectpython manage.py runserver 然后开启四个进程，修改端口：12nohup python manage.py runserver -h 192.168.x.x -p admin` 10、上传nginx的配置文件123456789101112131415161718192021222324252627282930313233343536373839404142worker_processes 4;events &#123; worker_connections 262180;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; limit_conn_zone $binary_remote_addr zone=addr:5m; upstream movie &#123; server 127.0.0.1:5001; server 127.0.0.1:5002; server 127.0.0.1:5003; server 127.0.0.1:5004; &#125; server &#123; listen 80; server_name movie.licheetools.top; location / &#123; root html; index index.html index.htm; proxy_pass http://movie; &#125; location ~ \\.flv$ &#123; flv; limit_conn addr 4; limit_rate 1024k; rewrite ^/static/uploads/(.+?).flv$ /movie/app/static/uploads/$1.flv permanent; &#125; location ~ \\.mp4$ &#123; mp4; limit_conn addr 4; # 同时允许在线观看4个页面 limit_rate 1024k; # 最高下载速度1M/s rewrite ^/static/uploads/(.+?).mp4$ /movie/app/static/uploads/$1.mp4 permanent; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 11、刷新Nginx最后我们使用nginx -s reload来刷新我们的Nginx,然后你就可以在浏览器输入你的域名就可以访问你的微电影视频网站了。 至此，微电影视频网站项目我们就完成了开发，回顾这一路，坎坷确实很多，但是我们还是坚持了下来，最后项目成功上线，这其中的喜悦之情真是难以言表啊。 最后欢迎大家加我好友或者关注微信公众号，进行交流，我们一起进步！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（十五）：实现电影弹幕","slug":"利用Flask搭建微电影视频网站（十五）：实现电影弹幕","date":"2018-06-27T09:34:44.000Z","updated":"2019-11-04T13:08:58.127Z","comments":true,"path":"2018/06/27/利用Flask搭建微电影视频网站（十五）：实现电影弹幕/","link":"","permalink":"http://blog.licheetools.top/2018/06/27/利用Flask搭建微电影视频网站（十五）：实现电影弹幕/","excerpt":"利用Flask搭建微电影视频网站（十五）：实现电影弹幕。","text":"对不起，此文章为加密内容，只有管理员才能查看。 Incorrect Password! No content to display! ","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（十四）：前台后续开发","slug":"利用Flask搭建微电影视频网站（十四）：前台后续开发","date":"2018-06-25T09:33:47.000Z","updated":"2019-11-04T13:08:47.685Z","comments":true,"path":"2018/06/25/利用Flask搭建微电影视频网站（十四）：前台后续开发/","link":"","permalink":"http://blog.licheetools.top/2018/06/25/利用Flask搭建微电影视频网站（十四）：前台后续开发/","excerpt":"","text":"写在前面本篇笔记，我们将完成前台的后续开发，需要实现上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十四篇。 上映预告使用到的内容我们将使用到的内容有：模型：Preview表单: 无请求方法: GET访问控制: 无 1、修改动画视图打开views.py文件，我们修改一下动画视图：12345678from app.models import Preview# 动画@home.route(&apos;/animation/&apos;)def animation(): data = Preview.query.all() return render_template(&quot;home/animation.html&quot;, data=data) 2、配置animation页面我们修改一下我们的animation.html页面： 标签筛选和电影分页标签就是这里： 使用到的内容我们将使用到的内容有：模型：Tag ，Movie表单: 无请求方法: GET访问控制: 无 1、编写视图函数打开views.py文件，我们修改index函数：123456789101112from app.models import Tag# 首页@home.route(&apos;/&apos;)def index(): tags = Tag.query.all() movtag = request.args.get(&quot;movtag&quot;, 0) # 获取电影标签 star = request.args.get(&quot;star&quot;, 0) # 获取电影星级 ontime = request.args.get(&quot;ontime&quot;, 0) # 获取上映时间 playnum = request.args.get(&quot;playnum&quot;, 0) # 获取播放数量 commnum = request.args.get(&quot;commnum&quot;, 0) # 获取评论数量 return render_template(&quot;home/index.html&quot;, tags=tags) 2、进行标签和星级遍历123456789&#123;% for v in tags %&#125;&lt;a class=&quot;label label-info&quot;&gt;&lt;spanclass=&quot;glyphicon glyphicon-tag&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125;&#123;% for v in range(1,6) %&#125;&lt;a class=&quot;label label-warning&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-star&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; 3、构建参数字典1234567p = dict( movtag=movtag, star=star, ontime=ontime, playnum=playnum, commnum=commnum ) 这是为了后面的筛选用，记得把p传进去！ 4、配置筛选我们对电影标签进行筛选，采用这种方式进行：1&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; v.id &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;...&lt;/a&gt; 也就是说除了当前所选之外，其余的我们都是采用获取字典属性的方法来获得相关属性。 电影星级：1&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; v &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......&lt;/a&gt; 上映时间：123&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=1&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; .......最近&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=2&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......更早&lt;/span&gt;&lt;/a&gt; 我们这里用ontime的值1-2分别代表最近，更早。 播放数量：123&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=1&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从高到低&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=2&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从低到高&lt;/span&gt;&lt;/a&gt; 我们这里用playnum的值1-2分别代表从高到低，从低到高。 评论数量：123&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=1&quot;......从高到低&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=2&quot; ......从低到高&lt;/span&gt;&lt;/a&gt; 我们这里用commnum的值1-2分别代表从高到低，从低到高。 5、修改视图函数我们打开views.py文件，继续完善我们的index视图：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061from app.models import Movie# 首页@home.route(&quot;/&lt;int:page&gt;/&quot;, methods=[&quot;GET&quot;])@home.route(&quot;/&quot;, methods=[&quot;GET&quot;])def index(page=None): tags = Tag.query.all() page_data = Movie.query movtag = request.args.get(&quot;movtag&quot;, 0) # 获取电影标签 if int(movtag) != 0: page_data = page_data.filter_by(tag_id=int(movtag)) star = request.args.get(&quot;star&quot;, 0) # 获取电影星级 if int(star) != 0: page_data = page_data.filter_by(star=int(star)) ontime = request.args.get(&quot;ontime&quot;, 0) # 获取上映时间 if int(ontime) != 0: if int(ontime) == 1: page_data = page_data.order_by( Movie.addtime.desc() ) else: page_data = page_data.order_by( Movie.addtime.asc() ) playnum = request.args.get(&quot;playnum&quot;, 0) # 获取播放数量 if int(playnum) != 0: if int(playnum) == 1: page_data = page_data.order_by( Movie.playnum.desc() ) else: page_data = page_data.order_by( Movie.playnum.asc() ) commnum = request.args.get(&quot;commnum&quot;, 0) # 获取评论数量 if int(commnum) != 0: if int(commnum) == 1: page_data = page_data.order_by( Movie.commentnum.desc() ) else: page_data = page_data.order_by( Movie.commentnum.asc() ) if page is None: page = 1 page_data = page_data.paginate(page=page, per_page=12) p = dict( movtag=movtag, star=star, ontime=ontime, playnum=playnum, commnum=commnum ) return render_template(&quot;home/index.html&quot;, tags=tags, p=p, page_data=page_data) 6、进行列表显示和分页配置打开搜索框，输入home.index，我们在这些后面添加page=1,一共5个地方： 如果少了运行就会报下面的错误：1werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.index&apos;. Did you forget to specify values [&apos;page&apos;]? 分页的配置就2步：首先复制这个置于文件开头：1&#123;% import &quot;ui/home_page.html&quot; as pg %&#125; 接着复制下面的替换静态分页效果：1&#123;&#123; pg.page(page_data, &quot;home.index&quot;) &#125;&#125; 别放错位置哈： 电影搜索和电影分页使用到的内容我们将使用到的内容有：模型：Movie表单: 无请求方法: GET访问控制: 无 1、书写搜索视图函数123456789101112131415# 搜索页面@home.route(&apos;/search/&lt;int:page&gt;/&apos;)def search(page=None): if page is None: page = 1 key = request.args.get(&apos;key&apos;, &apos;&apos;) movie_count = Movie.query.filter( Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;) # ilike可以进行模糊查询 ).count() page_data = Movie.query.filter( Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;) ).order_by( Movie.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;home/search.html&quot;, key=key, movie_count=movie_count, page_data=page_data) 2、修改home和layout页面为搜索电影加id=&quot;key_movie&quot;,与此同时为搜索添加id=&quot;do_search&quot;，还要删除搜索的链接href: 然后采用Jquery来控制搜索按钮，在JavaScript里面添加这段Jquery代码：1234$(&quot;#do_search&quot;).click(function () &#123; var key = $(&quot;#key_movie&quot;).val(); location.href = &quot;&#123;&#123; url_for(&apos;home.search&apos;, page=1) &#125;&#125;?key=&quot; + key; &#125;); 这段Jquery代码的意思是说，当点击class=”do_search”的搜索框时，就会去查询电影里面含有key的电影，并返回到search搜索结果列表页面。 注意这些操作都需要在home和layout页面进行，2个都要进行配置！！！ 然后就是分页了，就2步：首先复制这个置于文件开头：1&#123;% import &quot;ui/home_page.html&quot; as pg %&#125; 接着复制下面的替换静态分页效果：1&#123;&#123; pg.page(page_data, &quot;home.search&quot;) &#125;&#125; 别放错位置哈!!! 电影详情和电影播放使用到的内容我们将使用到的内容有：模型： Movie表单: 无请求方法: GET访问控制: 无 1、编写播放视图12345678# 详情页面@home.route(&apos;/play/&lt;int:id&gt;/&apos;)def play(id=None): movie = Movie.query.join(Tag).filter( Tag.id == Movie.tag_id, Movie.id == int(id) ).first_or_404() return render_template(&quot;home/play.html&quot;, movie=movie) 2、添加电影id打开搜索框，输入home.play，我们在这些后面添加id=v.id,一共3个地方： 3、修改播放页面显示注意一下星级：1234567&#123;% for val in range(1,movie.star+1) %&#125; &lt;span class=&quot;glyphicon glyphicon-star&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt; &#123;% endfor %&#125;&#123;% for val in range(1,5-movie.star) %&#125; &lt;span class=&quot;glyphicon glyphicon-star-empty&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt;&#123;% endfor %&#125; 还有底下的配置： 电影评论和电影统计使用到的内容我们将使用到的内容有：模型：Movie User Comment表单: CommentForm请求方法: GET ,POST访问控制: 需要登入 1、添加表单验证字段12345678910111213141516171819# 添加评论class CommentForm(FlaskForm): content = TextAreaField( label=&quot;内容&quot;, validators=[ DataRequired(&quot;请输入内容！&quot;), ], description=&quot;内容&quot;, render_kw=&#123; &quot;id&quot;: &quot;input_content&quot; &#125; ) submit = SubmitField( &apos;提交评论&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-success&quot;, &quot;id&quot;: &quot;btn-sub&quot; &#125; ) 2、判断登入和是否显示评论框打开play.html页面，我们修改成这样： 注意，是”user”，不是user，这个一定要注意哈！！！ 3、准备页面渲染字段打开home/views.py文件，我们修改play函数：1234567891011121314from app.home.forms import CommentForm# 详情页面@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def play(id=None): movie = Movie.query.join(Tag).filter( Tag.id == Movie.tag_id, Movie.id == int(id) ).first_or_404() form = CommentForm() if &quot;user&quot; in session and form.validate_on_submit(): data = form.data return render_template(&quot;home/play.html&quot;, movie=movie, form=form) 4、前台页面传值显示以及操作信息提示可以仿照后台的那些页面的配置来修改play.html: 5、继续完善我们的播放视图1234567891011121314151617181920212223242526from app.models import Comment# 详情页面@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def play(id=None): movie = Movie.query.join(Tag).filter( Tag.id == Movie.tag_id, Movie.id == int(id) ).first_or_404() movie.playnum = movie.playnum + 1 form = CommentForm() if &quot;user&quot; in session and form.validate_on_submit(): data = form.data comment = Comment( content=data[&quot;content&quot;], # 左侧字段与数据库Comment字段保持一致 movie_id=movie.id, user_id=session[&quot;user_id&quot;] ) db.session.add(comment) db.session.commit() flash(&quot;添加评论成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;home.play&quot;, id=movie.id)) movie.commentnum = movie.commentnum+1 db.session.add(movie) db.session.commit() return render_template(&quot;home/play.html&quot;, movie=movie, form=form) 然后你就可以去play.html页面添加我们的评论了！ 评论分页及显示我们继续修改我们的播放视图：123456789101112131415161718192021222324252627282930313233343536373839404142# 详情页面@home.route(&apos;/play/&lt;int:id&gt;/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def play(id=None, page=None): movie = Movie.query.join(Tag).filter( Tag.id == Movie.tag_id, Movie.id == int(id) ).first_or_404() if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = Comment.query.join( Movie ).join( User ).filter( Movie.id == movie.id, User.id == Comment.user_id ).order_by( Comment.addtime.desc() ).paginate(page=page, per_page=10) movie.playnum = movie.playnum + 1 form = CommentForm() if &quot;user&quot; in session and form.validate_on_submit(): data = form.data comment = Comment( content=data[&quot;content&quot;], # 左侧字段与数据库Comment字段保持一致 movie_id=movie.id, user_id=session[&quot;user_id&quot;] ) db.session.add(comment) db.session.commit() movie.commentnum = movie.commentnum + 1 db.session.add(movie) db.session.commit() flash(&quot;添加评论成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;home.play&quot;, id=movie.id, page=1)) movie.commentnum = movie.commentnum+1 db.session.add(movie) db.session.commit() return render_template(&quot;home/play.html&quot;, movie=movie, form=form, page_data=page_data) 然后就是在index.html 和search.html页面添加page=1: 接下来就是评论的遍历了，打开play.html页面，我们做如下修改： 别忘记了评论数量的统计显示： 然后运行一下我们的项目，发现评论出现了，但是有些却是html片段： 、那是因为为了保证页面的安全，都默认不允许直接显示html页面，我们可以和Django一样，管道符号加safe:1&lt;p&gt;&#123;&#123; v.content|safe &#125;&#125;&lt;/p&gt; 然后就是分页了：就2步：首先复制这个置于文件开头：1&#123;% import &quot;ui/home_page.html&quot; as pg %&#125; 接着复制下面的替换静态分页效果：1&#123;&#123; pg.page(page_data, &quot;home.play&quot;) &#125;&#125; 然后运行发现报了下面的错误：1werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.play&apos; with values [&apos;page&apos;]. Did you forget to specify values [&apos;id&apos;]? 因为这个页面是比较特殊的，我们需要做一下配置：在ui文件夹下面新建comment_page.html，把home_page.html的页面信息全部拷贝进去，然后添加id参数，以及在第几页添加id=id: 现在修改我们play.html的分页配置：开头变成1&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125; 下面也需要修改：1&#123;&#123; pg.page(page_data, &quot;home.play&quot;, movie.id) &#125;&#125; 就是这样： 然后刷新一下，看一下分页功能是否已经实现了呢！！！还记得我们之前在个人中心没有对个人评论进行配置吗，现在我们就可以配置了！ 个人中心评论配置首先需要修改我们的评论视图：12345678910111213141516171819# 评论记录@home.route(&apos;/comments/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])@user_login_reqdef comments(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = Comment.query.join( Movie ).join( User ).filter( Movie.id == Comment.movie_id, User.id == session[&quot;user_id&quot;] ).order_by( Comment.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;home/comments.html&quot;, page_data=page_data) 然后就是打开comments.html页面，我们直接复制paly.html页面那里面关于评论的那部分： 然后就是分页了，还是2步：首先复制这个置于文件开头：1&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125; 接着复制下面的替换静态分页效果：1&#123;&#123; pg.page(page_data, &quot;home.comments&quot;) &#125;&#125; 然后刷新一下，看看个人中心的评论记录是否都已经显示了呢！！！ 电影收藏使用到的内容我们将使用到的内容有：模型：Movie User Moviecol表单: 无请求方法: GET访问控制: 需要登录 1、新定义一个添加收藏函数：1234567891011121314151617181920212223# 添加收藏电影@home.route(&apos;/moviecol/add/&apos;, methods=[&quot;GET&quot;])@user_login_reqdef moviecol_add(): mid = request.args.get(&quot;mid&quot;, &quot;&quot;) uid = request.args.get(&quot;uid&quot;, &quot;&quot;) moviecol = MovieCol.query.filter_by( user_id=int(uid), movie_id=int(mid), ).count() if moviecol == 1: data = dict(ok=0) if moviecol == 0: moviecol = MovieCol( user_id=int(uid), movie_id=int(mid), ) db.session.add(moviecol) db.session.commit() data = dict(ok=1) import json return json.dumps(data) 2、采用ajax进行收藏的提示打开play.html页面，我们新定义一个Script，编写我们的ajax代码：1234567891011121314151617181920212223&lt;script&gt; $(document).ready(function () &#123; $(&quot;#btn-col&quot;).click(function () &#123; var mid = &#123;&#123; movie.id &#125;&#125;; var uid = &#123;&#123; session[&apos;user_id&apos;] &#125;&#125;; $.ajax(&#123; url: &quot;&#123;&#123; url_for(&apos;home.moviecol_add&apos;) &#125;&#125;&quot;, type: &quot;GET&quot;, data: &quot;mid=&quot; + mid + &quot;&amp;uid=&quot; + uid, dataType: &quot;json&quot;, success: function (res) &#123; if (res.ok == 1) &#123; $(&quot;#show_col_msg&quot;).empty(); $(&quot;#show_col_msg&quot;).append(&quot;收藏成功！&quot;); &#125; else &#123; $(&quot;#show_col_msg&quot;).empty(); $(&quot;#show_col_msg&quot;).append(&quot;已经收藏！&quot;); &#125; &#125; &#125;) &#125;); &#125;);&lt;/script&gt; 3、添加页面收藏提示继续在我们的play.html页面配置： 然后就可以去测试我们的电影收藏功能是否已经实现了呢，接下来就是会员中心收藏电影的一个显示了，这个和我们的评论记录的显示几乎一样，所以我快点配置。 个人中心电影收藏显示首先我们需要在menu.html页面配置收藏电影的page=1: 接着去完善我们的收藏电影moviecol，我们可以借鉴之前的会员登入日志的配置：123456789101112131415161718# 收藏电影@home.route(&apos;/moviecol/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@user_login_reqdef moviecol(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = MovieCol.query.join( Movie ).join( User ).filter( User.id == session[&quot;user_id&quot;], Movie.id == MovieCol.movie_id ).order_by( MovieCol.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;home/moviecol.html&quot;, page_data=page_data) 然后打开moviecol.html页面，我们进行收藏电影的显示： 可能会遗漏page=1和id=v.movie_id，但是页面运行时会提示你的，这个按照提示进行即可。 然后就是分页了：还是2步：首先复制这个置于文件开头（可以借鉴我们loginlog.html的配置）：1&#123;% import &quot;ui/home_page.html&quot; as pg %&#125; 接着复制下面的替换静态分页效果：1&#123;&#123; pg.page(page_data, &quot;home.moviecol&quot;) &#125;&#125; 然后刷新一下，看看个人中心收藏的电影是否都已经显示了呢！！！ 至此，本篇关于上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能的介绍就到此为止了。也就是说我们整个项目的开发就全部完成了，后面就是代码的优化和电影弹幕的实现了，我们下一篇介绍了，感谢你的赏阅！！！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十四篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（十三）：前台会员管理","slug":"利用Flask搭建微电影视频网站（十三）：前台会员管理","date":"2018-06-20T09:32:51.000Z","updated":"2019-11-04T13:08:37.264Z","comments":true,"path":"2018/06/20/利用Flask搭建微电影视频网站（十三）：前台会员管理/","link":"","permalink":"http://blog.licheetools.top/2018/06/20/利用Flask搭建微电影视频网站（十三）：前台会员管理/","excerpt":"","text":"写在前面从本篇笔记开始，我们将介绍前台的配置，也就是说现在你所有关于后台的页面都是可以关闭的，只需保留manage.py和moleds.py即可，好了话不多说，我们开始本篇的学习吧！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十三篇。 前台会员管理前台会员管理主要包括会员注册，会员登录，会员退出，修改会员资料（包括会员密码），会员登录日志等5个功能，下面分别介绍。 会员注册使用到的内容我们将使用到的内容有：模型：User表单: RegisterForm请求方法: GET ,POST访问控制: 无 1、添加表单验证字段打开home/forms.py，我们定义Form字段，注意因为是会员注册，所以对应的html页面就是register.html，而且我们在forms.py里面定义的字段必须与register.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问register.html页面，这样明显多了！），可以复制修改后台的代码验证字段：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#！/user/bin/python# -*- coding:utf-8 -*-# @Time: 2018/8/29 21:17# @Author: Envse# @File: forms.pyfrom flask_wtf import FlaskFormfrom wtforms import StringField, PasswordField, SubmitField, FileField, TextAreaField, SelectField, SelectMultipleFieldfrom wtforms.validators import DataRequired, ValidationError, EqualTo, Email, Regexpfrom app.models import User# 前台会员注册class RegisterForm(FlaskForm): name = StringField( label=&quot;昵称&quot;, validators=[ DataRequired(&quot;昵称不能为空！&quot;) ], description=&quot;昵称&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入昵称!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) email = StringField( label=&quot;邮箱&quot;, validators=[ DataRequired(&quot;邮箱不能为空！&quot;), Email(&quot;邮箱格式不正确！&quot;) ], description=&quot;邮箱&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入邮箱!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) phone = StringField( label=&quot;手机号码&quot;, validators=[ DataRequired(&quot;手机号码不能为空！&quot;), Regexp(&quot;1[3458]\\\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;) ], description=&quot;手机号码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, # 注意这个和后端页面的区别，不要拷贝错误 &quot;placeholder&quot;: &quot;请输入手机号码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) pwd = PasswordField( label=&quot;密码&quot;, validators=[ DataRequired(&quot;密码不能为空！&quot;) ], description=&quot;密码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入密码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) repwd = PasswordField( label=&quot;确认密码&quot;, validators=[ DataRequired(&quot;确认密码不能为空！&quot;), EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;) ], description=&quot;确认密码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入确认密码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) submit = SubmitField( &apos;注册&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-lg btn-success btn-block&quot;, &#125; ) def validate_name(self, field): name = field.data user = User.query.filter_by(name=name).count() if user == 1: raise ValidationError(&quot;该昵称已经存在！&quot;) def validate_email(self, field): email = field.data user = User.query.filter_by(email=email).count() if user == 1: raise ValidationError(&quot;该邮箱已经存在！&quot;) def validate_phone(self, field): phone = field.data user = User.query.filter_by(phone=phone).count() if user == 1: raise ValidationError(&quot;该手机号已经存在！&quot;) 2、准备页面渲染字段打开home/views.py文件，我们修改register函数：12345678910from app.home.forms import RegisterFormfrom app.models import User# 会员注册@home.route(&apos;/register/&apos;)def register(): form = RegisterForm() if form.validate_on_submit(): data = form.data return render_template(&quot;home/register.html&quot;, form=form) 3、后台页面传值显示以及操作信息提示可以仿照后台的那些页面的配置来修改register.html: 记得在submit的上面添加，还有form提交的方法：1&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt; 4、后台页面错误信息提示打开register.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的phone需要按照我们数据库里字段的要求进行修改）123&#123;% for err in form.phone.errors %&#125; &lt;div class=&quot;col-md-12&quot; id=&quot;error_phone&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/div&gt;&#123;% endfor %&#125; 5、修改会员注册函数12345678910111213141516171819202122232425from app.models import Userfrom werkzeug.security import generate_password_hashimport uuidfrom app import dbfrom flask import flash# 会员注册@home.route(&apos;/register/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def register(): form = RegisterForm() if form.validate_on_submit(): data = form.data user = User( name=data[&quot;name&quot;], email=data[&quot;email&quot;], phone=data[&quot;phone&quot;], pwd=generate_password_hash(data[&quot;pwd&quot;]), uuid=uuid.uuid4().hex ) db.session.add(user) db.session.commit() flash(&quot;恭喜你注册成功，赶紧登录吧！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;home.login&quot;)) return render_template(&quot;home/register.html&quot;, form=form) 6、数据库字段验证打开models.py文件，我们在User函数里面新增以下代码：123def check_pwd(self, pwd): from werkzeug.security import check_password_hash return check_password_hash(self.pwd, pwd) 然后运行一下我们的manage.py文件，就可以去首页注册我们的会员了！ 会员登录使用到的内容我们将使用到的内容有：模型：User表单: LoginForm请求方法: GET ,POST访问控制: 无 1、添加表单验证字段打开home/forms.py，我们定义Form验证字段：1234567891011121314151617181920212223242526272829303132# 前台会员登录class LoginForm(FlaskForm): name = StringField( label=&quot;账号&quot;, validators=[ DataRequired(&quot;账号不能为空！&quot;) ], description=&quot;账号&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入账号!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) pwd = PasswordField( label=&quot;密码&quot;, validators=[ DataRequired(&quot;密码不能为空！&quot;) ], description=&quot;密码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入密码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) submit = SubmitField( &apos;登录&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-lg btn-primary btn-block&quot;, #注意这里最好是primary，不要用success &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改login函数：123456789from app.home.forms import LoginForm# 登入@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def login(): form = LoginForm() if form.validate_on_submit(): data=form.data return render_template(&quot;home/login.html&quot;, form=form) 3、后台页面传值显示以及操作信息提示可以仿照后台的那些页面的配置来修改login.html: 记得在submit的上面添加，还有form提交的方法：1&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt; 4、后台页面错误信息提示打开login.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 5、修改登录函数:123456789101112131415161718192021# 登入@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])def login(): form = LoginForm() if form.validate_on_submit(): data=form.data user = User.query.filter_by(name=data[&quot;name&quot;]).first() if not user.check_pwd(data[&quot;pwd&quot;]): flash(&quot;密码错误！&quot;, &quot;err&quot;) return redirect(url_for(&quot;home.login&quot;)) session[&quot;user&quot;] = user.name session[&quot;user_id&quot;] = user.id userlog = UserLog( user_id=user.id, ip=request.remote_addr ) db.session.add(userlog) db.session.commit() return redirect(url_for(&quot;home.user&quot;)) return render_template(&quot;home/login.html&quot;, form=form) 然后运行一下我们的manage.py文件，就可以去首页登录我们的网站了！ 思考问题现在有这样的问题，就是假如我们的账号不存在（这种情况也是有的，你长时间没登录忘记账号和密码了，然后就随便输入），这时候就很容易出现下面的错误：12if not user.check_pwd(data[&quot;pwd&quot;]):AttributeError: &apos;NoneType&apos; object has no attribute &apos;check_pwd&apos; 所以我们可以添加账号的验证（没有必要进行密码的验证，因为账号都不存在，哪来的密码呢，哈哈哈哈哈哈哈哈），可以仿照之前的注册在loginForm中定义：12345def validate_name(self, field): name = field.data user = User.query.filter_by(name=name).count() if user == 0: raise ValidationError(&quot;该账号不存在！&quot;) 会员登出会员登出相比其他是非常简单的，只需要把session里面的user和user_id删除即可：123456# 登出@home.route(&apos;/logout/&apos;)def logout(): session.pop(&quot;user&quot;, None) # 重定向到前台的登录页面 session.pop(&quot;user_id&quot;, None) return redirect(url_for(&apos;home.login&apos;)) 既然登出了，就不能查看登入之后的信息了，我们可以采用登入装饰器来控制访问,可以复制我们之前在admin里面配置的那个就可以：1234567891011from functools import wraps# 登录装饰器def user_login_req(f): @wraps(f) def decorated_function(*args, **kwargs): if &quot;user&quot; not in session: return redirect(url_for(&quot;home.login&quot;, next=request.url)) return f(*args, **kwargs) return decorated_function 然后就要在这些页面添加控制访问的权限了： 接下来就是会员中心资料的修改了！ 会员中心资料修改使用到的内容我们将使用到的内容有：模型：User表单: UserdetailForm请求方法: GET ,POST访问控制: @user_login_req 1、添加表单验证字段12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# 修改个人资料class UserdetailForm(FlaskForm): name = StringField( label=&quot;昵称&quot;, validators=[ DataRequired(&quot;昵称不能为空！&quot;) ], description=&quot;昵称&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入昵称!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) email = StringField( label=&quot;邮箱&quot;, validators=[ DataRequired(&quot;邮箱不能为空！&quot;), Email(&quot;邮箱格式不正确！&quot;) ], description=&quot;邮箱&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入邮箱!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) phone = StringField( label=&quot;手机号码&quot;, validators=[ DataRequired(&quot;手机号码不能为空！&quot;), Regexp(&quot;1[3458]\\\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;) ], description=&quot;手机号码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control input-lg&quot;, &quot;placeholder&quot;: &quot;请输入手机号码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) face = FileField( label=&quot;头像&quot;, validators=[ DataRequired(&quot;请上传头像！&quot;) ], description=&quot;头像&quot;, ) info = TextAreaField( label=&quot;简介&quot;, validators=[ DataRequired(&quot;简介不能为空&quot;) ], description=&quot;简介&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;rows=&quot;: 10, &#125; ) submit = SubmitField( &apos;保存修改&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-success&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改user函数：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from app.home.forms import UserdetailFormfrom werkzeug.utils import secure_filenameimport osimport datetimefrom datetime import datetime# 会员中心@home.route(&apos;/user/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@user_login_reqdef user(): form = UserdetailForm() user = User.query.get(int(session[&quot;user_id&quot;])) form.face.validators = [] if request.method == &quot;GET&quot;: # 给它们赋初始值 form.name.data = user.name form.email.data = user.email form.phone.data = user.phone form.info.data = user.info if form.validate_on_submit(): data = form.data if form.face.data != &quot;&quot;: # 没有修改时不能报错 file_face = secure_filename(form.face.data.filename) if not os.path.exists(app.config[&quot;FC_DIR&quot;]): os.makedirs(app.config[&quot;FC_DIR&quot;]) os.chmod(app.config[&quot;FC_DIR&quot;]) user.face = change_filename(file_face) form.face.data.save(app.config[&quot;FC_DIR&quot;] + user.face) name_count = User.query.filter_by(name=data[&quot;name&quot;]).count() if data[&quot;name&quot;] != user.name and name_count == 1: flash(&quot;该昵称已经存在!&quot;, &quot;err&quot;) return redirect(url_for(&quot;home.user&quot;)) email_count = User.query.filter_by(email=data[&quot;email&quot;]).count() if data[&quot;email&quot;] != user.email and email_count == 1: flash(&quot;该邮箱已经存在!&quot;, &quot;err&quot;) return redirect(url_for(&quot;home.user&quot;)) phone_count = User.query.filter_by(phone=data[&quot;phone&quot;]).count() if data[&quot;phone&quot;] != user.phone and phone_count == 1: flash(&quot;该手机已经存在!&quot;, &quot;err&quot;) return redirect(url_for(&quot;home.user&quot;)) user.name = data[&quot;name&quot;] user.email = data[&quot;email&quot;] user.phone = data[&quot;phone&quot;] user.info = data[&quot;info&quot;] db.session.add(user) db.session.commit() flash(&quot;修改成功!&quot;, &quot;ok&quot;) return redirect(url_for(&quot;home.user&quot;)) return render_template(&quot;home/user.html&quot;, form=form, user=user) 3、在初始的–init–.py文件里面，新增我们的图片存储地址：1app.config[&quot;FC_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/users/&quot;) 4、后台页面传值显示以及操作信息提示可以仿照前面的auth_add.html来修改user.html: 记得在submit的上面添加，还有form提交的方法以及图片上传类型：1&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 5、前台页面错误信息提示打开user.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 6、设置头像默认值打开user.html页面，我们给用户头像一个初始值： 然后运行一下我们的manage.py文件，就可以去后台修改个人中心的信息了！ 修改密码使用到的内容我们将使用到的内容有：模型：User表单: PwdForm请求方法: GET ,POST访问控制: @user_login_req 1、添加表单验证字段这个表单验证字段和我们后台定义的修改密码是一模一样的，所以我们完全可以复制粘贴之前的代码：1234567891011121314151617181920212223242526272829303132# 修改密码class PwdForm(FlaskForm): old_pwd = PasswordField( label=&quot;旧密码&quot;, validators=[ DataRequired(&quot;旧密码不能为空！&quot;) ], description=&quot;旧密码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入旧密码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) new_pwd = PasswordField( label=&quot;新密码&quot;, validators=[ DataRequired(&quot;新密码不能为空！&quot;) ], description=&quot;新密码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入新密码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) submit = SubmitField( &apos;修改密码&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-success&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改pwd函数（这个和我们后台修改密码一样，复制修改一下即可）：12345678910111213141516from app.home.forms import PwdForm# 修改密码@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@user_login_reqdef pwd(): form = PwdForm() if form.validate_on_submit(): # 表单验证，没有这个则无法进行错误信息提示 data = form.data user = User.query.filter_by(name=session[&quot;user&quot;]).first() user.pwd = generate_password_hash(data[&quot;new_pwd&quot;]) db.session.add(user) db.session.commit() flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;home.logout&quot;)) return render_template(&quot;home/pwd.html&quot;, form=form) 3、前台页面传值显示以及操作信息提示可以仿照前面的auth_add.html来修改pwd.html: 记得在submit的上面添加，还有form提交的方法：1&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt; 4、前台页面错误信息提示打开pwd.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 5、修改一下密码函数1234567891011121314151617181920# 修改密码@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@user_login_reqdef pwd(): form = PwdForm() if form.validate_on_submit(): # 表单验证，没有这个则无法进行错误信息提示 data = form.data user = User.query.filter_by(name=session[&quot;user&quot;]).first() if not user.check_pwd(data[&quot;old_pwd&quot;]): flash(&quot;旧密码错误！&quot;, &quot;err&quot;) return redirect(url_for(&apos;home.pwd&apos;)) if data[&quot;old_pwd&quot;] == data[&quot;new_pwd&quot;]: flash(&quot;新旧密码不能一样！&quot;, &quot;err&quot;) return redirect(url_for(&apos;home.pwd&apos;)) user.pwd = generate_password_hash(data[&quot;new_pwd&quot;]) db.session.add(user) db.session.commit() flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;home.logout&quot;)) return render_template(&quot;home/pwd.html&quot;, form=form) 然后运行一下我们的manage.py文件，就可以去个人中心修改密码了！鉴于评论现在配置过早，我们现在暂且不配置，转向对登入日志的配置！ 登入日志使用到的内容我们将使用到的内容有：模型：User表单: 无请求方法: GET访问控制: @user_login_req 1、编写登入日志函数这个是完全可以参考我们之前在后台对会员登录日志列表的配置：12345678910111213# 登入日志@home.route(&apos;/loginlog/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@user_login_reqdef loginlog(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = UserLog.query.filter_by( user_id=int(session[&quot;user_id&quot;]) ).order_by( UserLog.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;home/loginlog.html&quot;, page_data=page_data) 2、遍历所要信息打开loginlog.html页面，我们进行配置：1234567 &#123;% for v in page_data.items %&#125; &lt;tr&gt;&lt;td&gt;&#123;&#123; v.id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; v.addtime &#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123; v.ip &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; 3、添加列表页记得之前说过，凡是需要列表显示的都要有列表页page=1,打开menu.html，我们添加page=1即可！ 4、分页显示我们在ui文件夹下面新建一个名为home_page.html的页面，将之前的admin_page.html的代码拷贝进去，然后我们修改一下我们所指示的地方，增加nav标签，和修改class属性： 接着就是开头的引入：1&#123;% import &quot;ui/home_page.html&quot; as pg %&#125; 以及后面的替换：123&lt;div class=&quot;box-footer clearfix&quot;&gt; &#123;&#123; pg.page(page_data, &quot;home.loginlog&quot;) &#125;&#125;&lt;/div&gt; 就是这个样子： 鉴于篇幅过长，后面的内容我们下一篇再介绍！ 至此，本篇关于前台会员管理的介绍就到此为止了，感谢你的赏阅！！！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十三篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（十二）：角色和管理员管理","slug":"利用Flask搭建微电影视频网站（十二）：角色和管理员管理","date":"2018-06-18T09:31:41.000Z","updated":"2019-11-04T13:08:18.080Z","comments":true,"path":"2018/06/18/利用Flask搭建微电影视频网站（十二）：角色和管理员管理/","link":"","permalink":"http://blog.licheetools.top/2018/06/18/利用Flask搭建微电影视频网站（十二）：角色和管理员管理/","excerpt":"","text":"写在前面本篇笔记，我们介绍角色管理，管理员管理以及访问权限控制这是三个功能。角色管理，管理员管理这个和前面介绍的标签，电影，预告管理也是差不多的，所以我就加快速度，话不多说，开始学习吧。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十二篇。 角色管理角色管理和上面的权限管理是非常相似的，所以有些操作就是复制粘贴和套用了！ 使用到的内容我们将使用到的内容有：模型：Role表单: RoleForm请求方法: GET ,POST访问控制: @admin_login_req 1、添加表单验证字段打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是role_add.html，而且我们在forms.py里面定义的字段必须与role_add.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问role_add.html页面，这样明显多了！）12345678910111213141516171819202122232425262728293031323334353637from wtforms import SelectMultipleFieldfrom app.models import Auth# 添加角色class RoleFrom(FlaskForm): name = StringField( label=&quot;角色名称&quot;, validators=[ DataRequired(&quot;角色名称不能为空&quot;) ], description=&quot;角色名称&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_name&quot;, &quot;placeholder&quot;: &quot;请输入角色名称！&quot; &#125; ) auths = SelectMultipleField( label=&quot;权限列表&quot;, validators=[ DataRequired(&quot;权限列表不能为空&quot;) ], coerce=int, choices=[(v.id, v.name) for v in Auth.query.all()], # 数据动态填充选择，采用列表生成式 description=&quot;权限列表&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_url&quot;, &quot;placeholder&quot;: &quot;请选择角色列表！&quot; &#125; ) submit = SubmitField( &apos;修改&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-primary&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改role_add函数：123456789from app.admin.forms import RoleFormfrom app.models import Role# 添加权限@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef role_add(): form = RoleForm() return render_template(&quot;admin/role_add.html&quot;, form=form) 3、后台页面传值显示以及操作信息提示可以仿照前面的auth_add.html来修改role_add.html: 记得在submit的上面添加，还有form提交的方法：1&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt; 4、后台页面错误信息提示打开role_add.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 5、修改角色添加函数123456789101112131415# 添加角色@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef role_add(): form = RoleFrom() if form.validate_on_submit(): data = form.data role = Role( name=data[&quot;name&quot;], auths=&apos;,&apos;.join(map(str, data[&quot;auths&quot;])) # 采用高阶函数map来生成一个迭代器，然后用&apos;&apos;.join()来序列为一个字符串对象 ) db.session.add(role) db.session.commit() flash(&quot;添加角色成功！&quot;, &quot;ok&quot;) return render_template(&quot;admin/role_add.html&quot;, form=form) 然后运行一下我们的manage.py文件，就可以去后台添加我们的角色了： 查询一下数据库，发现这样的信息就说明权限添加成功了：123456789101112mysql&gt; select * from role;+----+-------------+-------+---------------------+| id | name | auths | addtime |+----+-------------+-------+---------------------+| 1 | 超级管理员 | NULL | 2018-08-17 16:11:06 || 2 | 管理员 | 1235 | 2018-08-12 16:24:18 || 3 | 管理员1 | 12 | 2018-08-12 16:24:26 || 4 | 管理员2 | 123 | 2018-08-12 16:24:33 |+----+-------------+-------+---------------------+4 rows in set (0.00 sec)mysql&gt; 角色列表的配置打开我们的views.py文件，我们参考之前的权限列表的配置，对角色列表进行配置：1234567891011# 角色列表@admin.route(&apos;/role/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef role_list(page=None): if page is None: page = 1# 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = Role.query.order_by( Role.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/role_list.html&quot;, page_data=page_data) 接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的： 然后我们打开role_list.html页面，进行for循环的填充： 然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个 ……. 标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.role_list&quot;) &#125;&#125; 至此，关于角色列表的介绍就到此为止了！接下来是角色的删除！ 角色的删除打开views.py文件，我们新定义role_del函数：（仿照权限删除的函数）123456789# 角色删除@admin.route(&apos;/role/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef role_del(id=None): role = Role.query.filter_by(id=id).first_or_404() db.session.delete(role) db.session.commit() flash(&quot;角色删除成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.role_list&quot;, page=1)) 然后打开role_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的auth_list.html页面的那一部分）： 提示：有小伙伴们问我为啥需要添加这个操作成功的信息提示，那是因为我们的删除操作是在我们当前的列表页面进行的，所以自然我们的页面操作提示信息就应该放在列表页！！！ 最后别忘了在role_list.html页面添加删除跳转链接：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt; 然后去测试一下我们的项目，看一看角色删除功能是否已经实现了呢，接下来进行角色的编辑功能的实现！ 角色的编辑打开views.py文件，我们在角色列表的下面新增以下代码：1234567891011121314151617# 角色编辑@admin.route(&apos;/role/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef role_edit(id=None): form = RoleForm() # 实例化一个TagForm，然后将form传递到前端页面去。 role = Role.query.get_or_404(id) if request.method == &quot;GET&quot;: form.auths.data = list(map(int, role.auths.split(&quot;,&quot;))) # form.auths.data为整形数组，而role.auths为一个可变字符串 if form.validate_on_submit(): data = form.data role.auths = &apos;,&apos;.join(map(str, data[&quot;auths&quot;])) role.name = data[&quot;name&quot;] db.session.add(role) db.session.commit() flash(&quot;修改角色成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.role_edit&quot;, id=id)) return render_template(&quot;admin/role_edit.html&quot;, form=form, role=role) 接着在admin下面新建role_edit.html页面，将role_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值： 记住那个是无法直接给它付初始值的，我们采用GET方法来请求！ 然后在role_list里面修改页面的跳转：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt; 刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！ 错误修正近期有小伙伴反映页面跳转到1http://127.0.0.1:5000/admin/role/edit/&lt;int:id&gt; 就出下面的错误：12builtins.AttributeErrorAttributeError: &apos;NoneType&apos; object has no attribute &apos;split&apos; 然后我通过单点测试，发现原来这个form.auths.data是个空值： 但是呢，这个choices却不是，它是一个list，里面又有tuple。我们可以考虑取出每个tuple的第一个元素，它是Int类型，然后构造一个新的int类型的list:1list(map(lambda x: x[0], form.auths.choices)) 而且我们知道，我们这个role.auths它其实是一个varchar类型，所以我们也可以把它变为一个int类型的list：1list(map(int, auths.split(&quot;,&quot;))) 然后就是这样：1list(map(lambda x: x[0], form.auths.choices))==list(map(int, auths.split(&quot;,&quot;))) 把之前的：1form.auths.data = list(map(int, role.auths.split(&quot;,&quot;))) # form.auths.data为整形数组，而role.auths为一个可变字符串 替换掉！！！记住我们不可以修改超级管理员的角色名称和权限，因为超级管理员权力最大，如果某个权限连它都没有的话，那就没有人有了！！！ 管理员管理使用到的内容我们将使用到的内容有：模型：Admin表单: AdminForm请求方法: GET ,POST访问控制: @admin_login_req 1、添加表单验证字段打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是admin_add.html，而且我们在forms.py里面定义的字段必须与admin_add.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问admin_add.html页面，这样明显多了！）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465from app.models import Rolefrom wtforms.validators import EqualTo # EqualTo 用于比对两次密码是否一致！ # 添加管理员class AdminForm(FlaskForm): name = StringField( label=&quot;管理员名称&quot;, validators=[ DataRequired(&quot;管理员名称不能为空！&quot;) ], description=&quot;管理员名称&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入管理员名称!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) pwd = PasswordField( label=&quot;管理员密码&quot;, validators=[ DataRequired(&quot;管理员密码不能为空！&quot;) ], description=&quot;管理员密码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入管理员密码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) repwd = PasswordField( label=&quot;管理员重复密码&quot;, validators=[ DataRequired(&quot;管理员重复密码不能为空！&quot;), EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;) ], description=&quot;管理员重复密码&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: &quot;请输入管理员重复密码!&quot;, # &quot;required&quot;: &quot;required&quot; # 注释此处显示forms报错errors信息 &#125; ) role_id = SelectField( label=&quot;所属角色&quot;, validators=[ DataRequired(&quot;请选择所属角色！&quot;) ], # 所属角色是整数型 coerce=int, # 采用下拉选择的方式进行所属角色的选择 choices=[(v.id, v.name) for v in Role.query.all()], description=&quot;所属角色&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &#125; ) submit = SubmitField( &apos;编辑&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-primary btn-block btn-flat&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改admin_add函数：1234567891011121314151617181920from app.admin.forms import AdminForm# 添加管理员@admin.route(&apos;/admin/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef admin_add(): form = AdminForm() from werkzeug.security import generate_password_hash if form.validate_on_submit(): data = form.data admin = Admin( name=data[&quot;name&quot;], pwd=generate_password_hash(data[&quot;pwd&quot;]), role_id=data[&quot;role_id&quot;], is_super=1 # 普通管理员为1 ) db.session.add(admin) db.session.commit() flash(&quot;添加管理员成功！&quot;, &quot;ok&quot;) return render_template(&quot;admin/admin_add.html&quot;, form=form) 3、后台页面传值显示以及操作信息提示可以仿照前面的role_add.html来修改admin_add.html: 记得在submit的上面添加，还有form提交的方法：1&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt; 4、后台页面错误信息提示打开admin_add.html页面，我们同样可以仿照admin_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 然后运行一下我们的manage.py文件，就可以去后台添加我们的管理员了： 管理员列表的配置打开我们的views.py文件，我们参考之前的角色列表的配置，对管理员列表进行配置：1234567891011121314# 管理员列表@admin.route(&apos;/admin/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef admin_list(page=None): if page is None: page = 1 page_data = Admin.query.join( Role ).filter( Role.id == Admin.role_id ).order_by( Admin.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/admin_list.html&quot;, page_data=page_data) 接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的： 然后我们打开admin_list.html页面，进行for循环的填充： 然后就是分页功能了，我们参考之前在标签列表页面的配置，打开admin_list.html,删除那个&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.admin_list&quot;) &#125;&#125; 错误提示：最近有小伙伴告诉我，一点击管理员列表就会出现这样的错误：1jinja2.exceptions.UndefinedError: &apos;app.models.Admin object&apos; has no attribute &apos;role&apos; 那么你需要检查我们的models.py文件，查看我们的Role函数里面是否有这个字段：1admins = db.relationship(&quot;Admin&quot;, backref=&apos;role&apos;) # 管理员外键关系关联 如果没有请添加，这样就应该不会出错了！ 至此，关于管理员列表的介绍就到此为止了，下面介绍访问权限控制的配置！ 访问权限控制的配置打开views.py文件，我们新定义一个访问权限控制装饰器：123456789101112131415161718192021from flask import abort# 访问权限控制装饰器def admin_auth(f): @wraps(f) def decorated_function(*args, **kwargs): admin = Admin.query.join( Role ).filter( Role.id == Admin.role_id, Admin.id == session[&quot;admin_id&quot;] ).first() auths = admin.role.auths auths = list(map(int, auths.split(&quot;,&quot;))) auth_list = Auth.query.all() urls = [v.url for v in auth_list for val in auths if val == v.id] rule = request.url_rule if str(rule) not in urls: abort(404) return f(*args, **kwargs) return decorated_function 接下来给除了登录和后台首页以外所有的函数都加上访问权限控制装饰器，然后运行manage.py测试一下我们的项目是否可以使用。 不过这样在代码里面添加访问权限控制器挺累的，等有时间准备做一个后台权限分配页面，这样可视化操作就比较人性化了。 至此，本篇关于角色管理，管理员管理以及访问权限控制的介绍就到此为止了。也就是说所有后台的管理配置都介绍完了，下一篇我们就开始进行前台页面的配置，感谢你的赏阅。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十二篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（十一）：日志管理和权限管理","slug":"利用Flask搭建微电影视频网站（十一）：日志管理和权限管理","date":"2018-06-16T09:30:43.000Z","updated":"2019-11-04T13:09:07.694Z","comments":true,"path":"2018/06/16/利用Flask搭建微电影视频网站（十一）：日志管理和权限管理/","link":"","permalink":"http://blog.licheetools.top/2018/06/16/利用Flask搭建微电影视频网站（十一）：日志管理和权限管理/","excerpt":"","text":"写在前面本篇笔记，我们介绍日志管理和权限管理，其中日志管理包括操作日志列表，管理员登录日志列表，会员登录日志列表，这个和前面介绍的标签，电影，预告管理也是差不多，所以我就加快速度，话不多说，开始学习吧。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十一篇。 日志管理操作日志列表使用到的内容我们将使用到的内容有：模型：Oplog ，Userlog ，Adminlog表单: 无 （这个不涉及到表单的提交）请求方法: GET访问控制: @admin_login_req 上下文应用处理器这里我们需要引入上下文应用处理器的概念，它是可以封装全局变量并把全局变量展现到模板里面，我们前面在个人中心里面没有对操作时间进行配置，因为操作时间就是需要用到上下文处理器。我们打开views.py文件，新定义下面的函数：123456789import datetime# 上下文处理器@admin.context_processordef tpl_extra(): data = dict( online_time=datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;) ) return data 接着用我们这里定义的online_time，去填充我们的admin.html页面里面的操作时间：然后刷新一下我们的页面，发现操作时间就可以正常显示了。 注意一下，import datetime和from datetime import datetime是不同的，你可以点击这里区别！ 记录增删改查操作打开views.py文件，我们需要把登录时用户的id一块记录下来，修改登录函数： 12session[&quot;admin_id&quot;] = admin.idsession.pop(&quot;admin_id&quot;, None) 然后继续完善我们的视views.py,我们这里以添加标签为例，进行操作的记录演示：12345678910from app.models import OpLog, UserLog, AdminLogoplog = OpLog( admin_id=session[&quot;admin_id&quot;], ip=request.remote_addr, reason=&quot;添加标签%s&quot; % data[&quot;name&quot;] ) db.session.add(oplog) db.session.commit() 就是这样： flask中获取ip地址使用request.remote_addr，可以点击这里了解一下：python使用Flask框架获取用户IP地址的方法 接下来你可以去添加几个标签，然后查询一下数据库，看是不是有了相应的记录！ 然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。 操作日志页面显示打开views.py文件，我们修改日志列表函数：123456789101112131415# 操作日志列表@admin.route(&apos;/oploglist/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef oplog_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = OpLog.query.join( Admin ).filter( Admin.id == OpLog.admin_id ).order_by( OpLog.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/oplog_list.html&quot;, page_data=page_data) 然后打开oplog_list.html页面，开始for循环的遍历： 然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.oplog_list&quot;) &#125;&#125; 最后别忘了去grid.html页面，添加page=1:123&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.oplog_list&apos;, page=1) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 操作日志列表&lt;/a&gt; 至此，关于操作日志列表的介绍就到此为止了！接下来是管理员登录日志列表！ 管理员登录日志列表管理员登录日志列表是处理与管理员登录有关的列表，自然而的我们就要修改我们的登录函数了：123456adminlog = AdminLog( admin_id=session[&quot;admin_id&quot;], ip=request.remote_addr, ) db.session.add(adminlog) db.session.commit() 接下来你可以重新登录或退出，然后查询一下数据库，看是不是有了相应的记录！ 然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。 管理员登录日志页面显示打开views.py文件，我们修改管理员登录日志列表函数：123456789101112131415# 管理员登录日志列表@admin.route(&apos;/adminloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef adminloginlog_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = AdminLog.query.join( Admin ).filter( Admin.id == AdminLog.admin_id ).order_by( AdminLog.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/adminloginlog_list.html&quot;, page_data=page_data) 然后打开adminloginlog_list.html页面，开始for循环的遍历： 然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.adminloginlog_list&quot;) &#125;&#125; 最后别忘了去grid.html页面，添加page=1:123&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.adminloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 管理员登录日志列表 &lt;/a&gt; 至此，关于管理员登录日志列表的介绍就到此为止了！接下来是会员登录日志列表！ 会员登录日志列表为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入cmd，然后输入mysql -uroot -proot后回车，接着use movie; 然后查询一下userlog的信息：select * from userlog;接着复制粘贴下面的代码:123456789insert into userlog(user_id,ip,addtime) values(1,&quot;192.188.8.1&quot;,now());insert into userlog(user_id,ip,addtime) values(2,&quot;192.188.8.2&quot;,now());insert into userlog(user_id,ip,addtime) values(3,&quot;192.188.8.3&quot;,now());insert into userlog(user_id,ip,addtime) values(4,&quot;192.188.8.4&quot;,now());insert into userlog(user_id,ip,addtime) values(5,&quot;192.188.8.5&quot;,now());insert into userlog(user_id,ip,addtime) values(6,&quot;192.188.8.6&quot;,now());insert into userlog(user_id,ip,addtime) values(7,&quot;192.188.8.7&quot;,now());insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.8&quot;,now());insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.9&quot;,now()); 之后回车，然后再次查询一下我们的数据库：select * from userlog;，看是不是这样的信息：1234567891011121314151617mysql&gt; select * from userlog;+----+---------+-------------+---------------------+| id | user_id | ip | addtime |+----+---------+-------------+---------------------+| 1 | 1 | 192.188.8.1 | 2018-08-11 18:24:37 || 2 | 2 | 192.188.8.2 | 2018-08-11 18:24:38 || 3 | 3 | 192.188.8.3 | 2018-08-11 18:24:38 || 4 | 4 | 192.188.8.4 | 2018-08-11 18:24:38 || 5 | 5 | 192.188.8.5 | 2018-08-11 18:24:38 || 6 | 6 | 192.188.8.6 | 2018-08-11 18:24:38 || 7 | 7 | 192.188.8.7 | 2018-08-11 18:24:38 || 8 | 8 | 192.188.8.8 | 2018-08-11 18:24:38 || 9 | 8 | 192.188.8.9 | 2018-08-11 18:24:38 |+----+---------+-------------+---------------------+9 rows in set (0.19 sec)mysql&gt; 接着打开views.py文件，我们修改会员登录日志列表函数（仿照之前的管理员登录列表）：12345678910111213141516# 会员登录日志列表@admin.route(&apos;/userloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef userloginlog_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = UserLog.query.join( User ).filter( User.id == UserLog.user_id ).order_by( UserLog.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/userloginlog_list.html&quot;, page_data=page_data) 然后打开userloginlog_list.html页面，开始for循环的遍历： 然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.userloginlog_list&quot;) &#125;&#125; 最后别忘了去grid.html页面，添加page=1:123 &lt;a href=&quot;&#123;&#123; url_for(&apos;admin.userloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员登录日志列表&lt;/a&gt; 至此，关于会员登录日志列表的介绍就到此为止了，接下来便是权限管理的介绍了！ 权限管理使用到的内容我们将使用到的内容有：模型：Auth表单: AuthForm请求方法: GET，POST访问控制: @admin_login_req 1、添加表单验证字段打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是auth_add.html，而且我们在forms.py里面定义的字段必须与auth_add.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问auth_add.html页面，这样明显多了！）1234567891011121314151617181920212223242526272829303132# 添加权限class AuthForm(FlaskForm): name = StringField( label=&quot;权限名称&quot;, validators=[ DataRequired(&quot;权限名称不能为空&quot;) ], description=&quot;权限名称&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_name&quot;, &quot;placeholder&quot;: &quot;请输入权限名称！&quot; &#125; ) url = StringField( label=&quot;权限地址&quot;, validators=[ DataRequired(&quot;权限地址不能为空&quot;) ], description=&quot;权限地址&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_url&quot;, &quot;placeholder&quot;: &quot;请输入权限地址！&quot; &#125; ) submit = SubmitField( &apos;修改&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-primary&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改auth_add函数：123456789from app.admin.forms import AuthFormfrom app.models import Auth# 添加权限@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef auth_add(): form = AuthForm() return render_template(&quot;admin/auth_add.html&quot;, form=form) 3、后台页面传值显示以及操作信息提示可以仿照前面的movie_add.html来修改auth_add.html: 记得在submit的上面添加，还有form提交的方法：1&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt; 4、后台页面错误信息提示打开auth_add.html页面，我们同样可以仿照movie_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 5、修改权限添加函数123456789101112131415# 添加权限@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef auth_add(): form = AuthForm() if form.validate_on_submit(): data = form.data auth = Auth( name=data[&quot;name&quot;], url=data[&quot;url&quot;] ) db.session.add(auth) db.session.commit() flash(&quot;添加权限成功！&quot;, &quot;ok&quot;) return render_template(&quot;admin/auth_add.html&quot;, form=form) 然后运行一下我们的manage.py文件，就可以去后台添加我们的权限了： 查询一下数据库，发现这样的信息就说明权限添加成功了：123456789101112mysql&gt; select * from auth;+----+--------------------+-----------------------------+---------------------+| id | name | url | addtime |+----+--------------------+-----------------------------+---------------------+| 1 | 添加标签权限 | /admin/tag/add | 2018-08-12 14:42:30 || 2 | 编辑标签权限 | /admin/tag/edit/&lt;int:id&gt;/ | 2018-08-12 14:44:07 || 3 | 标签列表权限 | /admin/tag/list/&lt;int:page&gt;/ | 2018-08-12 14:45:00 || 5 | 删除标签权限 | /admin/tag/del/&lt;int:id&gt;/ | 2018-08-12 14:46:02 |+----+--------------------+-----------------------------+---------------------+4 rows in set (0.10 sec)mysql&gt; 权限列表的配置打开我们的views.py文件，我们参考之前的标签列表的配置，对权限列表进行配置：123456789101112# 权限列表@admin.route(&apos;/auth/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef auth_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = Auth.query.order_by( Auth.addtime.desc() ).paginate(page=page, per_page=2) return render_template(&quot;admin/auth_list.html&quot;, page_data=page_data) 接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的： 然后我们打开auth_list.html页面，进行for循环的填充： 然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.auth_list&quot;) &#125;&#125; 至此，关于权限列表的介绍就到此为止了！接下来是权限的删除！ 权限的删除打开views.py文件，我们新定义auth_del函数：（仿照会员删除的函数）123456789# 权限删除@admin.route(&apos;/auth/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef auth_del(id=None): auth = Auth.query.filter_by(id=id).first_or_404() db.session.delete(auth) db.session.commit() flash(&quot;权限删除成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.auth_list&quot;, page=1)) 然后打开auth_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）： 最后别忘了在auth_list.html页面添加删除跳转链接：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt; 然后去测试一下我们的项目，看一看权限删除功能是否已经实现了呢，接下来进行权限的编辑功能的实现！ 权限的编辑打开views.py文件，我们在权限列表的下面新增以下代码：123456789101112131415# 权限编辑@admin.route(&apos;/auth/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef auth_edit(id=None): form = AuthForm() # 实例化一个TagForm，然后将form传递到前端页面去。 auth = Auth.query.get_or_404(id) if form.validate_on_submit(): data = form.data auth.url = data[&quot;url&quot;] auth.name = data[&quot;name&quot;] db.session.add(auth) db.session.commit() flash(&quot;修改权限成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.auth_edit&quot;, id=id)) return render_template(&quot;admin/auth_edit.html&quot;, form=form, auth=auth) 接着在admin下面新建auth_edit.html页面，将auth_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值： 然后在auth_list里面修改页面的跳转：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt; 刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！ 至此，本篇关于日志管理和权限管理的介绍就到此为止了，感谢你的赏阅！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第十一篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（十）：收藏管理和密码修改","slug":"利用Flask搭建微电影视频网站（十）：收藏管理和密码修改","date":"2018-06-14T09:28:55.000Z","updated":"2019-11-04T13:08:06.638Z","comments":true,"path":"2018/06/14/利用Flask搭建微电影视频网站（十）：收藏管理和密码修改/","link":"","permalink":"http://blog.licheetools.top/2018/06/14/利用Flask搭建微电影视频网站（十）：收藏管理和密码修改/","excerpt":"利用Flask搭建微电影视频网站（十）：收藏管理和密码修改。","text":"对不起，此文章为加密内容，只有管理员才能查看。 Incorrect Password! No content to display! ","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（九）：会员和评论管理","slug":"利用Flask搭建微电影视频网站（九）：会员和评论管理","date":"2018-06-13T09:27:56.000Z","updated":"2019-11-04T13:07:27.086Z","comments":true,"path":"2018/06/13/利用Flask搭建微电影视频网站（九）：会员和评论管理/","link":"","permalink":"http://blog.licheetools.top/2018/06/13/利用Flask搭建微电影视频网站（九）：会员和评论管理/","excerpt":"","text":"写在前面本篇笔记，我们介绍会员和评论管理，这个和前面介绍的标签，电影，预告管理差不多，所以我就加快速度，话不多说，开始学习吧。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第九篇。 会员管理使用到的内容我们将使用到的内容有：模型：User表单: 无 （这个不涉及到表单的提交）请求方法: GET ,POST访问控制: @admin_login_req 插入一些数据为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入cmd，然后输入mysql -uroot -proot后回车，接着use movie; 然后查询一下user的信息：select * from user;接着复制粘贴下面的代码:12345678910111213# 会员列表insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;红&apos;,&apos;1001&apos;,&apos;1001@128.com&apos;,&apos;18888888881&apos;,&apos;红&apos;,&apos;01.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe0&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;蓝&apos;,&apos;1002&apos;,&apos;1002@128.com&apos;,&apos;18888888882&apos;,&apos;蓝&apos;,&apos;02.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe1&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;绿&apos;,&apos;1003&apos;,&apos;1003@128.com&apos;,&apos;18888888883&apos;,&apos;绿&apos;,&apos;03.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe2&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;白&apos;,&apos;1004&apos;,&apos;1004@128.com&apos;,&apos;18888888884&apos;,&apos;白&apos;,&apos;04.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe3&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;紫&apos;,&apos;1005&apos;,&apos;1005@128.com&apos;,&apos;18888888885&apos;,&apos;紫&apos;,&apos;05.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe4&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;黄&apos;,&apos;1006&apos;,&apos;1006@128.com&apos;,&apos;18888888886&apos;,&apos;黄&apos;,&apos;06.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe5&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;青&apos;,&apos;1007&apos;,&apos;1007@128.com&apos;,&apos;18888888887&apos;,&apos;青&apos;,&apos;07.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe6&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;橙&apos;,&apos;1008&apos;,&apos;1008@128.com&apos;,&apos;18888888888&apos;,&apos;橙&apos;,&apos;08.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe7&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;赤&apos;,&apos;1009&apos;,&apos;1009@128.com&apos;,&apos;18888888889&apos;,&apos;赤&apos;,&apos;09.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe8&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;靛&apos;,&apos;1010&apos;,&apos;1010@128.com&apos;,&apos;18888888891&apos;,&apos;靛&apos;,&apos;10.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe9&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;米&apos;,&apos;1011&apos;,&apos;1011@128.com&apos;,&apos;18888888892&apos;,&apos;米&apos;,&apos;11.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff0&apos;,now());insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;栗&apos;,&apos;1012&apos;,&apos;1012@128.com&apos;,&apos;18888888893&apos;,&apos;栗&apos;,&apos;12.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff1&apos;,now()); 之后回车，然后再次查询一下我们的数据库：select * from user;，看是不是这样的信息：1234567891011121314151617181920mysql&gt; select * from user;+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+| id | name | pwd | email | phone | info | face | addtime | uuid |+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+| 1 | 红 | 1001 | 1001@128.com | 18888888881 | 红 | 01.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe0 || 2 | 蓝 | 1002 | 1002@128.com | 18888888882 | 蓝 | 02.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe1 || 3 | 绿 | 1003 | 1003@128.com | 18888888883 | 绿 | 03.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe2 || 4 | 白 | 1004 | 1004@128.com | 18888888884 | 白 | 04.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe3 || 5 | 紫 | 1005 | 1005@128.com | 18888888885 | 紫 | 05.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe4 || 6 | 黄 | 1006 | 1006@128.com | 18888888886 | 黄 | 06.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe5 || 7 | 青 | 1007 | 1007@128.com | 18888888887 | 青 | 07.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe6 || 8 | 橙 | 1008 | 1008@128.com | 18888888888 | 橙 | 08.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe7 || 9 | 赤 | 1009 | 1009@128.com | 18888888889 | 赤 | 09.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe8 || 10 | 靛 | 1010 | 1010@128.com | 18888888891 | 靛 | 10.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe9 || 11 | 米 | 1011 | 1011@128.com | 18888888892 | 米 | 11.png | 2018-08-10 19:18:06 | d32a72bdac524478b7e4f6dfc8394ff0 || 12 | 栗 | 1012 | 1012@128.com | 18888888893 | 栗 | 12.png | 2018-08-10 19:18:10 | d32a72bdac524478b7e4f6dfc8394ff1 |+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+12 rows in set (0.00 sec)mysql&gt; 当然你打开navicat在查询框里执行这段代码也是可以的，然后把图片都拷贝到uploads/users文件夹里面： 会员列表分页打开views.py文件，我们修改会员列表函数：1234567891011121314from app.models import User# 会员列表@admin.route(&apos;/user/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef user_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = User.query.order_by( User.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/user_list.html&quot;, page_data=page_data) return render_template(&quot;admin/user_list.html&quot;) 接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：123&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.user_list&apos;, page=1) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员列表&lt;/a&gt; 然后打开user_list.htm页面，开始for循环的遍历： 然后就是分页功能了，我们参考之前在标签列表页面的配置，打开user_list.html：123456789&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.user_list&quot;) &#125;&#125; 至此，关于会员列表的介绍就到此为止了！接下来是会员的查看！ 会员的查看打开views.py文件，我们修改user_view函数：123456# 查看会员@admin.route(&apos;/user/view/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef user_view(id=None): user = User.query.get_or_404(int(id)) return render_template(&quot;admin/user_view.html&quot;, user=user) 接着打开user_view.html页面： 这样我们的查看功能就完成了，接下来是实现删除会员的操作了！ 会员的删除首先打开user_list.html页面，我们进行删除的跳转链接配置：1&lt;a class=&quot;label label-danger&quot; href=&quot;&#123;&#123; url_for(&apos;admin.user_del&apos;, id =v.id) &#125;&#125;&quot;&gt;删除&lt;/a&gt; 接着就是打开views.py文件，定义我们的会员删除函数，我们可以仿照之前的电影删除或者是预告删除：12345678910# 会员删除@admin.route(&apos;/user/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef user_del(id=None): user = User.query.get_or_404(int(id)) db.session.delete(user) db.session.commit() flash(&quot;会员删除成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.user_list&quot;, page=1)) 然后打开user_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）： 然后去测试一下我们的项目，看一看关于会员列表的相关功能是否都已经实现了呢！ 评论管理使用到的内容我们将使用到的内容有：模型：Comment表单: 无 （这个不涉及到表单的提交）请求方法: GET （不涉及到信息的提交）访问控制: @admin_login_req 插入一些数据为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入cmd，然后输入mysql -uroot -proot后回车，接着use movie; 然后查询一下comment的信息：select * from comment;接着复制粘贴下面的代码:（记住电影id要和你之前定义的电影id一样，因为是外键关联，当然也包括会员Id）123456789# 评论列表insert into comment(movie_id,user_id,content,addtime) values(1,1,&quot;好看&quot;,now());insert into comment(movie_id,user_id,content,addtime) values(1,2,&quot;不错&quot;,now());insert into comment(movie_id,user_id,content,addtime) values(5,3,&quot;经典&quot;,now());insert into comment(movie_id,user_id,content,addtime) values(5,4,&quot;给力&quot;,now());insert into comment(movie_id,user_id,content,addtime) values(5,5,&quot;精彩&quot;,now());insert into comment(movie_id,user_id,content,addtime) values(1,6,&quot;无聊&quot;,now());insert into comment(movie_id,user_id,content,addtime) values(5,7,&quot;乏味&quot;,now());insert into comment(movie_id,user_id,content,addtime) values(1,8,&quot;难看&quot;,now()); 之后回车，然后再次查询一下我们的数据库：select * from comment;，看是不是这样的信息：12345678910111213141516mysql&gt; select * from comment;+----+---------+----------+---------+---------------------+| id | content | movie_id | user_id | addtime |+----+---------+----------+---------+---------------------+| 1 | 好看 | 1 | 1 | 2018-08-10 20:18:16 || 2 | 不错 | 1 | 2 | 2018-08-10 20:18:16 || 3 | 经典 | 5 | 3 | 2018-08-10 20:18:16 || 4 | 给力 | 5 | 4 | 2018-08-10 20:18:16 || 5 | 精彩 | 5 | 5 | 2018-08-10 20:18:16 || 6 | 无聊 | 1 | 6 | 2018-08-10 20:18:16 || 7 | 乏味 | 5 | 7 | 2018-08-10 20:18:16 || 8 | 难看 | 1 | 8 | 2018-08-10 20:18:18 |+----+---------+----------+---------+---------------------+8 rows in set (0.00 sec)mysql&gt; 接着打开views.py文件，我们修改评论列表函数：123456789101112131415161718# 评论列表@admin.route(&apos;/comment/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef comment_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = Comment.query.join( Movie ).join( User ).filter( Movie.id == Comment.movie_id, User.id == Comment.user_id ).order_by( Comment.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/comment_list.html&quot;, page_data=page_data) 接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：123&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_list&apos;, page=1) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 评论列表&lt;/a&gt; 然后打开comment_list.htm页面，开始for循环的遍历： 然后就是分页功能了，我们参考之前在标签列表页面的配置，打开comment_list.html：123456789&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.comment_list&quot;) &#125;&#125; 至此，关于评论列表的介绍就到此为止了！接下来是评论的删除！ 评论的删除打开views.py文件，我们新定义comment_del函数：（仿照会员删除的函数）12345678910# 删除评论@admin.route(&apos;/comment/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef comment_del(id=None): comment = Comment.query.get_or_404(int(id)) db.session.delete(comment) db.session.commit() flash(&quot;评论删除成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.comment_list&quot;, page=1)) 然后打开comment_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）： 最后别忘了在comment_list.html页面添加删除跳转链接：1&lt;br&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger pull-right&quot;&gt;删除&lt;/a&gt; 然后去测试一下我们的项目，看一看关于评论列表的相关功能是否都已经实现了呢！ 至此本篇关于会员和评论管理的介绍就到此为止了，感谢你的赏阅！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第九篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（八）：预告管理","slug":"利用Flask搭建微电影视频网站（八）：预告管理","date":"2018-06-12T09:26:55.000Z","updated":"2019-11-04T13:06:24.677Z","comments":true,"path":"2018/06/12/利用Flask搭建微电影视频网站（八）：预告管理/","link":"","permalink":"http://blog.licheetools.top/2018/06/12/利用Flask搭建微电影视频网站（八）：预告管理/","excerpt":"","text":"写在前面本篇笔记，我们介绍预告管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第八篇。 预告管理包括添加预告和预告列表这两个模块，下面我们先介绍添加预告这个功能的实现。 使用到的内容我们将使用到的内容有：模型：Preview表单: PreviewForm请求方法: GET ,POST访问控制: @admin_login_req 1、添加表单验证字段打开forms.py，我们定义Form字段，注意因为是预告添加模块，所以对应的html页面就是preview_add.html，而且我们在forms.py里面定义的字段必须与preview_add.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问preview_add.html页面，这样明显多了！）123456789101112131415161718192021222324252627# 添加预告class PreviewForm(FlaskForm): title = StringField( label=&quot;预告标题&quot;, validators=[ DataRequired(&quot;预告标题不能为空&quot;) ], description=&quot;预告标题&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_title&quot;, &quot;placeholder&quot;: &quot;请输入预告标题！！&quot; &#125; ) logo = FileField( label=&quot;预告封面&quot;, validators=[ DataRequired(&quot;请上传预告封面！&quot;) ], description=&quot;预告封面&quot;, ) submit = SubmitField( &apos;编辑&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-primary&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改preview_add函数：123456789from app.admin.forms import PreviewFormfrom app.models import Preview# 上映预告列表@admin.route(&apos;/preview/add&apos;)@admin_login_reqdef preview_add(): form = PreviewForm() return render_template(&quot;admin/preview_add.html&quot;, form=form) 3、后台页面传值显示以及操作信息提示可以仿照前面的movie_add.html来修改preview_add.html:记得在submit的上面添加，还有form提交的方法以及上传文件类别：1&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 4、后台页面错误信息提示打开preview_add.html页面，我们同样可以仿照movie_add.html来进行修改：12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 5、为视图函数添加方法12345# 上映预告添加@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef preview_add(): return render_template(&quot;admin/preview_add.html&quot;) 6、修改预告添加函数123456789101112131415161718192021222324# 上映预告添加@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef preview_add(): form = PreviewForm() if form.validate_on_submit(): data = form.data file_logo = secure_filename(form.logo.data.filename) if not os.path.exists(app.config[&quot;UP_DIR&quot;]): # 如果文件夹不存在 os.makedirs(app.config[&quot;UP_DIR&quot;]) # 新建对应的文件夹 os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;) # 给文件夹赋予读写的权限 logo = change_filename(file_logo) # 把他们进行保存到文件夹下面 form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo) # 之后的url和logo就是我们修改之后的地址 preview = Preview( title=data[&quot;title&quot;], logo=logo, ) db.session.add(preview) db.session.commit() flash(&quot;添加预告成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.preview_add&quot;)) return render_template(&quot;admin/preview_add.html&quot;, form=form) 然后运行一下我们的manage.py文件，就可以去后台添加我们的上映预告了。 预告列表的配置打开我们的views.py文件，我们参考之前的电影列表的配置，对预告列表进行配置：1234567891011# 上映预告列表@admin.route(&apos;/preview/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef preview_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = Preview.query.order_by( Preview.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/preview_list.html&quot;, page_data=page_data) 接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的： 然后我们打开preview_list.html页面，进行for循环的填充： 接着就是分页功能了，我们参考之前在电影列表页面的配置，打开preview_list.html：123456789&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.preview_list&quot;) &#125;&#125; 然后运行一下我们的manage.py发现图片太大了，我们可以限制一下它的大小： 刷新一下，这样就好多了： 至此，关于预告列表的介绍就到此为止了！接下来是预告的删除和编辑！ 预告的删除打开views.py文件，我们在预告列表的下面新增以下代码：123456789# 预告删除@admin.route(&apos;/preview/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef preview_del(id=None): preview = Preview.query.get_or_404(int(id)) db.session.delete(preview) db.session.commit() flash(&quot;预告删除成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.preview_list&quot;, page=1)) 接着打开preview_list.html页面，我们复制提示成功的代码：12345678&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt; &lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt; &#123;&#123; msg &#125;&#125; &lt;/div&gt;&#123;% endfor %&#125; 放在这个位置：1234&lt;div class=&quot;box-body table-responsive no-padding&quot;&gt;....&lt;/div&gt; 然后打开preview_list.html页面，修改删除的跳转链接：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt; 然后就可以测试你的项目了！ 预告的编辑打开views.py文件，我们在预告列表的下面新增以下代码：123456789101112131415161718192021# 上映预告编辑@admin.route(&apos;/preview/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef preview_edit(id): form = PreviewForm() form.logo.validators = [] # 如果封面为空，我们就不需要修改 preview = Preview.query.get_or_404(int(id)) if request.method == &quot;GET&quot;: form.title.data = preview.title # 给title赋初始值 if form.validate_on_submit(): data = form.data if form.logo.data != &quot;&quot;: file_logo = secure_filename(form.logo.data.filename) preview.logo = change_filename(file_logo) form.logo.data.save(app.config[&quot;UP_DIR&quot;] + preview.logo) preview.title = data[&quot;title&quot;] db.session.add(preview) db.session.commit() flash(&quot;修改预告成功！&quot;, &quot;ok&quot;) return redirect(url_for(&apos;admin.preview_edit&apos;, id=id)) return render_template(&quot;admin/preview_edit.html&quot;, form=form, preview=preview) 接着在admin下面新建preview_edit.html页面，将preview_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且将其中的图片地址替换为我们当前预告的图片地址（赋初值）：1&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;uploads/&apos;+preview.logo) &#125;&#125;&quot; style=&quot;margin-top:5px;&quot; class=&quot;img-responsive&quot;alt=&quot;&quot;&gt; 然后在preview_list里面修改页面的跳转：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt; 刷新一下，我们的项目关于预告这一功能是不是都能使用了！ 至此，我们关于预告的介绍就到此为止了，感谢你的赏阅！！！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第八篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（七）：电影管理","slug":"利用Flask搭建微电影视频网站（七）：电影管理","date":"2018-06-11T09:26:00.000Z","updated":"2019-11-04T13:07:46.508Z","comments":true,"path":"2018/06/11/利用Flask搭建微电影视频网站（七）：电影管理/","link":"","permalink":"http://blog.licheetools.top/2018/06/11/利用Flask搭建微电影视频网站（七）：电影管理/","excerpt":"","text":"写在前面本篇笔记，我们介绍电影管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第七篇。 电影管理包括添加电影和电影列表这两个模块，下面我们先介绍添加电影这个功能的实现。 使用到的内容我们将使用到的内容有：模型：Movie表单: MovieForm请求方法: GET POST访问控制: @admin_login_req 1、添加表单验证字段打开forms.py，我们定义Form字段，注意因为是标签添加模块，所以对应的html页面就是movie_add.html，而且我们在forms.py里面定义的字段必须与movie_add.html里面的保持一致！123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113from wtforms import FileField, TextAreaField, SelectFieldfrom app.models import Tag# 添加电影class MovieForm(FlaskForm): title= StringField( label=&quot;片名&quot;, validators=[ DataRequired(&quot;片名不能为空&quot;) ], description=&quot;片名&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_title&quot;, &quot;placeholder&quot;: &quot;请输入片名！！&quot; &#125; ) url = FileField( label=&quot;文件&quot;, validators=[ DataRequired(&quot;请上传文件！&quot;) ], description=&quot;文件&quot;, ) info = TextAreaField( label=&quot;简介&quot;, validators=[ DataRequired(&quot;简介不能为空&quot;) ], description=&quot;简介&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;rows=&quot;: 10, &#125; ) logo = FileField( label=&quot;封面&quot;, validators=[ DataRequired(&quot;请上传封面！&quot;) ], description=&quot;封面&quot;, ) star = SelectField( label=&quot;星级&quot;, validators=[ DataRequired(&quot;请选择星级！&quot;) ], # 星级是整数型 coerce=int, # 采用下拉选择的方式进行星级的选择 choices=[(1, &quot;1星级&quot;), (2, &quot;2星级&quot;), (3, &quot;3星级&quot;), (4, &quot;4星级&quot;), (5, &quot;5星级&quot;)], description=&quot;星级&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &#125; ) tag_id = SelectField( label=&quot;所属标签&quot;, validators=[ DataRequired(&quot;请选择标签！&quot;) ], # 标签id也是整数型 coerce=int, # 采用列表递归式来取出所有的标签 choices=[(v.id, v.name)for v in Tag.query.all()], description=&quot;标签&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &#125; ) area = StringField( label=&quot;上映地区&quot;, validators=[ DataRequired(&quot;请输入地区！&quot;) ], description=&quot;地区&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_area&quot;, &quot;placeholder&quot;: &quot;请输入地区！&quot; &#125; ) length = StringField( label=&quot;电影片长&quot;, validators=[ DataRequired(&quot;请输入片长！&quot;) ], description=&quot;片长&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_length&quot;, &quot;placeholder&quot;: &quot;请输入片长！&quot; &#125; ) release_time = StringField( label=&quot;上映时间&quot;, validators=[ DataRequired(&quot;请输入上映时间！&quot;) ], description=&quot;上映时间&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_release_time&quot;, &quot;placeholder&quot;: &quot;请输入上映时间！&quot; &#125; ) submit = SubmitField( &apos;编辑&apos;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-primary&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改movie_add函数：123456789from app.admin.forms import MovieFormfrom app.models import Movie# 电影添加@admin.route(&apos;/movie/add&apos;)@admin_login_reqdef movie_add(): form = MovieForm() return render_template(&quot;admin/movie_add.html&quot;, form=form) 3、后台页面传值显示修改movie_add.html:记得在submit的上面添加，还有form提交的方法以及上传文件类别：··· ··· 4、后台页面错误信息提示打开movie_tag.html页面，我们进行修改：12345&#123;% for err in form.title.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 5、文件上传打开app/–init–.py文件，我们现在上传文件代码：123import osapp.config[&quot;UP_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/&quot;) 6、定义修改文件名称函数在views.py文件新增以下代码：12345678910111213from app import db, appfrom werkzeug.utils import secure_filenameimport osimport uuidfrom datetime import datetime# 修改文件名称def change_filename(filename): fileinfo = os.path.splitext(filename) filename = datetime.now().strftime(&quot;%Y%m%d%H%M%S&quot;) + str(uuid.uuid4().hex) + fileinfo[-1] # 文件后缀 return filename 7、修改添加电影函数123456789101112131415161718192021222324252627282930313233343536# 电影添加@admin.route(&apos;/movie/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef movie_add(): form = MovieForm() if form.validate_on_submit(): data = form.data file_url = secure_filename(form.url.data.filename) file_logo = secure_filename(form.logo.data.filename) if not os.path.exists(app.config[&quot;UP_DIR&quot;]): # 如果文件夹不存在 os.makedirs(app.config[&quot;UP_DIR&quot;]) # 新建对应的文件夹 os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;) # 给文件夹赋予读写的权限 url = change_filename(file_url) logo = change_filename(file_logo) # 把他们进行保存到文件夹下面 form.url.data.save(app.config[&quot;UP_DIR&quot;] + url) form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo) # 之后的url和logo就是我们修改之后的地址 movie = Movie( title=data[&quot;title&quot;], url=url, info=data[&quot;info&quot;], logo=logo, star=data[&quot;star&quot;], playnum=0, commentnum=0, tag_id=data[&quot;tag_id&quot;], area=data[&apos;area&apos;], release_time=data[&quot;release_time&quot;], length=data[&quot;length&quot;], ) db.session.add(movie) db.session.commit() flash(&quot;添加电影成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.movie_add&quot;)) return render_template(&quot;admin/movie_add.html&quot;, form=form) 8、添加电影成功消息闪现打开movie_add.html页面，新增以下代码：12345678&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt; &#123;&#123; msg &#125;&#125; &lt;/div&gt; &#123;% endfor %&#125; 就是这样： 运行一下我们的manage.py发现报错：12builtins.TypeErrorTypeError: an integer is required (got type str) 那是因为我们的星级和所属标签是Int类型，我们需要转换一下：12star= int(data[&quot;star&quot;]),tag_id=int(data[&quot;tag_id&quot;]), 接着重新运行一下我们的manage.py文件，发现电影添加没有任何问题。 至此，我们添加电影的功能就介绍完了，下面介绍电影管理列表的配置！ 电影管理列表的配置电影管理列表的配置其实和我们之前配置的标签列表非常相似，所以我们介绍就快一点，打开admin/views.py文件，修改movie_list函数如下：12345678910111213# 电影列表@admin.route(&apos;/movie/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef movie_list(page=None): if page is None: page = 1 # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by page_data = Movie.query.join(Tag).filter( Tag.id == Movie.tag_id ).order_by( Movie.addtime.desc() ).paginate(page=page, per_page=10) return render_template(&quot;admin/movie_list.html&quot;, page_data=page_data) 接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：123&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_list&apos;, page=1) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 电影列表 &lt;/a&gt; 然后打开movie_list.htm页面，开始for循环的遍历： 然后就是分页功能了，我们参考之前在标签列表页面的配置，打开movie_list.html：123456789&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.movie_list&quot;) &#125;&#125; 至此，关于电影列表的介绍就到此为止了！接下来是电影的删除和编辑！ 电影的删除打开views.py文件，我们在电影列表的下面新增以下代码：123456789# 电影删除@admin.route(&apos;/movie/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef movie_del(id=None): movie = Movie.query.get_or_404(int(id)) db.session.delete(movie) db.session.commit() flash(&quot;电影删除成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.movie_list&quot;, page=1)) 接着打开movie_list.html页面，我们复制提示成功的代码：12345678 &#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt; &#123;&#123; msg &#125;&#125; &lt;/div&gt; &#123;% endfor %&#125; 放在这个位置：然后修改删除的跳转链接：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt; 然后就可以测试你的项目了！ 电影的编辑打开views.py文件，我们在电影列表的下面新增以下代码：1234567891011# 电影编辑@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef movie_edit(id=None): form = MovieForm() # 实例化一个TagForm，然后将form传递到前端页面去。 movie = Movie.query.get_or_404(id) if form.validate_on_submit(): data = form.data flash(&quot;修改电影成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id)) return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie) 接着在admin下面新建movie_edit.html页面，将movie_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为修改，为form.title增加初值(value=movie.title):1&#123;&#123; form.title(value=movie.title)&#125;&#125; 别忘了还有form.url，form.info，form.star，form.tag_id，form.area，form.release_time和form.length：12345 &#123;&#123; form.url(value=movie.url) &#125;&#125; &#123;&#123; form.info(value=movie.info) &#125;&#125;....... 注意form.logo的初值和其他不一样：1&#123;&#123; url_for(&apos;static&apos;,filename=&apos;uploads/&apos;+ movie.logo) &#125;&#125; 就是这里： 还有js里面的也需要修改： 还要在movie_list里面修改页面的跳转： 1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_edit&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt; 然后运行一下我们的manage.py文件，发现封面图片不显示： 将图片里的data-src修改为src: 然后刷新发现info，tag_id，star还是不行，我们需要重新配置这三个字段的初始值,去掉之前在movie_edit里面赋予的初始值(就是只有这种，不带初值)，我们直接在views.py文件里配置：123456789101112131415# 电影编辑@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef movie_edit(id=None): form = MovieForm() # 实例化一个TagForm，然后将form传递到前端页面去。 movie = Movie.query.get_or_404(id) if request.method == &quot;GET&quot;: form.info.data = movie.info form.tag_id.data = movie.tag_id form.star.data = movie.star if form.validate_on_submit(): data = form.data flash(&quot;修改电影成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id)) return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie) 之后就是对修改的部分进行提交之后的保存：12345678910movie.title = data[&quot;title&quot;]movie.info = data[&quot;info&quot;]movie.star = data[&quot;star&quot;]movie.tag_id = data[&quot;tag_id&quot;]movie.length = data[&quot;length&quot;]movie.area = data[&quot;area&quot;]movie.release_time = data[&quot;release_time&quot;]db.session.add(movie)db.session.commit()flash(&quot;修改电影成功！&quot;, &quot;ok&quot;) 不过这还有一个问题，那就是片名的唯一性，我们不可能有同名的电影（现实里面是有的，但做不到完全一样，至少在演员，导演，剧情，上映时间肯定有一个不一样，但这里我们只限定片名不一样即可！） 片名的唯一性打开views.py文件，我们修改电影编辑函数：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# 电影编辑@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef movie_edit(id=None): form = MovieForm() # 实例化一个TagForm，然后将form传递到前端页面去。 form.url.validators = [] # 因为是编辑，所以首先必须是非空才需要验证 form.logo.validators = [] movie = Movie.query.get_or_404(int(id)) if request.method == &quot;GET&quot;: form.info.data = movie.info form.tag_id.data = movie.tag_id form.star.data = movie.star if form.validate_on_submit(): data = form.data movie_count = Movie.query.filter_by(title=data[&quot;title&quot;]).count() # 电影去重，唯一性 if movie.title != data[&quot;title&quot;] and movie_count == 1: flash(&quot;该影片已经存在了！&quot;, &quot;err&quot;) return redirect(url_for(&quot;admin.movie_edit&quot;, id=id)) # 如果文件夹不存在，那么就创建一个文件夹 if not os.path.exists(app.config[&quot;UP_DIR&quot;]): # 如果文件夹不存在 os.makedirs(app.config[&quot;UP_DIR&quot;]) # 新建对应的文件夹 os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;) # 给文件夹赋予读写的权限 # 如果视频文件修改了，就进行替换 if form.url.data.filename != &quot;&quot;: file_url = secure_filename(form.url.data.filename) movie.url = change_filename(file_url) form.url.data.save(app.config[&quot;UP_DIR&quot;] + movie.url) # 如果图片文件修改了，就进行替换 if form.logo.data.filename != &quot;&quot;: file_logo = secure_filename(form.logo.data.filename) movie.logo = change_filename(file_logo) form.logo.data.save(app.config[&quot;UP_DIR&quot;] + movie.logo) movie.title = data[&quot;title&quot;] movie.info = data[&quot;info&quot;] movie.star = data[&quot;star&quot;] movie.tag_id = data[&quot;tag_id&quot;] movie.length = data[&quot;length&quot;] movie.area = data[&quot;area&quot;] movie.release_time = data[&quot;release_time&quot;] db.session.add(movie) db.session.commit() flash(&quot;修改电影成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id)) return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie) 接下来去movie_edit.html页面添加操作信息提示：123456789101112131415161718&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt; &#123;&#123; msg &#125;&#125;&lt;/div&gt;&#123;% endfor %&#125; &#123;% for msg in get_flashed_messages(category_filter=[&quot;err&quot;]) %&#125; &lt;div class=&quot;alert alert-danger alert-dismissible&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;&lt;h4&gt;&lt;i class=&quot;icon fa fa-ban&quot;&gt;&lt;/i&gt; 操作失败&lt;/h4&gt; &#123;&#123; msg &#125;&#125;&lt;/div&gt; &#123;% endfor %&#125; 然后刷新一下我们的后台，发现关于电影这一功能是不是都能使用了！ 至此，我们关于电影管理的介绍就到此为止了，感谢你的赏阅！！！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第七篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（六）：标签管理","slug":"利用Flask搭建微电影视频网站（六）：标签管理","date":"2018-06-09T09:24:39.000Z","updated":"2019-11-04T13:07:36.902Z","comments":true,"path":"2018/06/09/利用Flask搭建微电影视频网站（六）：标签管理/","link":"","permalink":"http://blog.licheetools.top/2018/06/09/利用Flask搭建微电影视频网站（六）：标签管理/","excerpt":"","text":"写在前面本篇笔记，我们继续介绍后台页面逻辑的开发（所有的内容都是在后台admin下面，不与前台home有关系），今天分享的是关于标签的介绍，内容比较难懂，请多熟悉一下。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第六篇。 标签管理的配置后面所有的后台功能的配置几乎都是这样，像电影管理，预告管理，会员管理。。。所以我这里介绍详细一点，后面的可能就没这么详细了，好了话不多说，我们开始介绍！ 使用到的内容我们将使用到的内容有：模型：Tag表单: TagForm请求方法: GET POST访问控制: @admin_login_req 1、添加表单验证字段打开forms.py，我们定义Form字段，注意因为是标签添加模块，所以对应的html页面就是tag_add.html，而且我们在forms.py里面定义的字段必须与tag_add.html里面的保持一致！123456789101112131415161718192021# 添加标签class TagForm(FlaskForm): name = StringField( label=&quot;名称&quot;, validators=[ DataRequired(&quot;请输入标签&quot;) ], description=&quot;标签&quot;, render_kw=&#123; &quot;class&quot;: &quot;form-control&quot;, &quot;id&quot;: &quot;input_name&quot;, &quot;placeholder&quot;: &quot;请输入标签名称！&quot; &#125; ) submit = SubmitField( &quot;添加&quot;, render_kw=&#123; &quot;class&quot;: &quot;btn btn-primary&quot;, &#125; ) 2、准备页面渲染字段打开admin/views.py文件，我们修改tag_add函数：123456789from app.admin.forms import TagFormfrom app.models import Tag# 标签编辑@admin.route(&apos;/tag/add&apos;)@admin_login_reqdef tag_add(): form = TagForm() # 实例化一个TagForm，然后将form传递到前端页面去。 return render_template(&quot;admin/tag_add.html&quot;, form=form) 3、后台页面传值显示修改tag_add.html: 4、后台页面错误信息提示打开tag_tag.html页面，我们进行修改：12345&#123;% for err in form.name.errors %&#125;&lt;div class=&quot;col-md-12&quot;&gt;&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;&lt;/div&gt;&#123;% endfor %&#125; 就是这个样子： 5、修改提交方法打开tag_tag.html页面，我们进行修改： 接着我们回到views.py文件，修改add_tag函数的提交方法：12# 标签编辑@admin.route(&apos;/tag/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;]) 6、标签去除重名打开views.py文件，我们继续修改tag_add函数：1234567891011121314151617181920# 标签编辑@admin.route(&apos;/tag/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef tag_add(): form = TagForm() # 实例化一个TagForm，然后将form传递到前端页面去。 if form.validate_on_submit(): data = form.data tag = Tag.query.filter_by(name=data[&quot;name&quot;]).count() # 标签去重 if tag == 1: flash(&quot;该标签已经存在了！&quot;, &quot;err&quot;) return redirect(url_for(&quot;admin.tag_add&quot;)) tag = Tag( name=data[&quot;name&quot;] ) db.session.add(tag) db.session.commit() flash(&quot;添加标签成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.tag_add&quot;)) return render_template(&quot;admin/tag_add.html&quot;, form=form) 7、添加成功或者失败提示打开static/admin/index.html页面，我们用浏览器打开，点击UI element/General，就出现：或者点击这里admin LE2，先下载文件，然后点击查看也可以！接着我们按键盘上的F12开启开发者工具，然后定位绿色的成功框，复制它的html源代码到我们的tag_agg.html页面，然后修改一下：123456&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt; &lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt; 添加标签成功！&lt;/div&gt; 觉得格式不好看，可以ctal+alt+L进行代码的格式化。然后进行for循环遍历，就是这样：因为已经for循环了，所以需要把里面的 添加标签成功！修改为！那么失败呢？也是类似的操作（用红色的框的代码），这里就只附上代码了：12345678&#123;% for msg in get_flashed_messages(\"err\") %&#125;&lt;div class=\"alert alert-danger alert-dismissible\"&gt;&lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"&gt;×&lt;/button&gt;&lt;h4&gt;&lt;i class=\"icon fa fa-ban\"&gt;&lt;/i&gt; 操作失败&lt;/h4&gt; &#123;&#123; msg &#125;&#125;&lt;/div&gt;&#123;% endfor %&#125; 运行一下manage.py，然后添加一个标签，发现出了问题：这是因为我们的get_flashed_messages用错了，可以点击这里查看官方文档：过滤闪现消息修改为这样：123get_flashed_messages(category_filter=[&quot;ok&quot;])get_flashed_messages(category_filter=[&quot;err&quot;]) 现在添加就没有问题了！ 至此，我们关于标签的添加就介绍完了，下面就是标签的动态显示了！ 标签列表的配置打开admin/views.py文件，修改tag_list函数如下：1234567891011# 标签列表@admin.route(&apos;/tag/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef tag_list(page=None): if page is None: page = 1 page_data = Tag.query.order_by( Tag.addtime.desc() ).paginate(page=page, per_page=1) return render_template(&quot;admin/tag_list.html&quot;, page_data=page_data) 然后tag_list.htm页面：123456789101112&#123;% for v in page_data.items %&#125;&lt;tr&gt; &lt;td&gt;&#123;&#123; v.id &#125;&#125;&lt;/td&gt;td&gt;&#123;&#123; v.name &#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123; v.addtime &#125;&#125;&lt;/td&gt;&lt;td&gt;&lt;a class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;&amp;nbsp;&lt;a class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; 接着打开grid.html页面，修改gird中标签列表的url，为其添加参数page =1：123&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_list&apos;, page=1) &#125;&#125;&quot;&gt; &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 标签列表&lt;/a&gt; 分页功能点击这里，获取api实用工具，我们采用了macro的语法，我们在static文件夹下面新建一个ui的文件，然后在里面创建admin_page.html文件：然后复制这段代码到里面去：12345678910111213141516171819202122232425262728293031&#123;% macro page(data,url) -%&#125; &#123;% if data %&#125; &lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=1) &#125;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &#123;% if data.has_prev %&#125; &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.prev_num) &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% for v in data.iter_pages() %&#125; &#123;% if v %&#125; &#123;% if v == data.page %&#125; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123; v &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=v) &#125;&#125;&quot;&gt;&#123;&#123; v &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% if data.has_next %&#125; &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.next_num) &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.pages) &#125;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &#123;% endif %&#125;&#123;%- endmacro %&#125; 然后去掉tag_list.html里面的图中所示的那段代码： 并且在开头导入刚才的admin_page.html文件，然后开始调用：1&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125; 将下面的代码填充你刚才删除的那段的位置：1&#123;&#123; pg.page(page_data, &quot;admin.tag_list&quot;) &#125;&#125; 至此，关于标签列表的介绍就到此为止了！接下来是标签的删除和编辑！ 标签的删除首先点击这里，获取官方文档flask-sqlalchemy删除,了解一下，我们现在开始编辑代码：打开views.py文件，我们在标签列表的下面新增以下代码：123456789# 标签删除@admin.route(&apos;/tag/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])@admin_login_reqdef tag_del(id=None): tag = Tag.query.filter_by(id=id).first_or_404() db.session.delete(tag) db.session.commit() flash(&quot;标签删除成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.tag_list&quot;, page=1)) 接着打开tag_list.html页面，我们复制提示成功的代码：12345678 &#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt; &#123;&#123; msg &#125;&#125; &lt;/div&gt; &#123;% endfor %&#125; 放在这个位置： 然后修改删除的跳转链接：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt; 然后就可以测试你的项目了！ 标签的编辑打开views.py文件，我们在标签列表的下面新增以下代码：1234567891011121314151617181920# 编辑标签@admin.route(&apos;/tag/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])@admin_login_reqdef tag_edit(id=None): form = TagForm() # 实例化一个TagForm，然后将form传递到前端页面去。 tag = Tag.query.get_or_404(id) if form.validate_on_submit(): data = form.data tag_count = Tag.query.filter_by(name=data[&quot;name&quot;]).count() # 标签去重 if tag.name != data[&quot;name&quot;] and tag_count == 1: flash(&quot;该标签已经存在了！&quot;, &quot;err&quot;) return redirect(url_for(&quot;admin.tag_edit&quot;, id=id)) tag.name = data[&quot;name&quot;] db.session.add(tag) db.session.commit() flash(&quot;修改标签成功！&quot;, &quot;ok&quot;) return redirect(url_for(&quot;admin.tag_edit&quot;, id=id)) return render_template(&quot;admin/tag_edit.html&quot;, form=form, tag=tag) 接着在admin下面新建tag_edit.html页面，将tag_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑，为form.name增加属性(value=tag.name)，还要在form提交时添加action:1&lt;form role=&quot;form&quot; method=&quot;post&quot; action=&quot;&#123;&#123; url_for(&apos;admin.tag_edit&apos;, id=tag.id) &#125;&#125;&quot;&gt; 然后在tag_list里面修改页面的跳转：1&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_edit&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt; 以及标签的提示：1&lt;input name=&quot;id&quot; value=&quot;&#123;&#123; tag.id &#125;&#125;&quot; type=&quot;hidden&quot;&gt; 就是这样： 刷新一下，我们的项目关于标签这一功能是不是都能使用了！ 至此，我们关于标签的介绍就到此为止了，感谢你的赏阅！！！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第六篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（五）：访问控制器","slug":"利用Flask搭建微电影视频网站（五）：访问控制器","date":"2018-06-06T09:22:35.000Z","updated":"2019-11-04T13:09:26.680Z","comments":true,"path":"2018/06/06/利用Flask搭建微电影视频网站（五）：访问控制器/","link":"","permalink":"http://blog.licheetools.top/2018/06/06/利用Flask搭建微电影视频网站（五）：访问控制器/","excerpt":"利用Flask搭建微电影视频网站（五）：访问控制器。","text":"对不起，此文章为加密内容，只有管理员才能查看。 Incorrect Password! No content to display! ","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（四）：后台页面搭建","slug":"利用Flask搭建微电影视频网站（四）：后台页面搭建","date":"2018-06-04T09:15:50.000Z","updated":"2019-11-04T13:09:17.156Z","comments":true,"path":"2018/06/04/利用Flask搭建微电影视频网站（四）：后台页面搭建/","link":"","permalink":"http://blog.licheetools.top/2018/06/04/利用Flask搭建微电影视频网站（四）：后台页面搭建/","excerpt":"","text":"写在前面本篇笔记，我们来学习Flask网站后台页面的搭建，因此我们本篇内容均在admin目录下面进行，所有与home相关的页面此刻都可以关闭了。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第四篇。 管理员登录页面搭建打开我们的app/admin/views.py文件，我们在里面新增以下代码：123456789101112from flask import render_template, redirect, url_for# 登入@admin.route(&apos;/login/&apos;)def login(): return render_template(&quot;admin/login.html&quot;)# 登出@admin.route(&apos;/logout/&apos;)def logout(): return redirect(url_for(&apos;admin.login&apos;)) 接下来就是在templates/admin文件夹下面新建对应的html文件（但是我们这里因为logout只是重定向到我们的login页面，因此只需要创建一个login.html即可），然后我们打开新建的login文件，复制3-admin/login.html的内容，并对静态文件和url跳转做一下配置，很简单，这里就不一一演示了。 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 评论管理页面搭建1234# 评论列表@admin.route(&apos;/comment/list&apos;)def comment_list(): return render_template(&quot;admin/comment_list.html&quot;) 在admin下新建对应的html文件，修改grid.html的页面跳转以及g-6和g-6-1，注意此处没有g-6-2!然后打开comment_list.html页面，对评论进行for循环，并修改页面的静态文件路径: 收藏管理页面搭建1234# 电影收藏@admin.route(&apos;/moviecol/list&apos;)def moviecol_list(): return render_template(&quot;admin/moviecol_list.html&quot;) 在admin下新建对应的html文件，修改grid.html的页面跳转以及g-7和g-7-1，注意此处没有g-7-2!然后打开moviecol_list.html页面，对收藏进行for循环： 日志管理页面搭建1234567891011121314151617# 操作日志列表@admin.route(&apos;/oplog/list&apos;)def oplog_list(): return render_template(&quot;admin/oplog_list.html&quot;)# 管理员登录日志列表@admin.route(&apos;/adminloginlog/list&apos;)def adminloginlog_list(): return render_template(&quot;admin/adminloginlog_list.html&quot;)# 会员登录日志列表@admin.route(&apos;/userloginlog/list&apos;)def userloginlog_list(): return render_template(&quot;admin/userloginlog_list.html&quot;) 在admin下新建对应的html文件，修改grid.html的页面跳转以及g-8和g-8-1，g-8-2，g-8-3!然后打开3个html页面，对管理员，会员进行for循环遍历即可，这里就不多说了。 权限管理页面搭建1234567891011# 添加权限@admin.route(&apos;/auth/add&apos;)def auth_add(): return render_template(&quot;admin/auth_add.html&quot;)# 权限列表@admin.route(&apos;/auth/list&apos;)def auth_list(): return render_template(&quot;admin/auth_list.html&quot;) 在admin下新建对应的html文件，修改grid.html的页面跳转以及g-9和g-9-1，g-9-2!然后打开auth_list.html页面，对权限进行for循环遍历即可，这里就不多说了。 角色管理页面搭建12345678910# 添加角色@admin.route(&apos;/role/add&apos;)def role_add(): return render_template(&quot;admin/role_add.html&quot;)# 角色列表@admin.route(&apos;/role/list&apos;)def role_list(): return render_template(&quot;admin/role_list.html&quot;) 在admin下新建对应的html文件，修改grid.html的页面跳转以及g-10和g-10-1，g-10-2!然后打开role_list.html页面，对角色进行for循环遍历即可，这里就不多说了。需要特别注意的是role_add.html页面有自己单独的css，需要你block一下。 管理员管理页面的搭建1234567891011# 添加管理员@admin.route(&apos;/admin/add&apos;)def admin_add(): return render_template(&quot;admin/admin_add.html&quot;)# 管理员列表@admin.route(&apos;/admin/list&apos;)def admin_list(): return render_template(&quot;admin/admin_list.html&quot;) 在admin下新建对应的html文件，修改grid.html的页面跳转以及g-11和g-11-1，g-11-2!然后打开admin_list.html页面，对管理员进行for循环遍历即可，这里就不多说了。 至此，我们本篇关于后台页面搭建的介绍就到此为止了，感谢你的赏阅！下一篇，我们将正式进入到后台页面逻辑的开发了，希望你紧跟我的步伐，一步步敲下去，最后一个属于自己的微电影网站就会出现，那时的你心里乐开了花，我们期待着那样的一个你！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第四篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（三）：前端首页搭建","slug":"利用Flask搭建微电影视频网站（三）：前端首页搭建","date":"2018-06-03T09:14:18.000Z","updated":"2019-11-04T13:07:56.088Z","comments":true,"path":"2018/06/03/利用Flask搭建微电影视频网站（三）：前端首页搭建/","link":"","permalink":"http://blog.licheetools.top/2018/06/03/利用Flask搭建微电影视频网站（三）：前端首页搭建/","excerpt":"","text":"写在前面本篇笔记，我们来学习Flask网站前端首页面的搭建，这其实和Django搭建网页很类似，大家好好体会一下。 获取更多教程，请点击注册啃饼网:http://www.licheetools.top 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第三篇。 前台布局搭建第一步将所有static文件都放进指定的位置：然后在templates/home文件夹下面新建一个home.html文件，将tpl/2-movie/nav.html文件内容全部拷贝到我们刚才新建的home.html页面里面，然后修改我们静态文件的目录，可以按照下面的图片要求进行： 1、静态文件的引入1&#123;&#123; url_for(&apos;static&apos;,filename=&apos;文件路径&apos;)&#125;&#125; 2、定义路由1&#123;&#123; url_for(&apos;模块名.视图名&apos;,变量=参数)&#125;&#125; 3、定义数据块1&#123;%block 数据块名称%&#125; .....&#123;% endblock %&#125; 12# 原来代码为 &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/base/css/bootstrap.min.css&quot;&gt;# 现在代码为 &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap.min.css&apos;) &#125;&#125;&quot;&gt; 其余所有的js, jpg,css均按照这样的要求进行，这里就不再一一提示了，直接附上代码：123456789101112 &lt;link rel=&quot;shortcut icon&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/images/logo.png&apos;) &#125;&#125;&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap.min.css&apos;) &#125;&#125;&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap-movie.css&apos;) &#125;&#125;&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/animate.css&apos;) &#125;&#125;&quot;&gt;&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/images/logo.png&apos;) &#125;&#125;&quot; style=&quot;height:30px;&quot;&gt;&amp;nbsp;微电影&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/jquery.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/bootstrap.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/jquery.singlePageNav.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/wow.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;lazyload/jquery.lazyload.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt; 接着在图示位置进行挖坑填坑操作：123&lt;div class=&quot;container&quot; style=&quot;margin-top:76px&quot;&gt; &#123;% block content %&#125;&#123;% endblock %&#125;&lt;/div&gt; 然后打开home模块的视图处理器（home/views.py）：1234567from . import homefrom flask import render_template@home.route(&apos;/&apos;)def index(): return render_template(&quot;home/index.html&quot;)i 你发现没有此刻我们在templates/home文件夹下面是没有index.html文件的，我们需要去创建一个index.html文件，在里面输入如下代码：12345&#123;% extends &quot;home.html&quot; %&#125;&#123;% block %&#125;&lt;h1&gt;helloworld&lt;/h1&gt;&#123;% endblock %&#125; 然后运行一下我们的manage.py文件，在浏览器地址栏中输入http://127.0.0.1:5000/ 出现了错误： 错误提示我们block缺少一个名字，那我们就修改一下index.html文件：12345&#123;% extends &quot;home.html&quot; %&#125;&#123;% block content %&#125; &lt;h1&gt;Helo,World!&lt;/h1&gt;&#123;% endblock %&#125; 然后再次刷新一下我们的页面，发现还是出了问题： 错误提示我们没有找到home.html页面，那是因为我们的路径出了问题，我们继续修改一下：12345&#123;% extends &quot;home/home.html&quot; %&#125;&#123;% block content %&#125; &lt;h1&gt;Helo,World!&lt;/h1&gt;&#123;% endblock %&#125; 接着我们再次刷新一下，页面正常显示了： 会员登录页面搭建打开app/home/views.py文件，新建以下代码：123456789101112from flask import redirect, url_for# 登入@home.route(&apos;/login/&apos;)def login(): return render_template(&quot;home/login.html&quot;)# 登出@home.route(&apos;/logout/&apos;)def logout(): return redirect(url_for(&apos;home.login&apos;)) 然后在templates/home下面新建login.html文件，往里面新增如下代码：1234567891011121314151617181920212223242526272829&#123;% extends &apos;home/home.html&apos; %&#125;&#123;% block content %&#125; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt; &lt;div class=&quot;panel panel-primary&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-log-in&quot;&gt;&lt;/span&gt;&amp;nbsp;会员登录&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;form role=&quot;form&quot;&gt; &lt;fieldset&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;input_contact&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;账号&lt;/label&gt; &lt;input id=&quot;input_contact&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;用户名/邮箱/手机号码&quot; name=&quot;contact&quot; type=&quot;text&quot; autofocus&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12&quot; id=&quot;error_contact&quot;&gt;&lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;input_password&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;密码&lt;/label&gt; &lt;input id=&quot;input_password&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;密码&quot; name=&quot;password&quot; type=&quot;password&quot; value=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12&quot; id=&quot;error_password&quot;&gt;&lt;/div&gt; &lt;a href=&quot;user.html&quot; class=&quot;btn btn-lg btn-success btn-block&quot;&gt;登录&lt;/a&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125; （这段代码来自tpl/2-movie/login.html里面 内容的内容部分）然后打开home/home.html文件，修改我们的url跳转链接： 会员注册打开app/home/views.py文件，新建以下代码：12345# 会员注册@home.route(&apos;/register/&apos;)def register(): return render_template(&quot;home/register.html&quot;) 然后在templates/home下面新建register.html文件，往里面新增如下代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123;% extends &apos;home/home.html&apos; %&#125;&#123;% block content %&#125; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt; &lt;div class=&quot;panel panel-success&quot;&gt; &lt;div class=&quot;panel-heading&quot;&gt; &lt;h3 class=&quot;panel-title&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/span&gt;&amp;nbsp;会员注册&lt;/h3&gt; &lt;/div&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;form role=&quot;form&quot;&gt; &lt;fieldset&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;input_name&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;昵称&lt;/label&gt; &lt;input id=&quot;input_name&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;昵称&quot; name=&quot;name&quot; type=&quot;text&quot; autofocus&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12&quot; id=&quot;error_name&quot;&gt;&lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;input_email&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-envelope&quot;&gt;&lt;/span&gt;&amp;nbsp;邮箱&lt;/label&gt; &lt;input id=&quot;input_email&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;邮箱&quot; name=&quot;email&quot; type=&quot;email&quot; autofocus&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12&quot; id=&quot;error_email&quot;&gt;&lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;input_phone&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-phone&quot;&gt;&lt;/span&gt;&amp;nbsp;手机&lt;/label&gt; &lt;input id=&quot;input_phone&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;手机&quot; name=&quot;phone&quot; type=&quot;text&quot; autofocus&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12&quot; id=&quot;error_phone&quot;&gt;&lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;input_password&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;密码&lt;/label&gt; &lt;input id=&quot;input_password&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;密码&quot; name=&quot;password&quot; type=&quot;password&quot; value=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12&quot; id=&quot;error_password&quot;&gt;&lt;/div&gt; &lt;div class=&quot;form-group&quot;&gt; &lt;label for=&quot;input_repassword&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;确认密码&lt;/label&gt; &lt;input id=&quot;input_repassword&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;确认密码&quot; name=&quot;repassword&quot; type=&quot;password&quot; value=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;col-md-12&quot; id=&quot;error_repassword&quot;&gt;&lt;/div&gt; &lt;a href=&quot;user.html&quot; class=&quot;btn btn-lg btn-success btn-block&quot;&gt;注册&lt;/a&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125; （这段代码来自tpl/2-movie/register.html里面 内容的内容部分）然后打开home/home.html文件，修改我们的url跳转链接： 会员中心页面搭建由于前面已经有过2个页面搭建的例子，所以这里我们先定义完所以的路由，再在home文件夹里面新建对应的html文件！打开app/home/views.py文件，新建以下代码：12345678910111213141516171819202122232425262728# 会员中心@home.route(&apos;/user/&apos;)def user(): return render_template(&quot;home/user.html&quot;)# 修改密码@home.route(&apos;/pwd/&apos;)def pwd(): return render_template(&quot;home/pwd.html&quot;)# 评论记录@home.route(&apos;/comments/&apos;)def comments(): return render_template(&quot;home/comments.html&quot;)# 登入日志@home.route(&apos;/loginlog/&apos;)def loginlog(): return render_template(&quot;home/loginlog.html&quot;)# 收藏电影@home.route(&apos;/moviecol/&apos;)def moviecol(): return render_template(&quot;home/moviecol.html&quot;) 就是这个样子：接下来定义会员中心菜单栏页面,在home文件夹里面，新建menu.html文件，里面写入从tpl/2-movie/user.html页面中 的部分,并且修改一下url的跳转问题：12345678910111213141516171819&lt;div class=&quot;col-md-3&quot;&gt; &lt;div class=&quot;list-group&quot;&gt; &lt;a href=&quot;&#123;&#123; url_for(&apos;home.user&apos;) &#125;&#125;&quot; class=&quot;list-group-item active&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;会员中心 &lt;/a&gt; &lt;a href=&quot;&#123;&#123; url_for(&apos;home.pwd&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;修改密码 &lt;/a&gt; &lt;a href=&quot;&#123;&#123; url_for(&apos;home.comments&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/span&gt;&amp;nbsp;评论记录 &lt;/a&gt; &lt;a href=&quot;&#123;&#123; url_for(&apos;home.loginlog&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/span&gt;&amp;nbsp;登录日志 &lt;/a&gt; &lt;a href=&quot;&#123;&#123; url_for(&apos;home.moviecol&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt;&amp;nbsp;收藏电影 &lt;/a&gt; &lt;/div&gt;&lt;/div&gt; user.html书写现在开始书写我们的user.html文件，我们复制tpl/2-movie/user.html页面中 的部分：1234567&#123;% extends &quot;home/home.html&quot; %&#125;&#123;% block content %&#125; &lt;div class=&quot;col-md-9&quot;&gt; ...... &lt;/div&gt;&#123;% endblock %&#125; 然后运行一下我们的manage.py文件，发现我们的个人中心页面出来了，但是菜单栏没有出现：我们需要include我们之前定义的menu.html页面,修改我们的user.html文件：12345678&#123;% extends &quot;home/home.html&quot; %&#125;&#123;% block content %&#125;&#123;% include &quot;home/menu.html&quot; %&#125; &lt;div class=&quot;col-md-9&quot;&gt; ...... &lt;/div&gt;&#123;% endblock %&#125; 再刷新一下我们的页面试试，发现菜单栏已经可以正常显示了：接下来将home/home.html里面的style进行合并，再进行挖坑填坑操作：1234567891011&lt;style&gt; .navbar-brand &gt; img &#123; display: inline; &#125; .media &#123; padding: 3px; border: 1px solid #ccc &#125; &lt;/style&gt; &#123;% block css %&#125;&#123;% endblock %&#125; 接着打开home/user.html页面，对原来页面的css样式进行挖坑填坑操作：1234567891011121314151617&#123;% block css %&#125; &lt;style&gt; .navbar-brand &gt; img &#123; display: inline; &#125; .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123; padding-right: 3px; padding-left: 3px; &#125; .media &#123; padding: 3px; border: 1px solid #ccc &#125; &lt;/style&gt;&#123;% endblock %&#125; pwd.html的书写现在开始书写我们的pwd.html文件，我们复制tpl/2-movie/pwd.html页面中 的部分：123456789101112131415161718192021222324&#123;% extends &quot;home/home.html&quot; %&#125;&#123;% block css %&#125; &lt;style&gt; .navbar-brand&gt;img &#123; display: inline; &#125; .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9&#123; padding-right: 3px; padding-left: 3px; &#125; .media&#123; padding:3px; border:1px solid #ccc &#125; &lt;/style&gt;&#123;% endblock %&#125;&#123;% block content %&#125;&#123;% include &quot;home/menu.html&quot; %&#125; &lt;div class=&quot;col-md-9&quot;&gt; ...... &lt;/div&gt;&#123;% endblock %&#125; 我们发现我们还没有判断选中状态，我们给menu.html的类加上一个ID，然后采用jQuery来进行判断：12345678910111213141516171819&lt;div class=&quot;col-md-3&quot;&gt; &lt;div class=&quot;list-group&quot;&gt; &lt;a id =&quot;m-1&quot; href=&quot;&#123;&#123; url_for(&apos;home.user&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;会员中心 &lt;/a&gt; &lt;a id =&quot;m-2&quot; href=&quot;&#123;&#123; url_for(&apos;home.pwd&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;修改密码 &lt;/a&gt; &lt;a id =&quot;m-3&quot; href=&quot;&#123;&#123; url_for(&apos;home.comments&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/span&gt;&amp;nbsp;评论记录 &lt;/a&gt; &lt;a id =&quot;m-4&quot; href=&quot;&#123;&#123; url_for(&apos;home.loginlog&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/span&gt;&amp;nbsp;登录日志 &lt;/a&gt; &lt;a id =&quot;m-5&quot; href=&quot;&#123;&#123; url_for(&apos;home.moviecol&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt;&amp;nbsp;收藏电影 &lt;/a&gt; &lt;/div&gt;&lt;/div&gt; 打开home.html页面，在底部新增js的挖坑填坑代码：1&#123;% block js %&#125; &#123;% endblock %&#125; 然后打开user.html页面，在底部新增如下代码：1234567&#123;% block js %&#125; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#m-1&quot;).addClass(&quot;active&quot;); &#125;); &lt;/script&gt;&#123;% endblock %&#125; 我们顺便在pwd.html页面也加上类似的代码：1234567&#123;% block js %&#125; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#m-2&quot;).addClass(&quot;active&quot;); &#125;); &lt;/script&gt;&#123;% endblock %&#125; comments.html的书写12345678910111213141516171819202122232425262728293031323334&#123;% extends &quot;home/home.html&quot; %&#125;&#123;% block css %&#125; &lt;style&gt; .navbar-brand &gt; img &#123; display: inline; &#125; .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123; padding-right: 3px; padding-left: 3px; &#125; .media &#123; padding: 3px; border: 1px solid #ccc &#125; &lt;/style&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;home/menu.html&quot; %&#125; &lt;div class=&quot;col-md-9&quot;&gt; &lt;/div&gt;&#123;% endblock %&#125;&#123;% block js %&#125; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#m-3&quot;).addClass(&quot;active&quot;); &#125;); &lt;/script&gt;&#123;% endblock %&#125; loginlog.html的书写12345678910111213141516171819202122232425262728293031323334&#123;% extends &quot;home/home.html&quot; %&#125;&#123;% block css %&#125; &lt;style&gt; .navbar-brand &gt; img &#123; display: inline; &#125; .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123; padding-right: 3px; padding-left: 3px; &#125; .media &#123; padding: 3px; border: 1px solid #ccc &#125; &lt;/style&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;home/menu.html&quot; %&#125; &lt;div class=&quot;col-md-9&quot;&gt; &lt;/div&gt;&#123;% endblock %&#125;&#123;% block js %&#125; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#m-4&quot;).addClass(&quot;active&quot;); &#125;); &lt;/script&gt;&#123;% endblock %&#125; moviecol.html的书写12345678910111213141516171819202122232425262728293031323334&#123;% extends &quot;home/home.html&quot; %&#125;&#123;% block css %&#125; &lt;style&gt; .navbar-brand &gt; img &#123; display: inline; &#125; .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123; padding-right: 3px; padding-left: 3px; &#125; .media &#123; padding: 3px; border: 1px solid #ccc &#125; &lt;/style&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;home/menu.html&quot; %&#125; &lt;div class=&quot;col-md-9&quot;&gt; &lt;/div&gt;&#123;% endblock %&#125;&#123;% block js %&#125; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#m-5&quot;).addClass(&quot;active&quot;); &#125;); &lt;/script&gt;&#123;% endblock %&#125; 现在再来运行我们的manage.py文件，我们在浏览器地址栏里面输入http://127.0.0.1:5000/user/，然后回车，然后点击左侧的菜单栏，发现页面显示没有问题。最后来完善一下url的跳转，我们打开home/home.html页面，修改如下：![](https://upload-images.jianshu.io/upload_images/8964398-26906216cdd4d18c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 电影列表页面搭建继续在我们的home/views.py文件里面新增以下代码：1234567891011# 首页@home.route(&apos;/&apos;)def index(): return render_template(&quot;home/index.html&quot;)# 动画@home.route(&apos;/animation/&apos;)def animation(): return render_template(&quot;home/animation.html&quot;) 注意：因为在前面我们已经创建了一个index函数，所以我们需要把它们去掉，或者重写一个做完这些自然就是在templates/home文件夹下面新建对应的index.html和animation.html页面。考虑到首页的独立性，我们也在templates/home文件夹下面新建一个layout.html页面，并同时将home/home.html文件里面的代码都拷贝进去，并且修改一下home/home.html，将内容部分进行挖坑填坑操作： 现在回到我们的templates/home/index.html页面，其block content部分来自我们的tpl/2-movie/index.html的热门电影和电影列表部分： 紧接着将我们templates/home/index.html页面的电影列表展开和收起，就是这个样子： 我们只留下前四个col-md-3，其余的col-md-3就都删除！ 然后将tpl/1-index-animation/animation.html的代码复制到home/animation.html里面，接着在static文件下新建anim文件，把与animation有关的js,css,main-banner都复制进去，就是这个样子： 然后我们回到templates/animation.html页面，修改我们的静态样式加载地址：123456&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/css/style.css&apos;) &#125;&#125;&quot;&gt;&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/main_banner/big0020150102211033.jpg&apos;) &#125;&#125;&quot; alt=&quot;&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/js/jquery.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt; 接着回到我们的home/index.html页面，我们进行animation的跳转链接配置：1&lt;iframe class=&quot;wow fadeIn&quot; width=&quot;100%&quot; height=&quot;375px&quot; frameborder=0 scrolling=no src=&quot;&#123;&#123; url_for(&apos;home.animation&apos;) &#125;&#125;&quot;&gt;&lt;/iframe&gt; 还有对我们的列表进行for循环的读取：最后运行一下我们的manage.py文件，发现样式和页面都正常显示了： 电影搜索页面搭建老规矩，在home/views.py文件下面新增以下代码：1234# 搜索页面@home.route(&apos;/search/&apos;)def search(): return render_template(&quot;home/search.html&quot;) 自然你就需要在templates/home文件夹下面新建一个search.html页面。打开home/search.html页面，我们新建以下代码： 然后展开和收起页面，利用for循环进行填充： 接下来就是search相关的url跳转的配置，home.html和layout.html页面都需要配置：123 &lt;a class=&quot;btn btn-default&quot; href=&quot;&#123;&#123; url_for(&apos;home.search&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;&amp;nbsp;搜索&lt;/a&gt;&lt;a class=&quot;btn btn-default&quot; href=&quot;&#123;&#123; url_for(&apos;home.search&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;&amp;nbsp;搜索&lt;/a&gt; 电影详情页面搭建老规矩，在home/views.py文件下面新增以下代码：1234# 详情页面@home.route(&apos;/play/&apos;)def play(): return render_template(&quot;home/play.html&quot;) 自然你就需要在templates/home文件夹下面新建一个play.html页面。 打开home/play.html页面，我们新建以下代码： 然后对所以的静态文件进行访问配置，由于太多，这里就不一一说明了。 接下来对home/home.html页面所以的url进行跳转配置，还有搜索中的电影播放与收藏中的电影播放页面的跳转，这个很多，需要耐心一个个去查找，修改。还有收藏页面的for循环：之后运行一下manage.py文件，发现页面跳转没有问题。 404页面的搭建因为404页面是一个全局页面，所以我们需要在初始化文件里面写入，而不是在home这个应用里面(app/–init–.py文件)：1234567891011121314151617from flask import Flask, render_templateapp = Flask(__name__)app.debug = Truefrom app.home import home as home_blueprintfrom app.admin import admin as admin_blueprintapp.register_blueprint(home_blueprint)app.register_blueprint(admin_blueprint, url_prefix=&quot;/admin&quot;)# 404页面@app.errorhandler(404)def page_not_found(error): return render_template(&quot;home/404.html&quot;), 404 自然你就需要在templates/home文件夹下面新建一个404.html页面。 然后把4-404.html页面的代码都拷贝进去，并修改页面的跳转和静态文件的加载样式：123456789101112131415161718192021&lt;!doctype html&gt;&lt;html lang=&quot;zh-cn&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;消失在宇宙星空中的404页面&lt;/title&gt; &lt;link href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/404.css&apos;) &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 代码 开始 --&gt;&lt;div class=&quot;fullScreen&quot; id=&quot;fullScreen&quot;&gt; &lt;img class=&quot;rotating&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/spaceman.svg&apos;) &#125;&#125;&quot;&gt; &lt;div class=&quot;pagenotfound-text&quot;&gt; &lt;h1&gt;迷失在太空中！&lt;/h1&gt; &lt;h2&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;&quot;&gt;返回首页&lt;/a&gt;&lt;/h2&gt; &lt;/div&gt; &lt;canvas id=&quot;canvas2d&quot;&gt;&lt;/canvas&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/spaceman.svg&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;!-- 代码 结束 --&gt;&lt;/body&gt;&lt;/html&gt; 然后刷新一下我们的页面，发现404页面可以正常显示出来。 至此，我们本篇关于前端首页搭建的介绍就到此为止了，感谢你的赏阅！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第三篇。 获取更多教程，请点击注册啃饼网:http://www.licheetools.top","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（二）：项目优化与模型设计","slug":"利用Flask搭建微电影视频网站（二）：项目优化与模型设计","date":"2018-06-02T09:12:36.000Z","updated":"2019-11-04T13:07:17.352Z","comments":true,"path":"2018/06/02/利用Flask搭建微电影视频网站（二）：项目优化与模型设计/","link":"","permalink":"http://blog.licheetools.top/2018/06/02/利用Flask搭建微电影视频网站（二）：项目优化与模型设计/","excerpt":"","text":"写在前面从本篇笔记开始，我们正式进入flask的编程世界，话不多说，我们先来创建我们的第一个flask程序，然后进行项目的优化以及模型设计。 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第二篇。 第一个flask程序打开pycharm按照图示创建flask项目： 点击确定之后就成了这样：你会发现上面2个文件static和templates竟然都是空的，也就说只有movie.py文件才有，而且只有寥寥的7行代码。我给你看一下Django创建项目之后的页面：看到没有，flask的确是轻巧，巧到刚开始只有2个空文件和一个7行代码的py文件。而纵观Django，刚开始就有那些看不懂的而且代码挺多的py文件，所以还是那句话，学好flask需要花费一定的时间。我们继续回到flask页面：点击上面的运行按钮，提示你在浏览器输入：http://127.0.0.1:5000/，flask的默认端口号为5000，Django的端口号为8000，要注意区别！你会发现页面只有Hello World!这个单词而已！！！ 项目优化与模型设计我们这个微电影网站包括：前台模块（home）和后台模块（admin）。 其中前台模块（home）包括：数据模型：models.py表单处理： home/forms.py模板目录： templates/home静态目录：static 而后台模块（admin）也同样包括：数据模型：models.py表单处理： admin/forms.py模板目录： templates/admin静态目录：static 数据模型是共用的，而表单提交和模板都是独立的，下面看一下前后台的目录分析：按照上述图片所示，新建文件树： 使用flask的蓝图(Blueprint)来规划项目的结构1、什么是蓝图？它是一个应用中或跨应用制作应用组件和支持通用的模式。2、蓝图的作用？将不同的功能模块化；构建大型应用；优化项目结构；增强可读性，易于维护。下面我们将对上面的3个目录进行分开介绍,由于前后台的目录结构很类似，这里我以app/admin为例进行说明，大家跟紧我的节奏即可。1、定义蓝图(app/admin/–init–.py)123from flask import Blueprintadmin = Blueprint(&quot;admin&quot;, __name__)import app.admin.views 2、注册蓝图(app/–init–.py)12345678from flask import Flaskapp = Flask(__name__)app.debug = Truefrom app.admin import admin as admin_blueprintapp.register_blueprint(admin_blueprint, url_prefix=&quot;/admin&quot;) 3、调用蓝图(app/admin/views.py)123456from . import admin@admin.route(&quot;/&quot;)def index(): return &quot;&lt;h1 style=&apos;color:blue&apos;&gt;This is admin&lt;/h1&gt;&quot; 而在app/home里面同样是这样的：1、定义蓝图(app/home/–init–.py)123from flask import Blueprinthome = Blueprint(&quot;home&quot;, __name__)import app.home.views 2、注册蓝图(app/–init–.py)12345678from flask import Flaskapp = Flask(__name__)app.debug = Truefrom app.home import admin as home_blueprintapp.register_blueprint(home_blueprint) # 这里url可以不写 3、调用蓝图(app/home/views.py)123456from . import admin@home.route(&quot;/&quot;)def index(): return &quot;&lt;h1 style=&apos;color:red&apos;&gt;This is home&lt;/h1&gt;&quot; 在完成上述代码之后，最后一步书写manage.py文件，开始启动app。123from app import appif __name__ == &apos;__main__&apos;: app.run() 在浏览器地址栏中输入：http://127.0.0.1:5000，则显示红色的This is home；而输入http://127.0.0.1:5000/admin/，则显示蓝色的This is admin. 会员及会员登录日志数据模型设计1、安装数据库连接依赖包1pip install flask-sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple 关于sqlalchmey的介绍，请关注我的另外一个专题《Python3操作三大数据库》这里面就会有详细的介绍，这里我就不细说了，你只要记住它是一个企业级的ORM对象关系映射框架就够了。2、定义mysql数据库连接：打开models.py文件，我们新建下面的代码：12345678from flask_sqlalchemy import SQLAlchemyfrom flask import Flaskapp = from flask import Flask app = Flask(__name__)app.config[&apos;SQLALCHEMY_DATABASE_URL&apos;] = &quot;mysql://账号:密码@ip地址/movie&quot;app.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] =Truedb = SQLAlchemy(app) 大家可以点击flask-sqlalchemy,来了解更多的信息。 3、定义会员数据模型： 继续在models.py文件里添加代码：123456789101112131415# 定义会员数据模型class User(db.Model): __tablename__ = &quot;user&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 昵称 pwd = db.Column(db.String(100)) # 密码 email = db.Column(db.String(100), unique=True) # 邮箱 phone = db.Column(db.String(11), unique=True) # 电话号码 info = db.Column(db.Text) # 个性简介 face = db.Column(db.String(255), unique=True) # 头像 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 uuid = db.Column(db.String(255), unique=True) # 唯一标志符 def __repr__(self): return &apos;&lt;User %r&gt;&apos; % self.name 大家对此内容不了解可以点击声明模型。 4、会员登录日志数据模型： 12345678910# 会员登录日志class UserLog(db.Model): __tablename__ = &quot;userlog&quot; id = db.Column(db.Integer, primary_key=True) # 编号 user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;)) # 所属会员 ip = db.Column(db.String(100)) # 登录IP addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;UserLog %r&gt;&apos; % self.id 注意由于此处采用了外键，所以需要在User函数里面新增关系：1userlogs = db.relationship(&apos;userlog&apos;, backref=&apos;user&apos;) # 会员日志外键关系 注意到没有，这里和Django中字段的定义是不一样的，Django不需要在关系外键里面增加外键关系，但是Flask却是必须的，要注意这一点。 总结一下，models.py文件的代码为：123456789101112131415161718192021222324252627282930313233343536373839from flask import Flaskfrom flask_sqlalchemy import SQLAlchemyimport datetimeapp = Flask(__name__)app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql://root:root@127.0.0.5/movie&quot;app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS &quot;] = Truedb = SQLAlchemy(app)# 定义会员数据模型class User(db.Model): __tablename__ = &quot;user&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 昵称 pwd = db.Column(db.String(100)) # 密码 email = db.Column(db.String(100), unique=True) # 邮箱 phone = db.Column(db.String(11), unique=True) # 电话号码 info = db.Column(db.Text) # 个性简介 face = db.Column(db.String(255), unique=True) # 头像 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 uuid = db.Column(db.String(255), unique=True) # 唯一标志符 userlogs = db.relationship(&apos;UserLog&apos;, backref=&apos;user&apos;) # 会员日志外键关系 def __repr__(self): return &apos;&lt;User %r&gt;&apos; % self.name# 会员登录日志class UserLog(db.Model): __tablename__ = &quot;userlog&quot; id = db.Column(db.Integer, primary_key=True) # 编号 user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;)) # 所属会员 ip = db.Column(db.String(100)) # 登录IP addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;UserLog %r&gt;&apos; % self.id 5、标签数据模型设计12345678910# 定义标签数据模型class Tag(db.Model): __tablename__ = &quot;tag&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 标题 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 movies = db.relationship(&apos;Movie&apos;, backref=&apos;tag&apos;) # 电影外键关系关联 def __repr__(self): return &apos;&lt;Tag %r&gt;&apos; % self.name 其中，relationship(‘Movie’, backref=’tag’)里面，Movie为所关联的类名，backref为当前的表名！6、电影数据模型设计1234567891011121314151617181920# 定义电影数据模型class Movie(db.Model): __tablename__ = &quot;movie&quot; id = db.Column(db.Integer, primary_key=True) # 编号 title = db.Column(db.String(255), unique=True) # 电影标题 url = db.Column(db.String(255), unique=True) # 电影地址 info = db.Column(db.Text) # 电影简介 logo = db.Column(db.String(255), unique=True) # 电影封面 star = db.Column(db.SmallInteger) # 星级 playnum = db.Column(db.BigInteger) # 电影播放量 commentnum = db.Column(db.BigInteger) # 电影播放量 tag_id = db.Column(db.Integer, db.ForeignKey(&apos;tag.id&apos;)) # 所属标签 area = db.Column(db.String(255)) # 地区 release_time = db.Column(db.Date) # 发布时间 length = db.Column(db.String(100)) # 电影长度 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Movie %r&gt;&apos; % self.title 7、上映预告数据模型设计12345678910# 定义上映预告数据模型class Preview(db.Model): __tablename__ = &quot;preview&quot; id = db.Column(db.Integer, primary_key=True) # 编号 title = db.Column(db.String(255), unique=True) # 电影标题 logo = db.Column(db.String(255), unique=True) # 电影封面 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Preview %r&gt;&apos; % self.title 评论及收藏电影数据模型设计1、定义评论数据模型：123456789101112# 定义评论数据模型class Comment(db.Model): __tablename__ = &quot;comment&quot; id = db.Column(db.Integer, primary_key=True) # 编号 content = db.Column(db.Text) # 评论内容 movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;)) # 所属电影 user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;)) # 所属用户 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Comment %r&gt;&apos; % self.id 2、定义收藏电影数据模型：12345678910# 定义收藏电影数据模型class MovieCol(db.Model): __tablename__ = &quot;moviecol&quot; id = db.Column(db.Integer, primary_key=True) # 编号 movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;)) # 所属电影 user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;)) # 所属用户 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 最近登录时间 def __repr__(self): return &apos;&lt;MovieCol %r&gt;&apos; % self.id 权限及角色数据模型设计1、定义权限数据模型：12345678910# 定义权限数据模型class Auth(db.Model): __tablename__ = &quot;auth&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 名称 url = db.Column(db.String(255), unique=True) # 电影地址 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Auth %r&gt;&apos; % self.name 2、定义角色数据模型：12345678910# 定义角色数据模型class Role(db.Model): __tablename__ = &quot;role&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 名称 auths = db.Column(db.String(600)) # 权限列表 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Role %r&gt;&apos; % self.name 管理员、管理员登陆日志、操作日志数据模型设计1、定义管理员数据模型 123456789101112# 定义管理员数据模型class Admin(db.Model): __tablename__ = &quot;admin&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 管理员名称 pwd = db.Column(db.String(100)) # 管理员密码 is_super = db.Column(db.SmallInteger) # 是否为超级管理员，0为超级管理员 role_id = db.Column(db.Integer, db.ForeignKey(&apos;role.id&apos;)) # 所属角色 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Admin %r&gt;&apos; % self.name 2、定义管理员登陆日志数据模型 12345678910# 定义管理员登陆日志数据模型class AdminLog(db.Model): __tablename__ = &quot;adminlog&quot; id = db.Column(db.Integer, primary_key=True) # 编号 admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;)) # 所属管理员 ip = db.Column(db.String(100)) # 登录IP addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;AdminLog %r&gt;&apos; % self.id 3、定义操作日志数据模型 1234567891011# 定义操作日志数据模型class OpLog(db.Model): __tablename__ = &quot;oplog&quot; id = db.Column(db.Integer, primary_key=True) # 编号 admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;)) # 所属管理员 ip = db.Column(db.String(100)) # 登录IP reason = db.Column(db.String(600)) # 操作原因 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;OpLog %r&gt;&apos; % self.id 考虑到部分关系只有全部字段定义完成以后才能开始，所以这里贴一下models.py的全部代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187#！/user/bin/python# -*- coding:utf-8 -*-# @Time: 2018/3/29 21:20# @Author: Envse# @File: models.pyfrom flask import Flaskfrom flask_sqlalchemy import SQLAlchemyfrom datetime import datetimeapp = Flask(__name__)app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql://账号:密码@ip地址/movie&quot;app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS &quot;] = Truedb = SQLAlchemy(app)# 定义会员数据模型class User(db.Model): __tablename__ = &quot;user&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 昵称 pwd = db.Column(db.String(100)) # 密码 email = db.Column(db.String(100), unique=True) # 邮箱 phone = db.Column(db.String(11), unique=True) # 电话号码 info = db.Column(db.Text) # 个性简介 face = db.Column(db.String(255), unique=True) # 头像 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 uuid = db.Column(db.String(255), unique=True) # 唯一标志符 userlogs = db.relationship(&apos;UserLog&apos;, backref=&apos;user&apos;) # 会员日志外键关系 comments = db.relationship(&apos;Comment&apos;, backref=&apos;user&apos;) # 评论外键关系关联 moviecols = db.relationship(&apos;MovieCol&apos;, backref=&apos;user&apos;) # 电影收藏外键关系关联 def __repr__(self): return &apos;&lt;User %r&gt;&apos; % self.name# 定义会员登录日志模型class UserLog(db.Model): __tablename__ = &quot;userlog&quot; id = db.Column(db.Integer, primary_key=True) # 编号 user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;)) # 所属会员 ip = db.Column(db.String(100)) # 登录IP addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;UserLog %r&gt;&apos; % self.id# 定义标签数据模型class Tag(db.Model): __tablename__ = &quot;tag&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 标题 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 movies = db.relationship(&apos;Movie&apos;, backref=&apos;tag&apos;) # 电影外键关系关联 def __repr__(self): return &apos;&lt;Tag %r&gt;&apos; % self.name# 定义电影数据模型class Movie(db.Model): __tablename__ = &quot;movie&quot; id = db.Column(db.Integer, primary_key=True) # 编号 title = db.Column(db.String(255), unique=True) # 电影标题 url = db.Column(db.String(255), unique=True) # 电影地址 info = db.Column(db.Text) # 电影简介 logo = db.Column(db.String(255), unique=True) # 电影封面 star = db.Column(db.SmallInteger) # 星级 playnum = db.Column(db.BigInteger) # 电影播放量 commentnum = db.Column(db.BigInteger) # 电影播放量 tag_id = db.Column(db.Integer, db.ForeignKey(&apos;tag.id&apos;)) # 所属标签 area = db.Column(db.String(255)) # 地区 release_time = db.Column(db.Date) # 发布时间 length = db.Column(db.String(100)) # 电影长度 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 comments = db.relationship(&apos;Comment&apos;, backref=&apos;movie&apos;) # 电影评论外键关联 movieclos = db.relationship(&apos;MovieCol&apos;, backref=&apos;movie&apos;) # 电影收藏外键关联 def __repr__(self): return &apos;&lt;Movie %r&gt;&apos; % self.title# 定义上映预告数据模型class Preview(db.Model): __tablename__ = &quot;preview&quot; id = db.Column(db.Integer, primary_key=True) # 编号 title = db.Column(db.String(255), unique=True) # 电影标题 logo = db.Column(db.String(255), unique=True) # 电影封面 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Preview %r&gt;&apos; % self.title# 定义评论数据模型class Comment(db.Model): __tablename__ = &quot;comment&quot; id = db.Column(db.Integer, primary_key=True) # 编号 content = db.Column(db.Text) # 评论内容 movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;)) # 所属电影 user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;)) # 所属用户 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Comment %r&gt;&apos; % self.id# 定义收藏电影数据模型class MovieCol(db.Model): __tablename__ = &quot;moviecol&quot; id = db.Column(db.Integer, primary_key=True) # 编号 movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;)) # 所属电影 user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;)) # 所属用户 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 最近登录时间 def __repr__(self): return &apos;&lt;MovieCol %r&gt;&apos; % self.id# 定义权限数据模型class Auth(db.Model): __tablename__ = &quot;auth&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 名称 url = db.Column(db.String(255), unique=True) # 电影地址 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Auth %r&gt;&apos; % self.name# 定义角色数据模型class Role(db.Model): __tablename__ = &quot;role&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 名称 auths = db.Column(db.String(600)) # 权限列表 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;Role %r&gt;&apos; % self.name# 定义管理员数据模型class Admin(db.Model): __tablename__ = &quot;admin&quot; id = db.Column(db.Integer, primary_key=True) # 编号 name = db.Column(db.String(100), unique=True) # 管理员名称 pwd = db.Column(db.String(100)) # 管理员密码 is_super = db.Column(db.SmallInteger) # 是否为超级管理员，0为超级管理员 role_id = db.Column(db.Integer, db.ForeignKey(&apos;role.id&apos;)) # 所属角色 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 adminlogs = db.relationship(&apos;AdminLog&apos;, backref=&apos;admin&apos;) # 管理员登录日志外键关系关联 oplogs = db.relationship(&apos;OpLog&apos;, backref=&apos;admin&apos;) # 管理员操作日志外键关系关联 def __repr__(self): return &apos;&lt;Admin %r&gt;&apos; % self.name# 定义管理员登陆日志数据模型class AdminLog(db.Model): __tablename__ = &quot;adminlog&quot; id = db.Column(db.Integer, primary_key=True) # 编号 admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;)) # 所属管理员 ip = db.Column(db.String(100)) # 登录IP addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;AdminLog %r&gt;&apos; % self.id# 定义操作日志数据模型class OpLog(db.Model): __tablename__ = &quot;oplog&quot; id = db.Column(db.Integer, primary_key=True) # 编号 admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;)) # 所属管理员 ip = db.Column(db.String(100)) # 登录IP reason = db.Column(db.String(600)) # 操作原因 addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow) # 添加时间 def __repr__(self): return &apos;&lt;OpLog %r&gt;&apos; % self.idif __name__ == &apos;__main__&apos;: db.create_all() # 开始创建数据表 结合mysql数据库来生成数据表1、进入到虚拟环境后，安装pymysql1pip install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple 2、导入pymysql并加以使用12import pymysqlapp.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql+pymysql://账号:密码@ip地址/movie&quot; 3、运行models.py文件运行models.py文件之后，你会发现出现字符编码的问题：1F:\\Envs\\movie\\lib\\site-packages\\pymysql\\cursors.py:170: Warning: (1366, &quot;Incorrect string value: &apos;\\\\xD6\\\\xD0\\\\xB9\\\\xFA\\\\xB1\\\\xEA...&apos; for column &apos;VARIABLE_VALUE&apos; at row 481&quot;) 因为windows系统默认使用的是GBK字符集，而我们在windows系统上使用的数据库默认也是GBK字符集，尽管我们在创建数据库的时候已经把字符集设定为utf8，但还是有问题，说明还是系统字符集影响到了我们项目的运行。但是数据库定义没问题，你输入中文是没有问题的这是mysql5.7的一个Bug，你可以忽略这个问题。 博主通过各方努力终于找到了解决问题的办法：Flask利用pymysql出现Warning：1366的解决办法 4、打开movie数据库打开数据库，你会发现新生成了许多数据表，这与我们在models.py文件里定义的一模一样。 至此本篇关于项目优化与模型设计的介绍就到此为止了，感谢你的赏阅！ 本篇笔记对应上传的仓库为:https://github.com/licheetools/movie对应第二篇。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"利用Flask搭建微电影视频网站（一）：项目介绍","slug":"利用Flask搭建微电影视频网站（一）：项目介绍","date":"2018-06-01T09:08:53.000Z","updated":"2019-11-04T13:09:38.963Z","comments":true,"path":"2018/06/01/利用Flask搭建微电影视频网站（一）：项目介绍/","link":"","permalink":"http://blog.licheetools.top/2018/06/01/利用Flask搭建微电影视频网站（一）：项目介绍/","excerpt":"","text":"写在前面嘿，小伙伴们好久不见。在上一套教程里，我们利用了Python的Django框架搭建了一个在线教育网站，这次我们尝试接触Python web开发的另一个框架：Flask。我们同样尝试利用它来搭建一个网站，这次我们是搭建一个在线的微电影视频网站。通过对比，我们来学着在比较中提升自己。同样在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。 项目介绍Flask介绍Flask是一个用 Python 编写的轻量级 Web 应用框架。其 WSGI工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。Flask使用 BSD 授权。Flask也被称为 “microframework” ，因为它使用简单的核心，用 extension 增加其他功能。Flask没有默认使用的数据库、窗体验证工具。所以与Django相比，它没有很多系统自带的功能就显得非常轻巧，但是另一方面就意味着你必须自己动手去实现一些看似非常简单的功能，从这点来说Flask比Django需要花费更多的时间来学习。 目前Django一般都是适合一些访问量较小的，规模不大的网站，真正那些访问量大的网站管理人员会采用Flask进行编辑，例如果壳网，知乎网，豆瓣网： Flask与Django，Tornado对比 网站介绍前台包括：首页-电影筛选-电影列表- 播放详情-评论-收藏-搜索-注册-登录-会员中心（修改会员资料，查看评论记录，登录日志，收藏电影） 后台包括：电影标签-电影管理-电影预告-网站会员-评论-收藏-日志-权限管理-角色-管理员等。 总体设计框架为：开发环境为： Flask丰富的扩展插件 你能学到的知识 以及视频技术： 环境搭建与工具网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发，具体涉及到的软件我们接下来为你介绍。 Pycharm的安装我在前面有一篇文章介绍了Pycharm的详细安装，这里就不赘述了，开启传送大门：Python Web技术开发软件安装 虚拟环境vritualenv的安装同样virtualenv的安装我之前也有3篇文章进行过介绍，为了便于学习，我这里直接复制过来了！ 1、安装pip我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹(记住要和Python放在同一目录下)，采用添加环境变量的方法（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path），我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格， C:\\Users\\YC-Jiang&gt;F:F:&gt;cd PythonF:\\Python&gt;cd pystallF:\\Python\\pystall&gt; 然后输入：python setup.py install回车，等待几分钟即可。 最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者Windows徽标+R中输入 pip -—version 小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句） 如果已经成功安装 pip，会提示类似下面的： pip 1.5.6 from C:\\Python35\\lib\\site-packages\\pip-1.5.6-py3.5.egg pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。 如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考这个方法为你的 Windows电脑安装pip: pip安装问题 2、安装virtualenv在终端输入以下命令： 12345678pip install virtualenv virtualenv testvir # 在当前用户目录(win+r %HOMEPATH%可查看)生成cd %homepath%cd testvircd Scriptsactivate.bat # 激活pip list deactivate.bat 其实这种方法挺麻烦的，这里我推荐一种简单方法，安装virtualenvwrapper 3、安装virtualenvwrapper在终端输入如下命令： 1pip install virtualenvwrapper-win 接下来便是创建虚拟环境了，同样采用如下命令： 1mkvirtualenv movie # movie 为你新建虚拟环境的名称 它会创建在C:\\Users\\YC\\Envs当前用户目录下的Envs目录。 你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME 退出激活状态命令 1deactivate 知道有哪些虚拟环境命令 1workon 直接进入虚拟环境命令 1workon movie 如果出现这种情况，表示你已经进入到虚拟环境中。 1F:\\Envs\\movie 再次说明，出现前面的(movie)就代表进入了虚拟环境，之后就可以进行包和库的安装了。输入pip list查看一下现在已经安装的包：12345678(movie) F:\\Envs\\movie&gt;pip listPackage Version---------- -------pip 18.0setuptools 40.2.0wheel 0.31.1(movie) F:\\Envs\\movie&gt; 接下来是进行Flask的安装，这个其实和Django的安装很类似，只不过多了一个安装前和安装后的环境检测而已. Flask的安装 安装前检测：pip freeze安装flask： pip install flask -i https://pypi.tuna.tsinghua.edu.cn/simple安装后检测：pip freeze 1234567891011121314(movie) F:\\Envs\\movie&gt;pip listPackage Version------------ -------click 6.7Flask 1.0.2itsdangerous 0.24Jinja2 2.10MarkupSafe 1.0pip 18.0setuptools 40.2.0Werkzeug 0.14.1wheel 0.31.1(movie) F:\\Envs\\movie&gt; 至此本篇关于项目的介绍以及开发环境的搭建就到此为止，感谢你的赏阅！ 补充资料1、欢迎进入Flask大型教程项目！一个不错的Flask介绍网站。2、Flask文档介绍，挺官方的一个技术文档。3、Flask教程，一个受欢迎的技术网站。4、Python Flask系列（1）——基础,网易云课堂的免费视频，教你如何入门Flask。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"Flask建站","slug":"Flask建站","permalink":"http://blog.licheetools.top/tags/Flask建站/"},{"name":"Pytohn后端","slug":"Pytohn后端","permalink":"http://blog.licheetools.top/tags/Pytohn后端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（十一）：商品类别数据显示（下）","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（十一）：商品类别数据显示（下）","date":"2018-05-15T09:01:55.000Z","updated":"2019-11-04T13:05:29.920Z","comments":true,"path":"2018/05/15/采用Vue-Django-Restful-framework构建生鲜电商项目（十一）：商品类别数据显示（下）/","link":"","permalink":"http://blog.licheetools.top/2018/05/15/采用Vue-Django-Restful-framework构建生鲜电商项目（十一）：商品类别数据显示（下）/","excerpt":"对不起，此文章为加密内容，只有管理员才能查看。","text":"对不起，此文章为加密内容，只有管理员才能查看。 Incorrect Password! No content to display! ","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（十）：商品类别数据显示（上）","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（十）：商品类别数据显示（上）","date":"2018-05-03T09:00:47.000Z","updated":"2019-11-04T13:05:09.857Z","comments":true,"path":"2018/05/03/采用Vue-Django-Restful-framework构建生鲜电商项目（十）：商品类别数据显示（上）/","link":"","permalink":"http://blog.licheetools.top/2018/05/03/采用Vue-Django-Restful-framework构建生鲜电商项目（十）：商品类别数据显示（上）/","excerpt":"","text":"写在前面本篇我们来介绍如何把我们的商品类别数据进行显示，由于涉及的知识较多，会分成2篇进行说明。 商品的分类 我们前面说过，这里面配置了2个组件，其实就和我们两个目录相关联。一个是全部数据的接口，用于首页的全部商品分类：一级-二级-三级就是上面的那样；另一个就是获取某一大类的二级分类以及对应的商品数量，就是下面的图片： 当商品被大类进行过滤时，我们需要设置过滤的条件，如价格区间，以及按照价格，销量的排序，还有商品页面的分页功能。 通过vue提供的工具，我们可以很容易的知道组件的结构： 在产品列表中是一堆的router link，你点击它会跳转到详情页，这个详情页其实就是vue 的router路由： 好了，分析到这里我们现在开始进行开发。打开goods\\views.py文件，我们新增代码如下：1234567891011from .serializers import CategorySerializerclass CategoryViewset(mixins.ListModelMixin, viewsets.GenericViewSet): &quot;&quot;&quot; list: 商品分类列表数据 retrieve: 获取商品分类详情 &quot;&quot;&quot; queryset = GoodsCategory.objects.filter(category_type=1) serializer_class = CategorySerializer 注意一下，我们因为是进行商品类别数据的显示，但是数量不是很多，所以不需要进行分页处理。同时因为后面需要生成文档，所以我们需要规范化我们的注释语言。当然我们还需要进行序列化，打开goods\\serializers.py文件：12345678910from goods.models import GoodsCategoryclass GoodsCategorySerializer(serializers.ModelSerializer): &quot;&quot;&quot; 商品类别序列化 &quot;&quot;&quot; class Meta: model = GoodsCategory fields = &quot;__all__&quot; # 取出所有的字段 接着打开urls.py文件，我们配置路由：1234567from goods.views import CategoryViewset# 配置goods的urlrouter.register(r&apos;goods&apos;, GoodsListViewSet, base_name=&apos;goods&apos;) # 这里前面加r可以进行转义# 配置categorys的urlrouter.register(r&apos;categorys&apos;, CategoryViewset, base_name=&apos;categorys&apos;) # 这里前面加r可以进行转义 这里的register有三要素：(prefix, viewset, base_name)，各个参数含义如下：prefix ：该视图集的路由前缀；viewset： 视图集；base_name ：路由名称的前缀；详细的可以点击这里了解一下：DRF路由Routers。然后浏览器地址栏访问一下：1http://127.0.0.1:8000/categorys/ 我们发现这里没有出现我们想要的嵌套显示，也就是一类显示下面的二类，二类显示下面的三类，我们修改serializers.py文件：123456789101112131415161718192021222324252627282930class CategorySerializer3(serializers.ModelSerializer): &quot;&quot;&quot; 商品三级类别序列化 &quot;&quot;&quot; class Meta: model = GoodsCategory fields = &quot;__all__&quot;class CategorySerializer2(serializers.ModelSerializer): &quot;&quot;&quot; 商品二级类别序列化 &quot;&quot;&quot; sub_cat = CategorySerializer3(many=True) class Meta: model = GoodsCategory fields = &quot;__all__&quot;class CategorySerializer(serializers.ModelSerializer): &quot;&quot;&quot; 商品一级类别序列化 &quot;&quot;&quot; sub_cat = CategorySerializer2(many=True) class Meta: model = GoodsCategory fields = &quot;__all__&quot; 这里我们用到了sub_cat，因为我们在model里面将自身的继承关系进行了命名： 然后就可以通过一级分类(parents)得到二级分类（直接调用一级对象的sub_cat),此时就得到了二级对象的数据，但是对于此时得到的二级对象数据，我们依然可以对其进行序列化然后作为父本去获取三级分类对象的数据。 然后运行我们的项目，发现出了这样的错误：12AttributeError at /categories/Got AttributeError when attempting to get a value for field `sub_cat` on serializer `CategorySerializer2`.he serializer field might be named incorrectly and not match any attribute or key on the `RelatedManager` instance.Original exception text was: &apos;RelatedManager&apos; object has no attribute &apos;sub_cat&apos;. 那么你需要检查是否缺少many = True这个参数，然后运行就没问题了。 我们思考这么一个问题， 我们现在获取的是所有的category，但是如何获取具体某一类别下面的信息呢。举个例子，我们点击生鲜食品这一栏，那么左侧出现的应该就是生鲜食品这一栏下面对应的具体信息，而不是依然得全部信息。 打开goods\\views.py文件，我们可以多继承另外一个函数mixins.RetrieveModelMixin就可以了：1class CategoryViewset(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet): 在前面的文章里面我们获取某个具体的数据，是不是都在后面添加了id。假设我们这里需要获取书店里面的某本书（假设该书店只有不到100本书），我们通过get加id的方式就能直接获取取来：1GET /book/10：获取编号为10的那本书 注意这样方式是严格按照restful api 的规范来进行配置的。按照这样的逻辑，我们需要哪个商品的信息，就要传入对应的id，没错就是这样（这是在线教育网站的一个path的配置）：12# 密码重置url re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;), 但是强大的drf已经通过刚才那个函数给我们这样配置了，我们只需刚才那一步即可，都不需要在url里面进行相应的配置,只要我们继承了mixins.RetrieveModelMixin就可以直接通过id来进行具体数据的获取了，是不是很赞。运行你的项目，然后在浏览器地址栏输入:1http://127.0.0.1:8000/categorys/1/ 回车，进行访问吧，可以看到此时返回的是一个字典。 Vue展示商品分类的数据现在我们准备将category的数据和vue进行联调，不过在此之前我们我们需要解决跨域访问的问题。跨域问题在前后端分离的项目中是非常常见的，你不用大惊小怪。我们现在查看一下这个category是如何将数据映射进来的：F:\\cnpmtest\\online-store\\src\\views\\head\\head.vue文件里面，可以看到里面的getMenu函数调用了getCategory函数，那么问题来了getCatgory函数到底在哪里呢： 在这里import { getHotSearch, getCategory ,deleteShopCart } from &#39;../../api/api&#39;看到文里面的导入说明了么，这个文件对应我的位置在F:\\cnpmtest\\online-store\\src\\api\\api.js，我们打开看一下： 看到里面的getCategory 函数了么，这种写法是ES6的写法，可以点击这里了解一下：ECMAScript 6 入门。ES6中的箭头函数params =&gt;传递一个params，如果params中有id那么，通过axios获取接口，并返回指定的具体信息：1return axios.get(`$&#123;host&#125;/categorys/`+params.id+&apos;/&apos;); 如果没有id就返回全部的信息:1return axios.get(`$&#123;host&#125;/categorys/`, params); 其中这里面的${host}是我们获取信息的域名，也就是bobby老师的网站：1let host = &apos;http://shop.projectsedu.com&apos;; # 线上环境 这个函数是一个公共的函数，export是导出数据： ES6模块的import和export用法总结。这样就解决了获取详情信息或通用性问题。那么问题来了，我们如何来调试接口呢？可以注意到，我们在很多地方都用到了host，而我们调试只是一个接口一个调试，该如何解决呢？办法就是新建一个自己的local_host，然后用这个来进行替换，调试谁就替换谁：1let local_host = &apos;http://127.0.0.1:8000&apos; 我们现在因为是调试category，所以需要替换它：123456789//获取商品类别信息export const getCategory = params =&gt; &#123; if(&apos;id&apos; in params)&#123; return axios.get(`$&#123;local_host&#125;/categorys/`+params.id+&apos;/&apos;); &#125; else &#123; return axios.get(`$&#123;local_host&#125;/categorys/`, params); &#125;&#125;; 然后启动我们的前端项目：1npm run dev 发现出了这样的错误： 1Failed to load resource: net::ERR_CONNECTION_REFUSED 说明我们的本地vueshop项目没有启动，我们运行我们的项目，然后发现还是有问题： 这条信息告诉不允许跨域访问，因为我们跨了端口访问，一个是8080，一个是8000，所以才会出错，解决的办法很多。前端的npm也是可以完成跨域访问的，一般是通过proxy代理来完成的。不过这里我们主要说明如何利用服务器来完成跨域访问的。 服务器跨域访问在GitHub上面搜索django-cors-headers，然后按照要求进行配置：Django app for handling the server headers required for Cross-Origin Resource Sharing (CORS)。1、安装django-cors-headers（记得是在虚拟环境下面进行安装）：1pip install django-cors-headers -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 2、注册进入apps(settings.py文件):12345INSTALLED_APPS = ( ... &apos;corsheaders&apos;, ...) 3、配置MIDDLEWARE(settings.py文件，最好放在第一个位置)：12345678910MIDDLEWARE = [ &apos;corsheaders.middleware.CorsMiddleware&apos;, &apos;django.middleware.security.SecurityMiddleware&apos;, &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, &apos;django.middleware.common.CommonMiddleware&apos;, &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;, &apos;django.contrib.messages.middleware.MessageMiddleware&apos;, &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,] 4、添加参数并设置为true以及白名单的配置（settings.py文件）：1234CORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = ( &apos;127.0.0.1:3000&apos;) 然后刷新一下，发现数据就出来了，那么这个数据是如何出来的呢？继续回看我们的head.vue文件：1234567891011getMenu()&#123;//获取菜单 getCategory(&#123; params:&#123;&#125; &#125;).then((response)=&gt; &#123; console.log(response) this.allMenuLabel = response.data &#125;) .catch(function (error) &#123; console.log(error); &#125;); &#125;, 看到没有，这里将response.data赋值给了allMenuLabel，我们在nodepad++里面搜索一下，看这个allMenuLabel，看它在哪个地方：123&lt;li class=&quot;first&quot; v-for=&quot;(item,index) in allMenuLabel&quot; @mouseover=&quot;overChildrenmenu(index)&quot; @mouseout=&quot;outChildrenmenu(index)&quot;&gt; &lt;h3 style=&quot;background:url(../images/1449088788518670880.png) 20px center no-repeat;&quot;&gt; &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt; &lt;/h3&gt; 发现我们后面使用v-for对它的数据进行了遍历，而且这里有一个router-link，它是指向前端的vue_router路由，并不是我们后台的路径，这点要注意一下。其实我们这里就已经把数据的显示和路由交给了前端，后端只需要提供数据就可以了，我们的任务就已经完成了。 现在又有一个问题，为什么我们前面的导航栏没有数据呢: 那是因为我们在后台管理的时候默认没有设置为允许导航，我们可以去后台添加几个导航栏试试. 刷新一下，然后发现导航栏就出现了我们想要的数据。其实我们在前面对这个是否显示导航栏也进行了配置：1234567&lt;template v-for=&quot;(item,index) in allMenuLabel&quot;&gt;&lt;li&gt;&lt;div v-if=&quot;item.is_tab&quot;&gt; &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot; &gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt; &lt;/div&gt;&lt;/li&gt; &lt;/template&gt; 至此，我们本篇关于商品类别数据进行显示上篇的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（九）：商品列表页的配置（下）","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（九）：商品列表页的配置（下）","date":"2018-05-02T08:59:24.000Z","updated":"2019-11-04T13:04:26.160Z","comments":true,"path":"2018/05/02/采用Vue-Django-Restful-framework构建生鲜电商项目（九）：商品列表页的配置（下）/","link":"","permalink":"http://blog.licheetools.top/2018/05/02/采用Vue-Django-Restful-framework构建生鲜电商项目（九）：商品列表页的配置（下）/","excerpt":"","text":"写在前面本篇我们完成商品列表页面的剩余配置，里面包含的知识比较多，所以分成3篇文章进行介绍。 drf中的request和response说明drf中的request我们知道drf对于django的request和response进行了一层封装，所以我们使用起来会更加方便。REST framework&#39;s Request class extends the standard HttpRequest, adding support for REST framework&#39;s flexible request parsing and request authentication.这句话的意思是说：drf在标准的HttpRequest上进行了扩展，增加了对rest框架的灵活请求解析和请求认证的支持。 下面简要说明一下：request。我们可以点击这里drf中的request。 .data： data ,返回用户获取的信息（包括所有的解析内容，文件和非文件），而且不仅能解析通过post方法过来的信息，其他的方法如put ，patch也能进行解析。 .query_params：query_params,里面有通过get请求传递过来的参数，自己可以配置。 .parsers：parsers，因为用户提交过来的数据有很多种类型，所以它就是负责接收各种信息，并提供各种解析器进行解析。 Authentication包括：.user和.auth.use就是说只有通过验证才能获取到当前的用户，而这个.auth返回一些额外的验证信息。 drf中的response Responses response就是根据你发起的请求然后返回响应，对于我们爬虫人员来说最熟悉不过的了，所以我就不细说了。这些就是英文文档的内容，全都有，你点上面那些蓝色的xx就知道了，我就不一句句翻译了，可能我翻译的还没你理解的印象深刻呢。 drf过滤器我们打开goods\\views.py文件，开始书写代码：1234567891011121314151617class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问 # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可 # 有c或者java经验的童鞋很好理解这个问题。 serializer_class = GoodsSerializer pagination_class = GoodsPagination def get_queryset(self): query_set = Goods.objects.all() price_min = self.request.query_params.get(&apos;price_min&apos;, 0) if price_min: query_set = query_set.filter(shop_price__gt=price_min) return query_set 不过运行项目，在浏览器地址栏输入：1http://127.0.0.1:8000/goods/%EF%BC%9Fprice_min=100 ，发现会错：12 assert queryset is not None, &apos;`base_name` argument not specified, and could &apos; \\AssertionError: `base_name` argument not specified, and could not automatically determine the name from the viewset, as it does not have a `.queryset` attribute. 提示我们缺少一个queryset属性，我们尝试修改一下代码：12345678910111213141516class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问 # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可 # 有java经验的童鞋很好理解这个问题。 serializer_class = GoodsSerializer pagination_class = GoodsPagination query_set = Goods.objects.all() def get_queryset(self): price_min = self.request.query_params.get(&apos;price_min&apos;, 0) if price_min: self.query_set = Goods.objects.filter(shop_price__gt=int(price_min)) return self.query_set 运行还是会报同样的错误。找了很久才发现，原来是query_set 这个名字错了，需要修改为queryset:12345678910111213141516class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问 # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可 # 有java经验的童鞋很好理解这个问题。 serializer_class = GoodsSerializer pagination_class = GoodsPagination queryset = Goods.objects.all() def get_queryset(self): price_min = self.request.query_params.get(&apos;price_min&apos;, 0) if price_min: self.queryset = Goods.objects.filter(shop_price__gt=int(price_min)) return self.queryset 然后运行我们的项目，在浏览器地址栏输入：1http://127.0.0.1:8000/goods/?page=1&amp;price_min=100 回车发现，问题解决了： 你有没有觉得这种过滤很麻烦，既要获取参数，又要判断参数是否存在，存在之后又要进行int类型转化。有没有简单的方法呢，答案是有的：Filtering。这个drf提供的filter是非常强大的： DjangoFilterBackend：传统的Django过滤器，类似于xadmin的后台管理器。 SearchFilter：通过搜索关键词进行过滤。 OrderingFilter：通过某个顺序来进行过滤。 DjangoObjectPermissionsFilter：通过权限进行过滤。 前面三种是比较常见的过滤，它们可以实现列表页面的普通字段精确过滤，搜索过滤，以及排序等功能，下面分别进行介绍。 DjangoFilterBackend1、安装django-filter（前面已经安装过了）1pip install django-filter 2、注册进入app1&apos;django_filters&apos;, 3、添加设置（默认设置好了，不用管）123REST_FRAMEWORK = &#123; &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;django_filters.rest_framework.DjangoFilterBackend&apos;,)&#125; 4、开始使用,打开goods\\vieews.py文件：1from django_filters.rest_framework import DjangoFilterBackend 5、删除原来定义的过滤方法：def get_queryset(self)代码全部去掉。6、仿照官方案例进行代码书写：123456789101112class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问 # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可 # 有java经验的童鞋很好理解这个问题。 serializer_class = GoodsSerializer pagination_class = GoodsPagination queryset = Goods.objects.all() filter_backends = (DjangoFilterBackend,) filter_fields = (&apos;name&apos;, &apos;shop_price&apos;) 然后运行一下我们项目，发现页面多了一个过滤器按钮，我们可以进行过滤： 我们测试一下，价格输入123，名称不输入,然后回车，发现浏览器地址栏变成了这样：1http://127.0.0.1:8000/goods/?name=&amp;shop_price=123 注意一下，过滤和搜索是不一样的，过滤是精确的，字段必须保持一模一样，但是搜索却不是。 但是我们如果想要模糊查询，而且价格在某个区间里面，这该怎么办呢？ 区间搜索和模糊查询点击这里查看django-filter，注意一下，这个django-filter不仅可以用在drf上面，还可以用于Django上面，它允许我们自定义filter类。 我们在goods app下面新建一个filters.py：123456789101112131415161718192021# /user/bin/python# -*- coding:utf-8 -*-# @author: Envse# @file: filters.py# @time: 2018/10/4 17:47from django_filters import rest_framework as filtersfrom goods.models import Goodsclass GoodsFilter(filters.FilterSet): &quot;&quot;&quot; 商品的过滤类 &quot;&quot;&quot; price_min = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;gte&apos;) # 指定字段及字段的行为，我们这里指定shop_price的区间 price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;lte&apos;) class Meta: model = Goods fields = [&apos;price_min&apos;, &apos;price_max&apos;] 接着回到我们的views.py文件：12345from goods.filters import GoodsFilter filter_backends = (DjangoFilterBackend,) # # DjangoFilterBackend 过滤器 # filter_fields = (&apos;name&apos;, &apos;shop_price&apos;) # 设置我们需要过滤的字段 filter_class = GoodsFilter # filter_class 等于我们自定义的类 然后运行我们的项目，发现出了这样的错误：12super().__init__(**kwargs)TypeError: __init__() got an unexpected keyword argument &apos;name&apos; 解决办法，修改 price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&#39;lte&#39;)里面的name字段为field_name即可。 刷新一下就成了这个样子： 注意一下，这里如果出现过滤器没有确定按钮的话，检查一下看你有没有继承错误，应该继承的是from django_filters import rest_framework as filters这个语句。 还有出现了这个错误：12UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: &lt;class &apos;goods.models.Goods&apos;&gt; QuerySet. paginator = self.django_paginator_class(queryset, page_size) 因为对于无序的数据，分页器生成的分页数据可能不一致，才导致这种情况，解决办法（打开goods\\views.py文件，修改一下queryset代码）：1queryset = Goods.objects.all().order_by(&apos;add_time&apos;) 然后问题就解决了。接下来完成我们的迷糊查询（搜索）。采用Django QuerySetAPI来完成我们的要求，这里推荐自强学堂的一篇文章Django QuerySetAPI12345name = filters.CharFilter(field_name=&quot;name&quot;, lookup_expr=&quot;icontains&quot;) # 模糊查询: 名称中包含某字符，且字符不区分大小写,不加lookup_expr=&quot;icontains&quot;则是等值匹配class Meta: model = Goods fields = [&apos;price_min&apos;, &apos;price_max&apos;, &apos;name&apos;] 接下来我们进行搜索的配置，在这之前去掉前面的模糊查询代码，两行哈，就上面的。 SearchFilter点击这里查看官方文档：SearchFilter，我们仿照官方的实例来测试一下：（打开goods\\views.py文件）1234from rest_framework import filters filter_backends = (DjangoFilterBackend, filters.SearchFilter) # DjangoFilterBackend,以及SearchFilter过滤器（SearchFilter） search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;) 然后运行一下： 下面多了一个搜索框，DjangoFilterBackend和SearchFilter可以分开使用，也可以合起来使用，想让谁显示就配置谁，也可以同时显示。 如果出现下面的错误,说明你的filter导错了，我们这里要用到的是from rest_framework import filters而不是from django_filters import filters注意一下：12filter_backends = (DjangoFilterBackend, filters.SearchFilter)AttributeError: module &apos;django_filters.rest_framework.filters&apos; has no attribute &apos;SearchFilter&apos; 然后搜索还支持多种过滤方式： 1search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;) 需要说明的一点是，这三个字段不是统一的，也就是说可以单独使用。例如对name进行等值搜索：1search_fields = (&apos;=name&apos;) 去掉其他的字段，返回结果为0个。而我们在里面加一个字段：1search_fields = (&apos;=name&apos;, &apos;goods_brief&apos;) 返回结果就不是了，而是有一个。如果你把第三个字段都加上，发现全部结果了，因为他们里面只要满足一个条件就能返回。也就是说是或的关系，而不是与的关系，这一点要注意一下。同时我们这里不进行全文的搜索，因为一般模糊查询最好是使用elasticSearch来做，那样更方便。接下来是OrderingFilter排序了。 OrderingFilter老规矩还是先看官方文档：OrderingFilter，然后按照官方的例子来测试一下：123# DjangoFilterBackend,,SearchFilter,OrderingFilterfilter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)ordering_fields = (&apos;sold_num&apos;, &apos;add_time&apos;) 我们按照商品的销量，添加时间进行排序，分正排序与负排序： 这样我们通过简单的几行代码，完成了商品列表页的分页，过滤，搜索，排序功能。 至此，我们本篇关于商品列表页面的配置下篇的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（八）：商品列表页的配置（中）","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（八）：商品列表页的配置（中）","date":"2018-05-01T08:58:19.000Z","updated":"2019-11-04T13:04:01.879Z","comments":true,"path":"2018/05/01/采用Vue-Django-Restful-framework构建生鲜电商项目（八）：商品列表页的配置（中）/","link":"","permalink":"http://blog.licheetools.top/2018/05/01/采用Vue-Django-Restful-framework构建生鲜电商项目（八）：商品列表页的配置（中）/","excerpt":"","text":"写在前面本篇我们继续进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。 基于类来配置商品列表页现在我们不使用那个APIView，而是使用更上层的view：GenericAPIViewUsing mixins，这样写起来更加简单。使用Using mixins 和 GenericAPIView，其中GenericAPIView是在APIView的基础上进行了更深层次的封装，里面加入了一些东西如分页用的pagination_class，过滤用的filter_backends等。 我们看到官方给我们提供的文档代码是：12345678910111213141516from snippets.models import Snippetfrom snippets.serializers import SnippetSerializerfrom rest_framework import mixinsfrom rest_framework import genericsclass SnippetList(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView): queryset = Snippet.objects.all() serializer_class = SnippetSerializer def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) def post(self, request, *args, **kwargs): return self.create(request, *args, **kwargs) 所以，我们按照这个代码来修改我们的goods\\views.py文件：123456789101112131415161718from .serializers import GoodsSerializerfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom .models import Goodsfrom rest_framework import mixinsfrom rest_framework import genericsclass GoodsListView(mixins.ListModelMixin, generics.GenericAPIView): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; queryset = Goods.objects.all()[:10] serializer_class = GoodsSerializer def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) 我们通过get方法最后返回的是一个list函数，我们看一下list函数到底是干嘛的，我们可以看到在mixin.py文件里面： 它其实已经可以实现分页和序列化的功能了。 现在我们尝试把get方法注释掉，运行一下项目，发现出了问题：1&quot;detail&quot;: &quot;方法 “GET” 不被允许。&quot; 所以说，不论是何种view，我们都需要去重写它的get或者post等http请求的方法（drf默认是不会接收任何方法请求的） 这样是不是很简单，几行代码就解决了问题。那么我要是告诉你还有比这更简单的方法，都不用你去写get或者post等http请求，是不是觉得太方便了呢。 我们查看Pycharm左边的源码：F:\\Envs\\vueshop\\Lib\\site-packages\\rest_framework\\generics.py: 点击那个ListAPIView，有没有发现右侧的代码和我们刚才写的一模一样，所以我们可以直接继承这个ListAPIView，就不用写那些多余的代码了。注意到没有，右边的函数都直接继承了两个：mixins.XXXXModelMixin, GenericAPIView，这个和我们前面代码所继承的一模一样（mixins.ListModelMixin, generics.GenericAPIView这里直接在generics.py文件里使用，所以不加generics），所以直接使用ListAPIView即可： 123456789from rest_framework.generics import ListAPIViewclass GoodsListView(ListAPIView): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; queryset = Goods.objects.all()[:10] serializer_class = GoodsSerializer 简单说一下几个常用的APIView：ListAPIview (用于获取列表)，CreateAPiView (用于创建一条信息)，RetrieveAPIView(用于获取某一条信息)。具体可以点击这里进行查看：API Guide(四)之Generic views 现在又有问题，一般的列表页都是需要分页的，你不可能一下子把所有的信息都给展示出来,我们有简单的方法，只需要通过在setting里面配置一个参数就能完成我们的分页功能。我们所有关于rest-framework的配置都是在F:\\Envs\\vueshop\\Lib\\site-packages\\rest_framework\\settings.py里面的： 可以看到，drf默认是不提供分页的，需要我们自己来写，我们打开vueshop\\settings.py文件，在底部新增如下代码：1234REST_FRAMEWORK = &#123; &apos;DEFAULT_PAGINATION_CLASS&apos;: &apos;rest_framework.pagination.LimitOffsetPagination&apos;, &apos;PAGE_SIZE&apos;: 10,&#125; 这些功能都是刚才提到的GenericAPIView来实现的。我们发现运行之后都直接给图片把域名都给加上了，可以直接进行访问了： 还可以自定义pagination的样式： Setting the pagination style我们继续在views.py里面进行修改：1234567891011121314151617from rest_framework.pagination import PageNumberPaginationclass GoodsPagination(PageNumberPagination): page_size = 10 # 默认每页个数 page_size_query_param = &apos;page_size&apos; # 可以自定义每页的个数 page_query_param = &quot;p&quot; max_page_size = 100 # 默认每页最大个数class GoodsListView(generics.ListAPIView): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; queryset = Goods.objects.all() serializer_class = GoodsSerializer pagination_class = GoodsPagination 注意这里在GoodsListView里面必须添加pagination_class字段，因为在GenericAPIView里面有这个参数，还字段调用了这个DEFAULT_PAGINATION_CLASS，也就意味着有了这个你就要把刚才在settings.py里面配置的那个DEFAULT_PAGINATION_CLASS给注释掉，否则就会出错哈： 运行结果如下(第几页，每页多少个都是可以自定义的，你不定义就用默认的)： Viewsets和router完成商品列表页现在我们来说一个比GenericAPIView还要更深层次的东西：Viewsets，这个不是某个具体的View，他包函5个view： 我们现在将使用它的GenericViewSet，看到没有它不仅封装了我们的GenericAPIView，还添加了一个ViewSetMixin： 我们来看一下这个ViewSetMixin里面包含了什么： 里面有4个方法，第一个就是路由函数的配置。 我们知道我们刚才在GoodsListView里面继承的是这个：1class GoodsListView(generics.ListAPIView): 我们点开ListAPIView，发现ListAPIView其实继承了mixins.ListModelMixin和GenericAPIView12class ListAPIView(mixins.ListModelMixin, GenericAPIView): 而如果我们只这样写，发现GenericViewSet其实继承的是ViewSetMixin和generics.GenericAPIView，是不是少了一个，对把mixins.ListModelMixin给丢了，所以我们需要补上：1class GoodsListView(viewsets.GenericViewSet): 1class GenericViewSet(ViewSetMixin, generics.GenericAPIView): 现在我们看这个： ViewSets，尝试将ViewSets和Routers来进行配套使用。为了更好地知道我们这里是使用了viewset，因此我们将GoodsListView进行改名：1234567class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin): # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了 &quot;&quot;&quot; 商品列表页 &quot;&quot;&quot; queryset = Goods.objects.all() serializer_class = GoodsSerializer pagination_class = GoodsPagination 接下来去我们的urls.py文件里面配置我们的url:12345from goods.views import GoodsListViewSetgoods_list = GoodsListViewSet.as_view(&#123; &apos;get&apos;: &apos;list&apos;,&#125;) 我们可以直接将get请求绑定到list上面，类似于前面看到的12def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) 既然这样弄好了，我们之前的url映射就要修改了（我们不再需要添加as_view()了）：12# 商品列表页path(&apos;goods/&apos;, goods_list, name=&quot;goods-list&quot;), 其实还有更简单的呢，我们可以看到官方文档里面有介绍这个DefaultRouter： 注意由于官方是1.x的文档，所以2.0的drf配置可能url就有些不同，但是没关系，我这个我经过了测试，没有问题。我们继续修改urls.py文件：12345from rest_framework.routers import DefaultRouterrouter = DefaultRouter()# 配置goods的urlrouter.register(r&apos;goods&apos;, GoodsListViewSet) # 这里前面加r可以进行转义 然后去掉之前对于goods的配置，在urlpatterns中添加：12# 对于goods的router path路径 re_path(&apos;^&apos;, include(router.urls)), 然后运行我们的项目，发现么有任何问题。 看到这里大家就可能会懵圈，其实我也是，因为我们不知道什么时候用GenericViewSet, GenericAPIView ，APIView 和 View。懵圈就是对的，我们接下来就是说明这些东西的层次结构，以后你就不会晕了。 GenericViewSet， GenericAPIView，APIView 和View的使用现在我们来理清一下这些view之间的关系，还有mixins.ListModelMixin以及这些关系如何来进行组合使用，这样我们就清楚什么时候使用什么了。看这里：1234GenericViewSet(viewset) -drf GenericAPIView -drf APIView -drf View -django 层级关系有了（越往上就是对底层的一次封装）也就是说下面有的功能上面一定都有，而上面有的功能下面却不一定有：123class GenericViewSet(ViewSetMixin, generics.GenericAPIView):class GenericAPIView(views.APIView):class APIView(View): 但还是不清楚各个view的区别（这里是指功能view），我们需要借助mixin来进行理解了： 上面可以看到mixin一共有5种类型，各个view 之间的差异其实就是通过这个mixin来实现的。这就好比英语中的时态一样，都是完成时，却又不同（前面那个层级关系就类似说明了，过去时，现在时，将来时的区别（实际上又没有，里面的意思你肯定懂））： 过去完成时，现在完成时，将来完成时，过去将来完成时 有点跑题，不懂的点这里看一下，毕竟英语还是挺重要的：现在完成时+过去完成时+将来完成时+过去将来完成时。我们来看这5个mixin，我们以其中的ListModelMixin为例，来进行说明：1234567891011121314class ListModelMixin(object): &quot;&quot;&quot; List a queryset. &quot;&quot;&quot; def list(self, request, *args, **kwargs): queryset = self.filter_queryset(self.get_queryset()) page = self.paginate_queryset(queryset) if page is not None: serializer = self.get_serializer(page, many=True) return self.get_paginated_response(serializer.data) serializer = self.get_serializer(queryset, many=True) return Response(serializer.data) 我们看到这个ListModelMixin继承的是最高类object（祖宗类），这个没什么说的。关键是这里的list方法，它将get 和 list进行了连接，里面实现了过滤，分页和序列化的功能。 其他的Mixin：CreateModelMixin ：创建数据会用到；RetrieveModelMixin：获取具体的信息，序列化；UpdateModelMixin：更新全部还是部分的信息；DestroyModelMixin：用来连接delete操作，并在操作的时候设置返回状态如200，204等。上面这些功能都是由mixin来完成的，GenericAPIView并没有做，所以要实现相应的功能就必须通过两者结合来达到。那现在的问题就是这个GenericAPIView到底做了什么事情，不可能绑定这么一个没有的东西吧。 GenericAPIView有好多种，我们以ListAPIView为例说明：1class ListAPIView(mixins.ListModelMixin, GenericAPIView): 点击右边的GenericAPIView，我们可以看到它是继承了views.APIView：1234567891011121314151617181920212223class GenericAPIView(views.APIView): &quot;&quot;&quot; Base class for all other generic views. &quot;&quot;&quot; # You&apos;ll need to either set these attributes, # or override `get_queryset()`/`get_serializer_class()`. # If you are overriding a view method, it is important that you call # `get_queryset()` instead of accessing the `queryset` property directly, # as `queryset` will get evaluated only once, and those results are cached # for all subsequent requests. queryset = None serializer_class = None # If you want to use object lookups other than pk, set &apos;lookup_field&apos;. # For more complex lookup requirements override `get_object()`. lookup_field = &apos;pk&apos; lookup_url_kwarg = None # The filter backend classes to use for queryset filtering filter_backends = api_settings.DEFAULT_FILTER_BACKENDS # The style to use for queryset pagination. pagination_class = api_settings.DEFAULT_PAGINATION_CLASS 看到上面的注释没有：Base class for all other generic views：所有通用（一般）视图的基类。里面还有两行代码：12345# The filter backend classes to use for queryset filteringfilter_backends = api_settings.DEFAULT_FILTER_BACKENDS# The style to use for queryset pagination.pagination_class = api_settings.DEFAULT_PAGINATION_CLASS 看到了，为什么我们可以过滤，可以分页？原因就在这里。我们再点击右边的APIView，看看这里面是什么： 这就是一些基本的功能，我们前面的GenericAPIView就已经封装具有了这些，一些没有的功能就在更深的view上面。这就好比你一年级会+，-运算，二年级你除了会+，-还会了*，/运算；到了后面，你不仅会前面的还会乘方，开方。。。。运算。 现在我们谈一下马上用到的RetrieveAPIView:12345678class RetrieveAPIView(mixins.RetrieveModelMixin, GenericAPIView): &quot;&quot;&quot; Concrete view for retrieving a model instance. &quot;&quot;&quot; def get(self, request, *args, **kwargs): return self.retrieve(request, *args, **kwargs) 这个注释Concrete view for retrieving a model instance.的意思是：取到一个模型实例化的具体视图。然后将get方法与retrieve方法进行绑定，就能利用到retrieve的方法了，而不仅仅只是get数据了。而且通过浏览器发送过来的请求只有http协议中规定的几种，我们这里就不只有那些了。我们点retrieve进去，看看这个函数实现了什么功能。它自动帮我们跳到了RetrieveModelMixin这个类，而里面有一个retrieve函数。这个类的作用就是获取一个模型的实例而且是通过retrieve函数来完成的： 12345678class RetrieveModelMixin(object): &quot;&quot;&quot; Retrieve a model instance. &quot;&quot;&quot; def retrieve(self, request, *args, **kwargs): instance = self.get_object() serializer = self.get_serializer(instance) return Response(serializer.data) 所以这其实就是mixins.RetrieveModelMixin和GenericAPIView的一次组合，实际上你通过那个RetrieveAPIView的继承关系就能看出来：1class RetrieveAPIView(mixins.RetrieveModelMixin, GenericAPIView): 那么按照这种组合我们是否可以自己组合自己想要的类呢？答案是可以的，但是别忘了把get 方法和 retrieve方法进行绑定，也就是说光有下面是不可以的：12345class RetrieveAPIView(mixins.RetrieveModelMixin, GenericAPIView): &quot;&quot;&quot; Concrete view for retrieving a model instance. &quot;&quot;&quot; 正确的应该是这样：1234567class RetrieveAPIView(mixins.RetrieveModelMixin, GenericAPIView): &quot;&quot;&quot; Concrete view for retrieving a model instance. &quot;&quot;&quot; def get(self, request, *args, **kwargs): return self.retrieve(request, *args, **kwargs) 所以一般情况我们都会优先考虑那些已经组合好的APIView，只有在满足不了需求的情况下，我们才进行组合，记得将http请求方法（不一定是get）与mixin方法进行绑定哈: 我们往上走，说完了GenericAPIView，现在来说一下GenericViewSet(viewset)：1234GenericViewSet(viewset) -drf GenericAPIView -drf APIView -drf View -django 这个viewset有什么好处呢？我们知道这个viewset有5种： 它们也都继承了GenericAPIView，并都与唯一的ViewSetMixin进行了组合：1class GenericViewSet(ViewSetMixin, generics.GenericAPIView): 我们看一下这个ViewSetMixin它里面是什么： 这个ViewSetMixin将具体的每个modelmixin(例如:(mixins.DestroyModelMixin，mixins.UpdateModelMixin)进行了功能合并，形成了唯一的一个ViewSetMixin。 在讲GenericAPIView的时候我们说过，当你自定义APIView的时候需要将http请求方法与mixin方法进行绑定。那么上面说过这个唯一的ViewSetMixin既然是进行了功能合并，那我们就不需要进行方法绑定了。注意我这里是说不需要进行方法的绑定，但没说不需要其他的绑定关系。 url的配置还是需要配置的，我们打开那个viewsets.py文件（实际上我们上通过点击这个GenericViewSet来直接进入该文件的）1class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin): 这其实就是url的配置，它重写了as_view方法，接受参数，并传递到对应的method 与action进行绑定。所以我们在urls.py文件里面，就要修改了：12345678goods_list = GoodsListViewSet.as_view(&#123; &apos;get&apos;: &apos;list&apos;,&#125;)urlpatterns = [path(&apos;goods/&apos;, goods_list ,name=&quot;goods-list&quot;), # 这里就不需要as_view()了] 这样尽管很简单，但是drf还是给我们提供了一个更简单的Routers：Using Routers 我们可以使用这个进行默认的绑定，这个其实和generic中的差不多，怎么用呢？直接在urls.py文件里面进行配置：1234567891011121314from goods.views import GoodsListViewSetfrom rest_framework.routers import DefaultRouterrouter = DefaultRouter()# 配置goods的urlrouter.register(r&apos;goods&apos;, GoodsListViewSet) # 这里前面加r可以进行转义urlpatterns = [ # 对于goods的router path路径 re_path(&apos;^&apos;, include(router.urls)),] 是不是很简单。ViewSetMixin除了不需要进行方法绑定，还有其他的好处： 比如依赖于具体的request请求方法，来给视图绑定动作。这个操作在后面的开发中进行动态的serializer时具有非常大的好处，非常方便。 最后奉上一张图片，让你对此有更直观的认识： 大家可以点击这里，了解更多关于drf的知识：drf翻译的教程 至此，我们本篇关于商品列表页面的配置中篇的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（七）：商品列表页的配置（上）","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（七）：商品列表页的配置（上）","date":"2018-04-22T08:56:50.000Z","updated":"2019-11-04T13:04:48.867Z","comments":true,"path":"2018/04/22/采用Vue-Django-Restful-framework构建生鲜电商项目（七）：商品列表页的配置（上）/","link":"","permalink":"http://blog.licheetools.top/2018/04/22/采用Vue-Django-Restful-framework构建生鲜电商项目（七）：商品列表页的配置（上）/","excerpt":"","text":"写在前面本篇我们将开始进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。 基于类来配置商品列表页在教育网站那个项目里面，我们介绍了基于视图（FBV）和基于类（CBV）来实现用户登录的功能：Django~FBV和CBV 基于视图（FBV）：12345678910111213141516171819202122232425# 基于视图函数的实现用户的登录# 当我们配置的url被这个view处理时，将会自动传入request对象.def user_login(request): # 前端向后端发送的请求方式有两种: get和post # 登录提交表单时为post if request.method == &quot;POST&quot;: # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &apos;index.html&apos;) else: # 说明里面的值是None，再次跳转回主页面并报错 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) # 获取登录页面时为get elif request.method == &quot;GET&quot;: # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) 基于类（CBV）：12345678910111213141516171819202122232425262728293031323334# 基于类实现用户的登录，它需要继承viewclass LoginView(View): # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证 def get(self, request): # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) # 不需要判断，直接调用post方法 def post(self, request): # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息 login_form = LoginForm(request.POST) # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息 if login_form.is_valid(): # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: if user.is_active: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return HttpResponseRedirect(reverse(&quot;index&quot;)) else: return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;) else: # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息 else: return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;) 为了实现我们的面向对象思想，我们更加喜欢后者来进行开发。 1、首先我们先进行url的配置，在vueshop\\urls.py文件里面，新增一行代码：1234from goods.view_base import GoodsListView# 商品列表页 path(&apos;goods/&apos;, GoodsListView.as_view(), name=&quot;goods-list&quot;), 先暂且这样，因为我们还没有配置视图函数，所以会出现红色的错误提示，先不用管。2、我们在apps\\goods中新建一个view_base.py文件，来实现一个仅仅只通过Django实现的json返回，这让我们更加了解Django的功能： 1234567891011121314151617181920212223242526272829# /user/bin/python# -*- coding:utf-8 -*-# @author: Envse# @file: view_base.py# @time: 2018/10/3 14:46import jsonfrom django.views.generic.base import Viewfrom goods.models import Goodsclass GoodsListView(View): def get(self, request): &quot;&quot;&quot; 通过Django的view实现商品的列表页 :param request: :return: &quot;&quot;&quot; json_list = [] goods = Goods.objects.all()[0:10] for good in goods: json_dict = &#123;&#125; json_dict[&quot;name&quot;] = good.name json_dict[&quot;category&quot;] = good.category.name json_dict[&quot;market_price&quot;] = good.market_price json_list.append(json_dict) from django.http import HttpResponse return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;) 然后我们运行一下项目，在浏览器地址栏中输入：1http://127.0.0.1:8000/goods/ 会发现全是一堆乱码，所以我们利用Chrome的童鞋可以在应用商店里下载json viewer： 然后点击安装，最后刷新一下我们的项目，发现页面就好看多了： 这样就把我们当前的信息都给展示出来了，但是你肯定想这么简单的操作，我们还用什么restful framework呢？其实这是因为当我们的项目很多时，我们不可能还按照这种方式一一用属性的方法来取出来，这劳动量太大了。还有就是有些属性是通过这种方式是无法取出来的，你可以试试json_dict[&quot;add_time&quot;] = good.add_time这个你运行肯定会出错，因为这个不是一个jsonserializer对象。 现在我们来利用Django自带的model_to_dict来给刚才的代码进行修改：12345678910111213141516171819202122232425262728293031323334# /user/bin/python# -*- coding:utf-8 -*-# @author: Envse# @file: view_base.py# @time: 2018/10/3 14:46import jsonfrom django.views.generic.base import Viewfrom goods.models import Goodsclass GoodsListView(View): def get(self, request): &quot;&quot;&quot; 通过Django的view实现商品的列表页 :param request: :return: &quot;&quot;&quot; json_list = [] goods = Goods.objects.all()[0:10] # for good in goods: # json_dict = &#123;&#125; # json_dict[&quot;name&quot;] = good.name # json_dict[&quot;category&quot;] = good.category.name # json_dict[&quot;market_price&quot;] = good.market_price # json_list.append(json_dict) from django.forms.models import model_to_dict for good in goods: json_dict = model_to_dict(good) json_list.append(json_dict) from django.http import HttpResponse return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;) 运行一下我们的项目，发现大部分都能序列化，但还是有些字段不可以： 这时候Django自带的一个专门用于序列化的字段serializers派上用场了，我们修改代码如下（有了这个连model_to_dict都不需要了）：123456789101112131415161718192021import jsonfrom django.views.generic.base import Viewfrom goods.models import Goodsclass GoodsListView(View): def get(self, request): &quot;&quot;&quot; 通过Django的view实现商品的列表页 :param request: :return: &quot;&quot;&quot; json_list = [] goods = Goods.objects.all()[0:10] from django.core import serializers json_data = serializers(&quot;json&quot;, goods) json_data = json.loads(json_data) from django.http import HttpResponse, JsonResponse return HttpResponse((json_data), content_type=&quot;application/json&quot;) 如果运行后出现这种情况：1django.core.exceptions.ImproperlyConfigured: Requested setting UEDITOR_SETTINGS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() be 请参考这篇文章：PyCharm开发django配置过程遇到问题（转） 然后运行项目，又出现这个错误：12raise AppRegistryNotReady(&quot;Apps aren&apos;t loaded yet.&quot;)django.core.exceptions.AppRegistryNotReady: Apps aren&apos;t loaded yet. 这个很简单，是运行vueshop这个项目，不是view_base.py文件！！！运行vueshop这个项目，发现又出了问题：12 json_data = serializers(&quot;json&quot;, goods)TypeError: &apos;module&apos; object is not callable 说明这是一个moudle我们不能直接调用它，而应该在调用的时候写清楚具体调用哪一个方法！修改json_data = serializers(&quot;json&quot;, goods)为：12345 from django.core.serializers import serialize json_data = serialize(&quot;json&quot;, goods)或者 from django.core import serializers json_data = serializers.serialize(&quot;json&quot;, goods) 然后运行一下vueshop项目，发现是一些没有规则的文字： 那是因为我们没有把这些dict类型的数据转成str字符串，所以修改返回代码：1return HttpResponse((json.dumps(json_data)), content_type=&quot;application/json&quot;) 当然你可以以直接使用JsonResponse，把鼠标移到JsonResponse按住Ctrl，单击左键，就可以看到源码了，看到没有这其实是对上面做了一次更深的封装： 所以我们也可以这样修改：1return JsonResponse(json_data, safe=False) 记住这里的safe=False一定要添加，否则会出错： 注意json.dumps()和json.loads()是相反的操作，前者用于将dict类型的数据转成str字符串，后者用于将str类型的数据转成dict类型。不清楚的童鞋可以阅读这篇文章：【Python】Json模块dumps、loads、dump、load函数介绍。了解更多Django序列化的知识可以阅读这篇文章： Serialize—-序列化django对象或者这篇序列化介绍。 看到这里你还是有疑问，前面说不能序列化所以用drf(Django Restful Framework的简称，以后都是这么说明)。可是现在Django通过其提供的序列化函数已经很好的解决了这个问题，那我们为什么还要用drf呢？ 1、前面说过images这个字段保存的是图片的一个相对路径，我们需要在前面加上’media’。（如果通过PC端就可以不用，因为我们前面配置了media_root，但是通过app,pad就需要用户自己添加，这是不可能的，所以需要用到drf，它可以帮我们添加这个media前缀） 2、我们这里字段序列化方式被固定了，一旦需要重组就非常的麻烦，drf就不一样了。 3、drf可以生成文档，还可以进行输入检测等。 采用drf完成商品列表页面的配置首先通过浏览drf的官方网站，我们需要安装一些依赖包： coreapi (1.32.0+) - Schema generation support. Markdown (2.1.0+) - Markdown support for the browsable API. django-filter (1.0.1+) - Filtering support. django-crispy-forms - Improved HTML display for filtering. django-guardian (1.1.1+) - Object level permissions support.我们发现其他都有，现在只需要安装coreapi(文档会用到)和django-guardian。使用下面的命令进行安装:1pip install xx -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 如果你在安装coreapi的过程中出现了utf-8的decode编码错误，那么你就要修改你的虚拟环境的编码格式了（一般来说使用pip18的版本都不会有这个错误，其他版本可能会有），具体操作如下：打开你虚拟环境下面的–init–.py文件（我的路径为F:\\Envs\\vueshop\\Lib\\site-packages\\pip\\compat）大约75行的位置： 将里面的utf_8修改为gbk。然后再进行安装，不过需要先卸载之前安过的版本资源：1pip uninstall coreapi MarkupSafe 然后在运行我们的安装命令：1pip install coreapi -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 接下来引入我们的api文档，打开vueshop\\urls.py文件，我们新增两行代码：1234from rest_framework.documentation import include_docs_urls # 自动化的文档,低版本的Django记得把docs/$后面的$去掉（我这采用的是Django2.0.1） path(&apos;docs/&apos;, include_docs_urls(title=&apos;慕海生鲜网文档&apos;)) 然后运行我们的项目，看看是不是没有错误发生。现在我们需要按照官方文档的说明去settings.py文件里面注册我们的rest_framework:1234INSTALLED_APPS = ( ... &apos;rest_framework&apos;,) 还有路由的配置： 只不过这是Django1.x系列的路由配置，在Django2.x里面我们这样配置：12# Django rest_framework的路由配置 path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;)) 然后我们按照官方快速使用的例子来创建一个api: Rewriting our API using class-based views 我们直接复制上面的代码进入我们goods\\views.py文件里面：1234567891011121314from .serializers import GoodsSerializerfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom .models import Goodsclass GoodsListView(APIView): &quot;&quot;&quot; List all snippets, or create a new snippet. &quot;&quot;&quot; def get(self, request, format=None): goods = Goods.objects.all()[:10] goods_serializer = GoodsSerializer(goods, many=True) # 因为返回的是列表，所以我们需要指定many为True return Response(goods_serializer.data) 说明一下，from .models import Goods表示当前的目录下的models文件，这样取不容易出现因为重名而导致的失败。SnippetSerializer是可以自定义序列化的类。在前面的教育网站里面我们说过了modelform 和form，特别是modelform，它可以将字段直接转成html代码。同样的在drf里面，serializer是用来取代form开发的，也就是说我们不使用form来进行后面的开发了(实际上是没有用于让用户表单提交的功能)，直接用serializer。而且它的功能都不一样了，serializer是用来对json进行序列化的。具体参考这个系列的文章：Django rest framework之Serializers笔记（一） 类似于之前对form的操作，我们先来在goods app下面新建一个文件serializers.py:然后按照官方快速使用的例子来创建一个Serializer class：Creating a Serializer class123456789101112# /user/bin/python# -*- coding:utf-8 -*-# @author: Envse# @file: serializers.py.py# @time: 2018/10/3 20:09# 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同from rest_framework import serializersclass GoodsSerializer(serializers.Serializer): name = serializers.CharField(required=True, max_length=100) click_num = serializers.IntegerField(default=0) 然后修改urls.py文件：1from goods.views import GoodsListView 注意将之前的from goods.view_base import GoodsListView给删除掉，否则就有两个地址了。 现在运行我们的项目，发现出了问题： 这个问题有两种解决方法，一种是注销后台xadmin，另一种则是修改UserProfile的返回值，将name修改为username，因为你在定义的时候是允许该字段为空的，所以会返回non-string，修改为username就不会了，因为该字段来自AbstractUser类，该类username是不允许为空的： 然后重新运行我们的项目，出现正常画面了： 用浏览器请求drf默认会帮你渲染成网页的格式，这是已经api接口样式了： 你可以点击右上角的GET，选择json就是之前看到的那种： 选择api就是下面这种，这也是默认的样式： 点击旁边的option就会出现接口的描述： 这个接口的描述我们可以自己定义，上面就是那个description。它不仅能解析get信息，你通过post提交的数据也能进行解析。render和parse对于我们爬虫人员而言非常熟悉，分别代表渲染和解析。值得注意的是，因为我们这里是序列化Goods，因此我们serializers的字段要和goods app models.py里面的字段保持一致，这个和Django form里面对于form和model的要求也是一样的。 我们尝试添加一个不一样的字段goods_front_image，看看返回什么： 你知道的我们在数据库里面并没有添加media这个前缀，但是drf却给我们自动添加了，这是为什么呢？那是因为我们在setting.py里面配置了MEDIA_URL，所以drf根据这个就会自动添前缀。 我们可以对drf进行登入，登出操作，那是因为我们在urls.py里面配置了：12# Django rest_framework的路由配置 path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;)) 既然这个serializers类似于form，那么我们是否可以进行类似的保存到数据库的操作呢？答案是可以的。所以我们开始按照官方文档来进行配置：打开goods\\views.py文件，修改为以下代码123456789101112131415161718192021222324252627from django.shortcuts import render# Create your views here.from .serializers import GoodsSerializerfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom .models import Goodsfrom rest_framework import statusclass GoodsListView(APIView): &quot;&quot;&quot; List all snippets, or create a new snippet. &quot;&quot;&quot; def get(self, request, format=None): goods = Goods.objects.all()[:10] goods_serializer = GoodsSerializer(goods, many=True) # 因为返回的是列表，所以我们需要指定many为True return Response(goods_serializer.data) def post(self, request, format=None): # 这里的request不再是Django的request，而是对其进行了更深的封装 serializer = GoodsSerializer(data=request.data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) 是不是觉得上面的代码很眼熟？是的这个serializer 和form实在是太像了，连验证都差不多一样。有了drf之后，不需要对用户的请求方法method进行判断，我们直接使用data=request.data就可以取出数据，然后放到data里面，是不是很方便呢。然后调用serializer的save方法对数据进行保存。 接下来就是完善我们的goods\\serializers.py文件:12345678910111213141516171819202122# /user/bin/python# -*- coding:utf-8 -*-# @author: Envse# @file: serializers.py.py# @time: 2018/10/3 20:09# 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同from rest_framework import serializersfrom goods.models import Goodsclass GoodsSerializer(serializers.Serializer): name = serializers.CharField(required=True, max_length=100) click_num = serializers.IntegerField(default=0) goods_front_image = serializers.ImageField() def create(self, validated_data): &quot;&quot;&quot; Create and return a new `Snippet` instance, given the validated data. &quot;&quot;&quot; return Goods.objects.create(**validated_data) 这里调用serializer的create方法，用于把需要验证的字段创建一个验证对象。 说到这里你可能会问，Django的form为了避免我们重复的书写验证字段所以提供了一个Modelform。那么这里的serializer也是需要验证的，那么它是否也提供了一个类似于Modelform的Modelserializer呢？答案是有的！Using ModelSerializers这里就有介绍。 我们修改serilalizers.py文件为： 123456789from rest_framework import serializersfrom goods.models import Goodsclass GoodsSerializer(serializers.ModelSerializer): class Meta: model = Goods # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段 fields = &quot;__all__&quot; # 取出所有的字段 注意一下，此处的外键（category）会被序列化为id，如果我们想要获取这个外键的全部信息并在此处进行显示呢，那该怎么办？我们可以通过嵌套的方式来实现这个功能，重新修改serilalizers.py文件为：12345678910111213141516171819from rest_framework import serializersfrom goods.models import Goods, GoodsCategoryclass CategorySerializer(serializers.ModelSerializer): class Meta: model = GoodsCategory fields = &quot;__all__&quot;class GoodsSerializer(serializers.ModelSerializer): category = CategorySerializer() class Meta: model = Goods # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段 fields = &quot;__all__&quot; # 取出所有的字段 然后刷新一下： 你看，所有的信息都被显示出来了。 至此，我们本篇关于商品列表页面的配置上篇的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（六）：restful api以及Vue的结构介绍","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（六）：restful-api以及Vue的结构介绍","date":"2018-04-20T08:55:36.000Z","updated":"2019-11-04T13:04:38.293Z","comments":true,"path":"2018/04/20/采用Vue-Django-Restful-framework构建生鲜电商项目（六）：restful-api以及Vue的结构介绍/","link":"","permalink":"http://blog.licheetools.top/2018/04/20/采用Vue-Django-Restful-framework构建生鲜电商项目（六）：restful-api以及Vue的结构介绍/","excerpt":"","text":"写在前面本篇我们将开始介绍restful api以及Vue的结构。 为什么要前后端分离1、pc,app,pad多端适应随着技术的发展，我们所开发的网站不仅仅是适配于PC端了，更需要进行多个服务端的匹配，目前来说后端模板渲染的方式非常适合pc端，但是对于app，pad端却是不友好的。 2、SPA开发模式开始流行所谓的SPA开发模式，其实就是单页面应用。单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。现在最流行的方式就是前后端分离，由前端提供页面，后端提供接口。 3、前后端开发的职责分不清正如我们在前面说过，其实Django的模板到底由谁来写？谁来拆分这都是值得大家头疼的事。我上次我下载了几百套的织梦cms模板，想用Django来搭建网站，发现里面嵌入了太多的php，java ，Ajax。。。代码，ajax，java代码还能理解一点，但是php我就不会了，所以这个问题就显得特别重要。 4、开发效率问题，前后端互相等待前后端分离的坏处就是对方及时看不到项目的进展，很容易出现你等我，我等他的尴尬刚 局面。 5、前端一直配合着后端，能力受限就拿Django来说吧，后端觉得某个字段起的名字有问题，想要修改就必须及时通知前端人员，这样前端一直配合着后端，要求高水平的能力。 6、后台开发语言和模板高度耦合，导致开发语言依赖严重其实很多开发语言都有属于自己的Web框架，Python就有Django，Flask，Tornado，而在java Web里面就有Spring，Struts，Hibernate。这些开发语言和模板高度耦合，使得你如果不会Python语法就不会使用Django，不会Java就不会Spring。 但是前后端尽管很流弊，但也有缺点。 前后端分离缺点 前后端学习的门槛增加，后端使用if else来显示数据的语法其实完全可以交给前端 数据依赖导致文档重要性增加，如果没有文档，那么前端人员不知道后端的业务逻辑 前端工作量加大（大部分数据显示的工作都由他来负责） seo的难度加大，爬虫请求不到数据（有些是ajax请求，爬虫只会爬到静态html代码） 后端开发模式迁移增加成本 restful api的介绍restful api 目前是前后端分离的最佳实践(它只是一套标准，建议性质的，类似于PEP8的规范，你可以不遵循它，但是为了更好的开发与他人交流最好还是遵循它) restful api的特点1、轻量，直接通过http，不需要额外的协议，通过post/get/put/delete进行操作；’2、面向资源，一目了然，具有自解释性。看看这篇面向资源的架构文章：面向资源的架构。资源是名词，post/get/put/delete等是动词，那么如何关联呢？这就是restful了。推荐两篇文章：理解RESTful架构，这篇写的比较久，注重于概念，但是比较容易理解。RESTful API 设计指南，这篇注重于实践，非常详细。 Vue的介绍Vue基本概念1、前端工程化： 浅谈什么是前端工程化2、数据双向绑定：怎么理解vue的数据双向绑定3、组件化开发：什么叫组件化开发 MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。当然这些事 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。说白了就是:数据驱动view，view又改变数据。 数据双向绑定，你可以点击表单输入绑定，体会一下它的用途，都不需要你另写js代码来进行实现。 Vue开发中的几个概念1、webpack它只是一个js工具，用于es6到es5代码转换，记住是vue不能被浏览器识别的，浏览器只能识别老三样：HTML，CSS，JAVASCRIPT。所以webpack就是把我们的代码转换成这种浏览器可以识别的代码。你可以打开我们的项目，F12查看源码，发现里面的东西很少，那是因为我们的代码都在这个js文件里面了： 2、Vue全家桶（vue，vuex，vue_router，axios）vue（框架），vuex（组件通讯），vue_router（单页面的路由），axios（Vue里面类似于ajax。因为是前端框架肯定需要发送ajax请求，但是我们不推荐直接来操作dom而是通过jQuery来进行操作。不过如果我们只需要一个函数，但也需要把整个JQuery包导入，而我们又只用ajax.。鉴于此，官方推荐我们使用axios，这个就不需要了，用到就导入那个） 3、ES6, babelEs6语法是将来的趋势，但是目前浏览器还都只是ES5，所以需要用babel将Es6转换为Es5。 vue项目的目录结构 Mock数据（Mock.js生成随机数据,拦截Ajax 请求 ，前后端分离，让前端攻城师独立于后端进行开发：mock.js官网）;node_modules这个就是我们利用node.js启动必备的文件；src则是一些资源包。 api：我们请求网络的api，所有组件的api都是在这里进行配置的；axios：我们在里面配置了全局拦截；components：这个是一些基础组件；router ：路由；static：全局的静态文件；store：一些Js文件；style：一些css样式表单；views：所有的组件； 接下来我们就看一下所有的组件： 差不多就是这些：导航栏组件；轮播图组件；新品组件；分页组件；个人中心组件；结算组。。。如果想在浏览器里面快速知道页面是由哪些vue的组件构成的，可以下载安装官方的插件:vuejs devtools，具体安装方法在这里：谷歌浏览器chrome的vuejs devtools 插件的安装。 至此，我们本篇关于restful api以及Vue结构的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入","date":"2018-04-18T09:54:15.000Z","updated":"2019-11-04T13:05:55.253Z","comments":true,"path":"2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入/","link":"","permalink":"http://blog.licheetools.top/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入/","excerpt":"","text":"写在前面本篇我们将开始介绍xadmin的后台管理系统以及项目资源的导入。 新建adminx.py文件在各个app下面新建adminx.py文件，我们开始进行配置。 在goods下面的adminx.py代码内容12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import xadminfrom .models import Goods, GoodsCategory, GoodsImage, GoodsCategoryBrand, Banner, HotSearchWordsfrom .models import IndexAdclass GoodsAdmin(object): list_display = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;, &quot;shop_price&quot;, &quot;goods_brief&quot;, &quot;goods_desc&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;] search_fields = [&apos;name&apos;, ] list_editable = [&quot;is_hot&quot;, ] list_filter = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;, &quot;shop_price&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;, &quot;category__name&quot;] style_fields = &#123;&quot;goods_desc&quot;: &quot;ueditor&quot;&#125; class GoodsImagesInline(object): model = GoodsImage exclude = [&quot;add_time&quot;] extra = 1 style = &apos;tab&apos; inlines = [GoodsImagesInline]class GoodsCategoryAdmin(object): list_display = [&quot;name&quot;, &quot;category_type&quot;, &quot;parent_category&quot;, &quot;add_time&quot;] list_filter = [&quot;category_type&quot;, &quot;parent_category&quot;, &quot;name&quot;] search_fields = [&apos;name&apos;, ]class GoodsBrandAdmin(object): list_display = [&quot;category&quot;, &quot;image&quot;, &quot;name&quot;, &quot;desc&quot;] def get_context(self): context = super(GoodsBrandAdmin, self).get_context() if &apos;form&apos; in context: context[&apos;form&apos;].fields[&apos;category&apos;].queryset = GoodsCategory.objects.filter(category_type=1) return contextclass BannerGoodsAdmin(object): list_display = [&quot;goods&quot;, &quot;image&quot;, &quot;index&quot;]class HotSearchAdmin(object): list_display = [&quot;keywords&quot;, &quot;index&quot;, &quot;add_time&quot;]class IndexAdAdmin(object): list_display = [&quot;category&quot;, &quot;goods&quot;]xadmin.site.register(Goods, GoodsAdmin)xadmin.site.register(GoodsCategory, GoodsCategoryAdmin)xadmin.site.register(Banner, BannerGoodsAdmin)xadmin.site.register(GoodsCategoryBrand, GoodsBrandAdmin)xadmin.site.register(HotSearchWords, HotSearchAdmin)xadmin.site.register(IndexAd, IndexAdAdmin) 在trade下面的adminx.py代码内容1234567891011121314151617181920212223import xadminfrom .models import ShoppingCart, OrderInfo, OrderGoodsclass ShoppingCartAdmin(object): list_display = [&quot;user&quot;, &quot;goods&quot;, &quot;nums&quot;, ]class OrderInfoAdmin(object): list_display = [&quot;user&quot;, &quot;order_sn&quot;, &quot;trade_no&quot;, &quot;pay_status&quot;, &quot;post_script&quot;, &quot;order_mount&quot;, &quot;order_mount&quot;, &quot;pay_time&quot;, &quot;add_time&quot;] class OrderGoodsInline(object): model = OrderGoods exclude = [&apos;add_time&apos;, ] extra = 1 style = &apos;tab&apos; inlines = [OrderGoodsInline, ]xadmin.site.register(ShoppingCart, ShoppingCartAdmin)xadmin.site.register(OrderInfo, OrderInfoAdmin) 在users下面的adminx.py代码内容1234567891011121314151617181920212223import xadminfrom xadmin import viewsfrom .models import VerifyCodeclass BaseSetting(object): enable_themes = True use_bootswatch = Trueclass GlobalSettings(object): site_title = &quot;慕海生鲜后台&quot; site_footer = &quot;vueshop&quot; # menu_style = &quot;accordion&quot;class VerifyCodeAdmin(object): list_display = [&apos;code&apos;, &apos;mobile&apos;, &quot;add_time&quot;]xadmin.site.register(VerifyCode, VerifyCodeAdmin)xadmin.site.register(views.BaseAdminView, BaseSetting)xadmin.site.register(views.CommAdminView, GlobalSettings) 在user_operation下面的adminx.py代码内容12345678910111213141516171819import xadminfrom .models import UserFav, UserLeavingMessage, UserAddressclass UserFavAdmin(object): list_display = [&apos;user&apos;, &apos;goods&apos;, &quot;add_time&quot;]class UserLeavingMessageAdmin(object): list_display = [&apos;user&apos;, &apos;message_type&apos;, &quot;message&quot;, &quot;add_time&quot;]class UserAddressAdmin(object): list_display = [&quot;signer_name&quot;, &quot;signer_mobile&quot;, &quot;district&quot;, &quot;address&quot;]xadmin.site.register(UserFav, UserFavAdmin)xadmin.site.register(UserAddress, UserAddressAdmin)xadmin.site.register(UserLeavingMessage, UserLeavingMessageAdmin) 然后安装依赖库xlwt和xlsxwriter这两个库（用于后面数据的excel导出）：1pip install xlwt xlsxwriter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 然后运行我们的makemigrations和migrate，生成我们xadmin的一些数据表。 接下来创建超级管理员：createsuperuser然后输入用户名，邮箱，密码回车即可。 然后运行我们的项目，在浏览器地址栏中输入：1http://127.0.0.1:8000/xadmin 用刚才的账号和密码进行登录，登录成功就是这个样子： 然后你可以对其进行汉化和自定义配置，可以参考这些文章：零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理和零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置以及零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发这三篇文章。 记得配置富文本的路径，打开vueshop\\urls.py文件，我们新增代码：123from django.urls import includepath(&apos;ueditor/&apos;, include(&apos;DjangoUeditor.urls&apos;)), 最后我的配置截图如下： 资源的导入在media下面新建三个文件夹：banner，goods，message，分别与下图中的path对应： 只需新建banner文件夹， 新建brands文件夹，再在里面新建images文件夹， 新建goods文件夹，再在里面新建images文件夹， 新建message文件夹，再在里面新建images文件夹。 有人要问建这么多文件夹干嘛，其实我们这是模拟了后台数据库的添加数据操作，如果你觉得太累了，可以不这么干，直接在后台添加数据，实际上比我们这还累。。。 接着在db_tools文件夹下面新建一个data的文件夹，在里面导入2个文件：category_data.py和product_data.py。然后直接在db_tools文件夹下面新建两个文件夹：import_category_data.py和import_goods_data.py。 接下来我们给import_category_data.py文件写入代码(独立使用django的model)，其作用就是把数据直接保存到数据库里面。然后给’import_goods_data.py’文件写入代码(独立使用django的model)其作用也是把数据直接保存到数据库里面。由于版权问题，这里就不贴出代码了。 运行完发现缺少图片上传地址： 所以我们需要在settings.py里面进行配置：123# 设置上传文件，图片访问路径MEDIA_URL = &apos;/media/&apos;MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;) 还没完，我们需要进行url的配置，打开vueshop\\urls.py文件：123456from django.views.static import servefrom django.urls import re_pathfrom vueshop.settings import MEDIA_ROOT# 配置文件上传的访问处理url re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;), 然后运行一下我们的项目，发现图片已经成功显示了： 至此我们本篇关于xadmin的后台管理系统以及项目资源导入的相关介绍就到此为止了，感谢你的赏阅！下一篇我们开始介绍restful api 相关的知识。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（四）：数据库字段的定义(下)","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（四）：数据库字段的定义-下","date":"2018-04-18T09:52:42.000Z","updated":"2019-11-04T13:05:44.471Z","comments":true,"path":"2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（四）：数据库字段的定义-下/","link":"","permalink":"http://blog.licheetools.top/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（四）：数据库字段的定义-下/","excerpt":"","text":"写在前面本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于user应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。因为我们这个项目是前后端分离的，所以一些数据库字段的名称请不要随意修改，否则就会出现运行错误！ goods app的配置前面说过全部商品分类里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏： 记得在教育网站中，我们的从属关系是通过外键来完成的。如果按照那样的思维，我们这里因为有三个相关的表，是否意味我们必须要建三个model，然后每个model之间利用从属的外键关系串起来，而且我们这样我们的目录就是写死的，只能是三级目录，但是我们如果要去做一个四级，五级，甚至无限级别的分类即可扩展目录时，这工作量是不是太大了呢？而且几乎是不可能完成的任务，我们考虑有没有其他方法呢？答案是有的。我们可以使用一张数据表来完成这样的任务，就是根据级别进行前台显示。 打开我们的goods/models.py文件，添加并修改如下代码:12345678910111213141516171819202122232425class GoodsCategory(models.Model): &quot;&quot;&quot; 商品级别分类 &quot;&quot;&quot; CATEGORY_TYPE = ( (1, &quot;一级类目&quot;), (2, &quot;二级类目&quot;), (3, &quot;三级类目&quot;), ) name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别名&quot;, help_text=&quot;类别名&quot;) code = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别code&quot;, help_text=&quot;类别code&quot;) desc = models.TextField(default=&quot;&quot;, verbose_name=&quot;类别描述&quot;, help_text=&quot;类别描述&quot;) category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=&quot;类目级别&quot;, help_text=&quot;类目级别&quot;) # 设置目录树的级别 parent_category = models.ForeignKey(&quot;self&quot;, null=True, blank=True, verbose_name=&quot;父类目级别&quot;, help_text=&quot;父目录&quot;, related_name=&quot;sub_cat&quot;) is_tab = models.BooleanField(default=False, verbose_name=&quot;是否导航&quot;, help_text=&quot;是否导航&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;商品类别&quot; verbose_name_plural = verbose_name def __str__(self): return self.name 注意一下： help_text: 在后面生成接口测试文档时会用到，而related_name: 进行查询的时候会用到，这里那个self参数就是自己跟自己进行外键关联，因为目录有的时候就是这样。 不知道你注意没有，在上面一行的导航栏在左侧都会有一个比较醒目的图片，这里展示了它的部分品牌商标： 这里我们需要重新定义一个数据表，用于存放这个，接着刚才的代码：123456789101112131415161718class GoodsCategoryBrand(models.Model): &quot;&quot;&quot; 导航栏左侧品牌图片 &quot;&quot;&quot; category = models.ForeignKey(GoodsCategory, related_name=&apos;brands&apos;, null=True, blank=True, verbose_name=&quot;商品类目&quot;) name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;品牌名&quot;, help_text=&quot;品牌名&quot;) desc = models.TextField(max_length=200, default=&quot;&quot;, verbose_name=&quot;品牌描述&quot;, help_text=&quot;品牌描述&quot;) image = models.ImageField(max_length=200, upload_to=&quot;brands/images&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;品牌信息&quot; verbose_name_plural = verbose_name db_table = &quot;goods_goodsbrand&quot; def __str__(self): return self.name 然后就是商品信息了，不过在此之前，我们需要把在线教育网站用到的DjangoUeditor和xadmin拷贝进我们的extra_app里面，然后还要把这些都注册到我们的setting里面去：1234567891011121314INSTALLED_APPS = [ &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users.apps.UsersConfig&apos;, &apos;users&apos;, &apos;goods&apos;, &apos;trade&apos;, &apos;user_operation&apos;, &apos;xadmin&apos;, &apos;DjangoUeditor&apos;,] 现在开始书写商品的信息代码：123456789101112131415161718192021222324252627282930from extra_apps.DjangoUeditor.models import UEditorFieldclass Goods(models.Model): &quot;&quot;&quot; 商品信息 &quot;&quot;&quot; category = models.ForeignKey(GoodsCategory, verbose_name=&quot;商品类目&quot;) goods_sn = models.CharField(max_length=50, default=&quot;&quot;, verbose_name=&quot;商品唯一编号&quot;) name = models.CharField(max_length=100, verbose_name=&quot;商品名&quot;) click_num = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;) sold_num = models.IntegerField(default=0, verbose_name=&quot;商品销售量&quot;) fav_num = models.IntegerField(default=0, verbose_name=&quot;收藏数&quot;) goods_num = models.IntegerField(default=0, verbose_name=&quot;库存数&quot;) market_price = models.FloatField(default=0, verbose_name=&quot;市场价格&quot;) shop_price = models.FloatField(default=0, verbose_name=&quot;本店价格&quot;) goods_brief = models.TextField(max_length=500, verbose_name=&quot;商品简短描述&quot;) goods_desc = UEditorField(verbose_name=&quot;内容&quot;, imagePath=&quot;goods/images/&quot;, width=1000, height=300, filePath=&quot;goods/files/&quot;, default=&apos;&apos;) ship_free = models.BooleanField(default=True, verbose_name=&quot;是否承担运费&quot;) goods_front_image = models.ImageField(upload_to=&quot;goods/images/&quot;, null=True, blank=True, verbose_name=&quot;封面图&quot;) is_new = models.BooleanField(default=False, verbose_name=&quot;是否新品&quot;) is_hot = models.BooleanField(default=False, verbose_name=&quot;是否热销&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &apos;商品信息&apos; verbose_name_plural = verbose_name def __str__(self): return self.name 前面也说过商品详情那块有轮播图，这个我们可以直接在商品信息这个表里面添加一个字段，当然也可以另建一个专门的表，后面这种似乎管理起来更加的方便。所以我们继续书写代码：1234567891011121314class GoodsImage(models.Model): &quot;&quot;&quot; 商品详情页面轮播图 &quot;&quot;&quot; goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, related_name=&quot;images&quot;) image = models.ImageField(upload_to=&quot;&quot;, verbose_name=&quot;图片&quot;, null=True, blank=True) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &apos;商品轮播图&apos; verbose_name_plural = verbose_name def __str__(self): return self.goods.name 在首页我们看见也有一些轮播图，而这些轮播图是大图，和在商品详情页看到的不一样，所以我们需要单独创建一张表，用于管理它。继续刚才的代码：123456789101112131415class Banner(models.Model): &quot;&quot;&quot; 商品首页轮播图（大图） &quot;&quot;&quot; goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;) image = models.ImageField(upload_to=&apos;banner&apos;, verbose_name=&quot;轮播图片&quot;) index = models.IntegerField(default=0, verbose_name=&quot;轮播顺序&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &apos;首页轮播图&apos; verbose_name_plural = verbose_name def __str__(self): return self.goods.name 不知道你注意没有，在搜索栏的下面有一行提示语（热搜榜），这个我们也要单独进行管理：123456789101112131415class HotSearchWords(models.Model): &quot;&quot;&quot; 搜索框下面的热搜榜 &quot;&quot;&quot; keywords = models.CharField(default=&quot;&quot;, max_length=20, verbose_name=&quot;热搜词&quot;) index = models.IntegerField(default=0, verbose_name=&quot;排序&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &apos;热搜词&apos; verbose_name_plural = verbose_name def __str__(self): return self.keywords 还有首页一个商品类别广告：12345678910111213class IndexAd(models.Model): &quot;&quot;&quot; 首页商品类别广告 &quot;&quot;&quot; category = models.ForeignKey(GoodsCategory, on_delete=models.CASCADE, related_name=&apos;category&apos;, verbose_name=&quot;商品类目&quot;) goods = models.ForeignKey(Goods, on_delete=models.CASCADE, related_name=&apos;goods&apos;) class Meta: verbose_name = &apos;首页商品类别广告&apos; verbose_name_plural = verbose_name def __str__(self): return self.goods.name trade app的配置 在进行配置之前要说明几点：1、在一个订单里面，同一条商品信息，不会出现多条记录，而是以数量来进行统计。（图上的信息就是错误的，我说了，如果是在不同的订单里面却是可以的）；2、一旦购物车点击结算就会清空购物车，会以订单详情来展示商品信息。你在淘宝或者其他电商平台进行购物的时候，其实这些你就无意中知道了，但是从来没有说出来，现在看到这里是不是觉得就是这样的呢。 现在我们开始进行购物车这个数据表的配置，打开trade/models.py文件，我们知道这个表肯定会与我们User表有关联（不要问我为什么，因为东西是不可能自己飞到购物车里面去的），我们在教育网站里面是采用这样来进行User信息的导入：123from users.models import UserProfileUser = UserProfile() 这样做的前提是你已经知道这个UserProfile放那个位置了，假如别人不知道呢，那该怎么办，这时候我们就要查看源码了。还记得我们之前在settings.py里面在INSTALLED_APPS的下面新增的一行代码么：12# 重载UserProfile使其生效AUTH_USER_MODEL = &apos;users.UserProfile&apos; 这才是我们这个UserProfile的注册位置，我们真正调用的目录在这里。那么如何调用呢？使用下面的命令即可：123from django.contrib.auth import get_user_modelUser = get_user_model() 我们把光标放在get_user_model，按住Ctrl然后点击鼠标左键，直接进入get_user_model的源代码函数，我们发现其实这个函数才是直接调用了这个AUTH_USER_MODEL. 开始写我们购物车的代码：1234567891011121314151617181920212223242526from datetime import datetimefrom django.db import modelsfrom django.contrib.auth import get_user_model# Create your models here.User = get_user_model()from goods.models import Goodsclass ShoppingCart(models.Model): &quot;&quot;&quot; 购物车 &quot;&quot;&quot; user = models.ForeignKey(User, verbose_name=&quot;用户&quot;) goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;) nums = models.IntegerField(default=0, verbose_name=&quot;购买数量&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &apos;购物车&apos; verbose_name_plural = verbose_name unique_together = (&quot;user&quot;, &quot;goods&quot;) def __str__(self): return &quot;%s(%d)&quot;.format(self.goods.name, self.nums) 接下来是订单的创建，我们知道订单有不同的状态，像创建交易，成功，待支付等，所以需要有选择的功能：123456789101112131415161718192021222324252627282930313233343536373839class OrderInfo(models.Model): &quot;&quot;&quot; 订单信息 &quot;&quot;&quot; ORDER_STATUS = ( (&quot;TRADE_SUCCESS&quot;, &quot;成功&quot;), (&quot;TRADE_CLOSED&quot;, &quot;超时关闭&quot;), (&quot;WAIT_BUYER_PAY&quot;, &quot;交易创建&quot;), (&quot;TRADE_FINISHED&quot;, &quot;交易结束&quot;), (&quot;paying&quot;, &quot;待支付&quot;), ) PAY_TYPE = ( (&quot;alipay&quot;, &quot;支付宝&quot;), (&quot;wechat&quot;, &quot;微信&quot;), ) user = models.ForeignKey(User, verbose_name=&quot;用户&quot;) order_sn = models.CharField(max_length=30, null=True, blank=True, unique=True, verbose_name=&quot;订单号&quot;) # 订单号唯一 nonce_str = models.CharField(max_length=50, null=True, blank=True, unique=True, verbose_name=&quot;随机加密串&quot;) # 微信支付可能会用到 trade_no = models.CharField(max_length=100, unique=True, null=True, blank=True, verbose_name=&quot;交易号&quot;) # 交易号也是唯一的，用于支付宝与本系统进行关联 pay_status = models.CharField(choices=ORDER_STATUS, default=&quot;paying&quot;, max_length=30, verbose_name=&quot;订单状态&quot;) pay_type = models.CharField(choices=PAY_TYPE, default=&quot;alipay&quot;, max_length=10, verbose_name=&quot;支付类型&quot;) post_script = models.CharField(max_length=200, verbose_name=&quot;订单留言&quot;) order_mount = models.FloatField(default=0.0, verbose_name=&quot;订单金额&quot;) pay_time = models.DateTimeField(null=True, blank=True, verbose_name=&quot;支付时间&quot;) # 订单上面用户的基本信息 address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;收货地址&quot;) signer_name = models.CharField(max_length=20, default=&quot;&quot;, verbose_name=&quot;签收人&quot;) singer_mobile = models.CharField(max_length=11, verbose_name=&quot;联系电话&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;订单信息&quot; verbose_name_plural = verbose_name def __str__(self): return str(self.order_sn) 接下来就是为订单里面的商品单独创建一个数据表了：12345678910111213141516class OrderGoods(models.Model): &quot;&quot;&quot; 订单的商品详情 &quot;&quot;&quot; order = models.ForeignKey(OrderInfo, verbose_name=&quot;订单信息&quot;, related_name=&quot;goods&quot;) # 一个订单里面可以有多个商品信息 goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;) goods_num = models.IntegerField(default=0, verbose_name=&quot;商品数量&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;订单内的商品&quot; verbose_name_plural = verbose_name def __str__(self): return str(self.order.order_sn) user_operation app的配置现在我们进行用户操作这个app的配置，具体包括：商品收藏，添加收货信息，用户留言等。打开user_operation\\modles.py文件，我们新建以下代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273from datetime import datetimefrom django.db import modelsfrom django.contrib.auth import get_user_modelfrom goods.models import Goods# Create your models here.User = get_user_model()class UserFav(models.Model): &quot;&quot;&quot; 用户收藏 &quot;&quot;&quot; user = models.ForeignKey(User, verbose_name=&quot;用户&quot;) goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, help_text=&quot;商品id&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &apos;用户收藏&apos; verbose_name_plural = verbose_name unique_together = (&quot;user&quot;, &quot;goods&quot;) def __str__(self): return self.user.usernameclass UserLeavingMessage(models.Model): &quot;&quot;&quot; 用户留言 &quot;&quot;&quot; MESSAGE_CHOICES = ( (1, &quot;留言&quot;), (2, &quot;投诉&quot;), (3, &quot;询问&quot;), (4, &quot;售后&quot;), (5, &quot;求购&quot;) ) user = models.ForeignKey(User, verbose_name=&quot;用户&quot;) message_type = models.IntegerField(default=1, choices=MESSAGE_CHOICES, verbose_name=&quot;留言类型&quot;, help_text=&quot;留言类型: 1(留言),2(投诉),3(询问),4(售后),5(求购)&quot;) # 这里不要新建一个为type的字段，这是Python内置的函数 subject = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;主题&quot;) message = models.TextField(default=&quot;&quot;, verbose_name=&quot;留言内容&quot;, help_text=&quot;留言内容&quot;) file = models.FileField(upload_to=&quot;message/images/&quot;, verbose_name=&quot;上传的文件&quot;, help_text=&quot;上传的文件&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;用户留言&quot; verbose_name_plural = verbose_name def __str__(self): return self.subjectclass UserAddress(models.Model): &quot;&quot;&quot; 用户收货地址 &quot;&quot;&quot; user = models.ForeignKey(User, verbose_name=&quot;用户&quot;) province = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;省份&quot;) city = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;城市&quot;) district = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;区域&quot;) address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;详细地址&quot;) signer_name = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;签收人&quot;) signer_mobile = models.CharField(max_length=11, default=&quot;&quot;, verbose_name=&quot;电话&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;收货地址&quot; verbose_name_plural = verbose_name def __str__(self): return self.address 这样到目前为止，我们的models都设计完了，没有考虑到的我们将在后续的开发中进行添加。接下来我们说一下migrations原理及表的生成。 migrations原理及表的生成在这之前，请确保我们把app都添加到了setting.py里面，注意名字不要写错了： 我们运行run manage.py Task出现了下面的错误： 那是因为我们的users app注册了两个，所以说不唯一： 我们按照Django自带的那种方式修改我们的app的引入方式： 实际上每个项目都有这个，我们修改settings.py的引入方式如下： 12345678910111213INSTALLED_APPS = [ &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users.apps.UsersConfig&apos;, &apos;goods.apps.GoodsConfig&apos;, &apos;trade.apps.TradeConfig&apos;, &apos;user_operation.apps.UserOperationConfig&apos;, &apos;xadmin&apos;, &apos;DjangoUeditor&apos;,] 接着我们再来运行我们的run manage.py Task，发现出现了这样的错误：12 from future.utils import iteritemsModuleNotFoundError: No module named &apos;future&apos; 说明我们缺少future这个库，我们使用下面的命令进行安装：1pip install future -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 然后再来运行我们的run manage.py Task，发现又出现了这样的错误：12 related_name=&quot;sub_cat&quot;)TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos; 相信看过前面那个教育网站的童鞋都知道，这个问题出现的原因：缺少级联删除on_delete。on_delete=models.CASCADE是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示） 具体可以阅读这篇文章：零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)。就是这样：1user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=&quot;用户&quot;) 在所有ForeignKey的4个app里面，都添加on_delete=models.CASCADE这个字段。有点多，大家需要慢慢添加，也有简单的方法，开启全局搜索，然后替换也可以。 接着再来运行我们的run manage.py Task，发现又出现了这样的错误（真是命途多舛。。。）：12from crispy_forms.utils import TEMPLATE_PACKModuleNotFoundError: No module named &apos;crispy_forms&apos; 又是缺少这个包，我们安装一下，不知道你想起来没，在教育网站我们也遇到过类似的问题，你可以阅读一下：零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理解决办法如下：打开settings.py文件，找到里面的INSTALLED_APPS，在后面修改为如下：123456789101112131415INSTALLED_APPS = [ &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users.apps.UsersConfig&apos;, &apos;goods.apps.GoodsConfig&apos;, &apos;trade.apps.TradeConfig&apos;, &apos;user_operation.apps.UserOperationConfig&apos;, &apos;xadmin&apos;, &apos;DjangoUeditor&apos;, &apos;crispy_forms&apos;] 然后依次按照如下库： 12345pip install futurepip install sixpip install httplib2pip install django-import-exportpip install django-formtools==2.1 # 记住一定是2.1的版本，否则会出错 使用的命令为：1pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple 之后会安装一大堆库，我们使用pip list命令查看一下：1234567891011121314151617181920212223242526272829(vueshop) F:\\Envs\\vueshop&gt;pip listPackage Version-------------------- --------diff-match-patch 20121119Django 2.0.1django-crispy-forms 1.7.2django-filter 2.0.0django-formtools 2.1django-import-export 1.1.0djangorestframework 3.8.2et-xmlfile 1.0.1future 0.16.0httplib2 0.11.3jdcal 1.4Markdown 3.0.1mysqlclient 1.3.13odfpy 1.3.6openpyxl 2.5.8Pillow 5.3.0pip 18.0pytz 2018.5PyYAML 3.13setuptools 40.4.3six 1.11.0tablib 0.12.1unicodecsv 0.14.1wheel 0.32.0xlrd 1.1.0xlwt 1.3.0 我上面贴了我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）。 然后再来运行我们的run manage.py Task，发现又出现了这样的错误（是不是很绝望，哈哈哈哈~~~）：12&quot;INSTALLED_APPS.&quot; % (module, name)RuntimeError: Model class django.contrib.admin.models.LogEntry doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS. 看了上面那篇文章，你是不是发现缺少admin了，对因为我们开头没有启用admin，如果你开头启用了就没有这个错误,你只需要在INSTALLED_APPS 里面添加admin:123INSTALLED_APPS = [ &apos;django.contrib.admin&apos;,] 接着再来运行我们的run manage.py Task，发现终于运行正常，没有错误了。我们不妨在这里把xadmin给导入进来吧，反正后面会用到。打开vueshop/urls.py文件，把urls中默认的admin修改为xadmin:123456from django.urls import pathimport xadminurlpatterns = [ path(&apos;xadmin/&apos;, xadmin.site.urls),] 然后进行我们数据库的生成和迁移操作，运行：makemigrations和migrate命令。 makemigrations和migrate介绍我们知道数据库的生成和迁移操作有两个命令：makemigrations和migrate。其中makemigrations的作用是生成数据库变动的Py脚本，也就是Python文件，会自动存放在各个app下面默认生成的migrations文件夹里面： 我们随意打开一个app下面生成的Py脚本，看到里面其实是后面migrate命令将要执行的代码，我们运行migrate appname其实就是在对应的app 下面的migrations文件夹下面查找上面的py脚本，然后运行它，从而达到新建数据表的目的。 不信的话，你现在在manage.py Task下面运行migrate，然后发现这个和我们刚才分析的一模一样： 所有的migrations操作都会被记录到django_migrations这个表里面： 不过这里面有几个坑：1、我们一旦数据库有变动就要使用上述两个命令，否则就会出错；2、我们修改数据库字段不要直接在Navicat里面修改，我们需要通过修改源代码，然后重新运行上述两个命令即可；3、每次数据库的变动都会有记录在django_migrations这个表里面进行追加，运行上述两个命令系统会默认运行这个表里面更新的代码。 至此我们关于数据库字段的设计的介绍就到此为止了，感谢你的赏阅，下一篇我们将介绍xadmin的后台管理配置。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（三）：数据库字段的定义(上)","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（三）：数据库字段的定义-上","date":"2018-04-18T09:46:27.000Z","updated":"2019-11-04T13:04:59.493Z","comments":true,"path":"2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（三）：数据库字段的定义-上/","link":"","permalink":"http://blog.licheetools.top/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（三）：数据库字段的定义-上/","excerpt":"","text":"写在前面本篇笔记我们来学习如何安装各种依赖库以及数据库字段的设计，其中数据库字段的定义我们分两篇进行。 新建虚拟环境关于虚拟环境的搭建，前面已经讲得很清楚，这里就直接开始安装了：1mkvirtualenv vueshop 这样就在F:Envs下面新建了一个名为vueshop的虚拟环境，而且是Python3.6的版本。然后使用pip list查看一下当前的安装列表，如果出现pip的版本是9.x，我们建议你升级一下pip的版本。可以使用pip install --upgrade pip，如果安装不了建议把pip下载到本地，然后进入你的pip里面，执行python setup.py install命令即可。然后再次运行pip list：12345678(vueshop) C:\\Users\\lenovo&gt;pip listPackage Version---------- -------pip 18.0setuptools 39.0.1wheel 0.30.0(vueshop) C:\\Users\\lenovo&gt; 安装django 和 django rest framework点击这里查看django rest framework官网，我们看到已经支持Django2.0了，所以我们就安装2.0的版本： 使用下面的命令安装djangorestframework:1pip install djangorestframework 如果在安装过程中出现这种情况：12345Retrying (Retry(total=4, connect=None, read=None, redirect=None)) after connection brokenby &apos;ConnectTimeoutError(&lt;pip._vendor.requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x10b058850&gt;, &apos;Connection to pypi.python.org timed out. (connect timeout=15)&apos;)&apos;: 说明你采用了默认的pypi源(国外的pypi源)，这个很容易出现这种连接超时的问题，所以应当采用国内的镜像源：1pip install djangorestframework -i http://pypi.douban.com/simple/ 如果还有问题，请阅读我的另一篇文章《使用默认pypi源出现连接超时的解决办法》一文，寻求解决的办法。 然后使用pip list查看，发现里面没有Django,我们需要自己安装Django，注意要指定Django的版本，因为博主在写这套教程的时候，Django2.1已经发布了，你不指定Django的版本就默认安装了最新版的Django2.1，而djangorestframework目前暂不支持Django2.1。123456789(vueshop) F:\\Envs&gt;pip listPackage Version------------------- -------djangorestframework 3.8.2pip 18.0setuptools 40.4.3wheel 0.32.0(vueshop) F:\\Envs&gt; 我们使用下面的命令进行安装Django2.0：1pip install django==2.0.1 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 然后安装markdown，django-filter：12pip install markdown # Markdown support for the browsable API.pip install django-filter # Filtering support 如果安装不了，请使用下面的命令：123pip install markdown -i http://pypi.douban.com/simple --trusted-host pypi.douban.compip install django-filter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 然后查看list:1234567891011(vueshop) F:\\Envs&gt;pip listPackage Version------------------- -------Django 2.0.1django-filter 2.0.0djangorestframework 3.8.2Markdown 3.0.1pip 18.0pytz 2018.5setuptools 40.4.3wheel 0.32.0 好了，现在我们开始新建Django项目了，记得在用Pycharm新建Django项目的时候，必须要在之前安装Django，否则就新建不了Django项目。 新建Django项目已有虚拟环境因为我们之前已经在F:Envs下面创建了一个名为vueshop的虚拟环境，所以这里就选用Existing interpreter即可，不要选用上面那个New environment。那个2是项目的存放路径，那个interpreter也就是3，用虚拟环境下面的Scripts\\python.exe。 没有虚拟环境在你没有创建自己的虚拟环境的时候，你才使用上面的那个New environment，也要说明一下，那个2是项目的存放路径，3是你利用Pycharm新建的虚拟环境的路径，4则是你使用哪个Python来创建你的虚拟环境（就是说你在这个虚拟环境里面的Python版本将会和这个一模一样，其实就是安装了指定Python版本的虚拟环境而已。） 这两种情况，小白很容易搞混淆，所以需要特别注意。点击确定，就成了这个样子： 关于上面Django项目的介绍我这里不说了，大家去阅读我的另外一个专题：《零基础使用Django2.0.1打造在线教育网站》，下面就是你的虚拟环境。我们后面会查看源码，所以虚拟环境里面的包比较重要： 运行一下我们的项目，发现没有问题： 数据库配置我们不使用默认的sqlite数据库，采用MySQL数据库，打开settings.py文件，找到第77行代码：将：123456DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;&#125; 修改为：12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;vueshop&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;xxxx&apos;, # 密码可以随意设置，我使用xxxx &apos;HOST&apos;: &apos;127.0.0.1&apos;, &apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;, &#125;&#125; 注意一下这里的storage_engine必须是InnoDB。尽管mysql的数据库引擎有InnoDB 和Myisam这两种，但是后面用到的第三方登录，它所支持的库只支持innodb ，否则在使用migration时，会出错。关于这两种数据库引擎，大家可以看这篇文章：MySQL存储引擎－－MyISAM与InnoDB区别。 新建数据库vueshop打开Navicat，新建数据库vueshop: 安装 mysqlclient和配置seeting文件点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：12django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.Did you install mysqlclient? 上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。 你可以在Pycharm里面进行安装，但这种很容易出错。最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门：mysql-python，点击这个网站，然后按住Ctrl+F键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。 上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！然后把mysqlclient放在我们的虚拟环境下面： 在虚拟环境中安装mysqlclient，如图所示：123456(vueshop) F:\\Envs\\vueshop&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whlProcessing f:\\envs\\vueshop\\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whlInstalling collected packages: mysqlclientSuccessfully installed mysqlclient-1.3.13(vueshop) F:\\Envs\\vueshop&gt; 注意需要进入到vueshop这个目录下进行安装，安装的命令是：pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl（后面的是你刚才下载的版本名称，带whl）。 接下来我们再次运行项目，发现出了一个问题：12 super(Connection, self).__init__(*args, **kwargs2)django.db.utils.OperationalError: (1193, &quot;Unknown system variable &apos;storage_engine&apos;&quot;) 看样子是我们的数据库引擎变量名配置出了问题，我们修改一下，把：1&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;, 修改为：1&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET default_storage_engine=INNODB;&apos;&#125;, 再次运行，发现正常了。 接下来安装用于图片处理的库：pillow1pip install pillow -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 新建包和文件夹新建两个python package，分别命名为apps和extra_apps。然后新建两个directory,分别命名为media和db_tools。注意一下包和文件夹的区别，包可以折叠，里面含有–init–.py文件，而文件夹不可以折叠，里面啥也没有。最后将两个python package:apps和extra_apps给Mark为source root。（前面教育网站有介绍操作） 其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。在settings.py文件里面，我们新增路径代码：12345import syssys.path.insert(0, BASE_DIR)sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))sys.path.insert(0, os.path.join(BASE_DIR, &apos;extra_apps&apos;)) 然后运行发现没有问题，接下来进行数据库字段的定义。 数据库字段的定义首先进行需求分析从而设计数据字段，我们发现里面有一个导航栏，左边是商品全部信息，后面则是商品的部分信息： 那个全部商品分类，里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏。右边上面则是搜索框，网站主体部分则是商品的缩略图，最底下是排序和分页。进入商品详情页，就能看到商品的详细信息，商品轮播图，原价，促销价格，以及富文本显示的信息。最右边则是热卖商品的信息，这个非常详细，可以看到详情信息。 现在就是数据库字段的设计了，我们采用归类的思想，肯定有一个商品信息，一个交易信息，一个用户信息，以及一个用于记录用户操作的信息。（教育网站里面有说过，避免引用的死循环）不过这种没有一个明确的分类，一般是根据程序员自己的经验来划分的。 所以我们的app一共有4个，用于分别实现不同的功能，具体如下： (user)用户版块：负责记录用户的个人信息相关的内容, (goods)商品版块：用于记录商品信息相关的内容, (trade)交易板块：用于记录交易相关的内容, (user_operation)用户操作板块：用于记录用户操作的相关的内容。 创建app先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中依次输入：1234startapp userstartapp goodsstartapp tradestartapp user_operation 然后拖到app这个包里面： 好了，现在开始进行各个app的models.py的配置了。记住一般都是先进行用户（user）这个app的配置。 user app的配置在前面的一篇文章里面：零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)，说过user自带的用户表是无法满足我们的需求，我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。 打开我们的user/models.py文件，添加并修改如下代码:123456789101112131415161718192021222324252627282930313233343536373839from datetime import datetimefrom django.db import modelsfrom django.contrib.auth.models import AbstractUser# Create your models here.class UserProfile(AbstractUser): &quot;&quot;&quot; 用户信息 &quot;&quot;&quot; name = models.CharField(max_length=30, null=True, blank=True, verbose_name=&quot;姓名&quot;) birthday = models.DateField(verbose_name=&apos;生日&apos;, null=True, blank=True) mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;) gender = models.CharField(max_length=6, choices=((&apos;male&apos;, &apos;男&apos;), (&apos;female&apos;, &apos;女&apos;)), default=&apos;female&apos;, verbose_name=&apos;性别&apos;) email = models.CharField(max_length=100, null=True, blank=True, verbose_name=&quot;邮箱&quot;) class Meta: verbose_name = &quot;用户信息&quot; verbose_name_plural = verbose_name def __str__(self): return self.nameclass VerifyCode(models.Model): &quot;&quot;&quot; 短信验证码 &quot;&quot;&quot; code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;) mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;短信验证码&quot; verbose_name_plural = verbose_name def __str__(self): return self.code 记住：CharField必须有max_length！！！这里还没完，就是我们这里定义的UserProfile其实并没有覆盖掉原本的User表，所以我们需要重载AUTH_USER_MODEL，打开settings.py,在INSTALLED_APPS的下面我们新增一行代码：12# 重载UserProfile使其生效AUTH_USER_MODEL = &apos;users.UserProfile&apos; 注意一下我们不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错。 至此我们完成了第一个app的配置及其自定义字段的设计！ 至此，本篇关于如何安装各种依赖库以及部分数据库字段的设计的介绍就到此为止了，感谢你的赏阅！！！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（二）：环境搭建","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（二）：环境搭建","date":"2018-04-18T09:39:24.000Z","updated":"2019-11-04T13:04:13.912Z","comments":true,"path":"2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（二）：环境搭建/","link":"","permalink":"http://blog.licheetools.top/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（二）：环境搭建/","excerpt":"","text":"写在前面俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。注意我们是在windows的开发环境下进行开发。网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python，vue，在前面的笔记中我都有介绍过前4个的安装，但是考虑到小白，所以我就直接复制过来，只是对部分内容进行修改（pycharm升级版）。 软件安装Pycharm的安装之前那几个专题用的Pycharm版本是2017，现在我在微信公众号里重新介绍了如何破解安装最新版的pycharm2018,这里放个链接：搜索微信公众号: 啃饼思录，或者扫描上面关于博主介绍里面的二维码即可获取。当然这里我也会把里面的破解地址粘贴过来的：手把手教你破解Pycharm2018.2（JetBrains全家桶）。 当然如果你还是比较喜欢Pycharm2017,那你可以点击这里进行安装：零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置 Mysql的安装1、下载压缩包下载地址 2、解压到文件夹目录下 3、新建txt文件内容如下：设置mysql客户端默认字符集 default-character-set=utf8 设置3306端口 port = 3306 设置mysql的安装目录 basedir=D:\\Program Files\\mysql-5.7.21-winx64 设置mysql数据库的数据的存放目录 datadir=D:\\Program Files\\mysql-5.7.21-winx64\\data 允许最大连接数 max_connections=200 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB 注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini 4 添加bin目录到path环境变量 5 安装 MySQL服务，以管理员身份运行cmd 执行 mysqld install 命令 若出现“缺少xxx.dll，请安装微软运行库 http://www.pc6.com/softview/SoftView_104246.html 6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下 运行 mysqld –initialize-insecure –user=mysql 查看data文件夹 查看data目录内容是否正确 7 运行MySQL服务 net start mysql 关闭MySQL服务的命令是net stop mysql 8 登陆MySQL mysql -u root –p 所有命令：安装服务 mysqld install 进入bin目录 cd E:\\mysql-5.7.21-winx64\\bin 生成data文件夹 mysqld --initialize-insecure --user=mysql 启动服务 net start mysql 登录 mysql -u root –p 修改密码： 在忘记root密码的时候，可以这样 以windows为例： 1. 关闭正在运行的MySQL服务。 2. 打开DOS窗口，转到mysql\\bin目录。 3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\\bin目录。 5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 6. 连接权限数据库： use mysql; 。 6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。 7. 刷新权限（必须步骤）：flush privileges; 。 8. 退出 quit。 9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。 Navicat的安装步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。 步骤二 在欢迎画面点击“下一步”。 步骤三 阅读许可协议，接受并点击“下一步”。 步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。 步骤五 运行其余的步骤。 步骤六 点击“完成”，结束安装进程。 步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。 Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV其余版本的可以参考这个链接 Python的安装官网传送Python3.6.4版本下载链接由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接python3.6.3安装教程。 virtualenv的安装和配置使用虚拟环境的好处我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。 安装pip我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹(记住要和Python放在同一目录下)，采用添加环境变量的方法（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path），我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格， C:\\Users\\Kbthinking&gt;F:F:&gt;cd PythonF:\\Python&gt;cd pystallF:\\Python\\pystall&gt; 然后输入：python setup.py install回车，等待几分钟即可。 最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者Windows徽标+R中输入 pip -—version 小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句） 如果已经成功安装 pip，会提示类似下面的： pip 1.5.6 from C:\\Python35\\lib\\site-packages\\pip-1.5.6-py3.5.egg pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。 如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考这个方法为你的 Windows电脑安装pip: pip安装问题windows安装pip 安装virtualenv在终端输入以下命令：12345678pip install virtualenv virtualenv testvir # 在当前用户目录(win+r %HOMEPATH%可查看)生成cd %homepath%cd testvircd Scriptsactivate.bat # 激活pip list deactivate.bat 其实这种方法挺麻烦的，这里我推荐一种简单方法，安装virtualenvwrapper 安装virtualenvwrapper在终端输入如下命令：1pip install virtualenvwrapper-win 接下来便是创建虚拟环境了，同样采用如下命令：1mkvirtualenv djangoTest # djangoTest为你新建虚拟环境的名称 它会创建在C:\\Users\\YC\\Envs当前用户目录下的Envs目录。 你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME退出激活状态命令1deactivate 知道有哪些虚拟环境命令1workon 直接进入虚拟环境命令1workon djangoTest 如果出现这种情况，表示你已经进入到虚拟环境中。1D:\\Envs\\Test\\django(djangoTest) 再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。 使用镜像安装库有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的镜像,并简单介绍一下如何使用。正常我们下载Django的命令是：1pip install django==2.1.0 (请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:1pip install django==2.1.0 -i https://pypi.tuna.tsinghua.edu.cn/simple (注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！) Vue开发环境的搭建1、webstorm的安装当然webstorm只是一个IDE，你可以安装其他类似的IDE，例如sublime Text3，VSCode，Notepad++等，这里就不详细说明了，直接开启传送大门：WebStorm安装与使用这里没有提供破解方法，你可以点击这里进行破解(方法类似):手把手教你破解JetBrains全家桶。sublime Text3安装：sublime Text3安装到破解详解。VSCode安装：VSCode安装。Notepad++安装：notepad++安装教程 2、node.js的安装同样node.js的安装，我们直接开启传送大门：Node.js安装及环境配置之Windows篇，安装完成以后记得使用下面的命令确认是否安装成功：node --version，如果出现版本号就表明安装成功了，实际上一些常用的软件都可以用这种方式来检测是否安装成功： 接下来是cnpm的安装了，这个对于后端人员可能不太熟悉，但是前端人员确是非常了解，可以点击这里进行了解一下：如何使用NPM？CNPM又是什么？ 3、cnpm的安装点击这里淘宝NPM镜像，然后安装提示进行安装即可，非常简单，就一步而已：1npm install -g cnpm --registry=https://registry.npm.taobao.org 当然为防止我们没有安装正确，我们使用cnpm -v来进行检测一下： 出现上面的情况，表明你已经安装成功了，当然你还可以自定义配置，点击这里：安装npm及cnpm(Windows) 现在进入我们的online-store，我们在英文输入法状态下按住shift键，同时点击鼠标左键，在出现的命令栏中选择在此处打开命令栏窗口，然后直接使用下面的命令：1cnpm install 如果出现下面的情况，我们选择以管理员身份运行： 如果还是出现这样的问题，就有可能是环境的问题，建议安装这里的教程重新安装和配置一下环境变量（安装最新版的node.js）：安装npm及cnpm(Windows) 现在重新安装配置以后，我们win+x选择以管理员身份运行cmd，然后到online-store文件夹下面重新运行一下：1cnpm install 发现就是这样了，安装成功： 最后运行：1npm run dev 发现运行成功了： 然后打开浏览器，在地址栏中输入：http://localhost:8080/就能看到我们的项目了： 注意一下，下面没有是正常情况，不是你静态资源没有加载出来，而是bobby老师的服务器停了，导致api接入不了： 看到没有：1Error occurred while trying to proxy request /favicon.ico from localhost:8080 to http://shop.projectsedu.com:8001 (ETIMEDOUT) (https://nodejs.org/api/errors.html#errors_common_system_errors) 不相信的话，你可以在浏览器地址栏中输入：http://shop.projectsedu.com:8001，你会发现访问不了！当然你可以修改这个api.js文件，换成其他的地址就能访问了。 至此，本篇关于项目环境搭建的介绍就到此为止了，感谢你的赏阅！！！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"采用Vue+Django Restful framework构建生鲜电商项目（一）：项目介绍","slug":"采用Vue-Django-Restful-framework构建生鲜电商项目（一）：项目介绍","date":"2018-04-18T08:39:24.000Z","updated":"2019-11-04T13:06:06.681Z","comments":true,"path":"2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（一）：项目介绍/","link":"","permalink":"http://blog.licheetools.top/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（一）：项目介绍/","excerpt":"","text":"写在前面嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习Vue+Django Restful framework构建生鲜电商项目时的一些笔记，希望对即将学习Django和Vue的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。 项目介绍必备技术1、Vue + Django Rest Framework 前后端分离技术2、restful api 开发流程3、Django Rest Framework 的功能实现和核心源码分析4、Sentry 完成线上系统的错误日志的监控和告警5、第三方登录和支付宝支付的集成6、本地调试远程服务器代码的技巧 系统构成1、vue前端项目2、django rest framework 系统实现前台功能3、xadmin后台管理系统 Vue介绍部分1、API 接口2、Vue 组件 与api的交互3、vue的项目组织结构分析 Django rest framework 专注于 restful API的开发，所以下面我们来介绍Django Rest Framework这方面的技术。 Django Rest Framework技术A、通用view实现 rest api接口1、ApiView方式实现api2、GenericView方式实现api接口3、Viewset和router方式实现api接口和url配置4、Django_filter、SearchFilter、 OrderFilter 、分页5、通用mixins B、权限和认证1、Authentication用户认证设置2、动态设置permission、authentication3、Validators实现字段验证 C、序列化和表单验证1、Serializer2、ModelSerializer3、动态设置Serializer D、支付登录注册1、json web token 实现登录2、手机注册3、支付宝支付4、第三方登录 E、进阶开发1、django rest framework 部分核心源码解读2、文档自动化管理3、django rest framework的缓存4、Throttling 对用户和ip进行限速 开发中常见的问题1、本地系统不能重现的bug 2、api接口出错不能及时的发现或难以找到错误栈 3、api文档管理问题：html 或者markdown的文本交互技术 4、大量的url配置造成url配置越来越多难以维护 5、接口不及时去更新文档，对方不知道如何去测试接口，但写文档会花费大量的时间去维护 6、为了防止爬虫，我们需要针对api的访问频率进行限制，比如一分钟，一小时，或者一天用户的访问频率限制问题 7、某些页面将数据放入缓存，加速某些api的访问速度（商品分类的数据一般变动比较小，所以可以放入缓存中） 开发中常见问题的解决办法1、通过介绍pycharm 的远程服务器代码调试技巧让大家不仅可以调试支付，第三方登录，还可以远程服务器代码来重现服务器上的bug 2、通过docker 搭建 sentry 来体验错误日志监控系统，让我们不仅可以得到线上的错误栈还能及时在发生系统错误时收到邮件通知 3、通过django rest framework 的文档自动化管理以及url的注册管理功能会让我们省去写文档的时间 4、django rest framework 的文档管理功能不仅可以让我们省去写文档的时间，还能直接在文档里面测试接口，自动生成js接口代码，shell测试代码和python测试代码 5、django rest framework 提供的throttle 对于api进行访问频率的限制 6、引入第三方框架来设置某些api的缓存 Django进阶知识点1、Django mirgrations原理2、Django 信号量3、Django从请求到响应的完整过程4、独立使用Django的Model Vue知识点1、Vue技术选型分析2、API后端数据填充到Vue组件模板3、Vue代码结构分析 项目流程1、开发环境的搭建2、设计数据库以及导入原始数据3、restful api基础以及vue项目结构介绍4、商品列表页功能5、商品类别功能6、手机注册和用户登录7、商品详情页和收藏功能8、个人中心功能9、购物车、订单和支付宝支付功能10、首页，商品相关数量，缓存，访问限速功能11、第三方登录(微博 、QQ、 微信)12、sentry系统错误日志监控 技术要求由于这里主要是介绍Django的restful framework，所以我们就不介绍Django的基础知识了，大家可以去订阅我的另一个专题《零基础使用Django2.0.1打造在线教育网站》，通过这个专题的学习，你就会对Django的基础知识有一个比较深刻的认识。然后再来学习本套笔记吧。当然Python的基础语法还是要有的，对于小白我觉得还是不要一上来就接触这些比较深奥的技术。除此之外呢，你最好还有一些Vue和MySQL的基础知识。关于Vue这块，我准备下个月出一套实战教程，而MySQL呢，我已经出了2个专题《SQL数据库学习笔记》，《Python3操作三大数据库》，哪天有时间我继续更新一下（原谅我记忆力比较差。。。）。 系统功能 上面是我们项目的一个运行截图，这里面包含的内容很多，例如：搜索关键词，第三方登录，支付宝结算，商品收藏……..这里就不一一说明了。看到这里，是不是有点想快速学习的念头呢？那么话不多说，上车吧，走你~~~ 特别说明：由于版权的问题，我这个项目的全部代码不会上传到github上了，如果你需要代码请到慕课网购买该课程。 到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。 补充资料1、[入门] 菜鸟Django 教程，非常简短的教程，可以快速让你有一个清楚的认识。2、[基础] 自强学堂Django，非常不错的教程，可以没事看一看。3、[基础] 刘江的Django教程，非常适合入门的小白阅读，还有2个例子供你练习。4、[入门] 1元学习《Django零基础到项目实战》，非常不错的基础入门视频教程。5、[基础]用Python Django快速做出高大上的BBS论坛网站，这是免费的视频教程，大家可以试着去练手。6、[进阶]零基础使用Django2.0.1打造在线教育网站，本人一套关于Django学习的实战笔记。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"},{"name":"Vue前端","slug":"Vue前端","permalink":"http://blog.licheetools.top/tags/Vue前端/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（提示）：错误贴","slug":"零基础使用Django2-0-1打造在线教育网站（提示）：错误贴","date":"2018-04-16T13:21:05.000Z","updated":"2019-11-04T13:21:09.386Z","comments":true,"path":"2018/04/16/零基础使用Django2-0-1打造在线教育网站（提示）：错误贴/","link":"","permalink":"http://blog.licheetools.top/2018/04/16/零基础使用Django2-0-1打造在线教育网站（提示）：错误贴/","excerpt":"","text":"写在前面最近有小伙伴们私聊我说出现了很多问题，这里特开一个帖子专门用于错误的指导与交流。首先是说注册和激活有问题，我对此进行了测试，发现没有问题，小伙伴们出现这种问题可能是代码粘贴时的位置出现了错误，请各位小伙伴们自己对比一下代码，注意是否对齐（部分代码进行了完善），这里贴一下代码。 注册代码123456789101112131415161718192021222324252627282930313233# 用于实现用户注册的函数class RegisterView(View): # get方法直接返回页面 def get(self, request): register_form = RegisterForm() return render(request, &quot;register.html&quot;, &#123;&apos;register_form&apos;: register_form&#125;) def post(self, request): # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息 register_form = RegisterForm(request.POST) if register_form.is_valid(): user_name = request.POST.get(&quot;email&quot;, &quot;&quot;) if UserProfile.objects.filter(email=user_name): # register_form回填信息必须有，msg是信息提示 return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;) # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;) # 实例化一个user_profile对象，存入前端页面获取的值 user_profile = UserProfile() user_profile.username = user_name user_profile.email = user_name # 默认激活状态为False，也就是未激活 user_profile.is_active = False # 对password进行加密并保存 user_profile.password = make_password(pass_word) user_profile.save() send_register_eamil(user_name, &apos;register&apos;) return render(request, &quot;login.html&quot;, ) else: return render(request, &quot;register.html&quot;, &#123;&quot;register_form&quot;: register_form&#125;) 激活代码12345678910111213141516171819# 用于实现用户激活操作的函数class ActiveUserView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) # 如果不为空也就是有用户 active_form = ActiveForm(request.GET) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 user = UserProfile.objects.get(email=email) user.is_active = True user.save() # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;, ) else: return render(request, &quot;register.html&quot;, &#123;&quot;msg&quot;: &quot;您的激活链接无效&quot;, &quot;active_form&quot;: active_form&#125;) 其次是突然所有图片显示不了，我调试发现可能是你上传图片的命名格式出了问题，所以我们的访问地址也要配置：两种形式都可以，不过呢建议大家使用第一种，因为第一种是匹配任意位数，第二种则是贪婪匹配：123456# 第一种# 配置文件上传的访问处理url re_path(&apos;media/(?P&lt;path&gt;\\d+)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;)# 第二种# 配置文件上传的访问处理url re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;), 还有因为我这个是Python3+Django2.0，如果你在部署的时候没有新建虚拟环境，那么你就很容易造成Python版本的使用混乱，而Ubuntu自带的Python版本是2.0系列，因此最好是使用虚拟环境来避免这个错误！ 目前为止就是这几个问题出的错比较多，如果你发现了其他问题，可以在文章底部留言和我交流～～～","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十七）：项目部署上线","slug":"零基础使用Django2-0-1打造在线教育网站（二十七）：项目部署上线","date":"2018-04-15T13:20:16.000Z","updated":"2019-11-04T13:10:42.356Z","comments":true,"path":"2018/04/15/零基础使用Django2-0-1打造在线教育网站（二十七）：项目部署上线/","link":"","permalink":"http://blog.licheetools.top/2018/04/15/零基础使用Django2-0-1打造在线教育网站（二十七）：项目部署上线/","excerpt":"","text":"写在前面本篇笔记我们将介绍如何把我们的django项目部署到服务器上，里面涉及到的东西很多，特别是小白第一次接触可能不清楚，但是没关系，你跟着我的节奏走就可以。注意本文是部署Python3.6.4和Django2.0.1与bobby老师讲的大体上差不多，只是部分命令不一样。注意我已经把win10里面的eduline文件放到deepin的桌面上了。（推荐使用U盘导入文件，否则VMware导入本地文件很麻烦。）使用Centos的朋友请点击这里： centos7 下通过nginx+uwsgi部署django应用 nginx + uwsgi首先在win10上面利用虚拟机安装Ubantu系统，这里我个人推荐使用国产deepin操作系统。不会安装的请点击这里：VmWare安装深度deepin操作系统 安装nginx1、使用命令，安装nginx：1sudo apt-get install nginx 2、使用下面的命令查看是否启动nginx1ps aux | grep nginx 3、使用下面的命令查看本地ip1ifconfig 4、本地输入获取到的ip到浏览器访问一下（服务器用公网IP）： 安装数据库1、使用命令，安装数据库：1sudo apt-get install mysql-server 出现下面的图片： 输入root,按上下箭头进行选择，回车进行确定！2、使用下面的命令查看是否启动mysql1ps aux | grep mysql 3、使用下面的命令进入数据库：1mysql -u root -p 查看数据库命令：show databases;，退出数据库命令：exit 4、在终端中输入sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf修改其中bind-address =127.0.0.1为bind-address =0.0.0.0，注意这样会暴露端口，我们这里仅仅是为了让win10进行连接。所以真正部署的时候，尽量127.0.0.1，不要修改。（在vim中修改文件使用键盘上的i键进入，然后进行修改。修改完成以后，按键盘上的Esc键退出插入模式，再按shift+:，输入wq进行保存。仅仅输入q!是退出，而wq是保存并退出。）5、使用下面的命令重启数据库：123sudo service mysql restart # 重启数据库ifconfig # 查看ip 6、打开win10上面的Navicat，将获取到的ip地址新建数据库，然后测试一下:发现链接不允许（（服务器用公网IP））。7、在终端中输入1mysql -h 192.168.118.128 -u root -p 发现还是有问题。这时我们要修改数据库访问权限：12345mysql -u root -p # 进入数据库GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;flush privileges; 然后exit退出数据库。8、重新链接测试一下，发现可以正常连接了。9，新建数据库：10、使用下面的命令安装pip3:1sudo apt-get install python3-pip 11、使用下面的命令安装virtualenv:1sudo apt-get install virtualenv 12、使用下面的命令安装virtualenvwrapper:1sudo apt-get install virtualenvwrapper 13、修改配置文件:123456vim ~/.bashrcexport WORKON_HOME=$HOME/.virtualenvssource /usr/share/virtualenvwrapper/virtualenvwrapper.shsource ~/.bashrc 14、新建虚拟环境：123workon #测试一下mkvirtualenv eduline 15、win10导出requirements.txt1pip freeze &gt; requirements.txt 16、虚拟机deepin安装requirements.txt（虚拟环境使用pip而不是pip3而且需要把requirements.txt放到虚拟环境里面）1pip3 install -r requirements.txt 17、如果遇到安装不了的软件或者第三方库，可以使用下面的命令1pip3 install Django==2.0.1 18、出现这种情况，使用下面的命令：1sudo apt-get install libmysqlclient-dev 19、如果第三方库安装太慢，可以使用豆瓣源加速：1pip3 install -i https://pypi.douban.com/simple pillow==4.10.1 20、查看已经安装的包使用：1pip3 list 安装uwsgi1、使用下面的命令进行安装：1pip3 install uwsgi 如果安装不了，请先运行下面的命令：1sudo apt-get install libpython3.x-dev #x对应你Python3.x 然后在重新运行一下上面的安装命令。2、运行一下wsgi1uwsgi --http :8000 --module eduline.wsgi 3、启动本地服务器：1python3 manage.py runserver 4、重新设置监听窗口：1python3 manage.py runserver 0.0.0.0:8000 5、数据库迁移：6、使用你本地的ip地址进行访问，页面出现，没有问题。 7、配置nginx：1234567891011121314151617181920212223242526272829303132333435新建uc_nginx.conf# the upstream component nginx needs to connect toupstream django &#123;# server unix:///path/to/your/mysite/mysite.sock; # for a file socketserver 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)&#125;# configuration of the serverserver &#123;# the port your site will be served onlisten 80;# the domain name it will serve forserver_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDNcharset utf-8;# max upload sizeclient_max_body_size 75M; # adjust to taste# Django medialocation /media &#123; alias 你的目录/eduline/media; # 指向django的media目录&#125;location /static &#123; alias 你的目录/eduline/static; # 指向django的static目录&#125;# Finally, send all non-media requests to the Django server.location / &#123; uwsgi_pass django; include uwsgi_params; # the uwsgi_params file you installed&#125;&#125; 8、将该配置文件加入到nginx的启动配置文件中：1sudo ln -s 你的目录/eduline/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/ 9、拉取所有需要的static file 到同一个目录123在django的setting文件中，添加下面一行内容： STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;) 10、运行命令：1python3 manage.py collectstatic 11、通过配置文件启动uwsgi：1234567891011121314151617181920212223242526272829303132新建uwsgi.ini 配置文件， 内容如下： # mysite_uwsgi.ini file [uwsgi] # Django-related settings # the base directory (full path) chdir = /home/licheetools/eduline # Django&apos;s wsgi file module = eduline.wsgi # the virtualenv (full path) # process-related settings # master master = true # maximum number of worker processes processes = 10 # the socket (use the full path to be safe socket = 127.0.0.1:8000 # ... with appropriate permissions - may be needed # chmod-socket = 664 # clear environment on exit vacuum = true virtualenv = /home/licheetools/.virtualenvs/mxonline logto = /tmp/mylog.log注： chdir： 表示需要操作的目录，也就是项目的目录 module： wsgi文件的路径 processes： 进程数 virtualenv：虚拟环境的目录 检查虚拟环境是否有问题： 然后在终端输入：123workon edulineuwsgi -i 你的目录/eduline/conf/uwsgi.ini 如果在conf目录下，只需使用命令：1uwsgi -i uwsgi.ini 最后一步，在浏览器地址里面输入你的ip就可以访问到我们的项目了。 至此，我们Django项目就成功的部署到服务器上面了。回顾这个项目，收获很多，但是坑也很多，坚持到最后才会感受成功的喜悦！ 参考文章：[-] Django部署的正确打开方式 v2.0[-] Django快速部署简约版 v3.0[-] nginx一些常用命令：查看nginx进程命令ps -ef | grep nginx和pkill -9 nginx。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发","slug":"零基础使用Django2-0-1打造在线教育网站（二十六）：xadmin的进阶开发","date":"2018-04-14T13:19:18.000Z","updated":"2019-11-04T13:10:32.559Z","comments":true,"path":"2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十六）：xadmin的进阶开发/","link":"","permalink":"http://blog.licheetools.top/2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十六）：xadmin的进阶开发/","excerpt":"","text":"写在前面本篇笔记我们将介绍xadmin的进阶开发，具体包括自定义icon，默认排序，字段只读，字段隐藏，搜索框，inlines，一张表分两个model来进行管理添加数据，直接列表页编辑，列表页显示章节数，显示自定义的html代码，列表页定时刷新，字段联动功能，xadmin源码目录简说，xadmin集成富文本等功能，下面我们依次介绍一下。 本篇笔记对应于第二十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。 ##首先需要把我们在前面当Debug=False时，修改的以下代码全部删除掉： 为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：1STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;) 同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：123# STATICFILES_DIRS = [# os.path.join(BASE_DIR, &quot;static&quot;), # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾# ] 打开eduline/urls.py文件，新增代码如下：1234from eduline.settings import STATIC_ROOT # 配置静态文件上传的访问处理url re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;), 恢复到Debug=True时的状态。然后进入到我们的xadmin后台，开始xadmin的进阶开发。 自定义icon所谓icon其实就是你的功能小图标：我们以修改邮箱验证码为例，打开users/adminx.py文件，在EmailVerifyRecordAdmin函数新增一行代码：1model_icon = &apos;fa fa-user&apos; 其实这个样式就是对应于font awesome里面的图标，你可以下载新的源代码对你的目录下的css和fonts文件夹进行替换： 然后刷新一下就出现自己想要的样式icon了。 默认排序，字段只读，字段隐藏我们以课程为例，来介绍这3个小功能。打开couses/adminx.py文件，在CourseAdmin中加入以下代码：12345678910# 默认排序：以点击数排序ordering = [&apos;-click_nums&apos;]# 字段只读：点击数只允许读取readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]# 字段隐藏：收藏数隐藏显示exclude = [&apos;fav_nums&apos;]# 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏 搜索框当课程很多时，我们不能以下拉菜单的形式来查找我们的课程，我们需要有搜索框。你已经知道，课程它有一个外键是课程机构，因此我们需要到课程机构里面进行搜索框的配置。打开organization/adminx.py文件，在CourseOrgAdmin函数里面添加一行代码：12# 搜索框，当课程数据量过大时，有课程指向它，会以ajax方式加载 relfield_style = &apos;fk-ajax&apos; inlines添加数据在这之前，我们新增课程的时候是不能同时新增课程章节信息的，需要跳到另一个页面，这是很麻烦的。所以我们考虑采用inlines来添加数据从而完成在一个页面直接完成章节信息的添加。 打开couses/adminx.py文件，在最顶部新定义一个函数：12345678# 课程直接添加章节class LessonInline(object): model = Lesson extra = 0# 同时在CourseAdmin中，新增一行代码# 课程直接添加章节 inlines = [LessonInline] # 数组，支持多个 刷新一下我们的后台，发现章节信息在课程页面底部出现了：同时也支持多个添加，比方再添加一个课程资源： 一张表分两个model来进行管理录播课程与非轮播课程可以分开管理，但是最好是在一张表里显示。打开courses/models.py文件，在course函数下面新增代码123456class BannerCourse(Course): # 注意是继承Course而不是object这个最高类 class Meta: verbose_name = &quot;轮播课程&quot; verbose_name_plural = verbose_name proxy = True # 很重要，否则会生成另外一张表，这样设置具有model的功能，但不会生成表 然后打开courses/adminx.py文件，修改之前的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657from .models import BannerCourseclass CourseAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 过滤器 # # 默认排序：以点击数排序 # ordering = [&apos;-click_nums&apos;] # # # 字段只读：点击数只允许读取 # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;] # # # 字段隐藏：收藏数隐藏显示 # exclude = [&apos;fav_nums&apos;] # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏 # 课程直接添加章节,课程资源 inlines = [LessonInline, CourseResourceInline] # 过滤列表中的数据 def queryset(self): qs = super(CourseAdmin, self).queryset() qs = qs.filter(is_banner=False) return qsclass BannerCourseAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 过滤器 # # 默认排序：以点击数排序 # ordering = [&apos;-click_nums&apos;] # # # 字段只读：点击数只允许读取 # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;] # # # 字段隐藏：收藏数隐藏显示 # exclude = [&apos;fav_nums&apos;] # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏 # 课程直接添加章节,课程资源 inlines = [LessonInline, CourseResourceInline] # 过滤列表中的数据 def queryset(self): qs = super(BannerCourseAdmin, self).queryset() qs = qs.filter(is_banner=True) return qsxadmin.site.register(BannerCourse, BannerCourseAdmin) 然后刷新一下后台页面，发现有2个课程管理：所以我们还是要配置一下：打开users/adminx.py文件，新增以下代码：123from courses.models import BannerCourse&#123;&apos;title&apos;: &apos;轮播课程&apos;, &apos;url&apos;: self.get_model_url(BannerCourse, &apos;changelist&apos;)&#125;, 并修改之前的course的verbose_name为普通课程。就是这个样子：刷新一下我们的后台页面： 直接列表页编辑在courses/adminx.py文件的CourseAdmin函数，新增一行代码：12# 直接列表页编辑 list_editable = [&apos;degree&apos;, &apos;desc&apos;, ] 列表页显示章节数在courses/adminx.py文件的CourseAdmin和BannerCourseAdmin函数的list_display中，新增显示字段get_zj_nums，刷新后台发现是黑色的英文，我们需要修改，新增一行代码：1get_zj_nums.short_description = &quot;章节数&quot; 显示自定义的html代码在刚才的页面下面新增以下代码： 12345def go_to(self): from django.utils.safestring import mark_safe # 如果不使用mark_safe，系统则会对其进行转义 return mark_safe(&quot;&lt;a href=&apos;http://blog.licheetools.top&apos;&gt;跳转&lt;/&gt;&quot;) go_to.short_description = &quot;跳转&quot; 就是这个样子： 列表页定时刷新打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增一行代码：1refresh_times = [3,5] # 列表页定时刷新3s或者5s 字段联动功能打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增以下代码：123456789101112# 字段联动 def save_models(self): # 在保存课程的时候,统计课程机构的课程数 obj = self.new_obj # 新增课程还没有保存，统计的课程数就会少一个 obj.save() # 必须确定存在 if obj.course_org is not None: # obj实际是一个course对象 course_org = obj.course_org course_org.course_nums = Course.objects.filter(course_org=course_org).count() course_org.save() xadmin源码目录简说 locale 对应语言包 migrations 是数据表的记录 plugins 每一个后台页面都是一个plugin插件 static 静态文件夹，里面有js,css template 这是xadmin自己使用的html文件 templatetags 这是tag模板总而言之，xadmin它是对Django admin的封装和进阶开发，正所谓青出于蓝而胜于蓝就是这个理。 xadmin集成富文本首先点击Xadmin 插件制作，我们学着官网的介绍，自己尝试做一个插件:富文本编辑器。点击DjangoUeditor，获取DjangoUeditor的安装包，然后按照帮助文档或者下面的要求安装DjangoUeditor。 1、安装方法(注意需要转到eduline这个虚拟环境下面才能安装)1234方法一：将github整个源码包下载回家，在命令行运行： python setup.py install* 方法二：使用pip工具在命令行运行(推荐)： pip install DjangoUeditor 2、在Django中安装DjangoUeditor在INSTALL_APPS里面增加DjangoUeditor app，如下：123eduline/settings.py文件:INSTALLED_APPS = ( #........ &apos;DjangoUeditor&apos;, ) 3、配置urls1234eduline/urls.py文件: # 富文本相关path配置 path(&quot;ueditor/&quot;, include(&apos;DjangoUeditor.urls&apos;)), 4、在models中的使用12345678courses/models.py文件：from DjangoUeditor.models import UEditorFieldclass Course(models.Model): detail = UEditorField(verbose_name=&apos;课程详情&apos;, width=600, height=300, imagePath=&quot;courses/ueditor/&quot;, filePath=&quot;courses/ueditor/&quot;, default=&apos;&apos;) 5、书写代码在xadmin的plugins文件夹下面，新增一个ueditor.py文件，在里面新增：1234567891011121314151617181920212223242526272829303132333435363738import xadminfrom xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminViewfrom DjangoUeditor.models import UEditorFieldfrom DjangoUeditor.widgets import UEditorWidgetfrom django.conf import settingsclass XadminUEditorWidget(UEditorWidget): def __init__(self,**kwargs): self.ueditor_options=kwargs self.Media.js = None super(XadminUEditorWidget,self).__init__(kwargs)class UeditorPlugin(BaseAdminPlugin): def get_field_style(self, attrs, db_field, style, **kwargs): if style == &apos;ueditor&apos;: if isinstance(db_field, UEditorField): widget = db_field.formfield().widget param = &#123;&#125; param.update(widget.ueditor_settings) param.update(widget.attrs) return &#123;&apos;widget&apos;: XadminUEditorWidget(**param)&#125; return attrs # 在我们生成的页面中放入自己的js文件 def block_extrahead(self, context, nodes): js = &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.config.js&quot;) #自己的静态目录 js += &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.all.min.js&quot;) #自己的静态目录 nodes.append(js) # 新增页面xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)# 修改页面xadmin.site.register_plugin(UeditorPlugin, CreateAdminView) 6、字段显示样式12345courses/adminx.py文件：class CourseAdmin(object): # 字段显示样式 style_fields = &#123;&quot;detail&quot;: &quot;ueditor&quot;&#125; 7、注册进入plugins找到plugins文件夹下的init.py文件，在PLUGINS中写入1PLUGINS= (&apos;ueditor&apos;,） 就是这样： 然后运行一下我们的项目，登录到xadmin后台查看一下，富文本出来:接着在前端刷新一下页面，如果没有出现：那可能是你的course-detail.html页面中设置的有问题：弄好以后，页面还是现实元原始的html代码，这是不允许的，所以我们需要进一步配置：在course-detail.html页面中，关闭转义功能：123&#123;% autoescape off %&#125;&#123;&#123; course.detail &#125;&#125;&#123;% endautoescape %&#125; 现在重新刷新一下我们的页面： 至此，本篇关于xadmin进阶开发的介绍就到此为止了，感谢你的赏阅！ 本篇笔记对应于第二十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十五）：常见的网络攻防","slug":"零基础使用Django2-0-1打造在线教育网站（二十五）：常见的网络攻防","date":"2018-04-14T13:18:29.000Z","updated":"2019-11-04T13:13:05.538Z","comments":true,"path":"2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十五）：常见的网络攻防/","link":"","permalink":"http://blog.licheetools.top/2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十五）：常见的网络攻防/","excerpt":"","text":"写在前面本篇笔记我们将介绍常见的网络攻击与防护，具体包括SQL注入攻击及防护，XSS攻击及防护以及CSRF攻击及防护，下面我们依次介绍一下。 SQL注入攻击及防护首先我们来了解一下什么是SQL注入？ 所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击。 SQL注入的危害:下面我们通过一段代码了解一下SQL注入的过程：12345678910111213141516171819202122232425# users/views.py文件：class LoginUnsafeView(View): def get(self, request): return render(request, &quot;login.html&quot;, &#123;&#125;) def post(self, request): user_name = request.POST.get(&quot;username&quot;, &quot;&quot;) pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;) import MySQLdb conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;root&apos;, db=&apos;mxonline&apos;, charset=&apos;utf8&apos;) cursor = conn.cursor() sql_select = &quot;select * from users_userprofile where email=&apos;&#123;0&#125;&apos; and password=&apos;&#123;1&#125;&apos;&quot;.format(user_name, pass_word) result = cursor.execute(sql_select) for row in cursor.fetchall(): # 查询到用户 pass print &apos;hello&apos;# eduline/urls.py文件:from users.views import LoginUnsafeViewurlpatterns = [ path(&apos;login/&apos;, LoginUnsafeView.as_view(), name=&apos;login&apos;),] 这里竟然把sql语句写到这里，所以我们可以在参数中加入sql语句，使之拼接字符串从而为真被系统识别通过，盗取用户信息。但是在Django自带了orm,可以对这个进行验证，从而保证系统的安全。 因此建议大家都采用orm这种形式，不要使用原生的sql语句。 XSS攻击及防护首先我们来了解一下什么是XSS攻击？ XSS跨站脚本攻击(Cross Site Scripting)，是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。 XSS攻击的危害：攻击流程为：举个例子来说：当你输入iPhone6时，这个字符就会被显示到页面中： 之后，黑客就会修改js代码:然后就拿到了你的登录cookie就可以进入你的账户进行肆意掠夺你的money了。 这也就是为什么你觉得自己明明进入的是官方网站，怎么账号（经常就是QQ号）被盗了的缘故，所以不要随意点开陌生人发的链接。 XSS防护： CSRF攻击及防护首先我们来了解一下什么是CSRF攻击？ CSRF（Cross-site request forgery）跨站请求伪造，是通过伪装来自受信任用户的请求来利用受信任的网站。 CSRF攻击的危害：攻击流程为：你看，这就是伪装：用户开始访问了A，之后访问了B，而B是要求用户访问A的。用户以为这是跳转到A的链接，以为很官方，殊不知就是这种官方泄露了自己的信息。原因在于用户每次向A请求时，都会带上session id，这样就很容易出问题。 CSRF防护：提交form表单必须添加crsf token，进行crsf token验证，而攻击网站是无法生成crsf token的。还有一点，但凡涉及到敏感信息的网站，你登录进去就要及时登出，这样可以避免很多问题的发生。 至此，本篇关于常见网络攻击与防护的介绍就到此为止了，感谢你的赏阅！","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十四）：全局页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十四）：全局页面配置","date":"2018-04-14T13:16:22.000Z","updated":"2019-11-04T13:11:00.648Z","comments":true,"path":"2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十四）：全局页面配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/14/零基础使用Django2-0-1打造在线教育网站（二十四）：全局页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍全局页面的配置，具体包括首页登出实现，点击数加1，收藏数配置，小喇叭消息已读配置，首页的开发以及404和500页面的配置等功能，下面我们依次介绍一下。 本篇笔记对应于第二十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。 首页登出实现现在我们来完善我们首页的系统登出功能，这个没有页码，你登出后只需要跳转到首页即可，所以我们只需要写一个view就能完成这个操作。 老规矩先配置path:打开eduline/urls.py文件，新增以下代码：1234from users.views import LogoutView# 登出url path(&apos;logout/&apos;, LogoutView.as_view(), name=&quot;logout&quot;), 然后打开users/view.py文件，在login的函数下面新增以下代码：12345678910from django.urls import reversefrom django.contrib.auth import logoutfrom django.http import HttpResponseRedirect# 用于实现用户首页登出的函数class LogoutView(View): def get(self, request): # 采用Django自带的logout函数来完成我们登出的功能 logout(request) # 不采用之前的render，而是采用重定向返回到首页 return HttpResponseRedirect(reverse(&quot;index&quot;)) 接下来在base.html页面进行跳转链接的配置：别忘了还有其余2个base页面跳转的配置，很简单，这里就不介绍了。 点击数加11、为课程数加1：打开courses/view.py文件，找到CourseInfoView函数，新增以下代码：12course.students += 1course.save() 就是这个样子：2、为讲师数加1：打开organization/view.py文件，找到TeacherDetailView函数，新增以下代码：12teacher.click_nums += 1teacher.save() 就是这个样子：3、为机构数加1：打开organization/view.py文件，找到OrgHomeView函数，新增以下代码：12course_org.click_nums += 1course_org.save() 就是这个样子： 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 404和500页面的配置老规矩，从前端资料里面拷贝我们的404和500页面到templates文件夹并修改文件里面的静态文件地址。打开eduline/urls.py文件，新增代码如下：12# 全局404页面配置handler404 = &apos;users.views.page_not_found&apos; 就是这个样子：然后打开users/views.py文件，新增以下代码：123456789# 404页面对应的处理函数def page_not_found(request): from django.shortcuts import render_to_response response = render_to_response(&quot;404.html&quot;, &#123; &#125;) # 设置response的状态码 response.status_code = 404 return response 接着运行我们的项目，随意输入一个地址，发现页面并没有出来，那是因为在eduline/settings.py文件里面：DEBUG = True，所以我们需要修改它为False，还有下面的允许访问IP地址，否则404页面也是出不来的：123DEBUG = FalseALLOWED_HOSTS = [&apos;*&apos;] 这样重新运行一下我们的项目，发现页面有了，但是样子却没加载出来，这是为什么呢？ 因为DEBUG为True时，系统会自动前往STATICFILES_DIRS下寻找文件的。所以我们开始一般都会选择True，便于错误信息的显示。 但是一旦DEBUG为False时，情况就不一样了，Django就不会代管你的静态文件了，而事实上一般静态文件都是通过第三方http服务器来代理转发。（如常见的服务器Nignx 和 Apache都会自动代理这些静态文件） 为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：1STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;) 同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：123# STATICFILES_DIRS = [# os.path.join(BASE_DIR, &quot;static&quot;), # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾# ] 打开eduline/urls.py文件，新增代码如下：1234from eduline.settings import STATIC_ROOT # 配置静态文件上传的访问处理url re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;), 现在重新运行我们的项目，看看404是不是出来了。 500的页面的配置和这个一模一样（注意函数名为page_error），这里就不再赘述了。 至此，本篇关于全局页面配置的介绍就到此为止了，感谢你的赏阅。 本篇笔记对应于第二十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十三）：个人信息相关页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十三）：个人信息相关页面配置","date":"2018-04-13T13:14:52.000Z","updated":"2019-11-04T13:10:51.268Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十三）：个人信息相关页面配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十三）：个人信息相关页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍个人信息相关页面的配置，具体包括我的课程，我的收藏，我的消息等功能，下面我们依次介绍一下。 本篇笔记对应于第二十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。 我的课程老规矩，让我们的usercenter_mycourse继承我们的usercenter_base.html页面：然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyCourseView # 用户个人中心我的课程url path(&quot;mycourse/&quot;, MyCourseView.as_view(), name=&quot;mycourse&quot;), 然后打开users/views.py文件，新增以下代码：123456789# 用户个人中心我的课程函数class MyCourseView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): return render(request, &quot;usercenter-mycourse.html&quot; ,&#123; &#125;) 然后去usercenter-base.html页面设置我们的跳转链接：然后运行我们的项目，就可以点击我的课程了：接下来就是课程的动态填充了，自己先尝试一下在MyCourseView这个函数里面写一下业务逻辑代码：123456789101112# 用户个人中心我的课程函数class MyCourseView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): user_courses = UserCourse.objects.filter(user=request.user) return render(request, &quot;usercenter-mycourse.html&quot;, &#123; &quot;user_courses&quot;: user_courses, &#125;) 然后打开usercenter-mycourse.html页面,配置动态加载：接着刷新我们的页面，就可以看到我的课程了： 我的收藏收藏授课机构这里面有3个页面，我们一个个的来弄，先弄usercenter_fav_org页面。老规矩，让我们的usercenter_fav_org继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyFavOrgView # 我收藏的课程机构url path(&quot;myfav/org/&quot;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;), 然后打开users/views.py文件，新增以下代码：12345678910111213141516171819from operation.models import UserFavoritefrom organization.models import CourseOrg# 我收藏的课程机构函数class MyFavOrgView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): org_list = [] fav_orgs = UserFavorite.objects.filter(user=request.user, fav_type=2) for fav_org in fav_orgs: org_id = fav_org.fav_id org = CourseOrg.objects.get(id=org_id) org_list.append(org) return render(request, &quot;usercenter-fav-org.html&quot;, &#123; &quot;org_list&quot;: org_list, &#125;) 然后去usercenter-base.html页面设置我们的跳转链接： 然后运行我们的项目，就可以点击我的课程了： 然后打开usercenter-fav_org.html页面,配置动态加载： 接着刷新我们的页面，就可以看到我收藏的课程机构了： 收藏课程机构收藏授课讲师我们现在来弄usercenter_fav_teacher页面。老规矩，让我们的usercenter_fav_teacher继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyFavTeacherView # 我收藏的授课讲师url path(&quot;myfav/teacher/&quot;, MyFavTeacherView.as_view(), name=&quot;myfav_teacher&quot;), 然后打开users/views.py文件，新增以下代码：12345678910111213141516171819from organization.models import Teacher# 我收藏的授课讲师函数class MyFavTeacherView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): teacher_list = [] fav_teachers = UserFavorite.objects.filter(user=request.user, fav_type=3) for fav_teacher in fav_teachers: teacher_id = fav_teacher.fav_id teacher = Teacher.objects.get(id=teacher_id) teacher_list.append(teacher) return render(request, &quot;usercenter-fav-teacher.html&quot;, &#123; &quot;teacher_list&quot;: teacher_list, &#125;) 然后去usercenter-fav_teacher.html页面设置我们的跳转链接和配置动态加载：打开oganization/models.py文件，在Teacher函数新增用于获取课程数的函数：12def get_course_nums(self): return self.course_set.all().count() 就是这样： 还有记得去usercenter-fav_org.html页面设置我们的跳转链接，否则就跳不到机构讲师页面了： 然后运行我们的项目，就可以看到我收藏的授课讲师了： 收藏公开课程我们现在来弄usercenter_fav_course页面。老规矩，让我们的usercenter_fav_course继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyFavCourseView # 我收藏的公开课程url path(&quot;myfav/course/&quot;, MyFavCourseView.as_view(), name=&quot;myfav_course&quot;), 然后打开users/views.py文件，新增以下代码：123456789101112131415161718from courses.models import Course# 我收藏的公开课程函数class MyFavCourseView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): course_list = [] fav_courses = UserFavorite.objects.filter(user=request.user, fav_type=1) for fav_course in fav_courses: course_id = fav_course.fav_id course = Course.objects.get(id=course_id) course_list.append(course) return render(request, &quot;usercenter-fav-course.html&quot;, &#123; &quot;course_list&quot;: course_list, &#125;) 然后去usercenter-fav_course.html页面设置我们的跳转链接和配置动态加载： 注意：双箭头指示的url跳转需要在fav_xx.html这3个页面进行修改从而可以3个页面切换自如。 然后运行我们的项目，就可以看到我收藏的公开课程了： 不过右边的取消收藏，也就是删除还没实现：我们需要在3个fav_xx.html页面修改传递的id即可： 然后打开我们的usercenter_base.html页面，找到这3段代码，这就是实现删除的js代码：注意一下，这段代码里面需要放csrf_token,否则会出错：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;script type=&quot;text/javascript&quot;&gt; $(&apos;.jsDeleteFav_course&apos;).on(&apos;click&apos;, function()&#123; var _this = $(this), favid = _this.attr(&apos;data-favid&apos;); $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;/org/add_fav/&quot;, data: &#123; fav_type: 1, fav_id: favid, csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos; &#125;, async: true, success: function(data) &#123; Dml.fun.winReload(); &#125; &#125;); &#125;); $(&apos;.jsDeleteFav_teacher&apos;).on(&apos;click&apos;, function()&#123; var _this = $(this), favid = _this.attr(&apos;data-favid&apos;); $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;/org/add_fav/&quot;, data: &#123; fav_type: 3, fav_id: favid, csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos; &#125;, async: true, success: function(data) &#123; Dml.fun.winReload(); &#125; &#125;); &#125;); $(&apos;.jsDeleteFav_org&apos;).on(&apos;click&apos;, function()&#123; var _this = $(this), favid = _this.attr(&apos;data-favid&apos;); $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;/org/add_fav/&quot;, data: &#123; fav_type: 2, fav_id: favid, csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos; &#125;, async: true, success: function(data) &#123; Dml.fun.winReload(); &#125; &#125;); &#125;);&lt;/script&gt; 至此，我的收藏3个相关页面就实现了，下面我们来配置我的消息页面。 我的消息老规矩，让我们的usercenter_message.html继承我们的usercenter_base.html页面： 然后就是先配置path，打开users/urls.py文件，新增以下代码:1234from .views import MyMessageView # 我的消息url path(&quot;mymessage/&quot;, MyMessageView.as_view(), name=&quot;mymessage&quot;), 然后打开users/views.py文件，新增以下代码：12345678910111213141516171819202122232425from pure_pagination import Paginator, EmptyPage, PageNotAnIntegerfrom operation.models import UserMessage# 我的消息函数class MyMessageView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;next&apos; def get(self, request): # 取出所有的信息 all_messages = UserMessage.objects.filter(user=request.user.id) # 对消息进行分页,尝试获取前端get请求传递过来的page参数 # 如果是不合法的配置参数则默认返回第一页 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # 这里指从all_courses中取出来，每页显示9个 p = Paginator(all_messages, 9, request=request) messages = p.page(page) return render(request, &quot;usercenter-message.html&quot;, &#123; &quot;messages&quot;: messages, &#125;) 接着打开usercenter_base.html页面，我们修改页面跳转链接：然后打开usercenter_message.html页面，我们修改页面信息如下：然后打开users/views.py文件，找到我们之前的注册函数，新增以下代码：12345# 写入欢迎注册的信息 user_message = UserMessage() user_message.user = user_profile.id user_message.message = &quot;欢迎注册慕海学习网！&quot; user_message.save() 也就是这样：接下来打开xadmin后台，我们对应id给其加几条信息，然后刷新一下我们的页面： 不知道你是否注意到我们页面顶部的小喇叭，这就是未读消息的提示，所以我们需要统计一下未读消息的数量。打开users/model.py文件，在UserProfile函数里面新增用于获取用户的未读消息的数量的函数：1234def get_unread_nums(self): # 获取用户的未读消息的数量 from operation.models import UserMessage return UserMessage.objects.filter(user=self.id).count() 就是这个样子：然后打开base.html页面，找到并修改信息为图示：突然刷新一下我们的页面，回到首页，看到有2条信息未读：然后点击进入个人中心，发现消息没有了，又回到首页，发现有出现了。这是因为我们的消息页面还没配置完，我们需要全部页面配置。 Ctrl+shift+F调出全局搜索，在里面选择.html文件，然后搜索MsgNum，全部修改成那个样子： 至此，本篇关于个人信息相关页面的配置介绍就到此结束，感谢你的赏阅。 本篇笔记对应于第二十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十二）：个人资料及搜索配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十二）：个人资料及搜索配置","date":"2018-04-13T13:10:44.000Z","updated":"2019-11-04T13:10:22.745Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十二）：个人资料及搜索配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十二）：个人资料及搜索配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍用户个人资料页面的配置，具体包括全局导航栏配置，全局搜索功能开发，个人中心资料展示，修改密码和头像以及页面表单提交等功能，下面我们依次介绍一下。 本篇笔记对应于第二十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。 全局导航栏配置首先修改index.html页面，让它也继承我们的base.html页面：然后打开base.html.html页面，我们做一下页面的链接跳转：12345678910111213141516&lt;div class=&quot;nav&quot;&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul&gt; &lt;li &gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li &gt; &lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt; 公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt; &lt;/a&gt; &lt;/li&gt; &lt;li &gt; &lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;active&quot; &gt;&lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; 这样跳转链接算是弄好了，但是我们暂时还不知道根据什么来判断当前页面已经被选中，所以我们需要仿照之前在课程机构里面的那样，增加一个current_nav用于指明当前页面的代号然后就可以根据某值是否相等来判断页面是否选中的状态了。12345678910111213# organizaton/views.py里面class TeacherListView(View):current_nav = &quot;teacher&quot; return render(request, &quot;teachers-list.html&quot;, &#123; &quot;current_nav&quot;: current_nav, &#125;)# base.html页面里面&lt;li &#123;% if current_nav == &apos;teacher&apos; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;&lt;/li&gt; 上述方法的确可以使用，但是有一个问题，就是为了满足前端页面的显示，你在后端每个涉及到的view里面都必须有current view，这是不是太麻烦了？这只是一级导航栏少而且没有二三级导航栏的情况下才可以，多了完全是不可以的。你看一下淘宝的页面导航栏： 那么问题来了，又什么好方法可以解决这个问题吗？答案是有的！ 我们可以根据request.path中的前几位来判断当前处于何种页面，从而选中何种状态。你可能会糊涂，别急我举个例子给你说明一下：http://127.0.0.1:8000/ 你肯定知道访问的是根目录； http://127.0.0.1:8000/course/detail/2你肯定也知道访问的是课程相关的页面；http://127.0.0.1:8000/org/teacher/detail你肯定也知道访问的是讲师相关的页面；鉴于此，我们就是采用这种方式来判断选中状态的。打开base.html.html页面，修改代码如下：12345678910111213141516&lt;ul&gt; &lt;li &#123;% if request.path == &quot;/&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt; &lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt; &lt;/li&gt; &lt;li &#123;% if request.path|slice:&quot;7&quot; == &quot;/course&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt; &lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt; 公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt; &lt;/a&gt; &lt;/li&gt; &lt;li &#123;% if request.path|slice:&quot;12&quot; == &quot;/org/teacher&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt; &lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt; &lt;/li&gt; &lt;li &#123;% if request.path|slice:&quot;9&quot; == &quot;/org/list&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125; &gt; &lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; 其中request.path是指访问的全路径地址，if request.path|slice:”12” == “/org/teacher”是指除了域名以外(此处域名为127.0.0.1)，从1-12位的地址等于/org/teacher即访问地址为：1http://127.0.0.1:8000/org/teacher 就是这个样子： 运行一下我们的项目，发现是随着我们点哪个，哪个页面就是被选中状态。 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 页面表单提交打开users/forms.py文件，新增以下代码：1234567# 用户信息修改表单提交class UserInfoForm(forms.ModelForm): # 除了继承现有的字段还可以新增字段 class Meta: model = UserProfile # 自定义需要验证的字段，注意与数据库中字段应保持一致 fields = [&quot;nick_name&quot;, &quot;birday&quot;, &quot;gender&quot;, &quot;address&quot;, &quot;mobile&quot;] 然后打开我们的users/views.py文件，找到我们之前定义的userinfoview这个函数，我们新增它的post方法：12345678910from .forms import UserInfoFormimport json def post(self, request): user_info_form = UserInfoForm(request.POST, instance=request.user) if user_info_form.is_valid(): user_info_form.save() return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;) else: return HttpResponse(json.dumps(user_info_form.errors), content_type=&apos;application/json&apos;) 然后尝试提交一下你刚才修改过的表单，发现提交没有问题。 至此，本篇关于用户个人资料页面及搜索框的配置就到此为止，感谢你的赏阅。 本篇笔记对应于第二十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十一）：讲师相关页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十一）：讲师相关页面配置","date":"2018-04-13T13:07:47.000Z","updated":"2019-11-04T13:13:19.293Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十一）：讲师相关页面配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十一）：讲师相关页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍讲师相关页面的配置，具体包括讲师列表页，讲师详情页等功能，下面我们依次介绍一下。 本篇笔记对应于第二十一篇代码，对应于github的位置是https://github.com/licheetools/eduline。 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 讲师详情页配置打开teacher-detail.html页面，修改teacher_detail.html页面，保留部分信息，其余删除， 里面 是原来teacher_detail.html保留下来的一部分： 接着打开organization/urls.py文件，新增代码：12# 讲师详情页url re_path(&apos;teacher/detail/(?P&lt;teacher_id&gt;\\d+)/&apos;, TeacherDetailView.as_view(), name=&quot;teacher_detail&quot;), 然后打开organization/views.py文件，新增代码（这里面的代码用途前面已经说过，这里不再细说）：12345678910111213141516171819202122232425# 讲师详情页class TeacherDetailView(View): def get(self, request, teacher_id): # 取出当前id的讲师信息 teacher = Teacher.objects.get(id=int(teacher_id)) # 前面的teacher是数据库里面的字段，后一个则是上面取到的teacher all_courses = Course.objects.filter(teacher=teacher) has_fav_teacher = False if UserFavorite.objects.filter(user=request.user, fav_type=3, fav_id=teacher.id): has_fav_teacher = True has_fav_org = False if UserFavorite.objects.filter(user=request.user, fav_type=2, fav_id=teacher.org.id): has_fav_org = True # 讲师排行榜 sorted_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5] return render(request, &quot;teacher-detail.html&quot;, &#123; &quot;teacher&quot;: teacher, &quot;all_courses&quot;: all_courses, &quot;sorted_teacher&quot;: sorted_teacher, &quot;has_fav_teacher&quot;: has_fav_teacher, &quot;has_fav_org&quot;: has_fav_org, &#125;) 接着打开我们的teacher-detail.html页面，进行数据的动态加载以及页面的跳转，这里就不附上代码的，大家自己去和我github上的页面源代码进行对比（先尝试自己修改，之后可以看一下）。 还有页面中左右两侧的收藏功能，这里我直接附上js代码(不懂位置的可以去查看github上的页面源代码)：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&#123;% block custom_js %&#125;&lt;script type=&quot;text/javascript&quot;&gt;//收藏分享function add_fav(current_elem, fav_id, fav_type)&#123; $.ajax(&#123; cache: false, type: &quot;POST&quot;, url:&quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;, data:&#123;&apos;fav_id&apos;:fav_id, &apos;fav_type&apos;:fav_type&#125;, async: true, beforeSend:function(xhr, settings)&#123; xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;); &#125;, success: function(data) &#123; if(data.status == &apos;fail&apos;)&#123; if(data.msg == &apos;用户未登录&apos;)&#123; window.location.href=&quot;/login/?next=&#123;&#123; request.path &#125;&#125;&quot;; &#125;else&#123; alert(data.msg) &#125; &#125;else if(data.status == &apos;success&apos;)&#123; current_elem.text(data.msg) &#125; &#125;, &#125;);&#125;$(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function()&#123; add_fav($(this), &#123;&#123; teacher.id &#125;&#125;, 3);&#125;);$(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function()&#123; add_fav($(this), &#123;&#123; teacher.org.id &#125;&#125;, 2);&#125;);&lt;/script&gt;&lt;script&gt; window._bd_share_config = &#123; &quot;common&quot;:&#123;&quot;bdSnsKey&quot;:&#123;&#125;,&quot;bdText&quot;:&quot;&quot;,&quot;bdMini&quot;:&quot;1&quot;,&quot;bdMiniList&quot;:[&quot;mshare&quot;,&quot;qzone&quot;,&quot;tsina&quot;,&quot;weixin&quot;,&quot;sqq&quot;],&quot;bdPic&quot;:&quot;&quot;,&quot;bdStyle&quot;:&quot;0&quot;,&quot;bdSize&quot;:&quot;16&quot;&#125;, share : [ &#123; &quot;info&quot; : &quot;share_&#123;&#123; teacher.id &#125;&#125;&quot;, &quot;bdSize&quot; : 16, &quot;bdText&quot;:&quot;授课教师-&#123;&#123; teacher.name &#125;&#125;-慕海学习网&quot;, &quot;bdDesc&quot;: &quot;我在#慕海学习网#发现了老师“&#123;&#123; teacher.name &#125;&#125;”，对我们学习很有帮助，一起来看看吧&quot;, &quot;bdUrl&quot;: &apos;http://eduline.licheetools.top&#123;% url &apos;org:teacher_detail&apos; teacher.id %&#125;&apos;, &#125;,] &#125; //以下为js加载部分 with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt;&#123;% endblock %&#125; 顺便大家可以把之前teacher_list.html中的页面跳转弄一下（可以配置的尽量先配置）。 至此，我们本篇关于讲师详情页面的介绍就到此为止，感谢你的赏阅。 本篇笔记对应于第二十一篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二十）：课程相关页面配置","slug":"零基础使用Django2-0-1打造在线教育网站（二十）：课程相关页面配置","date":"2018-04-13T13:06:41.000Z","updated":"2019-11-04T13:10:09.589Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十）：课程相关页面配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/13/零基础使用Django2-0-1打造在线教育网站（二十）：课程相关页面配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍课程相关页面的配置，具体包括课程章节信息，章节视频信息，课程评论页面，相关课程推荐，课程播放页面等功能，下面我们依次介绍一下。 本篇笔记对应于第二十篇代码，对应于github的位置是https://github.com/licheetools/eduline。 课程章节信息配置老规矩，把前端资料里面的course-video.html和course-comment.html页面拷贝到我们的templates文件夹里面，接着修改course-video.html页面，保留部分信息，其余删除， 里面 是原来course-video.html保留下来的一部分：12345678910111213141516171819202122232425262728&#123;% extends &apos;base.html&apos; %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;公开课视频信息 - 慕海学习网&#123;% endblock %&#125;&#123;% block custom_bread %&#125;&lt;section&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul class=&quot;crumbs&quot;&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; course.id %&#125;&quot;&gt;课程详情&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;章节信息&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/section&gt;&#123;% endblock %&#125;&#123;% block custom_css %&#125; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/base.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/common-less.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/learn-less.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/aui.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/mooc.css&apos; %&#125;&quot;/&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/common-less.css&apos; %&#125;&quot;/&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div id=&quot;main&quot;&gt;&#123;% endblock %&#125; 就是这个样子（这里面的静态文件路径和url的跳转我都做好了，你按照图示进行修改即可）：然后打开course/urls.py文件，新增以下信息：1234from .views import CourseInfoView# 课程章节信息页url re_path(&apos;info/(?P&lt;course_id&gt;.*)/&apos;, CourseInfoView.as_view(), name=&quot;course_info&quot;), 接着打开course/views.py文件，新增以下信息：1234567# 课程章节信息class CourseInfoView(View): def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) return render(request, &quot;course-video.html&quot;, &#123; &quot;course&quot;: course, &#125;) 现在打开course-detail.html页面，ctrl+F搜索“开始学习”，配置跳转路径：1&lt;div class=&quot;buy btn&quot;&gt;&lt;a style=&quot;color: white&quot; href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;开始学习&lt;/a&gt;&lt;/div&gt; 就是这个样子： 然后运行项目，点击课程详情页面的开始学习就进入到课程章节信息页面了：现在在后台为指定某一门课添加课程章节信息，便于我们后面的测试： 章节视频信息配置接下来获取课程的章节：打开courses/models.py文件，在Course函数里面，新定义函数def get_course_lesson用于获取课程的章节：123def get_course_lesson(self): # 获取课程所有章节 return self.lesson_set.all() 在lesson函数里面，新定义函数def get_lesson_video用于获取章节的视频信息：123def get_lesson_video(self): # 获取章节视频信息 return self.video_set.all() 现在打开course-video.html页面，配置数据的动态显示：12345678910111213141516&#123;% for lesson in course.get_course_lesson %&#125; &lt;div class=&quot;chapter chapter-active&quot; &gt; &lt;h3&gt; &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt; &lt;/h3&gt; &lt;ul class=&quot;video&quot;&gt; &#123;% for video in lesson.get_lesson_video %&#125; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;) &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endfor %&#125; 就是这个样子： 前面说过，你可以选择不定义函数，自己调用它的queryset方法，那么只需修改course-video.html页面，修改如下：12345678910111213141516&#123;% for lesson in course.lesson_set.get_queryset%&#125; &lt;div class=&quot;chapter chapter-active&quot; &gt; &lt;h3&gt; &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt; &lt;/h3&gt; &lt;ul class=&quot;video&quot;&gt; &#123;% for video in lesson.video_set.get_queryset %&#125; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;) &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% endfor %&#125; 刷新一下我们的页面： 资源下载功能第一步，前往xadmin后台为某一门课添加课程资源，第二步打开courses/views.py文件，修改视图函数：123456from .models import CourseResourceall_resources = CourseResource.objects.filter(course=course)return render(request, &quot;course-video.html&quot;, &#123; &quot;all_resources&quot;: all_resources, &#125;) 就是这个样子：现在打开course-video.html页面，配置资源下载的动态显示：123456&#123;% for resources in all_resources %&#125; &lt;li&gt; &lt;span &gt;&lt;i class=&quot;aui-iconfont aui-icon-file&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&#123;&#123; resources.name &#125;&#125;&lt;/span&gt; &lt;a href=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; resources.download &#125;&#125;&quot; class=&quot;downcode&quot; target=&quot;_blank&quot; download=&quot;&quot; data-id=&quot;274&quot; title=&quot;&quot;&gt;下载&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; 就是这个样子：然后刷新页面，发现显示没有问题。接下在course-video.html页面完成课程信息的修改：123456789101112131415&lt;div class=&quot;static-item &quot;&gt; &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.get_degree_display &#125;&#125;&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;难度&lt;/span&gt; &lt;em&gt;&lt;/em&gt; &lt;/div&gt; &lt;div class=&quot;static-item static-time&quot;&gt; &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.learn_times &#125;&#125;分钟&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;时长&lt;/span&gt; &lt;em&gt;&lt;/em&gt; &lt;/div&gt; &lt;div class=&quot;static-item&quot;&gt; &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.students &#125;&#125;人&lt;/strong&gt;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;学习人数&lt;/span&gt; &lt;em&gt;&lt;/em&gt; &lt;/div&gt; 在配置讲师提示的时候，发现讲师和课程之间没有建立外键连接，所以在courses/models.py文件的Course函数，新增讲师字段 :123from organization.models import Teacherteacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, verbose_name=&quot;讲师&quot;, null=True, blank=True) 记得数据库的变动需要两部曲：makemigrations和migrate。 然后前往xadmin后台为这门课添加一个讲师。 然后修改course-video.html页面,修改信息成图示：然后刷新页面，发现显示没有问题。 课程评论页面配置打开courses/urls.py文件，配置课程评论页面的url1234from .views import CourseCommentView # 课程评论页面url re_path(&apos;comment/(?P&lt;course_id&gt;.*)/&apos;, CourseCommentView.as_view(), name=&quot;course_comment&quot;), 然后打开courses/views.py文件，新定义课程评论页面函数：12345678910111213from operation.models import CourseComments# 课程评论页面class CourseCommentView(View): def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) all_comments = CourseComments.objects.all() return render(request, &quot;course-comment.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;all_comments&quot;: all_comments, &#125;) 接着打开course-comment.html页面,修改跳转代码：12&lt;li&gt;&lt;a class=&quot;ui-tabs-active active&quot; id=&quot;learnOn&quot; href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;&lt;span&gt;章节&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a id=&quot;commentOn&quot; class=&quot;&quot; href=&quot;&#123;% url &apos;course:course_comment&apos; course.id %&#125;&quot;&gt;&lt;span&gt;评论&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; 然后打开course-comment.html页面，修改课程信息，资料下载，讲师提示等（和前面在video页面配置的一模一样，这里不再介绍）：接下来打开courses/views.py文件，新定义用于用户增加课程评论的函数：1234567891011121314151617181920# 用户增加课程评论class AddCommentView(View): def post(self, request): if not request.user.is_authenticated: # 未登录时页面提示未登录，并跳转到登录页面 return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&apos;, content_type=&apos;application/json&apos;) course_id = request.POST.get(&quot;course_id&quot;, 0) comments = request.POST.get(&quot;comments&quot;, &apos;&apos;) if course_id &gt;0 and comments: course_comments = CourseComments() # get方法只能取出一条数据，如果有多条则抛出异常而且没有数据也抛异常 # filter方法可以取一个列表出来（可以遍历的queryset），没有数据返回空的queryset，是不会抛异常的 course = Course.objects.get(id=int(course_id)) course_comments.course = course course_comments.comment = comments # 前面comment为数据库中定义字段，要保持一致，否则数据存入不数据库 course_comments.user = request.user course_comments.save() return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;评论成功&quot;&#125;&apos;, content_type=&apos;application/json&apos;) else: return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;评论失败&quot;&#125;&apos;, content_type=&apos;application/json&apos;) 现在回到courses/urls.py文件，我们来配置访问的url:1234from .views import AddCommentView # 用户增加课程评论页面url,注意此处为普通的url因为在post中，我们已经有了参数 path(&apos;add_comment/&apos;, AddCommentView.as_view(), name=&quot;add_comment&quot;), 然后打开course-comment.html页面，在页面底部增加js代码：1234567891011121314151617181920212223242526272829303132333435&#123;% block custom_js %&#125;&lt;script type=&quot;text/javascript&quot;&gt; //添加评论 $(&apos;#js-pl-submit&apos;).on(&apos;click&apos;, function()&#123; var comments = $(&quot;#js-pl-textarea&quot;).val() if(comments == &quot;&quot;)&#123; alert(&quot;评论不能为空&quot;) return &#125; $.ajax(&#123; cache: false, type: &quot;POST&quot;, url:&quot;&#123;% url &apos;course:add_comment&apos; %&#125;&quot;, data:&#123;&apos;course_id&apos;:&#123;&#123; course.id &#125;&#125;, &apos;comments&apos;:comments&#125;, async: true, beforeSend:function(xhr, settings)&#123; xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;); &#125;, success: function(data) &#123; if(data.status == &apos;fail&apos;)&#123; if(data.msg == &apos;用户未登录&apos;)&#123; window.location.href=&quot;&#123;% url &apos;login&apos; %&#125;&quot;; &#125;else&#123; alert(data.msg) &#125; &#125;else if(data.status == &apos;success&apos;)&#123; window.location.reload();//刷新当前页面. &#125; &#125;, &#125;); &#125;);&lt;/script&gt;&#123;% endblock %&#125; 继续在该页面修改如下代码，使页面评论可以动态加载出来：12345678910111213141516&#123;% for user_comments in all_comments %&#125; &lt;li class=&quot;post-row&quot;&gt; &lt;div class=&quot;media&quot;&gt; &lt;span target=&quot;_blank&quot;&gt;&lt;img src=&apos;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; user_comments.user.image &#125;&#125;&apos; width=&apos;40&apos; height=&apos;40&apos; /&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;bd&quot;&gt; &lt;div class=&quot;tit&quot;&gt; &lt;span target=&quot;_blank&quot;&gt;&#123;&#123; user_comments.user.username &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;p class=&quot;cnt&quot;&gt;&#123;&#123; user_comments.user.comment &#125;&#125;&lt;/p&gt; &lt;div class=&quot;footer clearfix&quot;&gt; &lt;span title=&quot;创建时间&quot; class=&quot;l timeago&quot;&gt;&#123;&#123; user_comments.add_time &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt; &#123;% endfor %&#125; 然后你可以在图示位置打上断点，开启debug模式：发现没有问题，我们可以去掉断点，自己再增加一条，页面是不是已经自动更新了你的评论内容。 相关课程推荐配置打开courses/views.py文件，找到CourseInfoView这个函数，修改为如下：123456789101112131415161718192021# 课程章节信息class CourseInfoView(View): def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) # 取出所有选过这门课的学生 user_courses = UserCourse.objects.filter(course=course) # 取出所有选过这门课的学生的id,采用递归表达式形式 user_ids = [user_course.user.id for user_course in user_courses] # 取出刚才那些学生选过的所有的课程 all_user_courses = UserCourse.objects.filter(user_id__in=user_ids) # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式 course_ids = [all_user_course.course_id for all_user_course in all_user_courses] # 取出学过该课程用户学过的其他课程 relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5] return render(request, &quot;course-video.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;relate_courses&quot;: relate_courses, &#125;) 注意：双下划线代表代表传进来的是一个可以遍历的list。接着就是在前端页面配置动态加载信息了（记得course-video.html和course_comment.html这两个页面都需要配置，一模一样）：123456789101112&lt;ul class=&quot;other-list&quot;&gt; &#123;% for relate_course in relate_courses %&#125; &lt;li class=&quot;curr&quot;&gt; &lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot; target=&quot;_blank&quot;&gt; &lt;img src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot; alt=&quot;&#123;&#123; relate_course.name &#125;&#125;&quot;&gt; &lt;span class=&quot;name autowrap&quot;&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; 就是这个样子：然后刷新一下我们的页面，发现没有问题！ 不过还有一个问题，那就是用户如果没有登录，那是不能让他进入课程章节这个页面的，因此需要判断一下。这里因为使用的是方法型编程所以可以使用装饰器loginrequired来进行判断。 在utils文件夹下面，新建一个名为mixin_utils.py文件，在里面添加如下代码：123456789from django.contrib.auth.decorators import login_requiredfrom django.utils.decorators import method_decoratorclass LoginRequiredMixin(object): @method_decorator(login_required(login_url=&apos;/login/&apos;)) def dispatch(self, request, *args, **kwargs): return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs) 接着打开courses/views.py文件，在里面修改CourseInfoView和CourseCommentView，修改后如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748from utils.mixin_utils import LoginRequiredMixin# 课程章节信息class CourseInfoView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;redirect_to&apos; def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) # 查询用户是否已经开始学习了该课程，如果没有则开始学习 user_courses = UserCourse.objects.filter(user=request.user, course=course) if not user_courses: user_course = UserCourse(user=request.user, course=course) course.students += 1 course.save() user_course.save() # 取出所有选过这门课的学生 user_courses = UserCourse.objects.filter(course=course) # 取出所有选过这门课的学生的id,采用递归表达式形式 user_ids = [user_course.user.id for user_course in user_courses] # 取出刚才那些学生选过的所有的课程 all_user_courses = UserCourse.objects.filter(user_id__in=user_ids) # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式 course_ids = [all_user_course.course_id for all_user_course in all_user_courses] # 取出学过该课程用户学过的其他课程 relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5] return render(request, &quot;course-video.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;relate_courses&quot;: relate_courses, &#125;)# 课程评论页面class CourseCommentView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;redirect_to&apos; def get(self, request, course_id): course = Course.objects.get(id=int(course_id)) all_resources = CourseResource.objects.filter(course=course) all_comments = CourseComments.objects.all() return render(request, &quot;course-comment.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;all_comments&quot;: all_comments, &#125;) 刷新一下页面，点几个课程试试看，发现都在该同学还学过哪些课里推荐了。 课程播放页面配置老规矩，把前端资料里面的course-play.html拷贝到我们的templates文件夹里面，然后替换继承base页面，这里就不细说了，直接贴图： 打开courses/urls.py文件，新增代码：12345from .views import VideoPlayView# 视频播放页面urlre_path(&apos;video/(?P&lt;video_id&gt;.*)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),或者 re_path(&apos;video/(?P&lt;video_id&gt;\\d+)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),都是可以的 接着打开courses/views.py文件，新增代码：123456789101112131415161718192021222324252627282930313233343536from .models import Video# 视频播放页面class VideoPlayView(LoginRequiredMixin, View): login_url = &apos;/login/&apos; redirect_field_name = &apos;redirect_to&apos; def get(self, request, video_id): video = Video.objects.get(id=int(video_id)) course = video.lesson.course all_resources = CourseResource.objects.filter(course=course) # 查询用户是否已经开始学习了该课程，如果没有则开始学习 user_courses = UserCourse.objects.filter(user=request.user, course=course) if not user_courses: user_course = UserCourse(user=request.user, course=course) course.students += 1 course.save() user_course.save() # 取出所有选过这门课的学生 user_courses = UserCourse.objects.filter(course=course) # 取出所有选过这门课的学生的id,采用递归表达式形式 user_ids = [user_course.user.id for user_course in user_courses] # 取出刚才那些学生选过的所有的课程 all_user_courses = UserCourse.objects.filter(user_id__in=user_ids) # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式 course_ids = [all_user_course.course_id for all_user_course in all_user_courses] # 取出学过该课程用户学过的其他课程 relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5] return render(request, &quot;course-play.html&quot;, &#123; &quot;course&quot;: course, &quot;all_resources&quot;: all_resources, &quot;relate_courses&quot;: relate_courses, &quot;video&quot;: video, &#125;) 上面的代码和之前在课程章节信息里面定义的几乎一模一样，只是course的来源不一样。 接着打开course-video.html文件，配置跳转链接：12345678&#123;% for video in lesson.get_lesson_video %&#125; &lt;li&gt; &lt;a target=&quot;_blank&quot; href=&apos;&#123;% url &apos;course:video_play&apos; video.id %&#125;&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;) &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt; &lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; 然后打开course-video.html文件，配置视频链接，记住由于我们这边是type=’video/mp4’所以后台所添加的视频必须是.mp4结尾，否则会出错。刷新一下，发现页面跳转没有问题，显示也没有问题。 大家可以把自己的视频上传到七牛云，然后把生成的外键添加到后台即可,这里不详细介绍，直接开启传送大门：七牛云存储如何上传视频文件 至此，本篇关于课程相关页面的配置介绍就到此结束，感谢你的赏阅。 本篇笔记对应于第二十篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十九）：课程详情页配置","slug":"零基础使用Django2-0-1打造在线教育网站（十九）：课程详情页配置","date":"2018-04-13T13:04:54.000Z","updated":"2019-11-04T13:18:40.802Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（十九）：课程详情页配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/13/零基础使用Django2-0-1打造在线教育网站（十九）：课程详情页配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍课程详情页面的配置，这个页面和我们之前配置的页面差别不是很大，可以借鉴前面的配置。 本篇笔记对应于第十九篇代码，对应于github的位置是https://github.com/licheetools/eduline。 总结一下小伙伴们可能会问了，这篇笔记还没开始写怎么就开始总结了呢？是的，尽管没写但是我觉得非常有必要在这里总结一下，特别是对之前讲的信息的总结。后面随着开发进度的加快，一些东西我就不会详细介绍了，因为都是非常类似的操作。 我们现在可以理解MTV的模式就应该是这样子的：新建数据库字段(models)–&gt;配置访问路径(urls) –&gt;新建视图函数(views) –&gt; 页面信息动态加载(templates)，所以后面的操作就是这个过程，大家在学习的时候对此要有一个清醒的认识。 话不多说，我们正式进入今天的学习内容，走你。 课程列表页配置老规矩，把前端资料里面的course-list.html页面拷贝到我们的templates文件夹里面，接着配置url,在eduline/urls.py文件新增如下代码：12# 课程相关应用path配置path(&quot;course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)), 然后打开courses应用，在里面新建urls.py文件并在里面新增如下代码：123456789from django.urls import path, include, re_pathfrom .views import CourseListViewapp_name = &quot;courses&quot;urlpatterns = [ path(&apos;list/&apos;, CourseListView.as_view(), name=&apos;course_list&apos;),] 现在打开courses/views.py文件，我们添加如下代码：12345678from django.shortcuts import renderfrom django.views.generic.base import View# Create your views here.class CourseListView(View): def get(self, request): return render(request, &quot;course-list.html&quot;, &#123;&#125;) 运行一下我们的项目，在浏览器地址栏输入：http://127.0.0.1:8000/course/list/然后回车出现：![](https://upload-images.jianshu.io/upload_images/8964398-76c1aaf58130dc4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 可以发现访问没有问题，但是样式并没有加载出来。我们仔细观察course_list.html页面之后发现它和之前的org_list.html页面一样是具有共同的头部和尾部，因此我们可以继承base.html页面。 在course_list.html里面删除所有代码，新增以下代码：1234567891011121314151617&#123;% extends &apos;base.html&apos; %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;公开课列表 - 慕海学习网&#123;% endblock %&#125;&#123;% block custom_bread %&#125;&lt;section&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul class=&quot;crumbs&quot;&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;公开课&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/section&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;section&gt; &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;&#123;% endblock %&#125; 就是这个样子： 然后是回到我们的courses/views.py文件，我们修改代码如下：123456789101112from django.shortcuts import renderfrom django.views.generic.base import View# Create your views here.from .models import Courseclass CourseListView(View): def get(self, request): all_courses = Course.objects.all() return render(request, &quot;course-list.html&quot;, &#123; &quot;all_courses&quot;: all_courses, &#125;) 回到course_list.html页面，修改代码为图示信息： 分页功能配置直接仿照我们当时在org_list.html的配置，拷贝如下代码至courses/views.py文件里面：123456789101112131415from pure_pagination import Paginator, EmptyPage, PageNotAnInteger# 对课程进行分页,尝试获取前端get请求传递过来的page参数 # 如果是不合法的配置参数则默认返回第一页 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # 这里指从all_courses中取出来，每页显示9个 p = Paginator(all_courses, 9, request=request) courses = p.page(page) return render(request, &quot;course-list.html&quot;, &#123; &quot;all_courses&quot;: courses, &#125;) 接着打开course_list.html文件，修改代码为图示： 在html中注意此刻不再是all_courses，前面说过此时的all_courses已经不是一个queryset对象，而是一个purepage对象，所以应该用all_courses.object_list。 还有复制org_list的页面分页代码，并将all_orgs修改为all_courses,就是这段代码：12345678910111213141516171819202122&lt;div class=&quot;pageturn&quot;&gt; &lt;ul class=&quot;pagelist&quot;&gt; &#123;% if all_courses.has_previous %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &#123;% for page in all_courses.pages %&#125; &#123;% if page %&#125; &#123;% ifequal page all_courses.number %&#125; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endifequal %&#125; &#123;% else %&#125; &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% if all_courses.has_next %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt; 排序功能的配置和前面在org_list页面的配置一模一样，我们复制粘贴并修改一下那些代码，放到courses/views.py文件里面：1234567891011121314all_courses = Course.objects.all().order_by(&quot;-add_time&quot;) # 默认是按添加顺序反着排序# 最热门和参与人数排名 # 最热门hot根据点击数来判断 # 参与人数是根据学习人数来判断 sort = request.GET.get(&apos;sort&apos;, &apos;&apos;) if sort: if sort == &quot;students&quot;: all_courses = all_courses.order_by(&quot;-students&quot;) elif sort == &quot;hot&quot;: all_courses = all_courses.order_by(&quot;-click_nums&quot;)return render(request, &quot;course-list.html&quot;, &#123; &quot;sort&quot;: sort, &#125;) 现在打开course_list.html文件，我们将上述功能和选中状态进行配置：12345&lt;ul class=&quot;tab_header&quot;&gt; &lt;li class=&quot;&#123;% ifequal sort &apos;&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=&quot;&gt;最新 &lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;&#123;% ifequal sort &apos;hot&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=hot&quot;&gt;最热门&lt;/a&gt;&lt;/li&gt; &lt;li class=&quot;&#123;% ifequal sort &apos;students&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&quot;&gt;参与人数&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 就是这个样子： 热门课程推荐打开courses/views.py文件，新增以下代码：12345# 热门课程推荐 hot_courses = Course.objects.all().order_by(&quot;-students&quot;)[:3] return render(request, &quot;course-list.html&quot;, &#123; &quot;hot_courses&quot;: hot_courses, &#125;) 然后打开course_list.html文件，将热门课程推荐进行动态加载：运行一下我们的项目，在浏览器地址栏输入http://127.0.0.1:8000/course/list/回车，发现课程难度显示有问题：![](https://upload-images.jianshu.io/upload_images/8964398-81c3e7a2a4f9840d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 我们需要修改{ hot_course.degree }}为 { hot_course.get_degree_display }}，这个字段的意思是说得到degree的字段显示，并不是得到它本身，事实上它本身为英文。（专门针对choices的显示） 现在刷新一下我们的页面，难度等级正常显示了，没有问题： 至此课程列表页的介绍到此结束，下面我们介绍课程详情页面。 课程详情页配置老规矩，把前端资料里面的course-detail.html页面拷贝到我们的templates文件夹里面，正常情况下我们应该配置url，但是鉴于此处的course-detail.html页面会继承我们之前的course-list.html页面，所以我们就先把course-detail.html页面给配置完，然后才开始url的配置。 打开course-detail.html页面，删除所有代码，新增以下代码：12345678910111213141516171819&#123;% extends &apos;base.html&apos; %&#125;&#123;% load staticfiles %&#125;&#123;% block title %&#125;课程详情页 - 慕海学习网&#123;% endblock %&#125;&#123;% block custom_bread %&#125;&lt;section&gt; &lt;div class=&quot;wp&quot;&gt; &lt;ul class=&quot;crumbs&quot;&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt; &lt;li&gt;&#123;&#123; course.name &#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/section&gt;&#123;% endblock %&#125;&#123;% block content %&#125; &lt;section&gt; &lt;section&gt; &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;&#123;% endblock %&#125; 接着配置url,打开courses/urls.py文件并在里面新增如下代码：1234from .views import CourseDetailView # 课程机构首页url re_path(&apos;detail/(?P&lt;course_id&gt;.*)/&apos;, CourseDetailView.as_view(), name=&quot;course_detail&quot;), 现在书写我们的视图函数，打开courses/views.py文件，在里面添加如下代码：1234# 课程详情页class CourseDetailView(View): def get(self, request，course_id): # 所有re_path在请求参数的时候必须带上id return render(request, &quot;course-detail.html&quot;, &#123;&#125;) 然后配置页面的跳转链接，我们希望可以从课程列表页面跳转进来，所以打开course_list.html页面，将图中信息修改为所示信息：接下来修改我们的view(courses/views.py文件)，准备页面信息的动态加载：12345678# 课程详情页class CourseDetailView(View): def get(self, request, course_id):#注意一下此处的id是数据库表默认为我们添加的 course = Course.objects.get(id=int(course_id)) return render(request, &quot;course-detail.html&quot;, &#123; &quot;course&quot;: course, &#125;) 然后打开course_detail.html页面，使我们的数据得到动态加载并显示出来。 注意章节数和学习用户的获取方式：在courses/modles.py文件里面的Course类里面定义一个get-zj-nums方法：123def get_zj_nums(self): # 获取课程章节数 return self.lesson_set.all().count() 还有学习用户的获取方式：我们之前在operation中专门定义了一个类UserCourse用于对用户学习作记录的。既然存在了这个类（数据库生成和迁移操作之后是一张表），那我们就可以采用获取学习章节数的方式来获取它。 同样在courses/modles.py文件里面的Course类里面定义一个get-learn-users方法：123def get_learn_users(self): # 获取学习用户数，此处不用统计，我们只取出5个即可 return self.usercourse_set.all()[:5] 就是这个样子：现在打开course_detail.html页面，将信息修改为图示那样：然后去xadmin后台新增用户课程，记得把刚才展示的课程加里面去，便于我们观察是否成功显示：还有一个问题，就是你现在点进这个页面，那么相应课程的点击数应该加1，所以在我们的view(courses/views.py文件),新增以下代码：123# 课程点击数增加 course.click_nums += 1 course.save() 就是这个样子： 授课机构的配置注意教师数的获取方式：注意章节数和学习用户的获取方式：在organization/modles.py文件里面的CourseOrg类里面定义一个get_teacher_nums方法：123def get_teacher_nums(self):# 获取教师数return self.teacher_set.all().count() 然后html页面调用，采用如下代码：1&#123;&#123; course.course_org.get_teacher_nums &#125;&#125; 当然如果你不想自定义函数，那也是可以的，你仅仅只需要在前端页面采用如下代码即可,是不是更简单：1&#123;&#123; course.course_org.teacher_set.count &#125;&#125; 接下来我们完成右侧下面的相关课程推荐模块。 相关课程推荐这个就是相关课程推荐的页面，我们接下来就是完成这个功能：打开courses/views.py文件，在CourseDetailView函数里面新增用于实现相关课程推荐功能的代码：1234567891011# 相关课程推荐 # 此处为course而不是Course,我们是用前面取出的课程 tag = course.tag if tag:# 这里必须从1开始不然会推荐自己，也就是索引0 relate_courses = Course.objects.filter(tag=tag)[1:2] else: relate_courses = [] return render(request, &quot;course-detail.html&quot;, &#123; &quot;relate_courses&quot;: relate_courses, &#125;) 就是这个样子：接着在course-detail.html页面修改页面展示信息：123456789101112131415&#123;% for relate_course in relate_courses %&#125; &lt;dl&gt; &lt;dt&gt; &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt; &lt;img width=&quot;240&quot; height=&quot;220&quot; class=&quot;scrollLoading&quot; src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot;/&gt; &lt;/a&gt; &lt;/dt&gt; &lt;dd&gt; &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt; &lt;h2&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt; &lt;span class=&quot;fl&quot;&gt;学习时长：&lt;i class=&quot;key&quot;&gt;&#123;&#123; relate_course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt; &lt;/dd&gt; &lt;/dl&gt; &#123;% endfor %&#125; 就是这个样子： 然后去xadmin后台或者数据库中将几个课程的tag修改为同一个，然后再运行一下我们的项目，就出现： 现在还差页面中的收藏和开始学习这两个功能的配置了，开始学习我们在下一篇介绍。 实现收藏功能我们之前在课程机构里面配置过收藏的功能，如果不熟悉的小伙伴们可以回顾一下第十八篇：零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置，这里我就快速介绍一下：首先在course-detail.html页面底部添加如下代码：1234567891011121314151617181920212223242526272829303132333435363738&#123;% block custom_js %&#125; &lt;script type=&quot;text/javascript&quot;&gt; //收藏分享 function add_fav(current_elem, fav_id, fav_type) &#123; $.ajax(&#123; cache: false, type: &quot;POST&quot;, url: &quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;, data: &#123;&apos;fav_id&apos;: fav_id, &apos;fav_type&apos;: fav_type&#125;, async: true, beforeSend: function (xhr, settings) &#123; xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;); &#125;, success: function (data) &#123; if (data.status == &apos;fail&apos;) &#123; if (data.msg == &apos;用户未登录&apos;) &#123; window.location.href = &quot;&#123;% url &apos;login&apos; %&#125;?next=&#123;&#123; request.path &#125;&#125;&quot;; &#125; else &#123; alert(data.msg) &#125; &#125; else if (data.status == &apos;success&apos;) &#123; current_elem.text(data.msg) &#125; &#125;, &#125;); &#125; $(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function () &#123; add_fav($(this), &#123;&#123; course.id &#125;&#125;, 1); &#125;); $(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function () &#123; add_fav($(this), &#123;&#123; course.course_org.id &#125;&#125;, 2); &#125;); &lt;/script&gt;&#123;% endblock %&#125; 然后再打开course/views.py文件，补充 CourseDetailView函数：123456789101112131415161718from operation.models import UserFavorite# 是否收藏课程，默认为否 has_fav_course = False has_fav_org = False # 用户必须已登录我们才判断，否则不需要 if request.user.is_authenticated: if UserFavorite.objects.filter(user=request.user, fav_id=course.id, fav_type=1): has_fav_course = True if UserFavorite.objects.filter(user=request.user, fav_id=course.course_org.id, fav_type=2): has_fav_org = Truereturn render(request, &quot;course-detail.html&quot;, &#123; &quot;has_fav_course&quot;: has_fav_course, &quot;has_fav_org&quot;: has_fav_org, &#125;) 就是这个样子：接着打开course-detail.html页面，修改收藏的显示：123456789&lt;div class=&quot;btn colectgroupbtn&quot; id=&quot;jsLeftBtn&quot;&gt; &#123;% if has_fav_course %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125; &lt;/div&gt;&lt;div class=&quot;btn notlogin &quot;data-favid=&quot;14&quot; id=&quot;jsRightBtn&quot;&gt; &#123;% if has_fav_org %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125; &lt;/div&gt; 运行一下项目，两个都点击试试： 数据库已经有了，点击就没有了。 备注 如果出现上面两个收藏按钮点击没反应的情况，大家可以先尝试用浏览器f12（博主用的是chrome浏览器）看一下浏览器有没有post请求发出去以及参数和url的配置是否出错。如果还是有问题，那么回到base.html页面，将的位置由开头放置到底部：原来：现在： 知道为什么会出现这种情况么？那是因为jQuery 入口函数与 JavaScript 入口函数是有区别的：jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。而JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行的。这里是js还未加载完就去执行，所以才出现的问题，放在底部就没问题了。 至此本篇关于课程详情页面的配置介绍就到此结束了，感谢你的赏阅。 本篇笔记对应于第十九篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置","slug":"零基础使用Django2-0-1打造在线教育网站（十八）：机构详情页配置","date":"2018-04-13T13:02:21.000Z","updated":"2019-11-04T13:15:31.558Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（十八）：机构详情页配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/13/零基础使用Django2-0-1打造在线教育网站（十八）：机构详情页配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍机构详情页面的配置，主要包括四个部分：机构首页、机构课程、机构介绍和机构讲师，以及用户收藏的介绍下面我将逐一介绍说明。 本篇笔记对应于第十八篇代码，对应于github的位置是https://github.com/licheetools/eduline。 机构首页打开浏览器，在地址栏输入:http://127.0.0.1:8000/xadmin，往里面新增10门课程和10位讲师信息:![](https://upload-images.jianshu.io/upload_images/8964398-ebb88cd33034ae62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)新增课程信息的时候发现课程没有所属课程机构，这是不行的，因为我们后面还有机构课程这个模块，如果课程与课程机构之间没有外键来链接的话就无法实现相应的功能。所以我们需要在courses/models.py文件中，新增外键连接：123from organization.models import CourseOrgcourse_org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=&quot;课程机构&quot;, null=True, blank=True) 就是这个样子：记住我们需要在外键里面增加要求null=True, blank=True,你可能会问，为什么之前的外键不用呢？那是因为之前没有课程数据，可是现在里面已经有了一门课程（之前添加的），如果不加这个要求，系统会提示之前的那门课的外键怎么办。所以为了避免这个问题，我们就加上这个要求。 接下来进行数据库的生成和迁移操作：12makemigration coursesmigrate courses 就是这个样子： 然后继续在xadmin后台新增课程信息： 完成以后，现在将前端资料里面与org相关的四个页面拷贝到我们的templates文件夹里面： 接下来，通过观察新建org_base.html页面,将org_homepage页面全部复制过去，然后修改block： 接下来就是三部曲了：1231、页面第三行加上&#123;% load staticfiles %&#125;2、修改全部类型文件的static相对路径3、修改其中已经设置好的url，配置跳转链接 现在仿照之前的Base继承，清空org_homepage页面，往里面新增图示代码：然后删除org_base.html页面中的`和`之间的代码，就是这个样子： 接下来打开我们的organization/views.py文件，在底部新增如下代码：12345678910111213141516# 机构首页class OrgHomeView(View): def get(self, request, org_id): # 根据id来获取课程机构 course_org = CourseOrg.objects.get(id=int(org_id)) # 根据取到的课程机构直接获取它的所有课程，我们取3个 all_courses = course_org.course_set.all()[:3] # 根据取到的课程机构直接获取它的所有讲师，我们取1个 all_teachers = course_org.teacher_set.all()[:1] render(request, &quot;org-detail-homepage.html&quot;, &#123; &quot;all_courses&quot;: all_courses, &quot;all_teachers&quot;: all_teachers, &#125;) 然后配置我们的path,打开organization/urls.py文件，在底部新增如下代码：1234from .views import OrgHomeView# 课程机构首页url,此处不是普通的url是因为我们必须知道是哪个机构的首页re_path(&apos;home/(?P&lt;org_id&gt;.*)/&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;), 接着打开org_homepage页面，删除多余的课程，采用for循环来遍历数据库中的课程信息：顺便修改其中的课程信息：1234567891011121314151617&#123;% for course in all_courses %&#125; &lt;div class=&quot;module1_5 box&quot;&gt;&lt;a href=&quot;course-detail.html&quot;&gt;&lt;img width=&quot;214&quot; src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course.image &#125;&#125;&quot;/&gt;&lt;/a&gt; &lt;div class=&quot;des&quot;&gt; &lt;a href=&quot;course-detail.html&quot;&gt;&lt;h2&gt;&#123;&#123; course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt; &lt;span class=&quot;fl&quot;&gt;课时：&lt;i class=&quot;key&quot;&gt;&#123;&#123; course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt; &lt;span class=&quot;fr&quot;&gt;参加人数：&#123;&#123; course.students &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;bottom&quot;&gt; &lt;span class=&quot;fl&quot;&gt;&#123;&#123; course.course_org.name &#125;&#125;&lt;/span&gt; &lt;span class=&quot;star fr notlogin &quot; data-favid=&quot;13&quot; data-fav-type=&quot;4&quot;&gt; &#123;&#123; course.fav_nums &#125;&#125; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endfor %&#125; 然后三部曲走一下，这里就不详细说明了。 接着打开org_list页面，配置跳转链接： 修改如下：1&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; course_org.id %&#125;&quot;&gt; 记住因为之前我们的org_home配置的不是普通的path,所以你如果写成普通的:1&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; %&#125;&quot;&gt; 那是会报错的，我们需要在此后空一格，然后带上我们在path中定义的id,因为是跳转到课程机构首页，所以写上它的id。 然后运行一下我们的项目：发现课程机构显示不同步，那我们把刚才获取到的数据返回到页面显示一下： 那我们就打开我们的organization/views.py文件，在底部修改为如下代码：1234567891011121314151617# 机构首页class OrgHomeView(View): def get(self, request, org_id): # 根据id来获取课程机构 course_org = CourseOrg.objects.get(id=int(org_id)) # 根据取到的课程机构直接获取它的所有课程，我们取3个 all_courses = course_org.course_set.all()[:3] # 根据取到的课程机构直接获取它的所有讲师，我们取1个 all_teachers = course_org.teacher_set.all()[:1] render(request, &quot;org-detail-homepage.html&quot;, &#123; &quot;all_courses&quot;: all_courses, &quot;all_teachers&quot;: all_teachers, &quot;course_org&quot;: course_org, &#125;) 接着返回org_base页面,我们修改如下代码： 这里的数据会向上传递，所以后面的那些org页面都是可以用到的。完成以后就是这个样子：接着运行一下我们的项目，发现显示没有问题： 下面继续完成它的其余两个：机构教师和机构介绍。机构教师：打开org_homepage页面，将信息修改成图示：机构介绍：还是在org_homepage页面，将信息修改成图示：接着运行一下我们的项目，发现显示没有问题。 至此，第一个机构首页的信息就全部配置完全了，其余几个很类似，所以介绍的就比较快了，当做复习一下。 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，本篇关于机构详情页面的配置以及用户收藏的介绍就到此为止了，感谢你的赏阅。 本篇笔记对应于第十八篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十七）：我要学习配置","slug":"零基础使用Django2-0-1打造在线教育网站（十七）：我要学习配置","date":"2018-04-13T12:59:07.000Z","updated":"2019-11-04T13:19:39.640Z","comments":true,"path":"2018/04/13/零基础使用Django2-0-1打造在线教育网站（十七）：我要学习配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/13/零基础使用Django2-0-1打造在线教育网站（十七）：我要学习配置/","excerpt":"","text":"写在前面本篇笔记我们将介绍我要学习小页面的配置，为什么需要单独介绍，是因为这个和其他页面的耦合度不是很高，单独写一篇便于今后学习的需要。 本篇笔记对应于第十七篇代码，对应于github的位置是https://github.com/licheetools/eduline。 配置我要学习这就是我要学习的页面，它是通过Ajax来控制的，也就是异步的javascript和xml。它可以在保证当前页面不被重新刷新的条件下，提交表单向后台传送数据。正如你在前面所学习的那样，但凡涉及到了表单的提交都会有一个form验证。我们仿照前面的逻辑在operation应用下面新建一个forms.py文件，用于此处表单的验证。 然后在里面添加如下代码：12345678from django import formsclass UserAskForm(forms.Form): name = forms.CharField(required=True, min_length=2, max_length=20) mobile = forms.CharField(required=True, min_length=11, max_length=11) course_name = forms.CharField(required=True, min_length=5, max_length=50) 就是这个样子：接着打开operation/models.py文件,发现这两个函数定义的字段信息非常相似，连要求都是一样的：那么我们就有一个疑问，如何让代码重复利用，不需要再次重新造轮子呢？我们可以利用Django自带的ModelForm,这比form强大多了，除了继承现有的字段还可以新增字段！新增代码如下：1234567# 进阶版的函数class AnotherUserAskForm(forms.ModelForm): # 除了继承现有的字段还可以新增字段 class Meta: model = UserAsk # 自定义需要验证的字段 fields = [&quot;name&quot;, &quot;mobile&quot;, &quot;course_name&quot;] 就是这个样子： 接下来的一步就是path的配置了，现在有一个疑问，就是我们的项目url文件，已经存放了很多url，如果我们再往里面新增url就很容易造成管理上的混乱： 我们在思考能不能像高考考场一样，有许多分考场，学生在各个分考场的试卷会送到省里，在保证考试有效的情况下，避免人员来往市区的麻烦。Django里面其实也是有的，所以我们就采用include的机制，来达到这个目的：在保证path的有效情况下，将各个app应用的path分开放置，最后将app的path引入项目的path就可以了。下面我们开始在organization应用下面，新建urls.py文件，里面增加如下代码：12345678from django.urls import path, include, re_pathfrom .views import OrgViewurlpatterns = [ # 课程机构列表页url path(&quot;list/&quot;, OrgView.as_view(), name=&quot;org_list&quot;),] 然后回到我们的eduline/urls.py文件，我们将刚才的那行path用下面的一行include代码替换掉：1234567### 继续Ajax配置前面说到我要学习的页面，它是通过Ajax来控制的，是一种异步加载方式，所以我们此时不能在view里面直接render一个页面回来，应该是给前端返回json数据，而不是页面。这里我们就要用到HttpResponse这个类，它指明了给用户返回哪种类型的数据。打开organization/views.py文件，在里面添加如下代码： from operation.forms import AnotherUserAskForm 我要学习功能实现class AddUserAskView(View): def post(self, request): userask_form = AnotherUserAskForm(request.POST) # 判断form是否有效 if userask_form.is_valid(): # 注意modelform和form的区别，modelform它有model的属性，而且有个参数commit，当它为真时会把数据存入到数据库 user_ask = userask_form.save(commit=True) # 如果保存成功,则返回json,不过后面必须有content_type用于告诉浏览器返回的类型 return HttpResponse(&quot;{&apos;status&apos;: &apos;success&apos;}&quot;, content_type=&apos;application/json&apos;) else: # 如果保存失败，则返回json,并将form的错误信息通过msg传递到前端进行显示 return HttpResponse(&quot;{&apos;status&apos;: &apos;fail&apos;, &apos;msg&apos;:{0}}&quot;.format(userask_form.errors), content_type=&apos;application/json&apos;) 12345678*******由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！*******打开我们的operation/forms.py文件，里面加上如下代码： import re 验证手机号码是否合法def clean_mobile(self): mobile = self.cleaned_data[&quot;mobile&quot;] REGEX_MOBILE = &quot;^1[358]\\d{9}$|^147\\d{8}$|^176\\d{8}$&quot; p = re.compile(REGEX_MOBILE) if p.match(mobile): return mobile else: raise forms.ValidationError(&quot;手机号码非法&quot;, code=&quot;mobile_invalid&quot;) `关于正则表达式的用法，大家可以关注我的另一个专题《趣玩Python爬虫》，我目前在筹划中，预计9月份就会更新了。 接下来你可以重复刚才的测试操作，看手机号码验证是否生效了，这里就不一一演示了。 至此，我们关于我要学习的小页面的配置就到此为止了，感谢你的赏阅。下一篇笔记，我们就介绍课程机构的详情页面的配置了。 本篇笔记对应于第十七篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十六）：列表分页功能","slug":"零基础使用Django2-0-1打造在线教育网站（十六）：列表分页功能","date":"2018-04-12T12:49:21.000Z","updated":"2019-11-04T13:18:57.510Z","comments":true,"path":"2018/04/12/零基础使用Django2-0-1打造在线教育网站（十六）：列表分页功能/","link":"","permalink":"http://blog.licheetools.top/2018/04/12/零基础使用Django2-0-1打造在线教育网站（十六）：列表分页功能/","excerpt":"","text":"写在前面本篇笔记我们将介绍列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的实现。 本篇笔记对应于第十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。 列表分页各位小伙伴们看下面的图片，这就是列表分页，怎么样是不是觉得很简单，其实它挺复杂的，下面介绍如何实现这个功能： 我们是通过django-pure-pagination这个库来实现的，所以首先进入到我们的虚拟环境，安装这个库：12345678910111213C:\\Users\\YC&gt;F:F:\\&gt;cd envsF:\\Envs&gt;cd edulineF:\\Envs\\eduline&gt;workon eduline(eduline) F:\\Envs\\eduline&gt;pip install django-pure-pagination -i https://pypi.tuna.tsinghua.edu.cn/simpleCollecting django-pure-paginationInstalling collected packages: django-pure-paginationSuccessfully installed django-pure-pagination-0.3.0(eduline) F:\\Envs\\eduline&gt; 然后去settings.py文件里，注册这个app:1&apos;pure_pagination&apos;, 接下来点击github上的项目地址django-pure-pagination，然后下拉至settings：我们看一下可设置的参数：123456PAGINATION_SETTINGS = &#123; &apos;PAGE_RANGE_DISPLAYED&apos;: 10, &apos;MARGIN_PAGES_DISPLAYED&apos;: 2, &apos;SHOW_FIRST_PAGE_WHEN_INVALID&apos;: True,&#125; 解释一下上面参数的意义：123PAGE_RANGE_DISPLAYED: 表示总共会显示多少个页数。(包括省略号，两边和中间)MARGIN_PAGES_DISPLAYED: 表示旁边会显示多少个。SHOW_FIRST_PAGE_WHEN_INVALID: 表示当输入页数不合法是否要跳到第一页 我们继续下拉，看一下官方给的例子：1234567891011121314151617181920212223# views.pyfrom django.shortcuts import render_to_responsefrom pure_pagination import Paginator, EmptyPage, PageNotAnIntegerdef index(request): # 尝试获取页数参数 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # objects是取到的数据 objects = [&apos;john&apos;, &apos;edward&apos;, &apos;josh&apos;, &apos;frank&apos;] # 对取到的数据进行分页 p = Paginator(objects, request=request) # 此时前台显示的就是我们此前获取的第几页的数据 people = p.page(page) return render_to_response(&apos;index.html&apos;, &#123; &apos;people&apos;: people, &#125; 我们尝试对照实现：1234567891011121314151617181920212223242526# 课程机构列表功能class OrgView(View): def get(self, request): # 查找所有的城市信息 all_citys = CityDict.objects.all() # 查找所有的课程机构信息 all_orgs = CourseOrg.objects.all() # 统计课程机构的数量 org_nums = all_orgs.count() # 对课程机构进行分页,尝试获取前端get请求传递过来的page参数 # 如果是不合法的配置参数则默认返回第一页 try: page = request.GET.get(&apos;page&apos;, 1) except PageNotAnInteger: page = 1 # 这里指从all_org中取五个出来，每页显示6个,这个字段必填 p = Paginator(all_orgs, 6, request=request) orgs = p.page(page) return render(request, &quot;org-list.html&quot;, &#123; &quot;all_citys&quot;: all_citys, &quot;all_orgs&quot;: orgs, &quot;org_nums&quot;: org_nums, &#125;) 继续看我们的官方文档：我们知道，因为我们返回给后端的是QueryDict，所以在前端页面可以使用for循环进行遍历显示，但是这里的orgs却不一定可以，查看文档，果真不能那样遍历，而是遍历其object_list,这一点很容易出错，需要格外注意。我们在前端页面配置如下：1&#123;% for course_org in all_orgs.object_list %&#125; 也就是这个地方：现在考虑如何在前端页面显示分页：如果使用默认的render:前端页面配置如下：运行项目结果： 这有点丑，所以我们还是自定义html页面的代码吧！怎么定义呢，还是查阅官方文档吧！ 往下拉，可以看到这段代码，这就是官方文档告诉我们如何自定义分页样式的：123456789101112131415161718192021222324&#123;% load i18n %&#125;&lt;div class=&quot;pagination&quot;&gt; &#123;% if page_obj.has_previous %&#125; &lt;a href=&quot;?&#123;&#123; page_obj.previous_page_number.querystring &#125;&#125;&quot; class=&quot;prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/a&gt; &#123;% else %&#125; &lt;span class=&quot;disabled prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/span&gt; &#123;% endif %&#125; &#123;% for page in page_obj.pages %&#125; &#123;% if page %&#125; &#123;% ifequal page page_obj.number %&#125; &lt;span class=&quot;current page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/span&gt; &#123;% else %&#125; &lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot; class=&quot;page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt; &#123;% endifequal %&#125; &#123;% else %&#125; ... &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% if page_obj.has_next %&#125; &lt;a href=&quot;?&#123;&#123; page_obj.next_page_number.querystring &#125;&#125;&quot; class=&quot;next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/a&gt; &#123;% else %&#125; &lt;span class=&quot;disabled next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/span&gt; &#123;% endif %&#125;&lt;/div&gt; 注意：这里面的page_obj其实就是我们的all_orgs！ 下面我们继续尝试对照实现，打开org-list.html页面，找到对应位置，复制官方文档内容，然后进行替换（代码格式化ctrl+alt+L）：123456789101112131415161718192021&lt;div class=&quot;pageturn&quot;&gt; &lt;ul class=&quot;pagelist&quot;&gt; &#123;% if all_orgs.has_previous %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% for page in all_orgs.pages %&#125; &#123;% if page %&#125; &#123;% ifequal page all_orgs.number %&#125; &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endifequal %&#125; &#123;% else %&#125; &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &#123;% endfor %&#125; &#123;% if all_orgs.has_next %&#125; &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt; 就是这个样子：刷新一下我们的页面，出现了分页： 因为只有10个课程机构，每页只显示6个所以最多只有2页！ 城市分类的筛选首先打开我们的organization/views.py文件，在里面添加如下数据：12345678city_id = request.GET.get(&apos;city&apos;, &apos;&apos;) # 选中了某个城市之后，根据城市Id与数据库中的city_id进行判断（外键city在数据库中名为city_id且为字符串类型） if city_id: all_orgs = all_orgs.filter(city_id=int(city_id))return render(request, &quot;org-list.html&quot;, &#123; &quot;city_id&quot;: city_id, &#125;) 就是这个样子：然后打开org-list.html页面，我们需要回传我们的city_id并加以显示出来：123456&lt;div class=&quot;cont&quot;&gt; &lt;a href=&quot;?ct=&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt; # 判断是否选择城市，如果没有则显示全部，并显示加绿状态 &#123;% for city in all_citys %&#125; &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt; # 判断是否选择城市并显示加绿状态 &#123;% endfor %&#125;&lt;/div&gt; 解释一下这行代码的意思：1class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot; 这行代码的意思是说，如果所选城市的city_id与数据库中的city_id（其实就是city,不过在数据库中自动变成了字符串类型的city_id）相等，就是选择了当前城市，并且为加绿状态。city.id|stringformat:&quot;i&quot;就是把数据库中的字符串类型的city_id转换成整型值并加以比对，此处city.id中的id对象其实就是刚才转换成的整型值！ 变成了这个样子： 你可以刷新一下页面后，切换几个城市试试看，没有问题的！接下来我们仿照上面的操作，对机构的类别也进行一下分类筛选。 机构类别的筛选首先打开我们的organization/views.py文件，在里面添加如下数据：12345678910# 机构类别的筛选# ct是我们前端页面用于判断机构类别用的category = request.GET.get(&apos;ct&apos;, &apos;&apos;)# 选中了类别之后，根据category与数据库中的category进行判断，从而显示授课机构 if category: all_orgs = all_orgs.filter(category=category)return render(request, &quot;org-list.html&quot;, &#123; &quot;category&quot;: category, &#125;) 就是这个样子：然后打开org-list.html页面，我们需要回传我们的category并加以显示出来：12345678&lt;div class=&quot;cont&quot;&gt;&lt;a href=&quot;?city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;?ct=pxjg&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=gx&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=gr&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;&lt;/div&gt; 也就是这个样子：然后去数据库里修改几个课程机构的类别，便于我们后续的进行：不过这样还是不行的，我们需要对城市信息与机构分类进行联动，也就是说可以进行二次选择，可以选择所有在北京市的培训机构，而不是只能显示全北京市的机构（包括培训机构，个人和高校），下面我们在org-list.html页面进行修改代码：1234567891011121314151617 &lt;a href=&quot;?city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=pxjg&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;?ct=gx&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;?ct=gr&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;spanclass=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt; &#123;% for city in all_citys %&#125; &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&amp;ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt; &#123;% endfor %&#125; 也就是这个样子：我们刷新一下我们的页面，可以发现已经可以联动了：不过右边的机构数量统计错了，我们刚才统计机构数目过早，应该移到后面，在已经筛选过后，才能开始统计，所以只需要把刚才用于统计的那行代码挪到筛选代码的后面即可：12# 统计课程机构的数量org_nums = all_orgs.count() 就是这样：再来刷新一下我们的页面，发现课程机构数量统计没有问题！ 授课机构排名授课机构排名就是图片中右边的那个，我们根据课程机构的点击数来进行排名： 首先打开我们的organization/views.py文件，在里面添加如下数据：12# 授课机构的排名 hot_orgs = all_orgs.order_by(&quot;click_nums&quot;)[:3] # 返回的是一个QueryDict我们取前三个 然后我们在org-list.html页面进行修改代码：12345678910111213&lt;div class=&quot;right companyrank layout&quot;&gt; &lt;div class=&quot;head&quot;&gt;授课机构排名&lt;/div&gt; &#123;% for current_org in hot_orgs %&#125; &lt;dl class=&quot;des&quot;&gt; &lt;dt class=&quot;num fl&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/dt&gt; &lt;dd&gt; &lt;a href=&quot;/company/2/&quot;&gt;&lt;h1&gt;&#123;&#123; current_org.name &#125;&#125;&lt;/h1&gt;&lt;/a&gt; &lt;p&gt;&#123;&#123; current_org.address &#125;&#125;&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &#123;% endfor %&#125; &lt;/div&gt; 其中是Django内置的用于统计循环变量循环到第几次的次数。 完成以后，我们再来刷新一下我们的页面，发现授课机构排名没有问题！ 学习人数和课程人数排名其实这个功能和前面介绍的几个功能很相似，这里就简单介绍一下(步骤和前面的类似) 首先打开我们的organization/views.py文件，在里面添加如下数据：1234567891011 # 学习人数和课程人数排名 sort = request.GET.get(&apos;sort&apos;, &apos;&apos;) if sort: if sort == &quot;students&quot;: all_orgs = all_orgs.order_by(&quot;-students&quot;) elif sort == &quot;courses&quot;: all_orgs = all_orgs.order_by(&quot;-course_nums&quot;)return render(request, &quot;org-list.html&quot;, &#123; &quot;sort&quot;: sort, &#125;) 然后我们在org-list.html页面进行修改代码：12345&lt;ul class=&quot;tab_header&quot;&gt;&lt;li class=&quot;&#123;% if sort == &apos;&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;全部&lt;/a&gt; &lt;/li&gt;&lt;li class=&quot;&#123;% if sort == &apos;students&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;学习人数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;&#123;% if sort == &apos;courses&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=courses&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;课程数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; sort=students&amp;ct=&amp;city=和sort=courses&amp;ct=&amp;city=也是为了和前面的保持联动状态。 完成以后刷新一下我们的页面，看上面的各个功能是不是都实现了。 至此本篇关于列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的介绍就到此为止了，感谢你的赏阅。 本篇笔记对应于第十六篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十五）：模板继承应用","slug":"零基础使用Django2-0-1打造在线教育网站（十五）：模板继承应用","date":"2018-04-12T12:46:27.000Z","updated":"2019-11-04T13:20:33.136Z","comments":true,"path":"2018/04/12/零基础使用Django2-0-1打造在线教育网站（十五）：模板继承应用/","link":"","permalink":"http://blog.licheetools.top/2018/04/12/零基础使用Django2-0-1打造在线教育网站（十五）：模板继承应用/","excerpt":"","text":"写在前面本篇笔记我们将开始进入课程机构前端页面的配置，你会了解到模板继承，城市筛选，数量统计等功能的实现。 本篇笔记对应于第十五篇代码，对应于github的位置是https://github.com/licheetools/eduline。 模板继承通过观察，我们发现很多页面都是有相同的结构，例如header和footer都是一样的，我们是不是可以考虑单独给它们分别放在2个HTML页面里面，然后当需要用到的时候，可以include进来，这就是早期的模板继承原理。不过这个只能用于那些页面是固定的内容，也就是说如果要根据自己的想法随意对include进来的页面进行修改这是不可能的。鉴于此，人们在吸收了挖坑填坑的思想之后，提出了一种新的方法：子本继承父本，将需要修改的地方挖坑，然后采用不同的方式来填坑，这样就解决了这个问题（类似于子类继承父类的方法）。这就是模板继承的原理！ 新建父本base.html页面在templates文件夹中新建base.html，同时将前端页面org-list.html拷贝到我们的templates里面，然后把org-list.html的全部内容复制粘贴到base.html页面中来，然后收起标签，成了下面这个样子： 然后配置静态的文件相对路径，只需要修改图中的即可： 开始定义父本挖坑操作1、每个org-list网页的标题会发生变化，所以修改如下：1&lt;title&gt;&#123;% block title%&#125;课程机构列表 - 慕海学习网&#123;% endblock %&#125;&lt;/title&gt; 2、每个页面都具有公共的js和css，但又具有各自特殊的js和css,所以修改如下：123&#123;% block custom_css %&#125;&#123;% endblock %&#125; &#123;% block custom_js %&#125;&#123;% endblock %&#125; 公共的js和css都不变，允许自定义样式,12步就是这个样子：3、面包屑和内容的修改如下：至此，我们的base.html的配置就差不多完成了，接下来是对它的引用！ 非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 总结一下页面的继承关系可以让我们直接使用变量，比如user中的表单数据传递到register页面当中（register页面继承了base页面）那么你在base页面当中也是可以使用这些数据的。这就是参数的向上传递！ 课程机构列表页面数据显示通过观察页面，我们确定哪些数据是动态的，哪些是静态的，动态的需要从后台来显示，静态的可以通过HTML代码直接实现：（红色为动态，蓝色为静态） 登录xadmin后台管理系统，新增10个城市信息，10门课程信息数据：在新建课程信息之前，我们需要配置文件的上传路径，打开eduline/settings.py文件，在里面加入：123# 设置我们上传文件的路径MEDIA_URL = &apos;/media/&apos;MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;) 然后在主目录下新建media文件夹，用于存放上传文件： 完成上面2步之后就可以增加10门课程信息数据了： 查看media 文件夹，里面10张图片，就是10个课程机构的logo:然后继续完善我们的organization/views.py文件：12345678910111213from .models import CityDict, CourseOrg# 课程机构列表功能class OrgView(View): def get(self, request): # 查找所有的城市信息 all_citys = CityDict.objects.all() # 查找所有的课程机构信息 all_orgs = CourseOrg.objects.all() return render(request, &quot;org-list.html&quot;, &#123; &quot;all_citys&quot;: all_citys, &quot;all_orgs&quot;: all_orgs &#125;) 现在是回填动态的城市信息：在org_list页面，找到如下代码：我们使用Django自带的for循环来从刚才获取到的城市信息中回填城市，并显示出来,修改代码如下：123&#123;% for city in all_citys %&#125; &lt;a href=&quot;?city=1&amp;ct=&quot;&gt;&lt;span class=&quot;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;&#123;% endfor %&#125; 就是下面这个样子：运行一下我们的项目：现在城市就是动态的信息了，不再是被前端人员写死的页面了。同理我们现在把课程信息也给显示出来：通过折叠代码分析发现，每一个des 就是一个课程，所以我们继续刚才的操作，把多余的删掉，保留一个：12345&#123;% for course_org in all_orgs %&#125; &lt;dl class=&quot;des difdes&quot;&gt; &lt;/dl&gt; &#123;% endfor %&#125; 接下来对&lt;dl class=&quot;des difdes&quot;&gt; &lt;/dl&gt;里面的内容进行分析：我们尝试利用对象的属性来获取图片的地址，也就是这样：1data-url=&quot;&#123;&#123; course_org.image &#125;&#125;&quot; 对，正如你想的那样，这其实获得只是图片的相对路径，系统根本找不到我们前面定义的路径。而且我们在数据库中的图片地址其实是字符串类型，也更加证明了这一点：因此，我们需要补全地址，变成下面这个样子：1data-url=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course_org.image &#125;&#125;&quot; 不过这样还不够，我们需要配置图片处理器,打开eduline/settings.py文件，找到TEMPLATES，在后面添加一行：12# 图片处理器，可以使&#123;&#123; MEDIA_URL &#125;&#125;产生作用 &apos;django.template.context_processors.media&apos;, 就是这个样子：然后刷新一下我们的页面，发现图片还是没有加载出来，那是因为path中没有处理图片相应路径的url，我们需要配置一下：12345from django.views.static import servefrom eduline.settings import MEDIA_ROOT # 配置文件上传的访问处理url re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT &#125;), 然后再来刷新一下:成功了！ 接下来，我们来统计课程机构的数量，打开organization/views.py文件，我们修改如下：1234567891011121314# 课程机构列表功能class OrgView(View): def get(self, request): # 查找所有的城市信息 all_citys = CityDict.objects.all() # 查找所有的课程机构信息 all_orgs = CourseOrg.objects.all() # 统计课程机构的数量 org_nums = all_orgs.count() return render(request, &quot;org-list.html&quot;, &#123; &quot;all_citys&quot;: all_citys, &quot;all_orgs&quot;: all_orgs, &quot;org_nums&quot;: org_nums &#125;) 然后在org_list页面找到共的位置，填写这个变量：至此，本篇关于模板继承，城市筛选，数量统计等功能的实现就介绍到这里，感谢你的赏阅。 本篇笔记对应于第十五篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十四）：用户密码找回","slug":"零基础使用Django2-0-1打造在线教育网站（十四）：用户密码找回","date":"2018-04-11T12:44:30.000Z","updated":"2019-11-04T13:20:23.624Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十四）：用户密码找回/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十四）：用户密码找回/","excerpt":"","text":"写在前面本篇笔记我们将实现用户的激活，用户密码找回，重置密码，修改密码等功能，前面所介绍的知识大家没事可以复习一下，加深对知识的理解和应用，后面很多东西就是前面讲过的知识的应用。 本篇笔记对应于第十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。 用户激活的操作打开我们的Navicat，去数据库中找到我们的用户信息表：这里面有个字段is_active，它是用来判别用户是否激活的，默认是未激活也就是0，这里都是1肯定是不行的，所以我们需要定义激活用户的函数，来完成用户的激活操作。 先配置一下路径path，打开eduline/urls.py文件，在里面添加一行代码:123456from django.urls import re_pathfrom users.views import ActiveUserView #ActiveUserView目前未定义，后面马上定义# 激活用户urlre_path(&apos;active/(?P&lt;active_code&gt;.*)/&apos;, ActiveUserView.as_view(), name=&quot;user_active&quot;) &#39;active/(?P&lt;active_code&gt;.*)/&#39;是正则表达式模式，用于匹配验证码！ 打开users/views.py文件，我们设置默认未激活：12# 默认激活状态为False，也就是未激活user_profile.is_active = False 并且在下面新增代码：123456789101112131415161718from .models import EmailVerifyRecord# 用于实现用户激活操作的函数class ActiveUserView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 user = UserProfile.objects.filter(email=email) user.is_active = True #激活用户 user.save() # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;) 现在回到我们的LoginView函数，我们当时没有判断用户是否激活，现在需要判断，修改代码如下：1234567891011if user is not None: if user.is_active: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;index.html&quot;) else: return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;) else: # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) 将数据表中的licheetools@sina.cn 用户的is_active修改为0，我们来测试一下，在图中所示位置打上断点，开始调试：我们的用户测试激活调试没有问题，再来看一下验证码激活：我们去新浪邮箱，将获取到的链接访问一下：1请点击下面的链接激活你的账号: http://127.0.0.1:8000/active/HekaM6EfZfeKy1Zc 按图示来测试一下，也没有问题！ 至此，我们完成了邮箱验证码的激活以及用户的激活。 不过我们还有两个问题，一个就是前面没有判断邮箱是否已经存在，我们不能用旧的邮箱来注册，所以我们需要配置一下，打开users/views.py文件，修改代码如下：123456789101112131415161718192021222324def post(self, request): # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息 register_form = RegisterForm(request.POST) if register_form.is_valid(): user_name = request.POST.get(&quot;email&quot;, &quot;&quot;) if UserProfile.objects.filter(email=user_name): # register_form回填信息必须有，msg是信息提示 return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;) else: # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;) # 实例化一个user_profile对象，存入前端页面获取的值 user_profile = UserProfile() user_profile.username = user_name user_profile.email = user_name # 默认激活状态为False，也就是未激活 user_profile.is_active = False # 对password进行加密并保存 user_profile.password = make_password(pass_word) user_profile.save() send_register_eamil(user_name, &apos;register&apos;) pass 另一个就是我们对于链接的处理不够完善，正如你所了解的那样，链接肯定有有效时间，在这个规定的时间内点击才有用，过了规定时间就没有用，所以我们需要新建一个链接超时的html文件：新建active_fail.html文件，里面就几行代码：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;链接失效&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;对不起，链接失效了&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 然后我们来users/views.py文件，修改一下激活的代码：1234567891011121314151617# 用于实现用户激活操作的函数class ActiveUserView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 user = UserProfile.objects.filter(email=email) user.is_active = True user.save() else: return render(request, &quot;active_fail.html&quot;) # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;) 按照图示打上断点并开始调试：调试没有问题！ 好，解决了上面两个问题之后，下面我们来进行忘记密码，找回密码的操作。 忘记密码的操作拷贝forgetpwd页面将forgetpwd.html页面拷贝到我们的templates文件夹里面： 定义（忘记）找回密码的视图打开users/views.py文件，在里面添加如下代码：1234# 用于实现用户忘记码（找回密码）的函数class ForgetPwdView(View): def get(self, request): return render(request, &quot;forgetpwd.html&quot;, &#123;&#125;) 然后在eduline/urls.py文件里面配置url信息：1234from users.views import ForgetPwdView# 找回密码url，注意是普通的urlpath(&quot;forget/&quot;, ForgetPwdView.as_view(), name=&quot;forget_pwd&quot;), 接下来配置跳转路径，首先ctrl+F 搜索login.html,找到忘记密码，修改href属性：1&lt;a class=&quot;fr&quot; href=&quot;forgetpwd.html&quot;&gt;忘记密码？&lt;/a&gt; 修改为：1&lt;a class=&quot;fr&quot; href=&quot;&#123;% url &apos;forget_pwd&apos; %&#125;&quot;&gt;忘记密码？&lt;/a&gt; 注意外部有双引号，里面就只能使用单引号。 接着继续修改forgetpwd.html页面的跳转链接，一样的操作，这里就不演示了！ 现在运行一下我们的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/forget/，出现了：![](https://upload-images.jianshu.io/upload_images/8964398-37f7bdbd37ebfc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现：1231、页面第三行加上&#123;% load staticfiles %&#125;2、修改全部类型文件的static相对路径3、修改其中的url，配置跳转链接 配置完刷新一下页面：这个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：1234# 用户找回密码时的表单，注意字段与前端页面保持一致class ForgetForm(forms.Form): email = forms.CharField(required=True) # 用户名不能为空 captcha = CaptchaField(error_messages=&#123;&quot;invalid&quot;: &quot;验证码错误&quot;&#125;) 接着回到我们的views.py文件，继续完善ForgetPwdView：1234567from users.forms import ForgetForm# 用于实现用户忘记码（找回密码）的函数class ForgetPwdView(View): def get(self, request): forget_form = ForgetForm() return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;) 然后回到我们的forgetpwd.html页面，我们删除captcha那一行，并修改为： 1234&lt;div class=&quot;form-group captcha1 marb38&quot;&gt; &lt;label&gt;验&amp;nbsp;证&amp;nbsp;码&lt;/label&gt; &#123;&#123; forget_form.captcha &#125;&#125; &lt;/div&gt; 我们再来刷新一下我们的页面：页面正常显示了！ 既然我们是找回密码，那么我们肯定需要发送邮件，我们前面新建了发送失败的html页面，那我们肯定也需要新建一个发送成功的html页面吧,新建send_success.html文件：里面添加如下代码：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;邮件发送成功&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;邮件已发送，请注意查收！&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 还是回到我们的views.py文件，继续完善ForgetPwdView的post方法：123456789101112131415# 用于实现用户忘记码（找回密码）的函数class ForgetPwdView(View): def get(self, request): forget_form = ForgetForm() return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;) def post(self, request): forget_form = ForgetForm(request.POST) if forget_form.is_valid(): email = request.POST.get(&apos;email&apos;, &apos;&apos;) # 发送找回密码的邮件 send_register_eamil(email, &apos;forget&apos;) return render(request, &apos;send_success.html&apos;) else: return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;) 再回到前端页面，看看这些是不是都修改完了：还有页面的提示信息也要修改（参考前面的介绍）： 至此，我们密码找回就已经完成了，我们来测试一下： 测试成功了！ 下面完成重置密码和修改密码的操作！ 重置密码的操作拷贝password_reset.html页面将password_reset.html页面拷贝到我们的templates文件夹里面： 定义重置密码的视图打开users/views.py文件，在里面添加如下代码：123456789101112131415# 用于实现用户重置密码的函数class ResetView(View): def get(self, request, active_code): # 用于查询邮箱验证码是否存在 all_record = EmailVerifyRecord.objects.filter(code=active_code) if all_record: for record in all_record: # 获取到对应的邮箱 email = record.email # 查找到邮箱对应的用户 return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email&#125;) # 告诉页面是哪个用户在重置密码 else: return render(request, &quot;active_fail.html&quot;) # 激活成功跳转到登录页面 return render(request, &quot;login.html&quot;) 然后在eduline/urls.py文件里面配置url信息：1234from users.views import ResetView # 密码重置url re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;), 接下来我们在页面隐式回填刚才的email，在password_reset.html页面，添加下面一行代码：1&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;&#123;&#123; email &#125;&#125;&quot;&gt; 就是这个样子： 现在调试一下我们的项目，在图示位置打上断点： 接着我们登录新浪邮箱（前面是QQ邮箱就用QQ邮箱），查找我们的之前的重置密码邮件： 接着将重置密码链接复制到浏览器地址栏打开，页面进入到Pycharm出现了： 然后step out结束： 还记得我们刚才在里面加的那个input么，它的作用是告知页面哪个用户此时此刻正在重置密码，我们点击查看网页源代码，看是不是input起了作用：看到没有，确实起了作用，不过我们除非查看了源码，否则是看不到的！ 不过样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现：1231、页面第三行加上&#123;% load staticfiles %&#125;2、修改全部类型文件的static相对路径3、修改其中的url，配置跳转链接 配置完以后我们刷新页面会出错，这是正常现象，因为我们在url跳转时缺少参数，这个先放在这里（如果你为了不影响心情，可以不刷新页面）！ 刚才那个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：1234# 用户修改密码时的表单，注意字段与前端页面保持一致class ModifyPwdForm(forms.Form): password1 = forms.CharField(required=True, min_length=5) # 新密码不能为空 password2 = forms.CharField(required=True, min_length=5) # 确认密码不能为空 记得与前端页面字段一致： 接着回到我们的views.py文件，继续完善ResetView：1234567891011121314151617181920212223from users.forms import ModifyPwdForm def post(self, request): modify_form = ModifyPwdForm(request.POST) if modify_form.is_valid(): pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;) pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;) email = request.POST.get(&quot;email&quot;, &apos;&apos;) # 如果前后两次密码不相等，那么回填信息并返回错误提示 if pwd1 != pwd2: return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;) # 如果前后两次密码相等，那么进入我们的密码修改保存 # 取出用户信息 user = UserProfile.objects.get(email=email) # 随意取出一个密码并将其进行加密 user.password = make_password(pwd1) # 将更新后的用户信息保存到数据库里面 user.save() # 密码重置成功以后，跳转到登录页面 return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;) else: email = request.POST.get(&quot;email&quot;, &apos;&apos;) return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;) 我们现在来解决刚才url出错的问题，我们在path中的配置是这样的：1re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;), 它和我们普通的path不一样，里面有一个匹配active_code的正则表达式，所以在前端页面不能和普通的url那样写：1action=&quot;&#123;% url &apos;reset_pwd&apos; %&#125;&quot; 既然不能这样写，那我们可以用一个普通的path来定义它，作用是修改密码即可：1234from users.views import ModifyPwdView# 修改密码urlpath(&quot;modify/&quot;, ModifyPwdView.as_view(), name=&quot;modify_pwd&quot;), 这里面的ModifyPwdView是我们新建的视图函数，可以将前面的ResetView中的post方法脱离出来，成为ModifyPwdView的一部分：1234567891011121314151617181920212223# 用于实现用户修改密码的函数class ModifyPwdView(View): def post(self, request): modify_form = ModifyPwdForm(request.POST) if modify_form.is_valid(): pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;) pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;) email = request.POST.get(&quot;email&quot;, &apos;&apos;) # 如果前后两次密码不相等，那么回填信息并返回错误提示 if pwd1 != pwd2: return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;) # 如果前后两次密码相等，那么进入我们的密码修改保存 # 取出用户信息 user = UserProfile.objects.get(email=email) # 随意取出一个密码并将其进行加密 user.password = make_password(pwd1) # 将更新后的用户信息保存到数据库里面 user.save() # 密码重置成功以后，跳转到登录页面 return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;) else: email = request.POST.get(&quot;email&quot;, &apos;&apos;) return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;) 也就是这个样子： 然后修改前端页面：1&lt;form id=&quot;reset_password_form&quot; action=&quot;&#123;% url &apos;modify_pwd&apos; %&#125;&quot; method=&quot;post&quot;&gt; 也就是这个样子： 在图示位置打上断点,开始调试我们的项目，具体操作和前面类似，这里就不介绍了。复制密码重置链接去浏览器地址栏打开，输入新的密码： 然后点击提交按钮，就进入下面的Pycharm页面： 注意：如果点击提交按钮没有反应，页面没有进入view.py里面的方法，可能是按钮的类型错了，type=”submit”而不是type=”button”，也就是这个样子： 最后，修改password_reset.html的错误信息的提示： 前面说了这么多调试命令，小伙伴们可能会不太明白其中的意思，下面我详细介绍一下Pycharm是如何调试代码的！ Pycharm中的调试如果你熟悉Eclipse，那你肯定知道它的快捷键：1234F5：跳入方法F6：向下逐行调试F7：跳出方法F8：直接跳转到下一个断点 当然Pycharm也是可以采用Eclipse的快捷键来调试代码的，具体设置方法如下： 点击File–&gt; Settings–&gt; Apperance–&gt; Keymap–&gt; 右侧下拉选Eclipse–&gt; Apply –&gt; OK这几步就完成了，没看懂的可以看下面的图片（记得按照序号的顺序来操作哈） 当然如果你没用过Eclipse，也不想记那些快捷键，这也是可以的，那看下面的图片： 这个页面你总是经常看到吧，下面分别解释一下各个键的名称及功能作用（括号内是默认的快捷键，也就是Pycharm自己设定的）： 1、step over（F8）作用是在同一个调用栈层中移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将在函数调用之后的下一条语句停止。调试器不会进入函数体。如果当前行是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。 2、step into（F7）作用是移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将进入函数，并停止在函数体的第一行。step-into可以帮助初步揭开代码位置的谜团。例如，函数调用和函数本身可能在不同的文件中是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。 3、Force step into（Ctrl+shift+F7）可以看做是step into的升级版本，可以越过代码，强力执行。 4、step-out（shift+F8）作用是在栈中前进到下一层，并在调用函数的下一行停止。 还有，如果你有多个断点，如何在pycharm中从第一个断点跳转至第二个断点呢？例如第一个断点在第一行，第二个断点在第五十行，那么开始debug后，你首先停在第一行，随后点击菜单栏的Run-&gt; Resume Program即可跳转至第二个断点了，是不是很简单! 至此，关于用户的激活，用户密码找回，重置密码，修改密码，调试代码等功能的介绍就到此为止，感谢你的赏阅！ 本篇笔记对应于第十四篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十三）：邮箱验证码实现","slug":"零基础使用Django2-0-1打造在线教育网站（十三）：邮箱验证码实现","date":"2018-04-11T12:35:31.000Z","updated":"2019-11-04T13:19:55.125Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十三）：邮箱验证码实现/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十三）：邮箱验证码实现/","excerpt":"","text":"写在前面本篇笔记主要解决用户注册，验证码的实现，邮箱验证码的发送这3个问题。 本篇笔记对应于第十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。 非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，本篇关于用户注册，验证码的实现，邮箱验证码的发送这3个问题的介绍就到此结束了，下一篇我们将实现用户的激活，用户密码找回等功能的实现，感谢你的赏阅。 本篇笔记对应于第十三篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十二）：错误信息提示","slug":"零基础使用Django2-0-1打造在线教育网站（十二）：错误信息提示","date":"2018-04-11T12:33:17.000Z","updated":"2019-11-04T13:15:45.405Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十二）：错误信息提示/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十二）：错误信息提示/","excerpt":"","text":"写在前面本篇笔记主要解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题。 本篇笔记对应于第十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。 基于类的用户登录实现在前面我们实现用户登录是基于视图函数来实现的，也就是下面这段代码：123456789101112131415161718192021222324# 当我们配置的url被这个view处理时，将会自动传入request对象.def user_login(request): # 前端向后端发送的请求方式有两种: get和post # 登录提交表单时为post if request.method == &quot;POST&quot;: # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &apos;index.html&apos;) else: # 说明里面的值是None，再次跳转回主页面并报错 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) # 获取登录页面时为get elif request.method == &quot;GET&quot;: # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) 同时在eduline/urls.py文件的路径配置为：123from users.views import user_loginpath(&apos;login/&apos;, user_login, name=&quot;login&quot;) 现在我们采用基于类的方法来实现用户的登录，因为基于类可以便于重载和调用。下面是基于类的代码，小伙伴们试着体验一下两者的不同之处吧：1234567891011121314151617181920212223# 基于类实现用户的登录，它需要继承viewclass LoginView(View): # 不需要判断，直接调用get方法 def get(self, request): # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) # 不需要判断，直接调用post方法 def post(self, request): # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;index.html&quot;) else: # 说明里面的值是None，再次跳转回主页面并报错 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) 同时在eduline/urls.py文件的路径配置为：12 # 基于类的用户登录path配置path(&apos;login/&apos;, LoginView.as_view(), name=&quot;login&quot;) 你是不是觉得很方便了，不用判断请求的方法类型，直接就可以调用了！不过现在有个疑问，如果用户在提交表单的时候，都不满足我们表单的要求，比方说我们要求密码不得少于5位数，不能为空等，那样我们还需要用刚才的方法去验证么，其实根本就可以不用验证，这就是非法的字符。因此，我们有必要在表单提交时就定义一个可以检查是否需要继续后续操作的验证方法。 我们继续往下进行： 我们打开users这个应用，在里面新建forms.py文件,然后在里面输入如下代码：1234567from django import forms# 用户登录表单的验证class LoginForm(forms.Form): username = forms.CharField(required=True) # 用户名不能为空 password = forms.CharField(required=True, min_length=5) # 密码不能为空，而且最小6位数 既然我们写好了表单的验证条件，接下来我们就把它用起来，继续回到我们的users/views.py文件，我们对登录函数做一个修改：12345678910111213141516171819202122232425262728# 基于类实现用户的登录，它需要继承viewclass LoginView(View): # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证 def get(self, request): # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) # 不需要判断，直接调用post方法 def post(self, request): # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息 login_form = LoginForm(request.POST) # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息 if login_form.is_valid(): # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。 user_name = request.POST.get(&apos;username&apos;, &apos;&apos;) pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;) # 取值成功返回user对象,失败返回null user = authenticate(username=user_name, password=pass_word) if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;login.html&quot;) else: # 说明里面的值是None，再次跳转回主页面并报错 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) 现在我们又有一个疑问，假定你密码输入错误以后，你是不是只需要重新输入密码即可，用户名还是存在的，我们不希望还要去重新输入用户名。因此，我们的错误提示信息需要修改，继续完善我们的views.py文件。1234567891011if user is not None: # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录 login(request, user) # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态 return render(request, &quot;login.html&quot;) else: # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回 return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;) # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息 else: return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;) 就是下面这个样子：注意：forms.py文件中的username和password必须和html中的保持一致，因为它是我们从request.POST中得到的（request.POST也是从前端页面获取到的）。 Debug测试一下我们在views.py文件的if login_form.is_valid():处打上一个断点，开启调式模式：我们不输入用户名，密码输ad这2个数，然后回车，页面进入Pycharm，单击一步步调试按钮，可以出现：放大一下：所以我们知道，这个errors其实是一个ErrorDict,我们可以通过这个来获取错误信息的提示，然后把它放在前端页面即可，还记得我们说过如果表单提交验证不通过直接刷新返回到登录页面，就是这段代码起的作用：12else: return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;) 现在我们在前端登录页面login.html配置错误提示信息： 加上错误提示代码：123&lt;div class=&quot;form-group marb20 &#123;% if login_form.errors.username %&#125;errorput&#123;% endif %&#125;&quot;&gt;&lt;div class=&quot;form-group marb8 &#123;% if login_form.errors.password %&#125;errorput&#123;% endif %&#125;&quot;&gt; 就是这个样子：仅仅这样还不够，我们需要将forms.py文件里定义的错误信息给显示出来，那需要修改并添加一下代码：123456&lt;div class=&quot;error btns login-form-tips&quot; id=&quot;jsLoginTips&quot;&gt; &#123;% for key,error in login_form.errors.items %&#125; &#123;&#123; error &#125;&#125; &#123;% endfor %&#125; &#123;&#123; msg &#125;&#125;&lt;/div&gt; 就是这个样子：我们现在运行一下我们的项目：runserver一下，不写任何信息： cookie和session自动登录cookie的用途正如你所知道的http请求是一种无状态的请求，也就是说每次请求是独立的。假如用户向服务器发起两次请求，那么这两次请求是没有状态的，服务器不知道这两次请求都是同一个用户发起的。 所以为了解决这个无状态请求，人们引入了cookie这个概念，这使得每次请求变得有状态起来：记住cookie是不能跨域访问的！我们以chrome浏览器为例，打开百度的首页，并按键盘上的F12（或者ctrl+shift+I），开启监控模式：然后我们尝试清空一下cookies,重新刷新一下页面：cookie又出现了，所以cookie可以把你的用户名和密码保存在浏览器本地。 不过这样做有个坏处，那就是你的密码和用户名都是缓存在本地的，一旦别人拿到你的电脑，那你的信息将被剽窃，非常不安全。 那么我们在想有没有一种可以把数据缓存在服务器，然后发给用户的只是类似于钥匙的东西，而且这个钥匙最好是有过期时间，这样人家就算拿到你的电脑，也只是知道类似于钥匙的东西还必须在规定的时间内才能打开，这样一来安全得到了非常好的保证，session就是在满足这些条件下诞生的。 session的安全护航用户在向服务器发起第一次请求后，服务器会给用户随机地分派一个id（可以是用户的user id，也可以一段任意的字符串），我们把它叫做session id。这个session id是服务器采用自己的规则生成，它保存在本地cookie里面。当用户再次发起请求时，这个session id会上传至服务器，服务器接收后会识别它，并返回相关的信息。 我们登录的session就是这样：1、用户输入用户名 &amp;和密码，点击提交；2、调用 login()命令, 后端程序会根据用户名密码生成session id并保存在数据库中；3、用户登录之后，需要通过这个session id取出相关的基本信息。 我们打开我们的navicat,去我们的数据库中找到我们Django自带的session表：这个表中是登录后才有的，如果你此刻没有登录，请先登录一下我们的后台管理系统：你还可以清空我们这张表，然后重新登录试试，这里就不一一演示了（结果都是一样）。这个表中包含：session_key（钥匙）, session_data（数据）,expire_date（过期时间）。 我们运行一下我们的项目，用户先登录，然后我们按键盘上的F12（或者ctrl+shift+I），开启监控模式，查看cookie里面的信息是不是包含session id,而且主要检查数据是不是一样的：看到没有，和我们刚才数据库中看到的一模一样，不过session_key 在浏览器就叫做session id了，名字不同而已。这主要归功于django自带的session功能： 如果你对cookie和session的原理感兴趣，可以浏览这篇文章：django从请求到返回都经历了什么? 至此，本篇关于解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题的介绍就到此结束了，感谢你的赏阅！ 本篇笔记对应于第十二篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现","slug":"零基础使用Django2-0-1打造在线教育网站（十一）：登录页面实现","date":"2018-04-11T12:29:28.000Z","updated":"2019-11-04T13:20:46.795Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十一）：登录页面实现/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十一）：登录页面实现/","excerpt":"","text":"写在前面从本篇笔记开始，我们就正式进入到前端页面的配置了，里面包含的信息很多，主要解决网站首页显示，发送接收验证码，用户注册，登录，密码找回，修改密码等问题。鉴于篇幅可能有点长，所以这里分3篇进行介绍，分别是第十一，十二，十三篇笔记。本篇笔记主要解决网站首页显示和登录页面的配置以及登录方式的自定义这3个问题。 本篇笔记对应于第十一篇代码，对应于github的位置是https://github.com/licheetools/eduline。 网站首页显示和登录页面的配置放置前端网站首页index.html正如大家平时所看到的那样，一般网站首页都是直接在根目录下显示的，所以我们就要在我们的初始前端资料里面，把我们的index.html文件放在templates目录里面，就是这个样子： 新建静态文件夹static在主项目树里面新建静态文件夹static，再在里面新建5个文件夹，用于放置css，img，images，js，media等文件。就是这样： 前面说过Django的web开发是采用MTV模式的，现在如果我们想在浏览器中显示前端页面，我们只需要配置一下url就可以了。 前端静态页面的URL的配置打开我们的eduline/urls.py文件，修改为如下代码： 12345678910from django.urls import pathfrom django.views.generic import TemplateViewimport xadminurlpatterns = [ path(&apos;xadmin/&apos;, xadmin.site.urls), # 用&apos;&apos;指代根目录，TemplateView.as_view可以将template转换为view path(&apos;&apos;, TemplateView.as_view(template_name=&apos;index.html&apos;), name=&apos;index&apos;),] 接下来我们运行一下我们的项目:runserver,直接在浏览器地址栏中输入：http://127.0.0.1:8000/或者http://127.0.0.1回车一下，出现：![](https://upload-images.jianshu.io/upload_images/8964398-0ba43f22a440a851.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)我们的index页面已经成功加载出来了，但是很丑，因为样式还没有加载出来，我们需要配置一下路径。 配置静态static文件的路径打开我们的eduline/settings.py文件，拉到最底下，添加修改为如下：12345STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = [ os.path.join(BASE_DIR, &quot;static&quot;), # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾] 静态文件路径修改了，所以我们需要在前端页面代码里面对其引用路径都作修改：将所有的../,全部替换为/static/，你可以使用ctrl+f，先查找出所有再替换也可以的： 变成了这个样子： 接着，把我们前端资料里的文件都放在指定的文件夹里面（资料里都有文件夹名，而且都是和你刚才创建的名字一样） 偷懒的话可以直接复制粘贴相关文件。 现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：说明我们的前端网站页面已经成功显示了。（如果出现页面残缺问题，可以使用本篇笔记上传的旧版前端资料。） 登录页面的配置放置前端登录页面login.html在前端资料里面把我们的login.html文件放在templates目录里面，就是这个样子： 替换路径同样将所有的../,全部替换为/static/，你可以使用ctrl+f，先查找出所有再替换也可以的，这里就不细说了。 登录页面的URL的配置打开我们的eduline/urls.py文件，添加如下代码：12# 登录urlpath(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot; 取消注释并修改登录路径打开我们的index.html页面，找到第27,28行，取消注释（删除注释符号），再将里面的href=”login.html”修改为：href=”/login/“，再找到第30行代码，将一对&lt;div class=&quot;personal&quot;&gt; &lt;/div&gt;给收起来，并注释掉，因为我们目前还用不到它。就是下面的一段代码：1234567891011121314151617181920&lt;!-- &lt;div class=&quot;personal&quot;&gt; &lt;dl class=&quot;user fr&quot;&gt; &lt;dd&gt;bobby&lt;img class=&quot;down fr&quot; src=&quot;/static/images/top_down.png&quot;/&gt;&lt;/dd&gt; &lt;dt&gt;&lt;img width=&quot;20&quot; height=&quot;20&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt; &lt;/dl&gt; &lt;div class=&quot;userdetail&quot;&gt; &lt;dl&gt; &lt;dt&gt;&lt;img width=&quot;80&quot; height=&quot;80&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt; &lt;dd&gt; &lt;h2&gt;django&lt;/h2&gt; &lt;p&gt;bobby&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;div class=&quot;btn&quot;&gt; &lt;a class=&quot;personcenter fl&quot; href=&quot;usercenter-info.html&quot;&gt;进入个人中心&lt;/a&gt; &lt;a class=&quot;fr&quot; href=&quot;/logout/&quot;&gt;退出&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; --&gt; 现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：然后点击登录按钮，跳转到如下地址：http://127.0.0.1:8000/login/，页面成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-3786426fe6c9e08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)恭喜你，我们登录页面也已经正常显示出来了，下面是如何实现登录的交互功能。 登录页面的交互实现Django的MTV模式你还差一个V，也就是view你还没用到过，这里就到了它大显身手的时候了。尽管前面我们已经把网站首页和登录页面在浏览器中显示了，但是那些信息都是固定的，也就是说当初前端人员在设计网页的时候就确定了，我们现在所要做的就是更改它们的信息，使满足自己的信息得到显示。 接下来我们就通过编写视图函数，来实现这个，不过前提是需要挖坑与填坑操作，这里先不介绍，后面会具体说明。 视图函数View的创建我们打开，apps/users/views.py文件，在里面添加如下代码：123456789101112# 当我们配置的url被这个view处理时，将会自动传入request对象.def user_login(request): # 前端向后端发送的请求方式有两种: get和post # 登录提交表单时为post if request.method == &quot;POST&quot;: pass # 获取登录页面时为get elif request.method == &quot;GET&quot;: # render的作用是渲染html并返回给用户 # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示 return render(request, &quot;login.html&quot;, &#123;&#125;) 然后打开eduline/urls.py文件，将login的登录路径修改为如下：12345from users.views import login # 登录url # path(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot;) path(&apos;login/&apos;, login, name=&quot;login&quot;) 现在我们准备测试一下，我们获取登录页面时的method是不是为get，在两行返回语句的位置打上断点：然后开启debug模式，待网站首页显示出来以后点击登录按钮，可以看到蓝色行跳到render那一行了，并发现Method就是GET: 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，我们本篇关于网站首页显示和登录页面的配置以及登录方式的自定义这3个问题的介绍，就到此结束了，感谢你的赏阅。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置","slug":"零基础使用Django2-0-1打造在线教育网站（十）：后台管理配置","date":"2018-04-11T12:26:24.000Z","updated":"2019-11-04T13:14:09.582Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（十）：后台管理配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（十）：后台管理配置/","excerpt":"","text":"写在前面本篇笔记主要完善上篇笔记中遗留的其余3个apps的注册，还有xadmin的全局配置，让你打造一个属于自己的网站后台管理系统。 本篇笔记对应于第十篇代码，对应于github的位置是https://github.com/licheetools/eduline。 其余3个apps的注册courses的注册我们打开eduline/apps/courses这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始进行app的注册,在其中添加如下代码：123456789101112131415161718192021222324252627282930313233343536import xadminfrom .models import Course, Lesson, Video, CourseResourceclass CourseAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;, &apos;get_zj_nums&apos;, &apos;go_to&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;, &apos;add_time&apos;] # 过滤器class LessonAdmin(object): list_display = [&apos;course&apos;, &apos;name&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;course&apos;, &apos;name&apos;] # 查询你想要的数据 list_filter = [&apos;course__name&apos;, &apos;name&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class VideosAdmin(object): list_display = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;lesson&apos;, &apos;name&apos;] # 查询你想要的数据 list_filter = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class CourseResourceAdmin(object): list_display = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;] # 查询你想要的数据 list_filter = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。xadmin.site.register(Course, CourseAdmin)xadmin.site.register(Lesson, LessonAdmin)xadmin.site.register(Video, VideosAdmin)xadmin.site.register(CourseResource, CourseResourceAdmin) 运行一下你的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-f01e68630a744bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) organization的注册我们打开eduline/apps/organization这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始进行app的注册,在其中添加如下代码：1234567891011121314151617181920212223242526import xadminfrom .models import CityDict, CourseOrg, Teacherclass CityDictAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;] # 查询你想要的数据 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class CourseOrgAdmin(object): list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class TeacherAdmin(object): list_display = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。xadmin.site.register(CityDict, CityDictAdmin)xadmin.site.register(CourseOrg, CourseOrgAdmin)xadmin.site.register(Teacher, TeacherAdmin) 运行一下你的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-d11e1dfd1f6be110.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) operation的注册我们打开eduline/apps/operation这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始进行app的注册,在其中添加如下代码：12345678910111213141516171819202122232425262728293031323334353637383940import xadminfrom .models import UserAsk,CourseComments,UserFavorite,UserMessage,UserCourseclass UserAskAdmin(object): list_display = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class CourseCommentsAdmin(object): list_display = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class UserFavoriteAdmin(object): list_display = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class UserMessageAdmin(object): list_display = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。class UserCourseAdmin(object): list_display = [&apos;user&apos;, &apos;course&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;user&apos;, &apos;course&apos;] # 查询你想要的数据，记住尽量不要把时间放进去 list_filter = [&apos;user&apos;, &apos;course&apos;, &apos;add_time&apos;] # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。xadmin.site.register(UserAsk, UserAskAdmin)xadmin.site.register(CourseComments, CourseCommentsAdmin)xadmin.site.register(UserFavorite, UserFavoriteAdmin)xadmin.site.register(UserMessage, UserMessageAdmin)xadmin.site.register(UserCourse, UserCourseAdmin) 运行一下你的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-e162226c8ebcb58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 至此，我们所有的apps都已经注册完了。接下来我们就开始定制属于自己的后台管理系统吧。 xadmin的全局配置开启主题功能打开users/adminx.py文件，在里面添加如下代码：12345678from xadmin import views# 创建xadmin的全局管理器并与view进行绑定class BaseSetting(object): enable_themes = True # 修改主题 use_bootswatch = True # 增加主题的可选内容# 将全局配置管理与view进行绑定注册xadmin.site.register(views.BaseAdminView, BaseSetting) 看到没，已经出现更换主题按钮了，你可以自定义喜欢的主题了： 后台管理名称配置如图，我们需要修改站点标题，站点尾注，折叠菜单等以下内容：为了更好地管理这些不变动的信息，我们依旧放在users/adminx.py文件里面。我们打开它，并在其中加入以下代码：123456class GlobalSettings(object): site_title = &apos;慕学后台管理系统&apos; # 站点标题 site_footer = &apos;慕海学习网&apos; # 站点尾注 menu_style = &apos;accordion&apos; # 折叠收起菜单# 将站点标题与站点尾注进行注册:xadmin.site.register(views.CommAdminView, GlobalSettings) 刷新一下我们的网页，就变成了这个样子：不知你发现没有，还有一个问题就是折叠后apps还是显示英文： 我们想变成中文，可以吗？答案是当然可以的！ 配置apps的后台显示打开每个app下面的apps.py文件，追加verbose_name信息。我们以users/apps.py为例,修改为如下：123456from django.apps import AppConfigclass UsersConfig(AppConfig): name = &apos;users&apos; verbose_name = &apos;用户信息&apos; 就是这个样子： 其余apps的apps.py文件修改如下：courses/apps.py:12345from django.apps import AppConfigclass CoursesConfig(AppConfig): name = &apos;courses&apos; verbose_name = &apos;课程管理&apos; operation/apps.py:12345from django.apps import AppConfigclass OperationConfig(AppConfig): name = &apos;operation&apos; verbose_name = &apos;用户操作&apos; organization/apps.py:12345from django.apps import AppConfigclass OrganizationConfig(AppConfig): name = &apos;organization&apos; verbose_name = &apos;机构管理&apos; 再来刷新一下我们的页面，我们发现页面还是老样子，并没有出现与我们设想的页面，那是因为我们还没有配置信息，我们需要在每个app应用的–init–.py文件里加上引用apps的配置信息，就一行代码：default_app_config = &quot;appname.apps.AppnameConfig&quot; # 注意第二个Appname首字母大写。我们设置如下：以users/–init–.py:为例，记住是箭头2不是箭头1（箭头1是apps这个文件的）！！！添加如下一行代码：1default_app_config = &apos;users.apps.UsersConfig&apos; courses/–init–.py:1default_app_config = &apos;courses.apps.CoursesConfig&apos; operation/–init–.py:1default_app_config = &apos;operation.apps.OperationConfig&apos; organization/–init–.py:1default_app_config = &apos;organization.apps.OrganizationConfig&apos; 现在我们刷新一下我们的页面，成功了： 自定义菜单显示顺序上面菜单的显示是根据我们注册的时间来显示的，我们可以自定义我们的菜单显示顺序：在users/adminx.py文件加上以下代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445from users.models import EmailVerifyRecord, Banner, UserProfilefrom courses.models import Course, CourseResource, Lesson, Videofrom organization.models import CourseOrg, CityDict, Teacherfrom operation.models import CourseComments, UserMessage, UserFavorite, UserCourse, UserAskfrom django.contrib.auth.models import Group, Permissionfrom xadmin.models import Logclass GlobalSettings(object): site_title = &apos;慕学后台管理系统&apos; site_footer = &apos;慕海学习网&apos; menu_style = &apos;accordion&apos; def get_site_menu(self): return ( &#123;&apos;title&apos;: &apos;课程管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;课程信息&apos;, &apos;url&apos;: self.get_model_url(Course, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;章节信息&apos;, &apos;url&apos;: self.get_model_url(Lesson, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;视频信息&apos;, &apos;url&apos;: self.get_model_url(Video, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;课程资源&apos;, &apos;url&apos;: self.get_model_url(CourseResource, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;课程评论&apos;, &apos;url&apos;: self.get_model_url(CourseComments, &apos;changelist&apos;)&#125;, )&#125;, &#123;&apos;title&apos;: &apos;机构管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;所在城市&apos;, &apos;url&apos;: self.get_model_url(CityDict, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;机构讲师&apos;, &apos;url&apos;: self.get_model_url(Teacher, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;机构信息&apos;, &apos;url&apos;: self.get_model_url(CourseOrg, &apos;changelist&apos;)&#125;, )&#125;, &#123;&apos;title&apos;: &apos;用户管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;用户信息&apos;, &apos;url&apos;: self.get_model_url(UserProfile, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户验证&apos;, &apos;url&apos;: self.get_model_url(EmailVerifyRecord, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户课程&apos;, &apos;url&apos;: self.get_model_url(UserCourse, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户收藏&apos;, &apos;url&apos;: self.get_model_url(UserFavorite, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户消息&apos;, &apos;url&apos;: self.get_model_url(UserMessage, &apos;changelist&apos;)&#125;, )&#125;, &#123;&apos;title&apos;: &apos;系统管理&apos;, &apos;menus&apos;: ( &#123;&apos;title&apos;: &apos;用户咨询&apos;, &apos;url&apos;: self.get_model_url(UserAsk, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;首页轮播&apos;, &apos;url&apos;: self.get_model_url(Banner, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户分组&apos;, &apos;url&apos;: self.get_model_url(Group, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;用户权限&apos;, &apos;url&apos;: self.get_model_url(Permission, &apos;changelist&apos;)&#125;, &#123;&apos;title&apos;: &apos;日志记录&apos;, &apos;url&apos;: self.get_model_url(Log, &apos;changelist&apos;)&#125;, )&#125;,)xadmin.site.register(views.CommAdminView, GlobalSettings) 记住这段代码是和我们之前定义全局配置放在同一个函数里面的注意：是from users.models import EmailVerifyRecord, Banner, UserProfile而不是：from apps.users.models import EmailVerifyRecord, Banner, UserProfile1RuntimeError: Model class apps.users.models.UserProfile doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS. 也就是说直接from users.models，不用再写上from apps.users.models。 最后我们运行一下我们的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin,然后回车，就成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-b129d1c498227dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)说明一下，这个日志记录就是用来记录我们之前进行过什么操作的文件。 你可能会问，这些apps的图片都是圆圈，我们可以自定义图标么？答案是当然了！这里我就不介绍了，有兴趣的小伙伴们可以自己设置，这里我开启传送大门：xadmin管理员详情页面布局，导航图标设置 至此，我们自己专属的网站后台就搭建成功了，感谢你的赏阅！下一篇我们就正式进入到前端页面的配置了，主要解决用户注册，登录的问题。 本篇笔记对应于第十篇代码，对应于github的位置是https://github.com/licheetools/eduline。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理","slug":"零基础使用Django2-0-1打造在线教育网站（九）：初识后台管理","date":"2018-04-11T12:24:23.000Z","updated":"2019-11-04T13:13:28.806Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（九）：初识后台管理/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（九）：初识后台管理/","excerpt":"","text":"写在前面在前面的笔记中我们进行了需求分析和数据库的设计，本篇笔记主要介绍Django自带的用于后台管理的admin，并在此基础上介绍另一个插件xadmin的使用。 本篇笔记对应于第九篇代码，对应于github的位置是https://github.com/licheetools/eduline django自带的admin介绍先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：runserver再回车：在浏览器地址栏中输入http://127.0.0.1:8000/admin出现：恭喜你，你已经进入到Django admin的后台管理网页了。 你可能会问，为什么会有这个页面，我可是什么操作也没干啊（一脸无辜）。对的，你确实什么也不用干，因为Django已经帮你做好了。 打开eduline/settings.py文件，找到第34行代码：看到没，admin它其实也是一个app，不过在我们新建项目时就已经创建好了，不用你去动手，是不是很人性化。 我们现在再来打开eduline/urls.py文件，找到第19行代码： 看到没，admin竟然已经自动在url中进行了配置（整个项目就它一个配置了url，可见重要性不一般），所以你前面访问http://127.0.0.1:8000/admin才会有响应。 我们回到后台页面： 有登录按钮，所以我们需要先注册一个账号，Django默认是不会给你创建账号的。 注册超级管理员先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入1createsuperuser 然后系统会提示你输入以下信息：Username，Email address，Password： 接下来进行数据库的生成和迁移操作（因为users应用中多了一个名为NewBee的超级管理员），我们只需要对users 这个应用进行相关操作：12makemigrations usersmigrate users 登入admin后台运行一下我们的项目，在浏览器地址栏输入：http://127.0.0.1:8000/admin，并在登录页面输入刚才注册的账号信息(默认登录方式是用户名 + 密码,后面会教你如何实现用户名或邮箱+密码登录的登录形式)，点击登录，就进入后台了： 全是英文，我们去设置里配置一下：打开eduline/settings.py文件，找到第117行代码：123LANGUAGE_CODE = &apos;en-us&apos;TIME_ZONE = &apos;UTC&apos; 我们修改为如下：12345678# 将语言修改为中文LANGUAGE_CODE = &apos;zh-hans&apos;# 将时区修改为上海TIME_ZONE = &apos;Asia/Shanghai&apos;# 数据库存储使用时间，True时间会被存为UTC的时间。所以采用FalseUSE_TZ = False 刷新一下我们的后台网页：恭喜你，admin被汉化成功了。接下来就是把我们前面定义的数据库字段都显示出来，首先把我们的UserProfile注册进来。 注册UserProfile打开eduline/apps/users/admin.py文件，添加如下代码：1234567891011121314from django.contrib import admin# Register your models here.# 因为处于同一个目录之下，所以可以直接使用.models代替当前目录from .models import UserProfile# 写一个管理器，命名规则：Model+Adminclass UserProfileAdmin(admin.ModelAdmin): pass# 将UserProfile注册进我们的admin中, 并为它选择管理器UserProfileAdminadmin.site.register(UserProfile, UserProfileAdmin) 刷新一下我们的后台网页： Users 是用户所在表的名称： 点击右侧的增加用户信息：我们看到一下信息：我们尝试再次新建一个用户：NewBai：新建成功了，同时注意Django会自动帮我们把密码进行加密，而且不能反解，也就是说单向密码加密。 xadmin的安装还记得前面的一篇笔记吗，我让你新建一个文件夹A，把下载的xadmin文件放在里面，不记得请查阅这篇笔记：零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置（更新一下，那个版本里面有太多的坑需要自己填，这里我就把已经填完坑的版本贴一下，大家在本篇笔记对应的Github上下载包，亲测有用）。现在，我们新建一个名为extra_apps的Python package ,用来存放我们的第三方插件，并将前面下载的xadmin文件（解压之后）移入其中：同时需要对路径进行配置：打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：123456import os, sys# Build paths inside the project like this: os.path.join(BASE_DIR, ...)BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))sys.path.insert(0,os.path.join(BASE_DIR, &apos;extra_apps&apos;)) 接下来是xadmin的安装:在确保前面的操作完成以后，我们打开eduline/settings.py文件，找到里面的第35行代码，在后面修改为如下： 1234567891011121314INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;, &apos;courses&apos;, &apos;organization&apos;, &apos;operation&apos;, &apos;xadmin&apos;, &apos;crispy_forms&apos;] 然后打开eduline/urls.py文件，把urls中默认的admin修改为xadmin:123456from django.urls import pathimport xadminurlpatterns = [ path(&apos;xadmin/&apos;, xadmin.site.urls),] 然后进行我们数据库的生成和迁移操作：makemigrations和migrate： 你会发现执行第一个命令就报错了，那是因为我们缺少一些库的支持，我们依次按照如下库：123456pip install futurepip install sixpip install httplib2pip install django-import-exportpip install django-crispy-formspip install django-formtools==2.1 # 记住一定是2.1的版本，否则会出错 使用的命令为：pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple之后会安装一大堆库，我们使用pip list命令查看一下： 为了便于你查看自己是否缺少某个库，我这里贴一下我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）：123456789101112131415161718192021222324252627282930(eduline) F:\\Envs\\eduline&gt;pip listPackage Version-------------------------------- --------confusable-homoglyphs 3.1.1diff-match-patch 20121119Django 2.0.1django-crispy-forms 1.7.2django-crispy-forms-registration 0.1.3django-formtools 2.1django-import-export 1.0.1django-registration 2.4.1django-reversion 3.0.0et-xmlfile 1.0.1future 0.16.0httplib2 0.11.3jdcal 1.4mysqlclient 1.3.13odfpy 1.3.6openpyxl 2.5.4Pillow 5.2.0pip 18.0pytz 2018.5PyYAML 3.13setuptools 40.0.0six 1.11.0tablib 0.12.1unicodecsv 0.14.1wheel 0.31.1xlrd 1.1.0xlwt 1.3.0 接下来，我们重新进行数据库的生成和迁移操作：makemigrations和migrate：,看到没有，它也生成了几个数据表，我们打开Navicat，去数据库里看一下：现在我们运行一下我们的项目，在浏览器地址中输入http://127.0.0.1/xadmin,然后看到：![](https://upload-images.jianshu.io/upload_images/8964398-1b7b25d8b012310f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)恭喜你，xadmin的配置已经完成了，xadmin的页面是不是比admin的页面好看多了。 Xadmin使用Bootstrap3.0框架精心打造。基于Bootstrap3，Xadmin天生就支持在多种屏幕上无缝浏览，并完全支持Bootstrap主题模板，让您的管理后台也动感、多样起来。，这是它的的官方网站: 你可以去看一下它的示例和文档，可能需要翻墙，不过这对你以后的运用确实帮助很大的。 Xadmin的使用介绍正如前面你所知道的，Xadmin是基于Django的admin来开发的，所以Xadmin也继承了许多admin的用法，下面就分别介绍一下它们的使用情况： 因为我们之前在admin里面已经注册了UserProfile，所以xadmin里面也就有了这个信息，那我们接下来就设置一下我们文件的格式，让系统默认去寻找我们xadmin的adminx.py文件，而不是去寻找原来admin的admin.py文件。 验证码功能的实现我们打开eduline/apps/users这个文件夹，在里面新建一个名为adminx.py的文件，我们准备开始验证码功能的实现,在其中添加如下代码：12345678910111213141516171819#！/user/bin/python# -*- coding:utf-8 -*-# @Time: 2018/3/26 10:05# @Author: Envse# @File: adminx.py# 导入xadmin，如果出现字体底下出现红色属于正常现象（实际上环境已经配置过）import xadmin# 因为处于同一个目录之下，所以可以直接使用.models代替当前目录from .models import EmailVerifyRecord# 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类class EmailVerifyRecordAdmin(object): pass# 将EmailVerifyRecord注册进我们的admin中, 并为它选择管理器EmailVerifyRecordAdminxadmin.site.register(EmailVerifyRecord, EmailVerifyRecordAdmin) 现在我们重新运行一下我们的项目，在浏览器地址栏中输入：http://127.0.0.1:8000/xadmin回车，出现：![](https://upload-images.jianshu.io/upload_images/8964398-96113eee67682a4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 你可能会好奇这个是怎样实现的，其实这就是你数据库设计的字段啊：你打开users/models.py文件，看到第30行代码：Meta信息就是用于后台显示的，其中verbose_name定义的是后台主页面显示字段，verbose_name_plural是verbose_name的复数形式，如果这两者不相等，那么verbose_name_plural就是在verbose_name后面加个s字母而已，所以我们尽量一样，便于管理和查看。 我们现在尝试添加一个邮箱验证码，点击右侧的增加邮箱验证码按钮，输入相关信息，可以看到添加成功了： 接下来，我们看一下右侧的显示列，点击一下：里面可以选择显示的内容，我们现在想在刚才的页面同时显示这些全部信息，所以需要配置一下:我们打开users/adminx.py文件，在里面的管理器中设置list_display字段:12345# 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类class EmailVerifyRecordAdmin(object): # 配置后台显示的列信息 list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;] # 一次显示你想出现的多行数据，# 这里面的字段都是你在前面数据库中定义的，请保持数据的一致 然后还可以配置过滤器，搜索框等，这里就不一一说明，直接贴上代码了：123456# 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类class EmailVerifyRecordAdmin(object): # 配置后台显示的列信息 list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;] # 查询你想要的数据,一般不依据时间进行查询 list_filter = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;] # 过滤器 之后刷新一下你的网页，成了这个样子： 细心的小伙伴们可能发现，这里竟然可以导出操作，是的，这样变得很方便了：你可以根据自己的喜好来导出不同的文件格式，比如xml: admin, xadmin和其他后台管理系统的区别像PHP，JAVA等其他语言，它们是按照一个功能模块来进行一个功能设计的。而admin和 xadmin就不一样了，它们是对于每张表都可以进行增删改查的管理器，因此我们还可以在增删改查的基础上加上我们自己的后台逻辑，完成我们自定义的功能。因此，从某种程度可以说它是不依赖于具体业务的，不管什么系统后台都是由表组成。 既然这样，我们可以在其余的各个表中，都加上这些个功能。 打开users/adminx.py文件，我们来实现轮播图的注册，和前面验证码的操作类似，这里就不细说，直接贴上代码：123456789from .models import Bannerclass BannerAdmin(object): list_display = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;] # 一次显示你想出现的多行数据 search_fields = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;] # 查询你想要的数据 list_filter = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;] # 过滤器xadmin.site.register(Banner, BannerAdmin) 再次强调一下：这里面的字段都是你前面在数据库中定义的，请保持数据库字段定义的一致性，不要乱写，否则后面会出很大的BUG！ 刷新一下你的页面，就变成了这个样子： 好了小伙伴们，你现在可以照葫芦画瓢了，尝试着把其余3个apps都注册到后台吧。那些，我们下一篇笔记再介绍，接下来教你一个自定义文件信息的技能。 自定义文件信息打开Pycharm,点击一下主菜单的File,选择下拉的Settings,选择Editor，再选择Code Style，选择文件模板：看到5的信息了么：12345#！/user/bin/python # -*- coding:utf-8 -*- # 编码格式# @Time: $&#123;DATE&#125; $&#123;TIME&#125; # 文件生成时间# @Author: Envse # 作者# @File: $&#123;NAME&#125;.py # 文件名 你可以自定义这些信息，当然还可以根据4的选择不同来添加不同的信息。然后点击apply,最后是ok,这样你每次创建新的py文件以后，这些信息就都会出现在文件的头部了。怎么样，新技能Get了没有？ 至此，关于初识后台管理这一部分就先说这么多，下一篇笔记就完善其余3个apps的注册，还有xadmin的全局配置，打造一个属于自己的网站后台管理系统。 本篇笔记对应于第九篇代码，对应于github的位置是https://github.com/licheetools/eduline，另外xadmin的原始安装包我也上传了，大家可以前往下载，有空的话，可以给项目一个star,感谢你的赏阅。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)","slug":"零基础使用Django2-0-1打造在线教育网站（八）：数据库字段的定义-下","date":"2018-04-11T12:21:58.000Z","updated":"2019-11-04T13:09:49.443Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（八）：数据库字段的定义-下/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（八）：数据库字段的定义-下/","excerpt":"","text":"写在前面本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于users应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。 本篇笔记对应于第八篇代码，对应于github的位置是https://github.com/licheetools/eduline 3个apps应用的创建1、课程版块(course)a、创建courses应用先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp courses b、确定数据库中的数据表数量首先，课程本身需要一张表用于保存自身信息：随意点开一门课程，你会发现以下内容：点击右侧的开始学习，你会进入章节信息详情： 每个课程包含多个章节，每个章节下面又包含多个视频和右侧的课程资料。其中：课程和章节是一对多的映射关系；章节和视频也是一对多的映射关系；课程和资料也是一对多的映射关系。所以通过分析，我们需要新建4个表，用于信息的存取： c、开始数据库字段的定义打开我们的courses/models.py文件，添加并修改如下代码:12345678910111213141516171819202122232425262728293031323334from django.db import modelsfrom datetime import datetime# Create your models here.# 课程信息class Course(models.Model): name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;) # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式 desc = models.CharField(max_length=300, verbose_name=&quot;课程描述&quot;) detail = models.TextField(max_length=500, verbose_name=&quot;课程详情&quot;) is_banner = models.BooleanField(default=False, verbose_name=&quot;是否轮播&quot;) degree = models.CharField(max_length=2, choices=((&apos;cj&apos;, &apos;初级&apos;), (&apos;zj&apos;, &apos;中级&apos;), (&apos;gj&apos;, &apos;高级&apos;)), verbose_name=&quot;难度等级&quot;) # 学习数这里使用分钟数作计量单位，便于后台记录(存储最小单位)和前台转换 learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;) # 学习人数从点击开始学习算起 students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;) # 收藏人数从点击收藏按钮算起 fav_nums = models.IntegerField(default=0, verbose_name=&quot;收藏人数&quot;) image = models.ImageField(upload_to=&apos;courses/%Y/%m&apos;, max_length=100, verbose_name=&quot;封面图片&quot;) # 点击数从点击页面算起 click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;) category = models.CharField(default=&quot;后端开发&quot;, max_length=20, verbose_name=&quot;课程类别&quot;) tag = models.CharField(default=&apos;&apos;, max_length=10, verbose_name=&quot;课程标签&quot;) youneeded_know = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;课程须知&quot;) teacher_tell = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;老师告诉你&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;课程&quot; verbose_name_plural = verbose_name def __str__(self): return self.name 接着刚才的代码，我们在下面添加如下内容：12345678910111213141516# 章节信息class Lesson(models.Model): # 前面知道一个课程对应多个章节，所以在章节表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个章节属于哪个课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;) name = models.CharField(max_length=100, verbose_name=&quot;章节名&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;章节&quot; verbose_name_plural = verbose_name def __str__(self): # 采用了字符串的格式化方式来同时引用多个数据 return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的章节》&#123;1&#125;&apos;.format(self.course, self.name) # return self.name也是可以 在上面的外键字course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)，这其实就是一个用于告知信息的字段，包含3个参数：Course是指你与哪个对象存在外键关系（记住是表的名称，不是字段的名称）；on_delete=models.CASCADE是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示） 我们继续接着刚才的代码，我们在下面添加如下内容：123456789101112131415161718192021222324252627282930313233# 视频信息class Video(models.Model): # 前面知道一个章节对应多个视频，所以在视频表中将章节设置为外键。 # 此处的lesson其实就是一个用来告诉我们这个视频属于哪个章节的字段 lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, verbose_name=&quot;章节&quot;) name = models.CharField(max_length=100, verbose_name=&quot;视频名称&quot;) url = models.URLField(max_length=200, default=&apos;&apos;, verbose_name=&quot;访问地址&quot;) learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;视频&quot; verbose_name_plural = verbose_name def __str__(self): return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;章节的视频》&#123;1&#125;&apos;.format(self.lesson, self.name) # return self.name也是可以# 课程资料信息class CourseResource(models.Model): # 前面知道一个课程对应多个课程资料，所以在课程资料表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个课程资料属于哪个课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;) name = models.CharField(max_length=100, verbose_name=&quot;名称&quot;) download = models.FileField(max_length=100, upload_to=&apos;course/resource/%Y/%m&apos;, verbose_name=&quot;资源文件&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;课程资源&quot; verbose_name_plural = verbose_name def __str__(self): return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的课程资料》&#123;1&#125;&apos;.format(self.course, self.name) # return self.name也行 点击左侧的structure，我们可以看到如下的4个函数（数据表）： 至此，我们course应用的数据库字段的定义到此告一段落，不过以后可能会有新的字段加入，所以我们就先不进行数据库生成和迁移操作。 2、授课教师与授课机构板块(organization)a、创建organization应用先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp organization b、确定数据库中的数据表数量顾名思义授课教师与授课机构板块，里面肯定有授课教师和授课机构这2个表吧。然后我们来观察一下页面： 看到没有，里面有一个用于筛选的城市列表，所以这个内容我们也是要单独放在一张表里面的。 也就是说，我们需要新建3张表： 其中，课程是属于课程机构的, 课程机构又有机构类别，城市，授课讲师等字段。 上面则是教师信息表应当具有的一些字段。 c、开始数据库字段的定义打开我们的organization/models.py文件，添加并修改如下代码:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869from django.db import modelsfrom datetime import datetime# Create your models here.# 城市信息class CityDict(models.Model): name = models.CharField(max_length=20, verbose_name=&quot;城市&quot;) # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式 desc = models.CharField(max_length=200, verbose_name=&quot;描述&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;城市&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息# 课程机构class CourseOrg(models.Model): name = models.CharField(max_length=50, verbose_name=&quot;机构名称&quot;) desc = models.TextField(verbose_name=&quot;机构描述&quot;) tag = models.CharField(max_length=10, default=&quot;全国知名&quot;, verbose_name=&quot;机构标签&quot;) category = models.CharField(max_length=20, default=&apos;pxjg&apos;, choices=((&apos;pxjg&apos;, &apos;培训机构&apos;), (&apos;gr&apos;, &apos;个人&apos;), (&apos;gx&apos;, &apos;高校&apos;)), verbose_name=&quot;机构类别&quot;) click_nums = models.IntegerField(default=0, verbose_name=&apos;点击数&apos;) fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;) image = models.ImageField(max_length=50, upload_to=&quot;org/%Y/%m&quot;, verbose_name=&quot;logo&quot;) address = models.CharField(max_length=150, verbose_name=&quot;机构地址&quot;) # 前面知道一个城市对应多个课程机构，所以在课程机构表中将城市设置为外键。 # 此处的city其实就是一个用来告诉我们这个课程机构属于哪个城市的字段 city = models.ForeignKey(CityDict, on_delete=models.CASCADE, verbose_name=&quot;所在城市说明&quot;) students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;) course_nums = models.IntegerField(default=0, verbose_name=&quot;课程数&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;课程机构&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息# 教师信息class Teacher(models.Model): # 前面知道一个课程机构对应多个教师，所以在教师信息表中将授课机构设置为外键。 # 此处的org其实就是一个用来告诉我们这个教师属于哪个课程机构的字段 org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=&quot;所属教师&quot;) name = models.CharField(max_length=50, verbose_name=&quot;教师名&quot;) work_years = models.IntegerField(default=0, verbose_name=&quot;工作年限&quot;) work_position = models.CharField(max_length=50, verbose_name=&quot;公司职位&quot;) work_company = models.CharField(max_length=50, verbose_name=&quot;就职公司&quot;) points = models.CharField(max_length=50, verbose_name=&quot;教学特点&quot;) click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;) fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;) age = models.IntegerField(default=18, verbose_name=&apos;年龄&apos;) image = models.ImageField(default=&apos;&apos;, upload_to=&apos;teacher/%Y/%m&apos;, verbose_name=&apos;头像&apos;, max_length=100) add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;) class Meta: verbose_name = &quot;教师&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息 点击左侧的structure，我们可以看到如下的3个函数（数据表）： 3、用户操作板块(operation)a、创建operation应用先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp operation b、确定数据库中的数据表数量这个app应用主要用于用户操作信息的记录，主要包括： 1、用户提交我要学习的个人需求记录；2、用户的课程评论信息记录；3、用户用于收藏公开课, 授课讲师, 授课机构以及用户消息提醒的记录；4、用户个人中心里面我的课程说明，用户和课程之间的学习信息记录；5、用户咨询消息的记录等。 如下图所示： c、开始数据库字段的定义打开我们的operation/models.py文件，添加并修改如下代码:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495from django.db import modelsfrom datetime import datetime# Create your models here.from users.models import UserProfilefrom courses.models import Course# 用户我要学习信息class UserAsk(models.Model): name = models.CharField(max_length=20, verbose_name=&quot;姓名&quot;) mobile = models.CharField(max_length=11, verbose_name=&quot;手机&quot;) course_name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &quot;用户咨询&quot; verbose_name_plural = verbose_name def __str__(self): return self.name # 这里很重要，否则在后台就显示不出Meta信息# 课程评论class CourseComments(models.Model): # 前面知道一个用户发表多个课程评论，所以在课程评论表中将用户设置为外键。 # 此处的user其实就是一个用来告诉我们这个课程评论属于哪个用户的字段 user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;) # 前面知道一门课程具有多个课程评论，所以在课程评论表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个课程评论属于哪个课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;) comment = models.CharField(max_length=200, verbose_name=&quot;评论&quot;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &apos;课程评论&apos; verbose_name_plural = verbose_name def __str__(self): return self.comment # 这里很重要，否则在后台就显示不出Meta信息# 用户收藏信息class UserFavorite(models.Model): # 前面知道一个用户可以收藏多个内容，所以在用户收藏表中将用户设置为外键。 # 此处的user其实就是一个用来告诉我们这个用户收藏属于哪个用户的字段 user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;) fav_id = models.IntegerField(default=0, verbose_name=&apos;数据Id&apos;) fav_type = models.CharField(choices=((&apos;1&apos;, &apos;课程&apos;), (&apos;2&apos;, &apos;课程机构&apos;), (&apos;3&apos;, &apos;讲师&apos;)), default=1, verbose_name=&apos;收藏类型&apos;,max_length=2) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &quot;用户收藏&quot; verbose_name_plural = verbose_name def __str__(self): return self.user # 这里很重要，否则在后台就显示不出Meta信息# 用户消息信息class UserMessage(models.Model): # 我们的消息有两种:一种是发给全员，另一种则是发给特定某一个用户。 # 所以如果使用外键，那么每个消息就要对应一个用户，比较难以实现全员消息的通知。 # 因此我们设置用户id,如果为0就发给所有用户，不为0就是发给特定Id的用户。 user = models.IntegerField(default=0, verbose_name=&quot;接收用户&quot;) message = models.CharField(max_length=500, verbose_name=&apos;消息内容&apos;) # 设置消息是否已读，采用布尔类型 BooleanField： False表示未读,True表示已读。 has_read = models.BooleanField(default=False, verbose_name=&apos;是否已读&apos;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &apos;用户消息&apos; verbose_name_plural = verbose_name def __str__(self): return self.message # 这里很重要，否则在后台就显示不出Meta信息# 用户课程信息class UserCourse(models.Model): # 前面知道一个用户可以学习多门课程，所以在用户课程表中将用户设置为外键。 # 此处的user其实就是一个用来告诉我们这个课程属于哪个用户的字段 user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&apos;用户名&apos;) # 前面知道一门课程可以有多个课程的信息，所以在用户课程表中将课程设置为外键。 # 此处的course其实就是一个用来告诉我们这个课程信息属于哪门课程的字段 course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&apos;课程&apos;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;学习时间&apos;) class Meta: verbose_name = &apos;用户课程&apos; verbose_name_plural = verbose_name def __str__(self): return self.user # 这里很重要，否则在后台就显示不出Meta信息 点击左侧的structure，我们可以看到如下的5个函数（数据表）：至此，我们所有apps都已经创建完成，它们所包含的数据库字段的定义也都完成。 注册我们的4个apps打开eduline/settings.py文件，找到第33行代码，在其中加入以下代码：123456789101112INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;, &apos;courses&apos;, &apos;organization&apos;, &apos;operation&apos;,] 如图所示： 数据库生成和迁移操作先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：12makemirgrationmigrate 上面是对所有apps都进行数据库生成和迁移操作，如果你想对某个app操作，你可以使用下面的命令：12makemirgration appnamemigrate appname 上图分别为makemirgrations和migrate过程中输出的信息。下图是由于我们做的改动导致文件的变动记录：courses/migrations/0001_initial.py:这个文件是我们migrations时生成的新initial文件，这是很重要的变动文件，不能随意删除。 打开Navicat，查看数据表我们看到许多自定义的表都已经有了，而且命名规则都是 app名称 + 我们的类名转变为小写： 现在我们打开django_migrations表去查看一下我们的migration记录： 0001_inital是初始文件，其他的表明该应用已经在运行了。 新建管理文件夹现在你看我们的目录树结构已经变成了这样：所有的应用apps都是直接裸露在树干上，如果有10个，甚至更多100个呢？这样的管理方式就显得很混乱，业务逻辑分离不够明显。这时，我们可以新建一个文件夹，专门用于apps的管理。 新建一个Python package,名字叫apps，把我们之前的4个apps都拖进去：不要勾选search for references,直接点击确定即可。现在就变成了这个结构，是不是好看多了：不过上面那种操作会出问题，系提示找不到那些import的模块：还得我们前面在回顾Django基础知识的时候，也出现过类似的情况，忘了的话可以查看这篇笔记：零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾 这里我们就直接设置文件查找路径了。打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：12345import os, sys# Build paths inside the project like this: os.path.join(BASE_DIR, ...)BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;)) 在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数，将项目的绝对路径与apps进行拼接，返回一个新的地址,插入第0是希望它首先在apps下面搜索我们的内容。 测试运行一下项目先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：runserver再回车：在浏览器地址栏中输入http://127.0.0.1:8000/或者http://127.0.0.1，出现：![](https://upload-images.jianshu.io/upload_images/8964398-d7faf520cd534d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)恭喜你，我们的Django网页已经跑起来了。 至此，我们关于在线教育网站项目的app应用的创建和数据库字段的定义就到此结束了，感谢你的赏阅！ 下一篇笔记，我们就开始进行后台的管理和配置了！ 本篇笔记对应于第八篇代码，对应于github的位置是https://github.com/licheetools/eduline","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)","slug":"零基础使用Django2-0-1打造在线教育网站（七）：数据库字段的定义-上","date":"2018-04-11T12:20:09.000Z","updated":"2019-11-04T13:13:50.352Z","comments":true,"path":"2018/04/11/零基础使用Django2-0-1打造在线教育网站（七）：数据库字段的定义-上/","link":"","permalink":"http://blog.licheetools.top/2018/04/11/零基础使用Django2-0-1打造在线教育网站（七）：数据库字段的定义-上/","excerpt":"","text":"写在前面本篇笔记主要就是对上篇遗留的2个问题的解决：4个app项目的创建和数据库字段的定义，鉴于篇幅的原因，这里分上下两篇进行介绍。 本篇笔记对应于第七篇代码，对应于github的位置是https://github.com/licheetools/eduline 4个app项目的创建users app的创建先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：1startapp users 然后在Navicat中打开我们的数据库eduline，会发现生成了很多表，我们打开其中的auth_user这个表：下面我简要说明一下表中个字段的含义： id代表主键, password是密码, last_login 这是Django用于自动记录用户最后登录时间的字段。is_superuser 表明用户是否是超级用户(后台管理中会用到)，username 表示用户名（该字段不要随便修改），last_name和first_name分别是姓和名，email 表示邮箱,is_staff 表示是否是员工(后台管理中会用到)，is_active 表示用户是否是激活状态,date_joined 表示注册时间。 这其实是满足不了我们的需求的，因为我们的个人中心通常包括：昵称，性别，生日，地址，手机号，邮箱等信息，所以我们要扩展这些字段来满足我们的需求。 user表的自定义方法官方文档已经给出了，这里开启传送大门https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。 打开我们的users/models.py文件，添加并修改如下代码:12345678910111213141516171819202122232425262728from django.db import modelsfrom datetime import datetime# Create your models here.from django.contrib.auth.models import AbstractUser # 导入需要的类class UserProfile(AbstractUser): # 昵称 nick_name=models.CharField(max_length=50,verbose_name=&apos;昵称&apos;,default=&apos;&apos;) # 生日，可以为空 birday=models.DateTimeField(verbose_name=&apos;生日&apos;,null=True,blank=True) # 性别，默认为女 gender=models.CharField(max_length=6, choices=((&apos;male&apos;,&apos;男&apos;),(&apos;female&apos;,&apos;女&apos;)),default=&apos;female&apos;,verbose_name=&apos;性别&apos;) # 地址 address=models.CharField(max_length=100,default=&apos;&apos;, verbose_name=&apos;地址&apos;) # 手机号，可以为空 mobile=models.CharField(max_length=11,null=True,blank=True, verbose_name=&apos;手机号&apos;) # 图片，默认为default.png,upload_to为上传路径，记住图片字段必须有字段最大值 image=models.ImageField(upload_to=&apos;image/%Y/%m&apos;,default=&apos;image/default.png&apos;,max_length=100,verbose_name=&apos;图片&apos;) # meta信息，即后台管理中的名称 class Meta: verbose_name= &apos;用户信息&apos; verbose_name_plural=verbose_name # 重载str方法，打印实例会打印username，username为继承自Abstractuser这个类 def __str__(self): return self.username 注意：1、按住ctrl然后单击我们的AbstractUser，就可以进入到这个类的定义文件：auth/models.py,这也就是我们之前导入的位置：看到没，我们之前保留的字段它都有，所以我们只需要继承它就可以了。2、前面说过CharField必须有max_length, 但实际上Imagefield也是Charfield，所以也要有max_length。3、因为使用到了Imagefield字段，所以需要用到Pillow这个库，我们可以通过Pycharm或者pip安装它。 注册APP和重载AUTH_USER_MODEL注册APP打开eduline/settings.py文件，找到第30行代码，最底下加上我们的app名称。123456789INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;,] 重载AUTH_USER_MODEL打开eduline/settings.py文件，在刚才代码的底下加上重载我们的UserProfile代码：123456789101112INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;users&apos;,]# 重载UserProfile使其生效AUTH_USER_MODEL=&apos;users.UserProfile&apos; 数据库更新点击Tools 菜单下 Run manage.py Task，运行我们的makemigrations users和migrate users命令。你会发现运行前者没问题，运行后者却出了问题：1django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin.0001_initial is applied before its dependency users.0001_initial on database &apos;default&apos;. 其实这个问题就是你之前已经定义了userProfile并且还设置了重载它的语句，现在又来定义它，它是不会再给你提供那么多的初始表的：所以我们需要删除除了auth_user以外的其他表，如果一次删除不了（那是因为表与表之间存在外键联系）就一个个的删除：现在再来点击Tools 菜单下 Run manage.py Task，按顺序运行如下命令：1234makemigrationsmigratemakemigrations usersmigrate users 注意：只运行后面那2个命令是不可以的，会缺少部分表！！！ 看到没，这次没有问题出现了：打开数据库，看一下我们的表，一共有11个表：打开这个自定义表（users_usersprofile）,你会发现我们需要的字段都有了： 注意一下我们以后不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错了。 至此我们完成了第一个app的配置和其自定义字段的设计！ 循环引用看下面这个图：我们通常会在user中定义userCourse这个字段，用来记录用户学习的课程，它会有两个外键：user和course。所以在用到的时候，我们需要import Courses.models。 同样，如果用户对于某个课程需要评论，那么我们需要定义CourseComment这个字段，而且它肯定会放在 Courses.models当中。所以在用到的时候，我们又需要import User.models。 这是只有2个app的情况，当还有更多的情况：3个，4个，5个…apps时，循环调用import会出错导致系统不能正确识别，而且最起码会造成时间上的等待。那么有没有好的方法来解决这个问题呢？答案是有的！可以采用分层设计的思想来解决这个难题。 分层设计在前面的第六篇笔记中我们已经说过，准备新建4个app,其中的3个apps: (users)用户版块,(course)课程版块,(organization)授课教师与授课机构板块, 就是一些常规的信息存储，而第4个(operation)用户操作板块就是采用分层设计的思想来设计的，而且我们保证operation这个app的优先级高于其他3个，所以可以随时import这些底层的apps。各个apps的层级关系如下图所示：在users这个app中，我们自定义了UserProfile这个表用来覆盖系统默认的user表。这样其实我们这个users应用已经设计完了。不过呢，通过研究我们发现有些功能是非常独立的，我们为了平衡一些app的代码量，可以将它们放在这个users项目里面。 EmailVerifyRecord - 邮箱验证码Banner - 轮播图 邮箱验证码的设计验证码分三种类型，分别用于不同的功能：注册；找回密码；修改邮箱，所以在设计验证码类型的时候注意选择的条件，通常验证码包括这些字段：code,email,send_type,send_time。 我们打开users/models.py文件，接着之前的代码在后面添加如下内容:123456789101112131415161718from datetime import datetimeclass EmailVerifyRecord(models.Model): code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;) email = models.EmailField(max_length=50, verbose_name=&quot;邮箱&quot;) send_type = models.CharField(verbose_name=&quot;验证码类型&quot;, choices=((&apos;register&apos;, &apos;注册&apos;), (&apos;forget&apos;, &apos;找回密码&apos;), (&apos;update_email&apos;, &apos;修改邮箱&apos;)), max_length=30)# 这里的now得去掉(),如果不去掉则会根据编译时间，而不是我们要的实例化时间。 send_time = models.DateTimeField(verbose_name=&quot;发送时间&quot;, default=datetime.now) class Meta: verbose_name = &quot;邮箱验证码&quot; verbose_name_plural = verbose_name def __str__(self): return self.email #这里很重要，否则在后台就显示不出Meta信息 轮播图的设计轮播图是一个可以自动切换图片的效果，它包括标题，具体的图片，点击图片后的跳转地址，图片的轮播顺序，添加时间等要素：title,image,url,index,add_time。我们打开users/models.py文件，接着之前的代码在后面添加如下内容:123456789101112131415class Banner(models.Model): title = models.CharField(max_length=100, verbose_name=&quot;标题&quot;) image = models.ImageField(max_length=100, upload_to=&apos;banneer/%Y/&amp;m&apos;,verbose_name=&quot;轮播图&quot;) url = models.URLField(max_length=200, verbose_name=&apos;访问地址&apos;) # index的值默认越大越靠后，可以自定义修改index值。 index = models.IntegerField(default=100, verbose_name=&apos;轮播顺序&apos;) add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;) class Meta: verbose_name = &quot;轮播图&quot; verbose_name_plural = verbose_name def __str__(self): return self.title # 这里很重要，否则在后台就显示不出Meta信息 你可能会问，为什么不把与用户相关的评论，点赞，学习的课程，课程进度等信息也放到这个app中呢？其实是因为那些信息的相关性很大，经常是循环引用，所以我们把那些信息都放到operation这个app中。 我们把鼠标移至models.py这个文件上，再点击右侧的structure，可以发现我们刚才新创建的3个类（其实就是数据库里的数据表）： 至此第一个app应用的数据库字段定义算是完成了，下面大家可以思考一下其他3个应用的数据库字段的定义应该是怎样的，给大家留点时间思考一下，我们下一篇笔记再来介绍！下面介绍一个Python的规范，可以让你的代码更具有可读性和维护性。 PEP8规范（一） 代码的编排1、 缩进。每行需要4个空格的缩进，不要使用Tap键，更不能混合使用Tap键和空格。2 、每行最大长度79，换行可以使用反斜杠，但最好使用圆括号。换行点要在操作符的后边敲回车。3 、类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。 （二 ）文档的编排1、 模块内容的顺序：模块说明和docstring—import—globals&amp;constants—其他定义。其中import部分，又按标准、第三方和自己编写顺序依次排放，之间空一行。123456from django.db import modelsfrom datetime import datetime# Create your models here.from django.contrib.auth.models import AbstractUser# 自己定义代码放置处 2 、不要在一行import多个库，比如import os, sys，虽说没有错误但是并不推荐。3、 如果采用from xx import xx的方式来引用某个库，可以省略module.，但是可能会出现命名的冲突，所以这时就要采用import xx的方式。 （三）空格的使用总体原则，避免不必要的空格。1、 各种右括号前不要加空格。2、 逗号、冒号、分号前不要加空格。3 、函数的左括号前不要加空格。如function(1)。4 、序列的左括号前不要加空格。如list[2]。5、操作符左右各加一个空格，不要为了对齐增加空格。6 、函数默认参数使用的赋值符左右省略空格。7、不要将多句语句写在同一行，尽管使用；允许。8、 if/for/while语句中，即使执行语句只有一句，也必须另起一行。 （四）命名的规范总体原则，新编代码必须按下面命名风格进行，现有库的编码尽量保持风格。1 、尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。2、 模块命名尽量短小，使用全部小写的方式，可以使用下划线。3、 包命名尽量短小，使用全部小写的方式，不可以使用下划线。4、 类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。5、 异常命名使用CapWords+Error后缀的方式。6 、全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是all机制;二是前缀一个下划线。7 、函数命名使用全部小写的方式，可以使用下划线。8 、常量命名使用全部大写的方式，可以使用下划线。9 、类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。10、类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。11 、类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。12 、为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明a,访问时，只能通过Foo._Fooa，避免歧义。如果子类也叫Foo，那就无能为力了。13 、类的方法第一个参数必须是self，而静态方法第一个参数必须是cls。 （五）编码的建议1、编码中考虑到其他python实现的效率等问题，比如运算符‘+’在CPython（Python）中效率很高，都是Jython中却非常低，所以应该采用.join()的方式。2 、尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。3 、使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。4 、异常中不要使用裸露的except，except后跟具体的exceptions。5 、异常中try的代码尽可能少。比如：123456try:value = collection[key]except KeyError:return key_not_found(key)else:return handle_value(value) 要优于123456try:# Too broad!return handle_value(collection[key])except KeyError:# Will also catch KeyError raised by handle_value()return key_not_found(key) 6 、使用startswith() and endswith()代替切片进行序列前缀或后缀的检查。比如:Yes: if foo.startswith(‘bar’):优于No: if foo[:3] == ‘bar’:7 、使用isinstance()比较对象的类型。比如:Yes: if isinstance(obj, int):优于No: if type(obj) is type(1):8、 判断序列空或不空，有如下规则:12Yes: if not seq:if seq: 优于12No: if len(seq)if not len(seq) 9 、字符串不要以空格收尾。10、二进制数据判断使用 if boolvalue的方式。 如果你想获得更多关于PEP8的信息，可以查阅这篇信息PEP8 Python 编码规范整理或者官方文档PEP8的官方文档 至此，我们第七篇：在线教育网站的数据库字段的定义(上)就到此结束了，感谢你的赏阅。下一篇，我们就完善其余3个apps应用的数据库字段的定义。 本篇笔记对应于第七篇代码，对应于github的位置是https://github.com/licheetools/eduline","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置","slug":"零基础使用Django2-0-1打造在线教育网站（六）：教育网站开发配置","date":"2018-04-10T12:11:10.000Z","updated":"2019-11-04T13:13:39.721Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（六）：教育网站开发配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/10/零基础使用Django2-0-1打造在线教育网站（六）：教育网站开发配置/","excerpt":"","text":"写在前面小伙伴们，今天终于进入了我们在线教育网站的项目开发阶段，这是这个项目的第一篇，主要给大家创建我们的虚拟环境和相关软件的安装（可能部分软件的安装在前面已经介绍了，这里就不再赘述了，必要的时候会开启传送大门。） 本篇笔记对应于第六篇代码，对应于github的位置是https://github.com/licheetools/eduline 虚拟环境配置首先请大家回顾阅读一下我们之前写的第二篇：零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置，然后我会给大家演示这个项目的虚拟环境配置，作用就是加深大家对虚拟环境搭建的印象。 1、创建虚拟环境eduline（名字可以随意取）12345678910C:\\Users\\YC&gt;F: # 进入F盘F:\\&gt;cd Envs # 进入到Envs这个文件夹（系统默认在C盘，我自定义在F盘）F:\\Envs&gt;mkvirtualenv eduline # 创建虚拟环境edulineUsing base prefix &apos;f:\\\\python\\\\pystall&apos;New python executable in F:\\Envs\\eduline\\Scripts\\python.exeInstalling setuptools, pip, wheel...done.(eduline) F:\\Envs&gt; # 表示已经进入到eduline这个虚拟环境中 2、安装Django2.0.112345678910111213(eduline) F:\\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple # 采用清华镜像源安装djangoLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleCollecting django==2.0.1 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB) 100% |████████████████████████████████| 7.1MB 2.9MB/sCollecting pytz (from django==2.0.1) Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB) 100% |████████████████████████████████| 512kB 1.5MB/sInstalling collected packages: pytz, djangoSuccessfully installed django-2.0.1 pytz-2018.5 # 提示已经安装成功了，新版本会自动安装pytz这个库(eduline) F:\\Envs&gt; # 然后就可以开始pip安装库和包了 3、创建我们的django项目打开Pycharm，新建django项目，各步骤如下（这里演示的是没有虚拟环境的版本，已经有虚拟环境的直接点击Existing interpreter，选择已有的虚拟环境即可）： 至于各个箭头所填内容的原因，我这里就不再说明了，如果忘记了可以翻看之前的第二篇笔记。最后点击确定按钮即可，进入到如下页面： 至此，虚拟环境以及项目的搭建就完成了。 mysqlclient的安装正如你前面所看到的，因为我们后面需要连接数据库，所以数据库驱动mysqlclient的安装是必不可少的，这里就先安装一下。（零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发，前面已经介绍过了，所以这里简单演示一下即可）这里就采用网上下载到本地的方式来安装一下：1、点击下面的蓝色字，即可跳转到下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住Ctrl+F键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！2、将下载好的mysqlclient放置到虚拟环境eduline里面： 3、在虚拟环境中安装mysqlclient，如图所示：12345678910111213C:\\Users\\YC&gt;F:F:\\&gt;cd Envs F:\\Envs&gt;workon eduline(eduline) F:\\Envs&gt;cd eduline # 必须进入到你的项目中才能开始安装，否则会出错(eduline) F:\\Envs\\eduline&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whlProcessing f:\\envs\\eduline\\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whlInstalling collected packages: mysqlclientSuccessfully installed mysqlclient-1.3.13(eduline) F:\\Envs\\eduline&gt; 4、配置settings.py文件打开eduline/eduline/settings.py文件，找到第77行代码：123456DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;&#125; 修改为如下代码：123456789DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;eduline&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;密码&apos;, &apos;HOST&apos;:&apos;127.0.0.1&apos; &#125;&#125; 5、新建数据库eduline打开Navicat，新建数据库eduline:然后点击Tools 菜单下 Run manage.py Task，运行我们的makemigrations和migrate命令，最后运行一下我们的项目：runserver，在浏览器地址栏中输入：http://127.0.0.1:8000/或者（http://127.0.0.1）出现：![](https://upload-images.jianshu.io/upload_images/8964398-dcc125590f7a79d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)表明我们的项目初始搭建完成了。 Xadmin的安装尽管Django自带了admin用于后台的管理，但是我们觉得它的可支配性不是很大，所以这里推荐采用Xadmin来对后台进行管理。（还有一个叫做django-suit的插件，它其实只是美化了admin，功能上并没有做过多的拓展，这里开启传送大门，有兴趣的可以了解一下：django-suit官网）大家可以点击这里下载xadmin（下载后的文件放置位置，后面会介绍，这里你先新建一个文件夹A临时存放一下！） DjangoUeditor的安装因为后面课程的添加需要富文本的支持，所以需要用到富文本插件，这里依旧开启传送大门：大家可以点击这里下载DjangoUeditor（下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！） 课程的前端初始代码因为我们这里主要说的是前端，所以这个在线教育网站的前端页面源代码就直接给大家了，大家自行下载，开启传送大门：初始前端源码.rar（下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！） 至此，项目开发所需要的额外软件算是准备完全了，接下来则是业务逻辑分析了。 业务逻辑分析其实在第一篇的时候我们就已经介绍完了这个网站的业务逻辑，但是鉴于时间的原因，我这里再次介绍一下，其目的就是让大家更加的熟悉我们的业务逻辑，为接下来数据库的设计做一个铺垫。12345678910111213141516171819202122232425262728293031点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。日志记录：它可以记录后台人员的操作情况。其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。 所以我们的app一共有4个，用于分别实现不同的功能，具体如下： (users)用户版块：负责记录用户的个人信息，轮播图等相关内容, (course)课程版块：用于记录课程相关的内容, (organization)授课教师与授课机构板块：用于记录授课讲师，机构相关内容, (operation)用户操作板块：用于记录用户操作的相关内容。 关于这4个app项目的创建和数据库字段的定义，我们下一篇笔记再介绍。接下来我们介绍如何利用Pycharm来同步更新代码至github，前面那篇介绍了如何利用Pycharm来新建repositories 并把代码上传过去，这次就是介绍如何更新之前上传的代码了。 利用Pycharm来同步更新代码至github其实很简单的，分2个步骤。1、点击菜单栏下的VCS，下拉找到第三个Commit，点击一下，就会出现下面的页面：选择完以后，点击下面的commit按钮，至此第一步就完成了，接下来第二步。2、还是点击菜单栏下的VCS，下拉找到第八个Git，点击一下，下拉找到那个倒数第四个Push按钮，点击一下，就会出现如下页面：如果你第一步Commit的话，这里就有你上传的Commit信息，我这第一步因为没有提交所以就没有了。然后选择你的提交项目，点击下面的Push按钮，等待几分钟，去你的Github仓库看一下，发现出现了：那么恭喜你，你已经Get了这个技能。 至此本篇关于‘’教育网站开发配置‘’的笔记就到此为止了，下一篇就开始4个app项目的创建和数据库字段的定义的介绍了，感谢你的赏阅。 本篇笔记对应于第六篇代码，对应于github的位置是https://github.com/licheetools/eduline","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（五）：简易留言簿交互实现","slug":"零基础使用Django2-0-1打造在线教育网站（五）：简易留言簿交互实现","date":"2018-04-10T11:57:33.000Z","updated":"2019-11-04T13:21:19.056Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（五）：简易留言簿交互实现/","link":"","permalink":"http://blog.licheetools.top/2018/04/10/零基础使用Django2-0-1打造在线教育网站（五）：简易留言簿交互实现/","excerpt":"","text":"写在前面本篇笔记主要是简易留言簿的交互实现，笔记中本篇（第五篇）对应上传的仓库为:https://github.com/licheetools/djangoTest对应第五篇截止代码。 好了，我们先来看一下我们上篇笔记的最终效果： 交互实现对象关系映射ORM通常而言，为了实现我们数据意义上的增删改查，你可能会选择使用原生的数据库查询语句如:select * from database where id =8;又比如下面一段代码：12345678910111213import MySQLdb # 导入数据库驱动模块def book_list(request): # 使用原生sql获取书的列表 # 创建一个数据库的连接: 指明用户名，数据库名，密码，服务器名 db = MySQLdb.connect(user = &apos;me&apos;, db=&apos;mydb&apos;, passwd=&apos;secret&apos;, host=&apos;localhost&apos;) # 创建一个游标对象执行器 cursor = db.cursor() # 书写我们需要的sql语句，可以在Navicat中执行 cursor.execute(&apos;SELECT name FROM books ORDER BY name&apos;) # 对于fetchall()的结果做遍历，并将遍历回来的结果当做数组，再取出第0个值name（必须一一对应）。 names = [row[0] for row in cursor.fetchall()] db.close() 尽管这种方法可以对数据进行操作，但是一旦需要进行操作的数据过多而且不仅仅是查询操作，这种方法就显得很捉襟见肘了。那么有没有一种简便的方法呢？答案是有的！这就用到了我们的ORM了。 对象关系映射（英语：(Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换 。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。 你可以借鉴面向对象编程的思想这么理解，把数据当做对象（事实上在面向对象编程的思想里，一切都是对象，别忘了Python也就是面向对象编程语言），那么它就有方法和属性了。举个例子来说：car，它的属性可以是颜色（color），大小（size），长度（length）等，可以这么表示为1car.color car.size car.length ；它的方法可以是启动（start），运行（run），停车（stop）等,也可以这样表示为：1car.start() car.run() car.stop() 创建我们的models(数据库信息)从前面的描述中你就知道了，models.py这个文件就是用于数据库的操作，包括连接，访问，数据定义，修改等，接下来我们就开始定义数据，写我们的代码了。在空白处输入以下代码：12345678910class UserMessage(models.Model): # 继承于django.db.models.Model# max_length设置最大长度，verbose_name在后台显示字段会用到，也就是中文显示文本内容 name = models.CharField(max_length=20, verbose_name=&quot;昵称&quot;) email = models.EmailField(verbose_name=&quot;邮箱&quot;) address = models.CharField(max_length=100 ,verbose_name=&quot;联系地址&quot;) message = models.CharField(max_length=500, verbose_name=&quot;你的轨迹&quot;) class Meta: verbose_name = &quot;用户留言信息&quot;# class Meta，内嵌于 UserMessage 这个类的定义中，主要是用于后台管理显示中文信息 前面说到，一旦数据发现变动就必须执行我们的makemigrations和migrate操作，我们运行一下：为什么会这样呢，怎么一点反应也没有，其实因为你还没有把新创建的apps在setting中注册，所以才会出现这样的情况。 在settings.py中注册我们新创建的apps在djangoTest/settings.py 第33行的INSTALLED_APPS:的尾部加上一行代码&#39;liuyan&#39;,如下图所示：123456789INSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;liuyan&apos;,] 这时候我们再来重新运行Tools 菜单下 Run manage.py Task然后输入makemigrations或者makemigrations liuyan,因为这里只有一个app所以我就直接makemigrations，多个可以根据自己的需要来选择makemigrations的对象，如下图所示：接着运行migrate命令：提示生成了一些文件信息，我们打开Navicat去看一下：看到没，我们的数据信息在数据库成功显示了。默认数据表的名称为app名称_类名（转换为小写），自动生成的id作为主键（数据查询必备，这里系统给我们自己添加了）。 关于Models的一些说明前面我们用到了一些字段如CharField，EmailField等，还有一些这里没用到但是今后会用到的字段，我列举了一下：1234567models.TextField # 文本注意与CharField的区别，范围大小不一样models.ForeignKey # 外键models.DateTimeField # 时间models.IntegerField # 整型models.IPAddressField # IP地址models.FileField # 文件models.ImageField # 图片 如果你想看全部的信息可以，将光标放在models上面，按住ctrl+然后单击，进入models/–init–.py文件，之后以同样的操作点击任意一个fields单词，就可以打开fields/–init–.py文件了，在最前面就可以看到所有字段： 字段参数的说明1、CharField必须指明默认的最大长度（max_length）。null=True,blank=True指明字段可以为空,defalut = “ “指定默认值为空。通常我们地址这一栏可以为空，所以修改如下：1address = models.CharField(max_length=100 ,null=True,blank=True,verbose_name=&quot;联系地址&quot;) 2、表的id是自动生成的，如果需要自定义主键,那么需要在models.py中添加字段：1object_id = models.CharField(primary_key=True,max_length=100 ,verbose_name=&quot;主键&quot;) 再来makemigrations和migrate一下：我们发现出错了，其实是要求我们需要给object_id添加默认值，那我们默认为空：1object_id = models.CharField(primary_key=True,max_length=100,default=&quot;&quot; ,verbose_name=&quot;主键&quot;) 重新运行一下，makemigrations和migrate：我们现在再次刷新一下Navicat，发现系统默认生成的主键id没了,主键变成了我们自定义的object_id。右键liuyan_usermessage这个表，选择设计表打开： Meta的说明1、在Meta信息中我们可以指定表的名称，如db_table：1db_table = &quot;user_liuyan&quot; 2、可以指定排序的字段，如ordering：1ordering = &apos;object_id&apos; 这是以其升序的，倒序的话只需要这样ordering = &#39;-object_id&#39;即可。3、可以更改后台信息，如verbose_name_plural：verbose_name_plural是verbose_name的复数形式，如果不改则会在其后面加s。1234verbose_name = &quot;用户留言信息&quot;则verbose_name_plural 会显示 &quot;用户留言信息s&quot;，所以一般这2个的值都是相同的即verbose_name =verbose_name_plural=&quot;用户留言信息&quot; 由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！ 至此，所有Django的基础知识我们就回顾完了，下一篇正式开始在线教育网站的项目开发！ 笔记中本篇（第五篇）对应上传的仓库为:https://github.com/licheetools/djangoTest对应第五篇截止代码。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发","slug":"零基础使用Django2-0-1打造在线教育网站（四）：简易留言簿基础开发","date":"2018-04-10T09:23:25.000Z","updated":"2019-11-04T13:20:59.652Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（四）：简易留言簿基础开发/","link":"","permalink":"http://blog.licheetools.top/2018/04/10/零基础使用Django2-0-1打造在线教育网站（四）：简易留言簿基础开发/","excerpt":"","text":"写在前面本篇笔记主要是简易留言簿的基础开发，接下来的一篇才是开发的重点，但是这样为了缓冲一下大家，希望大家不要有大大的鸭梨。。。笔记中上篇（第三篇）对应上传的仓库为:https://github.com/licheetools/djangoTest对应第三篇截止代码。我们从这开始正式进入到简易留言簿的基础开发。（前面的必要工作已经做完，如果没跟上节奏，请回头补上，这里就不细说了。） 页面介绍这个页面就是我们即将开发的简易留言簿，初始页面就是这样，关于这个页面的实现是html和css搭建的，这是前端的部分，有兴趣的小伙伴自己去查找资料学习一下，这里因为只讲后端，就不介绍了哈。 这里主要是介绍Django从请求到响应的整个完整流程，为我们后面开发在线教育平台打下基础。本篇笔记所要用到的静态html页面请前往Github下载：start.html 业务逻辑介绍用户填写信息和留言 –&gt; 点击提交 –&gt;数据被存储到数据库（我们可以去数据库查询的到）。 开始分析1、将下载的start.html文件拖到前面创建的templates文件夹里，如下图：2、通过观察我们发现，这个页面里面把所需的css样式都写进去了，不利于我们对其样式的个性化管理，所以我打算新建一个css文件，用于存放css样式表单。 在static的下面新创建css和js文件夹，可能js文件夹用不上，但是这也是为后面的开发在线教育平台打下基础，你最好也试着创建一下，一般这些文件都是经常用到的。（这里因为功能的原因用不上。）然后在css这个文件夹下面新建一个style.css的文件。3、打开start.html，点击&lt;style&gt;标签，将样式收起来，然后将其复制到刚才新建的style.css这个样式表中。记得在复制的时候把开头和结尾的&lt;style&gt;标签给去掉，并且可以按键盘上的shift + tab键，格式一下代码。就是下面的样子！ 4、别忘了将你新建的css样式文件引入到我们的html文件里去，否则后面文件的样式可能就加载不出来呀。事实上，我们在html里面已经引入了。 数据库的连接5、打开djangoTest这个项目目录下面的settings.py文件，找到下面第80行代码，因为Django自带的数据库是sqlite3，前面说过我们采用的数MySQL数据库，所以需要对其进行修改。也就是说默认的连接是这样的：123456DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;&#125; 但我们应当修改成这个样子：123456789DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;djangoTest&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;密码&apos;, &apos;HOST&apos;: &quot;127.0.0.1&quot; &#125;&#125; 我们中在Navicat中新建的数据库名字与其中的NAME的名称应设置为一致，否则会出错！！6、在Navicat中新建的数据库djangoTest，如图： 安装 mysqlclient和配置seeting文件。7、点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。 还记的在Pycharm里面安装第三方库么？如果不记得请翻看前面的笔记。这里简单说明一下：点击4中的绿色+号，就可以搜索第三方库，然后点击install即可，是不是很简单，但有时候会出现安装失败的情况，所以最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门，https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住`Ctrl+F`键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。![](https://upload-images.jianshu.io/upload_images/8964398-20977829a37ddad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！ 8、在虚拟环境中安装mysqlclient，如图所示：注意安装的命令是：pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl（后面的是你刚才下载的版本名称，带whl）9、接下来我们再次点击Tools 菜单下 Run manage.py Task，我们会发现刚才的错误不再出现了。 makemigrations和migrate10、现在介绍一下我们前面讲到用于数据迁移的两个命令：makemigrations和migrate，下面我们分别运行这两个命令，看有什么大的变化。在调用makemigrations这个命令之后，结果是这样的：紧接着，在调用migrate这个命令之后，结果变成这样了：我们会发现它生成了好多文件，我们打开Navicat中新建的数据库djangoTest，发现了很多表：这些都是Django系统默认的内置数据表，我们在后面会用到它们。11、运行一下我们的项目：runserver，然后到http://127.0.0.1:8000/来访问看是否运行成功。如果成功，则页面显示It worked。最后结果如下： 你可能会问，为什么显示的不是留言这个页面，而是原始页面呢？那是因为我们还没有配置app的信息，下面开始配置。 展示留言页面12、将djangoTest/urls.py修改如下:1234urlpatterns = [ path(&apos;admin/&apos;, admin.site.urls), path(&apos;start/&apos;, getstart), # 新增加的一行] 这里新增加path(‘start/‘, getstart),是代表以start为开头的地址。getstart 是这个url相对应连接（映射）的view。我们先去创建一个视图函数，其名字就是getstart。13、在apps/liuyan/views.py添加如下代码：12def getstart(request): return render(request, &apos;start.html&apos;) request 这个参数是django的一个httpRequest对象，关于它的用法你可以按住ctrl + 左键 跟踪到我们的render函数里面。Alt + 左箭头返回原位。一般来说，render函数，我常用的就是它的2个参数：request和template-name。上图中start.html就是我们的原始页面名称。14、回过头，对我们之前的urls.py进行重新配置完善：也就是12步中的urls.py，增加一行包的引入：1from liuyan.views import getstart 变成了这个样子：15、重新启动运行一下我们的项目：runserver，发现报错了：其实并没有报错，只是因为我们在path中加入了自己的配置’start/‘,它就不会采用默认配置了，所以我们的IP地址应该是：http://127.0.0.1:8000/start/。你点进去看看：现在页面出来了但是样式却没有加载成功，也就是说static/css/style.css文件没有找到。那是因为setting.py中静态文件的配置出了问题，第124行代码需要修改。它只说明了目录的名称，并没有指明查找的根路径，所以需要添加下面代码：1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = [ os.path.join(BASE_DIR, &apos;static&apos;)] 16、我们再次运行一下:runserver。如果你前面没有按ctrl+v停止，那你只需要ctrl+s 即可重新刷新运行。最后运行结果如下：成功了，这就是今天最基本的页面信息配置了，把页面动态加载出来了。下一篇笔记将给这个动态的留言板加交互特效了。 不过很多小伙伴说，自己看的是云里雾里，对这个过程不熟悉，自己没有接触过MVC、MVVC等网页设计模式，所以我总结一下这个项目的配置流程。 项目配置流程图刚才的流程顺序1、把html文件导入进来；2、通过简单的url配置来访问这个html；3、发现找不到页面，所以我们就设置setting中DIRS路径；4、页面可以正常显示，但css样式不能正常加载，我们设置了STATICFILES_DIRS；。。。这样一步的，我们发现经常遇到错误，其实我们是从倒的顺序来执行的，目的就是让大家能通过很多的错误来加深自己对Django开发流程的熟悉程度。 正常的开发流程看到没有，这样做的好处就是避免少犯错误。你可以尝试以顺的顺序来创建一个新的项目，试着体会一下这2种开发顺序的感觉。 后面我们的开发会从migration生成数据表这里开始往下编辑内容。本篇笔记中对应上传的仓库为:https://github.com/licheetools/djangoTest对应第四篇截止代码。 至此，简易静态留言簿的基础开发就到这里了，感谢你的赏阅。下一篇将实现留言簿的交互功能。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（一）：项目介绍","slug":"零基础使用Django2-0-1打造在线教育网站（一）：项目介绍","date":"2018-04-10T09:03:19.000Z","updated":"2019-11-04T13:21:28.804Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（一）：项目介绍/","link":"","permalink":"http://blog.licheetools.top/2018/04/10/零基础使用Django2-0-1打造在线教育网站（一）：项目介绍/","excerpt":"","text":"写在前面嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习慕课网时的一些笔记，希望对即将学习Django的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。 项目介绍Django介绍Django是目前Python Web开发中的主流框架，因为它有许多功能强大的第三方插件，你可以很方便的开发出自己的工具包，这使得它具有很强的可扩展性，被许多大型公司使用，如Google，豆瓣，YouTube，知乎，instagram等。 在线网站介绍我们这个网站功能强大，具有完整的个人中心，用户登录，注册以及找回密码等功能。下面分别介绍各个部分的功能：12345678910111213141516171819202122232425262728293031点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。日志记录：它可以记录后台人员的操作情况。其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。 学完过后你不仅对Django的基础知识有了一个比较深刻的印象，还对MTV，MVC模式有了一个更加全面的了解，举一反三，你可以利用它开发各种类型的网站，如电商购物,在线旅游，公司官网，个人博客等其他网站。具体可以点击查看这个基于django的网站（可能要翻墙的哈）。 开发环境介绍环境介绍网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发. 后台介绍采用xadmin进行开发。之前用过django-suit，发现它只是单纯的对admin进行了美化，并没有更高级的功能。鉴于此，我们推荐使用xadmin进行后台管理。它有许多的拓展功能，如下所示：12345xadmin常用插件自定义xadmin插件xadmin的富文本编辑xadmin的excel导入功能。一些开源的django开发库。 到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。 补充资料1、[入门] 菜鸟Django 教程，非常简短的教程，可以快速让你有一个清楚的认识。2、[基础] 自强学堂Django，非常不错的教程，可以没事看一看。3、[基础] 刘江的Django教程，非常适合入门的小白阅读，还有2个例子供你练习。4、[入门] 1元学习《Django零基础到项目实战》，非常不错的基础入门视频教程。5、[基础]用Python Django快速做出高大上的BBS论坛网站，这是免费的视频教程，大家可以试着去练手。","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾","slug":"零基础使用Django2-0-1打造在线教育网站（三）：Django基础知识回顾","date":"2018-04-10T09:03:19.000Z","updated":"2019-11-04T13:13:59.709Z","comments":true,"path":"2018/04/10/零基础使用Django2-0-1打造在线教育网站（三）：Django基础知识回顾/","link":"","permalink":"http://blog.licheetools.top/2018/04/10/零基础使用Django2-0-1打造在线教育网站（三）：Django基础知识回顾/","excerpt":"","text":"写在前面在前面的第二篇里，我们创建了一个名为djangoTest的项目，现在我们通过利用这个项目制作一个简单的留言簿来对django的基础知识进行一个回顾。笔记中本篇对应上传的仓库为:https://github.com/licheetools/djangoTest对应第三篇截止代码。 知识目录在前面创建Django的时候，你会出现这样的目录结构，但是在运行命令manage.py runserver 8000之后，你会发现变成了下面这个样子：看到没，是不是多了一个db.sqlite3文件，这是因为你在运行的时候联接了已经存在的数据库，从而自动生成了一个sqlite3文件。 好，接下来介绍一下该目录树的结构以及各个节点文件的作用（为了更加清楚准确的介绍，我把这个结构树分为了6个部分）： 1、djangoTest: 这个djangoTest与2中的不一样，这是树的开始，也就是主目录； 2、djangoTest: 这个djangoTest与1中的不一样，这是项目目录，记住主目录和项目目录名称是一样的，且在创建Django项目的开始时候确定；对于2中的文件介绍如下： –init–.py: 一个空文件，用于告诉计算机这是一个Python包;settings.py: 用于对项目的全局进行配置的文件（该 Django 项目的设置/配置）；urls.py: 主要的urls配置入口（该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”）;wsgi.py: 是Django启动的必须文件（一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目）； 3、templates：它的作用是放置静态的html文件 4、db.sqlite3: 用于保存数据，开始没有，必须运行之后才有，且不固定，Django默认是sqlite数据库，但你也可以用MySQL，自然文件类型就发生改变了，但都是数据库文件。 5、manage.py： 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互（启动Django需要的主要文件，主要的Django命令都通过manage.py来运行) 6、External Libraries：这是扩展包的入口（外部库存放地址）。 上面只是project（项目），但是真正来实现各种不同功能的却是各种app（应用）,下面我们来利用pycharm创建app。 项目与应用你可能会有疑惑，我们之前都已经创建了djangoTest这个项目，为什么还要创建各种app应用呢？别急，我来告诉你其中的原因，我们以常用的手机软件微信来说明这个道理。你知道微信这个手机软件的名字对吧，其实这个名字就是一个项目，而且你还知道微信可以用来语音聊天，视频聊天，发图片，文字。。。等，这些不同的功能我们就称之为应用。现在明白了吧，不同功能的应用构成了项目。那么问题来了，我们如何利用Pycharm来创建app呢？ 利用Pycharm创建app第一步：在 Tools -&gt; Run manage.py Task进入创建app的命令入口；第二步：在命令入口输入创建命令startapp appname,然后回车即可。你会发现生产了一个新的应用，而且目录树的结构发生了变化，多了这么一个东西：这个红色框里面的都是我们刚才创建liuyan这个app里面的文件，下面继续给大家介绍一下新目录树的结构和节点文件。 1、migrations:它是一个Python包，里面目前只有–init–.py这个用于计算机识别这个包的空文件，这个包是用来存放数据迁移文件的，每次数据的变动，我们都需要更新数据库，否则会出错，更新的命令是makemigrations和migrate而且顺序不能对换！关于这一点，我后面还会继续说明，这里你只需要有一个大概的认识即可;2、admin.py: 用于身份验证；3、apps.py: app信息；4、models.py： 用于数据定义；5、tests.py： 用于app测试；6、views.py： 用于视图的创建。 创建static文件夹当然我们的项目肯定不只有html,肯定还有javascript,css，图片等文件，所以我们需要创建一个static文件用于存放静态的文件。将鼠标移至djangoTest这个主目录上，右键new–&gt; python package–&gt;写入名字static回车即可！如图： 创建log文件夹当然，我们还需要创建log文件夹，用来存放网站的日志文件，这是必不可少的。 创建media文件夹与此同时，因为是Web应用，就必须有一个用于存放用户上传的图片，视频等资源文件夹。 至此，web的文件夹都已经创建完成了。 创建apps文件夹但是还有一个问题，正如你所知道的一个项目是由很多个app构成的，我们不可能每个app都直接放在项目根目录下，这样会导致我们的文件夹太多了，不利于管理，所以我们可以新建一个apps文件夹，用于存放各个app，这样就好看多了。然后将我们刚才新建的liuyan这个app拖入到apps这个文件夹里面，会自动生成一个init文件。 不过这样做就是有一个坏处，就是我们在导入包的时候可能会出错误，我们需要每次在导入的时候前面加上apps.,这样太麻烦了， 但是我有方法可以解决这个问题，往下看：我们可以在apps这个文件夹上面，右键拉到底部，看到Mark Directory as以后单击Sources Root即可，你会发现apps这个文件夹变成了蓝色（前面第一篇有介绍）。 其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数来，将项目的绝对路径与apps进行拼接，返回一个新的地址。 至此，前期准备我们做完了，接下来便是开始敲我们的留言簿代码了。有朋友问我如何利用Pycharm把代码直接分享（上传）到github 仓库，这里我简单介绍一下。 利用Pycharm把代码直接上传到github 仓库在此之前，你的电脑需要安装git和你必须要有一个github账号，在这里我就不详细介绍这些了，直接开启传送大门，点这里。GitHub的注册与使用（详细图解)或者这个 GitHub账户注册 ;git的安装和配置。 接下来的步骤看仔细了，前方高能，请坐好扶稳。1、点击左上角的File,选择Settings，然后选择Version Control，点击出现的GitHub，在出现的页面右上角选择Auth Type,选择password，然后输入你的github账号和密码，再点击下面的Test按钮Test连接是否正常，下面的Clone git repositories using ssh可以勾选一下，最后点击右下角的apply,然后ok一下就可以了。2、将鼠标移至左侧的Git，单击一下，然后选择git的路径之后，基本上点击右下角的apply,然后ok一下就可以了。放大一下，每个人的不一样，这是我的git安装地址：3、点击开始页面顶部的VCS，然后再点击出现的倒数第三个import into Version Control，再选择出现的最后一个Share project on github，再点击就出现一个窗口，填写你的项目名称，描述，点击share。弹窗让你选择需要上传的项目文件与commit信息输入之后，项目将会上传至github。登录你的github账号，你就会发现你的项目已经上传成功了。至此，关于Django的基本知识就先介绍到这里，下篇我将开始利用代码对留言簿这个小应用进行开发","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置","slug":"零基础使用Django2-0-1打造在线教育网站（二）：开发环境配置","date":"2018-04-09T09:03:19.000Z","updated":"2019-11-04T13:09:59.776Z","comments":true,"path":"2018/04/09/零基础使用Django2-0-1打造在线教育网站（二）：开发环境配置/","link":"","permalink":"http://blog.licheetools.top/2018/04/09/零基础使用Django2-0-1打造在线教育网站（二）：开发环境配置/","excerpt":"","text":"俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python下面结合我的版本给大家一一演示如何安装。 软件介绍我的软件版本 Pycharm 我这里没有升级，采用的是JetBrains PyCharm 2017.3.4 x64 Mysql ，这里我采用了比较好用的mysql-5.7.21-winx64 Navicat ，这里采用了Navicat Premium ，当然其他如 Navicat for Mysql也可以 Python，写文章的时候Python3.7.0刚刚发布，鉴于其他插件还没有进行适配，我采用Python3.6.4这个版本进行开发。 Pycharm 的安装1、软件位置PyCharm2017/64位下载地址：链接：https://pan.baidu.com/s/1nwhmx2D密码：pc612、右击软件压缩包选择解压到pycharm2017 3、在解压文件夹里面找到pycharm-professional-171.3780.47，右击打开。 4、点击Next。 5、点击Browse更改安装路径，建议安装到除C盘以外的磁盘，可在D盘或者其它盘创建一个PyCharm 2017文件夹，然后点击Next。 6、64位系统勾选64-bit launcher，32位系统勾选32-bit launcher，然后点击Next。 7、点击Install。 8、安装中（等待5分钟左右）。 9、点击Finish。 10、找到安装包解压后的PyCharm 2017文件夹，右击打开。 11、找到lib文件夹，右击打开。 12、选中其中的resource.cn.jar，右击复制。 13、打开安装文件夹PyCharm 2017里的lib文件夹，然后在空白处鼠标右击选择粘贴。 14、在桌面找到JetBrainsPyCharm 2017.1 x64，右击打开。 15、点击确定。 16、点击Accept。 17、勾选License server，在License server address：处填入http://intellij.mandroid.cn/ （或http://idea.imsxm.com/ 或http://idea.iteblog.com/key.php）三者中的任意一个即可，然后点击Activate。 18、点击确定。 19、安装完成。这个破解版的验证码可能在今年10月份左右就要过期，你到时候告诉我，我给你找一个新的破解码。 Mysql的安装1、下载压缩包 下载地址 2、解压到文件夹目录下 3、新建txt文件内容如下： 设置mysql客户端默认字符集** default-character-set=utf8 设置3306端口 port = 3306 设置mysql的安装目录 basedir=D:\\Program Files\\mysql-5.7.21-winx64 设置mysql数据库的数据的存放目录 datadir=D:\\Program Files\\mysql-5.7.21-winx64\\data 允许最大连接数 max_connections=200 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB 注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini 4 添加bin目录到path环境变量 5 安装 MySQL服务，以管理员身份运行cmd 执行 mysqld install 命令 若出现“缺少xxx.dll，请安装微软运行库 http://www.pc6.com/softview/SoftView_104246.html 6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下 运行 mysqld –initialize-insecure –user=mysql 查看data文件夹 查看data目录内容是否正确 7 运行MySQL服务 net start mysql 关闭MySQL服务的命令是net stop mysql 8 登陆MySQL mysql -u root –p 所有命令：安装服务 mysqld install 进入bin目录 cd E:\\mysql-5.7.21-winx64\\bin 生成data文件夹 mysqld --initialize-insecure --user=mysql 启动服务 net start mysql 登录 mysql -u root –p 修改密码： 在忘记root密码的时候，可以这样 以windows为例： 1. 关闭正在运行的MySQL服务。 2. 打开DOS窗口，转到mysql\\bin目录。 3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\\bin目录。 5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 6. 连接权限数据库： use mysql; 。 6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。 7. 刷新权限（必须步骤）：flush privileges; 。 8. 退出 quit。 9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。 Navicat的安装步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。 步骤二 在欢迎画面点击“下一步”。 步骤三 阅读许可协议，接受并点击“下一步”。 步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。 步骤五 运行其余的步骤。 步骤六 点击“完成”，结束安装进程。 步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。 Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV其余版本的可以参考这个链接 Python的安装官网传送Python3.6.4版本下载链接由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接python3.6.3安装教程。 virtualenv的安装和配置使用虚拟环境的好处我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。 安装pip我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹(记住要和Python放在同一目录下)，采用添加环境变量的方法（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path），我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格， C:\\Users\\YC-Jiang&gt;F:F:&gt;cd PythonF:\\Python&gt;cd pystallF:\\Python\\pystall&gt; 然后输入：python setup.py install回车，等待几分钟即可。 最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者Windows徽标+R中输入 pip -—version 小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句） 如果已经成功安装 pip，会提示类似下面的： pip 1.5.6 from C:\\Python35\\lib\\site-packages\\pip-1.5.6-py3.5.egg pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。 如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考这个方法为你的 Windows电脑安装pip: pip安装问题windows安装pip 安装virtualenv在终端输入以下命令：12345678pip install virtualenv virtualenv testvir # 在当前用户目录(win+r %HOMEPATH%可查看)生成cd %homepath%cd testvircd Scriptsactivate.bat # 激活pip list deactivate.bat 其实这种方法挺麻烦的，这里我推荐一种简单方法，安装virtualenvwrapper 安装virtualenvwrapper在终端输入如下命令：1pip install virtualenvwrapper-win 接下来便是创建虚拟环境了，同样采用如下命令：1mkvirtualenv djangoTest # djangoTest为你新建虚拟环境的名称 它会创建在C:\\Users\\YC\\Envs当前用户目录下的Envs目录。 你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME退出激活状态命令1deactivate 知道有哪些虚拟环境命令1workon 直接进入虚拟环境命令1workon djangoTest 如果出现这种情况，表示你已经进入到虚拟环境中。1D:\\Envs\\Test\\django(djangoTest) 再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。 使用镜像安装库有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的镜像,并简单介绍一下如何使用。正常我们下载Django的命令是：1pip install django==2.0.1 (请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:1pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple (注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！) 简单介绍一下各个软件的基本使用Pycharm安装第三方库File–&gt;Default Settings–&gt;Version Control–&gt;Project InterPreter–&gt;右边绿色的+ –&gt;搜索库名–&gt;install package ，不懂的童鞋可以点击下面的示例：Pycharm安装第三库，Django也是可以利用这样的方式进行安装，但是速度不及使用pip安装的快。 Pycharm新建Django项目首先如果你已经打开了其他项目，你需要File–&gt;Close project，然后和没有项目的步骤一样如下：1、点击出现的Create New Project按钮；2、安装过程如下顺序；顺序解读 1、选择使用的是django项目，即可进入右侧页面； 2、Location: F:\\Django\\untitled ,它表示你创建的Django项目的存放地址，以后各个文件就在这里，我这里是untitled文件夹下，这个名称是默认的，你可以自行修改。 3、Project interpreter：表示的是你这个项目的Python解释器，下面7那个则是已经存在的Python解释器，我们推荐自己使用独立的解释器。所以点击3以后，再点击4 ，下拉4你会发现还有一个Conda，但是我们不选这个，选用Virtualenv这个，也就是第一个。 4、接下来我们看5这步，此处的Location是指你这个项目虚拟环境存放的位置文件夹，一般情况下，我们都取和项目一样的名称（前提是你前面没有创建虚拟环境，这里Pycharm自动帮你创建了，如果之前已经创建了，那么选择已经存在的虚拟环境即可）。6这一步是具体到你这个项目用的是哪个Python.exe程序，它一般在你虚拟环境下面的Scripts\\pyhton.exe这个程序。 5、最后7这步你不用考虑，因为我们开发都是采用独立的开发环境，不会用到已经存在的环境，当然特殊情况除外。 然后就出现 完整过程演示1、创建虚拟环境djangoTest12345678910111213Microsoft Windows [版本 10.0.14393](c) 2016 Microsoft Corporation。保留所有权利。C:\\Users\\YC&gt;F: # 进入F盘F:\\&gt;cd Envs # 进入到Envs这个文件夹F:\\Envs&gt;mkvirtualenv djangoTest # 创建虚拟环境djangoTestUsing base prefix &apos;f:\\\\python\\\\pystall&apos;New python executable in F:\\Envs\\djangoTest\\Scripts\\python.exe # 看到没，新的解释器位置Installing setuptools, pip, wheel...done.(djangoTest) F:\\Envs&gt; # 表示已经进入到djangoTest这个虚拟环境中 2、安装Django2.0.112345678910111213(djangoTest) F:\\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple # 采用清华镜像源安装djangoLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simpleCollecting django==2.0.1 Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB) 100% |████████████████████████████████| 7.1MB 2.9MB/sCollecting pytz (from django==2.0.1) Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB) 100% |████████████████████████████████| 512kB 1.5MB/sInstalling collected packages: pytz, djangoSuccessfully installed django-2.0.1 pytz-2018.5 # 提示已经安装成功了，新版本会自动安装pytz这个库(djangoTest) F:\\Envs&gt; # 然后就可以开始pip安装库和包了 3、创建我们的django项目打开Pycharm，新建django项目，个步骤如下：最后点击确定按钮即可，进入到如下页面：放大一下：这里面各个目录和文件的具体意思，下篇文章介绍，这里我就不详细说明了。 然后单击运行按钮运行一下。出现这个界面以后，在浏览器导航栏中输入http://127.0.0.1:8000/ 然后回车，如果出现下面的界面，表明你的djangoTest项目可以正常使用了！在pycharm中按Ctrl+C即可停止运行！ 不知道你注意没有，这个dajngoTest是灰色的， 我们可以右键mark为source Root目录，就变成了蓝色， 这样做的好处就是可以避免包的导入问题，我们在import模块时pycharm会根据设置从而智能提示。如果不mark可能会出现很多我们在pycharm中报红色，但是cmd可以运行的情况。至此，关于djangoTest项目的介绍就先到这里。下面介绍navicat基本使用 navicat基本使用1、新建连接 在出现的下拉菜单里，选择MySQL，其他的类似。连接名和主机名一般写本地地址127.0.0.1或者localhost，端口默认3306，这里用户名和密码我均设置为root，然后点击左边的连接测试，如果出现连接成功的提示框，便点击确定，和这个框的确定。双击这个连接，如果该连接由灰色变为绿色的时候，就可以开始右键它，出现新建数据库，然后如下所示： 数据库名可以随便写，这里我写的是djangoTest这个项目名称，字符集选择图上所示那个，不要选择其他类型，这个很重要！排序规则选择第一个即可，也就是图上所示，这个也很重要，请按照图上要求，否则后期中文编码会出现编码错误。 2、新建数据表双击数据库testdjango使它变绿，然后选中表，再右键新建表。或使用右侧新建表按钮也可以。接下来就是正常的增加数据了。点击右侧上方的查询按钮，再点击下面的新建查询按钮，输入查询语句就可开始查询！3、表的复制粘贴与数据库传输以及数据库导入导出Navicat支持我们把不同数据库的表进行复制粘贴操作同时还支持数据传输，你可以点击工具数据传输即可，是不是很简单。 导入：右键点击运行SQL文件。导出：在需要导出的数据库上右键，可以转储SQL文件也可以选择只转存结构或连带数据一起转存。 至此，关于项目开发环境的搭建就先介绍到这里，下篇我将利用之前建立的djangoTest项目来简单回顾一下django的基础知识","categories":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}],"tags":[{"name":"django建站","slug":"django建站","permalink":"http://blog.licheetools.top/tags/django建站/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://blog.licheetools.top/categories/python/"}]},{"title":"关于博主","slug":"关于博主","date":"2017-03-04T08:27:48.000Z","updated":"2019-04-19T07:12:34.417Z","comments":true,"path":"2017/03/04/关于博主/","link":"","permalink":"http://blog.licheetools.top/2017/03/04/关于博主/","excerpt":"","text":"我，一个正在进击的技术控，相信越努力，越自由。非常高兴能和大家在这里相遇。这是我的个人博客，搭建的初衷是广交朋友，广学知识。那么你肯定觉得我是一个技术大牛（哈哈），其实我只是一个菜鸟技术控，对那些有趣的技术非常好奇罢了，离真正的大神还差一个”地中海”式的发型。非常喜欢java， python， Go等编程语言，所以你如果也有此爱好的话，我们不妨交流一下学习心得。今后我会在这个博客上更新一些有趣的技术和分享我学习，工作，生活上的点滴瞬间。你不努力一下，你就体会不到被人追赶的滋味.生活不只有Coding还有诗和远方~~~喜欢旅游，看电影，偶尔还玩会游戏（最近在玩王者荣耀，尽管队友坑，但我也坑。。。）对了，有一些技术上的问题可以给我发微信消息（事情多，不能立即回复，甚至忘记回复，还请不要生气）。我在很多社区都有账号，需要联系我的朋友可以关注并加好友呃…… 邮箱: 2810706745@qq.com QQ: 2810706745 微信: ZY20160801 新浪微博: 点击这里 GitHub: 点击这里 声明： 1.本博客文章只是为了个人学习以及在一些技术型社区发表，不做商业使用; 2.如其中引用到其他文章经典的部分，本人大部分都会加上引用或者在文章底部的参考文献中注明，如果不慎引用了你的文章但是却没有注明的请联系我; 3.博客内文章欢迎转载，但转载前请联系我，保留出处和作者，不做商业使用，谢谢~~~","categories":[{"name":"about","slug":"about","permalink":"http://blog.licheetools.top/categories/about/"}],"tags":[{"name":"关于博主","slug":"关于博主","permalink":"http://blog.licheetools.top/tags/关于博主/"}],"keywords":[{"name":"about","slug":"about","permalink":"http://blog.licheetools.top/categories/about/"}]},{"title":"你有什么话，想对我说嘛？","slug":"你有什么话，想对我说嘛？","date":"2017-03-03T01:29:53.000Z","updated":"2019-04-13T09:11:30.855Z","comments":true,"path":"2017/03/03/你有什么话，想对我说嘛？/","link":"","permalink":"http://blog.licheetools.top/2017/03/03/你有什么话，想对我说嘛？/","excerpt":"","text":"","categories":[{"name":"liuyan","slug":"liuyan","permalink":"http://blog.licheetools.top/categories/liuyan/"}],"tags":[{"name":"留言板","slug":"留言板","permalink":"http://blog.licheetools.top/tags/留言板/"}],"keywords":[{"name":"liuyan","slug":"liuyan","permalink":"http://blog.licheetools.top/categories/liuyan/"}]},{"title":"爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取","slug":"爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取","date":"2017-03-02T11:09:47.000Z","updated":"2019-04-13T08:16:34.714Z","comments":true,"path":"2017/03/02/爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取/","link":"","permalink":"http://blog.licheetools.top/2017/03/02/爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取/","excerpt":"","text":"说在前面在上一篇中，我们说到某个内容从属于多个分类(即它有多个标签)，应该如何把它所属的全部标签都爬取下来呢？这一期博主就将教你如何实现这一功能。我们以猫途鹰这个网站为例，向大家演示一下。 爬取内容如下图所示，我们需要爬取该图中所示景点的信息，具体包括：标题，封面图片，分类等信息。 知识补充get()方法的使用我们在上一篇中，获取标题，地址，单标签的文本信息采用了get_text()方法，但是如果要获取图片呢？我们是不能和之前一样，要采用一种新的方法：get(‘attr’)。这么说你可能有些困惑，举个简单的例子，看下面的代码:&lt;a href=http://licheetools.top&gt; share my life with you &lt;/a&gt;如果你只想获取网站信息，只需要.get(‘href’)即可。获取图片只需要.get(‘src’)因为图片的格式一般是这样的：&lt;img src=&quot;http://licheetools.top/index.html/first.jpg&quot; alt=&quot;第一张图片&quot;&gt; stripped_strings的用法在这里你可以认为是高级的get_text(),它这个可以同时取出多个文本，待会就采用这个来爬取多个标签。 字符串的格式化字符串的格式化通常采用{}和:来代替传统的%方式，具体如下：1、使用位置参数从下面的例子可以看出位置参数不受顺序约束，且可以为{},只要format里有相对应的参数值即可,参数索引从0开，传入位置参数列表可用*列表；12345678910111213141516a='my name is &#123;&#125; ,age &#123;&#125;'.format('joe',18)print(a)my name is joe ,age 18b='my name is &#123;1&#125; ,age &#123;0&#125;'.format(10,'joe')print(b)my name is joe ,age 10c='my name is &#123;1&#125; ,age &#123;0&#125; &#123;1&#125;'.format(10,'joe')print(c)my name is joe ,age 10 joedata=['joe',18]d='my name is &#123;&#125; ,age &#123;&#125;'.format(*data)print(d)my name is joe ,age 18 2、使用关键字参数采用字典当关键字参数传入值，不过关键字参数值要对得上，可以在字典前加**12345678e='my name is &#123;name&#125;,age is &#123;age&#125;'.format(name='joe',age=19)print(e)my name is joe,age is 19data=&#123;'name':'joe','age':19&#125;f='my name is &#123;name&#125;,age is &#123;age&#125;'.format(**data)print(f)my name is joe,age is 19 其他参数我在这里就不介绍了，你可以看这篇文章python之字符串格式化(formate) 代码内容123456789101112131415161718192021222324252627282930313233#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/04/15 20:15# @Author: lichexo# @File: test_05.pyfrom bs4 import BeautifulSoupimport requestsimport timeurl='https://www.tripadvisor.cn/Attractions-g60763-Activities-New_York_City_New_York.html'urls=['https://www.tripadvisor.cn/Attractions-g60763-Activities-oa&#123;&#125;-New_York_City_New_York.html#FILTERED_LIST'.format(str(i)) for i in range(30,1140,30)]def get_attraction(url,data=None): web_data = requests.get(url) time.sleep(4) soup = BeautifulSoup(web_data.text, 'lxml') titles = soup.select('div.listing_title &gt; a[target=\"_blank\"]') images = soup.select('img[width=\"180\"]') cates = soup.select('div.tag_line &gt; div') for title,image,cate in zip(titles,images,cates): data=&#123; 'title':title.get_text(), 'image':image.get('src'), 'cate':list(cate.stripped_strings), &#125; print(data)get_attraction(url)for single_url in urls: get_attraction(single_url)print(urls) 运行结果由于抓取的内容太多，这里只呈现部分信息。12345678910111213141516171819202122232425262728293031323334&#123;'title': '曼哈顿天际线', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '大都会艺术博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '艺术博物馆']&#125;&#123;'title': '中央公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '公园', ',', '景观步行区']&#125;&#123;'title': '9/11纪念馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆', ',', '景点与地标', ',', '纪念碑与雕像', ',', '古迹']&#125;&#123;'title': '峭石之巅观景台', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['观景台', ',', '瞭望台']&#125;&#123;'title': '布鲁克林大桥', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['桥梁']&#125;&#123;'title': '圣帕提克大教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['教堂']&#125;&#123;'title': '百老汇', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '大中央车站', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['建筑', ',', '景点与地标']&#125;&#123;'title': '布莱恩公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园']&#125;&#123;'title': '纽约公共图书馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆']&#125;&#123;'title': '世贸一号观景台', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['观景台', ',', '建筑']&#125;&#123;'title': '史泰登岛渡轮', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['轮渡']&#125;&#123;'title': '高线公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景观步行区', ',', '公园']&#125;&#123;'title': '帝国大厦', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['建筑', ',', '景点与地标', ',', '观景台']&#125;&#123;'title': '自由女神像', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['纪念碑与雕像', ',', '景点与地标']&#125;&#123;'title': '洛克菲勒中心', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标', ',', '建筑']&#125;&#123;'title': '现代艺术博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['艺术博物馆']&#125;&#123;'title': 'The Oculus', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['景点与地标']&#125;&#123;'title': '无畏海空宇宙博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '阿波罗剧院', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['纪念碑与雕像', ',', '建筑']&#125;&#123;'title': '华盛顿广场公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['特色博物馆']&#125;&#123;'title': '圣保罗教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '圣约翰教堂', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园', ',', '景点与地标', ',', '周边']&#125;&#123;'title': '河滨公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': 'Studio 54', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['教堂', ',', '圣地与宗教景点']&#125;&#123;'title': '埃利斯岛', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['圣地与宗教景点']&#125;&#123;'title': '切尔西市场', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': '商人之家博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['公园']&#125;&#123;'title': '哈德逊河公园', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': []&#125;&#123;'title': '艾利斯岛移民博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['剧院']&#125;&#123;'title': '犹太遗产博物馆', 'image': 'https://cc.ddcdn.com/img2/x.gif', 'cate': ['历史博物馆', ',', '景点与地标', ',', '古迹']&#125;。。。。。。 下期说明哈哈，今天总的来说还是比较简单的，容易操作，下期我们准备爬点不一样的东西。。。 今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。","categories":[{"name":"spider","slug":"spider","permalink":"http://blog.licheetools.top/categories/spider/"}],"tags":[{"name":"爬虫实战","slug":"爬虫实战","permalink":"http://blog.licheetools.top/tags/爬虫实战/"}],"keywords":[{"name":"spider","slug":"spider","permalink":"http://blog.licheetools.top/categories/spider/"}]},{"title":"爬虫实战系列：（一）58同城-转转商品信息爬取","slug":"爬虫实战系列：（一）58同城-转转商品信息爬取","date":"2017-03-02T02:02:41.000Z","updated":"2019-04-13T07:17:03.001Z","comments":true,"path":"2017/03/02/爬虫实战系列：（一）58同城-转转商品信息爬取/","link":"","permalink":"http://blog.licheetools.top/2017/03/02/爬虫实战系列：（一）58同城-转转商品信息爬取/","excerpt":"","text":"说在前面本系列教程记录了博主的爬虫之路，可谓是有苦又累，有甜有笑，如果你在看过本系列教程之后，对爬虫有独到的见解或者浓厚的兴趣，不妨留言和博主进行交流学习呢，我在这里等你来玩~~~ 爬取内容如下图所示，我们需要爬取该图中所示商品的信息，具体包括：类目，标题，价格，浏览量，所在区域等信息。 代码内容字典属性法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/4/10 15:15# @Author: lichexo# @File: zhuanzhuan.py# @Website：http：//licheetools.topfrom bs4 import BeautifulSoup #导入需要的包和模块import requestsimport time #用于控制每次爬取的时间间隔user_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'headers=&#123; 'User_Agent':'user_agent'&#125;time.sleep(4)def get_attrition(url): #定义函数，便于调用 #url = 'http://zhuanzhuan.58.com/detail/967678151307198471z.shtml ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp;metric=null&amp; PGTID=0d305a36-0000-1792-ee6b-8d43de6b3765&amp;ClickID=7' #此处URL前面的(#)不可删除，否则就出现函数调用错误，因为后面调用的link已经替换此处的url web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') casses=soup.select('#nav &gt; div &gt; span &gt; a') titles=soup.select('div.box_left_top &gt; h1') moneys=soup.select('div.price_li &gt; span[class=\"price_now\"] &gt; i') addresses=soup.select('div.palce_li &gt; span &gt; i') for cass,title,money,address in zip(casses,titles,moneys,addresses): data=&#123; 'cass':cass.get_text(), #文字调用get_text()方法 'title':title.get_text(), 'money':money.get_text(), 'address':address.get_text(), &#125; print(data)def get_all_item_info(): url='http://bj.58.com/pbdn/' web_data=requests.get(url) soup=BeautifulSoup(web_data.text,'lxml') href_list=soup.select('a.t') for href in href_list: link=href.get('href') if 'zhuanzhuan' in link: #除去网页中不需要的精准推广部分 get_attrition(link)get_all_item_info() 列表索引法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#！/user/bin/pytthon# -*- coding:utf-8 -*-# @Time: 2017/4/10 15:15# @Author: lichexo# @File: zhuanzhuan.py# @Website：http：//licheetools.topfrom bs4 import BeautifulSoupimport requestsimport timeuser_agent='Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'headers=&#123; 'User_Agent':'user_agent'&#125;time.sleep(4)def get_item_info(url): #url='http://zhuanzhuan.58.com/detail/835458751461588996z.shtml ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp; metric=null&amp;PGTID=0d305a36-0000-123c-630d-da6c51789948&amp;ClickID=1' web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') title_list=soup.select('h1.info_titile') title=title_list[0].text #该列表有且仅有唯一一个元素，采用get_text()将其取出 price_list=soup.select('span.price_now &gt; i') price=price_list[0].text views_list=soup.select('span.look_time') view=views_list[0].text area_list=soup.select('div.palce_li &gt; span &gt; i') area=area_list[0].text cate_list=soup.select('span.crb_i &gt; a') cate=cate_list[-1].text.strip() #使用strip()函数来消除换行和空格的影响 data=&#123; 'title':title, 'price':price, 'view':view, 'area':area, 'cate':cate, &#125; print(data)def get_all_item_info(): url='http://bj.58.com/pbdn/' web_data=requests.get(url,headers=headers) soup=BeautifulSoup(web_data.text,'lxml') href_list=soup.select('a.t') for href in href_list: link=href.get('href') #获取元素的某个属性采用get()方法来实现 if 'zhuanzhuan' in link: get_item_info(link)get_all_item_info() 运行结果 知识补充soup.select ( )选择标签问题你只需要在浏览器中鼠标右键点击审查(Ctrl+Shift+I) –&gt; 找到字段的具体代码 –&gt; 右键选择Copy –&gt; Copy selector即可得到你想要的代码字段。为保证你是否正确捕抓到相关信息，你可以鼠标右键点击查看网页源代码(Ctrl+U) –&gt;然后再按Ctrl+F调出搜索框 –&gt; 将你刚才捕抓到的信息进行复制黏贴并回车 –&gt; 看右侧的黄色代码区是否是包括你所需信息的最小高亮区，不是则往上一级父级标签查询。 get_text 和 get()的使用问题get_text()，是返回选择的标签文本，具体可以查看参考文档;而get(‘’)，这是选择标签中的属性(也就是里面有=符号的左边)，比如在&lt;li&gt;&lt;a class=&quot;rrence intnal&quot; href=&quot;#next-siblings-previous-siblings&quot;&gt;&lt;/li&gt;之中，选择li &gt; a这个标签之后，则可以用get(‘href’)获取其中的链接。 下期说明哈哈，今天的内容是不是很简单，不过你是不是有一个疑问，就是如果某个内容从属于多个分类(即它有多个标签)我们应该如何把它所属的全部标签都爬取下来呢？那么下期博主将教你如何实现这一功能。 本教程适合有一部分Python基础的同学，小白童鞋很抱歉。。。 今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。","categories":[{"name":"spider","slug":"spider","permalink":"http://blog.licheetools.top/categories/spider/"}],"tags":[{"name":"爬虫实战","slug":"爬虫实战","permalink":"http://blog.licheetools.top/tags/爬虫实战/"}],"keywords":[{"name":"spider","slug":"spider","permalink":"http://blog.licheetools.top/categories/spider/"}]},{"title":"行者有梦，千里亦趋","slug":"行者有梦，千里亦趋","date":"2017-03-01T02:14:19.000Z","updated":"2019-04-13T07:09:58.592Z","comments":true,"path":"2017/03/01/行者有梦，千里亦趋/","link":"","permalink":"http://blog.licheetools.top/2017/03/01/行者有梦，千里亦趋/","excerpt":"行者有梦，千里亦趋，人生几何。","text":"对不起，此文章为加密内容，只有管理员才能查看. Incorrect Password! No content to display! U2FsdGVkX19wMzOMNeH9MEWjjpThkdSpFrSsTwP484e0ycDhBkcsuYA1DcFG0VsafxrkO0xf9OvkY67DR3/VSB8hJ4vBE4ihUjW1FMe1TxlUS4YPirKGiZE94Y1cIPbolFKyd8xNCiU3ZfVovIPCjQIgzS7ITRlN3vFkWSPRJQbpTjHOJcrMuOEyJBCmoyQC+Qg+gTSYqeA/3i2SVx6ciBV0gC7/4WEaZyPGx103+VUM50orORmaEIwlq1Y21sABOjyCZOrMM3tWSAGPEY7Tm3wqehWOhB8OZTwQSAwRaGpHvtEy5bUcwVKo05QEnWoyi2LvyNcnbTJA/coNom6+H7sxv13VHIB5L9e5shWHVHNMWiTCx0cnRbot4LQL/adL9qUrHI84AqrnpY3ABG4UQ9ubcSsCC9XQCK7OyE7/uHHxgupXvQA3GR05htVhf3ePyb92A7nxEzu5jT+fFBDsMrgmwPpNjOLMutlnDOEkmr7HGRZxD5QXaD521ZmgCgxkDCLH9VDfgzK2N0bleq4U6YaRalg+0B4QMAz616IaEOxUdq0mSaal1MddcjgOA2oYTnF01Cs1vcO38T6dDd9PcMhqYLB8TPxYXLsgT+F92HsKj3SW8qJ44xuHH3UqV7CEuNCjpj6tahQEi2a1AbCIFc4bIv0uO8AhhdmpgkKOKJaSq3T36I0EKztqlhguZLzIL1N0DzY/28h5SUwxbRiXvXnA49Oe1aI4tmj8+R2M5rDjFJ1G3n59aw3TiiYTN8Pb6ECtl6IxuBJdR73fT2E0L6GPSC9tPo7fHucQBSVlXdyYyO2x8OEblURNAS2CRATzqkVo9jaI1b2cXQSSlIrw6pCOFpnsvwmRc1Qses/Rx7OD3PZdgDGvnGPpI2h7SB2c8MKQ9gHQUEVr4Qk7a0rabC2PjYCsjEOjOjfm8vGtzhkR4TQiLJlV2d+3I8U3j3Fe+noJ/8XlBairstcUBvyvmVk5q5oWKkOMnV8dWvM2uxYyWzADa4d6LYBvmVTywGdUrm2flwWRUTUHXmIHxXzOfurDW/3VZJZQgA4dOTh73xOgPm2yCaqZzevrI71mdA8zTZ85N4OUCZQJBNAa94zlVn4zqAFUjg9t0AiGubHhl3fqVq9K5qlFDFQ9aiKvxiHEln4aTO4pQMhbRL1zV/9MSydDC/BauGJN9RsgPN7T1e+WDlTTUFYPRr6aB4ERuWYx0WSvrGlcySLUZ++BUXEdJ2ka9+A8HuVpoosrIGxfArp/MzHHNcBhHGR5A3zhcIXy+UkGi1rifhauf2CinIcZFfXeDsfEzh2uj+lr/cEC236wEpb1ggQ8+hS3YtLDRxWmauIoMNHqtHyA1tYiwpmObIYmtolkGzKkTonw2LVM88eD1vnREzINVwT1PzeUqm51IpK7Kf5rcTla5P23F5Y4It6WDArGydfWfDmMaUn+uF1v35WNCb//M2I6kiJZXawOF2H4zZWX8n5WcoxtTAIHIALoj817EB+YeHftLhmAB5eAdmuLW4ojJltwIrOL8F4TD3v6Q/6w7i8C84EPoRXH4Xh5N5Lhh+ivYpXaV3rLrxVFHrBwFJkQSc3mOPoOae5Hrz1li7Mve3No7i75g99THTlrhiUCcGCUZulrsXrLVoG6VtGGGBJ7zeP6kBRTOQoe48qwwtRq/md8SYjjhdyNNBctI+H1k+S2s7B6VDYbpa6/nySkn8nLmjD7KEKrCoX+KXAhVUriv5MBZiAWcIHkk4TuD6CSsddwKsWkkasKm3OO4vFsaaYRMXQ1i0zGpq67MdmlYmlwu4cVpvWoFOk5eGZU/s6QcPqP0Bi1EK/HrocKp2OLYIoWZhPZKoGA+EAfEYOjqAHMzO8VCe3xQnZhjyabZKIZk0CUCh6BQM+REMjkovqJxcIaX5h4nEWUh3vOxWEMdru4FgwXD4Yyjy7hzoZs38J3NSgrDEsd2gX/C3hb0V1jPUsB6lj11GGnmEAALUbMwANnAMnqKBLZ8bOt/9RUNj9LQN+hhH9OaPvIvEQ9sl0H/+dh1U9Lq2QKgJtpGfyoc+ke7z3ArYOYnfmOzTZbIwPbCCASOGnQ8mtJzt6H5l0wtzlWv6ohQkvRkaBZBfNZqqdmNYlhU6Wj5W1WGH3kBbjjcuvQR2bcXNSyq8ErEyoJUh7nrP/s5c+PXs22gCTtKvSLip4wHLklWgOKtaXi6D4ITIYNnYbga1IpueGLYWBMgWba/0shPdDmGxweAYErQihG7NfuSBkroogu1th19om5FSlCZDHIp0eZ2bEQF8NOHbfmRRjVBsFBjQJXnGm06FucFLASUV1gvWue2rkiqdBa63QZXw7SDO7lrmlqEaW0ek0LaavXZvAFyvBa2If/RhYagFxRNM4RgoffCOEFUqVPg7vkRpwTS7JihdTv4cmBnMCwiBfyfWLtJ2YGZwjQ6XWfqgSeDIXiceiVTj5OOyDZA6km3d13K0+XPT9xkLOS9KHCDtHjGal/RTwFFZ77rLoXbe4wiZT9xUJh+gl2S7+KSwvm4e8eMHGxTayzWTlf6wqrzhjQ9c8wZNpurEoX3vdCumtrHnSwwAWznHXdyL3HypZ7E5ZpqY4fnmyl3kp6DWDzbzJzDiqXkrr/OZ1GCFdvEehtygzQZr5ggo/NvX+fUpgorXSg5k1H5wj4H3HuHYrRNi/MJ2gwlxwkiosRImRQ2cuOxr+cWeejo7NOKz1asUu8bL4j6VTH3omK7TbNgvXriAxIBX3qc5rDYs1fkMzw3e9bNiJfJTNUQBVfKIH9vauz0bJWPcd5DVg9tGD7b7wPOGWuyOpUd+7ixuqT4NuIUVw9Uq+22hwZChG573SWNgJxR7G8ZO/z6I2H5ItlrhtPHR8VJKP+ssQRw59PXDjwAp2+iEh3Stu6dFWFbUlIY2r1Wr7ZBvfezGh7Q1R1aRPuyWI7AOF98Yar2CX+jtsVvlSTVrDCiPqIts0BOyzTofvp4gfgmfL+pvvP5BZ0QT+oIgsrPgv+xzRERRnLibgTsWQh/Y0DyEGC/2B5kpCgIrPZeDQloUr/tl1tIAx+nqRoACVP8aUcEZ1N9I+8SibNKlNIPsHUoaacYv32hFgXULBh9Pcpr5z0Zu5yCHMCDdnBxh+TcQVxa13S7lg7XF6LeagE5ILYQQUVirT/Sj9/UcJtrsrxp+xfYTF1ol9s7Js0CAqxkgYUI/sh8WDwYMMwTgN5Br4oq4Ac/Xd7ZGl17mDjIPJWyslTjbcgCK3iusRaJRUjLXA9G7y9xF5M4ujp3JMfxvsNxHT7mR+D3WH1PBDLXvmU5j/45M1FaUi87q3CwwTVaNmIRgSVaSFVljjkLu6Nd9sS9apc+u8PJ3Ts3GjBMDaD4G8Kjn2VxLwQPSv9ZFuZgker7iWDhocW8iYduCG9O++9Gj/Cbq/LNhrSj6wi3oMlTbwEH3/gYtnK9n6nz4pjQ4d40pBBYLf8EUciT5mYAg0XKHBE+dfU3nT9vV9y7eWYevuXU7e3sMXu+Ua3rBjEXqXu9pkJ8JXsLzvQqg9Gtho1KjtYI4ms9R+kdXFWfI0UYRM+PMF/VN0blO4zlzm1WzdSNnEh4urGriQKx5CUKapvjgMUvdOpRqbLwBTCFbZAICR3ZjKhTux717E/YwOZeDBG/dx0mdA5m+Xkog8Chk3CaEY7sHTJ+o5+NRm3PI0o5UqP4xVt5/RYADs5nsSfDQ/pfKCD/CFPioMX6zLS8WQ0fNP/CLhmq9X+JwriS3uMM8PUGYJ95ihf1hrHleqr4/vcPtsbrFLwCVQj/ACyTHz3fapGTcG00PktNAHlg49098Ik+66LrGVAliawVBDQ44lkwJ8whynIx6TJlG3tZ1HKgH2YbzSeiQFe7VSAaqveAIos3taKD8JxFFpXrXcUNZD8REmo9cQVND8JGk78dQaPszNh7qB73UDx8cRC5T53niH0rXg5RY5nGIlEANZZ1HosAk6u1ycd9JPkZaur8+6rG3d4r29WyATwdsewDqIFU748givWPOVsJcdZZDXMj1amFJ/08f3z6+gMnHDTr828hg6dQ+suHnV59L3vOzAHn8Wl5utDQwevG4MKZ4WRZ/D5lbLjFI5EItfoUpa9mJC5+pOq3CRATN1Y7MOzZRE1H6u1ptYo0NoWW7ZeagvVmI63qeMr/BOc12pfW7cmtj6DaRio9Ai5ZoMcVwj4hUTNLd5vb8WsJ1Gb56bIdXqRa/XC7KDHLlIRagzvkYkTjpL9pu9Bf7odGmUEL0iY/tpWswzH43/903thz4HUjD3/qZFLLWOa0QUvcSx/OZAlynJMYChUslEJDoJhSqf6Q9B11CufEruiiJfRHeRxA0N4IW8mewq4ERF+kLKkXmp2P20Vof2+DXxNfY1ssxNOS3DBvSaWo/MyBrRHWJX1jA55UGOHwk2B1h4YxA1VAlJOaArdTRIjtk6ViYK/z4D9Ys3JM6UF07IfCTMCJ1wYSUnRbRNnmrHkveTtBeRLWYavVqQvolr7MKWlRiQzO9Kw2baOMBfgHHcwSr2zJ9GH6Gj6xYbrzxBD4UGdCFPjHz1gO+ogN+oWuulrHB2sdDLJYz6RERJQ4Xv25Jy6PEbQ/zl3VQ0Q7CkZzkkSG7SPy4lXUk8w8B/+3/6dLEByIO/J0xqmEIKy+d5+LWhSWQLN3nAwan4PHzFGGf7H4BMGRmFbNl8hSf4XqM/W7kg0eyHo76rRTb8aggL5YUeVjT6DbodlOjaDbOGaUPJPmI1iRZYgDptYZP4mqg+7/2dgva672ehRvRPd7tG4OcD2QWTdPtMD5840bM6N+a6V0K/FjQehx3xOSVCpXIgzfzZygzTH033l7F7WUc3t0qiO1NcIic35AMuIM00tLjqnxEDQRArj+/iMLxYXiGIN0rBGRkFxjIMNz7UApBDzynce3GUGb2vGTYPhm5+85wwn91vbQURVvx43I/VTJswFLEHlYXARk01phIwy4Wh+wFuAVPWctJBXbeIHS4m47lW3XLA9fQgZOkx1mA51Jg6iefZpLP+x4I9b5D38ph+hFXnRbCPCgY9LY+yCBPkQhuz8Wid0Ycvz6mcK8uq5gOoiIYSnQYscoYovKgCp94B7rk66XXH1tI+4rW3aEaerCc/ggJLMME5Caia0TAcBRfDUEbFy+VHTSSlmEMqS42Xr1YFQB6ypRqdLZOpjyhZqOONcpEVC3pIRalf4i4nkyW2qMCHtppes7mClyJ/ewoihdQXCYiGjghjouPbwE/cJb8iJxdm0mkyO3XyNYNoTYwO10m1z+Egu8BA4jwj5L43mrBR2Bc1GldHUEJXxI5hpUzKR6NcY4Ew9c5WBomI06f8L4TW47XK+jmKzlgXwoyJlH4KxoVzcWJa0C1TrOnK4Zv17duOnIRrpKId17BIJRxzpWIHQR+I4vJVuwDOuNNy2ynJHM7if5hHBdE9+TJMg4KGWCvtW60jB8Y4EneX1aCHv+vLM5lPk17f+Do/y74SP9o3FrQC/Ga1vVpcrxMEv6BHsSWjMCo0jKGxg/Ox8QW3YFWyF61aPDckJbwSrF2bjR7Pi2kfAzLFtYjjMqVS1+HoJZ/WWLgu+U3F8heSLApA8moELUuEhLZQtnHct1Zj4FFeRtsDAL/dUU7kxTNardBNMh71x/2Sf2g7lp4oVsuKk+kntRnmMFu5oNaSDrFVArqnWLoNPVZuXyfPpL3Axx/LKD0vMRHm6eobOX2viZ3KEOOgsIh2lThEfx/IXJmPAIjFs8CuV0JMSTl60kthgLWisfiPboU2x52ewkK3CkGcEOB3ekIypqXN8CGKYEircgjLdNfH8giIwiMOjHg45w3NMz0g2SATTdWCJZWDcKZEX0v1Fh8XW/+2z5XydiO0LXfB+EDHAtzxKnynLHhZdYHwRxHL1nRdRW73IKd6Fa3cXqZ/LHpFiLBkrj7zOVaYO8NHE9oI+DjVeYnZjAL6/2Ry6rMvukWHtRZ+u7DUcTRaJK//XIid9qtokLiPgh7eHMj3nEjmH1o4fiVKYZ1YApRysQ5+r16wwLug1RB2jHbG72xQ2ht4+xy+u085poBmtQ4GQZJGH4pxYi3KxCgk6P+m/UpZuIfzSPxgwb+Z0QVlwF/tNa2hdqZRMSbSEqxjOcJqkxdDSK4lOx8WUL+2Ur7UOKwKtV7D79nUU/IPkWPBIsXuaZpBB3KFtDSJxIgh7sRWRuINnJlfGQooIn3lWlGBFgCJFaNSnQzxEIz0XfNUvjJC8paGsSsmpy1QLfJRdEdDw9kzEgGfyQJNu7fhwPF6Ek0E9Y8hahxbeWRapKlj6H7epd1gYkCWirjqs+UFmgQcu3vLWlwTWZaSiNUKtxA5dynOyqJ/vBXg2Yj0NLhl3khVeF/mddC+ExKGEZ1eGEfJpk8urzz0KSQNMY+6cBxjXzu53fpV6UiHF3tcJOpbPS1xfLAPjfQFDvX9IjyFKHYxUeEpFWquHx3pZMivqMEhJ86Ef6/UrIL0kQlAx8TSviWuQT2fHMOrnu906pkyxeGig9i1n6cMMt/Hhd38SEOhziu2zuLl4euXlLVpoVwbMRrgu59fDotN200Q0AfT2EYAK2HqqjIqHqKxsGX95xPOYVhU9ixHD2KmtZKFdJyrvMiTnsZVYzZOsmxZ0xJZNbOjVlbTxxeH0Jy8Vqx5Q+Xf9VHyIVVDghYlhZ71PcskX8zBEjB859j7iCl5VQvtiv0bHTjCJChZp1MBTxpcFFvgpFSua/7nwmB7diPx4y4hh91Dam40LbjToWwFfiiU=","categories":[{"name":"life","slug":"life","permalink":"http://blog.licheetools.top/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"http://blog.licheetools.top/tags/life/"}],"keywords":[{"name":"life","slug":"life","permalink":"http://blog.licheetools.top/categories/life/"}]}]}