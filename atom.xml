<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编程思录，记录思考</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://licheetools.github.io/"/>
  <updated>2019-04-13T13:47:31.002Z</updated>
  <id>http://licheetools.github.io/</id>
  
  <author>
    <name>Envy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>趣玩爬虫实战训练（一）：12306火车车次信息爬取分析</title>
    <link href="http://licheetools.github.io/2019/04/01/%E8%B6%A3%E7%8E%A9%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A12306%E7%81%AB%E8%BD%A6%E8%BD%A6%E6%AC%A1%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96%E5%88%86%E6%9E%90/"/>
    <id>http://licheetools.github.io/2019/04/01/趣玩爬虫实战训练（一）：12306火车车次信息爬取分析/</id>
    <published>2019-04-01T13:38:39.000Z</published>
    <updated>2019-04-13T13:47:31.002Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为付费内容，请添加小编QQ：2810706745。付费以后，凭密码进行阅读，感谢您的支持与理解！" />    <label for="pass">对不起，此文章为付费内容，请添加小编QQ：2810706745。付费以后，凭密码进行阅读，感谢您的支持与理解！</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      本套实战教程为付费教程，请输入密码以后再进行阅读。版权所有，请勿传播，以免产生纠纷。本套教程是一次购买，终身阅读的。
    
    </summary>
    
      <category term="money" scheme="http://licheetools.github.io/categories/money/"/>
    
    
      <category term="趣玩爬虫" scheme="http://licheetools.github.io/tags/%E8%B6%A3%E7%8E%A9%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍</title>
    <link href="http://licheetools.github.io/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%88%A9%E5%99%A8JDBC%E4%BB%8B%E7%BB%8D/"/>
    <id>http://licheetools.github.io/2018/08/05/关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍/</id>
    <published>2018-08-05T13:33:59.000Z</published>
    <updated>2019-04-13T13:34:34.674Z</updated>
    
    <content type="html"><![CDATA[<p>jdbc全称java database connectivity.是java程序与数据库连接的一种机制。</p><p>jdbc的过程：<br>1、搭建开发环境<br>2、编写程序，在程序中加载数据库驱动<br>3、建立连接<br>4、创建用于向数据库发送sql语句的Statement对象<br>5、从代表结果集的ResultSet中取出数据<br>6、断开与数据库的链接，并释放相关的资源</p><p>###<br>DriverManager：驱动管理类<br>主要作用：<br>1、注册驱动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(new Driver());   //会导致驱动注册两次</span><br><span class="line">Class.forName(&quot;com.test.jdbc.demo1.JdbcTest1&quot;);   //实际上使用这种方式</span><br></pre></td></tr></table></figure></p><p>2、获得连接<br>Connection getConnection(String url,String username,String password)；<br>url的写法：jdbc:mysql://localhost:3306/jdbc<br>jdbc:协议<br>mysql:子协议<br>localhost:主机号<br>3306:端口号<br>注意如果为本地ip地址，则可以简写为：jdbc:mysql:///jdbc</p><p>###jdbc工具类的书写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line"></span><br><span class="line">//没有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        driverClass = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">        url = &quot;jdbc:mysql://localhost:3306/jdbctest&quot;;</span><br><span class="line">        username = &quot;root&quot;;</span><br><span class="line">        password = &quot;root&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是具有了jdbc.propreties属性的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        //加载属性文件并解析</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        //如何获得属性文件的输入流？</span><br><span class="line">        //通常情况下使用类的加载器的方式进行获取</span><br><span class="line">        InputStream is = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            props.load(is);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        driverClass =props.getProperty(&quot;driverClass&quot;);</span><br><span class="line">        url =props.getProperty(&quot;url&quot;);</span><br><span class="line">        username =props.getProperty(&quot;username&quot;);</span><br><span class="line">        password =props.getProperty(&quot;password&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中jdbc.propreties文件里面的代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClass = com.mysql.jdbc.Driver</span><br><span class="line">url = jdbc:mysql://localhost:3306/jdbctest</span><br><span class="line">username = root</span><br><span class="line">password = root</span><br></pre></td></tr></table></figure></p><h3 id="Statement的使用"><a href="#Statement的使用" class="headerlink" title="Statement的使用"></a>Statement的使用</h3><p>它的使用和我们后面所说的preparedStatement的使用有点不相同，而且我们优先后面的那种方式，因为不会产生sql注入的危险。</p><h3 id="preparedStatement的使用"><a href="#preparedStatement的使用" class="headerlink" title="preparedStatement的使用"></a>preparedStatement的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    /***</span><br><span class="line">     * 保存数据到数据库，其实就是插入操作</span><br><span class="line">     * */</span><br><span class="line">    public void demo1() &#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        PreparedStatement preparedStatement = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JdbcUtils.ReleaseSource(connection, preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在增删改查四个操作里面，我们先来简单连接四个过程的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">//保存数据到数据库，其实就是插入操作</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改数据库中的数据</span><br><span class="line">             //注册驱动与获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;update user set username =?,password =?,name=? where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;eee&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;555&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;lichee&quot;);</span><br><span class="line">            preparedStatement.setInt(4, 7);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据修改成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//删除数据库中的数据</span><br><span class="line">//注册驱动与获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;delete from user where uid =?&quot;;</span><br><span class="line">            //预处理sql</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,6);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if(i&gt;0)&#123;</span><br><span class="line">                System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的全部数据</span><br><span class="line">      //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;select * from user&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">           //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           while (resultSet.next())&#123;</span><br><span class="line">               System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的一条数据</span><br><span class="line"> //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;select * from user where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,1);</span><br><span class="line">            //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>也就是说增加，修改，删除都是使用executeUpdate函数，而且返回的是int类型的受影响的行数，然后我们就可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = preparedStatement.executeUpdate();</span><br><span class="line">           if(i&gt;0)&#123;</span><br><span class="line">               System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><p>只有查询使用的是executeQuery函数，而且返回的是resultSet类型的结果集，然后使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。</p><p>C3P0连接池</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jdbc全称java database connectivity.是java程序与数据库连接的一种机制。&lt;/p&gt;
&lt;p&gt;jdbc的过程：&lt;br&gt;1、搭建开发环境&lt;br&gt;2、编写程序，在程序中加载数据库驱动&lt;br&gt;3、建立连接&lt;br&gt;4、创建用于向数据库发送sql语句的Sta
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（八）：反射机制</title>
    <link href="http://licheetools.github.io/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://licheetools.github.io/2018/08/05/关于JAVA你必须知道的那些事（八）：反射机制/</id>
    <published>2018-08-05T13:33:08.000Z</published>
    <updated>2019-04-13T13:33:39.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。</p><h2 id="四大类"><a href="#四大类" class="headerlink" title="四大类"></a>四大类</h2><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>Constructor：关于单个类的构造方法以及对它的访问权限;<br>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>Method：提供关于类或者接口上的单独某个方法的信息。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-013cf6f3c2bf9298.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>java中java.lang.Class类用于表示一个类的字节码（.class）文件;获取某个class文件对应的Class对象：<br>1、在已知类和对象的情况下：<br>类名.class<br>对象.getClass()  –由Object类提供。<br>2、在未知类的情况下：<br>Class.forName(“包名.类名”)</p><p>Class类代表某个类的字节码，并提供了加载字节码的方法：forName(“包名.类名”)，forName方法用于类字节码到内存中，并封装成一个Class对象。</p><p>我们通过代码来测试一下：首先先新建一个测试类Person：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String sex;</span><br><span class="line"></span><br><span class="line">public Person() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Person(String name,String sex) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">this.sex =sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String getSex() &#123;</span><br><span class="line">return sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setSex(String sex) &#123;</span><br><span class="line">this.sex=sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;吃东西......&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Person [name=&quot; + name + &quot;, sex=&quot; + sex + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来建一个ReflectTest类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class ReflectTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获得Class对象： 1、通过类.class； 2、通过对象.getClass()； 3、通过Class.forName();</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demo1() throws ClassNotFoundException &#123;</span><br><span class="line">// 1、通过类.class；</span><br><span class="line">Class csone = Person.class;</span><br><span class="line"></span><br><span class="line">// 2、通过对象.getClass()；</span><br><span class="line">Person person = new Person();</span><br><span class="line">Class cstwo = person.getClass();</span><br><span class="line"></span><br><span class="line">// 3、通过Class.forName()获取信息（推荐）</span><br><span class="line">Class csthree = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(csthree);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ReflectTest.demo1();</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上三种方法获得的都是类的字节码文件对应的对象在内存中的地址。</p><h3 id="Constructor构造方法"><a href="#Constructor构造方法" class="headerlink" title="Constructor构造方法"></a>Constructor构造方法</h3><p>Constructor：关于单个类的构造方法以及对它的访问权限;<br>我们在前面已经得到了类名，那么就可以调用它的getConstructor()方法来获得它的有参或者无参的构造方法，紧接着你可以利用这个获得的构造方法的newInstance()方法，来达到完成实例化一个对象的目的。</p><p>我们新建一个测试类：ConstructorTest：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class ConstructorTest &#123;</span><br><span class="line">/**</span><br><span class="line"> * 获得无参的构造方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demo2() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得无参的构造方法</span><br><span class="line">Constructor cs = cls.getConstructor(null);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cs.newInstance(null); // 其实这里就相当于Person person =new Person();</span><br><span class="line">person.eat();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void demo3() throws Exception &#123;</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">Constructor cso = cls.getConstructor(String.class, String.class);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cso.newInstance(&quot;小白&quot;, &quot;男&quot;);  //这里其实就是相当于Person person =new Person(&quot;小白&quot;,&quot;男&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ConstructorTest.demo3();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Person [name=小白, sex=男]</span><br></pre></td></tr></table></figure></p><h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>我们在前面已经得到了类名，那么就可以得到它的成员变量（包括所有的成员变量和指定的成员变量）。</p><p>如果你想获得所有的（非私有）成员变量，那么你可以调用它的getFields()方法，获得该类所有public属性（包括父类继承的）；</p><p>如果你想获得所有的（含私有）成员变量<strong>getDeclaredFields()</strong>方法，获得该类所有声明的属性（包括私有属性和父类继承的）；</p><p>如果你想获得指定的（非私有）成员变量，那么你可以调用它的getField(String name)方法，获得指定的（非私有）成员变量；</p><p>如果你想获得指定的（含私有）成员变量，那么你可以调用它的<strong>getDeclaredField(String name)</strong>方法，获得指定的（含私有）成员变量;</p><p>设置Field变量是否可以访问，你可以使用field.setAccessible(boolean)，<br>boolean为真则表示可以，反之则不可以。</p><p>Field变量值的读取与设置：<br>field.get(obj);<br>field.set(obj,value);</p><p>我们首先在之前的Person类中添加一个公有的属性（public Sting hobby），然后新建一个测试类:FieldTest:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class FieldTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有属性</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public static void publicDemoTest() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定公有属性字段</span><br><span class="line">Field field1 = class1.getField(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">// 给指定的公有属性赋值</span><br><span class="line">Person p = (Person) class1.newInstance();</span><br><span class="line"></span><br><span class="line">//p.hobby =&quot;reading book&quot;;  //通过普通的对象.属性的方法来给对象的属性赋值</span><br><span class="line"></span><br><span class="line">field1.set(p, &quot;reading book&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 测试私有属性</span><br><span class="line"> * @throws Exception </span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void privateDemoTest() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定私有属性字段（注意这里需要注释掉该字段对应的getter和setter方法）</span><br><span class="line">Field field2 = class2.getDeclaredField(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//先实例化一个对象</span><br><span class="line">Person person =(Person)class2.newInstance();</span><br><span class="line"></span><br><span class="line">//给指定的私有属性赋值（操作属性）:</span><br><span class="line">//1、这里必须先要设置是否可以操作</span><br><span class="line">field2.setAccessible(true);</span><br><span class="line">//2、给对应的属性赋值</span><br><span class="line">field2.set(person,&quot;小白&quot;);</span><br><span class="line">//3、获取对应的属性值</span><br><span class="line">Object obj =field2.get(person);</span><br><span class="line"></span><br><span class="line">System.out.println(obj);</span><br><span class="line">System.out.println(&quot;**************************&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">FieldTest.publicDemoTest();</span><br><span class="line">FieldTest.privateDemoTest();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">Person [name=null, sex=null, hobby=reading book]</span><br><span class="line">小白</span><br><span class="line">**************************</span><br><span class="line">Person [name=小白, sex=null, hobby=null]</span><br></pre></td></tr></table></figure></p><h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>Method：提供关于类或者接口上的单独某个方法的信息。<br>Method类代表某个类中的一个成员方法<br>Method对象的获得方法：</p><p>如果你想获得所有的（非私有）方法，那么你可以调用它的getMethods()方法；</p><p>如果你想获得所有的（含私有）方法，那么你可以调用它<strong>getDeclaredMethods()</strong>方法；</p><p>如果你想获得指定的（非私有）方法，那么你可以调用它的getMethod()方法；（常用）</p><p>如果你想获得指定的（含私有）方法，那么你可以调用它的<strong>getDeclaredMethod()</strong>方法；（常用）</p><p>得到了方法，那么如何执行方法呢？我们可以通过反射来执行方法：<br>invoke(Object obj,Object….args)</p><p>我们依旧通过测试来完成相关信息的输出，在前面的Person类中新增两个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">System.out.println(&quot;跑步......&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String wacthTv(String name) &#123;</span><br><span class="line">return &quot;我在看&quot; + name + &quot;电视节目&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着新建一个测试类MethodTest：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class MethodTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demoOne() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person1 = (Person) class1.newInstance();</span><br><span class="line">// 获得公有方法</span><br><span class="line">Method method = class1.getMethod(&quot;eat&quot;);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person1); // 这里就相当于person.eat()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demoTwo() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person2 = (Person) class2.newInstance();</span><br><span class="line">// 获得私有方法</span><br><span class="line">Method method = class2.getDeclaredMethod(&quot;run&quot;);</span><br><span class="line">// 设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法（带参数）</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line">public static void demoThree() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class3 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person3 = (Person) class3.newInstance();</span><br><span class="line">// 获得带参数的私有方法</span><br><span class="line">Method method = class3.getDeclaredMethod(&quot;wacthTv&quot;, String.class);</span><br><span class="line">//设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">//执行该方法</span><br><span class="line">//method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line"></span><br><span class="line">Object obj =method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">MethodTest.demoOne();</span><br><span class="line">MethodTest.demoTwo();</span><br><span class="line">MethodTest.demoThree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出信息</span><br><span class="line">吃东西......</span><br><span class="line">跑步......</span><br><span class="line">我在看新闻联播电视节目</span><br></pre></td></tr></table></figure><p>上面我们测试了3种情况，分别是公有方法，私有方法，以及私有的带参数的方法。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>1、什么是Java的反射机制？<br>Java的反射机制是在运行状态中，对于任意一个类，都能够知道这个类的属性和方法；对于任意一个对象，都能够调用它的任意属性和方法；这种动态获取信息以及动态调用对象方法的功能称之为Java的反射机制。</p><p>2、Java的反射机制的作用？<br>是用来编写一些通用性较高的代码或者框架的时候使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。&lt;/p&gt;
&lt;h2 id=&quot;四大类&quot;&gt;&lt;a href=&quot;#四大类&quot; cl
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（七）：输入输出流和集合</title>
    <link href="http://licheetools.github.io/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://licheetools.github.io/2018/08/04/关于JAVA你必须知道的那些事（七）：输入输出流和集合/</id>
    <published>2018-08-04T13:32:02.000Z</published>
    <updated>2019-04-13T13:32:38.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h3><p>程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。</p><p>那么什么是流呢？所谓的流就是指一连串流动的字符，它是以先进先出的方式发送信息的通道。</p><p>流分为两种，输出流和输入流：</p><p>输出流一般是屏幕，打印机等，用来输出的设备，而输入流则是键盘或者扫描仪等设备。</p><p>数据源（键盘）将数据放到字符流中，然后程序通过read（读操作）进行读取。</p><p>也就是说文件输入是读，文件输出是写。</p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>File就是文件，它可认为是相关记录或放在一起的数据的集合，在Java中，我们使用java.io.File类对文件迸行操作。可以点击这里查看api文档：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8 api</a></p><p>需要注意的是，Windows中的目录分隔符为反斜杠“\”，而Linux的目录中的分隔符则是斜杠“/”。</p><p>eclipse的快速导包快捷键为ctrl+shift+o。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建File对象的三种方式</span><br><span class="line">File file1 =new File(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);   //方法一</span><br><span class="line"></span><br><span class="line">File file1 =new File(&quot;F:\\JAVA&quot;,&quot;\\javatest\\io\\score.txt&quot;);   //方法二</span><br><span class="line"></span><br><span class="line">File file =new File(&quot;F:\\JAVA&quot;);</span><br><span class="line">File file1 =new File(file ,&quot;\\javatest\\io\\score&quot;);   //方法三</span><br></pre></td></tr></table></figure><p>下面介绍一些常见的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">isDirectory()：判断是否是目录</span><br><span class="line">isFile()：判断是否是文件</span><br><span class="line">exists()：判断是否存在</span><br><span class="line">mkdir()：创建一级目录</span><br><span class="line">mkdirs()：创建多级目录</span><br><span class="line">createNewFile()：创建新的文件</span><br><span class="line">canRead()：是否可读</span><br><span class="line">canWrite()：是否可写</span><br></pre></td></tr></table></figure></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>字节分为两种：字节输入流 InputStream和字节输出流 OutputStream，我从网上找了两张图片，大家可以看一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b1d9716f1c8accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4b8a6b6b9bcfaa98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="FileInputStream文件输入流"><a href="#FileInputStream文件输入流" class="headerlink" title="FileInputStream文件输入流"></a>FileInputStream文件输入流</h3><p>FileInputStream文件输入流有几个作用：</p><ul><li>1、就是从文件系统中的某个文件中获得输入字节。</li></ul><p>举个简单的例子，复制就是把原来文件的信息进行读取的操作，然后粘贴就是把读取的信息进行写入的操作；</p><ul><li>2、用于读取图像数据之类的原始字节流。</li></ul><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public int read()</td><td style="text-align:center">从输入流中读取一个数据字节</td></tr><tr><td>public int read(byte[] b)</td><td style="text-align:center">从输入流中将最多b.length个字节的数据读入一个byte数组中</td></tr><tr><td>public int read(byte[] b,int off, int len)</td><td style="text-align:center">从输入流中将最多len个字节的数据读入byte数组中</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输入流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：如果int的返回值为-1，则表示已经读到了文件的末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamOne &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files =new  FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">//int n = files.read();  // 只能读取第一个数据字节</span><br><span class="line">//while(n!=-1) &#123;</span><br><span class="line">//System.out.print((char)n);</span><br><span class="line">//n =files.read();</span><br><span class="line">//&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int n =0;</span><br><span class="line">while((n=files.read())!=-1) &#123;</span><br><span class="line">System.out.print((char)n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再来看一个字节数组的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamTwo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files = new FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">byte [] b =new byte[100];</span><br><span class="line">files.read(b,0,5); //后面2个是偏移量，0表示从开始读取，而5代表存取的字节的长度</span><br><span class="line">System.out.println(new String(b));</span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="FileOutputStream文件输出流"><a href="#FileOutputStream文件输出流" class="headerlink" title="FileOutputStream文件输出流"></a>FileOutputStream文件输出流</h2><p>上面我们说完了FileInputStream文件输入流，接下来说文件输出流FileOutputStream：</p><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public void write(int b)</td><td style="text-align:center">将指定字节写入此文件输出流</td></tr><tr><td>public void write(byte[] b)</td><td style="text-align:center">将b.length个字节从指定byte数组写入此文件输出流中</td></tr><tr><td>public void write(byte[] b,int off,int len)</td><td style="text-align:center">将指定byte数组中从偏移量off开始的len个字节写入此文件输出流</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输出流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：在上面的方法里面都有一个默认参数为append（追加的意思），但是默认为空白（False也就是覆盖的意思），如果你设为True那么就是后面追加，会保留原来的信息。</p><p>上面的方法是不是和前面输入流很相似，是的这就是一个互逆的过程。</p><p>不过还有一个问题就是很容易发生编码错误，所以你会发现字节流其实不是很容易适合做字符相关的操作，适合做二进制数据相关的操作。但是却是非常适合文件的复制，粘贴。</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>我们之前的文件读写都是直接从硬盘上读取的，其实这种方式读取非常慢的；而我们现在要说的缓冲流这表明我们可以从内存中进行读取。</p><p>缓冲流包括：缓冲输入流BufferedInputStream和缓冲输出流BufferedOutputStream</p><p>缓冲输入流是不能直接直接读取文件系统中的数据的，它必须要和文件输入流进行结合。</p><p>缓冲区满了，会自动清空；不满则需要强制清空（你可以调用flush或者close方法）。</p><p>有时候我们会比较程序的运行时间，这时候我们可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long startTime =System.currentTimeMillis();  //获取当前的时间-1970年1月1日最后就是运行时间</span><br></pre></td></tr></table></figure></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>同样字符流也分为两种：字符输入流Reader和字符输出流 Writer</p><p>字节流和字符流它们主要的区别就是应用的场景不一样：<a href="https://blog.csdn.net/cynhafa/article/details/6882061" target="_blank" rel="noopener">java 字节流与字符流的区别</a></p><p>我网上找了2张图片，大家看一下关于字符流相关的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-73464e734ce3a5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30a69bdd4bdbf1c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="字节字符转换流"><a href="#字节字符转换流" class="headerlink" title="字节字符转换流"></a>字节字符转换流</h2><p>接下我们来谈谈字节字符转换流，顾名思义就是供字节字符转换用的（两者过渡的桥梁）：InputStreamReader和OutputStreamWriter：<br><a href="https://www.cnblogs.com/alsf/p/6778055.html" target="_blank" rel="noopener">掌握OutputStreamWriter和InputStreamReader类的作用</a></p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。简单点说就是把java对象转换为字节序列的过程。反序列就是和它相反的过程。</p><p>序列化步骤：<br>1、创建一个类，然后实现Serializable接口；<br>2、创建对象：将对象写入文件；<br>3、从文件读取对象信息<br>这个过程会涉及到两个流：对象输入流ObjectInputStream 和 对象输出流ObjectOutputStream</p><p> <a href="https://www.cnblogs.com/xdp-gacl/p/3777987.html" target="_blank" rel="noopener">Java基础学习总结——Java对象的序列化和反序列化</a></p><p><a href="http://www.importnew.com/17964.html" target="_blank" rel="noopener">Java对象的序列化与反序列化</a></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>在前面我们好像有介绍过数组（又好像没有，不管了），我们知道数组用于固定长度的数据场景，而集合更适合数据动态变化的场景。</p><p>或者说集合更加适合应用于下列场景:<br>1、无法预测存储数据的数量；<br>2、同时存储具有一对一关系的数据(商品信息&amp;详情或者学生&amp;学号等)；<br>3、需要进行数据的增删；<br>4、数据不允许重复等</p><h3 id="集合框架的体系结构"><a href="#集合框架的体系结构" class="headerlink" title="集合框架的体系结构"></a>集合框架的体系结构</h3><p>集合框架一共分为两类：Collection和Map。其中Collection用于存储类的对象，而Map用于以键值对的形式来存储信息。</p><p>为了更好的理解，我从网上找了一张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-115e000525e874e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Collection这个类下面有3个子接口，分别是List（序列），Queue（队列），Set（集）。其中，List（序列），Queue（队列）中存放的数据必须是有序的，并且是允许重复的；Set（集）存放的数据是无序的，且不允许重复的。每个接口下面又有许多的实现类。List的实例类是ArrayList（可以看做一个长度动态增长的数组）。Queue的实现类是LinkedList（它实现了List和Queue，也就是链表）。Set的实现类是HashSet，也就是哈希集。</p><p>Map这个类可以实现的类有HashMap，也就是哈希表。</p><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><p>List：是元素有序并且可以重复的集合，称为序列或者列表。</p><p>List可以精确控制每个元素的插入位置或删除某个位置的元素。</p><p>List的两个主要实现类是ArrayList和LinkedList。这里我们主要介绍ArrayList类，因为这个类使用比较多。其实ArrayList和数组是比较相似的，只是它的长度可以动态增长，它其实也是内存上一片连续的存储空间进行存储。而LinkedList本身是一个链表，这两个中方法的作用是几乎相同的。</p><p>ArrayList底层是由数组实现的，它的长度是可以动态增长的，用来满足应用程序的需求。如果你要在在列表尾部插入或删除数据，那么使用ArrayList是非常有效的(如果中间插入或者删除会过多挪位，并不适合)。当然它还更适合查找和更新元素，最重要的一点就是ArrayList中的<strong>元素可以为null值</strong>。</p><p>我们即将要将的Collection都是存放于java.util 包中的，所以在使用的时候需要我们自己进行包的导入。</p><p>下面简单介绍List接口中几种常用的方法，以便于大家在用的时候得心用手：</p><p>add()：向列表末尾添加元素；clear()：清空列表中元素；contains()：判断列表中是否包含指定的对象。</p><p>get()：返回此列表中指定位置的元素； indexOf ()：返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。</p><p>isEmpty() ：集合是否为空，空返回true； iterator ()：以正确的顺序返回该列表中的元素的迭代器；remove()：删除该列表中指定位置的元素；size()：返回此列表中的元素数；sort()：对列表进行排序。</p><p>接下来我们来看ArrayList这个类，你会发现它的方法其实和我们List这个接口的方法非常类似。其中<code>ArrayList()</code>是它的无参构造方法：构造一个初始容量为十的空列表；<code>ArrayList(Collection &lt;? extends E&gt; c)</code>是它的有参构造方法，它可以通过已存在的Collection来构造ArrayList。</p><p>记住列表的索引号是从零开始的，这一点很重要，需要特别注意。</p><p>我觉得学语言很多时候就得多看Api文档，这对自己自身能力的提高非常有帮助。</p><h3 id="ArrayList案例分析"><a href="#ArrayList案例分析" class="headerlink" title="ArrayList案例分析"></a>ArrayList案例分析</h3><p>双十一的时候，很多网站都会在其首页发布一些打折的消息，我们现在的任务就是模拟这个场景，要求如下：<br>1、添加和显示信息；<br>2、在指定位置处插入信息；<br>3、删除消息；<br>4、修改消息。<br>条件：编号 id，标题 title，创建人 creator，创建时间 createTime。</p><p>博主是一个重度的Python爱好者，所以这些要求刚写的时候，就已经想到如何用Python中的list去实现相关功能了。所以，如果你也喜欢Python不妨来交流学习。</p><p>好了，有点跑题了，你自己先尝试通过查看api文档的方式，看看自己能否独立实现这些要求，之后再来查看结果吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class Notice &#123;</span><br><span class="line">//公告的添加和显示;在指定位置处插入公告;删除公告;修改公告</span><br><span class="line">// 编号 id;标题 title;创建人 creator;创建时间 createTime</span><br><span class="line"></span><br><span class="line">private int id;</span><br><span class="line">private String title;</span><br><span class="line">private String create;</span><br><span class="line">private Date createTime;</span><br><span class="line"></span><br><span class="line">public Notice() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">public Notice(int id, String title, String create, Date createTime) &#123;</span><br><span class="line">super();</span><br><span class="line">this.id = id;</span><br><span class="line">this.title = title;</span><br><span class="line">this.create = create;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setId(int id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getTitle() &#123;</span><br><span class="line">return title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTitle(String title) &#123;</span><br><span class="line">this.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getCreate() &#123;</span><br><span class="line">return create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreate(String create) &#123;</span><br><span class="line">this.create = create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Date getCreateTime() &#123;</span><br><span class="line">return createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreateTime(Date createTime) &#123;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看这个类的测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class NoticeTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建Notice类的对象，我们先实例化3条信息</span><br><span class="line">Notice notice1 =new Notice(1,&quot;欢迎来到啃饼小白的修炼之旅&quot;,&quot;啃饼小白&quot;,new Date());</span><br><span class="line">Notice notice2 =new Notice(2,&quot;欢迎来到java的世界&quot;,&quot;管理员&quot;,new Date());</span><br><span class="line">Notice notice3 =new Notice(3,&quot;世界那么大，我想出去看看&quot;,&quot;思录者&quot;,new Date());</span><br><span class="line"></span><br><span class="line">// 将消息添加到ArrayList里面</span><br><span class="line">ArrayList noticelist =new ArrayList();</span><br><span class="line">noticelist.add(notice1);  // 默认为末尾添加</span><br><span class="line">noticelist.add(notice2);</span><br><span class="line">noticelist.add(notice3);</span><br><span class="line"></span><br><span class="line">// 消息的显示</span><br><span class="line">System.out.println(&quot;消息的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 在第一条消息后面添加一条消息</span><br><span class="line">Notice notice4 =new Notice(4,&quot;努力与运动兼备&quot;,&quot;拾光小白&quot;,new Date());</span><br><span class="line">noticelist.add(1,notice4);</span><br><span class="line">System.out.println(&quot;添加完消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 删除编号为3的消息：欢迎来到java的世界</span><br><span class="line">//noticelist.remove(2);</span><br><span class="line">noticelist.remove(notice2);</span><br><span class="line">System.out.println(&quot;删除消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 修改编号为3的消息：世界那么大，我想出去看看，中的我修改为你</span><br><span class="line">notice3.setTitle(&quot;世界那么大，你想出去看看&quot;);</span><br><span class="line">System.out.println(&quot;修改消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们来介绍集合中的另一个set。</p><h2 id="set-集"><a href="#set-集" class="headerlink" title="set(集)"></a>set(集)</h2><p>Set是元素无序且不可以重复的集合，被称为集。而我们上面刚介绍的列表则是有序且重复的，这一点要弄清楚。</p><p>set是一个接口，而它的实现类是HashSet（哈希集）。哈希集中的元素是无序且不可以重复的。而且在HashSet中，只允许有一个null元素因此它具有良好的存取和查找性能。</p><p>由于HashSet中的方法和前面介绍的ArrayList中的差不多，因此这里就不再过多的介绍其方法了，而是直接通过一个例子来进行具体方法的使用：</p><p>不过在这之前，我需要告诉你的是hashset里面是没有提供用于元素输出的get()方法，但是呢，它提供了一个iterator()方法，用于对集合元素进行遍历。</p><p>Iterator (迭代器): Iterator接口可以以统一的方式对各种集合元素进行遍历。记住这个Iterator (迭代器)是存在于java.util包里面的。</p><p>迭代器有2个方法：hasNext()和next()。其中hasNext()方法用于检测集合中是否还有下一个元素，这个是遍历的终止条件；而另一个next()方法是用于返回集合中的下一个元素。</p><p>要求：用HashSet存储多个表示颜色的英文单词,并输出。<br>其中单词包括: “blue”,”red”,”black”,”yellow”和”white”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class HashSetDemo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 将英文单词添加到HashSet当中, &quot;blue&quot;,&quot;red&quot;,&quot;black&quot;,&quot;yellow&quot;和&quot;white&quot;</span><br><span class="line">HashSet hset =new HashSet();</span><br><span class="line">hset.add(&quot;red&quot;);</span><br><span class="line">hset.add(&quot;blue&quot;);</span><br><span class="line">hset.add(&quot;black&quot;);</span><br><span class="line">hset.add(&quot;yellow&quot;);</span><br><span class="line">hset.add(&quot;white&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;集合中的元素为：&quot;);</span><br><span class="line">Iterator it =hset.iterator();</span><br><span class="line">// 遍历迭代器并进行输出</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在有一个问题，如果你把一个已经重复的对象插入到集合里面，会发生什么情况呢？答案是不会报错，可以运行，但是你会发现其实你根本插入不进去。是的，集合就是这样。</p><p>我们现在又来举一个例子，这个例子会让你对上面的介绍生产模糊，但这是必要的：</p><p>案例：如何在HashSet中添加自定义类的对象?<br>需求：<br>1、添加和显示宠物猫信息；<br>2、查找某只宠物猫的信息并输出；<br>3、修改宠物猫的信息;删除宠物猫信息</p><p>其中属性为: 名字name；年龄month；品种species<br>方法为: 构造方法；获取和设置属性值的方法；其他方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">public class Cat &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int month;</span><br><span class="line">private String species;</span><br><span class="line">public Cat(String name, int month, String species) &#123;</span><br><span class="line">super();</span><br><span class="line">this.name = name;</span><br><span class="line">this.month = month;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getMonth() &#123;</span><br><span class="line">return month;</span><br><span class="line">&#125;</span><br><span class="line">public void setMonth(int month) &#123;</span><br><span class="line">this.month = month;</span><br><span class="line">&#125;</span><br><span class="line">public String getSpecies() &#123;</span><br><span class="line">return species;</span><br><span class="line">&#125;</span><br><span class="line">public void setSpecies(String species) &#123;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot; 姓名=&quot; + name + &quot;, 年龄=&quot; + month + &quot;, 品种=&quot; + species + &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class CatTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 定义宠物猫对象</span><br><span class="line">Cat huahua = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">Cat fanfan = new Cat(&quot;凡凡&quot;, 10, &quot;英国短毛猫&quot;);</span><br><span class="line"></span><br><span class="line">// 将对象添加到hashset中</span><br><span class="line">HashSet hset = new HashSet();</span><br><span class="line">hset.add(huahua);</span><br><span class="line">hset.add(fanfan);</span><br><span class="line"></span><br><span class="line">// 显示宠物猫信息</span><br><span class="line">Iterator it = hset.iterator();</span><br><span class="line"></span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*******************************************&quot;);</span><br><span class="line">// 添加一个与花花属性一模一样的猫</span><br><span class="line">Cat huahua1 = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">hset.add(huahua1);</span><br><span class="line">Iterator its = hset.iterator();</span><br><span class="line">while (its.hasNext()) &#123;</span><br><span class="line">System.out.println(its.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br><span class="line">*******************************************</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br></pre></td></tr></table></figure></p><p>你运行上面的代码，你会发现一个有趣的事，你在集合里面竟然添加了一条和花花一模一样的数据，说好的集合不能添加相同的数据，你仿佛在逗我玩？我被欺骗了，宝宝不开心了。。。。。。</p><p>其实刚才那句话是适合于字符串的，为什么这么说呢，那是因为字符串是系统提供给我们的类，它里面已经将数据重复的规则，也就是这两个对象是否完全一样（属性，方法等）已经定义好了。这个你可以类比到toString方法，你直接输出对象却是对象在内存中的地址，但是你输出字符串却是字符串的值，这其实也就是字符串里面已经重写了自己的toString方法。</p><p>所以呢，如果你也希望自己定义的类也具有相似的功能，那么你需要重写hashCode()和equals()方法。我们知道equals()在字符串中是判断两个对象的值是否相等。在java里面，hashCode是与哈希表有关的，这是数据结构的知识，我这里简单说明一下。</p><p>举个例子，假如你要存储100个数字，如果你使用前面ArrayList或者数组来存储，而不是哈希表的话，在内存中连续的开辟一个空间用来存放数据，这似乎是可以的，但是一旦要是查找你就不行了。假设你要查找的数据在第100个位置，又或者说是不存在的，但你还是得从头开始查找，这样太浪费时间了。</p><p>那么如何利用哈希表来存储上述数据呢？我们可以这样：在内存中开辟3个区域来进行存放，同时为这3个区域进行编号和命名为桶0，桶1，桶2。然后我们制定一些规则用于桶里面数据的存放，而这些规则就是hashCode。假设我们定义的hashCode为n%3也就是利用数对3进行取余，来进行判断。那么桶0，桶1，桶2存放的数据分别是3的倍数，对3取余数加1，对3取余数加2。</p><p>有了这样的存储结构，我们首先是判断这个数是不是在这个桶里，然后是在哪个桶里，然后就去遍历这个桶里的元素。判断元素在哪个桶里，我们使用的是hashCode()方法，而判断桶里哪一个元素是我们要找的，则是使用equals()方法。这种方法真的好快。</p><p>下面是系统生成的equals方法，我觉得很麻烦，那么你自己是可以重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">Cat other = (Cat) obj;</span><br><span class="line">if (month != other.month)</span><br><span class="line">return false;</span><br><span class="line">if (name == null) &#123;</span><br><span class="line">if (other.name != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!name.equals(other.name))</span><br><span class="line">return false;</span><br><span class="line">if (species == null) &#123;</span><br><span class="line">if (other.species != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!species.equals(other.species))</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写后的equals方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if(this==obj) // 判断对象是否相等，相等则返回true，没必要继续比较属性</span><br><span class="line">return true;</span><br><span class="line">if (obj.getClass()==Cat.class) // 判断obj是否是Cat类的对象，是进行强制转换，进行对象属性的比较</span><br><span class="line">&#123;</span><br><span class="line">Cat cat = (Cat)obj;</span><br><span class="line">    return (cat.getName().equals(name))&amp;&amp;(cat.getMonth()==month)&amp;&amp;(cat.getSpecies().equals(species));</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写了这两个方法以后，现在你再来运行我们的测试类，你会发现花花这个重复对象是不能再次添加进去了。</p><p>现在我们想查找花花的信息，我们有多种方式，第一种是通过花花这个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面查找花花的信息并进行输出</span><br><span class="line">if(hset.contains(huahua)) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(huahua);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;对不起，花花没有找到&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种是通过花花的名字来查找花花的信息并进行输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面使用名字来查找花花的信息并进行输出</span><br><span class="line">boolean flag =false;</span><br><span class="line">its = hset.iterator();</span><br><span class="line">Cat cat =null ;</span><br><span class="line">while(its.hasNext()) &#123;  // 判断是否有下一个对象</span><br><span class="line">                cat=(Cat)its.next();    // 输出下一个对象的信息</span><br><span class="line">if(cat.getName().equals(&quot;花花&quot;)) &#123;</span><br><span class="line">flag =true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(cat);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;花花没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说完了hsahset，接下来我们来聊聊map的那些事。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map中的数据是以键值对( key-value )的形式存储的，这个和Python中的dict（字典）<br>很相似。</p><p>key-value以Entry类型的对象实例存在，而MAp.Entry本身也是一个接口；你可以通过key值来快速地查找value的值。</p><p>一个key-value的映射不能包含重复的键（Key的值必须是唯一的），但是Value是可以重复的。每个键最多只能映射到一个值。</p><p>同样这个Map接口中最常用的实现类是HashMap类，我们前面说过HashSet是基于HashMap而实现的。</p><p>HashMap是基于哈希表的Map接口的实现，它允许使用null值和null键（但是只能有一个）</p><p>key值不允许重复，HashMap中的Entry对象是无序排列的。</p><p>Map接口，HashSet 泛型有一个类，Map&lt;&gt;后可以有key的类型以及Value的类型。</p><p>entrySet获取键值对所有的内容，你可以通过get(key)取Value。keySet取出所有key值。HashMap中使用put添加元素，remove根据key值来移除元素。</p><p>HashMap中构造方法，默认容量16，加载因,0.75 ；你可以使用已存在map集合创建HashMap。</p><p>关于这一块，大家还是多看看api文档，多自己动手操作吧。</p><p>需求：完成一个类似字典的功能：<br>1、将单词以及单词的注释存储到HashMap中；<br>2、显示HashMap中的内容；<br>3、查找某个单词的注释并显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class DictionaryDemoTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String,String&gt; animal =new HashMap&lt;String,String&gt;();</span><br><span class="line">System.out.println(&quot;请输入三组单词对应的注释，并存放到HashMap当中：&quot;);</span><br><span class="line">Scanner console =new Scanner(System.in);</span><br><span class="line">int i=0;</span><br><span class="line">while(i&lt;3) &#123;</span><br><span class="line">System.out.println(&quot;请输入key值(单词)：&quot;);</span><br><span class="line">String key =console.next();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入value值(注释)：&quot;);</span><br><span class="line">String value =console.next();</span><br><span class="line">animal.put(key, value);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印输出value的值（使用迭代器）</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">System.out.println(&quot;使用迭代器输出所有的value的值：&quot;);</span><br><span class="line">Iterator&lt;String&gt; it =animal.values().iterator();</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 打印输出key和value的值</span><br><span class="line">// 通过entrySet方法得到key-value</span><br><span class="line">System.out.println(&quot;通过entrySet方法得到key-value：&quot;);</span><br><span class="line">Set&lt;Entry&lt;String,String&gt;&gt; entrySet =animal.entrySet();// 使用增强型for循环进行遍历</span><br><span class="line">for(Entry&lt;String,String&gt; entryset:entrySet) &#123;</span><br><span class="line">System.out.print(entryset.getKey()+&quot;-&quot;);</span><br><span class="line">System.out.println(entryset.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 通过单词找到注释并输出</span><br><span class="line">// 使用KeySet方法</span><br><span class="line">System.out.println(&quot;请输入你要查找的key(单词)&quot;);</span><br><span class="line">String keySearch =console.next();</span><br><span class="line">// 1、取得KeySet</span><br><span class="line">Set&lt;String&gt; KeySet =animal.keySet();</span><br><span class="line">//2、遍历KeySet</span><br><span class="line">boolean flag =false;</span><br><span class="line">for(String key:KeySet) &#123;</span><br><span class="line">if(key.equals(keySearch)) &#123;</span><br><span class="line">System.out.println(&quot;找到了&quot;+&quot;键值对为：&quot;+key+&quot;-&quot;+animal.get(key));</span><br><span class="line">flag=true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!flag) &#123;</span><br><span class="line">System.out.println(&quot;对不起，没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们再来看一个例子：商品信息管理的HashMap实例。</p><p>需求：使用HashMap対商品信息迸行管理：其中key是商品编号, value是商品对象；<br>你需要对HashMap中的商品信息迸行増、刪、改、査操作。</p><p>要求：分析商品信息类:<br>属性：商品编号: id；商品名称: name；商品价格: price<br>方法：构造方法，获取和设置属性值的方法和其他方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">float goodsPrice = console.nextFloat();</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是初始的代码，这个代码尽管能运行，但是实际上运行的问题还是很多的：<br>商品编号不可以重复（后面对前面的信息进行了覆盖）；类型输入错误。接下来我们就对这些进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.InputMismatchException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">// 判断商品编号id是否存在</span><br><span class="line">if(goodsMap.containsKey(goodsId)) &#123;</span><br><span class="line">System.out.println(&quot;该商品编号已经存在，请重新输入&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line"></span><br><span class="line">float goodsPrice = 0;</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">try &#123;</span><br><span class="line"> goodsPrice = console.nextFloat();</span><br><span class="line">&#125;catch(InputMismatchException e) &#123;</span><br><span class="line">System.out.println(&quot;商品价格的格式不准确，请输入数值型数据&quot;);</span><br><span class="line">console.next();</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9916f2753ebb5bf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们通过这张图片，来简单的对集合进行一下总结。</p><p>我们知道Collection这个接口是有3个实现接口的，list，queue和set，而每个接口下面都有其实现的类。</p><p>Arraylist：底层由数组实现，它的元素是有序且可以重复的，它可以动态增长，以满足应用程序的需求。值得注意的是，ArrayList的元素值可以为null。</p><p>HashSet：是Set接口的实现类，它的元素是无序且不可以重复的，不过只允许一个null元素</p><p>HashMap：以键值对存储的数据，里面的键不能重复，但是允许使用null值和null键 。HashMap中的Entry对象(键值对)是无序排列的。</p><p>也就是说上面3个只有第一个是有序的，其它两个都是无序的。</p><p>Iterator (迭代器) ：Iterator接口以统一的方式对各种集合元素进行遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it=set.iterator();</span><br><span class="line"></span><br><span class="line">while(it.hasNext())&#123;  // 判断迭代器下一个是否有内容</span><br><span class="line"> System.out.print(it.next()+&quot;  &quot;);   // 取出存在的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在String对象比较的是按照ASCII值进行对比的，如果要比较我们自己定义的类呢？就必须重写我们的hashCode()方法和equals方法。如果两者的hashCode不同，那肯定不是一个对象，后面不需要使用equals方法；如果hashCode相同，我们再去调用equals方法，比较对象的其他属性或方法是否相同。</p><p>本来这里应该介绍泛型的，但是考虑到篇幅的原因，下次再介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;输入输出流&quot;&gt;&lt;a href=&quot;#输入输出流&quot; class=&quot;headerlink&quot; title=&quot;输入输出流&quot;&gt;&lt;/a&gt;输入输出流&lt;/h3&gt;&lt;p&gt;程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。&lt;/p&gt;
&lt;p&gt;那么什么是流呢？所谓的流就是
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（六）：包装类和多线程</title>
    <link href="http://licheetools.github.io/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://licheetools.github.io/2018/08/04/关于JAVA你必须知道的那些事（六）：包装类和多线程/</id>
    <published>2018-08-04T13:30:42.000Z</published>
    <updated>2019-04-13T13:31:19.921Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。</p><p>那么我们如何让它和我们的对象一样，具有属性和方法呢？这里你就要用到包装类了。</p><p>包装类的产生就是为了解决基本数据类型存在的上述问题。通过包装类可以让基本数据类型获取对象一样的特征，拥有属性方法，行使对象一样的权益，从而完成对象化交互。</p><p>包装类与基本数据类型之间的对应关系，见下面的表格：<br>基本数据类型| 对应的包装类| 说明</p><ul><li>| :-: |-:<br>byte|    Byte|原始大写<br>short    |Short|原始大写<br>int    |Integer|变形<br>long|    Long|原始大写<br>float    |Float|原始大写<br>double|    Double|原始大写<br>char    |Character|变形<br>boolean    |Boolean|原始大写<br>注意：只有int 和char其基本数据类型与对应的包装类有一个变形以外，其余的都是其首字母的大写而已。</li></ul><p>所有的包装类都存在于java.lang中，而且都是被final关键字所修饰，也就是说所有的包装类是没有子类的，不可以被继承的。</p><p> 所有的数值型（byte,short,int,long,float,double,）都是继承自Number的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1d47a9ad1455103a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>余下的char 和 boolean是继承Object类的：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1f2a9cbdf0c10741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b10919e52363d087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="基本数据类型和包装型之间的转换"><a href="#基本数据类型和包装型之间的转换" class="headerlink" title="基本数据类型和包装型之间的转换"></a>基本数据类型和包装型之间的转换</h2><p>基本数据类型—–》包装型（装箱）；<br>包装型—–》基本数据类型（拆箱）；</p><h3 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h3><p>装箱：把基本数据类型转换成包装类，有自动装箱和手动装箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 自动装箱</span><br><span class="line">int a1 =1;</span><br><span class="line">Integer a2=a1;</span><br><span class="line"></span><br><span class="line">// 手动装箱</span><br><span class="line">Integer a3 =new Integer(a1);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;基本数据类型a1的值是：&quot;+a1);</span><br><span class="line">System.out.println(&quot;Integer类a2的值是：&quot;+a2);</span><br><span class="line">System.out.println(&quot;Integer类a3的值是：&quot;+a3);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">基本数据类型a1的值是：1</span><br><span class="line">Integer类a2的值是：1</span><br><span class="line">Integer类a3的值是：1</span><br></pre></td></tr></table></figure></p><h3 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h3><p>拆箱：把包装类转换成基本数据类型，也有自动拆箱和手动拆箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 自动拆箱</span><br><span class="line"></span><br><span class="line">int a4 = a1;</span><br><span class="line"></span><br><span class="line">// 手动拆箱</span><br><span class="line">Integer a5 = a3.intValue();</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">System.out.println(&quot;Interger：&quot; + a1);</span><br><span class="line">System.out.println(&quot;基本数据类型a4是：&quot; + a4);</span><br><span class="line">System.out.println(&quot;手动intValue：&quot; + a5);</span><br><span class="line"></span><br><span class="line">double a6 = a2.doubleValue();</span><br><span class="line">System.out.println(&quot;手动拆箱 double: &quot;+a6);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Interger：1</span><br><span class="line">基本数据类型a4是：1</span><br><span class="line">手动intValue：1</span><br><span class="line">手动拆箱 double: 1.0</span><br></pre></td></tr></table></figure></p><h3 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 基本数据类型转换为字符串</span><br><span class="line"></span><br><span class="line">// 将整型转换为字符串</span><br><span class="line">int a1 =9;</span><br><span class="line">String a2 =Integer.toString(a1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">System.out.println(&quot;int类型转换为String类型对象a2的值：&quot;+a2);</span><br><span class="line">System.out.println(&quot;******************************&quot;);</span><br><span class="line"></span><br><span class="line">//字符串转换为基本数据类型</span><br><span class="line">// 1、包装类的parse方法</span><br><span class="line">int a3 =Integer.parseInt(a2);</span><br><span class="line"></span><br><span class="line">//2、包装类的valueOf方法，现将字符串转换为包装类，再通过自动拆箱完成基本数据类型的转换</span><br><span class="line">int a4 =Integer.valueOf(a2);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a3的值：&quot;+a3);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a4的值：&quot;+a4);</span><br></pre></td></tr></table></figure><p>总结一下，你可以通过toString方法将基本数据类型转换为字符串。</p><p>同样可以通过Parse和valueOf将字符串转换为基本数据类型。需要注意的是，valueOf是对Parse的封装。</p><h3 id="包装类的几点说明"><a href="#包装类的几点说明" class="headerlink" title="包装类的几点说明"></a>包装类的几点说明</h3><p>我们前面好像有说过基本数据类型的默认值，这里重新贴一下：</p><table><thead><tr><th>基本数据类型</th><th style="text-align:center">默认值</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td>byte</td><td style="text-align:center">0</td></tr><tr><td>short</td><td style="text-align:center">0</td></tr><tr><td>int</td><td style="text-align:center">0</td></tr><tr><td>long</td><td style="text-align:center">0L</td></tr><tr><td>float</td><td style="text-align:center">0.0f</td></tr><tr><td>double</td><td style="text-align:center">0.0d</td></tr><tr><td>char</td><td style="text-align:center">‘\u0000’</td><td style="text-align:right">\u是指Unicode编码</td></tr><tr><td>boolean</td><td style="text-align:center">false</td></tr></tbody></table><p>那么现在问题来了，我们定义一个Integer类型的对象one ,它的初始值是不是也是0呢?答案不是0,而是null，因为此时Integer和String一样，都是类，其初始值为null。</p><h3 id="包装类的对象信息"><a href="#包装类的对象信息" class="headerlink" title="包装类的对象信息"></a>包装类的对象信息</h3><p>我们先来看一段代码，你先试着猜一下它的运行结果，然后参看输出结果，看看有什么体会：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ChangLiangTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Integer one =new Integer(100);</span><br><span class="line"></span><br><span class="line">Integer two =new Integer(100);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;one==two的结果：&quot;+(one==two));  //1</span><br><span class="line"></span><br><span class="line">Integer three =100;</span><br><span class="line">System.out.println(&quot;three==100的结果：&quot;+(three==100));  //2</span><br><span class="line"></span><br><span class="line">Integer four =100;</span><br><span class="line">System.out.println(&quot;three==four的结果：&quot;+(three==four));  //3</span><br><span class="line"></span><br><span class="line">Integer five =200;</span><br><span class="line">System.out.println(&quot;five==200的结果：&quot;+(five==200));  //4</span><br><span class="line"></span><br><span class="line">Integer six =200;</span><br><span class="line">System.out.println(&quot;five==six的结果：&quot;+(five==six));  //5</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在前面说过，使用new关键词就是直接在内存中开辟一个新的空间，one和two 只是值相等，内存中地址的引用并不相同，因此1输出的结果必然是false。</p><p><code>Integer three =100</code>其实是自动装箱，而后面的<code>three =100</code>其实是自动拆箱，实际上执行的是<code>Integer three =Integer.valueOf(100)</code>，最后比较的则是2个int类型的值是否相等，因此结果必然为true。</p><p>前面说过<code>Integer four =100</code>是自动装箱，但是它实际上执行的是<code>Integer four=nteger.valueOf(100);</code>。而valueOf会自动缓存值（在缓存区或者说对象池里面），也就是说当-128&lt;参数&lt;127的时候，该参数会直接从缓存区获取。因此两者比较的是来自缓存区的同一块地址。显然该结果是true。</p><p>同样<code>Integer five =200</code>是自动装箱，后面<code>five==200</code>自动拆箱，因此这里比较的则是2个int类型的值是否相等。显然该结果是true。</p><p>而最后一个则是因为参数200，它已经超出-128&lt;参数&lt;127这个范围，因此会直接实例化new 一个Integer，所以比较的是两个内存中的对象，显然结果是false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 输出结果：</span><br><span class="line">one==two的结果：false</span><br><span class="line">three==100的结果：true</span><br><span class="line">three==four的结果：true</span><br><span class="line">five==200的结果：true</span><br><span class="line">five==six的结果：false</span><br></pre></td></tr></table></figure><p>也就是说，当参数在-128 到 128之间才能从对象池中进行获取，超出则是不可以的，需要new了。</p><p>在java基本数据类型的包装类中除了 float 和 double都是可以应用对象常量池概念的。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-df9c491910b88071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面那样说你可能还不明白，我举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Double d1 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==100的结果是：&quot;+(d1==100));  //1</span><br><span class="line"></span><br><span class="line">Double d2 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==d2的结果是：&quot;+(d1==d2));  //2</span><br></pre></td></tr></table></figure></p><p>1的输出结果为true这是没有任何问题的，但是2的输出结果是false，因为float 和 double是不适用于对象常量池的。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>在说多线程之前，我么先来了解什么是进程？</p><p>进程就是可执行程序并存放在计算机存储器的一个指令序列，它是一个动态执行的过程。</p><p>线程是比进程还要小的运行单位，一个进程包含多个线程，你可以把线程看做一个子程序。</p><p>我们知道程序的运行是靠CPU的，那么在只有一个CPU情况下，如何才能保证程序的正常运行呢？我们可以把CPU的运行时间进行分片，根据时间片来进行任务的轮转执行，但由于时间片的长度太短了，以至于我们认为所有任务都是同时进行的。</p><h3 id="Thread和Runnable接口介绍"><a href="#Thread和Runnable接口介绍" class="headerlink" title="Thread和Runnable接口介绍"></a>Thread和Runnable接口介绍</h3><p>如何进行线程的创建呢？在Java里面，你可以通过创建一个Thread类或者一个Thread子类的对象来创建线程。也可以创建一个实现Runnable接口的类的对象。这两种都是可以的。</p><p>Thread是-个线程类，位于java.lang包下面，你可以去api文档进行查看，这里列举部分构造方法：<br>构造方法    | 说明| 备注</p><ul><li>| :-: | -:<br>Thread()|    创建一个线程对象|<br>Thread(String name)    |创建一个具有指定名称的线程对象|<br>Thread(Runnable target)    |创建一个基于Runnable接口实现类的线程对象|<br>Thread(Runnable target,String name)|    创建一个基于Runnable接口实现类,并且具有指定名称的线程对象。|</li></ul><p>以及Thread类的常用方法：<br>方法    | 说明| 备注</p><ul><li>| :-: | -:<br>public void run()    |线程相关的代码写在该方法中，一般需要重写<br>public void start()    |启动线程的方法<br>public static void sleep(long m)    |线程休眠m毫秒的方法<br>public void join()    |优先执行调用join()方法的线程</li></ul><p>你只需要记住，我们所有线程实现的代码都必须放在run方法里面，自然run方法中的代码被称为线程体。</p><p>还需要注意的是Runnable接口，它只有一个方法run()方法。你只需要记住Runnable是Java中用以实现线程的接口，任何实现线程功能的类都必须实现Runnable接口。</p><p>你可以点击这里查看<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Java8 api</a>，获取更多信息。</p><h3 id="通过Thread类创建线程"><a href="#通过Thread类创建线程" class="headerlink" title="通过Thread类创建线程"></a>通过Thread类创建线程</h3><p>在api里面，我们知道通过Thread类是可以创建线程的。那么我们现在就来通过继承Thread类的方式创建线程类，并重写run()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadTestDemo extends Thread &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(getName()+&quot;该线程正在执行！&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//System.out.println(&quot;主线程1正在执行&quot;);</span><br><span class="line">ThreadTestDemo ttd =new ThreadTestDemo();</span><br><span class="line">//ttd.start();  // 启动线程</span><br><span class="line">ttd.start();   //线程只能启动一次，不能多次启动</span><br><span class="line">//System.out.println(&quot;主线程2正在执行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大家知道除了我们刚才自定义的线程，其实还有一个主线程。现在我们自己来定义两个线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread &#123;</span><br><span class="line">public MyThread(String name) &#123;</span><br><span class="line">super(name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(getName()+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">public class ThreadTestTwo &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">MyThread t1 =new MyThread(&quot;线程1&quot;);</span><br><span class="line">MyThread t2 =new MyThread(&quot;线程2&quot;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个其实和我们上面的例子差别不是很大，只是现在我们定义了两个线程，但是主线程依然存在。运行一下，你会发现你每次的运行结果都是不相同的。对的，无论是线程还是进程，它们的运行顺序都是由系统来调度的，不是由程序员所能决定的（注意这是没有附加方法的情况，后面会说线程间的通信）</p><h3 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h3><p>现在你可能有一个疑问，为什么要实现Runnable接口呢又或者说为什么要实现Runnable接口创建线程呢?</p><p>答案你肯定知道，因为Java是单继承的，不支持多继承。现在问题来了，如果我现在定义的类已经继承了一个类，那么就不能通过继承Thread类来创建线程了？</p><p>又或者说，我不想重写Thread类的其他方法，只想使用run方法，这时候怎么办呢？</p><p>这时候Runnable接口就派上用场了。（前面说过Runnable接口只有一个run方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr2);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个输出结果也是随机的，但都会输出打印20个线程。现在我们对其修改一下，我们看一下，是不是多个线程可以共享同一个变量（言外之意，是不是只能打印输出11个线程，还有主线程）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">int i=0;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">for(;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">//TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#输出结果</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br></pre></td></tr></table></figure></p><p>结果是的，所以也就是说线程之间是可以共享成员变量的。</p><h3 id="线程的状态和生命周期"><a href="#线程的状态和生命周期" class="headerlink" title="线程的状态和生命周期"></a>线程的状态和生命周期</h3><p>通常而言，线程是有五个状态的，分别是：</p><p>新建(New)：创建一个Thread或Thread子类的对象时就会进入新建状态。</p><p>可运行(Runnable)： 调用start方法是进入可运行状态（而不是立即执行），就绪状态</p><p>正在运行(Running)： 一个Thread获取了cpu使用权就进入了正在运行状态。记住只有可运行状态才能进入到正在运行状态，其他的不可以。</p><p>阻塞(Blocked): 不再执行，缺少资源。</p><p>终止状态(Dead)：这个就是线程的停止运行了。</p><p>所谓的线程的生命周期，说白了就是这五个过程的相互转换而已，不过有些过程是双向的，有些则是单向的。我找了一张图，便于大家的理解：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d0aaaeef0cd473d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面简单说一下这个图的意思：</p><p>当你创建线程对象以后，该线程就变成了新建(New)状态，如果该线程调用start()方法，那么就变成了可运行(Runnable)状态；如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于可运行(Runnable)状态，如果此时该线程获取到了cpu的使用权，那么该线程就开心的进入到了正在运行(Running)状态；如果该线程调用了yield()方法，或者是时间片用完了，又回到了可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于正在运行(Running)状态，如果此时调用join()，wait()，sleep()或者I/O操作时，均会使该线程进入阻塞(Blocked)状态；如果此时该线程正常执行完毕或者异常终止，又或者调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于阻塞(Blocked)状态，如果此时等待执行join()方法的线程执行完毕；或者调用notify()或notifyall()方法；sleep()超时；I/O请求完成时，线程就会进入可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>需要说明的是，stop方法已经过时了，并不提倡大家去用。</p><p>下面简单介绍几个方法的使用。</p><h3 id="sleep方法的使用"><a href="#sleep方法的使用" class="headerlink" title="sleep方法的使用"></a>sleep方法的使用</h3><p>这个sleep方法是Thread类的一个方法，同时也是一个静态方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void sleep(long millis)</span><br></pre></td></tr></table></figure></p><p>sleep方法的作用是在指定的毫秒数内让正在执行的线程休眠(暂停执行)；其中的参数为休眠时间，单位是毫秒。</p><p>也就是说等休眠时间过了以后，程序才会继续执行。当你需要页面刷新或者计时的时候，这时候sleep就派上用场了。</p><h3 id="join方法的使用"><a href="#join方法的使用" class="headerlink" title="join方法的使用"></a>join方法的使用</h3><p>同样这个join方法也是Thread类的一个方法，但它是一个实例方法，因为有final的修饰，因此这个方法是不能被重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join()</span><br></pre></td></tr></table></figure></p><p>join方法的作用是等待调用该方法的线程结束后才能执行，是用来抢占资源优先执行的。也就是说如果某个线程调用了这个join方法，那么后面的线程都必须等这个线程运行完成后才能运行。</p><p>同时join方法还有一个带参数的同名方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join(long millis)</span><br></pre></td></tr></table></figure></p><p>带参数的join()方法的作用是等待该线程终止的最长时间为millis，这个参数的单位是毫秒。</p><p>也就是说没有参数的join方法是谁调用了它，它就开始执行，而后面的程序就必须等它执行完毕以后才能继续进行；有参数的join方法就是谁调用了它，在规定的毫秒以内无论你有没有执行完毕，只要时间一过，后面的程序就会开始执行。说白了，这是固定时间等待和永久时间等待而已。</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>现在你有一个想法，就是是否可以通过设置让某个线程优先执行呢?使用前面的join()方法尽管能完成部分要求，但还是想追求更加简单的方法。</p><p>这时候Java为线程类提供了10个优先级，优先级用整数1-10表示，超过该数字范围会抛出异常。</p><p>我们的主线程默认优先级为5，数字越大表示的优先级越高，当然你还可以使用优先级常量来进行优先级的表示：</p><ul><li>MAX_PRIORITY :线程的最高优先级10</li><li>MIN_PRIORITY :线程的最低优先级1</li><li>NORM_PRIORITY :线程的默认优先级5</li></ul><p>我们可以使用下面提供的方法来对优先级进行操作：</p><table><thead><tr><th>方法</th><th style="text-align:center">说明</th><th>备注</th></tr></thead><tbody><tr><td>public int getPriority()</td><td style="text-align:center">获取线程优先级的方法</td></tr><tr><td>public void setPriority(int newPriority)</td><td style="text-align:center">设置线程优先级的方法 </td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class MyThreadTestTwo extends Thread&#123;</span><br><span class="line">private String name;</span><br><span class="line">public MyThreadTestTwo(String name) &#123;</span><br><span class="line">this.name =name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(&quot;线程&quot;+name+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ThreadTestFive &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 获取主线程的优先级</span><br><span class="line">int mainPriority =Thread.currentThread().getPriority();</span><br><span class="line">System.out.println(&quot;主线程的优先级为：&quot;+mainPriority);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyThreadTestTwo tt1 =new MyThreadTestTwo(&quot;线程1&quot;);</span><br><span class="line">MyThreadTestTwo tt2 =new MyThreadTestTwo(&quot;线程2&quot;);</span><br><span class="line">tt1.setPriority(10);  //这与下面的代码的作用是一样的</span><br><span class="line">//tt1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">tt2.setPriority(1);</span><br><span class="line">//tt2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">tt1.start();</span><br><span class="line">tt2.start();</span><br><span class="line">//System.out.println(&quot;主线程1的优先级为：&quot;+tt1.getPriority());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你多运行上面的代码，你会发现并不是优先级大的线程先启动和执行。线程的执行和启动顺序，除了和优先级大小有关，还与操作系统调度，当前资源等有很大关系，是具有很强的随机性。</p><p><strong>总结一下：</strong></p><ul><li>各个线程是通过竞争CPU时间而获得运行机会的；</li><li>各线程什么时候得到CPU时间，占用多久，都是不可预测的；</li><li>一个正在运行的线程在什么地方被暂停是不确定的。</li></ul><p>也就是说到目前为止，我们还没有更好地办法来进行线程执行顺序的调度。</p><h3 id="银行存取钱业务"><a href="#银行存取钱业务" class="headerlink" title="银行存取钱业务"></a>银行存取钱业务</h3><p>如果按照我们前面所说的线程执行顺序是随机的，而且运行的线程在什么地方被暂停是不确定的话（的确，这是真的情况），那么银行就会出现一个非常有意思的现象：你存钱和取钱的总金额会发生丢失的情况：假设你开始银行账户有2000块钱，你取了100，存进去200，余额是不是2100块，但是有可能你的余额是2000块，你的余额更新失败了。这是我们不想看到的情况，但实际上这种情况是存在的，但是银行通过一些方法，杜绝了这种事情的发送，现在我们就来看看这些方法。</p><p>为了保证在存款或取款的时候，不允许其他线程对帐户余额进行操作，银行会将操作对象进行锁定，也就是同一时刻只允许一个线程进行运行。</p><p>也其实就是使用了synchronized关键字，也就是线程同步。synchronized关键字可以用在：成员方法，静态方法和语句块里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void Test()&#123;&#125;</span><br><span class="line">public static synchronized void Test()&#123;&#125;</span><br><span class="line">synchronized(obj)&#123;......&#125;</span><br></pre></td></tr></table></figure><p>使用关键字synchronized可以确保共享对象在同一时刻只能被一个线程访问，这种机制称为线程同步或者线程互斥。</p><h2 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h2><p>线程间通信的常用方法：</p><ul><li>wait方法：中断方法的执行，使线程等待。</li><li>notify()方法: 唤醒处于等待的某一个线程,使其结束等待</li><li>notifyAll()方法: 唤醒所有处于等待的线程,使它们结束等待</li></ul><p>建议使用notifyAll()，因为假如唤醒的单个线程还是我们刚休眠的生产线程，那么就会继续死锁，所以建议直接所有的等待线程。</p><p><a href="https://www.cnblogs.com/IUbanana/p/7067362.html" target="_blank" rel="noopener">详细介绍Java虚拟机（JVM）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。&lt;/p&gt;
&lt;p&gt;那么我们如何让它
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（五）：异常和字符串</title>
    <link href="http://licheetools.github.io/2018/08/03/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://licheetools.github.io/2018/08/03/关于JAVA你必须知道的那些事（五）：异常和字符串/</id>
    <published>2018-08-03T13:28:49.000Z</published>
    <updated>2019-04-13T13:29:21.697Z</updated>
    
    <content type="html"><![CDATA[<p>异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常:我们也称之为意外或者例外，它本质上就是程序上的错误。那么什么是错误呢？</p><p>错误如果用定义来说，我可能说不清楚。但是在我们编写程序的过程中，错误是会经常发生的，通常会发生在编译期间和运行期间。（这也就是编译型语言和解释型语言的一个非常大的不同，编译型语言会多一个编译过程，所以出错误的概率就相对低很多）</p><p>常见的编译错误包括：括号没有正常的配对; 语句结束后少写了分号;关键字拼写错误，通常这种错误编译器会帮助我们进行检查，但是运行期间的错误，编译器就无能为力了，只能靠程序员自己了。</p><p>常见的运行时错误有：使用空的对象引用调用方法；数组访问时下标越界；算术运算时除数为0；类型转换时无法正常转换等。这些错误在编译时是没有错误提示的，只能靠自己把握了。</p><p>在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。</p><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p>异常可以理解为一种事件，它的发生会影响正常的程序运行流程。在Java中你可以通过Throwable来进行各种异常信息的描述。</p><p>Throwable是根类，它具有2个子类：Error和Exception。</p><p>Error：程序无法处理的错误，表示运行应用程序中较严重问题。通常是Java虚拟机问题(比如虚拟机错误：VirtualMachineError；内存溢出：OutOfMemoryError；线程死锁 ：ThreadDeath等)；它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p><p>对于设计合理的应用程序来说,即使确实发生了错误,本质上也不应该试图去处理它所引起的异常状况。</p><p>Exception是程序本身可以处理的异常，我们通常所说的异常处理就是处理这种类型的异常。</p><p>Exception又可以分为两大类:：非检查异常(Unchecked Exception)和检查异常(Checked Exception)</p><p>非检查异常：它是编译器不要求强制处置的异常，通常包括：RuntimeException（运行时异常）以及它的子类:：NullPointerException（空指针异常）；ArrayIndexOutOfBoundsException（数组下标越界异常 ）；ArithmeticException（算数异常）和ClassCastException（类型转换异常）等。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bd8351144bfe45ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>java程序在编译阶段是不会去检查上面这些RuntimeException（运行时异常）异常的。</p><p>而检查异常则是编译器要求必须处置的异常，比如: IO异常 IOException; SQL异常 SQLException等。</p><h3 id="异常处理分类"><a href="#异常处理分类" class="headerlink" title="异常处理分类"></a>异常处理分类</h3><p>在Java应用程序中,异常处理机制为: 抛出异常和捕捉异常。异常必须要先被抛出，然后才能被捕获。</p><p>所谓抛出异常，它是指当一个方法当中出现异常，方法会去创建异常对象，并去交付给运行时系统来进行处理。</p><p>异常对象则是异常类型以及异常出现时的程序状态。</p><p>当程序运行时系统捕捉到这个异常，此时会去寻找合适的处理器，如果找到了，就会执行处理器的相关逻辑；如果始终没找到，程序就会终止运行。</p><p>对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同。</p><p>在Java中规定: 对于可查异常（检查异常(Checked Exception)）必须捕捉或者声明抛出；同时允许忽略不可查的RuntimeException(含子类)和Error(含子类)。</p><p>那么在java中，如何抛出异常和捕获异常呢？可以通过5个关键字来实现:：try catch finally throw throws。</p><p>try：将执行可能会产生异常的代码放在try里面；</p><p>catch：用来捕获异常；</p><p>finally：无论是否发生异常，finally里面的代码总能执行</p><p>try…catch…finally是一组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">          //代码段1</span><br><span class="line">          //产生异常的代码段2</span><br><span class="line">        &#125;catch (异常类型 ex) &#123;</span><br><span class="line">          //对异常进行处理的代码段3</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">          //代码段4</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>try代码块后可接零个或多个catch代码块，但是如果没有catch块，那么必须跟一个finally块。说白了就是try要和catch或finally组合使用，不能单独使用。你知道的，如果没产生异常的代码，你捕获什么？</p><p>如果有多个catch，记住要使用Exception放在最后一个，因为这个里面包含所有的你目前还未发现的异常。多个catch异常捕获的范围要满足自上而下，逐次增大的原则，否则小范围的异常会被大范围的覆盖哦。</p><p>一般情况下，finally里面的代码都会运行，但有时候你想提前停止代码运行，可以使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.exit(1);</span><br></pre></td></tr></table></figure></p><p>里面的状态码0代表正常退出,非0代表非正常退出（这里用了1代表，终止当前虚拟机的运行，使得程序无条件停止运行）。</p><p>也就是说，如果程序按照正常逻辑执行需要退出时，可以调用System.exit(0)。如果发生异常而退出，比如在catch块使用，那么会调用System.exit(1)。</p><h3 id="return关键字在异常处理中的作用"><a href="#return关键字在异常处理中的作用" class="headerlink" title="return关键字在异常处理中的作用"></a>return关键字在异常处理中的作用</h3><p>我们只需要记住一点：不管前面有多少个return，只要finally中有return，那么最终返回的就是finally中return的返回值。（前面的return则是按照异常捕获的顺序来返回）</p><h3 id="使用throws声明异常类型"><a href="#使用throws声明异常类型" class="headerlink" title="使用throws声明异常类型"></a>使用throws声明异常类型</h3><p><strong>throws：自动抛出异常类型，一次抛出很多个（多个之间用逗号隔开），在方法定义的时候被使用</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws Exception1,Exception2,...,ExceptionN &#123;</span><br><span class="line">    //可能产生异常的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说，如果一个方法可能会出现异常，但没有能力处理这种异常，那么我们就可以在方法声明的时候使用throws来声明抛出异常。</p><p>举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static int test() throws ArithmeticException &#123;  //声明可能会引发的异常，这里只声明异常，不去处理，谁调用谁处理</span><br><span class="line">System.out.println(&quot;====运算开始====&quot;);</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">System.out.print(&quot;请输入第一个数字: &quot;);</span><br><span class="line">int one = scanner.nextInt();</span><br><span class="line">System.out.print(&quot;请输入第二个数字: &quot;);</span><br><span class="line">int two = scanner.nextInt();</span><br><span class="line">System.out.println(&quot;====运算结束====&quot;);</span><br><span class="line">return one / two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们调用的时候来进行异常处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">int result = test();</span><br><span class="line">System.out.println(&quot;one和two的商是：&quot; + result);</span><br><span class="line">&#125; catch (ArithmeticException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(&quot;除数不能为0&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意你可以在throws声明异常的时候，尽量多考虑一些情况，然后可以在调用的时候利用surround with来进行异常的快速生成处理，这里快速生成的异常类型和你在throws抛出的类型一致。</p><p>当然，你完全可以直接抛出Exception，那样调用的时候处理就只需要直接处理Exception这个了。</p><p>还需要注意的一点就是，当throws后面直接跟Exception的时候，编译器会提示你当前方法可能会产生异常，因为Exception这个父类包含了出现检查异常的情况。但是如果你不是Exception，而是前面所列举的非检查异常，那么编译器就不会给你报错的。</p><p>说明白编译器只会对检查异常进行报错处理，但是对于非检查异常是不进行报错处理的。如果非要有一种对于非检查异常类似的报错处理，你可以使用文档注释来达到这个目的，但是报错处理不是编译器完成的，而是程序员自己发现的。</p><h3 id="使用throw手动抛出异常"><a href="#使用throw手动抛出异常" class="headerlink" title="使用throw手动抛出异常"></a>使用throw手动抛出异常</h3><p><strong>throw：手动抛出异常，一次只能抛出一个异常，在方法体内被使用</strong>：<br>throw用来抛出一个异常，如: throw new IOException()；而且throw抛出的只能是可Throwable类或者其子类的实例对象，不能是自己定义的，如: throw new String(“出错啦”)，这种明显就是错误的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void method()&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    //代码段1</span><br><span class="line">  throw new 异常类型();</span><br><span class="line">  &#125; catch(异常类型 e)&#123;</span><br><span class="line">    //对异常进行处理的代码段2</span><br><span class="line">  &#125;</span><br><span class="line">finally&#123;</span><br><span class="line">// 需要执行的代码段3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你还可以，在抛出异常的地方通过throws关键字来标明异常的类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws 异常类型&#123;</span><br><span class="line">  //代码段1</span><br><span class="line">    throw new 异常类型();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：<br>1、通过try..catch包含throw语句，自己抛出异常，自己处理异常；<br>2.、通过throws在方法声明出抛出异常类型，谁调用谁处理，调用者可以自己处理，也可以继续上抛，此时可以抛出与throw对象相同的类型或者其父类（但是不能是其子类）。</p><p>你可以通过throws声明将要抛出何种类型的异常，并通过throw将产生的异常进行抛出。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>尽管我们使用Java内置的异常类可以描述在编程时出现的大部分异常情况，但是还是有一些情况我们难以处理，这时候我们可以自定义异常，用来描述特定情况下产生的异常类型。</p><p>所谓自定义异常，说白了就是定义一个类，去继承Throwable类或者它的子类。然后其他的就和我们前面说过的一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class CarTest extends Exception &#123;</span><br><span class="line">public CarTest() &#123;</span><br><span class="line">super(&quot;18岁以下，70岁以上的人不允许报考驾照&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testAge() throws CarTest&#123;</span><br><span class="line">System.out.println(&quot;请输入你的年龄：&quot;);</span><br><span class="line">Scanner input = new Scanner(System.in);</span><br><span class="line">int age = input.nextInt();</span><br><span class="line">if (age &lt; 18 || age &gt; 70) &#123;</span><br><span class="line">throw new CarTest();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;欢迎报考驾校&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testAge();</span><br><span class="line">&#125; catch (CarTeste) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">System.out.println(&quot;驾校前台人员不得办理相关业务&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>这个顾名思义就是一系列的异常，前面捕获到了异常自己不处理而是向后面抛出，从而形成异常链。</p><p>为了更好的说明，我找了一个例子，大家可以看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class TryDemoFive &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testone() throws HotelAgeTest &#123;</span><br><span class="line">throw new HotelAgeTest();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testthree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，testone手动抛出了一个异常，但是没有处理，而是向后抛出，testtwo虽然进行了处理，但是又抛出了一个新的异常，testthree也是这样，之后最后的main方法里对testthree的异常进行了处理，并且进行了输出。</p><p>所以这段代码的运行结果就是下面的结果，只打印输出了testthree的信息，其他却没有，实际上这就造成了前面异常信息的丢失：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 我是新产生的异常2</span><br><span class="line">at JavaExceptionTest.TryDemoFive.testthree(TryDemoFive.java:23)</span><br><span class="line">at JavaExceptionTest.TryDemoFive.main(TryDemoFive.java:29)</span><br></pre></td></tr></table></figure></p><p>那么如何解决这种异常的丢失呢？从而让异常链的情况为我们所知呢，你可以在构造方法中添加上一层异常e或者使用initCause(e)就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;,e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">//throw new Exception(&quot;我是新产生的异常2&quot;,e);</span><br><span class="line">Exception e1 =new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">e1.initCause(e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>也就是说，异常链将异常发生的原因一个传一个串起来，把底层的异常信息传给上层，这样逐层抛出。</p><h2 id="异常总结"><a href="#异常总结" class="headerlink" title="异常总结"></a>异常总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7ec06da956208712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在Java中, 通过Throwable及其子类描述各种不同的异常类型。其中这个Error是我们无法预测的，但是Exception却是我们可以避免的。Exception又分为2类，一个是运行时异常（非检查异常），这种编译器是不会给你报错的，另一种异常是则是编译器强制你去处理的异常。</p><p>几点建议：<br>1、处理运行时异常时,采用逻辑去合理规避同时辅助try-catch处理；<br>2、在多重catch块后面,可以加一个catch(Exception)来处理可能会被遗漏的异常；<br>3、对于不确定的代码,也可以加上try-catch ,处理潜在的异常；<br>4、尽量去处理异常,切忌只是简单的调用printStackTrace()去打印输出；<br>5、具体如何处理异常,要根据不同的业务需求和异常类型去决定；<br>6、尽量添加finally语句块去释放占用的资源，如关闭文件和数据库连接等。</p><p><strong>最后一点：当子类重写父类抛出异常的方法时,声明的异常必须是父类方法所声明异常的同类或子类。</strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>创建字符串的3种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 =&quot;hello world&quot;;</span><br><span class="line">String str2 =new String();</span><br><span class="line">String str3 =new String(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure></p><p>字符串的常用方法及说明：<br>返回类型| 方法| 说明</p><ul><li>| :-: | -:<br>int |  length() |     返回当前字符串的长度<br>int  | indexOf(int ch)     | 查找ch字符在该字符串中第一次出现的位置<br>int |  indexOf(String str)     | 查找str子字符串在该字符串中第一次出现的位置<br>int |  lastIndexOf(int ch)     | 查找ch字符在该字符串中最后一次出现的位置<br>int  | lastIndexOf(String str) |     查找str子字符串在该字符串中最后一次出现的位置<br>String  | substring(int beginIndex) | 获取从beginIndex位置开始到结束的子字符串<br>String  | substring(int beginIndex, int endIndex)     | 获取从beginIndex位置开始到endIndex位置的子字符串<br>String  | trim()     | 返回去除了前后空格的字符串<br>boolean  | equals(Object obj)     | 将该字符串与指定对象比较，返回true或false<br>String  | toLowerCase() |     将字符串转换为小写<br>String  | toUpperCase()     | 将字符串转换为大写<br>char |  charAt(int index) |     获取字符串中指定位置的字符<br>String [] |  split(String regex, int limit)     | 将字符串分割为子字符串，返回字符串数组<br>byte []  | getBytes()     | 将该字符串转换为byte数组</li></ul><h3 id="运算符与equals方法的区别"><a href="#运算符与equals方法的区别" class="headerlink" title="==运算符与equals方法的区别"></a>==运算符与equals方法的区别</h3><p>我们在前面也说过，==运算符比较的是对象在内存中的引用地址，而equals方法的用法就需要分情况了，如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因为这里谈的是字符串，因此可以说equals比较的是字符串的值是否相等。</p><p>内存空间：栈存放的是类的引用，常量池存放的是字符串常量，而堆里存放的则是通过new创建的字符串对象（在这里是这样的，我们这里只谈字符串）</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>String和StringBuilder的区别:：String是不可变的，而StringBuilder则是可变的，因此当频繁操作字符串时，建议使用StringBuilder。</p><p>有人就要问了，不是还有一个StringBuffer么，那这个跟前面的有啥区别么？其实StringBuilder和StringBuffer二者基本上是一样的，但是StringBuffer是线程安全的,，而StringBuilder则不是，因此也正是因为这样，所以StringBuilder性能略高一点。因为字符串处理一般都是单线程，所以我们使用StringBulider就行了。</p><p>StringBuilder常用方法<br>append()：在末尾增加内容；<br>delete()：删除内容；<br>insert()：插入内容；<br>length()：返回字符串长度；<br>replace()：替换内容。<br>这些方法和Python中的容器操作是很相似的，这里就不再举例说明了。</p><p>后面的内容等我有空再更新了，这次就说到这里，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。&lt;/p&gt;
&lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（四）：单例模式和多态</title>
    <link href="http://licheetools.github.io/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>http://licheetools.github.io/2018/08/02/关于JAVA你必须知道的那些事（四）：单例模式和多态/</id>
    <published>2018-08-02T13:27:57.000Z</published>
    <updated>2019-04-13T13:28:29.457Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>官方的解释是，设计模式是：一套被反复使用，多数人知晓的，经过分类编目，代码设计经验的总结。说人话就是：软件开发人员在软件开发过程中面临的一般问题的解决方案。</p><p>常见的设计模式可以参看这张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2a714e288d048e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们可以对其按照作用来进行分类:：<br>关注对象创建过程的：<strong>创建型模式</strong>；<br>类和对象组合：<strong>结构型模式</strong>；<br>对象之间的通信过程：<strong>行为型模式</strong>；</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8f3d74b6c145ed8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式: 一个类<strong>有且仅有</strong>一个实例,并且自行实例化向整个系统提供，它的目的就是使得类的一个对象成为该类系统中的唯一实例。</p><p>要点：</p><ol><li>某个类只能有一个实例;；</li><li>必须自行创建实例；<ol start="3"><li>必须自行向整个系统提供这个实例；</li></ol></li></ol><p>实现：<br>1、只提供<strong>私有</strong>的构造方法；<br>2、只含有一个该类的<strong>静态私有</strong>对象；<br>3、提供一个<strong>静态</strong>的<strong>公有方法</strong>用于创建、获取静态私有对象。</p><p>对于1的理解：private是访问限制能力最强的修饰符，只能在当前类内被使用。也就是说经过private修饰，该类的对象在类外无法通过new关键字直接实例化，这样可以做到限制类实例化产生；</p><p>对于2的理解：1可以实现有且仅有一个实例，static修饰的静态成员可以满足该类有且仅有一个，所有的对象都共享这一个静态成员；</p><p>对于3的理解：类似于封装，必须向外部系统提供唯一的公有访问方法。</p><p>在java中实现单例模式有2种方式：饿汉式和懒汉式。</p><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）如此看来确实挺饿的；</p><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）如此看来确实挺懒的。</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">// 饿汉式：创建对象实例的时候直接初始化；（空间换时间）</span><br><span class="line"></span><br><span class="line">public class SingletonOne &#123;</span><br><span class="line"></span><br><span class="line">//1、创建类中私有的构造方法</span><br><span class="line">private SingletonOne() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//2、创建该类型的私有静态实例</span><br><span class="line">private static SingletonOne instance = new SingletonOne();</span><br><span class="line"></span><br><span class="line">//3、创建公有的静态方法，返回静态实例对象</span><br><span class="line">public static SingletonOne getinstance() &#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleOneTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonOne one =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonOne two =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one==two);   //输出结果为true</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">//懒汉式：创建对象实例的时候并不初始化；（时间换空间）</span><br><span class="line"></span><br><span class="line">public class SingletonTwo &#123;</span><br><span class="line">// 1、创建类中私有的构造方法</span><br><span class="line">private SingletonTwo() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 2、创建静态的该类实例对象</span><br><span class="line">private static SingletonTwo instance = null;</span><br><span class="line"></span><br><span class="line">// 3、创建公有的静态方法，提供实例对象</span><br><span class="line">public static SingletonTwo getinstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">instance = new SingletonTwo();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的测试代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleTwoTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonTwo one = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonTwo two = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one == two);   //输出结果为true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="单例模式两种实现总结"><a href="#单例模式两种实现总结" class="headerlink" title="单例模式两种实现总结"></a>单例模式两种实现总结</h3><p>饿汉式在类加载时就创建实例，第一次加载速度快；<br>懒汉式在第一次使用时才进行实例化，第一次加载速度慢；</p><p>饿汉式：空间换时间<br>懒汉式：时间换空间</p><p>饿汉式，类在加载时进行了对象的实例化创建，即使多个进程进行并发操作，访问的实例也是唯一的，饿汉式线程安全。</p><p>懒汉式，第一次使用才会实例化，多个线程并发操作时，由于时间片的切换，可能导致线程风险。</p><p>但是懒汉式的线程危险是可以规避的，通过关键字Synchronized实现线程的锁定，也可以通过静态内部类和枚举保证操作时的线程唯一。</p><h3 id="单例模式优缺点及使用场景"><a href="#单例模式优缺点及使用场景" class="headerlink" title="单例模式优缺点及使用场景"></a>单例模式优缺点及使用场景</h3><p>单例模式的优点：<br>1、在内存中只有一个对象,节省内存空间；<br>2、避免频繁的创建销毁对象, 提高性能；<br>3、避免对共享资源的多重占用。</p><p>单例模式的缺点:<br>1、扩展比较困难；<br>2、如果实例化后的对象长期不利用,系统将默认为垃圾进行回收,造成对象状态丢失。</p><p>使用场景:<br>1、创建对象时占用资源过多,但同时又需要用到该类对象；<br>2、对系统内资源要求统一读写,如读写配置信息；<br>3、当多个实例存在可能引起程序逻辑错误,如号码生成器；</p><p>每一种设计模式都是针对场景，针对某种具体问题的，具体场景应当进行具体分析，选用合适的设计模式。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>终于开始进入多态的世界了，在这里你将全面了解多态的特点及使用。</p><p>多态你可以理解为不同类的对象对同一消息做出不同的响应。</p><p>一般而言，多态分为编译时多态和运行时多态这两种。</p><p>编译时多态：也称设计时多态，它是通过方法重载来实现的，编译器在编译状态可以进行不同行为的区分。</p><p>而运行时多态，则必须要求程序运行时，动态决定调用哪个方法。</p><p>我们通常在Java中的多态指的就是运行时多态。</p><p>实现多态的必要条件: 满足继承；父类引用指向子类对象</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>所谓的向上转型也指隐式转型（自动转型）。说通俗一点就是父类引用指向子类实例，它可以调用子类重写父类的方法以及父类派生的方法，但是无法调用子类特有方法。</p><p>举个例子，假如Dog这个类继承了我们Animal这个类，我们不仅可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog dog =new Dog();</span><br><span class="line">Animal animal =new Animal();</span><br></pre></td></tr></table></figure></p><p>你还可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal dog2 =new Dog();</span><br></pre></td></tr></table></figure></p><p>这就是将一个子类对象转型为一个父类对象，这个很好理解，对吧。</p><p>接下来我们来说一下，向下转型，顾名思义就是和向上转型相反的操作了，是的，你很聪明。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>向下转型也称强制类型转换。它是子类引用指向父类实例，我们在之前就用过了，还记得我们在重写Object类的equals方法时，就将父类Object强制转换，然后才调用子类特有的方法。</p><p>向下转型并不是可以随便转换的，需要满足一定的转换条件。我们可以通过instanceof这个运算符来判断是否能进行强制类型转换。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ca1a5995341c12b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>通过上面的图片，我们可以很清楚的知道instanceof的作用就是判断左边对象是否是右边这个类的实例，如果是就返true，否则就返回false。</p><p>因此，我们在进行向下转型的时候，可以用instanceof来判断一个对象是否满足某个类的实例特征。满足，我们才进行类型转换，否则强制转换会报错。</p><p>总结一下：<br>向上转型: 父类引用指向子类对象。即小变大。</p><p>向下转型: 子类引用指向父类对象。即大变小。</p><p>需要注意的是：父类中static修饰的方法允许被子类使用，但是不允许被子类重写，所以向上转型之后，只能调用到父类原有的静态方法。如果此时要用子类中的，只能通过向下转型来实现。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法，这样我们的抽象类就派上用场了。</p><p>抽象类可以避免子类设计的随意性，还可以避免父类无意义的实例化。</p><p>你只需知道，修饰抽象类要用abstract这个关键词，抽象类不可以直接被实例化。</p><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>我们前面说过，父类只是规定子类拥有该项能力，但在父类中具体实现它是没有任何意义的，因此该方法应设置为抽象方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void test();</span><br></pre></td></tr></table></figure></p><p>你记住，抽象方法是不允许有方法体的，也就是不能有花括号。而且此时子类<strong>必须</strong>实现父类的抽象方法，如果你不实现，那么这个类就必须被设置为抽象类（不设置就会报错），然后由继承它的类去具体实现相应的方法。简单来说就是一句话：抽象方法中不允许包含方法体，子类需要重写父类的抽象方法。</p><p>一般抽象类适用于这种情况：1、父类中的实现没有意义；2、提醒子类必须要去自己实现自己的这个方法。</p><p>通常子类变多了之后，你新建一个类只要继承了抽象的父类，IDE会自动提醒你实现父类中的抽象方法的，你不实现就会报错。</p><h3 id="抽象类和抽象方法的使用"><a href="#抽象类和抽象方法的使用" class="headerlink" title="抽象类和抽象方法的使用"></a>抽象类和抽象方法的使用</h3><p>你可以使用abstract关键词来定义抽象类，抽象类不能被直接实例化，你可以通过向上转型完成对象实例，只能被继承。</p><p>abstract关键词定义抽象方法 ，你不需要具体实现也不能具体实现，也就是花括号不能有。</p><p>需要注意的是：抽象类可以没有抽象方法，但包含抽象方法的类一定是抽象类。</p><p>我们前面说过，当一个类继承抽象类，必须实现类中的抽象方法。如果不重写，则必须将该子类也变为抽象类，由其子类来实现，否则会报错。</p><p><strong>注意：static final private 不可以和abstract同时出现</strong>（因为抽象方法是要在子类中进行重写的，而private只能在当前类被访问，final方法不允许被子类重写，static静态不允许被子类重写。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。&lt;/p&gt;
&lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;p&gt;官方的解释
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（三）：继承和访问修饰符</title>
    <link href="http://licheetools.github.io/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://licheetools.github.io/2018/08/02/关于JAVA你必须知道的那些事（三）：继承和访问修饰符/</id>
    <published>2018-08-02T13:26:44.000Z</published>
    <updated>2019-04-13T13:27:32.480Z</updated>
    
    <content type="html"><![CDATA[<p>今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：它是一种类与类之间的关系，通过使用已存在的类作为基础来建立新类。其中已存在的类称为父类(或基类); 建立的新类称为子类(或派生类)。简单的就是子类继承父类的非私有属性和方法。</p><p>需要注意的是，新定义的类可以选择继续使用父类的功能或者自己增加新的数据或新的功能，但<strong>不能选择性地继承父类</strong>。（要么继承所有（前提是非私有），要么就不继承）</p><p>只要能满足 “A is a B”的关系就可以形成继承关系，代码中是通过 extends 关键字来实现继承的。</p><p>特别注意：在java中只能继承一个父类(也就是单继承)，而且子类可以访问父类的非私有成员。这个和Python不一样，Python的继承可就灵活了。</p><p>我们知道子类继承了父类之后，可以访问父类的非私有成员；但是父类的私有成员，子类还是无法直接访问。如果我们想访问呢？可以通过父类暴露的公有方法来实现间接访问。</p><p>父类对象不可以访问到子类特有的方法或属性，同时父类不可以访问子类特有成员（那怕是公有的成员）</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>方法重载必须同时满足以下条件: </p><ol><li>同一个类中;；</li><li>方法名相同，参数列表不同(参数顺序、个数、类型)；</li><li>方法返回值、访问修饰符任意；</li><li>与方法的参数名无关。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void printinfo() &#123;</span><br><span class="line">System.out.println(&quot;方法重载1&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void printinfo(String name) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;方法重载2&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String name, int age) &#123;</span><br><span class="line">return &quot;方法重载3&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String age, String name) &#123;</span><br><span class="line">return &quot;方法重载4&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(int age, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> // 与方法的参数名无关,加上下面的代码会和上面的 printinfo(int age, String name)造成重复而报错：</span><br><span class="line">public String printinfo(int size, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>方法重写也必须同时满足以下条件:<br>1、在满足继承关系的子类中；<br>2、方法名相同，参数列表相同(参数顺序、个数、类型)；<br>3、方法返回值相同或者是子类类型（但不允许是Object类型，可以向下兼容，向上是不可以的）；<br>4、访问修饰符的限定范围大于等于父类方法。</p><p>注意：在子类中是可以定义与父类重名的属性的，但这并不说明属性是可以重写的。</p><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>在Java里面一共包含4种访问修饰符，分别是：<br>1、private：私有的；<br>2、默认；<br>3、protected：受保护的；<br>4、public：公共的。</p><p>其中，<strong>private</strong>:只允许在本类范围中进行访问，离开了当前类就不允许访问；</p><p><strong>默认</strong>: 允许在当前类，同包子类/非子类都可调用，跨包子类/非子类都不允许；</p><p><strong>protected</strong>:允许在当前类，同包中的子类/非子类都可以以及跨包子类调用。跨包的非子类不允许调用。</p><p><strong>public</strong>:允许在任意位置访问。</p><p>按照前面的顺序，自上而下，访问范围越来越大；自下而上，限制能力越来越强：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4bd5c8b69ee574fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>（同包包括同包子类与非子类；子类包括同包子类和跨包子类）</p><h2 id="访问修饰符对方法重写的影响"><a href="#访问修饰符对方法重写的影响" class="headerlink" title="访问修饰符对方法重写的影响"></a>访问修饰符对方法重写的影响</h2><p>子类重写父类方法时，访问修饰符是允许改变的，要求是: 子类的访问范围必须大于等于父类的访问范围。也就是说如果父类访问修饰符是public，那么子类的访问修饰符也必须是public，其他的类似。</p><h2 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h2><p>继承后的初始化顺序如下：</p><p>父类静态成员 -&gt; 子类静态成员 -&gt; 父类对象的构造 -&gt; 子类对象的构造</p><p><strong>一个问题:</strong> 访问修饰符影响成员加载顺序?静态成员优先于静态代码块执行?</p><p>访问修饰符不影响成员加载顺序,跟书写位置有关。如果把静态代码块写在静态变量的前面，那么先执行静态代码块。</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>如果子类继承并重写了父类的方法，那么我们通常调用的就是重写后的子类方法。如果需要调用父类的方法，我们可以使用<code>super.方法</code>来达到这个目的。</p><p>当然也可以使用<code>super.属性</code>来达到访问父类的非私有属性的目的。</p><p><strong>尽管父类的构造方法的访问修饰符是public，但是它却不可以被子类继承和重写的。</strong></p><p>虽然它两个不可以，但是它的存在却是非常必要的，因为子类对象的实例化要依赖于父类对象的构造方法(默认，无参或有参的构造方法)。</p><p>如果子类调用了自己有参的构造方法，而父类定义了有参和无参的构造方法，程序依然是调用父类无参的构造方法。也就是说，我们在子类的构造方法中没有显式标注的情况下，默认调用父类的无参构造方法，因此父类的无参构造方法很重要，一定要写，否则会影响子类的对象实例化。</p><p>如果子类构造方法中既没有显式标注,且父类中没有无参的构造方法,则引发编译错误。</p><p>我们可以使用<code>super(参数)</code>这种形式来调用父类允许被访问的其他构造方法，但是此时super()必须放在子类构造方法有效代码的第一行（必须是子类的构造方法（其他方法不行）的第一行（其他行不行））。</p><p>也就是说父类在实例化的时候会默认调用无参的构造方法（此时你不定义无参的构造方法是可以的），但是如果子类在实例化对象的时候没有显示标志（也就是会默认调用父类无参的构造方法），而此时父类其实是不存在无参的构造方法，所以会引发编译错误。</p><h2 id="this和super的对比"><a href="#this和super的对比" class="headerlink" title="this和super的对比"></a>this和super的对比</h2><p><strong>this:</strong>当前类对象的引用：<br>1、访问当前类的成员方法；<br>2、访问当前类的成员属性；<br>3、访问当前类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>super:</strong>父类对象的引用：<br>1、访问父类的成员方法；<br>2、访问父类的成员属性；<br>3、访问父类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>注意：在调用构造方法时，this和super不能同时存在（前面说过两者都要求在第一行）。</strong></p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是所有类的父类，这个其实和Python中差不多，在Python里面也是所有的类都继承于object这个基类。点这直接查看api：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8api</a></p><p>一个类没有使用extends关键字明确标识继承关系,则默认继承Object类(包括数组)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class Object is the root of the class hierarchy.</span><br><span class="line">Every class has Object as a superclass. </span><br><span class="line">All objects, including arrays, implement the methods of this class.</span><br></pre></td></tr></table></figure></p><p>Object类存放于java.lang包中，这个包系统默认会为我们直接加载。</p><h3 id="equals用法"><a href="#equals用法" class="headerlink" title="equals用法"></a>equals用法</h3><p>如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因此我们不能这样说equals比较的两个对象的值，或者引用地址，但是我们却可以说”==”比较的却一定是两个对象的引用地址。</p><h3 id="toString用法"><a href="#toString用法" class="headerlink" title="toString用法"></a>toString用法</h3><p>api告诉我们，toString最后返回的是下面这种形式：（包名.类名@内存中的哈希码）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure></p><p>同样的，子类如果没有重写Object类的toString方法，那么则会打印输出其在内存中的哈希码；而String类则重写了Object类的toString方法，所以打印输出其真实值。（言外之意，子类可以通过重写toString方法的形式，改变输出的内容）</p><p>还要说明的一点就是输出<code>对象</code>和<code>对象.toString</code>的效果是一样的，因为直接输出对象的时候其实是调用了对象.toString方法。</p><h2 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h2><p>当我们不希望某些类被继承，某些方法被重写或者某些数据被修改时，可以使用final关键字来实现这个目的。</p><p>如果某个类被final修饰，则表明该类不可以被继承，该类没有子类，public final class/final public class都可以，只要是放在class的前面就可以；</p><p>如果某个方法被final修饰，则表明该方法不可以被重写，但是并不影响子类去继承调用它（final不可以修饰构造方法）。</p><p>如果某个局部变量被final修饰，那么我们可以不用在声明的同时立马进行赋值，但是必须在使用之前进行赋值，一旦赋值就不能被修改；</p><p>（方法内的局部变量的作用范围，从该行开始到所在大括号结束；而类的成员变量的作用范围取决于它前面的访问修饰符）；</p><p>如果某个成员变量被final修饰，我们同样不需要声明的同时进行立马赋值，但是必须在使用之前进行赋值，而且只能在构造方法或者类代码块(构造代码块)中进行赋值，一旦赋值就不能被修改；也就是说类中成员属性的赋值可以有三种方式： 1. 定义是直接初始化； 2. 构造方法; 3. 构造代码块（类代码块）。</p><p><strong>注意: 当具有多个构造方法时，final关键字修饰的成员变量如果选择了在构造方法里面进行赋值，那么就需要在所有的构造方法里面进行赋值，但是不同构造方法是可以赋不同值的</strong></p><h2 id="final对数据类型的影响"><a href="#final对数据类型的影响" class="headerlink" title="final对数据类型的影响"></a>final对数据类型的影响</h2><p>我们知道java 数据类型分为基本数据类型（byte,short,int,long,float,double,char,boolean） 和 引用数据类型(array,String,interface,自定义的类…)</p><p>基本数据类型是可以直接进行赋值的，而引用类型需要实例化该类的对象，然后才能给其对象进行赋值（String这个比较特殊，两种形式都是可以的）</p><p>我们知道基本数据类型在内存中存放的是数据本身，而引用数据类型在内存中存放的则是对象的引用地址。</p><p>下面的例子告诉我们，被final修饰的对象不可以修改它的引用地址，但是属性却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final Test test=new Test(&quot;hello&quot;);</span><br><span class="line">//test=new Test ();</span><br><span class="line">Test.key=&quot;world&quot;;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：基本数据类型的变量其一旦被赋初值，就无法进行修改；而引用类型的变量只是在初始化之后不能再指向另一个对象，但是对象的内容却是可变的。</p><p>因此final可配合static使用，用来修饰方法和变量。通常是用于修饰配置信息等(因为这类信息只需要加载一次，而且后面不需要被修改)。言外之意，使用final修饰可以提高性能，但会降低可扩展性。</p><h3 id="普通代码块，类代码块，构造代码块，静态代码块区别"><a href="#普通代码块，类代码块，构造代码块，静态代码块区别" class="headerlink" title="普通代码块，类代码块，构造代码块，静态代码块区别"></a>普通代码块，类代码块，构造代码块，静态代码块区别</h3><p>代码块都是一对大括号{}所括起来的内容。</p><p>普通代码块就是一对大括号{}所括起来的内容，只存在于类的方法之中；</p><p>类代码块和构造代码块是一个东西，就是直接在类中进行定义的，前面没有static进行修饰。构造代码块在创建对象时被调用，每次创建对象都会被调用，并且构造代码块的执行次序优先于类的构造方法。</p><p>静态代码块前面有static关键字进行修饰，它不能存在于任何方法体内，也不能直接访问实例变量和实例方法，需要通过类的实例对象来访问。</p><p>通常我们new一个对象，JVM要经过这样的初始化顺序：父类静态块&gt;子类静态块&gt;父类属性&gt;父类构造器&gt;子类属性&gt;子类构造器，这一系列的工作会消耗大量的内存和cpu。 </p><p>具体的研究可以参看这里：<a href="https://www.jb51.net/article/129990.htm" target="_blank" rel="noopener">详解java中的四种代码块</a>。</p><h2 id="java中的注解"><a href="#java中的注解" class="headerlink" title="java中的注解"></a>java中的注解</h2><p>注解是JDK1.5版本引入的一个特性, 它可以声明在包、类、属性、方法、局部变量、方法参数等前面，作用就是对这些元素进行说明、注释。</p><h3 id="按照运行机制来分类"><a href="#按照运行机制来分类" class="headerlink" title="按照运行机制来分类"></a>按照运行机制来分类</h3><p>注解按照<strong>运行机制</strong>来进行划分，可以分为3部分:<strong>源码注解，编译时注解，运行时注解。</strong></p><p>源码注解：只在源码.java文件中存在，编译成.class字节码文件就不存在了；</p><p>编译时注解：在源码.java文件和字节码.class文件中都存在；</p><p>运行时注解：在运行阶段还起作用,甚至会影响运行逻辑的注解。（spring框架中的@Autowired依赖注入的这种注解，它实现的就是在程序运行的过程当中自动的将外部传入的信息加载进去,它就是一种可以影响程序运行逻辑的运行时注解。）</p><h3 id="按照来源来分"><a href="#按照来源来分" class="headerlink" title="按照来源来分"></a>按照来源来分</h3><p>注解按照<strong>来源</strong>来进行划分，可以分为3部分:<strong>JDK注解，第三方注解，自定义注解。</strong></p><p>还有一种元注解，它是对注解进行注解的。</p><p>不行了，写着写着字数又超了，快4000字了，面向对象最后一个特性：多态，我还没说呢，下次吧，今天得滚去运动了。。。感谢你的赏阅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。&lt;/p&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（二）：封装</title>
    <link href="http://licheetools.github.io/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B0%81%E8%A3%85/"/>
    <id>http://licheetools.github.io/2018/08/01/关于JAVA你必须知道的那些事（二）：封装/</id>
    <published>2018-08-01T13:25:15.000Z</published>
    <updated>2019-04-13T13:25:45.394Z</updated>
    
    <content type="html"><![CDATA[<p>时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>在这之前，我们先了解什么是对象，已经什么是面向对象？对象：万物皆对象，现实中实际存在的事物都可以看成一个对象。而面向对象就是人在关注对象， 关注事物的信息。那什么是类？类就是模子，通常用于确定对象将会拥有的特征(属性)和行为(方法)。也就是说对象是类的具体存在，而类则是对象的抽象化。苹果是一个类，你手里拿的苹果就是一个实例化的对象。</p><p>刚才说了对象具有属性和方法，那么属性和方法又是什么呢？属性就是对象具有的各种静态特征，通常用来说明对象有什么；而方法就是说明对象具有的各种动态行为，也即对象能做什么。</p><p>假如我有一辆吉普车，它的颜色，价格，型号就是属性；而它能加速，减速，停止就是具有各种方法。</p><p>创建类的一般步骤为：创建类==》实例化对象==》书写具体的逻辑。</p><p>通常我们在书写类的时候，都需要遵循单一职责原则(单一功能原则)，也就是说 一个类应该有且只有一个引起功能变化的原因。如果在一个类当中承担的功能越多，那么它的交融，耦合性就越高，被复用的可能性就越低。特别是因为耦合度高，可能会因为一个职责的变化，引起其他职责的变化，进而影响整个程序的运行，这一点是我们所不想看到的。</p><p>实例化对象的过程可以分为三步：声明对象，实例化对象，将两者进行绑定。其中声明对象是在栈内存中开辟了一块内存空间，但此时还不是一个有效的对象，因为此时对象的空间里是空的。如果此时调用它的属性和方法则会引发错误。而实例化对象则是在堆空间开辟一块空间，它完成了具体对象相关信息的初始化操作。最后通过赋值进行两者绑定。</p><p>也就是声明对象和实例化对象是在内存中的不同空间完成的，通过赋值操作，将两者关联。具体的关联就是将堆中具体对象的内存地址存放在之前在栈中开辟的内存中，从而完成绑定。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法也称为: 构造函数或者构造器，你可以使用构造方法来完成对象初始化相关操作。</p><p>构造方法的调用必须配合new关键字，不能被对象单独调用。注意，<strong>构造方法必须与类同名且没有返回值。</strong></p><p>方法名中的参数列表可有可无，但是只能在对象实例化的时候被调用。</p><p>当没有指定构造方法时，系统会自动添加无参的构造方法；当有指定的构造方法时,无论是有参、无参的构造方法，系统都不会自动添加无参的构造方法，一个类中可以有多个构造方法。</p><p>this: 当前对象的默认引用; this的使用:调用成员属性,解决成员属性和局部变量同名冲突，也可以调用成员方法。</p><p>如果你想调用重载的构造方法，那么只能通过this关键字来使用this()；同时请记住，如果是通过this()来调用构造方法时,它必须放在方法体内第一行。（这个一定注意）</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是将类的某些信息隐藏在类内部, 不允许外部程序直接访问，但是通过该类提供的方法来实现对隐藏信息的操作和访问。也就是说两点：一是隐藏对象的信息，第二留出可以访问的接口（方法）。</p><p>封装的具体步骤：1、将访问修饰符替换为private；2、提供公共的setter和getter方法；3、必须有构造方法（系统会默认调用无参的构造方法）。其中setter方法是可写，getter方法是可读。我们可以在setter方法里面添加自己的业务逻辑，从而实现对值的合理性进行判断。</p><p>因为已经实现了封装，因此我们在实例化对象的时候就不需要再次传入自定义的参数了，否则就没有使我们提供的setter方法生效了。</p><h2 id="包的管理"><a href="#包的管理" class="headerlink" title="包的管理"></a>包的管理</h2><p>为什么要说包的管理呢？因为包的管理太重要了，其实很多坑就是包的命令和管理不规范引起的。</p><p>我们知道文件夹可以进行文件的管理，同一个文件中可以存放多个不同的文件，同名的文件只能存放在不同的文件夹中。</p><p>在Java中我们也是通过包来管理java文件来解决同名文件的冲突问题，Java中一个包里不能存放同名类，但不同包却是可以。</p><p>包的定义必须放在Java源文件的第一行。前面说过，我们在定义类的时候，尽量遵循单一职责原则，同样的道理，在建立包的时候，建议每个包内存储的信息功能应该单一。</p><p>如何实现跨包类的调用？可以采用Import这个关键字，来实现包的导入。需要注意的是<strong>import包名.* 只能访问指定包名下的类，无法访问子包下的类</strong>。</p><p>还有就是包的效率问题，建议采用<code>import包名.类名</code>的方式进行包的导入，这样可以提高加载效率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import net.oschina.Test.*; // 加载包下的所有类</span><br><span class="line">import net.oschina.Test.Java; // 加载指定包下的指定类</span><br></pre></td></tr></table></figure></p><p>注意一下，加载类的顺序跟import导入语句的位置无关:指定的具体包的优先级大于通配符。也就是下面加载会大于上面加载的速率。</p><p>最后说一下关于包管理的几个注意事项：<br>1、必须放在Java源文件中的第一行；<br>2、一个Java源文件中只能有一个package语句；<br>3、包名全部采用英文字母小写的方式；<br>4、包的命名方式为：域名倒序+模块+功能。</p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="static修饰"><a href="#static修饰" class="headerlink" title="static修饰"></a>static修饰</h3><p>static表示静态的。</p><p>如果它修饰成员变量，那么该变量被称为静态成员或类成员，它是这个类所有的。也就是说无论这个类实例化出多少对象，它都会共用同一块内存空间。后面的只会覆盖前面的值。</p><p>如果它修饰属性，那么该属性被称为静态属性。</p><p>如果它修饰方法，那么该方法被称为静态方法。</p><p>如果它修饰初始化块，那么该初始化块被称为静态初始化块。</p><p>但是static是不能修饰类，不能修饰局部变量，不能内部类中修饰初始化块（不可以在内部类定义静态初始化块）。</p><p>静态成员的生命周期很长，在类加载时产生，直到类被销毁时才释放。</p><h3 id="static访问"><a href="#static访问" class="headerlink" title="static访问"></a>static访问</h3><p>普通的成员方法可以直接访问当前对象（该类实例化的对象）的成员属性和方法，也可以直接访问当前对象的静态属性和静态方法</p><p>静态方法或者类方法（前面被static修饰），它不能直接访问同一个类中的非静态成员，因为它缺少隐含的this参数。静态方法只能直接调用同一个类中的静态成员。如果非要访问，只能通过实例化一个对象后，采用对象.成员方法的方式来访问非静态成员。</p><h2 id="初始化块（代码块）"><a href="#初始化块（代码块）" class="headerlink" title="初始化块（代码块）"></a>初始化块（代码块）</h2><h3 id="初始化块的说明"><a href="#初始化块的说明" class="headerlink" title="初始化块的说明"></a>初始化块的说明</h3><p>在Java里面，被{}括起来的代码就称之为代码块（初始化块）。</p><p>当代码块出现在方法里的时候，叫做普通代码块，普通代码块和一般语句的执行顺序是一样的：从上到下，顺序执行，先出现,，先执行。</p><p>当代码块直接在类中定义，与成员方法，属性并列时，我们此时称之为构造代码块。</p><p>记住构造代码块比构造函数优先执行。构造代码块它是在创建对象的时候被调用，优先于构造方法的执行。所以不管构造代码块放在类的其他位置，它都会先于构造函数执行。</p><p>多个构造代码块之间有先后顺序，但都先于构造函数前执行。</p><h3 id="初始化块的执行"><a href="#初始化块的执行" class="headerlink" title="初始化块的执行"></a>初始化块的执行</h3><p>现在考虑一下，静态初始化块，普通初始化块，构造函数这三者的执行顺序？你只要记住静态初始化块静态初始化块只在类初始化时进行加载，而且只执行一次。对于三者，程序的执行优先级：静态初始化块–》初始化块–》构造方法。（这里的初始化块包括构造初始化块（直接在类中声明）和普通的初始化块（在方法中声明）。</p><h3 id="初始化块的范围"><a href="#初始化块的范围" class="headerlink" title="初始化块的范围"></a>初始化块的范围</h3><p>看一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;初始化块的范围&quot;);</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块2&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这个test方法空间被分成了三部分，所以我们可以利用这个功能来实现变量的命名冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        int temp =10;</span><br><span class="line">        int temp =12;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面是不可以的，但是下面却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       </span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这时两个代码块空间中允许有自己的变量值，不会重名造成冲突。但是不能在方法的全局域位置添加同名变量，因为它会与两个变量都造成重复定义的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       int temp =11;</span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>因为temp的作用域是从那里到结尾的，会与后面的代码块里面的变量产生命名冲突。</p><p>由于篇幅的问题，继承和多态我下次再说哈，今天就写到这里了，感谢你的赏阅！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。&lt;/p&gt;
&lt;h2 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（一）：概述</title>
    <link href="http://licheetools.github.io/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A6%82%E8%BF%B0/"/>
    <id>http://licheetools.github.io/2018/08/01/关于JAVA你必须知道的那些事（一）：概述/</id>
    <published>2018-08-01T13:23:38.000Z</published>
    <updated>2019-04-13T13:24:45.535Z</updated>
    
    <content type="html"><![CDATA[<p>一、JAVA的主要特性：</p><p>1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。</p><p>2、Java是面向对象的，具有类，接口等；</p><p>3、Java是解释型的语言，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。即所谓的“一次编译，永久使用”。</p><p>下面解释一下解释型语言和编译型语言的区别？</p><p>（A）解释型语言：,解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。在发布程序时，看起来省了道编译工序。但是，在运行程序的时候，解释性语言必须先解释再运行。</p><p>（B）编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++、Delphi等。</p><p>二、JAVA的开发工具（JDK），工具及运行环境（JRE）</p><p>（1）Java主要分为三大体系：</p><p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p><p>JavaEE(J2EE)(Java 2 Platform,EnterpriseEdition，java平台企业版)</p><p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p><p>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE,J2SE更名为Java SE，J2ME更名为Java ME。</p><p>说明：</p><p>Standard Edition(标准版) J2SE 包含那些构成Java语言核心的类</p><p>比如：数据库连接、接口定义、输入/输出、网络编程</p><p>Enterprise Edition(企业版) J2EE 包含J2SE 中的类，并且还包含用于开发企业级应用的类。比如：EJB、servlet、JSP、XML、事务控制</p><p>Micro Edition(微缩版) J2ME 包含J2SE中一部分类，用于消费类电子产品的软件开发。比如：呼机、智能卡、手机、PDA、机顶盒</p><p>他们的范围是：J2SE包含于J2EE中，J2ME包含了J2SE的核心类，但新添加了一些专有类，应用场合，API的覆盖范围各不相同。</p><p>上面的每个版本都分别对应不同的JDK（java development kit），可以根据应用不同下载不同的JDK安装。对于初学者，先学习Java SE，有了一定基础之后，可以考虑深入学习Java EE，或者转战Android也行。</p><p>（2）JDK中包含了java开发需要的各种类和接口，以及运行java程序所需要的环境JRE，若是只想在各种系统平台上运行java程序而不进行开发，则可以直接下载JRE包即可。有些系统是自带JRE的，但不包括windows，因此要想在windows上运行java程序，需要在系统上安装JRE。</p><p>（3）JRE中包含了JVM（Java虚拟机）：它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。</p><p>2、工具</p><p>Java开发需要一些较好的开发工具，比较好的一个IDE就是Eclipse；eclipse、idea等IDE有自己的编译器而不是用JDKbin目录中自带的，所以在安装时你会发现他们只要求你选中jre路径就ok了；而且用eclipse的话不需要设置系统环境变量，它会自动找到安装的JRE地址。</p><p>3、开发环境</p><p>Java可以下windows和linux等系统下进行开发，这里仅介绍在windows下开发需要设置的环境参数，在安相应版本JDK之后，进行变量设置。</p><p>变量设置</p><p>变量名：JAVA_HOME</p><p>变量值：C:\ProgramFiles\Java\jdk1.7.0</p><p>//这里是你JDK的安装路径，可以更换</p><p>变量名：CLASSPATH</p><p>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;//记得前面有个”.”</p><p>变量名：Path</p><p>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p><p>1、”开始”-&gt;;”运行”，键入”cmd”；</p><p>2、键入命令”java -version”，”java”，”javac”几个命令，出现相关画面，说明环境变量配置成功；</p><p>三、Java基础语法</p><p>1、基本语法规则</p><p>编写Java程序时，应注意以下几点：</p><p>大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。</p><p>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</p><p>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p><p>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。</p><p>主方法入口：所有的Java 程序由public static void main(Stringargs)方法开始执行。</p><p>另外：java中没有头文件，它是以import的方法从外面导入.class文件的； java中的main函数是包含在一个类中的，与C++是不一样的，在C++中没有定义类也是一个程序。</p><p>2、源文件声明规则</p><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p><p>一个源文件中只能有一个public类</p><p>一个源文件可以有多个非public类</p><p>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</p><p>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</p><p>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</p><p>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</p><p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p><p>3、Java包：</p><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。（即包中包含很多种类的类和接口）</p><p>当编译一个.java文件（即一个编译单元）时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。如果你真的想学习java你可以来这个群前面是四九一，中间是八九七后面是一五八这里有技术大牛亲自指导帮助你 还有免费的直播课程学。因此在编译少量.java文件之后，会得到大量的.class文件。每一个.java文件编译以后都会有一个public类，以及任意数量的非public类。因此每个.java文件都是一个构件，如果希望许许多多的这样的构件从属于同一个群组，就可以在每一个.java文件中使用关键字package。而这个群组就是一个类库。</p><p>如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。</p><p>4、权限修饰符</p><p>Java中有四种权限修饰符，这些修饰符控制对类，类的成员方法，类的成员变量的访问；其作用范围如下：</p><p>public：所有的类都可以访问。</p><p>private：只有在同一个类中才可以访问。</p><p>protected：同一个类中、同一个包中、子类中都可以访问，其他包不可以。</p><p>包类型的，即默认类型同一个类中、同一个包中可以访问到，其他包和子类不可以。</p><p>5、数据类型</p><p>byte: Java数据类型和c/c++基本类似，但Java中有byte类型，表示8位2进制的整数，相当于c/c++中的char.</p><p>常量：Java中常量用final表示，相当于const，final中的值是可以改变的；</p><p>-包装类: 在开发过程中，有时候需要使用对象，而不是内置数据类型，因此java为每个内置数据类型提供了对应的包装类所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类Number的子类，对于字符也有相应的Character类。每个类具有相应的函数。</p><p>数组：java数组是对象，与c++不同，语法上与c++类似，java数组具有一个属性length可以获取数组的长度。（数组a，a.length为数组长度），Array类具有一些函数可以对数组进运算。</p><p>6、Java高级特性和接口</p><p>Java中类继承只允许一个父类，当需要进行多个继承时，需要使用接口。接口类似于类，定义时用interface替代类定义中的class，但里面的方法只有定义没有实现。接口文件的文件名必须与接口名相同。继承接口的关键字为implement，与类的继承extends相似，可以进行多继承。接口继承必须实现接口中的所有方法。</p><p>接口是规范，规定某个实现类里必须有那些方法，只要事先定义好接口，当大家一起合作的时候就不用特别麻烦的交互，而是每个人写好自己的接口实现类，最后拼接到一起就可以了比如数据库连接类，接口规定好有哪些方法、方法的功能，然后每个数据库厂商根据接口去实现具体的类，达到统一的目的，要不每个数据库厂商自己实现一套，那么你编程的时候就要根据不同驱动使用不同的方法，造成不必要的麻烦。</p><p>2、Java中的抽象类</p><p>只声明方法的存在而不具体实现的类，抽象类不能实例化（不能创建相应对象）定义方式：在class前加上abstract，ex：</p><p>abstractclass 类名{ ;;;}抽象类中定义的没有实际意义的，必须在子类重写的方法为抽象方法，定义时前面加abstract：abstract type name(agrs)。</p><p>一般方法定义与在正常类中定义一样。</p><p>关于如何创建类和其他知识我将在后续文章陆续介绍，谢谢大家！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、JAVA的主要特性：&lt;/p&gt;
&lt;p&gt;1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）</title>
    <link href="http://licheetools.github.io/2018/06/30/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%EF%BC%88Centos%E7%89%88%EF%BC%89/"/>
    <id>http://licheetools.github.io/2018/06/30/利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）/</id>
    <published>2018-06-30T09:36:50.000Z</published>
    <updated>2019-04-15T09:41:09.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们将介绍如何把我们的微电影视频网站部署上线。</p><h2 id="安装LNMP环境"><a href="#安装LNMP环境" class="headerlink" title="安装LNMP环境"></a>安装LNMP环境</h2><p>首先我们需要在云服务器上安装LNMP，所谓的LNMP是指：Centos,Nginx,Mysql和Python：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8a2a45e6955f15cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>我们需要的配置：</strong><br>服务器系统：Centos7<br>数据库: Mysql<br>编程语言: Python3.6<br>队列缓存: Redis<br>web反向代理: Nginx<br>依赖环境: flask ，mysql-connector-python ，wtform ，sqlachemy ，redis<br><strong>整个部署流程：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-681f2b6ddc507495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="一些常用的Centos命令"><a href="#一些常用的Centos命令" class="headerlink" title="一些常用的Centos命令"></a>一些常用的Centos命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip  # 查看服务器配置</span><br><span class="line"></span><br><span class="line">cat /etc/redhat-release  # 查看内存剩余</span><br><span class="line"></span><br><span class="line">free -m   # 查看硬盘剩余</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="1、安装python3-6的依赖包"><a href="#1、安装python3-6的依赖包" class="headerlink" title="1、安装python3.6的依赖包"></a>1、安装python3.6的依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel</span><br><span class="line">sqllite-devel</span><br></pre></td></tr></table></figure><h3 id="2、下载并解压Python3-6-4"><a href="#2、下载并解压Python3-6-4" class="headerlink" title="2、下载并解压Python3.6.4"></a>2、下载并解压Python3.6.4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf python-3.6.4.tgz</span><br><span class="line">cd python-3.6.4/</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line"></span><br><span class="line">yum -y install gcc gcc-c++</span><br><span class="line"></span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure><h3 id="3、采用软连接配置Python"><a href="#3、采用软连接配置Python" class="headerlink" title="3、采用软连接配置Python"></a>3、采用软连接配置Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line"></span><br><span class="line">mv python python.backup</span><br><span class="line"></span><br><span class="line"># 创建软连接</span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python</span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python3</span><br><span class="line"></span><br><span class="line">cd /usr/bin/</span><br><span class="line">ls yum*</span><br><span class="line">vim yum</span><br></pre></td></tr></table></figure><p>修改第一行尾python2:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d83a9c0da46eac23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yum-config-manager</span><br></pre></td></tr></table></figure></p><p>修改第一行尾python2：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e49564c4aae6f218.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>。。。。。。<br>运行下面所有的命令，把它们第一行尾的python都改成Python2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim yum-debug-restore</span><br><span class="line">vim yum-group-manager</span><br><span class="line">vim yum-build-dep</span><br><span class="line">vim yum-debug-dump</span><br><span class="line">vim yumdownloader</span><br><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure></p><p>然后输入Python发现就是Python3.6.4的版本了。</p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>直接利用命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mariadb-server  # 安装MySQL服务</span><br><span class="line"></span><br><span class="line">systemctl start mariadb.service  # 启动服务</span><br><span class="line"></span><br><span class="line">enable mariadb.service  # 设置开机自启</span><br></pre></td></tr></table></figure></p><p>然后修改密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot password &quot;root&quot;</span><br><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure></p><p>接下来更改MySQL的字符集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">character--set-server=utf8   # 更改字符集</span><br></pre></td></tr></table></figure></p><p>然后重启服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb.service</span><br></pre></td></tr></table></figure></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>拷贝Nginx到我们的服务器上面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp nginx.tar.gz root@192.168.x.x:/root/</span><br></pre></td></tr></table></figure></p><p>然后安装它的依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ openssl-devel pcre-devel httpd-tools</span><br></pre></td></tr></table></figure></p><p>接下来进行解压安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf nginx.tar.gz</span><br><span class="line">cd nginx/</span><br><span class="line"></span><br><span class="line">useradd nginx</span><br><span class="line">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_mp4_module --with-http_flv_moudle</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install  # 安装和编译</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/sbin/</span><br></pre></td></tr></table></figure></p><p>最后启动我们的nginx服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br><span class="line">netstat -anptu | grep nginx</span><br></pre></td></tr></table></figure></p><h2 id="部署微电影视频网站"><a href="#部署微电影视频网站" class="headerlink" title="部署微电影视频网站"></a>部署微电影视频网站</h2><p>部署的整个流程就是这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-873fe3b45af67590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="1、引入Manager"><a href="#1、引入Manager" class="headerlink" title="1、引入Manager"></a>1、引入Manager</h3><p>首先安装Flask-Script，然后在manage.py中导入Manager：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from app import app</span><br><span class="line">from flask_script import Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">manage = Manager(app)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><h3 id="2、修改服务器端口"><a href="#2、修改服务器端口" class="headerlink" title="2、修改服务器端口"></a>2、修改服务器端口</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-02c8bb4b7a0f99fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>端口需要和服务器保持一致，同时关闭调试模式。</p><h3 id="3、拷贝依赖文件到服务器"><a href="#3、拷贝依赖文件到服务器" class="headerlink" title="3、拷贝依赖文件到服务器"></a>3、拷贝依赖文件到服务器</h3><p>首先导出项目依赖的各种包req.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp req.txt movie.sql root@192.168.xx/root/</span><br></pre></td></tr></table></figure></p><p>当然如果你不熟悉，那你可以使用xshell来上传文件。</p><h3 id="4、新建虚拟环境"><a href="#4、新建虚拟环境" class="headerlink" title="4、新建虚拟环境"></a>4、新建虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --python=python3 movie</span><br></pre></td></tr></table></figure><h3 id="5、安装依赖的包"><a href="#5、安装依赖的包" class="headerlink" title="5、安装依赖的包"></a>5、安装依赖的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r req.txt</span><br></pre></td></tr></table></figure><p>如果安装太慢就可以使用豆瓣源进行加速：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com -r  req.txt</span><br></pre></td></tr></table></figure></p><h3 id="6、创建数据库并导入数据"><a href="#6、创建数据库并导入数据" class="headerlink" title="6、创建数据库并导入数据"></a>6、创建数据库并导入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database movie;</span><br><span class="line">use movie;</span><br><span class="line">source /root/movie.sql;</span><br></pre></td></tr></table></figure><h3 id="7、将项目拷贝到nginx的html目录"><a href="#7、将项目拷贝到nginx的html目录" class="headerlink" title="7、将项目拷贝到nginx的html目录"></a>7、将项目拷贝到nginx的html目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r movie /usr/local/nginx/html   或者  cp -r movie /usr/share/nginx/html</span><br></pre></td></tr></table></figure><h3 id="8、查看nginx的目录"><a href="#8、查看nginx的目录" class="headerlink" title="8、查看nginx的目录"></a>8、查看nginx的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp nginx.conf /usr/local/nginx/conf/</span><br><span class="line"></span><br><span class="line">ubuntu: cp nginx.conf /etc/nginx/conf.d</span><br></pre></td></tr></table></figure><h3 id="9、运行项目"><a href="#9、运行项目" class="headerlink" title="9、运行项目"></a>9、运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/html/movie_project</span><br><span class="line"></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>然后开启四个进程，修改端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup python manage.py runserver -h 192.168.x.x -p admin</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-85539797185ec8d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="10、上传nginx的配置文件"><a href="#10、上传nginx的配置文件" class="headerlink" title="10、上传nginx的配置文件"></a>10、上传nginx的配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 262180;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=addr:5m;</span><br><span class="line">    upstream movie &#123;</span><br><span class="line">        server 127.0.0.1:5001;</span><br><span class="line">        server 127.0.0.1:5002;</span><br><span class="line">        server 127.0.0.1:5003;</span><br><span class="line">        server 127.0.0.1:5004;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name movie.licheetools.top;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">            proxy_pass http://movie;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.flv$ &#123;</span><br><span class="line">            flv;</span><br><span class="line">            limit_conn addr 4;</span><br><span class="line">            limit_rate 1024k;</span><br><span class="line">            rewrite ^/static/uploads/(.+?).flv$ /movie/app/static/uploads/$1.flv permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.mp4$ &#123;</span><br><span class="line">            mp4;</span><br><span class="line">            limit_conn addr 4;   # 同时允许在线观看4个页面</span><br><span class="line">            limit_rate 1024k;   # 最高下载速度1M/s</span><br><span class="line">            rewrite ^/static/uploads/(.+?).mp4$ /movie/app/static/uploads/$1.mp4 permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、刷新Nginx"><a href="#11、刷新Nginx" class="headerlink" title="11、刷新Nginx"></a>11、刷新Nginx</h3><p>最后我们使用<code>nginx -s reload</code>来刷新我们的Nginx,然后你就可以在浏览器输入你的域名就可以访问你的微电影视频网站了。</p><p>至此，微电影视频网站项目我们就完成了开发，回顾这一路，坎坷确实很多，但是我们还是坚持了下来，最后项目成功上线，这其中的喜悦之情真是难以言表啊。</p><p>最后欢迎大家加我好友或者关注微信公众号，进行交流，我们一起进步！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们将介绍如何把我们的微电影视频网站部署上线。&lt;/p&gt;
&lt;h2 id=&quot;安装LNMP环境&quot;&gt;&lt;a href=&quot;#安
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（十五）：实现电影弹幕</title>
    <link href="http://licheetools.github.io/2018/06/27/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%BD%B1%E5%BC%B9%E5%B9%95/"/>
    <id>http://licheetools.github.io/2018/06/27/利用Flask搭建微电影视频网站（十五）：实现电影弹幕/</id>
    <published>2018-06-27T09:34:44.000Z</published>
    <updated>2019-04-15T09:36:26.544Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      利用Flask搭建微电影视频网站（十五）：实现电影弹幕。
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（十四）：前台后续开发</title>
    <link href="http://licheetools.github.io/2018/06/25/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%90%8E%E7%BB%AD%E5%BC%80%E5%8F%91/"/>
    <id>http://licheetools.github.io/2018/06/25/利用Flask搭建微电影视频网站（十四）：前台后续开发/</id>
    <published>2018-06-25T09:33:47.000Z</published>
    <updated>2019-04-15T09:34:18.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们将完成前台的后续开发，需要实现上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十四篇。</a></p><h2 id="上映预告"><a href="#上映预告" class="headerlink" title="上映预告"></a>上映预告</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Preview<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、修改动画视图"><a href="#1、修改动画视图" class="headerlink" title="1、修改动画视图"></a>1、修改动画视图</h3><p>打开views.py文件，我们修改一下动画视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from app.models import  Preview</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 动画</span><br><span class="line">@home.route(&apos;/animation/&apos;)</span><br><span class="line">def animation():</span><br><span class="line">    data = Preview.query.all()</span><br><span class="line">    return render_template(&quot;home/animation.html&quot;, data=data)</span><br></pre></td></tr></table></figure></p><h3 id="2、配置animation页面"><a href="#2、配置animation页面" class="headerlink" title="2、配置animation页面"></a>2、配置animation页面</h3><p>我们修改一下我们的animation.html页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ca2af6a2c58974df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="标签筛选和电影分页"><a href="#标签筛选和电影分页" class="headerlink" title="标签筛选和电影分页"></a>标签筛选和电影分页</h2><p>标签就是这里：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d67cba4ad755fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Tag ，Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、编写视图函数"><a href="#1、编写视图函数" class="headerlink" title="1、编写视图函数"></a>1、编写视图函数</h3><p>打开views.py文件，我们修改index函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    tags = Tag.query.all()</span><br><span class="line">    movtag = request.args.get(&quot;movtag&quot;, 0)    # 获取电影标签</span><br><span class="line">    star = request.args.get(&quot;star&quot;, 0)  # 获取电影星级</span><br><span class="line">    ontime = request.args.get(&quot;ontime&quot;, 0)  # 获取上映时间</span><br><span class="line">    playnum = request.args.get(&quot;playnum&quot;, 0)  # 获取播放数量</span><br><span class="line">    commnum = request.args.get(&quot;commnum&quot;, 0)  # 获取评论数量</span><br><span class="line">    return render_template(&quot;home/index.html&quot;, tags=tags)</span><br></pre></td></tr></table></figure></p><h3 id="2、进行标签和星级遍历"><a href="#2、进行标签和星级遍历" class="headerlink" title="2、进行标签和星级遍历"></a>2、进行标签和星级遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for v in tags %&#125;</span><br><span class="line">&lt;a  class=&quot;label label-info&quot;&gt;&lt;span</span><br><span class="line">class=&quot;glyphicon glyphicon-tag&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v.name &#125;&#125;&lt;/a&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% for v in range(1,6) %&#125;</span><br><span class="line">&lt;a class=&quot;label label-warning&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-star&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v &#125;&#125;&lt;/a&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="3、构建参数字典"><a href="#3、构建参数字典" class="headerlink" title="3、构建参数字典"></a>3、构建参数字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p = dict(</span><br><span class="line">       movtag=movtag,</span><br><span class="line">       star=star,</span><br><span class="line">       ontime=ontime,</span><br><span class="line">       playnum=playnum,</span><br><span class="line">       commnum=commnum</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><p>这是为了后面的筛选用，记得把p传进去！</p><h3 id="4、配置筛选"><a href="#4、配置筛选" class="headerlink" title="4、配置筛选"></a>4、配置筛选</h3><p>我们对电影标签进行筛选，采用这种方式进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; v.id &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>也就是说除了当前所选之外，其余的我们都是采用获取字典属性的方法来获得相关属性。</p><p><strong>电影星级：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; v &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><strong>上映时间：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=1&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;  .......最近&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">                          </span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=2&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;  ......更早&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用ontime的值1-2分别代表最近，更早。</p><p><strong>播放数量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=1&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从高到低&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=2&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从低到高&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用playnum的值1-2分别代表从高到低，从低到高。</p><p><strong>评论数量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=1&quot;......从高到低&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=2&quot; ......从低到高&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用commnum的值1-2分别代表从高到低，从低到高。</p><h3 id="5、修改视图函数"><a href="#5、修改视图函数" class="headerlink" title="5、修改视图函数"></a>5、修改视图函数</h3><p>我们打开views.py文件，继续完善我们的index视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Movie</span><br><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&quot;/&lt;int:page&gt;/&quot;, methods=[&quot;GET&quot;])</span><br><span class="line">@home.route(&quot;/&quot;, methods=[&quot;GET&quot;])</span><br><span class="line">def index(page=None):</span><br><span class="line">    tags = Tag.query.all()</span><br><span class="line">    page_data = Movie.query</span><br><span class="line"></span><br><span class="line">    movtag = request.args.get(&quot;movtag&quot;, 0)    # 获取电影标签</span><br><span class="line">    if int(movtag) != 0:</span><br><span class="line">        page_data = page_data.filter_by(tag_id=int(movtag))</span><br><span class="line"></span><br><span class="line">    star = request.args.get(&quot;star&quot;, 0)  # 获取电影星级</span><br><span class="line">    if int(star) != 0:</span><br><span class="line">        page_data = page_data.filter_by(star=int(star))</span><br><span class="line"></span><br><span class="line">    ontime = request.args.get(&quot;ontime&quot;, 0)  # 获取上映时间</span><br><span class="line">    if int(ontime) != 0:</span><br><span class="line">        if int(ontime) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.addtime.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.addtime.asc()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    playnum = request.args.get(&quot;playnum&quot;, 0)  # 获取播放数量</span><br><span class="line">    if int(playnum) != 0:</span><br><span class="line">        if int(playnum) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.playnum.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.playnum.asc()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    commnum = request.args.get(&quot;commnum&quot;, 0)  # 获取评论数量</span><br><span class="line">    if int(commnum) != 0:</span><br><span class="line">        if int(commnum) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.commentnum.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.commentnum.asc()</span><br><span class="line">            )</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = page_data.paginate(page=page, per_page=12)</span><br><span class="line"></span><br><span class="line">    p = dict(</span><br><span class="line">        movtag=movtag,</span><br><span class="line">        star=star,</span><br><span class="line">        ontime=ontime,</span><br><span class="line">        playnum=playnum,</span><br><span class="line">        commnum=commnum</span><br><span class="line">    )</span><br><span class="line">    return render_template(&quot;home/index.html&quot;, tags=tags, p=p, page_data=page_data)</span><br></pre></td></tr></table></figure></p><h3 id="6、进行列表显示和分页配置"><a href="#6、进行列表显示和分页配置" class="headerlink" title="6、进行列表显示和分页配置"></a>6、进行列表显示和分页配置</h3><p>打开搜索框，输入<code>home.index</code>，我们在这些后面添加<code>page=1</code>,一共5个地方：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2c2dfad9bc78db1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果少了运行就会报下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.index&apos;. Did you forget to specify values [&apos;page&apos;]?</span><br></pre></td></tr></table></figure></p><p>分页的配置就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.index&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别放错位置哈：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3df1ea20b07b26ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影搜索和电影分页"><a href="#电影搜索和电影分页" class="headerlink" title="电影搜索和电影分页"></a>电影搜索和电影分页</h2><h3 id="使用到的内容-2"><a href="#使用到的内容-2" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、书写搜索视图函数"><a href="#1、书写搜索视图函数" class="headerlink" title="1、书写搜索视图函数"></a>1、书写搜索视图函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 搜索页面</span><br><span class="line">@home.route(&apos;/search/&lt;int:page&gt;/&apos;)</span><br><span class="line">def search(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    key = request.args.get(&apos;key&apos;, &apos;&apos;)</span><br><span class="line">    movie_count = Movie.query.filter(</span><br><span class="line">        Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;)   # ilike可以进行模糊查询</span><br><span class="line">    ).count()</span><br><span class="line">    page_data = Movie.query.filter(</span><br><span class="line">        Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;)</span><br><span class="line">    ).order_by(</span><br><span class="line">        Movie.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/search.html&quot;, key=key, movie_count=movie_count, page_data=page_data)</span><br></pre></td></tr></table></figure><h3 id="2、修改home和layout页面"><a href="#2、修改home和layout页面" class="headerlink" title="2、修改home和layout页面"></a>2、修改home和layout页面</h3><p>为搜索电影加<code>id=&quot;key_movie&quot;</code>,与此同时为搜索添加<code>id=&quot;do_search&quot;</code>，还要删除搜索的链接href:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-462f7ed5b1a041e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后采用Jquery来控制搜索按钮，在JavaScript里面添加这段Jquery代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#do_search&quot;).click(function () &#123;</span><br><span class="line">            var key = $(&quot;#key_movie&quot;).val();</span><br><span class="line">            location.href = &quot;&#123;&#123; url_for(&apos;home.search&apos;, page=1) &#125;&#125;?key=&quot; + key;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>这段Jquery代码的意思是说，当点击class=”do_search”的搜索框时，就会去查询电影里面含有key的电影，并返回到search搜索结果列表页面。</p><p>注意这些操作都需要在home和layout页面进行，2个都要进行配置！！！</p><p>然后就是分页了，就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.search&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别放错位置哈!!!</p><h2 id="电影详情和电影播放"><a href="#电影详情和电影播放" class="headerlink" title="电影详情和电影播放"></a>电影详情和电影播放</h2><h3 id="使用到的内容-3"><a href="#使用到的内容-3" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型： Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、编写播放视图"><a href="#1、编写播放视图" class="headerlink" title="1、编写播放视图"></a>1、编写播放视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;)</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie)</span><br></pre></td></tr></table></figure><h3 id="2、添加电影id"><a href="#2、添加电影id" class="headerlink" title="2、添加电影id"></a>2、添加电影id</h3><p>打开搜索框，输入<code>home.play</code>，我们在这些后面添加<code>id=v.id</code>,一共3个地方：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3a2fc55b0f338d18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="3、修改播放页面显示"><a href="#3、修改播放页面显示" class="headerlink" title="3、修改播放页面显示"></a>3、修改播放页面显示</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a4305b064c530fb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意一下星级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for val in range(1,movie.star+1) %&#125;</span><br><span class="line"> &lt;span class=&quot;glyphicon glyphicon-star&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for val in range(1,5-movie.star) %&#125;</span><br><span class="line"> &lt;span class=&quot;glyphicon glyphicon-star-empty&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>还有底下的配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-84f01901a1fe2c13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影评论和电影统计"><a href="#电影评论和电影统计" class="headerlink" title="电影评论和电影统计"></a>电影评论和电影统计</h2><h3 id="使用到的内容-4"><a href="#使用到的内容-4" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie User Comment<br>表单: CommentForm<br>请求方法: GET ,POST<br>访问控制: 需要登入</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 添加评论</span><br><span class="line">class CommentForm(FlaskForm):</span><br><span class="line">    content = TextAreaField(</span><br><span class="line">        label=&quot;内容&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入内容！&quot;),</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;内容&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;id&quot;: &quot;input_content&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;提交评论&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;btn-sub&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="2、判断登入和是否显示评论框"><a href="#2、判断登入和是否显示评论框" class="headerlink" title="2、判断登入和是否显示评论框"></a>2、判断登入和是否显示评论框</h3><p>打开play.html页面，我们修改成这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cc0e688e108dafbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意，是”user”，不是user，这个一定要注意哈！！！</strong></p><h3 id="3、准备页面渲染字段"><a href="#3、准备页面渲染字段" class="headerlink" title="3、准备页面渲染字段"></a>3、准备页面渲染字段</h3><p>打开home/views.py文件，我们修改play函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import CommentForm</span><br><span class="line"></span><br><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="4、前台页面传值显示以及操作信息提示"><a href="#4、前台页面传值显示以及操作信息提示" class="headerlink" title="4、前台页面传值显示以及操作信息提示"></a>4、前台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改play.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-303c94cb88c9009d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、继续完善我们的播放视图"><a href="#5、继续完善我们的播放视图" class="headerlink" title="5、继续完善我们的播放视图"></a>5、继续完善我们的播放视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Comment</span><br><span class="line"></span><br><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    movie.playnum = movie.playnum + 1</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        comment = Comment(</span><br><span class="line">            content=data[&quot;content&quot;],    # 左侧字段与数据库Comment字段保持一致</span><br><span class="line">            movie_id=movie.id,</span><br><span class="line">            user_id=session[&quot;user_id&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(comment)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加评论成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.play&quot;, id=movie.id))</span><br><span class="line">        movie.commentnum = movie.commentnum+1</span><br><span class="line">    db.session.add(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form)</span><br></pre></td></tr></table></figure><p>然后你就可以去play.html页面添加我们的评论了！</p><h2 id="评论分页及显示"><a href="#评论分页及显示" class="headerlink" title="评论分页及显示"></a>评论分页及显示</h2><p>我们继续修改我们的播放视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None, page=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line"></span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == movie.id,</span><br><span class="line">        User.id == Comment.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line"></span><br><span class="line">    movie.playnum = movie.playnum + 1</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        comment = Comment(</span><br><span class="line">            content=data[&quot;content&quot;],    # 左侧字段与数据库Comment字段保持一致</span><br><span class="line">            movie_id=movie.id,</span><br><span class="line">            user_id=session[&quot;user_id&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(comment)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        movie.commentnum = movie.commentnum + 1</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加评论成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.play&quot;, id=movie.id, page=1))</span><br><span class="line">        movie.commentnum = movie.commentnum+1</span><br><span class="line">    db.session.add(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后就是在index.html 和search.html页面添加<code>page=1</code>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6569936e610fe2a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2a9a946f4a9c73a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是评论的遍历了，打开play.html页面，我们做如下修改：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0e52ecb5fa575076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>别忘记了评论数量的统计显示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7b0f9bd9da9b9f0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的项目，发现评论出现了，但是有些却是html片段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-24a7e582d2cd0a7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>、<br>那是因为为了保证页面的安全，都默认不允许直接显示html页面，我们可以和Django一样，管道符号加safe:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; v.content|safe &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>然后就是分页了：就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.play&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行发现报了下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.play&apos; with values [&apos;page&apos;]. Did you forget to specify values [&apos;id&apos;]?</span><br></pre></td></tr></table></figure></p><p>因为这个页面是比较特殊的，我们需要做一下配置：在ui文件夹下面新建comment_page.html，把home_page.html的页面信息全部拷贝进去，然后添加id参数，以及在第几页添加id=id:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-94c2a1ff9d16a6f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在修改我们play.html的分页配置：开头变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>下面也需要修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.play&quot;, movie.id) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>就是这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f4a6d7e6bc4b21c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新一下，看一下分页功能是否已经实现了呢！！！还记得我们之前在个人中心没有对个人评论进行配置吗，现在我们就可以配置了！</p><h2 id="个人中心评论配置"><a href="#个人中心评论配置" class="headerlink" title="个人中心评论配置"></a>个人中心评论配置</h2><p>首先需要修改我们的评论视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 评论记录</span><br><span class="line">@home.route(&apos;/comments/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def comments(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == Comment.movie_id,</span><br><span class="line">        User.id == session[&quot;user_id&quot;]</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;home/comments.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后就是打开comments.html页面，我们直接复制paly.html页面那里面关于评论的那部分：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-81742fb3c8a4b8fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页了，还是2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.comments&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，看看个人中心的评论记录是否都已经显示了呢！！！</p><h2 id="电影收藏"><a href="#电影收藏" class="headerlink" title="电影收藏"></a>电影收藏</h2><h3 id="使用到的内容-5"><a href="#使用到的内容-5" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie User Moviecol<br>表单: 无<br>请求方法: GET<br>访问控制: 需要登录</p><h3 id="1、新定义一个添加收藏函数："><a href="#1、新定义一个添加收藏函数：" class="headerlink" title="1、新定义一个添加收藏函数："></a>1、新定义一个添加收藏函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/add/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def moviecol_add():</span><br><span class="line">    mid = request.args.get(&quot;mid&quot;, &quot;&quot;)</span><br><span class="line">    uid = request.args.get(&quot;uid&quot;, &quot;&quot;)</span><br><span class="line">    moviecol = MovieCol.query.filter_by(</span><br><span class="line">        user_id=int(uid),</span><br><span class="line">        movie_id=int(mid),</span><br><span class="line">    ).count()</span><br><span class="line">    if moviecol == 1:</span><br><span class="line">        data = dict(ok=0)</span><br><span class="line">    if moviecol == 0:</span><br><span class="line">        moviecol = MovieCol(</span><br><span class="line">            user_id=int(uid),</span><br><span class="line">            movie_id=int(mid),</span><br><span class="line">        )</span><br><span class="line">        db.session.add(moviecol)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        data = dict(ok=1)</span><br><span class="line">    import json</span><br><span class="line">    return json.dumps(data)</span><br></pre></td></tr></table></figure><h3 id="2、采用ajax进行收藏的提示"><a href="#2、采用ajax进行收藏的提示" class="headerlink" title="2、采用ajax进行收藏的提示"></a>2、采用ajax进行收藏的提示</h3><p>打开play.html页面，我们新定义一个Script，编写我们的ajax代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#btn-col&quot;).click(function () &#123;</span><br><span class="line">                var mid = &#123;&#123; movie.id &#125;&#125;;</span><br><span class="line">                var uid = &#123;&#123; session[&apos;user_id&apos;] &#125;&#125;;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: &quot;&#123;&#123; url_for(&apos;home.moviecol_add&apos;) &#125;&#125;&quot;,</span><br><span class="line">                    type: &quot;GET&quot;,</span><br><span class="line">                    data: &quot;mid=&quot; + mid + &quot;&amp;uid=&quot; + uid,</span><br><span class="line">                    dataType: &quot;json&quot;,</span><br><span class="line">                    success: function (res) &#123;</span><br><span class="line">                        if (res.ok == 1) &#123;</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).empty();</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).append(&quot;收藏成功！&quot;);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).empty();</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).append(&quot;已经收藏！&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3、添加页面收藏提示"><a href="#3、添加页面收藏提示" class="headerlink" title="3、添加页面收藏提示"></a>3、添加页面收藏提示</h3><p>继续在我们的play.html页面配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-19bd8bd918f12406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就可以去测试我们的电影收藏功能是否已经实现了呢，接下来就是会员中心收藏电影的一个显示了，这个和我们的评论记录的显示几乎一样，所以我快点配置。</p><h2 id="个人中心电影收藏显示"><a href="#个人中心电影收藏显示" class="headerlink" title="个人中心电影收藏显示"></a>个人中心电影收藏显示</h2><p>首先我们需要在menu.html页面配置收藏电影的page=1:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-29c4a2f24f637f56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着去完善我们的收藏电影moviecol，我们可以借鉴之前的会员登入日志的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def moviecol(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = MovieCol.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        User.id == session[&quot;user_id&quot;],</span><br><span class="line">        Movie.id == MovieCol.movie_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        MovieCol.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/moviecol.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开moviecol.html页面，我们进行收藏电影的显示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ce33205e82727ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可能会遗漏<code>page=1</code>和<code>id=v.movie_id</code>，但是页面运行时会提示你的，这个按照提示进行即可。</p><p>然后就是分页了：还是2步：首先复制这个置于文件开头（可以借鉴我们loginlog.html的配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.moviecol&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，看看个人中心收藏的电影是否都已经显示了呢！！！</p><p>至此，本篇关于上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能的介绍就到此为止了。也就是说我们整个项目的开发就全部完成了，后面就是代码的优化和电影弹幕的实现了，我们下一篇介绍了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十四篇。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们将完成前台的后续开发，需要实现上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（十三）：前台会员管理</title>
    <link href="http://licheetools.github.io/2018/06/20/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86/"/>
    <id>http://licheetools.github.io/2018/06/20/利用Flask搭建微电影视频网站（十三）：前台会员管理/</id>
    <published>2018-06-20T09:32:51.000Z</published>
    <updated>2019-04-15T09:33:27.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇笔记开始，我们将介绍前台的配置，也就是说现在你所有关于后台的页面都是可以关闭的，只需保留manage.py和moleds.py即可，好了话不多说，我们开始本篇的学习吧！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十三篇。</a></p><h2 id="前台会员管理"><a href="#前台会员管理" class="headerlink" title="前台会员管理"></a>前台会员管理</h2><p>前台会员管理主要包括会员注册，会员登录，会员退出，修改会员资料（包括会员密码），会员登录日志等5个功能，下面分别介绍。</p><h2 id="会员注册"><a href="#会员注册" class="headerlink" title="会员注册"></a>会员注册</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: RegisterForm<br>请求方法: GET ,POST<br>访问控制: 无</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开home/forms.py，我们定义Form字段，注意因为是会员注册，所以对应的html页面就是register.html，而且我们在forms.py里面定义的字段必须与register.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问register.html页面，这样明显多了！），可以复制修改后台的代码验证字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @Time: 2018/8/29 21:17</span><br><span class="line"># @Author: Envse</span><br><span class="line"># @File: forms.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from flask_wtf import FlaskForm</span><br><span class="line">from wtforms import StringField, PasswordField, SubmitField, FileField, TextAreaField, SelectField, SelectMultipleField</span><br><span class="line">from wtforms.validators import DataRequired, ValidationError, EqualTo, Email, Regexp</span><br><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 前台会员注册</span><br><span class="line">class RegisterForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;昵称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;昵称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;昵称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入昵称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    email = StringField(</span><br><span class="line">        label=&quot;邮箱&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;邮箱不能为空！&quot;),</span><br><span class="line">            Email(&quot;邮箱格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;邮箱&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入邮箱!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    phone = StringField(</span><br><span class="line">        label=&quot;手机号码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;手机号码不能为空！&quot;),</span><br><span class="line">            Regexp(&quot;1[3458]\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;手机号码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,     # 注意这个和后端页面的区别，不要拷贝错误</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入手机号码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    repwd = PasswordField(</span><br><span class="line">        label=&quot;确认密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;确认密码不能为空！&quot;),</span><br><span class="line">            EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;确认密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入确认密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;注册&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-lg btn-success btn-block&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    def validate_name(self, field):</span><br><span class="line">        name = field.data</span><br><span class="line">        user = User.query.filter_by(name=name).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该昵称已经存在！&quot;)</span><br><span class="line"></span><br><span class="line">    def validate_email(self, field):</span><br><span class="line">        email = field.data</span><br><span class="line">        user = User.query.filter_by(email=email).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该邮箱已经存在！&quot;)</span><br><span class="line"></span><br><span class="line">    def validate_phone(self, field):</span><br><span class="line">        phone = field.data</span><br><span class="line">        user = User.query.filter_by(phone=phone).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该手机号已经存在！&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开home/views.py文件，我们修改register函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import RegisterForm</span><br><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;)</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">    return render_template(&quot;home/register.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改register.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5c87c2be772ecced.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加<code></code>，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开register.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的phone需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.phone.errors %&#125;</span><br><span class="line"> &lt;div class=&quot;col-md-12&quot; id=&quot;error_phone&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改会员注册函数"><a href="#5、修改会员注册函数" class="headerlink" title="5、修改会员注册函数"></a>5、修改会员注册函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from app.models import User</span><br><span class="line">from werkzeug.security import generate_password_hash</span><br><span class="line">import uuid</span><br><span class="line">from app import db</span><br><span class="line">from flask import flash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            email=data[&quot;email&quot;],</span><br><span class="line">            phone=data[&quot;phone&quot;],</span><br><span class="line">            pwd=generate_password_hash(data[&quot;pwd&quot;]),</span><br><span class="line">            uuid=uuid.uuid4().hex</span><br><span class="line">        )</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;恭喜你注册成功，赶紧登录吧！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.login&quot;))</span><br><span class="line">    return render_template(&quot;home/register.html&quot;, form=form)</span><br></pre></td></tr></table></figure><h3 id="6、数据库字段验证"><a href="#6、数据库字段验证" class="headerlink" title="6、数据库字段验证"></a>6、数据库字段验证</h3><p>打开models.py文件，我们在User函数里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def check_pwd(self, pwd):</span><br><span class="line">       from werkzeug.security import check_password_hash</span><br><span class="line">       return check_password_hash(self.pwd, pwd)</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，就可以去首页注册我们的会员了！</p><h2 id="会员登录"><a href="#会员登录" class="headerlink" title="会员登录"></a>会员登录</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: LoginForm<br>请求方法: GET ,POST<br>访问控制: 无</p><h3 id="1、添加表单验证字段-1"><a href="#1、添加表单验证字段-1" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开home/forms.py，我们定义Form验证字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 前台会员登录</span><br><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;账号&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;账号不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;账号&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入账号!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;登录&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-lg btn-primary btn-block&quot;,   #注意这里最好是primary，不要用success</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-1"><a href="#2、准备页面渲染字段-1" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改login函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import LoginForm</span><br><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data=form.data</span><br><span class="line">    return render_template(&quot;home/login.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示-1"><a href="#3、后台页面传值显示以及操作信息提示-1" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改login.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-74b5485f4e8f597a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示-1"><a href="#4、后台页面错误信息提示-1" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开login.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改登录函数"><a href="#5、修改登录函数" class="headerlink" title="5、修改登录函数:"></a>5、修改登录函数:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data=form.data</span><br><span class="line">        user = User.query.filter_by(name=data[&quot;name&quot;]).first()</span><br><span class="line">        if not user.check_pwd(data[&quot;pwd&quot;]):</span><br><span class="line">            flash(&quot;密码错误！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.login&quot;))</span><br><span class="line">        session[&quot;user&quot;] = user.name</span><br><span class="line">        session[&quot;user_id&quot;] = user.id</span><br><span class="line">        userlog = UserLog(</span><br><span class="line">            user_id=user.id,</span><br><span class="line">            ip=request.remote_addr</span><br><span class="line">        )</span><br><span class="line">        db.session.add(userlog)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line">    return render_template(&quot;home/login.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去首页登录我们的网站了！</p><h3 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h3><p>现在有这样的问题，就是假如我们的账号不存在（这种情况也是有的，你长时间没登录忘记账号和密码了，然后就随便输入），这时候就很容易出现下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if not user.check_pwd(data[&quot;pwd&quot;]):</span><br><span class="line">AttributeError: &apos;NoneType&apos; object has no attribute &apos;check_pwd&apos;</span><br></pre></td></tr></table></figure></p><p>所以我们可以添加账号的验证（没有必要进行密码的验证，因为账号都不存在，哪来的密码呢，哈哈哈哈哈哈哈哈），可以仿照之前的注册在loginForm中定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def validate_name(self, field):</span><br><span class="line">      name = field.data</span><br><span class="line">      user = User.query.filter_by(name=name).count()</span><br><span class="line">      if user == 0:</span><br><span class="line">          raise ValidationError(&quot;该账号不存在！&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="会员登出"><a href="#会员登出" class="headerlink" title="会员登出"></a>会员登出</h2><p>会员登出相比其他是非常简单的，只需要把session里面的<code>user</code>和<code>user_id</code>删除即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 登出</span><br><span class="line">@home.route(&apos;/logout/&apos;)</span><br><span class="line">def logout():</span><br><span class="line">    session.pop(&quot;user&quot;, None)   # 重定向到前台的登录页面</span><br><span class="line">    session.pop(&quot;user_id&quot;, None)</span><br><span class="line">    return redirect(url_for(&apos;home.login&apos;))</span><br></pre></td></tr></table></figure></p><p>既然登出了，就不能查看登入之后的信息了，我们可以采用登入装饰器来控制访问,可以复制我们之前在admin里面配置的那个就可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登录装饰器</span><br><span class="line">def user_login_req(f):</span><br><span class="line">    @wraps(f)</span><br><span class="line">    def decorated_function(*args, **kwargs):</span><br><span class="line">        if &quot;user&quot; not in session:</span><br><span class="line">            return redirect(url_for(&quot;home.login&quot;, next=request.url))</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line">    return decorated_function</span><br></pre></td></tr></table></figure></p><p>然后就要在这些页面添加控制访问的权限了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7635eadc2b52254a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是会员中心资料的修改了！</p><h2 id="会员中心资料修改"><a href="#会员中心资料修改" class="headerlink" title="会员中心资料修改"></a>会员中心资料修改</h2><h3 id="使用到的内容-2"><a href="#使用到的内容-2" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: UserdetailForm<br>请求方法: GET ,POST<br>访问控制: @user_login_req</p><h3 id="1、添加表单验证字段-2"><a href="#1、添加表单验证字段-2" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># 修改个人资料</span><br><span class="line">class UserdetailForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;昵称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;昵称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;昵称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入昵称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    email = StringField(</span><br><span class="line">        label=&quot;邮箱&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;邮箱不能为空！&quot;),</span><br><span class="line">            Email(&quot;邮箱格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;邮箱&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入邮箱!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    phone = StringField(</span><br><span class="line">        label=&quot;手机号码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;手机号码不能为空！&quot;),</span><br><span class="line">            Regexp(&quot;1[3458]\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;手机号码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入手机号码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    face = FileField(</span><br><span class="line">        label=&quot;头像&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传头像！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;头像&quot;,</span><br><span class="line">    )</span><br><span class="line">    info = TextAreaField(</span><br><span class="line">        label=&quot;简介&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;简介不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;简介&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;rows=&quot;: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;保存修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="2、准备页面渲染字段-2"><a href="#2、准备页面渲染字段-2" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改user函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import UserdetailForm</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">import os</span><br><span class="line">import datetime</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># 会员中心</span><br><span class="line">@home.route(&apos;/user/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def user():</span><br><span class="line">    form = UserdetailForm()</span><br><span class="line">    user = User.query.get(int(session[&quot;user_id&quot;]))</span><br><span class="line">    form.face.validators = []</span><br><span class="line">    if request.method == &quot;GET&quot;:    # 给它们赋初始值</span><br><span class="line">        form.name.data = user.name</span><br><span class="line">        form.email.data = user.email</span><br><span class="line">        form.phone.data = user.phone</span><br><span class="line">        form.info.data = user.info</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        if form.face.data != &quot;&quot;:   # 没有修改时不能报错</span><br><span class="line">            file_face = secure_filename(form.face.data.filename)</span><br><span class="line">            if not os.path.exists(app.config[&quot;FC_DIR&quot;]):</span><br><span class="line">                os.makedirs(app.config[&quot;FC_DIR&quot;])</span><br><span class="line">                os.chmod(app.config[&quot;FC_DIR&quot;])</span><br><span class="line">            user.face = change_filename(file_face)</span><br><span class="line">            form.face.data.save(app.config[&quot;FC_DIR&quot;] + user.face)</span><br><span class="line"></span><br><span class="line">        name_count = User.query.filter_by(name=data[&quot;name&quot;]).count()</span><br><span class="line">        if data[&quot;name&quot;] != user.name and name_count == 1:</span><br><span class="line">            flash(&quot;该昵称已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        email_count = User.query.filter_by(email=data[&quot;email&quot;]).count()</span><br><span class="line">        if data[&quot;email&quot;] != user.email and email_count == 1:</span><br><span class="line">            flash(&quot;该邮箱已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        phone_count = User.query.filter_by(phone=data[&quot;phone&quot;]).count()</span><br><span class="line">        if data[&quot;phone&quot;] != user.phone and phone_count == 1:</span><br><span class="line">            flash(&quot;该手机已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        user.name = data[&quot;name&quot;]</span><br><span class="line">        user.email = data[&quot;email&quot;]</span><br><span class="line">        user.phone = data[&quot;phone&quot;]</span><br><span class="line">        user.info = data[&quot;info&quot;]</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改成功!&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line">    return render_template(&quot;home/user.html&quot;, form=form, user=user)</span><br></pre></td></tr></table></figure></p><h3 id="3、在初始的–init–-py文件里面，新增我们的图片存储地址："><a href="#3、在初始的–init–-py文件里面，新增我们的图片存储地址：" class="headerlink" title="3、在初始的–init–.py文件里面，新增我们的图片存储地址："></a>3、在初始的–init–.py文件里面，新增我们的图片存储地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[&quot;FC_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/users/&quot;)</span><br></pre></td></tr></table></figure><h3 id="4、后台页面传值显示以及操作信息提示"><a href="#4、后台页面传值显示以及操作信息提示" class="headerlink" title="4、后台页面传值显示以及操作信息提示"></a>4、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改user.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-63816b59b410b291.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法以及图片上传类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="5、前台页面错误信息提示"><a href="#5、前台页面错误信息提示" class="headerlink" title="5、前台页面错误信息提示"></a>5、前台页面错误信息提示</h3><p>打开user.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6、设置头像默认值"><a href="#6、设置头像默认值" class="headerlink" title="6、设置头像默认值"></a>6、设置头像默认值</h3><p>打开user.html页面，我们给用户头像一个初始值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4271674f3246f5ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的manage.py文件，就可以去后台修改个人中心的信息了！</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><h3 id="使用到的内容-3"><a href="#使用到的内容-3" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: PwdForm<br>请求方法: GET ,POST<br>访问控制: @user_login_req</p><h3 id="1、添加表单验证字段-3"><a href="#1、添加表单验证字段-3" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>这个表单验证字段和我们后台定义的修改密码是一模一样的，所以我们完全可以复制粘贴之前的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码</span><br><span class="line">class PwdForm(FlaskForm):</span><br><span class="line">    old_pwd = PasswordField(</span><br><span class="line">        label=&quot;旧密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;旧密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;旧密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入旧密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    new_pwd = PasswordField(</span><br><span class="line">        label=&quot;新密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;新密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;新密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入新密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改密码&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-3"><a href="#2、准备页面渲染字段-3" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改pwd函数（这个和我们后台修改密码一样，复制修改一下即可）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import PwdForm</span><br><span class="line"></span><br><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def pwd():</span><br><span class="line">    form = PwdForm()</span><br><span class="line">    if form.validate_on_submit():  # 表单验证，没有这个则无法进行错误信息提示</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User.query.filter_by(name=session[&quot;user&quot;]).first()</span><br><span class="line">        user.pwd = generate_password_hash(data[&quot;new_pwd&quot;])</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.logout&quot;))</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、前台页面传值显示以及操作信息提示"><a href="#3、前台页面传值显示以及操作信息提示" class="headerlink" title="3、前台页面传值显示以及操作信息提示"></a>3、前台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改pwd.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6d4c88923e8760b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、前台页面错误信息提示"><a href="#4、前台页面错误信息提示" class="headerlink" title="4、前台页面错误信息提示"></a>4、前台页面错误信息提示</h3><p>打开pwd.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改一下密码函数"><a href="#5、修改一下密码函数" class="headerlink" title="5、修改一下密码函数"></a>5、修改一下密码函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def pwd():</span><br><span class="line">    form = PwdForm()</span><br><span class="line">    if form.validate_on_submit():  # 表单验证，没有这个则无法进行错误信息提示</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User.query.filter_by(name=session[&quot;user&quot;]).first()</span><br><span class="line">        if not user.check_pwd(data[&quot;old_pwd&quot;]):</span><br><span class="line">            flash(&quot;旧密码错误！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&apos;home.pwd&apos;))</span><br><span class="line">        if data[&quot;old_pwd&quot;] == data[&quot;new_pwd&quot;]:</span><br><span class="line">            flash(&quot;新旧密码不能一样！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&apos;home.pwd&apos;))</span><br><span class="line">        user.pwd = generate_password_hash(data[&quot;new_pwd&quot;])</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.logout&quot;))</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去个人中心修改密码了！鉴于评论现在配置过早，我们现在暂且不配置，转向对登入日志的配置！</p><h2 id="登入日志"><a href="#登入日志" class="headerlink" title="登入日志"></a>登入日志</h2><h3 id="使用到的内容-4"><a href="#使用到的内容-4" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: 无<br>请求方法: GET<br>访问控制: @user_login_req</p><h3 id="1、编写登入日志函数"><a href="#1、编写登入日志函数" class="headerlink" title="1、编写登入日志函数"></a>1、编写登入日志函数</h3><p>这个是完全可以参考我们之前在后台对会员登录日志列表的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 登入日志</span><br><span class="line">@home.route(&apos;/loginlog/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def loginlog(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = UserLog.query.filter_by(</span><br><span class="line">        user_id=int(session[&quot;user_id&quot;])</span><br><span class="line">    ).order_by(</span><br><span class="line">        UserLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/loginlog.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><h3 id="2、遍历所要信息"><a href="#2、遍历所要信息" class="headerlink" title="2、遍历所要信息"></a>2、遍历所要信息</h3><p>打开loginlog.html页面，我们进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &#123;% for v in page_data.items %&#125;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.id &#125;&#125;&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;&#123;&#123; v.addtime &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.ip &#125;&#125;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、添加列表页"><a href="#3、添加列表页" class="headerlink" title="3、添加列表页"></a>3、添加列表页</h3><p>记得之前说过，凡是需要列表显示的都要有列表页page=1,打开menu.html，我们添加page=1即可！</p><h3 id="4、分页显示"><a href="#4、分页显示" class="headerlink" title="4、分页显示"></a>4、分页显示</h3><p>我们在ui文件夹下面新建一个名为home_page.html的页面，将之前的admin_page.html的代码拷贝进去，然后我们修改一下我们所指示的地方，增加nav标签，和修改class属性：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4a341c9fa9ac81cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着就是开头的引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>以及后面的替换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-footer clearfix&quot;&gt;</span><br><span class="line">         &#123;&#123; pg.page(page_data, &quot;home.loginlog&quot;) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-782b2917fe6eab04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>鉴于篇幅过长，后面的内容我们下一篇再介绍！</p><p>至此，本篇关于前台会员管理的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十三篇。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;从本篇笔记开始，我们将介绍前台的配置，也就是说现在你所有关于后台的页面都是可以关闭的，只需保留manage.py和moled
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（十二）：角色和管理员管理</title>
    <link href="http://licheetools.github.io/2018/06/18/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A7%92%E8%89%B2%E5%92%8C%E7%AE%A1%E7%90%86%E5%91%98%E7%AE%A1%E7%90%86/"/>
    <id>http://licheetools.github.io/2018/06/18/利用Flask搭建微电影视频网站（十二）：角色和管理员管理/</id>
    <published>2018-06-18T09:31:41.000Z</published>
    <updated>2019-04-15T09:32:18.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍角色管理，管理员管理以及访问权限控制这是三个功能。角色管理，管理员管理这个和前面介绍的标签，电影，预告管理也是差不多的，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十二篇。</a></p><h2 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h2><p>角色管理和上面的权限管理是非常相似的，所以有些操作就是复制粘贴和套用了！</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Role<br>表单: RoleForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是role_add.html，而且我们在forms.py里面定义的字段必须与role_add.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问role_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from wtforms import  SelectMultipleField</span><br><span class="line">from app.models import  Auth</span><br><span class="line"></span><br><span class="line"># 添加角色</span><br><span class="line">class RoleFrom(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;角色名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;角色名称不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;角色名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入角色名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    auths = SelectMultipleField(</span><br><span class="line">        label=&quot;权限列表&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限列表不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        coerce=int,</span><br><span class="line">        choices=[(v.id, v.name) for v in Auth.query.all()],   # 数据动态填充选择，采用列表生成式</span><br><span class="line">        description=&quot;权限列表&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_url&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请选择角色列表！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改role_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import RoleForm</span><br><span class="line">from app.models import Role</span><br><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_add():</span><br><span class="line">    form = RoleForm()</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改role_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c605f28e6785368e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加<code></code>，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开role_add.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改角色添加函数"><a href="#5、修改角色添加函数" class="headerlink" title="5、修改角色添加函数"></a>5、修改角色添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加角色</span><br><span class="line">@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_add():</span><br><span class="line">    form = RoleFrom()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        role = Role(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            auths=&apos;,&apos;.join(map(str, data[&quot;auths&quot;]))  # 采用高阶函数map来生成一个迭代器，然后用&apos;&apos;.join()来序列为一个字符串对象</span><br><span class="line">        )</span><br><span class="line">        db.session.add(role)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加角色成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的角色了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-20062bca3874a5f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查询一下数据库，发现这样的信息就说明权限添加成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from role;</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">| id | name        | auths | addtime             |</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">|  1 | 超级管理员 | NULL  | 2018-08-17 16:11:06 |</span><br><span class="line">|  2 | 管理员      | 1235  | 2018-08-12 16:24:18 |</span><br><span class="line">|  3 | 管理员1     | 12    | 2018-08-12 16:24:26 |</span><br><span class="line">|  4 | 管理员2     | 123   | 2018-08-12 16:24:33 |</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="角色列表的配置"><a href="#角色列表的配置" class="headerlink" title="角色列表的配置"></a>角色列表的配置</h2><p>打开我们的views.py文件，我们参考之前的权限列表的配置，对角色列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 角色列表</span><br><span class="line">@admin.route(&apos;/role/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line"># 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Role.query.order_by(</span><br><span class="line">        Role.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/role_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-960ebdc861a7de76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开role_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1023529d0a72b63e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个<ul class="pagination pagination-sm no-margin pull-right"> ……. </ul>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.role_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于角色列表的介绍就到此为止了！接下来是角色的删除！</p><h2 id="角色的删除"><a href="#角色的删除" class="headerlink" title="角色的删除"></a>角色的删除</h2><p>打开views.py文件，我们新定义role_del函数：（仿照权限删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 角色删除</span><br><span class="line">@admin.route(&apos;/role/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_del(id=None):</span><br><span class="line">    role = Role.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(role)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;角色删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.role_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开role_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的auth_list.html页面的那一部分）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e6c118ad75dd807f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>提示：有小伙伴们问我为啥需要添加这个操作成功的信息提示，那是因为我们的删除操作是在我们当前的列表页面进行的，所以自然我们的页面操作提示信息就应该放在列表页！！！</p><p>最后别忘了在role_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看角色删除功能是否已经实现了呢，接下来进行角色的编辑功能的实现！</p><h2 id="角色的编辑"><a href="#角色的编辑" class="headerlink" title="角色的编辑"></a>角色的编辑</h2><p>打开views.py文件，我们在角色列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 角色编辑</span><br><span class="line">@admin.route(&apos;/role/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_edit(id=None):</span><br><span class="line">    form = RoleForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    role = Role.query.get_or_404(id)</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.auths.data = list(map(int, role.auths.split(&quot;,&quot;)))  # form.auths.data为整形数组，而role.auths为一个可变字符串</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        role.auths = &apos;,&apos;.join(map(str, data[&quot;auths&quot;]))</span><br><span class="line">        role.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(role)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改角色成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.role_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/role_edit.html&quot;, form=form, role=role)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建role_edit.html页面，将role_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bf9cec2c94067680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记住那个<code></code>是无法直接给它付初始值的，我们采用GET方法来请求！</p><p>然后在role_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！</p><h2 id="错误修正"><a href="#错误修正" class="headerlink" title="错误修正"></a>错误修正</h2><p>近期有小伙伴反映页面跳转到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/admin/role/edit/&lt;int:id&gt;</span><br></pre></td></tr></table></figure></p><p>就出下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builtins.AttributeError</span><br><span class="line">AttributeError: &apos;NoneType&apos; object has no attribute &apos;split&apos;</span><br></pre></td></tr></table></figure></p><p>然后我通过单点测试，发现原来这个<code>form.auths.data</code>是个空值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b9364156861e25b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>但是呢，这个choices却不是，它是一个list，里面又有tuple。我们可以考虑取出每个tuple的第一个元素，它是Int类型，然后构造一个新的int类型的list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(lambda x: x[0], form.auths.choices))</span><br></pre></td></tr></table></figure></p><p>而且我们知道，我们这个role.auths它其实是一个varchar类型，所以我们也可以把它变为一个int类型的list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(int, auths.split(&quot;,&quot;)))</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-274036b39fe2dde8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(lambda x: x[0], form.auths.choices))==list(map(int, auths.split(&quot;,&quot;)))</span><br></pre></td></tr></table></figure></p><p>把之前的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form.auths.data = list(map(int, role.auths.split(&quot;,&quot;)))  # form.auths.data为整形数组，而role.auths为一个可变字符串</span><br></pre></td></tr></table></figure></p><p>替换掉！！！<strong>记住我们不可以修改超级管理员的角色名称和权限，因为超级管理员权力最大，如果某个权限连它都没有的话，那就没有人有了！！！</strong></p><h2 id="管理员管理"><a href="#管理员管理" class="headerlink" title="管理员管理"></a>管理员管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Admin<br>表单: AdminForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段-1"><a href="#1、添加表单验证字段-1" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是<code>admin_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>admin_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问admin_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Role</span><br><span class="line">from wtforms.validators import  EqualTo  # EqualTo 用于比对两次密码是否一致！ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">class AdminForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;管理员名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员名称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员名称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;管理员密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    repwd = PasswordField(</span><br><span class="line">        label=&quot;管理员重复密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员重复密码不能为空！&quot;),</span><br><span class="line">            EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员重复密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员重复密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    role_id = SelectField(</span><br><span class="line">        label=&quot;所属角色&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择所属角色！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 所属角色是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用下拉选择的方式进行所属角色的选择</span><br><span class="line">        choices=[(v.id, v.name) for v in Role.query.all()],</span><br><span class="line">        description=&quot;所属角色&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary btn-block btn-flat&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-1"><a href="#2、准备页面渲染字段-1" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改admin_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import AdminForm</span><br><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">@admin.route(&apos;/admin/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def admin_add():</span><br><span class="line">    form = AdminForm()</span><br><span class="line">    from werkzeug.security import generate_password_hash</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        admin = Admin(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            pwd=generate_password_hash(data[&quot;pwd&quot;]),</span><br><span class="line">            role_id=data[&quot;role_id&quot;],</span><br><span class="line">            is_super=1  # 普通管理员为1</span><br><span class="line">        )</span><br><span class="line">        db.session.add(admin)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加管理员成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/admin_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示-1"><a href="#3、后台页面传值显示以及操作信息提示-1" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的role_add.html来修改admin_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-23be1cbfd089a80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示-1"><a href="#4、后台页面错误信息提示-1" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开admin_add.html页面，我们同样可以仿照admin_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的管理员了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-99c0799429059300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="管理员列表的配置"><a href="#管理员列表的配置" class="headerlink" title="管理员列表的配置"></a>管理员列表的配置</h2><p>打开我们的views.py文件，我们参考之前的角色列表的配置，对管理员列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 管理员列表</span><br><span class="line">@admin.route(&apos;/admin/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def admin_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = Admin.query.join(</span><br><span class="line">        Role</span><br><span class="line">    ).filter(</span><br><span class="line">        Role.id == Admin.role_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Admin.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/admin_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a3a49afa5d3a5f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开admin_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8c1ac9bf0116a248.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开admin_list.html,删除那个<code>&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;</code>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.admin_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>错误提示：</strong>最近有小伙伴告诉我，一点击管理员列表就会出现这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinja2.exceptions.UndefinedError: &apos;app.models.Admin object&apos; has no attribute &apos;role&apos;</span><br></pre></td></tr></table></figure></p><p>那么你需要检查我们的models.py文件，查看我们的Role函数里面是否有这个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admins = db.relationship(&quot;Admin&quot;, backref=&apos;role&apos;)  # 管理员外键关系关联</span><br></pre></td></tr></table></figure></p><p>如果没有请添加，这样就应该不会出错了！</p><p>至此，关于管理员列表的介绍就到此为止了，下面介绍访问权限控制的配置！</p><h2 id="访问权限控制的配置"><a href="#访问权限控制的配置" class="headerlink" title="访问权限控制的配置"></a>访问权限控制的配置</h2><p>打开views.py文件，我们新定义一个访问权限控制装饰器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from flask import abort</span><br><span class="line"></span><br><span class="line"># 访问权限控制装饰器</span><br><span class="line">def admin_auth(f):</span><br><span class="line">    @wraps(f)</span><br><span class="line">    def decorated_function(*args, **kwargs):</span><br><span class="line">        admin = Admin.query.join(</span><br><span class="line">            Role</span><br><span class="line">        ).filter(</span><br><span class="line">            Role.id == Admin.role_id,</span><br><span class="line">            Admin.id == session[&quot;admin_id&quot;]</span><br><span class="line">        ).first()</span><br><span class="line">        auths = admin.role.auths</span><br><span class="line">        auths = list(map(int, auths.split(&quot;,&quot;)))</span><br><span class="line">        auth_list = Auth.query.all()</span><br><span class="line">        urls = [v.url for v in auth_list for val in auths if val == v.id]</span><br><span class="line">        rule = request.url_rule</span><br><span class="line">        if str(rule) not in urls:</span><br><span class="line">            abort(404)</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line">    return decorated_function</span><br></pre></td></tr></table></figure></p><p>接下来给除了登录和后台首页以外所有的函数都加上访问权限控制装饰器，然后运行manage.py测试一下我们的项目是否可以使用。</p><p>不过这样在代码里面添加访问权限控制器挺累的，等有时间准备做一个后台权限分配页面，这样可视化操作就比较人性化了。</p><p>至此，本篇关于角色管理，管理员管理以及访问权限控制的介绍就到此为止了。也就是说所有后台的管理配置都介绍完了，下一篇我们就开始进行前台页面的配置，感谢你的赏阅。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十二篇。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们介绍角色管理，管理员管理以及访问权限控制这是三个功能。角色管理，管理员管理这个和前面介绍的标签，电影，预告管理
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（十一）：日志管理和权限管理</title>
    <link href="http://licheetools.github.io/2018/06/16/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://licheetools.github.io/2018/06/16/利用Flask搭建微电影视频网站（十一）：日志管理和权限管理/</id>
    <published>2018-06-16T09:30:43.000Z</published>
    <updated>2019-04-15T09:31:20.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍日志管理和权限管理，其中日志管理包括操作日志列表，管理员登录日志列表，会员登录日志列表，这个和前面介绍的标签，电影，预告管理也是差不多，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十一篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十一篇。</a></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h2 id="操作日志列表"><a href="#操作日志列表" class="headerlink" title="操作日志列表"></a>操作日志列表</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Oplog ，Userlog ，Adminlog<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET<br>访问控制: @admin_login_req</p><h3 id="上下文应用处理器"><a href="#上下文应用处理器" class="headerlink" title="上下文应用处理器"></a>上下文应用处理器</h3><p>这里我们需要引入上下文应用处理器的概念，它是可以封装全局变量并把全局变量展现到模板里面，我们前面在个人中心里面没有对操作时间进行配置，因为操作时间就是需要用到上下文处理器。我们打开views.py文件，新定义下面的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"># 上下文处理器</span><br><span class="line">@admin.context_processor</span><br><span class="line">def tpl_extra():</span><br><span class="line">    data = dict(</span><br><span class="line">        online_time=datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    )</span><br><span class="line">    return data</span><br></pre></td></tr></table></figure></p><p>接着用我们这里定义的<code>online_time</code>，去填充我们的admin.html页面里面的操作时间：<img src="https://upload-images.jianshu.io/upload_images/8964398-029b0b3cc86f65d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新一下我们的页面，发现操作时间就可以正常显示了。</p><p>注意一下，<code>import datetime</code>和<code>from datetime import datetime</code>是不同的，你可以点击这里<a href="https://stackoverflow.com/questions/15707532/python-import-datetime-v-s-from-datetime-import-datetime" target="_blank" rel="noopener">区别</a>！</p><h3 id="记录增删改查操作"><a href="#记录增删改查操作" class="headerlink" title="记录增删改查操作"></a>记录增删改查操作</h3><p>打开views.py文件，我们需要把登录时用户的id一块记录下来，修改登录函数：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5a6df71f73a890bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session[&quot;admin_id&quot;] = admin.id</span><br><span class="line">session.pop(&quot;admin_id&quot;, None)</span><br></pre></td></tr></table></figure></p><p>然后继续完善我们的视views.py,我们这里以添加标签为例，进行操作的记录演示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from app.models import OpLog, UserLog, AdminLog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oplog = OpLog(</span><br><span class="line">            admin_id=session[&quot;admin_id&quot;],</span><br><span class="line">            ip=request.remote_addr,</span><br><span class="line">            reason=&quot;添加标签%s&quot; % data[&quot;name&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(oplog)</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-bf55301e3ac72ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>flask中获取ip地址使用<code>request.remote_addr</code>，可以点击这里了解一下：<br><a href="https://www.jb51.net/article/62608.htm" target="_blank" rel="noopener">python使用Flask框架获取用户IP地址的方法</a></p><p>接下来你可以去添加几个标签，然后查询一下数据库，看是不是有了相应的记录！</p><p>然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。</p><h3 id="操作日志页面显示"><a href="#操作日志页面显示" class="headerlink" title="操作日志页面显示"></a>操作日志页面显示</h3><p>打开views.py文件，我们修改日志列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 操作日志列表</span><br><span class="line">@admin.route(&apos;/oploglist/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def oplog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = OpLog.query.join(</span><br><span class="line">        Admin</span><br><span class="line">    ).filter(</span><br><span class="line">        Admin.id == OpLog.admin_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        OpLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/oplog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开oplog_list.html页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d4a97be5ef585b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.oplog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加<code>page=1</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.oplog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 操作日志列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于操作日志列表的介绍就到此为止了！接下来是管理员登录日志列表！</p><h2 id="管理员登录日志列表"><a href="#管理员登录日志列表" class="headerlink" title="管理员登录日志列表"></a>管理员登录日志列表</h2><p>管理员登录日志列表是处理与管理员登录有关的列表，自然而的我们就要修改我们的登录函数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adminlog = AdminLog(</span><br><span class="line">          admin_id=session[&quot;admin_id&quot;],</span><br><span class="line">          ip=request.remote_addr,</span><br><span class="line">      )</span><br><span class="line">      db.session.add(adminlog)</span><br><span class="line">      db.session.commit()</span><br></pre></td></tr></table></figure></p><p>接下来你可以重新登录或退出，然后查询一下数据库，看是不是有了相应的记录！</p><p>然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。</p><h2 id="管理员登录日志页面显示"><a href="#管理员登录日志页面显示" class="headerlink" title="管理员登录日志页面显示"></a>管理员登录日志页面显示</h2><p>打开views.py文件，我们修改管理员登录日志列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 管理员登录日志列表</span><br><span class="line">@admin.route(&apos;/adminloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def adminloginlog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = AdminLog.query.join(</span><br><span class="line">        Admin</span><br><span class="line">    ).filter(</span><br><span class="line">        Admin.id == AdminLog.admin_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        AdminLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/adminloginlog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开adminloginlog_list.html页面，开始for循环的遍历：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-b3095c52611fe0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.adminloginlog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加page=1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.adminloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 管理员登录日志列表</span><br><span class="line">  &lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于管理员登录日志列表的介绍就到此为止了！接下来是会员登录日志列表！</p><h2 id="会员登录日志列表"><a href="#会员登录日志列表" class="headerlink" title="会员登录日志列表"></a>会员登录日志列表</h2><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入cmd，然后输入mysql -uroot -proot后回车，接着use movie; 然后查询一下userlog的信息：select * from userlog;接着复制粘贴下面的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into userlog(user_id,ip,addtime) values(1,&quot;192.188.8.1&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(2,&quot;192.188.8.2&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(3,&quot;192.188.8.3&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(4,&quot;192.188.8.4&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(5,&quot;192.188.8.5&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(6,&quot;192.188.8.6&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(7,&quot;192.188.8.7&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.8&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.9&quot;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：select * from userlog;，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userlog;</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">| id | user_id | ip          | addtime             |</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">|  1 |       1 | 192.188.8.1 | 2018-08-11 18:24:37 |</span><br><span class="line">|  2 |       2 | 192.188.8.2 | 2018-08-11 18:24:38 |</span><br><span class="line">|  3 |       3 | 192.188.8.3 | 2018-08-11 18:24:38 |</span><br><span class="line">|  4 |       4 | 192.188.8.4 | 2018-08-11 18:24:38 |</span><br><span class="line">|  5 |       5 | 192.188.8.5 | 2018-08-11 18:24:38 |</span><br><span class="line">|  6 |       6 | 192.188.8.6 | 2018-08-11 18:24:38 |</span><br><span class="line">|  7 |       7 | 192.188.8.7 | 2018-08-11 18:24:38 |</span><br><span class="line">|  8 |       8 | 192.188.8.8 | 2018-08-11 18:24:38 |</span><br><span class="line">|  9 |       8 | 192.188.8.9 | 2018-08-11 18:24:38 |</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">9 rows in set (0.19 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开views.py文件，我们修改会员登录日志列表函数（仿照之前的管理员登录列表）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员登录日志列表</span><br><span class="line">@admin.route(&apos;/userloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def userloginlog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = UserLog.query.join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        User.id == UserLog.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        UserLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/userloginlog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开userloginlog_list.html页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-8ba362fd48f9b40d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.userloginlog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加page=1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &lt;a href=&quot;&#123;&#123; url_for(&apos;admin.userloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">     &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员登录日志列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于会员登录日志列表的介绍就到此为止了，接下来便是权限管理的介绍了！</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Auth<br>表单: AuthForm<br>请求方法: GET，POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是<code>auth_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>auth_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问auth_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 添加权限</span><br><span class="line">class AuthForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;权限名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限名称不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;权限名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入权限名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    url = StringField(</span><br><span class="line">        label=&quot;权限地址&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限地址不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;权限地址&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_url&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入权限地址！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>auth_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import AuthForm</span><br><span class="line">from app.models import Auth</span><br><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_add():</span><br><span class="line">    form = AuthForm()</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的movie_add.html来修改auth_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-41778f12a04c0ded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开auth_add.html页面，我们同样可以仿照movie_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改权限添加函数"><a href="#5、修改权限添加函数" class="headerlink" title="5、修改权限添加函数"></a>5、修改权限添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_add():</span><br><span class="line">    form = AuthForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        auth = Auth(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            url=data[&quot;url&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(auth)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加权限成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的权限了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a4cb7d4b5e150f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查询一下数据库，发现这样的信息就说明权限添加成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from auth;</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">| id | name               | url                         | addtime             |</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">|  1 | 添加标签权限       | /admin/tag/add              | 2018-08-12 14:42:30 |</span><br><span class="line">|  2 | 编辑标签权限       | /admin/tag/edit/&lt;int:id&gt;/   | 2018-08-12 14:44:07 |</span><br><span class="line">|  3 | 标签列表权限       | /admin/tag/list/&lt;int:page&gt;/ | 2018-08-12 14:45:00 |</span><br><span class="line">|  5 | 删除标签权限       | /admin/tag/del/&lt;int:id&gt;/    | 2018-08-12 14:46:02 |</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">4 rows in set (0.10 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="权限列表的配置"><a href="#权限列表的配置" class="headerlink" title="权限列表的配置"></a>权限列表的配置</h2><p>打开我们的views.py文件，我们参考之前的标签列表的配置，对权限列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 权限列表</span><br><span class="line">@admin.route(&apos;/auth/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1  </span><br><span class="line"># 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Auth.query.order_by(</span><br><span class="line">        Auth.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=2)</span><br><span class="line">    return render_template(&quot;admin/auth_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-71f352efceaa7db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开auth_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-316e41d427f5cc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个<code>&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;</code>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.auth_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于权限列表的介绍就到此为止了！接下来是权限的删除！</p><h2 id="权限的删除"><a href="#权限的删除" class="headerlink" title="权限的删除"></a>权限的删除</h2><p>打开views.py文件，我们新定义auth_del函数：（仿照会员删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 权限删除</span><br><span class="line">@admin.route(&apos;/auth/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_del(id=None):</span><br><span class="line">    auth = Auth.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(auth)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;权限删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.auth_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开auth_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-06a8c82facc2bc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后别忘了在auth_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看权限删除功能是否已经实现了呢，接下来进行权限的编辑功能的实现！</p><h2 id="权限的编辑"><a href="#权限的编辑" class="headerlink" title="权限的编辑"></a>权限的编辑</h2><p>打开views.py文件，我们在权限列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 权限编辑</span><br><span class="line">@admin.route(&apos;/auth/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_edit(id=None):</span><br><span class="line">    form = AuthForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    auth = Auth.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        auth.url = data[&quot;url&quot;]</span><br><span class="line">        auth.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(auth)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改权限成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.auth_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/auth_edit.html&quot;, form=form, auth=auth)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建auth_edit.html页面，将auth_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d4f685a7f371142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后在auth_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！</p><p>至此，本篇关于日志管理和权限管理的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十一篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十一篇。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们介绍日志管理和权限管理，其中日志管理包括操作日志列表，管理员登录日志列表，会员登录日志列表，这个和前面介绍的标
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（十）：收藏管理和密码修改</title>
    <link href="http://licheetools.github.io/2018/06/14/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E6%94%B6%E8%97%8F%E7%AE%A1%E7%90%86%E5%92%8C%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
    <id>http://licheetools.github.io/2018/06/14/利用Flask搭建微电影视频网站（十）：收藏管理和密码修改/</id>
    <published>2018-06-14T09:28:55.000Z</published>
    <updated>2019-04-15T09:30:11.860Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      利用Flask搭建微电影视频网站（十）：收藏管理和密码修改。
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（九）：会员和评论管理</title>
    <link href="http://licheetools.github.io/2018/06/13/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%BC%9A%E5%91%98%E5%92%8C%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86/"/>
    <id>http://licheetools.github.io/2018/06/13/利用Flask搭建微电影视频网站（九）：会员和评论管理/</id>
    <published>2018-06-13T09:27:56.000Z</published>
    <updated>2019-04-15T09:28:24.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍会员和评论管理，这个和前面介绍的标签，电影，预告管理差不多，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第九篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第九篇。</a></p><h2 id="会员管理"><a href="#会员管理" class="headerlink" title="会员管理"></a>会员管理</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="插入一些数据"><a href="#插入一些数据" class="headerlink" title="插入一些数据"></a>插入一些数据</h3><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入<code>cmd</code>，然后输入<code>mysql -uroot -proot</code>后回车，接着<code>use movie;</code> 然后查询一下user的信息：<code>select * from user;</code>接着复制粘贴下面的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 会员列表</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;红&apos;,&apos;1001&apos;,&apos;1001@128.com&apos;,&apos;18888888881&apos;,&apos;红&apos;,&apos;01.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe0&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;蓝&apos;,&apos;1002&apos;,&apos;1002@128.com&apos;,&apos;18888888882&apos;,&apos;蓝&apos;,&apos;02.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe1&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;绿&apos;,&apos;1003&apos;,&apos;1003@128.com&apos;,&apos;18888888883&apos;,&apos;绿&apos;,&apos;03.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe2&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;白&apos;,&apos;1004&apos;,&apos;1004@128.com&apos;,&apos;18888888884&apos;,&apos;白&apos;,&apos;04.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe3&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;紫&apos;,&apos;1005&apos;,&apos;1005@128.com&apos;,&apos;18888888885&apos;,&apos;紫&apos;,&apos;05.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe4&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;黄&apos;,&apos;1006&apos;,&apos;1006@128.com&apos;,&apos;18888888886&apos;,&apos;黄&apos;,&apos;06.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe5&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;青&apos;,&apos;1007&apos;,&apos;1007@128.com&apos;,&apos;18888888887&apos;,&apos;青&apos;,&apos;07.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe6&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;橙&apos;,&apos;1008&apos;,&apos;1008@128.com&apos;,&apos;18888888888&apos;,&apos;橙&apos;,&apos;08.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe7&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;赤&apos;,&apos;1009&apos;,&apos;1009@128.com&apos;,&apos;18888888889&apos;,&apos;赤&apos;,&apos;09.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe8&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;靛&apos;,&apos;1010&apos;,&apos;1010@128.com&apos;,&apos;18888888891&apos;,&apos;靛&apos;,&apos;10.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe9&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;米&apos;,&apos;1011&apos;,&apos;1011@128.com&apos;,&apos;18888888892&apos;,&apos;米&apos;,&apos;11.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff0&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;栗&apos;,&apos;1012&apos;,&apos;1012@128.com&apos;,&apos;18888888893&apos;,&apos;栗&apos;,&apos;12.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff1&apos;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：<code>select * from user;</code>，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">| id | name | pwd  | email        | phone       | info | face   | addtime             | uuid                             |</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">|  1 | 红   | 1001 | 1001@128.com | 18888888881 | 红   | 01.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe0 |</span><br><span class="line">|  2 | 蓝   | 1002 | 1002@128.com | 18888888882 | 蓝   | 02.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe1 |</span><br><span class="line">|  3 | 绿   | 1003 | 1003@128.com | 18888888883 | 绿   | 03.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe2 |</span><br><span class="line">|  4 | 白   | 1004 | 1004@128.com | 18888888884 | 白   | 04.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe3 |</span><br><span class="line">|  5 | 紫   | 1005 | 1005@128.com | 18888888885 | 紫   | 05.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe4 |</span><br><span class="line">|  6 | 黄   | 1006 | 1006@128.com | 18888888886 | 黄   | 06.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe5 |</span><br><span class="line">|  7 | 青   | 1007 | 1007@128.com | 18888888887 | 青   | 07.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe6 |</span><br><span class="line">|  8 | 橙   | 1008 | 1008@128.com | 18888888888 | 橙   | 08.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe7 |</span><br><span class="line">|  9 | 赤   | 1009 | 1009@128.com | 18888888889 | 赤   | 09.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe8 |</span><br><span class="line">| 10 | 靛   | 1010 | 1010@128.com | 18888888891 | 靛   | 10.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe9 |</span><br><span class="line">| 11 | 米   | 1011 | 1011@128.com | 18888888892 | 米   | 11.png | 2018-08-10 19:18:06 | d32a72bdac524478b7e4f6dfc8394ff0 |</span><br><span class="line">| 12 | 栗   | 1012 | 1012@128.com | 18888888893 | 栗   | 12.png | 2018-08-10 19:18:10 | d32a72bdac524478b7e4f6dfc8394ff1 |</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>当然你打开navicat在查询框里执行这段代码也是可以的，然后把图片都拷贝到uploads/users文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-abb9fe87fad88d72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="会员列表分页"><a href="#会员列表分页" class="headerlink" title="会员列表分页"></a>会员列表分页</h3><p>打开views.py文件，我们修改会员列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"># 会员列表</span><br><span class="line">@admin.route(&apos;/user/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = User.query.order_by(</span><br><span class="line">        User.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/user_list.html&quot;, page_data=page_data)</span><br><span class="line">    return render_template(&quot;admin/user_list.html&quot;)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.user_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开user_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-d66829c3d775b6dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开user_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.user_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于会员列表的介绍就到此为止了！接下来是会员的查看！</p><h3 id="会员的查看"><a href="#会员的查看" class="headerlink" title="会员的查看"></a>会员的查看</h3><p>打开views.py文件，我们修改user_view函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看会员</span><br><span class="line">@admin.route(&apos;/user/view/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_view(id=None):</span><br><span class="line">    user = User.query.get_or_404(int(id))</span><br><span class="line">    return render_template(&quot;admin/user_view.html&quot;, user=user)</span><br></pre></td></tr></table></figure></p><p>接着打开user_view.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-cacbe8b2e137541e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们的查看功能就完成了，接下来是实现删除会员的操作了！</p><h2 id="会员的删除"><a href="#会员的删除" class="headerlink" title="会员的删除"></a>会员的删除</h2><p>首先打开user_list.html页面，我们进行删除的跳转链接配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;label label-danger&quot; href=&quot;&#123;&#123; url_for(&apos;admin.user_del&apos;, id =v.id) &#125;&#125;&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>接着就是打开views.py文件，定义我们的会员删除函数，我们可以仿照之前的电影删除或者是预告删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员删除</span><br><span class="line">@admin.route(&apos;/user/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_del(id=None):</span><br><span class="line">    user = User.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;会员删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.user_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开user_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-9411846ce2a29b04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后去测试一下我们的项目，看一看关于会员列表的相关功能是否都已经实现了呢！</p><h2 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Comment<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET （不涉及到信息的提交）<br>访问控制: @admin_login_req</p><h3 id="插入一些数据-1"><a href="#插入一些数据-1" class="headerlink" title="插入一些数据"></a>插入一些数据</h3><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入<code>cmd</code>，然后输入<code>mysql -uroot -proot</code>后回车，接着<code>use movie;</code> 然后查询一下comment的信息：<code>select * from comment;</code>接着复制粘贴下面的代码:（记住电影id要和你之前定义的电影id一样，因为是外键关联，当然也包括会员Id）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,1,&quot;好看&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,2,&quot;不错&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,3,&quot;经典&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,4,&quot;给力&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,5,&quot;精彩&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,6,&quot;无聊&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,7,&quot;乏味&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,8,&quot;难看&quot;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：select * from comment;，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from comment;</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">| id | content | movie_id | user_id | addtime             |</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">|  1 | 好看    |        1 |       1 | 2018-08-10 20:18:16 |</span><br><span class="line">|  2 | 不错    |        1 |       2 | 2018-08-10 20:18:16 |</span><br><span class="line">|  3 | 经典    |        5 |       3 | 2018-08-10 20:18:16 |</span><br><span class="line">|  4 | 给力    |        5 |       4 | 2018-08-10 20:18:16 |</span><br><span class="line">|  5 | 精彩    |        5 |       5 | 2018-08-10 20:18:16 |</span><br><span class="line">|  6 | 无聊    |        1 |       6 | 2018-08-10 20:18:16 |</span><br><span class="line">|  7 | 乏味    |        5 |       7 | 2018-08-10 20:18:16 |</span><br><span class="line">|  8 | 难看    |        1 |       8 | 2018-08-10 20:18:18 |</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开views.py文件，我们修改评论列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">@admin.route(&apos;/comment/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def comment_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == Comment.movie_id,</span><br><span class="line">        User.id == Comment.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/comment_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">           &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 评论列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开comment_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba50a35983497c8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开comment_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.comment_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于评论列表的介绍就到此为止了！接下来是评论的删除！</p><h2 id="评论的删除"><a href="#评论的删除" class="headerlink" title="评论的删除"></a>评论的删除</h2><p>打开views.py文件，我们新定义comment_del函数：（仿照会员删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 删除评论</span><br><span class="line">@admin.route(&apos;/comment/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def comment_del(id=None):</span><br><span class="line">    comment = Comment.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(comment)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;评论删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.comment_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开comment_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-1f20a5232b4b4802.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后别忘了在comment_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger pull-right&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看关于评论列表的相关功能是否都已经实现了呢！</p><p>至此本篇关于会员和评论管理的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第九篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第九篇。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们介绍会员和评论管理，这个和前面介绍的标签，电影，预告管理差不多，所以我就加快速度，话不多说，开始学习吧。&lt;/p
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（八）：预告管理</title>
    <link href="http://licheetools.github.io/2018/06/12/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E9%A2%84%E5%91%8A%E7%AE%A1%E7%90%86/"/>
    <id>http://licheetools.github.io/2018/06/12/利用Flask搭建微电影视频网站（八）：预告管理/</id>
    <published>2018-06-12T09:26:55.000Z</published>
    <updated>2019-04-15T09:27:29.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍预告管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第八篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第八篇。</a></p><h2 id="预告管理"><a href="#预告管理" class="headerlink" title="预告管理"></a>预告管理</h2><p>包括添加预告和预告列表这两个模块，下面我们先介绍添加预告这个功能的实现。</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Preview<br>表单: PreviewForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是预告添加模块，所以对应的html页面就是<code>preview_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>preview_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问preview_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 添加预告</span><br><span class="line">class PreviewForm(FlaskForm):</span><br><span class="line">    title = StringField(</span><br><span class="line">        label=&quot;预告标题&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;预告标题不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;预告标题&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_title&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入预告标题！！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    logo = FileField(</span><br><span class="line">        label=&quot;预告封面&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传预告封面！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;预告封面&quot;,</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>preview_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import PreviewForm</span><br><span class="line">from app.models import Preview</span><br><span class="line"></span><br><span class="line"># 上映预告列表</span><br><span class="line">@admin.route(&apos;/preview/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的movie_add.html来修改preview_add.html:<img src="https://upload-images.jianshu.io/upload_images/8964398-6385c8afabe9f97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在submit的上面添加<code></code>，还有form提交的方法以及上传文件类别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开preview_add.html页面，我们同样可以仿照movie_add.html来进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、为视图函数添加方法"><a href="#5、为视图函数添加方法" class="headerlink" title="5、为视图函数添加方法"></a>5、为视图函数添加方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告添加</span><br><span class="line">@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;)</span><br></pre></td></tr></table></figure><h3 id="6、修改预告添加函数"><a href="#6、修改预告添加函数" class="headerlink" title="6、修改预告添加函数"></a>6、修改预告添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告添加</span><br><span class="line">@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line">        logo = change_filename(file_logo)</span><br><span class="line">        # 把他们进行保存到文件夹下面</span><br><span class="line">        form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo)</span><br><span class="line">        # 之后的url和logo就是我们修改之后的地址</span><br><span class="line">        preview = Preview(</span><br><span class="line">            title=data[&quot;title&quot;],</span><br><span class="line">            logo=logo,</span><br><span class="line">        )</span><br><span class="line">        db.session.add(preview)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加预告成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.preview_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的上映预告了。</p><h2 id="预告列表的配置"><a href="#预告列表的配置" class="headerlink" title="预告列表的配置"></a>预告列表的配置</h2><p>打开我们的views.py文件，我们参考之前的电影列表的配置，对预告列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告列表</span><br><span class="line">@admin.route(&apos;/preview/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Preview.query.order_by(</span><br><span class="line">        Preview.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/preview_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：<img src="https://upload-images.jianshu.io/upload_images/8964398-ac09258658426227.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开preview_list.html页面，进行for循环的填充：<img src="https://upload-images.jianshu.io/upload_images/8964398-fcd390e38d4cc118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着就是分页功能了，我们参考之前在电影列表页面的配置，打开preview_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.preview_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py发现图片太大了，我们可以限制一下它的大小：<img src="https://upload-images.jianshu.io/upload_images/8964398-fb3879ea085971f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，这样就好多了：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba1d33e6ffbefc57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，关于预告列表的介绍就到此为止了！接下来是预告的删除和编辑！</p><h2 id="预告的删除"><a href="#预告的删除" class="headerlink" title="预告的删除"></a>预告的删除</h2><p>打开views.py文件，我们在预告列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 预告删除</span><br><span class="line">@admin.route(&apos;/preview/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_del(id=None):</span><br><span class="line">    preview = Preview.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(preview)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;预告删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.preview_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开preview_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">   &lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">  &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-body table-responsive no-padding&quot;&gt;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开preview_list.html页面，修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="预告的编辑"><a href="#预告的编辑" class="headerlink" title="预告的编辑"></a>预告的编辑</h2><p>打开views.py文件，我们在预告列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告编辑</span><br><span class="line">@admin.route(&apos;/preview/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_edit(id):</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    form.logo.validators = []  # 如果封面为空，我们就不需要修改</span><br><span class="line">    preview = Preview.query.get_or_404(int(id))</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.title.data = preview.title   # 给title赋初始值</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        if form.logo.data != &quot;&quot;:</span><br><span class="line">            file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">            preview.logo = change_filename(file_logo)</span><br><span class="line">            form.logo.data.save(app.config[&quot;UP_DIR&quot;] + preview.logo)</span><br><span class="line">        preview.title = data[&quot;title&quot;]</span><br><span class="line">        db.session.add(preview)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改预告成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&apos;admin.preview_edit&apos;, id=id))</span><br><span class="line">    return render_template(&quot;admin/preview_edit.html&quot;, form=form, preview=preview)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建preview_edit.html页面，将preview_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且将其中的图片地址替换为我们当前预告的图片地址（赋初值）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;uploads/&apos;+preview.logo) &#125;&#125;&quot; style=&quot;margin-top:5px;&quot; class=&quot;img-responsive&quot;alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>然后在preview_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，我们的项目关于预告这一功能是不是都能使用了！</p><p>至此，我们关于预告的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第八篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第八篇。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们介绍预告管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。&lt;/p&gt;
&lt;p&gt;本篇笔记对应上传的仓库为:
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用Flask搭建微电影视频网站（七）：电影管理</title>
    <link href="http://licheetools.github.io/2018/06/11/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%94%B5%E5%BD%B1%E7%AE%A1%E7%90%86/"/>
    <id>http://licheetools.github.io/2018/06/11/利用Flask搭建微电影视频网站（七）：电影管理/</id>
    <published>2018-06-11T09:26:00.000Z</published>
    <updated>2019-04-15T09:26:33.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍电影管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第七篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第七篇。</a></p><h2 id="电影管理"><a href="#电影管理" class="headerlink" title="电影管理"></a>电影管理</h2><p>包括添加电影和电影列表这两个模块，下面我们先介绍添加电影这个功能的实现。</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie<br>表单: MovieForm<br>请求方法: GET POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是标签添加模块，所以对应的html页面就是<code>movie_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>movie_add.html</code>里面的保持一致！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">from wtforms import FileField, TextAreaField, SelectField</span><br><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加电影</span><br><span class="line">class MovieForm(FlaskForm):</span><br><span class="line">    title= StringField(</span><br><span class="line">        label=&quot;片名&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;片名不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;片名&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_title&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入片名！！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    url = FileField(</span><br><span class="line">        label=&quot;文件&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传文件！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;文件&quot;,</span><br><span class="line">    )</span><br><span class="line">    info = TextAreaField(</span><br><span class="line">        label=&quot;简介&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;简介不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;简介&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;rows=&quot;: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    logo = FileField(</span><br><span class="line">        label=&quot;封面&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传封面！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;封面&quot;,</span><br><span class="line">    )</span><br><span class="line">    star = SelectField(</span><br><span class="line">        label=&quot;星级&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择星级！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 星级是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用下拉选择的方式进行星级的选择</span><br><span class="line">        choices=[(1, &quot;1星级&quot;), (2, &quot;2星级&quot;), (3, &quot;3星级&quot;), (4, &quot;4星级&quot;), (5, &quot;5星级&quot;)],</span><br><span class="line">        description=&quot;星级&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    tag_id = SelectField(</span><br><span class="line">        label=&quot;所属标签&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择标签！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 标签id也是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用列表递归式来取出所有的标签</span><br><span class="line">        choices=[(v.id, v.name)for v in Tag.query.all()],</span><br><span class="line">        description=&quot;标签&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    area = StringField(</span><br><span class="line">        label=&quot;上映地区&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入地区！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;地区&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_area&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入地区！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    length = StringField(</span><br><span class="line">        label=&quot;电影片长&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入片长！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;片长&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_length&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入片长！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    release_time = StringField(</span><br><span class="line">        label=&quot;上映时间&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入上映时间！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;上映时间&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_release_time&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入上映时间！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>movie_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import MovieForm</span><br><span class="line">from app.models import Movie</span><br><span class="line"></span><br><span class="line"># 电影添加</span><br><span class="line">@admin.route(&apos;/movie/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_add():</span><br><span class="line">    form = MovieForm()</span><br><span class="line">    return render_template(&quot;admin/movie_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示"><a href="#3、后台页面传值显示" class="headerlink" title="3、后台页面传值显示"></a>3、后台页面传值显示</h3><p>修改<code>movie_add.html</code>:<img src="https://upload-images.jianshu.io/upload_images/8964398-1df230c892fb53a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在submit的上面添加<code></code>，还有form提交的方法以及上传文件类别：<br>···<br>  <form role="form" method="post" enctype="multipart/form-data"><br>···</form></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开movie_tag.html页面，我们进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d5274e79c71a8219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、文件上传"><a href="#5、文件上传" class="headerlink" title="5、文件上传"></a>5、文件上传</h3><p>打开app/–init–.py文件，我们现在上传文件代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">app.config[&quot;UP_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="6、定义修改文件名称函数"><a href="#6、定义修改文件名称函数" class="headerlink" title="6、定义修改文件名称函数"></a>6、定义修改文件名称函数</h3><p>在views.py文件新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from app import db, app</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">import os</span><br><span class="line">import uuid</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改文件名称</span><br><span class="line">def change_filename(filename):</span><br><span class="line">    fileinfo = os.path.splitext(filename)</span><br><span class="line">    filename = datetime.now().strftime(&quot;%Y%m%d%H%M%S&quot;) + str(uuid.uuid4().hex) + fileinfo[-1]  # 文件后缀</span><br><span class="line">    return filename</span><br></pre></td></tr></table></figure></p><h3 id="7、修改添加电影函数"><a href="#7、修改添加电影函数" class="headerlink" title="7、修改添加电影函数"></a>7、修改添加电影函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 电影添加</span><br><span class="line">@admin.route(&apos;/movie/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_add():</span><br><span class="line">    form = MovieForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        file_url = secure_filename(form.url.data.filename)</span><br><span class="line">        file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line">        url = change_filename(file_url)</span><br><span class="line">        logo = change_filename(file_logo)</span><br><span class="line">        # 把他们进行保存到文件夹下面</span><br><span class="line">        form.url.data.save(app.config[&quot;UP_DIR&quot;] + url)</span><br><span class="line">        form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo)</span><br><span class="line">        # 之后的url和logo就是我们修改之后的地址</span><br><span class="line">        movie = Movie(</span><br><span class="line">            title=data[&quot;title&quot;],</span><br><span class="line">            url=url,</span><br><span class="line">            info=data[&quot;info&quot;],</span><br><span class="line">            logo=logo,</span><br><span class="line">            star=data[&quot;star&quot;],</span><br><span class="line">            playnum=0,</span><br><span class="line">            commentnum=0,</span><br><span class="line">            tag_id=data[&quot;tag_id&quot;],</span><br><span class="line">            area=data[&apos;area&apos;],</span><br><span class="line">            release_time=data[&quot;release_time&quot;],</span><br><span class="line">            length=data[&quot;length&quot;],</span><br><span class="line">        )</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/movie_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><h3 id="8、添加电影成功消息闪现"><a href="#8、添加电影成功消息闪现" class="headerlink" title="8、添加电影成功消息闪现"></a>8、添加电影成功消息闪现</h3><p>打开movie_add.html页面，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-b78bb6d46fa669bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的manage.py发现报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builtins.TypeError</span><br><span class="line">TypeError: an integer is required (got type str)</span><br></pre></td></tr></table></figure></p><p>那是因为我们的星级和所属标签是Int类型，我们需要转换一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">star= int(data[&quot;star&quot;]),</span><br><span class="line">tag_id=int(data[&quot;tag_id&quot;]),</span><br></pre></td></tr></table></figure></p><p>接着重新运行一下我们的manage.py文件，发现电影添加没有任何问题。</p><p>至此，我们添加电影的功能就介绍完了，下面介绍电影管理列表的配置！</p><h2 id="电影管理列表的配置"><a href="#电影管理列表的配置" class="headerlink" title="电影管理列表的配置"></a>电影管理列表的配置</h2><p>电影管理列表的配置其实和我们之前配置的标签列表非常相似，所以我们介绍就快一点，打开admin/views.py文件，修改movie_list函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 电影列表</span><br><span class="line">@admin.route(&apos;/movie/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Movie.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/movie_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">       &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 电影列表</span><br><span class="line"> &lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开movie_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-da3301c9cce86c9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开movie_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.movie_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于电影列表的介绍就到此为止了！接下来是电影的删除和编辑！</p><h2 id="电影的删除"><a href="#电影的删除" class="headerlink" title="电影的删除"></a>电影的删除</h2><p>打开views.py文件，我们在电影列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 电影删除</span><br><span class="line">@admin.route(&apos;/movie/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_del(id=None):</span><br><span class="line">    movie = Movie.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;电影删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.movie_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开movie_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<img src="https://upload-images.jianshu.io/upload_images/8964398-0e45aebb89f51752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="电影的编辑"><a href="#电影的编辑" class="headerlink" title="电影的编辑"></a>电影的编辑</h2><p>打开views.py文件，我们在电影列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    movie = Movie.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建movie_edit.html页面，将movie_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为修改，为form.title增加初值(value=movie.title):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.title(value=movie.title)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别忘了还有form.url，form.info，form.star，form.tag_id，form.area，form.release_time和form.length：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &#123;&#123; form.url(value=movie.url) &#125;&#125;</span><br><span class="line"></span><br><span class="line"> &#123;&#123; form.info(value=movie.info) &#125;&#125;</span><br><span class="line"></span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><p><strong>注意form.logo的初值和其他不一样</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&apos;static&apos;,filename=&apos;uploads/&apos;+ movie.logo) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>就是这里：<img src="https://upload-images.jianshu.io/upload_images/8964398-ff3912dea133b403.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有js里面的也需要修改：<img src="https://upload-images.jianshu.io/upload_images/8964398-3d6ae2fe8d10c1c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还要在movie_list里面修改页面的跳转：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_edit&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，发现封面图片不显示：<img src="https://upload-images.jianshu.io/upload_images/8964398-d855382199c17182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>将图片里的data-src修改为src:<img src="https://upload-images.jianshu.io/upload_images/8964398-b91ffc40180b7349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新发现info，tag_id，star还是不行，我们需要重新配置这三个字段的初始值,去掉之前在movie_edit里面赋予的初始值(就是只有这种，不带初值)，我们直接在views.py文件里配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    movie = Movie.query.get_or_404(id)</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.info.data = movie.info</span><br><span class="line">        form.tag_id.data = movie.tag_id</span><br><span class="line">        form.star.data = movie.star</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>之后就是对修改的部分进行提交之后的保存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">movie.title = data[&quot;title&quot;]</span><br><span class="line">movie.info = data[&quot;info&quot;]</span><br><span class="line">movie.star = data[&quot;star&quot;]</span><br><span class="line">movie.tag_id = data[&quot;tag_id&quot;]</span><br><span class="line">movie.length = data[&quot;length&quot;]</span><br><span class="line">movie.area = data[&quot;area&quot;]</span><br><span class="line">movie.release_time = data[&quot;release_time&quot;]</span><br><span class="line">db.session.add(movie)</span><br><span class="line">db.session.commit()</span><br><span class="line">flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br></pre></td></tr></table></figure></p><p>不过这还有一个问题，那就是片名的唯一性，我们不可能有同名的电影（现实里面是有的，但做不到完全一样，至少在演员，导演，剧情，上映时间肯定有一个不一样，但这里我们只限定片名不一样即可！）</p><h3 id="片名的唯一性"><a href="#片名的唯一性" class="headerlink" title="片名的唯一性"></a>片名的唯一性</h3><p>打开views.py文件，我们修改电影编辑函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    form.url.validators = []    # 因为是编辑，所以首先必须是非空才需要验证</span><br><span class="line">    form.logo.validators = []</span><br><span class="line">    movie = Movie.query.get_or_404(int(id))</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.info.data = movie.info</span><br><span class="line">        form.tag_id.data = movie.tag_id</span><br><span class="line">        form.star.data = movie.star</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        movie_count = Movie.query.filter_by(title=data[&quot;title&quot;]).count()</span><br><span class="line">        # 电影去重，唯一性</span><br><span class="line">        if movie.title != data[&quot;title&quot;] and movie_count == 1:</span><br><span class="line">            flash(&quot;该影片已经存在了！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;admin.movie_edit&quot;, id=id))</span><br><span class="line">        # 如果文件夹不存在，那么就创建一个文件夹</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line"></span><br><span class="line">        # 如果视频文件修改了，就进行替换</span><br><span class="line">        if form.url.data.filename != &quot;&quot;:</span><br><span class="line">            file_url = secure_filename(form.url.data.filename)</span><br><span class="line">            movie.url = change_filename(file_url)</span><br><span class="line">            form.url.data.save(app.config[&quot;UP_DIR&quot;] + movie.url)</span><br><span class="line"></span><br><span class="line">        # 如果图片文件修改了，就进行替换</span><br><span class="line">        if form.logo.data.filename != &quot;&quot;:</span><br><span class="line">            file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">            movie.logo = change_filename(file_logo)</span><br><span class="line">            form.logo.data.save(app.config[&quot;UP_DIR&quot;] + movie.logo)</span><br><span class="line"></span><br><span class="line">        movie.title = data[&quot;title&quot;]</span><br><span class="line">        movie.info = data[&quot;info&quot;]</span><br><span class="line">        movie.star = data[&quot;star&quot;]</span><br><span class="line">        movie.tag_id = data[&quot;tag_id&quot;]</span><br><span class="line">        movie.length = data[&quot;length&quot;]</span><br><span class="line">        movie.area = data[&quot;area&quot;]</span><br><span class="line">        movie.release_time = data[&quot;release_time&quot;]</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>接下来去movie_edit.html页面添加操作信息提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">   &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">          &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;err&quot;]) %&#125;</span><br><span class="line"> &lt;div class=&quot;alert alert-danger alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-ban&quot;&gt;&lt;/i&gt; 操作失败&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下我们的后台，发现关于电影这一功能是不是都能使用了！</p><p>至此，我们关于电影管理的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第七篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第七篇。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们介绍电影管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。&lt;/p&gt;
&lt;p&gt;本篇笔记对应上传的仓库为:
      
    
    </summary>
    
      <category term="flask" scheme="http://licheetools.github.io/categories/flask/"/>
    
    
      <category term="Flask建站" scheme="http://licheetools.github.io/tags/Flask%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Pytohn后端" scheme="http://licheetools.github.io/tags/Pytohn%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
