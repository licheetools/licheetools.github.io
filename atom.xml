<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编程思录，记录思考</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.licheetools.top/"/>
  <updated>2019-04-15T14:26:08.209Z</updated>
  <id>http://blog.licheetools.top/</id>
  
  <author>
    <name>Envy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十九）：项目部署上线</title>
    <link href="http://blog.licheetools.top/2018/09/06/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/"/>
    <id>http://blog.licheetools.top/2018/09/06/SSM搭建二手市场交易平台（二十九）：项目部署上线/</id>
    <published>2018-09-06T00:21:06.000Z</published>
    <updated>2019-04-15T14:26:08.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jdk的安装"><a href="#jdk的安装" class="headerlink" title="jdk的安装"></a>jdk的安装</h2><p>1、使用<code>rpm -qa|grep jdk</code>命令查看是否存在jdk。</p><p>2、新建develpoer和setup文件夹，具体是/develpoer/setup；</p><p>3、进入到setup文件夹，执行<code>sudo wget https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.rpm?AuthParam=1553169636_b11b9e5be288ddf0358ea33e6f97682e</code>，后面的https则是jdk的rpm地址，具体的点击这里<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk8</a>；注意后面的AuthParam，这个需要我们F12调出开发者模式，然后再次点击下载按钮，在headers里面可以直接寻找。然后对下载完的jdk进行重命名，命令如下：<code>sudo mv jdk-8u201-linux-x64.rpm?AuthParam=1553169636_b11b9e5be288ddf0358ea33e6f97682e jdk-8u201-linux-x64.rpm</code>这样名字就发生了改变，变成<code>jdk-8u201-linux-x64.rpm</code>。<br>4、如果觉得下载速度很慢，你可以使用<code>sudo wget http://learning.happymmall.com/jdk/jdk-7u80-linux-x64.rpm</code>这样我就就不需要进行修改名字了。<br>5、接下来使用下面的命令赋予用户权限：<code>sudo chmod +x jdk-7u80-linux-x64.rpm</code>，或者其他的权限，如777权限。</p><p>6、接下来使用下面的命令进行安装jdk：<code>sudo rpm -ivh jdk-7u80-linux-x64.rpm</code>，这样改jdk就直接被安装在setup这个文件夹里面了。如果出现下面的问题，请接着看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu RPM should not be used directly install RPM packages, use Alien instead!</span><br></pre></td></tr></table></figure></p><p>方法1：</p><ol><li><p>先安装 alien 和 fakeroot 这两个工具，其中前者可以将 rpm 包转换为 deb 包。安装命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install alien fakeroot</span><br></pre></td></tr></table></figure></li><li><p>将需要安装的 rpm 包下载备用，假设为 package.rpm</p></li><li><p>使用 alien 将 rpm 包转换为 deb 包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fakeroot alien package.rpm</span><br></pre></td></tr></table></figure></li><li><p>一旦转换成功，我们可以即刻使用以下指令来安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i package.deb</span><br></pre></td></tr></table></figure></li></ol><p>方法:2：<br>1.输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rpm alien</span><br></pre></td></tr></table></figure></p><p>2..输入以下代码：（过程有点慢，等待一下）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien -d package.rpm</span><br></pre></td></tr></table></figure></p><p>3..输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i package.deb</span><br></pre></td></tr></table></figure></p><p>详细的点击这里<a href="https://blog.csdn.net/suleil1/article/details/49471723" target="_blank" rel="noopener">bug解决方法</a><br>如下图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ls</span><br><span class="line"> jdk1.8_1.8.0202-1_amd64.deb   jdk-8u202-linux-x64.rpm  &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ sudo dpkg -i jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">Selecting previously unselected package jdk1.8.</span><br><span class="line">(Reading database ... 86516 files and directories currently installed.)</span><br><span class="line">Preparing to unpack jdk1.8_1.8.0202-1_amd64.deb ...</span><br><span class="line">Unpacking jdk1.8 (1.8.0202-1) ...</span><br><span class="line">Setting up jdk1.8 (1.8.0202-1) ...</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$</span><br></pre></td></tr></table></figure></p><p>之后就会将我们的jdk默认安装在/usr/java/jdk1.8.0_202-amd64下面，我们使用ls或者ll就能查看信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64$ ll</span><br><span class="line">total 26016</span><br><span class="line">drwxr-xr-x 8 root root     4096 Mar 21 22:24 ./</span><br><span class="line">drwxr-xr-x 4 root root     4096 Mar 21 22:23 ../</span><br><span class="line">drwxr-xr-x 2 root root     4096 Mar 21 22:24 bin/</span><br><span class="line">-rw-r--r-- 1 root root     3244 Dec 16 04:50 COPYRIGHT</span><br><span class="line">drwxr-xr-x 3 root root     4096 Mar 21 22:24 include/</span><br><span class="line">drwxr-xr-x 4 root root     4096 Mar 21 22:23 .java/</span><br><span class="line">-rw-r--r-- 1 root root  5211154 Dec 12 18:20 javafx-src.zip</span><br><span class="line">drwxr-xr-x 5 root root     4096 Mar 21 22:24 jre/</span><br><span class="line">drwxr-xr-x 5 root root     4096 Mar 21 22:24 lib/</span><br><span class="line">-rw-r--r-- 1 root root       40 Dec 16 04:50 LICENSE</span><br><span class="line">drwxr-xr-x 4 root root     4096 Mar 21 22:24 man/</span><br><span class="line">-rw-r--r-- 1 root root      159 Dec 16 04:50 README.html</span><br><span class="line">-rw-r--r-- 1 root root      424 Dec 16 04:50 release</span><br><span class="line">-rw-r--r-- 1 root root 21105955 Dec 16 04:50 src.zip</span><br><span class="line">-rw-r--r-- 1 root root   112724 Dec 12 18:20 THIRDPARTYLICENSEREADME-JAVAFX.txt</span><br><span class="line">-rw-r--r-- 1 root root   153824 Dec 16 04:50 THIRDPARTYLICENSEREADME.txt</span><br><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64$</span><br></pre></td></tr></table></figure></p><p>7、接下来就是环境变量的设置了，使用下面的命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>在文件的最底部添加下面的代码：（这里面把其他环境也添加了，你可以自己有选择的粘贴）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_202-amd64</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export MAVEN_HOME=/home/ubuntu/java/developer/apache-maven-3.0.5</span><br><span class="line">export NODE_HOME=/usr/local/node-v4.4.7-linux-x64</span><br><span class="line">export RUBY_HOME=/usr/local/ruby</span><br><span class="line">export CATALINA_HOME=/home/ubuntu/java/developer/apache-tomcat-7.0.73</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin:$MAVEN_HOME/bin:$NODE_HOME/bin:/usr/local/bin:$RUBY_HOME/bin</span><br><span class="line"></span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure></p><p>也可以点击这里<a href="http://learning.happymmall.com/env/" target="_blank" rel="noopener">profile</a>，选择profile文件，然后打开即可。</p><p>8、接下来我们激活刚才的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source  /etc/profile</span><br></pre></td></tr></table></figure></p><p>9、使用<code>java -version</code>查看是否安装成功，出现java的版本就说明成功了。如果出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error occurred during initialization of VM</span><br><span class="line">java/lang/NoClassDefFoundError: java/lang/Object</span><br></pre></td></tr></table></figure></p><p>，请参考这篇文章：<a href="https://blog.csdn.net/hanxue_wuhen/article/details/71312947" target="_blank" rel="noopener">解决办法</a>或者这篇文章：<a href="https://blog.51cto.com/53cto/1702607" target="_blank" rel="noopener">办法2</a><br>，当然我这里也直接附上解决办法。因为你的<code>/usr/java/jdk1.8.0_202-amd64/jre/lib</code><br>下面缺少<code>rt.jar</code>；还有<code>/usr/java/jdk1.8.0_202-amd64/lib</code>下面缺少<code>tools.jar</code>。那是因为你编译过度，将jar文件编译为<code>tools.pack</code>和<code>rt.pack</code>，这里我们直接使用反编译工具unpack200即可。分两步进行，首先执行反编译，然后移动文件即可。(当然，你完全可以在对应的目录下反编译，这样就不需要移动文件了。)<br>1、反编译，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unpack200  /usr/java/jdk1.8.0_202-amd64/lib/tools.pack  tools.jar</span><br></pre></td></tr></table></figure></p><p>这样我们的tools.jar就被编译在当前文件夹了。<br>同样执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unpack200  /usr/java/jdk1.8.0_202-amd64/lib/rt.pack  rt.jar</span><br></pre></td></tr></table></figure></p><p>这样我们的rt.jar就被编译在当前文件夹了。<br>2、移动文件, tools.jar就是在/usr/java/jdk1.8.0_202-amd64/lib文件下面，你使用这样的命令就可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/java/jdk1.8.0_202-amd64/lib/tools.jar /usr/java/jdk1.8.0_202-amd64/lib</span><br></pre></td></tr></table></figure></p><p>而rt.jar则是在/usr/java/jdk1.8.0_202-amd64/jre/lib，记得不要搞错！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/java/jdk1.8.0_202-amd64/lib/rt.jar /usr/java/jdk1.8.0_202-amd64/jre/lib</span><br></pre></td></tr></table></figure></p><p>接下来重复第9步，查看是否成功！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64/lib$ java -version</span><br><span class="line">java version &quot;1.8.0_202&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64/lib$</span><br></pre></td></tr></table></figure></p><p>如果有多个版本的java，这个java -version是根据你的环境设置来体现的。至此我们java的安装就结束了。</p><h2 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h2><p>进入developer文件夹，里面输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://learning.happymmall.com/tomcat/apache-tomcat-7.0.73.tar.gz</span><br></pre></td></tr></table></figure></p><p>待下载完毕以后，我们就开始解压它，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf apache-tomcat-7.0.73.tar.gz</span><br></pre></td></tr></table></figure></p><p>查看一下，发现没问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer$ ll</span><br><span class="line">total 8752</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu    4096 Mar 22 10:25 ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu    4096 Mar 21 18:20 ../</span><br><span class="line">drwxr-xr-x 9 root   root      4096 Mar 22 10:25 apache-tomcat-7.0.73/</span><br><span class="line">-rw-r--r-- 1 root   root   8938514 Apr 17  2017 apache-tomcat-7.0.73.tar.gz</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu    4096 Mar 21 22:22 setup/</span><br></pre></td></tr></table></figure></p><p>接下来，我们可以把<code>apache-tomcat-7.0.73.tar.gz</code>移动到setup文件夹下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-tomcat-7.0.73.tar.gz setup/</span><br></pre></td></tr></table></figure></p><p>发现setup里面是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x 2 ubuntu ubuntu      4096 Mar 22 10:28  ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu      4096 Mar 22 10:28  ../</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br><span class="line">-rw-r--r-- 1 root   root       85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br></pre></td></tr></table></figure></p><p>接下来，我们退回到上一层，也就是developer文件夹，然后进入到apache-tomcat-7.0.73这个文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer$ cd apache-tomcat-7.0.73</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73$ ll</span><br><span class="line">total 124</span><br><span class="line">drwxr-xr-x 9 root   root    4096 Mar 22 10:25 ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu  4096 Mar 22 10:28 ../</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Mar 22 10:25 bin/</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Nov  8  2016 conf/</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Mar 22 10:25 lib/</span><br><span class="line">-rw-r--r-- 1 root   root   56846 Nov  8  2016 LICENSE</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Nov  8  2016 logs/</span><br><span class="line">-rw-r--r-- 1 root   root    1239 Nov  8  2016 NOTICE</span><br><span class="line">-rw-r--r-- 1 root   root    8965 Nov  8  2016 RELEASE-NOTES</span><br><span class="line">-rw-r--r-- 1 root   root   16195 Nov  8  2016 RUNNING.txt</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Mar 22 10:25 temp/</span><br><span class="line">drwxr-xr-x 7 root   root    4096 Nov  8  2016 webapps/</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Nov  8  2016 work/</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73$</span><br></pre></td></tr></table></figure></p><p>接下来编辑conf/server.xml文件，使用的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim conf/server.xml</span><br></pre></td></tr></table></figure></p><p>我们编辑它的目的就是修改utf的字符集，我们直接在当前模式（默认情况），输入/8080，然后回车就能找到这个connection（下面的截图是我们在widows下面的配置。）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\tomcat\apache-tomcat-8.5.34\conf\server.xml</span><br></pre></td></tr></table></figure></p><p>{我的路径是这里，你打开它，找到第69-71行代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-727121717de4b380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>添加这一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URIEncoding=&quot;UTF-8&quot;</span><br></pre></td></tr></table></figure></p><p>注意：截图中之所以有是因为我已经配置完了，之前是没有的。}</p><p>你添加这个以后进行保存退出即可。<br>接下来就是开始运行，进入到bin目录，具体的可以参看这些：<br>启动使用：在配置环境的bin目录下使用startup.bat命令；<br>关闭使用：在配置环境的bin目录下使用shutdown.bat命令。<br>这个的配置环境，我们在前面进行了配置，也就是这些：<br>就是<code>${CATALINA_HOME}/bin/startup.bat</code>或者是<code>${CATALINA_HOME}/bin/shutdown.bat</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73/bin$ sudo ./startup.sh</span><br><span class="line">Using CATALINA_BASE:   /home/ubuntu/java/developer/apache-tomcat-7.0.73</span><br><span class="line">Using CATALINA_HOME:   /home/ubuntu/java/developer/apache-tomcat-7.0.73</span><br><span class="line">Using CATALINA_TMPDIR: /home/ubuntu/java/developer/apache-tomcat-7.0.73/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using CLASSPATH:       /home/ubuntu/java/developer/apache-tomcat-7.0.73/bin/bootstrap.jar:/home/ubuntu/java/developer/apache-tomcat-7.0.73/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73/bin$</span><br></pre></td></tr></table></figure></p><p>出现这个Tomcat started.就说明配置成功，且启动成功了。此时，由于我们的防火墙还没有配置，你用公网IP的8080端口就能访问到我们的tomcat首页了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-acb99d9892a64b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="maven的安装"><a href="#maven的安装" class="headerlink" title="maven的安装"></a>maven的安装</h2><p>我们回到developer文件夹，在里面进行相关操作，在里面输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://learning.happymmall.com/maven/apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>待下载完毕以后，我们就开始解压它，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>查看一下，发现没问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer$ ll</span><br><span class="line">total 5052</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu    4096 Mar 22 10:56 ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu    4096 Mar 21 18:20 ../</span><br><span class="line">drwxr-xr-x 6 root   root      4096 Mar 22 10:56 apache-maven-3.0.5/</span><br><span class="line">-rw-r--r-- 1 root   root   5144659 Apr 17  2017 apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">drwxr-xr-x 9 root   root      4096 Mar 22 10:25 apache-tomcat-7.0.73/</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu    4096 Mar 22 10:28 setup/</span><br></pre></td></tr></table></figure></p><p>接下来，我们可以把<code>apache-maven-3.0.5-bin.tar.gz</code>移动到setup文件夹下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-maven-3.0.5-bin.tar.gz setup/</span><br></pre></td></tr></table></figure></p><p>发现setup里面是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ll</span><br><span class="line">total 341356</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu      4096 Mar 22 10:57  ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu      4096 Mar 22 10:57  ../</span><br><span class="line">-rw-r--r-- 1 root   root     5144659 Apr 17  2017  apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br></pre></td></tr></table></figure></p><p>接下来，我们直接输入<code>mvn -version</code>，看是不是成功出现版本号了，如果没有，请检查环境变量是否设置有误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-maven-3.0.5$ mvn -version</span><br><span class="line">Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 21:51:28+0800)</span><br><span class="line">Maven home: /home/ubuntu/java/developer/apache-maven-3.0.5</span><br><span class="line">Java version: 1.8.0_202, vendor: Oracle Corporation</span><br><span class="line">Java home: /usr/java/jdk1.8.0_202-amd64/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;4.15.0-29-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure></p><h2 id="vsftpd的安装"><a href="#vsftpd的安装" class="headerlink" title="vsftpd的安装"></a>vsftpd的安装</h2><p>同样我们退回到developer文件夹，我们使用下面的命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure></p><p>如果你使用centOs，则使用<code>sudo yum-y install vsftpd</code>。现在我们需要创建一个文件夹，退回到developer文件夹的上一层，因为我们创建的这个product文件和这个developer的是同级别的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java$ mkdir product</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java$ cd product</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ ll</span><br><span class="line">total 8</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu 4096 Mar 22 11:13 ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 11:13 ../</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$</span><br></pre></td></tr></table></figure></p><p>接着进入到product文件夹，在里面新建一个ftpfile，然后赋予其可以登录ftpserver，但是没有登录其他的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ mkdir ftpfile</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ sudo useradd ftpuser -d /product/ftpfile -s /sbin/nologin</span><br></pre></td></tr></table></figure></p><p>紧接着赋予其用户组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ sudo chown -R ftpuser.ftpuser ./ftpfile/</span><br></pre></td></tr></table></figure></p><p>查看一下，发现多了一个ftpfile文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ ll</span><br><span class="line">total 12</span><br><span class="line">drwxrwxr-x 3 ubuntu  ubuntu  4096 Mar 22 11:15 ./</span><br><span class="line">drwxrwxr-x 5 ubuntu  ubuntu  4096 Mar 22 11:13 ../</span><br><span class="line">drwxrwxr-x 2 ftpuser ftpuser 4096 Mar 22 11:15 ftpfile/</span><br></pre></td></tr></table></figure></p><p>接下来我们重置ftpuser的登录密码：（我的密码是admin123）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ sudo passwd ftpuser</span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$</span><br></pre></td></tr></table></figure></p><p>接下来进入到/etc/vsftpd文件，如果没有改文件夹，说明那些都是直接在/etc下面，不安全，我们在/etc新建一个vsftpd的文件夹，依次执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/ftpusers /etc/vsftpd</span><br><span class="line">sudo mv /etc/vsftpd.conf /etc/vsftpd</span><br></pre></td></tr></table></figure></p><p>紧接着，进入vsftpd文件夹，在里面执行<code>sudo vim chroot_list</code>，在里面添加<code>ftpuser</code>即可，然后保存退出即可。</p><p>下面修改其安全策略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/selinux/config</span><br></pre></td></tr></table></figure></p><p>确保里面的代码是这样的，没有就进行添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure></p><p>当然你可以使用下面的命令，这个结果和刚才修改config的效果是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setsebool -P ftp_home_dir 1</span><br></pre></td></tr></table></figure></p><p>接下来我们备份一下这个<code>vsftpd.conf</code>，并将线上的进行复制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mv vsftpd.conf vsftpd.conf.bak</span><br><span class="line"></span><br><span class="line">sudo wget http://learning.happymmall.com/vsftpdconfig/vsftpd.conf</span><br></pre></td></tr></table></figure></p><p>查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/etc/vsftpd$ ll</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x   2 root root 4096 Mar 22 12:01 ./</span><br><span class="line">drwxr-xr-x 100 root root 4096 Mar 22 11:34 ../</span><br><span class="line">-rw-r--r--   1 root root    8 Mar 22 11:38 chroot_list</span><br><span class="line">-rw-r--r--   1 root root  132 Mar 22 11:30 ftpusers</span><br><span class="line">-rw-r--r--   1 root root 4786 Apr 17  2017 vsftpd.conf</span><br><span class="line">-rw-r--r--   1 root root 5850 Mar 22 11:32 vsftpd.conf.bak</span><br></pre></td></tr></table></figure></p><p>这样vsftpd我们就安装好了。</p><h2 id="nginx的安装"><a href="#nginx的安装" class="headerlink" title="nginx的安装"></a>nginx的安装</h2><p>因为nginx需要编译，因此我们需要进入到setup这个文件夹，在里面执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://learning.happymmall.com/nginx/linux-nginx-1.10.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>nginx的安装需要依赖，因此我们先执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential libtool libpcre3  libpcre3-dev zlib1g-dev openssl</span><br></pre></td></tr></table></figure></p><p>查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ll</span><br><span class="line">total 342252</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu      4096 Mar 22 12:05  ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu      4096 Mar 22 10:57  ../</span><br><span class="line">-rw-r--r-- 1 root   root     5144659 Apr 17  2017  apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br><span class="line">-rw-r--r-- 1 root   root       85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br><span class="line">-rw-r--r-- 1 root   root      910812 Apr 17  2017  linux-nginx-1.10.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>接下来进行解压安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf linux-nginx-1.10.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ll</span><br><span class="line">total 342256</span><br><span class="line">drwxrwxr-x 3 ubuntu ubuntu      4096 Mar 22 12:16  ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu      4096 Mar 22 10:57  ../</span><br><span class="line">-rw-r--r-- 1 root   root     5144659 Apr 17  2017  apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br><span class="line">-rw-r--r-- 1 root   root       85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br><span class="line">-rw-r--r-- 1 root   root      910812 Apr 17  2017  linux-nginx-1.10.2.tar.gz</span><br><span class="line">drwxr-xr-x 8   1001   1001      4096 Oct 18  2016  nginx-1.10.2/</span><br></pre></td></tr></table></figure></p><p>进入解压好的nginx-1.10.2目录，查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$ ll</span><br><span class="line">total 700</span><br><span class="line">drwxr-xr-x 8   1001   1001   4096 Oct 18  2016 ./</span><br><span class="line">drwxrwxr-x 3 ubuntu ubuntu   4096 Mar 22 12:16 ../</span><br><span class="line">drwxr-xr-x 6   1001   1001   4096 Mar 22 12:16 auto/</span><br><span class="line">-rw-r--r-- 1   1001   1001 264254 Oct 18  2016 CHANGES</span><br><span class="line">-rw-r--r-- 1   1001   1001 402997 Oct 18  2016 CHANGES.ru</span><br><span class="line">drwxr-xr-x 2   1001   1001   4096 Mar 22 12:16 conf/</span><br><span class="line">-rwxr-xr-x 1   1001   1001   2481 Oct 18  2016 configure*</span><br><span class="line">drwxr-xr-x 4   1001   1001   4096 Mar 22 12:16 contrib/</span><br><span class="line">drwxr-xr-x 2   1001   1001   4096 Mar 22 12:16 html/</span><br><span class="line">-rw-r--r-- 1   1001   1001   1397 Oct 18  2016 LICENSE</span><br><span class="line">drwxr-xr-x 2   1001   1001   4096 Mar 22 12:16 man/</span><br><span class="line">-rw-r--r-- 1   1001   1001     49 Oct 18  2016 README</span><br><span class="line">drwxr-xr-x 9   1001   1001   4096 Mar 22 12:16 src/</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$</span><br></pre></td></tr></table></figure></p><p>接下来执行下面的命令：(默认编译为当前路径)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure</span><br></pre></td></tr></table></figure></p><p>紧接着执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure></p><p>如果运行出现下面的情况，请不要慌：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make[1]: *** [objs/src/core/ngx_murmurhash.o] Error 1</span><br><span class="line">make[1]: Leaving directory &apos;/home/ubuntu/java/developer/setup/nginx-1.10.2&apos;</span><br><span class="line">Makefile:8: recipe for target &apos;build&apos; failed</span><br><span class="line">make: *** [build] Error 2</span><br></pre></td></tr></table></figure></p><p>找到我们<code>nginx-1.10.2/objs/Makefile</code>文件，将里面的-Werror删除掉即可：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-888fadaed2128fe8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>（注意只是删除-Werror，改行其余信息不能动），之后重新运行刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure></p><p>如果最后出现下面的说明，就说明可以了，我们继续往后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make[1]: Leaving directory &apos;/home/ubuntu/java/developer/setup/nginx-1.10.2&apos;</span><br></pre></td></tr></table></figure></p><p>继续执行安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>后面的防火墙配置，我们就专门会说的。接下来配置其详细信息。<br>查看一下它所在的目录：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$ whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/local/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure></p><p>我们进入到/usr/local/nginx下面，然后进入到conf里面，接着编辑主文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim nginx.conf</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-816e7d0cabc6a3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们往下拉，我们https server的位置添加下面一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include vhost/*.conf;</span><br></pre></td></tr></table></figure></p><p>（截图是我已经配置好的，目的是让大家对此有一个更清醒的认识。）</p><p>紧接着在nginx.conf文件的同级目录下面新建vhost文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir vhost</span><br></pre></td></tr></table></figure></p><p>进入到该文件夹，添加我们反向代理的文件。</p><p>当然你也可以参考这篇文章进行安装：<a href="https://www.cnblogs.com/EasonJim/p/7806879.html" target="_blank" rel="noopener">ubuntu安装nginx</a></p><h2 id="mysql的安装"><a href="#mysql的安装" class="headerlink" title="mysql的安装"></a>mysql的安装</h2><p>首先查看是否安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -qa| grep mysql-server</span><br></pre></td></tr></table></figure></p><p>没有我们就开始安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p><p>这个我们就直接安装在java这个文件夹里面了。<br>然后修改MySQL的字符集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>在mysqld部分添加下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p><p>然后是mysql的启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sysv-rc-conf mysqld on</span><br><span class="line">sudo sysv-rc-conf --list mysqld</span><br></pre></td></tr></table></figure></p><p>注意一下，我们要的是2-5是开的，0和6是关闭的即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/etc/apt$ sudo sysv-rc-conf --list mysqld</span><br><span class="line">mysqld       2:on       3:on    4:on    5:on</span><br><span class="line">ubuntu@VM-0-4-ubuntu:/etc/apt$</span><br></pre></td></tr></table></figure></p><p>关于MySQL的防火墙的配置，我们在后面也会说明的。<br>接下来我们开始启动mysql，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>如果提示没有sysv-rc-conf，请参看这篇文章：<a href="https://blog.csdn.net/sw1009374593/article/details/84929494" target="_blank" rel="noopener">ubuntu 18 当使用命令sudo apt-get install sysv-rc-conf安装不上时，提示“ E: 无法定位软件包问题</a>.<br>如果重启出现<code>Can &#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock &#39;(2) &quot;;</code>的情况，请注意，我们应该查看这篇文章：<a href="https://blog.csdn.net/hjf161105/article/details/78850658" target="_blank" rel="noopener">解决办法</a>。或者这篇文章：<a href="https://blog.csdn.net/u012150360/article/details/84546192" target="_blank" rel="noopener">办法2</a><br>开始创建数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database `secondhandmarket` default character set utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></p><p>插入新用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into mysql.user(host,user,authentication_string)values(&quot;127.0.0.1&quot;,&quot;envy&quot;,authentication_string(&quot;envy&quot;));</span><br></pre></td></tr></table></figure></p><p>创建数据表，我们首先查看sql的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/java/squirrel/secondhandmarket.sql</span><br></pre></td></tr></table></figure></p><p>然后进入mysql，我们首先使用<code>use secondhandmarket;</code>，接着执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /home/ubuntu/java/squirrel/secondhandmarket.sql</span><br></pre></td></tr></table></figure></p><p>接着查看一下表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">select * from admin\G;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jdk的安装&quot;&gt;&lt;a href=&quot;#jdk的安装&quot; class=&quot;headerlink&quot; title=&quot;jdk的安装&quot;&gt;&lt;/a&gt;jdk的安装&lt;/h2&gt;&lt;p&gt;1、使用&lt;code&gt;rpm -qa|grep jdk&lt;/code&gt;命令查看是否存在jdk。&lt;/p&gt;
&lt;p&gt;2
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十八）：前台订单获取以及后台管理员订单管理功能开发</title>
    <link href="http://blog.licheetools.top/2018/09/05/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E8%AE%A2%E5%8D%95%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%8A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/09/05/SSM搭建二手市场交易平台（二十八）：前台订单获取以及后台管理员订单管理功能开发/</id>
    <published>2018-09-05T14:21:06.000Z</published>
    <updated>2019-04-15T14:24:13.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成前台获取订单详情，用户个人中心查看订单以及后台管理员订单管理等功能的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="前台获取订单详情"><a href="#前台获取订单详情" class="headerlink" title="前台获取订单详情"></a>前台获取订单详情</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     * 前台获取订单详情</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;detail.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse detail(HttpSession session,Long orderNo)&#123;</span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line">        //实现我们前台获取订单详情的逻辑</span><br><span class="line">        return iOrderService.getOrderDetail(user.getId(),orderNo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;OrderVo&gt; getOrderDetail(Integer userId, Long orderNo);  //前台获取订单详情</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     * 前台获取订单详情</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;OrderVo&gt; getOrderDetail(Integer userId,Long orderNo)&#123;</span><br><span class="line">        Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">        if(order !=null)&#123;</span><br><span class="line">            List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">            OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">            return ServerResponse.createBySuccess(orderVo);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;没有找到该订单&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们前台获取订单详情功能开发就完成了，接下来我们来开发用户个人中心查看订单这个功能。</p><h2 id="用户个人中心查看订单"><a href="#用户个人中心查看订单" class="headerlink" title="用户个人中心查看订单"></a>用户个人中心查看订单</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 用户个人中心查看订单（需要分页）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse list(HttpSession session,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                           @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们用户个人中心查看订单的逻辑</span><br><span class="line">    return iOrderService.getOrderList(user.getId(),pageNum,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; getOrderList(Integer userId, int pageNum, int pageSize);   //前台用户个人中心查看订单（需要分页）</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * 前台用户个人中心查看订单（需要分页）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; getOrderList(Integer userId,int pageNum,int pageSize)&#123;</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">    List&lt;Order&gt; orderList =orderMapper.selectOrderByUserId(userId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;OrderVo&gt; orderVoList =assembleOrderVoList(orderList,userId);</span><br><span class="line">    PageInfo pageResult =new PageInfo(orderList);</span><br><span class="line">    pageResult.setList(orderVoList);</span><br><span class="line">    return ServerResponse.createBySuccess(pageResult);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">private List&lt;OrderVo&gt; assembleOrderVoList(List&lt;Order&gt; orderList,Integer userId)&#123;</span><br><span class="line">    //将List&lt;Order&gt; 对象转换为List&lt;OrderVo&gt;对象</span><br><span class="line">    List&lt;OrderVo&gt; orderVoList =Lists.newArrayList();</span><br><span class="line">    for(Order order:orderList)&#123;</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =Lists.newArrayList();</span><br><span class="line">        //判断一下是不是管理员，管理员查询时不需要传入参数userId</span><br><span class="line">        if(userId ==null)&#123;</span><br><span class="line">            //todo 管理员查询时不需要传入参数userId</span><br><span class="line">            orderItemList =orderItemMapper.getOrderItemByOrderNo(order.getOrderNo());</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,order.getOrderNo());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">        orderVoList.add(orderVo);</span><br><span class="line">    &#125;</span><br><span class="line">    return orderVoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下，这里我们管理员查询订单的时候是可以不用userId的，因此需要自己去配置一个查询语句：<code>orderItemList =orderItemMapper.getOrderItemByOrderNo(order.getOrderNo());</code>我们打开OrderItemMapper.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;OrderItem&gt; getOrderItemByOrderNo(@Param(value = &quot;orderNo&quot;)Long orderNo);</span><br></pre></td></tr></table></figure></p><p>然后打开OrderItemMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getOrderItemByOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;long&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order_item</span><br><span class="line">  where order_no =#&#123;orderNo&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这样我们前台用户个人中心查看订单的功能就实现了，那么也就意味着我们前台关于订单的功能开发也就完成了。接下来我们需要去完成后台管理员关于订单模块的功能。</p><h2 id="后台管理员查询订单"><a href="#后台管理员查询订单" class="headerlink" title="后台管理员查询订单"></a>后台管理员查询订单</h2><p>首先我们打开controller这个包，在backend这个包里面新建OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.github.pagehelper.PageInfo;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IOrderService;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/order&quot;)</span><br><span class="line">public class OrderManageController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IOrderService iOrderService;</span><br><span class="line"></span><br><span class="line">    /****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员查看订单（需要分页）</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;list.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; orderList(HttpSession session,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                                              @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加查看订单（需要分页）的逻辑</span><br><span class="line">            return iOrderService.manageList(pageNum,pageSize);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; manageList(int pageNum,int pageSize);    //后台管理员查看订单（需要分页）</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员查询订单(不需要userId)</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; manageList(int pageNum,int pageSize)&#123;</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">    List&lt;Order&gt; orderList =orderMapper.selectAllOrder();</span><br><span class="line"></span><br><span class="line">    List&lt;OrderVo&gt; orderVoList =this.assembleOrderVoList(orderList,null);</span><br><span class="line">    PageInfo pageResult =new PageInfo(orderList);</span><br><span class="line">    pageResult.setList(orderVoList);</span><br><span class="line">    return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样后台管理员查询订单的功能就实现了，接下来我们就去实现后台管理员获取订单详情的功能了。</p><h2 id="后台管理员获取订单详情"><a href="#后台管理员获取订单详情" class="headerlink" title="后台管理员获取订单详情"></a>后台管理员获取订单详情</h2><p>首先我们打开OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/****</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员获取订单详情</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;detail.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;OrderVo&gt; orderDetail(HttpSession session, Long orderNo)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就增加获取订单详情的逻辑</span><br><span class="line">        return iOrderService.manageDetail(orderNo);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;OrderVo&gt; manageDetail(Long orderNo);  //后台管理员获取订单详情</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员获取订单详情</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;OrderVo&gt; manageDetail(Long orderNo)&#123;</span><br><span class="line">    Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line">    if(order !=null)&#123;</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByOrderNo(orderNo);</span><br><span class="line">        OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">        return ServerResponse.createBySuccess(orderVo);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样后台管理员获取订单详情的功能就实现了，接下来我们就去实现后台管理员搜索订单的功能。</p><h2 id="后台管理员搜索订单"><a href="#后台管理员搜索订单" class="headerlink" title="后台管理员搜索订单"></a>后台管理员搜索订单</h2><p>首先我们打开OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员搜索订单(有分页)</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;search.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; orderSearch(HttpSession session, Long orderNo,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                                               @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加搜索订单的逻辑</span><br><span class="line">            return iOrderService.manageSearch(orderNo,pageNum,pageSize);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; manageSearch(Long orderNo,int pageNum,int pageSize);  //后台管理员搜索订单(有分页)</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员搜索订单(有分页)</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; manageSearch(Long orderNo,int pageNum,int pageSize)&#123;</span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">        Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line"></span><br><span class="line">        if(order !=null)&#123;</span><br><span class="line">            List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByOrderNo(orderNo);</span><br><span class="line">            OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line"></span><br><span class="line">            PageInfo pageResult =new PageInfo(Lists.newArrayList(order));</span><br><span class="line">            pageResult.setList(Lists.newArrayList(orderVo));</span><br><span class="line">            return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样后台管理员搜索订单的功能就实现了，接下来我们就去实现后台管理员订单发货的功能。</p><h2 id="后台管理员订单发货"><a href="#后台管理员订单发货" class="headerlink" title="后台管理员订单发货"></a>后台管理员订单发货</h2><p>首先我们打开OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/****</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员订单发货</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;send_goods.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;String&gt; OrderSendGoods(HttpSession session, Long orderNo)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就增加获取订单发货的逻辑</span><br><span class="line">        return iOrderService.manageSendGoods(orderNo);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; manageSendGoods(Long orderNo);   //后台管理员订单发货</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/****</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员订单发货</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;String&gt; manageSendGoods(Long orderNo)&#123;</span><br><span class="line">    Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line"></span><br><span class="line">    //判断订单状态是否是已支付，然后进行发货</span><br><span class="line">    if(order !=null)&#123;</span><br><span class="line">        if(order.getStatus()==Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">            order.setStatus(Const.OrderStatusEnum.SHIPPED.getCode());  //修改状态为发货</span><br><span class="line">            order.setSendTime(new Date());  //修改发货时间为现在</span><br><span class="line">            orderMapper.updateByPrimaryKeySelective(order);  //更新该订单信息</span><br><span class="line">            return ServerResponse.createBySuccessMassage(&quot;发货成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样本篇我们关于前台获取订单详情，用户个人中心查看订单以及后台管理员订单管理等功能的开发介绍就到此为止了，接下来是进行各个相关接口的测试。</p><p> 由于测试比较简单，这里直接附上几张测试截图即可，不作过多说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2c3d8f93afb2823a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e2fdca568796a672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那么到此为止，我们所有的功能都开发完毕，后面就是服务器的配置与部署了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来完成前台获取订单详情，用户个人中心查看订单以及后台管理员订单管理等功能的开发，里面涉及到的知识点挺多的，需要好好理
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十七）：取消订单和获取商品信息功能开发</title>
    <link href="http://blog.licheetools.top/2018/09/05/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E5%92%8C%E8%8E%B7%E5%8F%96%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/09/05/SSM搭建二手市场交易平台（二十七）：取消订单和获取商品信息功能开发/</id>
    <published>2018-09-05T08:21:06.000Z</published>
    <updated>2019-04-15T14:22:47.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成前台取消订单和获取购物车中商品信息等功能的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="前台取消订单功能开发"><a href="#前台取消订单功能开发" class="headerlink" title="前台取消订单功能开发"></a>前台取消订单功能开发</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台取消订单（删除订单）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;cancel.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse cancel(HttpSession session,Long orderNo)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台取消订单（删除订单）的逻辑</span><br><span class="line">    return iOrderService.cancel(user.getId(),orderNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; cancel(Integer userId,Long orderNo);   ////前台取消（删除）订单</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 前台取消订单（删除订单）</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;String&gt; cancel(Integer userId,Long orderNo)&#123;</span><br><span class="line">    Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">    if(order ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该用户此订单不存在&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(order.getStatus() ==Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;此订单已付款，无法取消&quot;);//已经付款的订单我们会通过支付宝退款的方式进行解决</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Order updateOrder =new Order();</span><br><span class="line">    updateOrder.setId(order.getId());</span><br><span class="line">    updateOrder.setStatus(Const.OrderStatusEnum.CANCELED.getCode());</span><br><span class="line"></span><br><span class="line">    int rowCount =orderMapper.updateByPrimaryKeySelective(updateOrder);</span><br><span class="line">    if(rowCount&gt;0)&#123;</span><br><span class="line">        return ServerResponse.createBySuccess();</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们前台取消订单功能开发就完成了，接下来我们来开发前台用户查看购物车商品明细这个功能。</p><h2 id="前台用户查看购物车商品明细"><a href="#前台用户查看购物车商品明细" class="headerlink" title="前台用户查看购物车商品明细"></a>前台用户查看购物车商品明细</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台用户查看购物车选中商品明细</span><br><span class="line"> * 这里是购物车中已经选中的商品（假设用户购买了10件，已经付款了5件，还有5件是需要留在购物车里面的，然后通过这个接口去进行商品信息的查看）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;get_order_cart_product.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse getOrderCartProduct(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台用户查看购物车选中商品明细的逻辑</span><br><span class="line">    return iOrderService.getOrderCartProduct(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse getOrderCartProduct(Integer userId);    //前台用户查看购物车选中商品明细</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">   * 前台用户查看购物车选中商品明细</span><br><span class="line">   * 这里是购物车中已经选中的商品（假设用户购买了10件，已经付款了5件，还有5件是需要留在购物车里面的，然后通过这个接口去进行商品信息的查看）</span><br><span class="line">   * @author lenovo</span><br><span class="line">   * */</span><br><span class="line">  public ServerResponse getOrderCartProduct(Integer userId)&#123;</span><br><span class="line">      //这个是我们需要返回的对象</span><br><span class="line">      OrderProductVo orderProductVo = new OrderProductVo();</span><br><span class="line">      //根据用户id从购物车中获取已经选中的数据（返回结果是Cart类型的list）</span><br><span class="line">      List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId);</span><br><span class="line"></span><br><span class="line">      //通过前面得到的cartList来获得订单明细表（其实就是子订单）</span><br><span class="line">      ServerResponse serverResponse =this.getCartOrderItem(userId,cartList);</span><br><span class="line"></span><br><span class="line">      if(!serverResponse.isSuccess())&#123;</span><br><span class="line">          return serverResponse;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //这里得到的是所有的子订单</span><br><span class="line">      List&lt;OrderItem&gt; orderItemList =(List&lt;OrderItem&gt;)serverResponse.getData();</span><br><span class="line"></span><br><span class="line">      //先创建一个用于存放所有子订单中商品的集合</span><br><span class="line">      List&lt;OrderItemVo&gt; orderItemVoList =Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">      //计算目前已经选中商品的总价</span><br><span class="line">      //将各个子订单进行求和，获取订单总价</span><br><span class="line">      BigDecimal payment = new BigDecimal(&quot;0&quot;);</span><br><span class="line">      for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">          payment =BigDecimalUtil.add(payment.doubleValue(),orderItem.getTotalPrice().doubleValue());</span><br><span class="line">          orderItemVoList.add(assembleOrderItemVo(orderItem));</span><br><span class="line">      &#125;</span><br><span class="line">      orderProductVo.setProductTotalPrice(payment);</span><br><span class="line">      orderProductVo.setOrderItemVoList(orderItemVoList);</span><br><span class="line">      orderProductVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));</span><br><span class="line"></span><br><span class="line">      return ServerResponse.createBySuccess(orderProductVo);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>注意，在这里我们需要新建一个OrderProductVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class OrderProductVo &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;OrderItemVo&gt; orderItemVoList;</span><br><span class="line">    private BigDecimal productTotalPrice;</span><br><span class="line">    private String imageHost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;OrderItemVo&gt; getOrderItemVoList() &#123;</span><br><span class="line">        return orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderItemVoList(List&lt;OrderItemVo&gt; orderItemVoList) &#123;</span><br><span class="line">        this.orderItemVoList = orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getProductTotalPrice() &#123;</span><br><span class="line">        return productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductTotalPrice(BigDecimal productTotalPrice) &#123;</span><br><span class="line">        this.productTotalPrice = productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来完成前台取消订单和获取购物车中商品信息等功能的开发，里面涉及到的知识点挺多的，需要好好理解。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十六）：前台创建订单功能开发</title>
    <link href="http://blog.licheetools.top/2018/09/04/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%88%9B%E5%BB%BA%E8%AE%A2%E5%8D%95%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/09/04/SSM搭建二手市场交易平台（二十六）：前台创建订单功能开发/</id>
    <published>2018-09-04T08:21:06.000Z</published>
    <updated>2019-04-15T14:21:58.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成订单模模块功能的开发，包括前台和后台开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>本模块具体包括前台和后台开发：前台功能包括：创建订单；商品信息；订单列表；订单详情和取消订单这5个部分，而后台功能则包括：订单列表；订单搜索；订单详情和订单发货这4个部分。</p><h2 id="学会技能"><a href="#学会技能" class="headerlink" title="学会技能"></a>学会技能</h2><p>在本模块中，你将会学到避免业务逻辑中横向越权和纵向越权等安全漏洞；设计实用、安全、扩展性强大的常量、枚举类；订单号生成规则、订单严谨性判断；PJO 和 VO 之间的实际操练以及Mybatis的批量插入等知识。</p><h2 id="数据表的设计"><a href="#数据表的设计" class="headerlink" title="数据表的设计"></a>数据表的设计</h2><p>这里我们会使用到两个数据表，因为订单需要和订单信息绑定在一块：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5005acc7eee29980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="store_order这个数据表（总订单也就是用于最后付款的订单）"></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e5977cd52dad8c63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="store_order_item这个数据表（子订单）"></p><h2 id="前台创建订单"><a href="#前台创建订单" class="headerlink" title="前台创建订单"></a>前台创建订单</h2><p>首先我们打开controller这个包下面的portal包，打开之前的那个OrderController，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台创建订单</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;create.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse create(HttpSession session,Integer shippingId)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台创建订单的逻辑</span><br><span class="line">    return iOrderService.createOrder(user.getId(),shippingId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse createOrder(Integer userId,Integer shippingId);   //前台创建订单</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的Impl包，我们找到OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     * 前台订单功能开发(代码是从下往上读)</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public ServerResponse createOrder(Integer userId,Integer shippingId)&#123;</span><br><span class="line">        //根据用户id从购物车中获取已经选中的数据（返回结果是Cart类型的list）</span><br><span class="line">        List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId);</span><br><span class="line"></span><br><span class="line">        //计算这个订单的总价</span><br><span class="line">        //1、判断返回值是否成功</span><br><span class="line">        ServerResponse serverResponse =this.getCartOrderItem(userId,cartList);</span><br><span class="line">        if(!serverResponse.isSuccess())&#123;</span><br><span class="line">            return serverResponse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //2、开始计算总价</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =(List&lt;OrderItem&gt;)serverResponse.getData();  //这里得到的是所有的子订单</span><br><span class="line"></span><br><span class="line">        BigDecimal payment =this.getOrderTotalPrice(orderItemList);  //这里得到的是所有的子订单的总价，也就是订单的总价</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //生成订单(将前面的store_order_item表的信息进行汇总，生成store_order表)</span><br><span class="line">        Order order = this.assembleOrder(userId,shippingId,payment);</span><br><span class="line"></span><br><span class="line">        //判断订单是否为空</span><br><span class="line">        if(order==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;生成订单错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断子订单是否为空</span><br><span class="line">        if(CollectionUtils.isEmpty(orderItemList))&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;购物车为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //在前面我们getCartOrderItem这个函数里面，我们就没有对order_no进行配置，现在需要配置了</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            orderItem.setOrderNo(order.getOrderNo());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //mybatis的批量插入(将所有的子订单进行插入,从而生成订单)</span><br><span class="line">        orderItemMapper.batchInsert(orderItemList);</span><br><span class="line"></span><br><span class="line">        //订单生成成功，我们需要减少商品的库存</span><br><span class="line">        this.produceProductStock(orderItemList);</span><br><span class="line"></span><br><span class="line">        //订单生成成功，接着我们需要清空购物车</span><br><span class="line">        this.cleanCart(cartList);</span><br><span class="line"></span><br><span class="line">        //然后需要将数据返回给前端</span><br><span class="line">        OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">        return ServerResponse.createBySuccess(orderVo);</span><br><span class="line">    &#125;</span><br><span class="line">    //组装新的付款订单，并返回给前端(记得新建3个Vo对象便于后面进行付款订单的组装，这个付款的订单包含订单信息，子订单信息，收货地址信息)</span><br><span class="line">    private OrderVo assembleOrderVo(Order order,List&lt;OrderItem&gt; orderItemList)&#123;</span><br><span class="line">        //下面的信息是订单数据表里面有的信息</span><br><span class="line">        OrderVo orderVo =new OrderVo();</span><br><span class="line">        orderVo.setOrderNo(order.getOrderNo());</span><br><span class="line">        orderVo.setPayment(order.getPayment());</span><br><span class="line">        orderVo.setPaymentType(order.getPaymentType());</span><br><span class="line">        orderVo.setPaymentTypeDesc(Const.PaymentTypeEnum.codeOf(order.getPaymentType()).getValue());</span><br><span class="line"></span><br><span class="line">        orderVo.setPostage(order.getPostage());</span><br><span class="line">        orderVo.setStatus(order.getStatus());</span><br><span class="line">        orderVo.setStatusDesc(Const.OrderStatusEnum.codeOf(order.getStatus()).getValue());</span><br><span class="line"></span><br><span class="line">        orderVo.setShippingId(order.getShippingId());</span><br><span class="line"></span><br><span class="line">        //下面的信息是订单数据表里没有的信息，我们需要从之前的收货地址表中获取(记住此订单不是数据库中的store_order这个表)</span><br><span class="line">        Shipping shipping =shippingMapper.selectByPrimaryKey(order.getShippingId());</span><br><span class="line">        if(shipping !=null)&#123;</span><br><span class="line">            orderVo.setReceiverName(shipping.getReceiverName());  //这里就是说如果新的订单存在，显示它的姓名及信息</span><br><span class="line">            orderVo.setShippingVo(assembleShippingVo(shipping));</span><br><span class="line">        &#125;</span><br><span class="line">        //以下是各种时间的转换</span><br><span class="line">        orderVo.setPaymentTime(DateTimeUtil.dateToStr(order.getPaymentTime()));</span><br><span class="line">        orderVo.setEndTime(DateTimeUtil.dateToStr(order.getEndTime()));</span><br><span class="line">        orderVo.setCreateTime(DateTimeUtil.dateToStr(order.getCreateTime()));</span><br><span class="line">        orderVo.setCloseTime(DateTimeUtil.dateToStr(order.getCloseTime()));</span><br><span class="line"></span><br><span class="line">        orderVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));</span><br><span class="line"></span><br><span class="line">        //下面的信息是订单数据表里没有的信息，我们需要从之前的子订单表中获取(记住此订单不是数据库中的store_order这个表)</span><br><span class="line">        List&lt;OrderItemVo&gt; orderItemVoList =Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            OrderItemVo orderItemVo =assembleOrderItemVo(orderItem);</span><br><span class="line">            orderItemVoList.add(orderItemVo);</span><br><span class="line">        &#125;</span><br><span class="line">        orderVo.setOrderItemVoList(orderItemVoList);</span><br><span class="line">        return orderVo;</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">    private OrderItemVo assembleOrderItemVo(OrderItem orderItem)&#123;</span><br><span class="line">        OrderItemVo orderItemVo =new OrderItemVo();</span><br><span class="line">        orderItemVo.setOrderNo(orderItem.getOrderNo());</span><br><span class="line">        orderItemVo.setProductId(orderItem.getProductId());</span><br><span class="line">        orderItemVo.setProductName(orderItem.getProductName());</span><br><span class="line">        orderItemVo.setProductImage(orderItem.getProductImage());</span><br><span class="line">        orderItemVo .setCurrentUnitPrice(orderItem.getCurrentUnitPrice());</span><br><span class="line">        orderItemVo.setTotalPrice(orderItem.getTotalPrice());</span><br><span class="line">        orderItemVo.setQuantity(orderItem.getQuantity());</span><br><span class="line"></span><br><span class="line">        orderItemVo.setCreateTime(DateTimeUtil.dateToStr(orderItem.getCreateTime()));</span><br><span class="line"></span><br><span class="line">        return orderItemVo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //通过组装成新的收货地址对象，以便后面的生成新的支付订单使用</span><br><span class="line">    private ShippingVo assembleShippingVo(Shipping shipping)&#123;</span><br><span class="line">       ShippingVo shippingVo =new ShippingVo();</span><br><span class="line">       shippingVo.setReceiverAddress(shipping.getReceiverAddress());</span><br><span class="line">       shippingVo.setReceiverCity(shipping.getReceiverCity());</span><br><span class="line">       shippingVo.setReceiverDistrict(shipping.getReceiverDistrict());</span><br><span class="line">       shippingVo.setReceiverMobile(shipping.getReceiverMobile());</span><br><span class="line">       shippingVo.setReceiverPhone(shipping.getReceiverPhone());</span><br><span class="line">       shippingVo.setReceiverName(shipping.getReceiverName());</span><br><span class="line">       shippingVo.setReceiverProvince(shipping.getReceiverProvince());</span><br><span class="line">       shippingVo.setReceiverZip(shipping.getReceiverZip());</span><br><span class="line">       return shippingVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //订单生成成功，接着我们需要清空购物车</span><br><span class="line">    private void cleanCart( List&lt;Cart&gt; cartList)&#123;</span><br><span class="line">        for(Cart cart:cartList)&#123;</span><br><span class="line">            cartMapper.deleteByPrimaryKey(cart.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //订单生成成功，我们需要减少商品的库存</span><br><span class="line">    private void produceProductStock(List&lt;OrderItem&gt; orderItemList)&#123;</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            Product product =productMapper.selectByPrimaryKey(orderItem.getProductId());</span><br><span class="line">            product.setStock(product.getStock()-orderItem.getQuantity());</span><br><span class="line">            productMapper.updateByPrimaryKeySelective(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //组装订单表（将前面的store_order_item表的信息进行汇总，生成store_order表）</span><br><span class="line">    private Order assembleOrder(Integer userId,Integer shippingId,BigDecimal payment)&#123;</span><br><span class="line">        //这里面有三个参数：userId用户id, shippingId收货地址id, payment订单总价</span><br><span class="line"></span><br><span class="line">        //这个是我们组装成的新的订单</span><br><span class="line">       Order order =new Order();</span><br><span class="line"></span><br><span class="line">        long order_no =this.generateOrderNo();</span><br><span class="line"></span><br><span class="line">        //这里面的字段请依据store_order进行设置</span><br><span class="line">        order.setOrderNo(order_no);</span><br><span class="line">        order.setStatus(Const.OrderStatusEnum.PAID.getCode());</span><br><span class="line">        order.setPostage(0);</span><br><span class="line">        order.setPaymentType(Const.PaymentTypeEnum.ONLINE_PAY.getCode());</span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setShippingId(shippingId);</span><br><span class="line">        order.setPayment(payment);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         //发货时间：send_time</span><br><span class="line">         //交易完成时间：end_time</span><br><span class="line">         //交易关闭时间：close_time</span><br><span class="line">         // 上面的时间目前先不进行，后面会进行配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //将新的订单插入到数据库中</span><br><span class="line">       int rowCount =  orderMapper.insert(order);</span><br><span class="line">       if(rowCount&gt;0)&#123;</span><br><span class="line">           return order;</span><br><span class="line">       &#125;</span><br><span class="line">       return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 订单号order_no的生成</span><br><span class="line">    //订单号的生成是非常重要的，这个设计的好坏关系到以后做分布式，高并发的情况非常有效，这里采用时间戳取余的方式</span><br><span class="line">    private long generateOrderNo()&#123;</span><br><span class="line">        long currentTime =System.currentTimeMillis();</span><br><span class="line">//        return currentTime+currentTime%10;  这种方法是可以的，但是在高并发的时候，可能是同时进行的，因此时间有可能一样,那样我们对orderNum进行唯一索引的时候就会失败</span><br><span class="line">        return currentTime+new Random().nextInt(100);  //加上一个100以内的随机数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //用于计算订单总价</span><br><span class="line">    private BigDecimal getOrderTotalPrice(List&lt;OrderItem&gt; orderItemList)&#123;</span><br><span class="line">        //将各个子订单进行求和，获取订单总价</span><br><span class="line">        BigDecimal payment =new BigDecimal(&quot;0&quot;);</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">           payment= BigDecimalUtil.add(payment.doubleValue(),orderItem.getTotalPrice().doubleValue());  //这里默认就是0+一个订单</span><br><span class="line">        &#125;</span><br><span class="line">        return payment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //用于返回新的子订单明细（其实就是返回一个store_order_item子订单对象）</span><br><span class="line">    private ServerResponse getCartOrderItem(Integer userId,List&lt;Cart&gt; cartList)&#123;</span><br><span class="line"></span><br><span class="line">        //这个是我们组装成的新的子订单</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        if(CollectionUtils.isEmpty(cartList))&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;购物车为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //校验购物车的数据，包括产品的状态和数量</span><br><span class="line">        for(Cart cartItem:cartList)&#123;</span><br><span class="line">            //校验产品的状态是否是在售状态</span><br><span class="line"></span><br><span class="line">            Product product =productMapper.selectByPrimaryKey(cartItem.getProductId());</span><br><span class="line">            if(Const.ProductStatusEnum.ON_SALE.getCode() != product.getStatus() )&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;产品&quot;+product.getName()+&quot;不是在线售卖状态&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //校验产品的库存</span><br><span class="line">            if(cartItem.getQuantity()&gt;product.getStock())&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;产品&quot;+product.getName()+&quot;库存不足&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            //开始组装成我们的订单对象(除了order_no这个字段需要我们后面设置以外，其余需要我们在这里进行组装也就是order_item表中的信息)</span><br><span class="line">            OrderItem orderItem =new OrderItem();</span><br><span class="line"></span><br><span class="line">            //order_no这个字段需要我们后面设置</span><br><span class="line"></span><br><span class="line">            orderItem.setUserId(userId);</span><br><span class="line">            orderItem.setProductId(product.getId());</span><br><span class="line">            orderItem.setProductName(product.getName());</span><br><span class="line">            orderItem.setProductImage(product.getMainImage());</span><br><span class="line">            orderItem.setCurrentUnitPrice(product.getPrice());</span><br><span class="line">            orderItem.setQuantity(cartItem.getQuantity());</span><br><span class="line">            orderItem.setTotalPrice(BigDecimalUtil.mut(product.getPrice().doubleValue(),cartItem.getQuantity()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            orderItemList.add(orderItem);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createBySuccess(orderItemList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码很多，但是都是为了后面的调用方便而进行了封装。下面分别解释上面代码的含义（记住上面代码你必须是从下往上读，因为我们是随着开发的需要而逐渐增加代码的）<br><strong>1、</strong>首先我们是要创建订单，因此必须根据传入的用户id来去购物车(store_cart)这个数据表中查找相应的购物车对象，其实就是很多种商品，你知道的一个用户可能存在多个购物车商品，因此返回的是一个购物车list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId);</span><br></pre></td></tr></table></figure></p><p>我们需要打开CartMapper.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Cart&gt; selectCheckedCartByUserId(Integer userId);</span><br></pre></td></tr></table></figure></p><p>然后打开CartMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCheckedCartByUserId&quot; parameterType=&quot;int&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">   select</span><br><span class="line">   &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">   from store_cart</span><br><span class="line">   where user_id =#&#123;userId&#125;</span><br><span class="line">   and checked =1</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>然后就计算刚才那些购物车商品的总价，而这个过程比较复杂，需要创建一个getCartOrderItem函数，用于返回新的子订单明细（其实就是返回一个store_order_item子订单对象），当然在这个函数里面，你需要校验购物车的数据，包括产品的状态和库存数量。<br><strong>3、</strong>通过第二步，我们得到了所有的子订单，现在去定义一个getOrderTotalPrice函数，去计算所有的子订单的总价，也就是订单的总价，具体的代码参看上面。<br><strong>4、</strong>接着我们需要生成订单号，订单号的生成是非常重要的，这个设计的好坏关系到以后做分布式，高并发的情况非常有效，这里采用时间戳+随机函数的方式：新建一个用于生成订单号的generateOrderNo函数，我们的核心就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTime+new Random().nextInt(100);</span><br></pre></td></tr></table></figure></p><p><strong>5、</strong>将第3步中的所有子订单进行合并，生成新的支付订单，你知道的支付订单里面包含用户信息，商品信息以及收货地址。首先我们需要判断判断订单是否为空以及子订单是否为空:我们新建一个assembleOrder函数，用于组装订单表，这里面有三个参数：userId用户id, shippingId收货地址id, payment订单总价。<br>在<code>order.setStatus(Const.OrderStatusEnum.PAID.getCode());</code>和<code>order.setPaymentType(Const.PaymentTypeEnum.ONLINE_PAY.getCode());</code>的时候，我们需要打开Const.java文件，在OrderStatusEnum这个枚举类添加codeOf方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static OrderStatusEnum codeOf(int code)&#123;</span><br><span class="line">      for(OrderStatusEnum orderStatusEnum:values())&#123;</span><br><span class="line">          if(orderStatusEnum.getCode() ==code)&#123;</span><br><span class="line">              return orderStatusEnum;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      throw new RuntimeException(&quot;没有找到对应的枚举&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>以及新建一个枚举类PaymentTypeEnum：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//支付类型（目前暂支持线上支付，后面会进行扩展）</span><br><span class="line">    public enum PaymentTypeEnum&#123;</span><br><span class="line">        ONLINE_PAY(1,&quot;在线支付&quot;)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        private String value;</span><br><span class="line">        private int code;</span><br><span class="line"></span><br><span class="line">        PaymentTypeEnum(int code,String value)&#123;</span><br><span class="line">            this.code =code;</span><br><span class="line">            this.value=value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setValue(String value) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getCode() &#123;</span><br><span class="line">            return code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setCode(int code) &#123;</span><br><span class="line">            this.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public static PaymentTypeEnum codeOf(int code)&#123;</span><br><span class="line">            for(PaymentTypeEnum paymentTypeEnum:values())&#123;</span><br><span class="line">                if(paymentTypeEnum.getCode() ==code)&#123;</span><br><span class="line">                    return paymentTypeEnum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            throw new RuntimeException(&quot;没有找到对应的枚举&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里在注意一下时间字段，我们这里没有进行配置，我们后面会进行配置。</p><p><strong>6、</strong>然后就是将新的订单插入到数据库中。mybatis的批量插入(将所有的子订单进行插入,从而生成订单)，我们需要打开OrderItemMapper.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void batchInsert(@Param(value = &quot;orderItemList&quot;) List&lt;OrderItem&gt; orderItemList);</span><br></pre></td></tr></table></figure></p><p>记住在mybatis里面使用多个参数时，需要使用Param注解。</p><p>紧接着，打开OrderItemMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   &lt;insert id=&quot;batchInsert&quot; parameterType=&quot;list&quot;&gt;</span><br><span class="line">  insert into store_order_item (id, order_no,user_id, product_id,</span><br><span class="line">  product_name, product_image, current_unit_price,</span><br><span class="line">  quantity, total_price, create_time,</span><br><span class="line">  update_time)</span><br><span class="line">  values</span><br><span class="line">  &lt;foreach collection=&quot;orderItemList&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">    (</span><br><span class="line">    #&#123;item.id&#125;,#&#123;item.orderNo&#125;,#&#123;item.userId&#125;,#&#123;item.productId&#125;,#&#123;item.productName&#125;,#&#123;item.productImage&#125;,#&#123;item.currentUnitPrice&#125;,#&#123;item.quantity&#125;,#&#123;item.totalPrice&#125;,now(),now()</span><br><span class="line">    )</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure></p><p>这里面采用了foreach 进行循环遍历进行插入。<br><strong>6、</strong>订单生成以后，我们需要清空购物车和减少商品的库存。分别去定义cleanCart和produceProductStock这两个函数，去实现相关的逻辑。<br><strong>7、</strong>接下来我们要做的就是将数据以Json形式返回给前端，为了更好的实现这个功能，我们需要新建三个Vo文件，我们打开Vo这个包，新建OrderVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line">import top.store.service.ShippingVo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class OrderVo &#123;</span><br><span class="line"></span><br><span class="line">    private Long orderNo;</span><br><span class="line"></span><br><span class="line">    private BigDecimal payment;</span><br><span class="line"></span><br><span class="line">    private Integer paymentType;</span><br><span class="line"></span><br><span class="line">    private String paymentTypeDesc;</span><br><span class="line"></span><br><span class="line">    private Integer postage;</span><br><span class="line"></span><br><span class="line">    private Integer status;</span><br><span class="line"></span><br><span class="line">    private String statusDesc;</span><br><span class="line"></span><br><span class="line">    //各种时间，都采用String类型</span><br><span class="line"></span><br><span class="line">    private String paymentTime;</span><br><span class="line"></span><br><span class="line">    private String sendTime;</span><br><span class="line"></span><br><span class="line">    private String endTime;</span><br><span class="line"></span><br><span class="line">    private String closeTime;</span><br><span class="line"></span><br><span class="line">    private String createTime;</span><br><span class="line"></span><br><span class="line">    private String updateTime;</span><br><span class="line"></span><br><span class="line">    //子订单的明细（另外新建一个OrderItemVo用于组装需要显示的信息）</span><br><span class="line"></span><br><span class="line">    private List&lt;OrderItemVo&gt; orderItemVoList;</span><br><span class="line"></span><br><span class="line">    private String imageHost;</span><br><span class="line">    private Integer shippingId;</span><br><span class="line">    private String receiverName;</span><br><span class="line"></span><br><span class="line">    //购物车明细（另外新建一个ShippingVo用于组装需要显示的信息）</span><br><span class="line">    private ShippingVo shippingVo;</span><br><span class="line"></span><br><span class="line">    public Long getOrderNo() &#123;</span><br><span class="line">        return orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderNo(Long orderNo) &#123;</span><br><span class="line">        this.orderNo = orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getPayment() &#123;</span><br><span class="line">        return payment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPayment(BigDecimal payment) &#123;</span><br><span class="line">        this.payment = payment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getPaymentType() &#123;</span><br><span class="line">        return paymentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaymentType(Integer paymentType) &#123;</span><br><span class="line">        this.paymentType = paymentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPaymentTypeDesc() &#123;</span><br><span class="line">        return paymentTypeDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaymentTypeDesc(String paymentTypeDesc) &#123;</span><br><span class="line">        this.paymentTypeDesc = paymentTypeDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getPostage() &#123;</span><br><span class="line">        return postage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostage(Integer postage) &#123;</span><br><span class="line">        this.postage = postage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(Integer status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStatusDesc() &#123;</span><br><span class="line">        return statusDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatusDesc(String statusDesc) &#123;</span><br><span class="line">        this.statusDesc = statusDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPaymentTime() &#123;</span><br><span class="line">        return paymentTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaymentTime(String paymentTime) &#123;</span><br><span class="line">        this.paymentTime = paymentTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSendTime() &#123;</span><br><span class="line">        return sendTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSendTime(String sendTime) &#123;</span><br><span class="line">        this.sendTime = sendTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEndTime() &#123;</span><br><span class="line">        return endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEndTime(String endTime) &#123;</span><br><span class="line">        this.endTime = endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCloseTime() &#123;</span><br><span class="line">        return closeTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCloseTime(String closeTime) &#123;</span><br><span class="line">        this.closeTime = closeTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(String createTime) &#123;</span><br><span class="line">        this.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUpdateTime() &#123;</span><br><span class="line">        return updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUpdateTime(String updateTime) &#123;</span><br><span class="line">        this.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;OrderItemVo&gt; getOrderItemVoList() &#123;</span><br><span class="line">        return orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderItemVoList(List&lt;OrderItemVo&gt; orderItemVoList) &#123;</span><br><span class="line">        this.orderItemVoList = orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getShippingId() &#123;</span><br><span class="line">        return shippingId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setShippingId(Integer shippingId) &#123;</span><br><span class="line">        this.shippingId = shippingId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverName() &#123;</span><br><span class="line">        return receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverName(String receiverName) &#123;</span><br><span class="line">        this.receiverName = receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShippingVo getShippingVo() &#123;</span><br><span class="line">        return shippingVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setShippingVo(ShippingVo shippingVo) &#123;</span><br><span class="line">        this.shippingVo = shippingVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着新建OrderItemVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class OrderItemVo &#123;</span><br><span class="line">    //从store_order_item表里面选择我们将要在订单中显示的字段</span><br><span class="line"></span><br><span class="line">    private Long orderNo;</span><br><span class="line"></span><br><span class="line">    private Integer productId;</span><br><span class="line"></span><br><span class="line">    private String productName;</span><br><span class="line"></span><br><span class="line">    private String productImage;</span><br><span class="line"></span><br><span class="line">    private BigDecimal currentUnitPrice;</span><br><span class="line"></span><br><span class="line">    private Integer quantity;</span><br><span class="line"></span><br><span class="line">    private BigDecimal totalPrice;</span><br><span class="line"></span><br><span class="line">    private String createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Long getOrderNo() &#123;</span><br><span class="line">        return orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderNo(Long orderNo) &#123;</span><br><span class="line">        this.orderNo = orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductId() &#123;</span><br><span class="line">        return productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductId(Integer productId) &#123;</span><br><span class="line">        this.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductName() &#123;</span><br><span class="line">        return productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductName(String productName) &#123;</span><br><span class="line">        this.productName = productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductImage() &#123;</span><br><span class="line">        return productImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductImage(String productImage) &#123;</span><br><span class="line">        this.productImage = productImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getCurrentUnitPrice() &#123;</span><br><span class="line">        return currentUnitPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCurrentUnitPrice(BigDecimal currentUnitPrice) &#123;</span><br><span class="line">        this.currentUnitPrice = currentUnitPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getQuantity() &#123;</span><br><span class="line">        return quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setQuantity(Integer quantity) &#123;</span><br><span class="line">        this.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getTotalPrice() &#123;</span><br><span class="line">        return totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTotalPrice(BigDecimal totalPrice) &#123;</span><br><span class="line">        this.totalPrice = totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(String createTime) &#123;</span><br><span class="line">        this.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后新建ShippingVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">public class ShippingVo &#123;</span><br><span class="line">    //从store_shipping表里面选择我们将要在订单中显示的字段</span><br><span class="line">    private String receiverName;</span><br><span class="line"></span><br><span class="line">    private String receiverPhone;</span><br><span class="line"></span><br><span class="line">    private String receiverMobile;</span><br><span class="line"></span><br><span class="line">    private String receiverProvince;</span><br><span class="line"></span><br><span class="line">    private String receiverCity;</span><br><span class="line"></span><br><span class="line">    private String receiverDistrict;</span><br><span class="line"></span><br><span class="line">    private String receiverAddress;</span><br><span class="line"></span><br><span class="line">    private String receiverZip;</span><br><span class="line"></span><br><span class="line">    public String getReceiverName() &#123;</span><br><span class="line">        return receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverName(String receiverName) &#123;</span><br><span class="line">        this.receiverName = receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverPhone() &#123;</span><br><span class="line">        return receiverPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverPhone(String receiverPhone) &#123;</span><br><span class="line">        this.receiverPhone = receiverPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverMobile() &#123;</span><br><span class="line">        return receiverMobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverMobile(String receiverMobile) &#123;</span><br><span class="line">        this.receiverMobile = receiverMobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverProvince() &#123;</span><br><span class="line">        return receiverProvince;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverProvince(String receiverProvince) &#123;</span><br><span class="line">        this.receiverProvince = receiverProvince;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverCity() &#123;</span><br><span class="line">        return receiverCity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverCity(String receiverCity) &#123;</span><br><span class="line">        this.receiverCity = receiverCity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverDistrict() &#123;</span><br><span class="line">        return receiverDistrict;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverDistrict(String receiverDistrict) &#123;</span><br><span class="line">        this.receiverDistrict = receiverDistrict;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverAddress() &#123;</span><br><span class="line">        return receiverAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverAddress(String receiverAddress) &#123;</span><br><span class="line">        this.receiverAddress = receiverAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverZip() &#123;</span><br><span class="line">        return receiverZip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverZip(String receiverZip) &#123;</span><br><span class="line">        this.receiverZip = receiverZip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着我们需要定义三个函数分别用于组装我们在支付订单里面的信息，为什么这么做？那是因为我们的支付订单里面包含的只是订单表，子订单表（订单明细表）和收货地址表中的部分信息，因此我们需要进行抽离封装成一个我们用在支付订单里面的信息。</p><p>这个很好理解，assembleShippingVo函数传入shipping对象进行组装；assembleOrderItemVo函数传入orderItem对象进行组装；assembleOrderVo函数传入order和orderItemList对象进行组装。</p><p>这样最后将组装成的新的支付订单对象返回给前端，就完成了我们创建订单的逻辑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来完成订单模模块功能的开发，包括前台和后台开发，里面涉及到的知识点挺多的，需要好好理解。&lt;/p&gt;
&lt;h2 id=&quot;模
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十五）：支付宝支付回调功能开发</title>
    <link href="http://blog.licheetools.top/2018/09/03/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/09/03/SSM搭建二手市场交易平台（二十五）：支付宝支付回调功能开发/</id>
    <published>2018-09-03T10:21:06.000Z</published>
    <updated>2019-04-15T14:21:00.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇来完成支付宝支付回调的功能，其实这个是非常简单的，但是我专门用一篇笔记来记录主要就是希望自己可以好好的进行完善。</p><h2 id="支付宝支付回调"><a href="#支付宝支付回调" class="headerlink" title="支付宝支付回调"></a>支付宝支付回调</h2><p>打开OrderController.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     * 支付宝回调功能开发</span><br><span class="line">     * @author envy</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;alipay_callback.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public Object alipayCallback(HttpServletRequest request) &#123;</span><br><span class="line">        //利用guava封装的map进行参数存储，记住这个是新的经过下面的代码拼接以后的map</span><br><span class="line">        Map&lt;String,String&gt; params = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       Map requestParams= request.getParameterMap();   //将异步通知中收到的待验证所有参数都存放到map中</span><br><span class="line">        for(Iterator iter=requestParams.keySet().iterator();iter.hasNext();)&#123;</span><br><span class="line">            String name =(String)iter.next();</span><br><span class="line">            String [] values =(String [])requestParams.get(name);</span><br><span class="line"></span><br><span class="line">            String valueStr =&quot;&quot;;</span><br><span class="line">            for(int i=0;i&lt;values.length;i++)&#123;</span><br><span class="line">                //判断值的长度，若为1，则直接返回values[0]，若不是那我们则需要在各个参数值之间添加逗号用于区分</span><br><span class="line">                valueStr =(i==values.length-1)?valueStr+values[i]:valueStr+values[i]+&quot;,&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            //其实这里就是将前面的map进行处理,然后变成我们所需要的params</span><br><span class="line">            params.put(name,valueStr);</span><br><span class="line">        &#125;</span><br><span class="line">       logger.info(&quot;支付宝回调，sign:&#123;&#125;,trade_status:&#123;&#125;,参数:&#123;&#125;&quot;,params.get(&quot;sign&quot;),params.get(&quot;trade_status&quot;),params.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //接下来的代码是非常重要的，因为它需要对我们的回调结果进行验证，并且还要避免重复通知</span><br><span class="line">        params.remove(&quot;sign_type&quot;);</span><br><span class="line"></span><br><span class="line">        //注意这里其余参数的获取是不需要再次构建方法的，你是可以直接通过Configs来获得的</span><br><span class="line">        try &#123;</span><br><span class="line">            boolean alipayRSACheckedV2 = AlipaySignature.rsaCheckV2(params, Configs.getPublicKey(),&quot;utf-8&quot;,Configs.getSignType());</span><br><span class="line"></span><br><span class="line">            if(!alipayRSACheckedV2)&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;非法请求，验证不通过，再恶意请求将报警找网警。&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (AlipayApiException e) &#123;</span><br><span class="line">            logger.error(&quot;支付宝验证回调异常&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号，</span><br><span class="line">        // 并判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额），</span><br><span class="line">        // 同时需要校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方</span><br><span class="line">        // （有的时候，一个商户可能有多个seller_id/seller_email），上述有任何一个验证不通过，</span><br><span class="line">        // 则表明本次通知是异常通知，务必忽略。在上述验证通过后商户必须根据支付宝不同类型的业务通知，</span><br><span class="line">        // 正确的进行不同的业务处理，并且过滤重复的通知结果数据。在支付宝的业务通知中，</span><br><span class="line">        // 只有交易通知状态为TRADE_SUCCESS或TRADE_FINISHED时，支付宝才会认定为买家付款成功。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //进行参数验证</span><br><span class="line">        ServerResponse serverResponse =iOrderService.aliCallback(params);</span><br><span class="line">        if(serverResponse.isSuccess())&#123;</span><br><span class="line">            return Const.AlipayCallback.RESPONSE_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">        return Const.AlipayCallback.RESPONSE_FAILED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开OrderServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     *</span><br><span class="line">     * 支付宝回调验证</span><br><span class="line">     *</span><br><span class="line">     * 验证参数 :</span><br><span class="line">     * out_trade_no:商户订单号</span><br><span class="line">     * trade_no:支付宝交易号;</span><br><span class="line">     * trade_status:交易状态</span><br><span class="line">     */</span><br><span class="line">    public ServerResponse aliCallback(Map&lt;String,String&gt; params)&#123;</span><br><span class="line">      Long orderNo = Long.parseLong(params.get(&quot;out_trade_no&quot;));</span><br><span class="line">      String tradeNo =params.get(&quot;trade_no&quot;);</span><br><span class="line">      String tradeStatus =params.get(&quot;trade_status&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //通过商户订单号来查询订单</span><br><span class="line">        Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line"></span><br><span class="line">        if(order ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;非光明二手交易市场的订单，回调忽略&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断是否进行了重复调用（只有已取消和未支付这两种不会引起重复调用）</span><br><span class="line">        if(order.getStatus()&gt;= Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;支付宝重复调用&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //当没有进行重复调用的时候，我们需要通过判断来设置它的支付状态</span><br><span class="line">        if(Const.AlipayCallback.RESPONSE_SUCCESS.equals(tradeStatus))&#123;</span><br><span class="line">            //设置支付时间，从params里面获取,查看支付宝文档发现它其实是一个gmt_payment和时间工具类里面的配置一样</span><br><span class="line">            order.setPaymentTime(DateTimeUtil.strToDate(params.get(&quot;gmt_payment&quot;)));</span><br><span class="line"></span><br><span class="line">            order.setStatus(Const.OrderStatusEnum.PAID.getCode());</span><br><span class="line">            //更新订单状态</span><br><span class="line">            orderMapper.updateByPrimaryKeySelective(order);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //组装一个payInfo对象</span><br><span class="line">        /***</span><br><span class="line">         *下面这些字段都是payInfo支付信息表里面的字段</span><br><span class="line">         * user_id,  用户id</span><br><span class="line">         * order_no,  商户订单号</span><br><span class="line">         * pay_platform,  支付平台</span><br><span class="line">         * platform_number,  交易号(tradeNo)</span><br><span class="line">         *platform_status, 交易状态（tradeStatus）</span><br><span class="line">         */</span><br><span class="line">        PayInfo payInfo =new PayInfo();</span><br><span class="line">        payInfo.setId(order.getUserId());</span><br><span class="line">        payInfo.setOrderNo(order.getOrderNo());</span><br><span class="line">        payInfo.setPayPlatform(Const.PayPlatformEnum.ALIPAY.getCode());</span><br><span class="line">        payInfo.setPlatformNumber(tradeNo);</span><br><span class="line">        payInfo.setPlatformStatus(tradeStatus);</span><br><span class="line"></span><br><span class="line">        payInfoMapper.insert(payInfo);</span><br><span class="line"></span><br><span class="line">        return ServerResponse.createBySuccess();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>几点说明：</strong><br>1、看到这行<code>Order order =orderMapper.selectOrderByOrderNo(orderNo);</code>代码就说明我们需要去OrderMapper.java文件里面添加一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order selectOrderByOrderNo(Long orderNo);</span><br></pre></td></tr></table></figure></p><p>紧接着我们需要打开OrderMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectOrderByOrderNo&quot; parameterType=&quot;long&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order</span><br><span class="line">  where order_no =#&#123;orderNo&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>在进行是否重复调用的判断时，我们需要去Const里面新增支付状态的枚举类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">//订单状态</span><br><span class="line">   public enum OrderStatusEnum&#123;</span><br><span class="line">       CANCELED(0,&quot;已取消&quot;),</span><br><span class="line">       NO_PAY(10,&quot;未支付&quot;),</span><br><span class="line">       PAID(20,&quot;已付款&quot;),</span><br><span class="line">       SHIPPED(40,&quot;已发货&quot;),</span><br><span class="line">       ORDER_SUCCESS(50,&quot;订单完成&quot;),</span><br><span class="line">       ORDER_CLOSE(60,&quot;订单关闭&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       private String value;</span><br><span class="line">       private int code;</span><br><span class="line"></span><br><span class="line">       OrderStatusEnum(int code,String value)&#123;</span><br><span class="line">           this.code =code;</span><br><span class="line">           this.value=value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public String getValue() &#123;</span><br><span class="line">           return value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setValue(String value) &#123;</span><br><span class="line">           this.value = value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public int getCode() &#123;</span><br><span class="line">           return code;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setCode(int code) &#123;</span><br><span class="line">           this.code = code;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public interface AlipayCallback&#123;</span><br><span class="line">       String TRADE_STATUS_WAIT_BUYER_PAY = &quot;WAIT_BUYER_PAY&quot;;</span><br><span class="line">       String TRADE_STATUS_TRADE_SUCCESS = &quot;TRADE_SUCCESS&quot;;</span><br><span class="line"></span><br><span class="line">       String RESPONSE_SUCCESS = &quot;success&quot;;</span><br><span class="line">       String RESPONSE_FAILED = &quot;failed&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //支付平台（目前暂支持支付宝，后面会进行扩展）</span><br><span class="line">   public enum PayPlatformEnum&#123;</span><br><span class="line">       ALIPAY(1,&quot;支付宝&quot;)</span><br><span class="line">       ;</span><br><span class="line"></span><br><span class="line">       private String value;</span><br><span class="line">       private int code;</span><br><span class="line"></span><br><span class="line">       PayPlatformEnum(int code,String value)&#123;</span><br><span class="line">           this.code =code;</span><br><span class="line">           this.value=value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public String getValue() &#123;</span><br><span class="line">           return value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setValue(String value) &#123;</span><br><span class="line">           this.value = value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public int getCode() &#123;</span><br><span class="line">           return code;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setCode(int code) &#123;</span><br><span class="line">           this.code = code;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这后面的代码其实就是后面即将会使用到的订单状态和支付平台这个两个枚举类，里面设置了value和code这个两个字段，以及它的有参构造，getter和setter方法。<br><strong>3、</strong>这行代码<code>order.setPaymentTime(DateTimeUtil.strToDate(params.get(&quot;gmt_payment&quot;)));</code>是用来设置支付时间，从params里面获取,查看<a href="https://docs.open.alipay.com/194/103296/" target="_blank" rel="noopener">支付宝文档</a>发现它其实是一gmt_payment和时间工具类里面的配置一样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9e31f32162cb75bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这是我们DateUtil的工具类里面的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//定义一下我们的日期格式</span><br><span class="line">public static final String STANDARD_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br></pre></td></tr></table></figure><p><strong>4、</strong>然后通过我们获取到的信息，我们需要组装成一个payInfo对象，里面的数据都是我们自己设定的，经过了严格的判断。</p><p>最后打开IOrderService.java文件，添加接口抽象方法，以供controller调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse aliCallback(Map&lt;String,String&gt; params);    //支付宝回调验证</span><br></pre></td></tr></table></figure></p><p>关于其他未说明的事情请参看下面的注意事项。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在对支付宝回调结果进行检验的时候，我们可以单击查看支付宝的<a href="https://docs.open.alipay.com/194/103296/" target="_blank" rel="noopener">开发文档</a>，我们拉到底部：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-94b01711bba65f1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>shift+ctrl+T调出类搜索框，搜索<code>alipaysignature</code>，接着alt+数字7（不是F7）查看该类所有方法，因为支付宝现在只提供RSA2(SHA256)密钥这种方法，因此直接查看图中所示方法<code>rsaCheckV2</code>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c028752f4e6d7120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-79feba20353e88cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你发现只去除了sign，并没有移除sign_type，因此我们后面需要自己进行移除。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3f1f7c36b323ab4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后你在支付宝属性配置文件里面看到了<code>,RSA2-&gt;SHA256withRsa</code>因此我们需要查看CheckContent的rsa类型，我们发现<code>rsa256CheckContent</code>这个函数里面的就是采用<code>SIGN_SHA256RSA_ALGORITHMS</code>来进行验证的。还有在前面我们看到了charset这个设置字符集的字段。我们搜索<code>AlipayTradeServiceImpl.java</code>文件，我们发现了图中所示的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-36530458522d3da5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>也就是说如果你不传入charset对应的值，那就默认使用utf-8编码，这个是非常有用的。</p><p>因此，总结一下就是我们后面会调用AlipaySignature的rsaCheckV2方法，而且该方法是含有sign_type参数的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   public static boolean rsaCheckV2(Map&lt;String, String&gt; params, String publicKey,</span><br><span class="line">           String charset,String signType) throws AlipayApiException &#123;</span><br><span class="line">String sign = params.get(&quot;sign&quot;);</span><br><span class="line">String content = getSignCheckContentV2(params);</span><br><span class="line"></span><br><span class="line">return rsaCheck(content, sign, publicKey, charset,signType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意上的publicKey是指图中的这个：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a49ade1e087112ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你填的也就是这个：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0158e87896488d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><code>com.alipay.demo.trade.config</code>这个包里面就提供了用于获取该zfbinfo.properies里面配置信息的方法：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0e1bab964c450707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在我们需要提供给前端，轮询查询订单的支付状态，我们在二维码扫码支付完成以后，前台会调用我们这个接口，查看是否支付成功了。</p><h2 id="前台轮询查询订单状态"><a href="#前台轮询查询订单状态" class="headerlink" title="前台轮询查询订单状态"></a>前台轮询查询订单状态</h2><p>打开OrderController.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *  前台轮询查询订单状态</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;query_order_pay_status.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;Boolean&gt; queryOrderPayStatus(HttpSession session,Long orderNo) &#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //实现我们前台轮询查询订单状态的逻辑</span><br><span class="line">    ServerResponse serverResponse= iOrderService.queryOrderPayStatus(user.getId(),orderNo);</span><br><span class="line">    if (serverResponse.isSuccess()) &#123;</span><br><span class="line">        return ServerResponse.createBySuccess(true);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccess(false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开OrderServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">   *  前台轮询查询订单状态</span><br><span class="line">   * @author envy</span><br><span class="line">   * */</span><br><span class="line">  public ServerResponse queryOrderPayStatus(Integer userId, Long orderNo)&#123;</span><br><span class="line">      //查询订单是否存在</span><br><span class="line">      Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">      //如果订单不存在的话</span><br><span class="line">      if(order ==null)&#123;</span><br><span class="line">          return ServerResponse.createByErrorMessage(&quot;对不起，该用户没有该订单&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      //存在的话，就判断订单的状态，此时则表明已经支付了</span><br><span class="line">      if(order.getStatus()&gt;= Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">          return ServerResponse.createBySuccess();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return ServerResponse.createByError();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>最后打开IOrderService.java文件，添加接口抽象方法，以供controller调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse queryOrderPayStatus(Integer userId, Long orderNo);   //前台轮询查询订单状态</span><br></pre></td></tr></table></figure></p><p>这样我们关于支付宝的3个接口的开发就都完成了，然后就是接口测试了，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了。感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇来完成支付宝支付回调的功能，其实这个是非常简单的，但是我专门用一篇笔记来记录主要就是希望自己可以好好的进行完善。&lt;/p&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十四）：支付宝支付功能开发</title>
    <link href="http://blog.licheetools.top/2018/09/02/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/09/02/SSM搭建二手市场交易平台（二十四）：支付宝支付功能开发/</id>
    <published>2018-09-02T05:21:06.000Z</published>
    <updated>2019-04-15T14:20:15.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前面那些都是一些铺垫，从现在开始我们正式进入到项目的支付宝实战阶段。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们将自己在支付宝里配置的zfbinfo.properties文件复制到resources文件里面，然后将支付宝官方demo中提供的4个含有sdk的jar包复制到图中所示的lib包里面。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b2b0cb663a6e2fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你也看到了，demo中不止含有那些sdk的包，还有其他的包：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0d73a91645f34dbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里我们就不全部拷贝了，而是通过配置文件，将包的版本信息添加到配置文件里面，然后直接从中央仓库里下载即可，其实开始的pom.xml里面就已经全部包含了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b483368943400ec3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以这一步你其实是可以跳过的。接着打开main包下面的java包，在里面新建一个包<code>com.alipay.demo.trade</code>，然后将demo里面的Main和DemoHbRunner这两个文件复制过去。你会发现所有文件都报红了，那是因为我们前面4个jar包没有进行导入。打开File–&gt;project Structure–&gt;Modules，然后按照图中所示进行操作：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f346903b19e9893e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d6a1634ca5d8b6b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有这个pom.xml的底部的这行代码，还有为什么将之前的jar包都放在lib文件夹下面，那是因为服务器只会到WEB-INF下面的lib文件去找jar包，而不是其他的地方，因此我们只能将其放在lib包下面。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e003bec5125048fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下Main函数，检测一下我们的类和包是否加载正确：（出现支付宝预下单成功的字段就代表成功了，如果没有请参考上一篇笔记进行检查）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-644f3e83cac83c6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了现在正式进入到订单模块的开发，相应表的设计如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4e5cd04ea5b3eef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付开发"><a href="#支付开发" class="headerlink" title="支付开发"></a>支付开发</h2><p>首先我们打开controller这个包下面的portal包，在里面新建一个OrderController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.portal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IOrderService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @author Envy</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/order/&quot;)</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IOrderService iOrderService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 支付宝支付功能开发</span><br><span class="line">     * @author envy</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;pay.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse pay(HttpSession session, Long orderNo, HttpServletRequest request)&#123;</span><br><span class="line">        //这里传入三个参数，第一个是需要用户登录，第二个则是传入订单号，第三个则是利用它来获取我们servlet的上下文，拿到我们upload的文件夹，将自动生成的二维码上传到ftp服务器上面</span><br><span class="line">        //然后我们就会返回给前端一个二维码的地址，前端将二维码进行展示，用于用户进行扫码和支付</span><br><span class="line"></span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //从request中获取我们的服务器上图片的地址。</span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;);  //这里的path后面是没有斜线的就是只有upload</span><br><span class="line"></span><br><span class="line">        return iOrderService.pay(orderNo,user.getId(),path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的Impl包，我们新建一个接口的实现类OrderServiceImpl.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.alipay.api.AlipayResponse;</span><br><span class="line">import com.alipay.api.response.AlipayTradePrecreateResponse;</span><br><span class="line">import com.alipay.demo.trade.config.Configs;</span><br><span class="line">import com.alipay.demo.trade.model.ExtendParams;</span><br><span class="line">import com.alipay.demo.trade.model.GoodsDetail;</span><br><span class="line">import com.alipay.demo.trade.model.builder.AlipayTradePrecreateRequestBuilder;</span><br><span class="line">import com.alipay.demo.trade.model.result.AlipayF2FPrecreateResult;</span><br><span class="line">import com.alipay.demo.trade.service.AlipayTradeService;</span><br><span class="line">import com.alipay.demo.trade.service.impl.AlipayTradeServiceImpl;</span><br><span class="line">import com.alipay.demo.trade.utils.ZxingUtils;</span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.OrderItemMapper;</span><br><span class="line">import top.store.dao.OrderMapper;</span><br><span class="line">import top.store.pojo.Order;</span><br><span class="line">import top.store.pojo.OrderItem;</span><br><span class="line">import top.store.service.IOrderService;</span><br><span class="line">import top.store.util.BigDecimalUtil;</span><br><span class="line">import top.store.util.FTPUtil;</span><br><span class="line">import top.store.util.PropertiesUtil;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Envy</span><br><span class="line"> * */</span><br><span class="line">@Service(&quot;iOrderService&quot;)</span><br><span class="line">public class OrderServiceImpl implements IOrderService &#123;</span><br><span class="line">    //输出打印日志</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(OrderServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderItemMapper orderItemMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 支付宝当面付2.0服务</span><br><span class="line">    private static AlipayTradeService tradeService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ServerResponse pay(Long orderNo,Integer userId,String path)&#123;</span><br><span class="line">        Map&lt;String, String&gt; resultMap = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">        //根据用户Id和订单号orderNo来查询订单是否存在，如果不存在</span><br><span class="line">        Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">        if(order ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;对不起，该用户没有该订单&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        resultMap.put(&quot;orderNo&quot;,String.valueOf(order.getOrderNo()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // (必填) 商户网站订单系统中唯一订单号，64个字符以内，只能包含字母、数字、下划线，</span><br><span class="line">        // 需保证商户系统端不能重复，建议通过数据库sequence生成，</span><br><span class="line">        String outTradeNo = order.getOrderNo().toString();</span><br><span class="line"></span><br><span class="line">        // (必填) 订单标题，粗略描述用户的支付目的。如“xxx品牌xxx门店消费”</span><br><span class="line">        String subject = new StringBuilder().append(&quot;光明二手商城扫码支付，订单号:&quot;).append(outTradeNo).toString();</span><br><span class="line"></span><br><span class="line">        // (必填) 订单总金额，单位为元，不能超过1亿元</span><br><span class="line">        // 如果同时传入了【打折金额】,【不可打折金额】,【订单总金额】三者,则必须满足如下条件:【订单总金额】=【打折金额】+【不可打折金额】</span><br><span class="line">        String totalAmount = order.getPayment().toString();</span><br><span class="line"></span><br><span class="line">        // (必填) 付款条码，用户支付宝钱包手机app点击“付款”产生的付款条码</span><br><span class="line">        String authCode = &quot;用户自己的支付宝付款码&quot;; // 条码示例，286648048691290423</span><br><span class="line">        // (可选，根据需要决定是否使用) 订单可打折金额，可以配合商家平台配置折扣活动，如果订单部分商品参与打折，可以将部分商品总价填写至此字段，默认全部商品可打折</span><br><span class="line">        // 如果该值未传入,但传入了【订单总金额】,【不可打折金额】 则该值默认为【订单总金额】- 【不可打折金额】</span><br><span class="line">        //        String discountableAmount = &quot;1.00&quot;; //</span><br><span class="line"></span><br><span class="line">        // (可选) 订单不可打折金额，可以配合商家平台配置折扣活动，如果酒水不参与打折，则将对应金额填写至此字段</span><br><span class="line">        // 如果该值未传入,但传入了【订单总金额】,【打折金额】,则该值默认为【订单总金额】-【打折金额】</span><br><span class="line">        String undiscountableAmount = &quot;0.0&quot;;</span><br><span class="line"></span><br><span class="line">        // 卖家支付宝账号ID，用于支持一个签约账号下支持打款到不同的收款账号，(打款到sellerId对应的支付宝账号)</span><br><span class="line">        // 如果该字段为空，则默认为与支付宝签约的商户的PID，也就是appid对应的PID</span><br><span class="line">        String sellerId = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        // 订单描述，可以对交易或商品进行一个详细地描述，比如填写&quot;购买商品3件共20.00元&quot;</span><br><span class="line">        String body = new StringBuilder().append(&quot;订单&quot;).append(outTradeNo).append(&quot;购买商品共花&quot;).append(totalAmount).append(&quot;元&quot;).toString();</span><br><span class="line"></span><br><span class="line">        // 商户操作员编号，添加此参数可以为商户操作员做销售统计</span><br><span class="line">        String operatorId = &quot;test_operator_id&quot;;</span><br><span class="line"></span><br><span class="line">        // (必填) 商户门店编号，通过门店号和商家后台可以配置精准到门店的折扣信息，详询支付宝技术支持</span><br><span class="line">        String storeId = &quot;test_store_id&quot;;</span><br><span class="line"></span><br><span class="line">        // 业务扩展参数，目前可添加由支付宝分配的系统商编号(通过setSysServiceProviderId方法)，详情请咨询支付宝技术支持</span><br><span class="line">        String providerId = &quot;2088100200300400500&quot;;</span><br><span class="line">        ExtendParams extendParams = new ExtendParams();</span><br><span class="line">        extendParams.setSysServiceProviderId(providerId);</span><br><span class="line"></span><br><span class="line">        // 支付超时，线下扫码交易定义为5分钟</span><br><span class="line">        String timeoutExpress = &quot;5m&quot;;</span><br><span class="line"></span><br><span class="line">        // 商品明细列表，需填写购买商品详细信息，</span><br><span class="line">        List&lt;GoodsDetail&gt; goodsDetailList = new ArrayList&lt;GoodsDetail&gt;();</span><br><span class="line"></span><br><span class="line">        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">        //这里是自己定义的逻辑，因为上面的goodsDetailList还没有信息，因此我们需要往里面添加信息</span><br><span class="line">        //我们根据orderId和userId来拿到这个orderItemList。然后遍历这个列表，把我们的GoodsDetail给填充上，最后添加到goodsDetailList列表中</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            // 创建一个商品信息，参数含义分别为商品id（使用国标）、名称、单价（单位为分）、数量，如果需要添加商品类别，详见GoodsDetail</span><br><span class="line">            GoodsDetail goods = GoodsDetail.newInstance(orderItem.getId().toString(), orderItem.getProductName(),</span><br><span class="line">                    (BigDecimalUtil.mut(orderItem.getCurrentUnitPrice().doubleValue(),new Double(100).doubleValue())).longValue(), orderItem.getQuantity());</span><br><span class="line"></span><br><span class="line">            goodsDetailList.add(goods);</span><br><span class="line">        &#125;</span><br><span class="line">        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 创建扫码支付请求 builder，设置请求参数</span><br><span class="line">        AlipayTradePrecreateRequestBuilder builder = new AlipayTradePrecreateRequestBuilder()</span><br><span class="line">                .setSubject(subject).setTotalAmount(totalAmount).setOutTradeNo(outTradeNo)</span><br><span class="line">                .setUndiscountableAmount(undiscountableAmount).setSellerId(sellerId).setBody(body)</span><br><span class="line">                .setOperatorId(operatorId).setStoreId(storeId).setExtendParams(extendParams)</span><br><span class="line">                .setTimeoutExpress(timeoutExpress)</span><br><span class="line">                .setNotifyUrl(PropertiesUtil.getProperty(PropertiesUtil.getProperty(&quot;alipay.callback.url&quot;)))//支付宝服务器主动通知商户服务器里指定的页面 http 路径,根据需要设置</span><br><span class="line">                .setGoodsDetailList(goodsDetailList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /** 一定要在创建AlipayTradeService之前调用Configs.init()设置默认参数</span><br><span class="line">         *  Configs会读取classpath下的zfbinfo.properties文件配置信息，如果找不到该文件则确认该文件是否在classpath目录</span><br><span class="line">         */</span><br><span class="line">        Configs.init(&quot;zfbinfo.properties&quot;);</span><br><span class="line"></span><br><span class="line">        /** 使用Configs提供的默认参数</span><br><span class="line">         *  AlipayTradeService可以使用单例或者为静态成员对象，不需要反复new</span><br><span class="line">         */</span><br><span class="line">        tradeService = new AlipayTradeServiceImpl.ClientBuilder().build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AlipayF2FPrecreateResult result = tradeService.tradePrecreate(builder);</span><br><span class="line">        switch (result.getTradeStatus()) &#123;</span><br><span class="line">            case SUCCESS:</span><br><span class="line">                logger.info(&quot;支付宝预下单成功: )&quot;);</span><br><span class="line"></span><br><span class="line">                AlipayTradePrecreateResponse response = result.getResponse();</span><br><span class="line">                dumpResponse(response);</span><br><span class="line"></span><br><span class="line">                File folder = new File(path);</span><br><span class="line">                if (!folder.exists()) &#123;</span><br><span class="line">                    folder.setWritable(true);</span><br><span class="line">                    folder.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 需要修改为运行机器上的路径</span><br><span class="line">                // 细节</span><br><span class="line">                String qrPath = String.format(path + &quot;/qr-%s.png&quot;, response.getOutTradeNo());  //这里后面一定要添加/</span><br><span class="line">                String qrFileName = String.format(&quot;qr-%s.png&quot;, response.getOutTradeNo());</span><br><span class="line">                ZxingUtils.getQRCodeImge(response.getQrCode(), 256, qrPath);</span><br><span class="line"></span><br><span class="line">                //目标文件夹</span><br><span class="line">                File targetFile = new File(path, qrFileName);</span><br><span class="line">                try &#123;</span><br><span class="line">                    FTPUtil.uploadFile(Lists.newArrayList(targetFile));</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    logger.error(&quot;上传二维码异常&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(&quot;qrPath:&quot; + qrPath);</span><br><span class="line">                String qrUrl = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;) + targetFile.getName();</span><br><span class="line">                resultMap.put(&quot;qrUrl&quot;, qrUrl);</span><br><span class="line">                return ServerResponse.createBySuccess(resultMap);</span><br><span class="line">            case FAILED:</span><br><span class="line">                logger.error(&quot;支付宝预下单失败!!!&quot;);</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;支付宝预下单失败!!!&quot;);</span><br><span class="line"></span><br><span class="line">            case UNKNOWN:</span><br><span class="line">                logger.error(&quot;系统异常，预下单状态未知!!!&quot;);</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;系统异常，预下单状态未知!!!&quot;);</span><br><span class="line"></span><br><span class="line">            default:</span><br><span class="line">                logger.error(&quot;不支持的交易状态，交易返回异常!!!&quot;);</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;不支持的交易状态，交易返回异常!!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 简单打印应答</span><br><span class="line">    private void dumpResponse(AlipayResponse response) &#123;</span><br><span class="line">        if (response != null) &#123;</span><br><span class="line">            logger.info(String.format(&quot;code:%s, msg:%s&quot;, response.getCode(), response.getMsg()));</span><br><span class="line">            if (StringUtils.isNotEmpty(response.getSubCode())) &#123;</span><br><span class="line">                logger.info(String.format(&quot;subCode:%s, subMsg:%s&quot;, response.getSubCode(),</span><br><span class="line">                        response.getSubMsg()));</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(&quot;body:&quot; + response.getBody());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面的代码是非常的多，而且都是核心代码，所以我需要进行说明：<br><strong>1、</strong>首先用户支付以后得到的是一个支付订单，订单里面有很多信息，因此我们使用map这个图来进行数据存取，key是订单号，value则是订单值。然后我们需要去数据库里面查询订单是否存在，，所以看到这行代码<code>Order order=orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</code>就说明我们需要打开OrderMapper.java文件，新增sql查询方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">Order selectOrderByUserIdAndOrderNo(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;OrderNo&quot;) Long OrderNo);</span><br></pre></td></tr></table></figure></p><p>接着打开OrderMapper.xml，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectOrderByUserIdAndOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line">  and order_no =#&#123;OrderNo&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>后面的那些代码就是支付宝的当面付生成二维码的核心代码，你打开Main.java文件，找到test_trade_precreate这个方法，大概是第371行代码到文件末尾。大家注意两行<code>///////</code>之间的代码，这里是自己定义的逻辑，因为上面的goodsDetailList还没有信息，因此我们需要往里面添加信息。我们根据orderId和userId来拿到这个orderItemList，然后遍历这个列表，把我们的GoodsDetail给填充上，最后添加到goodsDetailList列表中。</p><p>同样看到这行代码<code>List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo);</code>就说明我们需要打开OrderItemMapper.java文件，新增sql查询方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">List&lt;OrderItem&gt; getOrderItemByUserIdAndOrderNo(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;orderNo&quot;)Long orderNo);</span><br></pre></td></tr></table></figure></p><p>接着打开OrderItemMapper.xml，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getOrderItemByUserIdAndOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order_item</span><br><span class="line">  where order_no =#&#123;orderNo&#125;</span><br><span class="line">  and user_id =#&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>3、</strong>注意这行代码<code>setNotifyUrl(PropertiesUtil.getProperty(PropertiesUtil.getProperty(&quot;alipay.callback.url&quot;)))//支付宝服务器主动通知商户服务器里指定的页面http路径,根据需要设置</code>。针对这个，我们需要打开store.propertise文件，配置这个属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alipay.callback.url=http://store.licheetools.top/order/alipay_callback.do</span><br></pre></td></tr></table></figure></p><p>当然如果前面配置了这个信息，现在就可以不配置了。<br><strong>4、</strong>后面代码的意思生成的二维码如何保存到服务器上，以及存放的位置。这个<code>dumpResponse</code>函数你就可以直接拿来使用了。</p><p>最后别忘记在sevcice包下面新建一个IOrderService接口类，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line"></span><br><span class="line">public interface IOrderService &#123;</span><br><span class="line">    ServerResponse pay(Long orderNo, Integer userId, String path);   //支付宝当面付</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样关于支付宝当面付的功能开发，我们就完成了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;前面那些都是一些铺垫，从现在开始我们正式进入到项目的支付宝实战阶段。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十三）：支付宝官方文档简要说明</title>
    <link href="http://blog.licheetools.top/2018/09/01/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/"/>
    <id>http://blog.licheetools.top/2018/09/01/SSM搭建二手市场交易平台（二十三）：支付宝官方文档简要说明/</id>
    <published>2018-09-01T05:21:06.000Z</published>
    <updated>2019-04-15T14:19:29.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本部分我们来进行支付宝官方文档简要说明，里面有些东西挺难理解的。。。</p><h2 id="沙箱环境"><a href="#沙箱环境" class="headerlink" title="沙箱环境"></a>沙箱环境</h2><p>首先点击这里进行<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=tool" target="_blank" rel="noopener">注册</a>，选择个人开发即可。接着点击<a href="https://docs.open.alipay.com/54/104506/" target="_blank" rel="noopener">这里</a>下载当面付DEMO，这里选择java版。然后可以点击<a href="https://docs.open.alipay.com/54/103419/" target="_blank" rel="noopener">这里</a>参看下载文档。</p><p>然后就直接打开Demo项目，这是一个web项目，需要配置jdk和其他环境，具体如下：打开zfbinfo.properties文件，修改以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open_api_domain = https://openapi.alipay.com/gateway.do</span><br><span class="line">mcloud_api_domain = http://mcloudmonitor.com/gateway.do</span><br><span class="line">pid = 此处请填写你的PID</span><br><span class="line">appid = 此处请填写你当面付的APPID</span><br></pre></td></tr></table></figure></p><p>分别对应这个<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">沙箱页面</a>的图中所示信息：<br>第一行代码对应2，第二行不用修改，第三行对应1，第四行对应3:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0c244279f110ab44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是RSA私钥、公钥和支付宝公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># RSA私钥、公钥和支付宝公钥</span><br><span class="line">private_key = 此处请填写你的商户私钥且转PKCS8格式</span><br><span class="line">public_key = 此处请填写你的商户公钥</span><br></pre></td></tr></table></figure></p><p>点击这里下载<a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">生成RSA密钥工具</a>，然后按照要求生成密匙：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cc73a1c96d719aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是SHA256withRsa对应支付宝公钥（其中SHAwithRsa公钥已经废弃）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alipay_public_key=</span><br></pre></td></tr></table></figure></p><p>回到<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">沙箱环境页面</a>，点击出现的图中所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d56db2e5cd902f25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-434334e4b54d7522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后把刚才上面的public_key复制进去，就会得到支付宝公钥，填到那里即可：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-12aa1bf0ae50c79c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们相关的配置就弄好了，接下来就可以直接去运行main方法了（不要设置tomcat服务器）</p><p>运行结果里面会包含一张二维码链接：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2a583ccf1891e7a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们去百度搜索二维码生成，把链接放进去，就会显示二维码。或者点击这里<a href="https://cli.im/" target="_blank" rel="noopener">草料二维码</a>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-794231b076bc6b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意</strong>如果出现下面的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read time out</span><br><span class="line">......................</span><br><span class="line">com.alipay.demo.trade.Main test_trade_precreate</span><br><span class="line">严重: 系统异常，预下单状态未知!!!</span><br></pre></td></tr></table></figure></p><p>请查看这篇文章：<a href="https://my.oschina.net/u/3659713/blog/2992158" target="_blank" rel="noopener">支付宝沙箱demo运行出现read timed out的解决办法</a>，因此从这里开始，我java版本变成了<strong>java8</strong>，不再使用java10了，大家一定要注意。</p><p>接着你点击<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=tool" target="_blank" rel="noopener">这里</a>下载沙箱安卓版：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cf308da3125b4668.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=account" target="_blank" rel="noopener">这里</a>获取买家和卖家的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e20142ce3f78b312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记住沙箱APP账号只能是上面的，不能使用自己真实的信息。</p><p>具体的可以参考这篇文章，这篇挺详细的：<a href="https://blog.csdn.net/DuTianTian_csdn/article/details/80777780" target="_blank" rel="noopener">支付宝沙箱环境demo测试</a>和这一篇<a href="http://blog.51cto.com/zero01/2128909" target="_blank" rel="noopener">【Java版】接入支付宝当面付功能-沙箱环境</a></p><p>然后扫描二维码，就能付款了。</p><p>注意在使用java8的时候，需要修改java10的配置：打开File–&gt;Project Structure，然后具体的配置按照图片所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d1869905d8fab536.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b00ccb4206321854.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ef970506705fe2d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-936c4c3d3763d018.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意上面4个地方的配置，一个都不能少，否则就会报错，切记切记。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本部分我们来进行支付宝官方文档简要说明，里面有些东西挺难理解的。。。&lt;/p&gt;
&lt;h2 id=&quot;沙箱环境&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十二）：支付宝支付功能对接要点介绍</title>
    <link href="http://blog.licheetools.top/2018/08/31/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E5%AF%B9%E6%8E%A5%E8%A6%81%E7%82%B9%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.licheetools.top/2018/08/31/SSM搭建二手市场交易平台（二十二）：支付宝支付功能对接要点介绍/</id>
    <published>2018-08-31T04:21:06.000Z</published>
    <updated>2019-04-15T14:18:44.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本部分我们来完成支付宝支付功能的开发，具体包括支付宝对接，支付回调以及查询支付状态的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>本模块主要介绍支付宝对接，支付回调以及查询支付状态这三个部分。</p><h2 id="学会技能"><a href="#学会技能" class="headerlink" title="学会技能"></a>学会技能</h2><p>在本模块中，你将会学到支付宝对接核心文档，调用支付宝支付功能官方 Demo；解析支付宝 SDK 对接源码；RSA1 和 RSA2 验证签名及加密；避免支付宝重复通知和数据校验；natapp 外网穿透和 Tomcat remote debug以及生成二维码，并持久化到图片服务器等功能。</p><h2 id="数据表的设计"><a href="#数据表的设计" class="headerlink" title="数据表的设计"></a>数据表的设计</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3387e341a1b80242.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付宝支付功能对接要点介绍"><a href="#支付宝支付功能对接要点介绍" class="headerlink" title="支付宝支付功能对接要点介绍"></a>支付宝支付功能对接要点介绍</h2><p>1、一些重要的官方文档<br>2、沙箱调试环境（买家账号测试，商家账号测试）<br>3、支付宝扫码支付主业务流程<br>4、支付宝扫码支付流程<br>5、支付宝扫码支付重要的字段<br>6、支付宝扫码支付重要细节<br>7、支付宝扫码支付对接技巧<br>8、支付宝扫码支付官方 Demo 调试</p><h2 id="沙箱调试环境"><a href="#沙箱调试环境" class="headerlink" title="沙箱调试环境"></a>沙箱调试环境</h2><p>蚂蚁沙箱环境（Beta）：是协助开发者进行接口功能开发及主要功能联调的辅助环境，沙箱环境模拟了开放平台部分产品的主要功能和主要逻辑（参考“沙箱支持产品列表”），为保证沙箱文档，沙箱环境测试数据会进行定期数据清理，Beta 测试阶段每日的 21:00 至次日的 9:00 为维护时间，在此时间内沙箱环境部分功能可能会不可用。</p><p>为保证沙箱稳定，沙箱环境测试数据会进行定期数据清理。Beta测试阶段每周日中午12点至每周一中午12点为维护时间。在此时间内沙箱环境部分功能可能会不可用，敬请谅解。</p><h2 id="支付宝扫码支付主业务流程"><a href="#支付宝扫码支付主业务流程" class="headerlink" title="支付宝扫码支付主业务流程"></a>支付宝扫码支付主业务流程</h2><p>这里的流程其实最主要是指当面付这个模块，你可以点击<a href="https://docs.open.alipay.com/194/105072/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付主业务流程：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-921ba25f7110e1d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>以及条码支付，所谓的条码支付是指：支付宝给到线下传统行业的一种收款方式。商户使用扫码枪等条码识别设备扫描用户支付宝钱包上的条码/二维码，完成收款。用户仅需出示付款码，所有操作由商户端完成。</p><p>你可以点击<a href="https://docs.open.alipay.com/194/105170/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝条码支付流程：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9f3a40283e7c7430.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付宝扫码支付重要的字段"><a href="#支付宝扫码支付重要的字段" class="headerlink" title="支付宝扫码支付重要的字段"></a>支付宝扫码支付重要的字段</h2><p>你可以点击<a href="https://docs.open.alipay.com/194/105170/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付重要的字段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b42b95087e37c19d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有其他的关键字段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-54bec8230875109b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="交易状态说明"><a href="#交易状态说明" class="headerlink" title="交易状态说明"></a>交易状态说明</h3><p>你可以点击<a href="https://docs.open.alipay.com/59/103672" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付交易状态说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-66df13fef4e1da13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="通知触发条件"><a href="#通知触发条件" class="headerlink" title="通知触发条件"></a>通知触发条件</h2><p>你可以点击<a href="https://docs.open.alipay.com/59/103666/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付通知触发条件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6e327f3f0d48f885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付渠道说明"><a href="#支付渠道说明" class="headerlink" title="支付渠道说明"></a>支付渠道说明</h2><p>你可以点击<a href="https://docs.open.alipay.com/common/103259" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付渠道说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-134ccf1044058512.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们后面会使用到第二个，支付宝账户，也就是余额。</p><h2 id="支付宝扫码支付的重要细节"><a href="#支付宝扫码支付的重要细节" class="headerlink" title="支付宝扫码支付的重要细节"></a>支付宝扫码支付的重要细节</h2><p>1、主动轮询和回调的区别</p><blockquote><p>我从网上找了一个比较有意思的介绍，你可以看一下：<br>轮询：过10分钟就到女朋友宿舍前面去看她有没有回来、没回来我就再去打游戏。<br>监听：我搬个凳子坐到她宿舍前、直到她回来。<br>回调：在她门口贴个条子：回来后请打电话至011 。</p></blockquote><p>2、避免单边账</p><blockquote><p>所谓“单边账”，即完成取(存)款操作后，银行与用户只有一方账面发生相应变化。</p></blockquote><p>3、同步请求的加签和验证签名</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9eb0f4cfc84eff61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2137c76c44f5720c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、回调的验证（签名、金额、订单号、订单状态、交易状态、商户 id）</p><p>5、过滤掉重复的通知</p><p>6、一定要验证并确保可接受的异步通知是支付宝发出的</p><p>7、回调请求返回</p><blockquote><p>程序执行完后必须打印输出“success”（不包含引号），如果商户反馈给支付宝的字符不是 success 这 7 个字符，支付宝服务器会不断重发通知，直到超过 24 小时 22 分钟，一般情况下，25 小时以内完成 8 次通知。（通知的间隔频率一般是：4m，10m，10m，1h，2h，6h，15h）</p></blockquote><h2 id="支付宝扫码支付对接技巧"><a href="#支付宝扫码支付对接技巧" class="headerlink" title="支付宝扫码支付对接技巧"></a>支付宝扫码支付对接技巧</h2><h3 id="回调的调试方法"><a href="#回调的调试方法" class="headerlink" title="回调的调试方法"></a>回调的调试方法</h3><p>1、路由器设置开放本地到外网（不推荐）</p><p>2、外网远程 debug（保持远端代码版本和本地代码一致，及时关闭开放的debug端口）</p><p>3、内网穿透（ngrok，natapp、花生壳）</p><h3 id="外网远程debug"><a href="#外网远程debug" class="headerlink" title="外网远程debug"></a>外网远程debug</h3><p>1、保持远端代码版本和本地代码版本一致</p><p>2、执行 sudo vim ${tomcat}/bin/catalina.sh 进行编辑</p><p>3、添加如下配置，其中 address 为开放远程 debug 的端口号 CATALINA_OPTS=”-server -Xdebug -Xnoagent -Djava.compile=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005”</p><p>4、把开放远程 debug 的端口加到防火墙配置中</p><p>5、及时关闭开放的 debug 端口</p><p>6、编辑 sudo vim /etc/sysconfig/iptables</p><p>7、添加如下配置 -A INPUT -p tcp -m tcp –dport 5005 -j ACCEPT</p><p>8、:wq 保存退出</p><p>9、重启防火墙 sudo service iptables restart</p><h3 id="内网穿透（ngrok、natapp、花生壳）"><a href="#内网穿透（ngrok、natapp、花生壳）" class="headerlink" title="内网穿透（ngrok、natapp、花生壳）"></a>内网穿透（ngrok、natapp、花生壳）</h3><p>1、登录 <a href="https://natapp.cn" target="_blank" rel="noopener">https://natapp.cn</a></p><p>2、注册账号、可以选择是否购买隧道还是使用免费隧道</p><p>3、设置对外开放的端口</p><p>4、下载对应的客户端，如果是 Linux 或 mac 请执行 sudo chmod a+x 赋予用户、用户组、其他用户执行权限</p><p>5、按照官网操作说明运行程序，加入 authtoken 参数</p><p>6、通过开放的外网域名进行访问测试</p><p>这样本篇关于支付宝支付功能对接要点介绍就到这里了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本部分我们来完成支付宝支付功能的开发，具体包括支付宝对接，支付回调以及查询支付状态的开发，里面涉及到的知识点挺多的，需要好好
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十一）：收货地址模块开发</title>
    <link href="http://blog.licheetools.top/2018/08/30/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/08/30/SSM搭建二手市场交易平台（二十一）：收货地址模块开发/</id>
    <published>2018-08-30T11:21:06.000Z</published>
    <updated>2019-04-15T14:17:58.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成收货地址模块功能的开发，具体包括收货地址的增删改查操作，分页列表以及地址详情等功能的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>本模块具体包括以下几个功能：添加地址；删除地址；更新地址；地址列表；地址分页和地址详情等。</p><h2 id="学会技能"><a href="#学会技能" class="headerlink" title="学会技能"></a>学会技能</h2><p>在本模块中，你将会学到SpringMVC数据绑定中对象绑定；Mybatis 自动生成主键、配置和使用；如何避免横向越权漏洞的巩固。</p><h2 id="数据表的设计"><a href="#数据表的设计" class="headerlink" title="数据表的设计"></a>数据表的设计</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-97a8dd7b5126731e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="收货地址增加"><a href="#收货地址增加" class="headerlink" title="收货地址增加"></a>收货地址增加</h2><p>首先我们打开controller这个包下面的portal包，在里面新建一个ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.portal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IShippingService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/shipping/&quot;)  //这是我们对整个前台商品功能配置的一个类似于namespace的东西</span><br><span class="line">public class ShippingController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IShippingService iShippingService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的增加</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;add.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse add(HttpSession session, Shipping shipping)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line">        //实现我们前台收货地址增加的逻辑</span><br><span class="line">        return iShippingService.add(user.getId(),shipping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包，新建IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line"></span><br><span class="line">public interface IShippingService &#123;</span><br><span class="line">    ServerResponse add(Integer userId, Shipping shipping);    //前台--收货地址的增加</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的Impl包，我们新建一个接口的实现类ShippingServiceImpl.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.ShippingMapper;</span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line">import top.store.service.IShippingService;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iShippingService&quot;)</span><br><span class="line">public class ShippingServiceImpl implements IShippingService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ShippingMapper shippingMapper;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的增加</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse add(Integer userId,Shipping shipping)&#123;</span><br><span class="line">        shipping.setUserId(userId);   //shipping对象中的userId，我们直接从前台登录中的session中获取</span><br><span class="line">        int rowCount =shippingMapper.insert(shipping);   //这样我们刚才获取到的userId就能直接使用了</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            //我们和前端约定，增加后返回shippingId，而且这个key就是shippingId，这样我们就能直接利用map来获取相关信息了</span><br><span class="line">            Map resultMap = Maps.newHashMap();</span><br><span class="line">            resultMap.put(&quot;shippingId&quot;,shipping.getId());</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;创建新地址成功！&quot;,resultMap);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;创建新地址失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，我们这里shipping对象中的userId，是直接从前台登录中的session中获取的。我们希望使用map来完成添加收货地址的功能，但是数据库中的<code>shippingMapper.insert(shipping);</code>里面主键id不能立即获取并使用，因此我们需要将主键赋值到自己定义的keyProperty中，这样就能立即获取了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- useGeneratedKeys=&quot;true&quot;把新增加的主键赋值到自己定义的keyProperty（id）中 --&gt;</span><br><span class="line">&lt;insert id=&quot;insert&quot; parameterType=&quot;top.store.pojo.Shipping&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line">  insert into store_shipping (id, user_id, receiver_name, </span><br><span class="line">    receiver_phone, receiver_mobile, receiver_province, </span><br><span class="line">    receiver_city, receiver_district, receiver_address, </span><br><span class="line">    receiver_zip, create_time, update_time</span><br><span class="line">    )</span><br><span class="line">  values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;userId,jdbcType=INTEGER&#125;, #&#123;receiverName,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;receiverPhone,jdbcType=VARCHAR&#125;, #&#123;receiverMobile,jdbcType=VARCHAR&#125;, #&#123;receiverProvince,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;receiverCity,jdbcType=VARCHAR&#125;, #&#123;receiverDistrict,jdbcType=VARCHAR&#125;, #&#123;receiverAddress,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;receiverZip,jdbcType=VARCHAR&#125;, now(), now()</span><br><span class="line">    )</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">&lt;!--useGeneratedKeys 取值范围true|false 默认值是：false。 含义：设置是否使用JDBC的getGenereatedKeys方法获取主键并赋值到keyProperty设置的领域模型属性中。--&gt;</span><br></pre></td></tr></table></figure></p><p>也就是第二行代码变成上面的样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insert&quot; parameterType=&quot;top.store.pojo.Shipping&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址增加的功能就实现了，接下来完成收货地址删除的功能。</p><h2 id="收货地址删除"><a href="#收货地址删除" class="headerlink" title="收货地址删除"></a>收货地址删除</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的删除</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;del.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse del(HttpSession session,Integer shippingId)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址删除的逻辑</span><br><span class="line">    return iShippingService.del(user.getId(),shippingId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的删除</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;String&gt; del(Integer userId,Integer shippingId)&#123;</span><br><span class="line">        //注意这里会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的</span><br><span class="line">//       int rowCount = shippingMapper.deleteByPrimaryKey(shippingId);</span><br><span class="line">        int rowCount = shippingMapper.deleteShippingByUserIdAndShippingId(userId,shippingId);</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;删除收货地址成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;删除收货地址失败&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注意如果你使用<code>int rowCount = shippingMapper.deleteByPrimaryKey(shippingId);</code>就会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">int deleteShippingByUserIdAndShippingId(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;shippingId&quot;) Integer shippingId);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=&quot;deleteShippingByUserIdAndShippingId&quot;  parameterType=&quot;map&quot;&gt;</span><br><span class="line">  delete from store_shipping</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line">  and id =#&#123;shippingId&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; del(Integer userId,Integer shippingId);    //前台--收货地址的删除</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址删除的功能就实现了，接下来完成收货地址修改的功能。</p><h2 id="收货地址修改"><a href="#收货地址修改" class="headerlink" title="收货地址修改"></a>收货地址修改</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的更新</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;update.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse update(HttpSession session,Shipping shipping)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址更新的逻辑</span><br><span class="line">    return iShippingService.update(user.getId(),shipping);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的更新</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse update(Integer userId,Shipping shipping)&#123;</span><br><span class="line">        shipping.setUserId(userId);   //shipping对象中的userId，我们直接从前台登录中的session中获取</span><br><span class="line">        //注意这里会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的</span><br><span class="line">//        int rowCount =shippingMapper.insert(shipping);   //这样我们刚才获取到的userId就能直接使用了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //自己定义的sql语句方法</span><br><span class="line">        int rowCount =shippingMapper.updateByShipping(shipping);</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            //注意这里不需要将id进行返回给前端，因为前面已经获取到了</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;更新新地址成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;更新新地址失败&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注意如果你使用<code>int rowCount =shippingMapper.insert(shipping);</code>就会产生横向越权问题，因为这个update语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int updateByShipping(Shipping record);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意这里面的userId是不可以更改的，所以一定要从set里面去掉，而且and语句最后的括号一定要去掉--&gt;</span><br><span class="line">&lt;update id=&quot;updateByShipping&quot; parameterType=&quot;top.store.pojo.Shipping&quot;&gt;</span><br><span class="line">  update store_shipping</span><br><span class="line">  set</span><br><span class="line">    receiver_name = #&#123;receiverName,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_phone = #&#123;receiverPhone,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_mobile = #&#123;receiverMobile,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_province = #&#123;receiverProvince,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_city = #&#123;receiverCity,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_district = #&#123;receiverDistrict,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_address = #&#123;receiverAddress,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_zip = #&#123;receiverZip,jdbcType=VARCHAR&#125;,</span><br><span class="line">    create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">    update_time = now()</span><br><span class="line">  where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  and user_id = #&#123;userId,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>看到没有，这里的update语句和里面提供sql语句非常相似，但是记住里面的userId是不可以更改的，所以一定要从set里面去掉，而且and语句最后的括号一定要去掉。关于第一行代码的来源，大家可以自行查看原生的sql语句。</p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse update(Integer userId,Shipping shipping);   //前台--收货地址的更新</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址修改的功能就实现了，接下来完成收货地址查询的功能。</p><h2 id="收货地址查询"><a href="#收货地址查询" class="headerlink" title="收货地址查询"></a>收货地址查询</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的查询</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;select.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;Shipping&gt; select(HttpSession session,Integer shippingId)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址查询的逻辑</span><br><span class="line">    return iShippingService.select(user.getId(),shippingId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的查询</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;Shipping&gt; select(Integer userId,Integer shippingId)&#123;</span><br><span class="line">        //注意这里会产生横向越权问题，因为这个select语句里面没有与用户进行绑定，因此是不可以使用的</span><br><span class="line">//        int rowCount =shippingMapper.selectByPrimaryKey(shippingId);</span><br><span class="line">        Shipping shipping =shippingMapper.selectByUserIdAndShippingId(userId,shippingId);</span><br><span class="line">        if(shipping == null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无法查询到该地址&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createBySuccess(&quot;该地址查询到了！&quot;,shipping);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注意如果你使用<code>int rowCount =shippingMapper.selectByPrimaryKey(shippingId);</code>就会产生横向越权问题，因为这个select语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">Shipping selectByUserIdAndShippingId(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;shippingId&quot;) Integer shippingId);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByUserIdAndShippingId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">        from store_shipping</span><br><span class="line">        where id = #&#123;shippingId&#125;</span><br><span class="line">        and user_id = #&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;Shipping&gt; select(Integer userId,Integer shippingId);   //前台--收货地址的查询</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址查询的功能就实现了，接下来完成收货地址详情分页的功能。</p><h2 id="收货地址详情分页"><a href="#收货地址详情分页" class="headerlink" title="收货地址详情分页"></a>收货地址详情分页</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的列表分页</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; list(HttpSession session, @RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum, @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址的列表分页的逻辑</span><br><span class="line">  return iShippingService.list(user.getId(),pageNum,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * 前台--收货地址的列表分页</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; list(Integer userId,int pageNum,int pageSize)&#123;</span><br><span class="line">    //开始分页</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">    //根据用户id来查询shipping对象</span><br><span class="line">    List&lt;Shipping&gt; shippingList =shippingMapper.selectShippingByUserId(userId);</span><br><span class="line"></span><br><span class="line">    //构造PageInfo对象</span><br><span class="line">    PageInfo pageInfo =new PageInfo(shippingList);</span><br><span class="line"></span><br><span class="line">    //返回PageInfo对象</span><br><span class="line">    return ServerResponse.createBySuccess(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意如看到<code>shippingMapper.selectShippingByUserId(userId);</code>就知道应该打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Shipping&gt; selectShippingByUserId(Integer userId);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意一个参数使用int或者map都是可以的--&gt;</span><br><span class="line">&lt;select id=&quot;selectShippingByUserId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_shipping</span><br><span class="line">    where user_id =#&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; list(Integer userId, int pageNum, int pageSize);     //前台--收货地址的列表分页</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址详情分页的功能就实现了，至此所有关于购物车的模块功能就全部实现了。接下来是模块测试，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来完成收货地址模块功能的开发，具体包括收货地址的增删改查操作，分页列表以及地址详情等功能的开发，里面涉及到的知识点挺
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（二十）：购物车商品的状态设置</title>
    <link href="http://blog.licheetools.top/2018/08/29/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E7%9A%84%E7%8A%B6%E6%80%81%E8%AE%BE%E7%BD%AE/"/>
    <id>http://blog.licheetools.top/2018/08/29/SSM搭建二手市场交易平台（二十）：购物车商品的状态设置/</id>
    <published>2018-08-29T08:21:06.000Z</published>
    <updated>2019-04-15T14:17:10.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇主要介绍如何实现购物车商品的全选，全反选，单选，单反选以及购物车商品数量查询等功能。</p><h2 id="购物车商品的全选"><a href="#购物车商品的全选" class="headerlink" title="购物车商品的全选"></a>购物车商品的全选</h2><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品全选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;select_all.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; selectAll(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品全选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelect(user.getId(),null,Const.Cart.CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品全选或者全反选</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;CartVo&gt; selectOrUnSelect(Integer userId,Integer productId,Integer checked)&#123;</span><br><span class="line">    cartMapper.checkedOrUncheckedProduct(userId,productId,checked);</span><br><span class="line">    return this.list(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下，之前我们最后返回的都是两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">return ServerResponse.createBySuccess(cartVo);</span><br></pre></td></tr></table></figure></p><p>但是呢，前面我们也说过因为这两行代码已经被list进行封装了，因此现在直接调用list即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return this.list(userId);</span><br></pre></td></tr></table></figure></p><p>看到<code>cartMapper.checkedOrUncheckedProduct(userId,productId,checked);</code>这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">int checkedOrUncheckedProduct(@Param(&quot;userId&quot;) Integer userId,@Param(&quot;productId&quot;)Integer productId,@Param(&quot;checked&quot;) Integer checked);</span><br></pre></td></tr></table></figure></p><p>紧接着去CartMapper.xml文件里面新增sql查询语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意set多个值时，需要用逗号隔开--&gt;</span><br><span class="line">  &lt;update id=&quot;checkedOrUncheckedProduct&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    update store_cart</span><br><span class="line">    set checked  =#&#123;checked&#125;，</span><br><span class="line">    update_time =now()</span><br><span class="line">    where user_id =#&#123;userId&#125;</span><br><span class="line">&lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">    and product_id = #&#123;productId&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>有人可能要问了，你全选与全反选是不需要商品id的，那在这里写干嘛，的确是不需要，但是我们后面要实现的单选和单反选却是需要的，因此写在这里只是为了后面代码更好的复用。这也就是我们为什么将参数productId设置为null的原因。<br>最后打开ICartService.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; selectOrUnSelectAll(Integer userId,Integer productId,Integer checked);   //前台购物车商品全选或者全反选,或者单选，或者单反选</span><br></pre></td></tr></table></figure></p><p>接下来完成购物车商品的全反选功能，这个和全选相反，你除了需要修改控制器controller里面的代码以外，其余的代码就可以不要修改了。</p><h2 id="购物车商品的全反选"><a href="#购物车商品的全反选" class="headerlink" title="购物车商品的全反选"></a>购物车商品的全反选</h2><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品全反选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;un_select_all.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; unSelectAll(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品全选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelectAll(user.getId(),null,Const.Cart.UN_CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就可以了，是不是超级简单。</p><h2 id="购物车商品的单选"><a href="#购物车商品的单选" class="headerlink" title="购物车商品的单选"></a>购物车商品的单选</h2><p>想起我们前面做的工作了莫，这个依旧很简单，和我们购物车商品的全反选操作一样。打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品单选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;select_one.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; selectOne(HttpSession session,Integer productId)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品单选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelect(user.getId(),productId,Const.Cart.CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说了两次，那么购物车商品的单反选，你也就知道了吧！</p><h2 id="购物车商品的单反选"><a href="#购物车商品的单反选" class="headerlink" title="购物车商品的单反选"></a>购物车商品的单反选</h2><p>打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品单反选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;un_select_one.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; UnSelectOne(HttpSession session,Integer productId)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品单反选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelect(user.getId(),productId,Const.Cart.UN_CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来完成购物车商品数量查询这个功能，这个也还是简单的。</p><h2 id="购物车商品数量查询"><a href="#购物车商品数量查询" class="headerlink" title="购物车商品数量查询"></a>购物车商品数量查询</h2><p>这里的购物车商品数量查询是说，当你查询当前用户的购物车里面的商品数量时,假设一个商品有 8个,那么数量就是 8，我们是不按照商品种类来算，而是按数量算的，这也是目前电商的通用做法。</p><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品数量查询</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;get_cart_product_count.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;Integer&gt; getCartProductCount(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录，那么就返回0</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createBySuccess(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品数量查询的逻辑</span><br><span class="line">    return iCartService.getCartProductCount(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品数量查询</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;Integer&gt; getCartProductCount(Integer userId)&#123;</span><br><span class="line">    if(userId ==null)&#123;</span><br><span class="line">        return ServerResponse.createBySuccess(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //购物车商品数量查询</span><br><span class="line">    return ServerResponse.createBySuccess(cartMapper.selectCartProductCount(userId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到<code>cartMapper.selectCartProductCount(userId)</code>这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int selectCartProductCount(Integer userId);</span><br></pre></td></tr></table></figure></p><p>然后去CartMapper.xml文件里面新增sql语句：(其中select * as count 是给它起了一个别称)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartProductCount&quot; parameterType=&quot;int&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">  select sum(quantity) as count</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id = #&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>不过这样做有一个问题，就是我们前面返回的是一个int，假设我们这个sql语句最后返回的是0,而你知道Int类型是不能传给0给它的，因此可以将代码代码修改如下，使用<code>IFNULL(sum(quantity),0)</code>，就是说默认就是0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartProductCount&quot; parameterType=&quot;int&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">  select IFNULL(sum(quantity),0) as count</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id = #&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>当然你也可以使用另一种方法，就是修改CartMapper.java文件的返回类型，修改为<code>Integer</code>这一也是可以的。</p><p>然后就是关于购物车模块的接口测试了，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了。</p><p>这样我们本篇关于如何实现购物车商品的全选，全反选，单选，单反选以及购物车商品数量查询等功能的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇主要介绍如何实现购物车商品的全选，全反选，单选，单反选以及购物车商品数量查询等功能。&lt;/p&gt;
&lt;h2 id=&quot;购物车商品
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十九）：购物车更新删除查询商品</title>
    <link href="http://blog.licheetools.top/2018/08/28/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%9F%A5%E8%AF%A2%E5%95%86%E5%93%81/"/>
    <id>http://blog.licheetools.top/2018/08/28/SSM搭建二手市场交易平台（十九）：购物车更新删除查询商品/</id>
    <published>2018-08-28T07:21:06.000Z</published>
    <updated>2019-04-15T14:16:15.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇主要介绍如何将更新、删除和查询购物车里面的商品功能进行实现。</p><h2 id="更新购物车商品"><a href="#更新购物车商品" class="headerlink" title="更新购物车商品"></a>更新购物车商品</h2><p>其实所谓的更新购物车商品就是更新商品在购物车里面的数量罢了。我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *  前台修改购物车里面的商品（其实就是商品的数量）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;update.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; update(HttpSession session, Integer productId, Integer count)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //实现我们修改购物车里面的商品的逻辑</span><br><span class="line">    return iCartService.update(user.getId(),productId,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台修改购物车里面的商品（其实就是商品的数量）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;CartVo&gt; update(Integer userId,Integer productId,Integer count)&#123;</span><br><span class="line">    //传入的参数不正确</span><br><span class="line">    if(productId ==null ||count ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //去购物车里面更新相关的信息</span><br><span class="line">    Cart cart  =cartMapper.selectCartByUserIdAndProductId(userId,productId);</span><br><span class="line">    cart.setQuantity(count);</span><br><span class="line">    cartMapper.updateByPrimaryKeySelective(cart);</span><br><span class="line"></span><br><span class="line">    CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">    return ServerResponse.createBySuccess(cartVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后打开ICartService.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; update(Integer userId,Integer productId,Integer count);    //前台修改购物车里面的商品（其实就是商品的数量）</span><br></pre></td></tr></table></figure></p><h2 id="删除购物车商品"><a href="#删除购物车商品" class="headerlink" title="删除购物车商品"></a>删除购物车商品</h2><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *  前台删除购物车里面的商品</span><br><span class="line">    * @author lenovo</span><br><span class="line">    * */</span><br><span class="line">   @RequestMapping(value = &quot;delete_product.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">   @ResponseBody   //自动序列化json功能</span><br><span class="line">   public ServerResponse&lt;CartVo&gt; deleteProduct(HttpSession session, String productIds)&#123;</span><br><span class="line">       //注意这里不需要传递数量，而且可以同时删除多个，因此我们和前端约定使用String类型的productIds同时多个参数以逗号进行分割</span><br><span class="line">       //验证用户是否登录</span><br><span class="line">       User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">       //未登录需要用户强制登录</span><br><span class="line">       if(user ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //实现我们删除购物车里面的商品的逻辑</span><br><span class="line">       return iCartService.deleteProduct(user.getId(),productIds);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *  前台删除购物车里面的商品</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;CartVo&gt; deleteProduct(Integer userId,String productIds)&#123;</span><br><span class="line">        //如果我们自己使用Java提供的方法，我们需要把productIds转成数组，然后再遍历数组添加到集合中</span><br><span class="line">//        String[] productStringList =productIds.split(&quot;,&quot;);</span><br><span class="line">//        List&lt;String&gt; productList =new ArrayList&lt;&gt;();</span><br><span class="line">//        for(String product :productList)&#123;</span><br><span class="line">//          productList.add(product);</span><br><span class="line">//       &#125;</span><br><span class="line"></span><br><span class="line">        //因此，这里我们直接使用guava提供的split方法，直接将其转化为列表，其中on代表以什么为分割线，后面的splitToList就代表转成什么函数</span><br><span class="line">       List&lt;String&gt; productList = Splitter.on(&quot;,&quot;).splitToList(productIds);</span><br><span class="line"></span><br><span class="line">        //判断列表是否是空，如果是空也就是不指定删除什么而去执行删除命令，会报出一个参数非法</span><br><span class="line">        if(CollectionUtils.isEmpty(productList))&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //不为空&lt;也就是我们需要执行删除命令了</span><br><span class="line">        cartMapper.deleteProductByUserIdAndProductIds(userId,productList);</span><br><span class="line"></span><br><span class="line">        CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">        return ServerResponse.createBySuccess(cartVo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里我需要说明几点：<br><strong>1、</strong>我们这里的删除是直接根据商品Id来的，但不是一个Id，我们和前端约定传入String类型的商品id，而且多个id之间通过逗号进行的分割。<br><strong>2、</strong>如果我们自己使用Java提供的方法，我们需要把productIds转成数组，然后再遍历数组添加到列表中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] productStringList =productIds.split(&quot;,&quot;);</span><br><span class="line">List&lt;String&gt; productList =new ArrayList&lt;&gt;();</span><br><span class="line">for(String product :productList)&#123;</span><br><span class="line">productList.add(product);</span><br></pre></td></tr></table></figure></p><p>如果我们直接使用guava提供的split方法，直接将其转化为列表，其中on代表以什么为分割线，后面的splitToList就代表转成什么函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; productList = Splitter.on(&quot;,&quot;).splitToList(productIds);</span><br></pre></td></tr></table></figure></p><p>上面也说了我们后台通过遍历商品id这个列表从而来进行商品的删除操作。<br><strong>3、</strong>看到<code>cartMapper.deleteProductByUserIdAndProductIds(userId,productList);</code>这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">int deleteProductByUserIdAndProductIds(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;productIdList&quot;)List&lt;String&gt; productIdList);</span><br></pre></td></tr></table></figure></p><p>紧接着去CartMapper.xml文件里面新增sql查询语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--删除是使用delete这个节点--&gt;</span><br><span class="line"> &lt;delete id=&quot;deleteProductByUserIdAndProductIds&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  delete from store_cart</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line">  &lt;if test=&quot;productIdList != null&quot;&gt;</span><br><span class="line">    and product_id in</span><br><span class="line">    &lt;foreach collection=&quot;productIdList&quot; item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">      #&#123;item&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure></p><p>在这段代码里面，因为我们需要判断productIdList不为空，而且product_id在我们遍历的列表里面。遍历我们使用了foreach，其中collection表示你即将要遍历的对象，item表示遍历的返回对象，index表示当前迭代的次数，open表示以什么开始，separator表示分割符，close表示以什么结束。具体的可以参考写这篇文章：<a href="https://www.cnblogs.com/ysq0908/p/4695097.html" target="_blank" rel="noopener">MyBatis的foreach语句详解</a></p><p>最后打开ICartService.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; deleteProduct(Integer userId,String productIds);     //前台删除购物车里面的商品</span><br></pre></td></tr></table></figure></p><h2 id="查询购物车商品"><a href="#查询购物车商品" class="headerlink" title="查询购物车商品"></a>查询购物车商品</h2><p>这个功能很简单，因为我们前面增加，删除和修改最后返回的都是CartVo，为什么呢？因为它们都调用了我们这个查询的方法，因此此功能很简单。</p><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台查询购物车里面的商品</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; list(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们查询购物车里面商品的逻辑</span><br><span class="line">    return iCartService.list(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台查询购物车里面的商品</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;CartVo&gt; list(Integer userId)&#123;</span><br><span class="line">    CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">    return ServerResponse.createBySuccess(cartVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后打开ICartService.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; list(Integer userId);   //前台查询购物车里面的商品</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于更新、删除和查询购物车里面的商品功能的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇主要介绍如何将更新、删除和查询购物车里面的商品功能进行实现。&lt;/p&gt;
&lt;h2 id=&quot;更新购物车商品&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十八）：购物车添加商品</title>
    <link href="http://blog.licheetools.top/2018/08/27/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%B7%BB%E5%8A%A0%E5%95%86%E5%93%81/"/>
    <id>http://blog.licheetools.top/2018/08/27/SSM搭建二手市场交易平台（十八）：购物车添加商品/</id>
    <published>2018-08-27T05:21:06.000Z</published>
    <updated>2019-04-15T14:15:23.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本章节我们来介绍购物车模块相关功能的开发，具体包括加入商品；更新商品数；查询商品数；移除商品；单选/取消；全选/取消和购物车列表等这几个功能。本篇主要介绍如何将商品加入到购物车，这里面会定义一些可以复用的购物车代码，还有一些功能：如字段校验，数量校验，价格的动态变化等。</p><h2 id="技能掌握"><a href="#技能掌握" class="headerlink" title="技能掌握"></a>技能掌握</h2><p>1、购物车模块的设计思想；<br>2、如何封装一个高复用的购物车核心方法；<br>3、解决浮点型商业运算中丢失精度的问题；</p><p>数据表设计：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-56a5d44e063c7ba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="商品添加到购物车"><a href="#商品添加到购物车" class="headerlink" title="商品添加到购物车"></a>商品添加到购物车</h2><p>首先我们打开controller这个包下面的portal包，在里面新建一个CartController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.portal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.ICartService;</span><br><span class="line">import top.store.vo.CartVo;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/cart/&quot;)  //这是我们对整个前台商品功能配置的一个类似于namespace的东西</span><br><span class="line">public class CartController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ICartService iCartService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台往购物车添加商品</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;add.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;CartVo&gt; add(HttpSession session, Integer productId, Integer count)&#123;</span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //实现我们购物车添加商品的逻辑</span><br><span class="line">        return iCartService.add(user.getId(),productId,count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开service这个包，在里面新建ICartService接口，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.vo.CartVo;</span><br><span class="line"></span><br><span class="line">public interface ICartService &#123;</span><br><span class="line">    ServerResponse&lt;CartVo&gt; add(Integer userId, Integer productId, Integer count);   //前台购物车添加商品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及在Impl包里面新建一个CartServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line">import org.apache.commons.collections.CollectionUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.CartMapper;</span><br><span class="line">import top.store.dao.ProductMapper;</span><br><span class="line">import top.store.pojo.Cart;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line">import top.store.service.ICartService;</span><br><span class="line">import top.store.util.BigDecimalUtil;</span><br><span class="line">import top.store.util.PropertiesUtil;</span><br><span class="line">import top.store.vo.CartProductVo;</span><br><span class="line">import top.store.vo.CartVo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iCartService&quot;)</span><br><span class="line">public class CartServiceImpl implements ICartService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CartMapper cartMapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台往购物车添加商品</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    //注意此处的add里面必须包含userId，因为这个必须是精确到个人进行购物车的商品添加</span><br><span class="line">    public ServerResponse&lt;CartVo&gt; add(Integer userId,Integer productId,Integer count)&#123;</span><br><span class="line">        //传入的参数不正确</span><br><span class="line">        if(productId ==null ||count ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //去购物车里面查询相关的信息</span><br><span class="line">        Cart cart =cartMapper.selectCartByUserIdAndProductId(userId,productId);   //自定义的sql语句</span><br><span class="line">        if(cart ==null)&#123;</span><br><span class="line">            //该产品不在这个购物车里面,因此需要新增一个这个产品的记录</span><br><span class="line">            Cart cartItem =new Cart();</span><br><span class="line">            cartItem.setQuantity(count);  //往购物车里面添加count数量的商品</span><br><span class="line">            cartItem.setChecked(Const.Cart.CHECKED);   //设置该商品被选中状态（放入购物车的产品是自动被选中的）</span><br><span class="line">            cartItem.setProductId(productId);   //设置商品id</span><br><span class="line">            cartItem.setUserId(userId);    //商品属于用户</span><br><span class="line">            cartMapper.insert(cartItem);   //将商品插入到购物车里面</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //说明该商品已经存在于购物车里.</span><br><span class="line">            //商品已存在,我们就要进行数量相加</span><br><span class="line">            count  =cart.getQuantity() +count;</span><br><span class="line">            cart.setQuantity(count);</span><br><span class="line">            cartMapper.updateByPrimaryKeySelective(cart);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //接下来是核心的功能，如数量判断，值校验，购物车里面的商品也有图片，因此需要组装一个“新的”vo对象。</span><br><span class="line">        CartVo cartVo = this.getCartVoLimit(userId);</span><br><span class="line">        return ServerResponse.createBySuccess(cartVo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建一个用于实现购物车信息的函数</span><br><span class="line">    private CartVo getCartVoLimit(Integer userId)&#123;</span><br><span class="line">        CartVo cartVo =new CartVo();</span><br><span class="line">        List&lt;Cart&gt; cartList =cartMapper.selectCartByUserId(userId);  //自定义的sql语句</span><br><span class="line">        List&lt;CartProductVo&gt; cartProductVoList = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //记住这里一定要使用它的String构造器，否则会出现更大的错误</span><br><span class="line">        BigDecimal cartTotalPrice = new BigDecimal(&quot;0&quot;);</span><br><span class="line"></span><br><span class="line">        if(CollectionUtils.isNotEmpty(cartList))&#123;</span><br><span class="line">            for(Cart cartItem:cartList)&#123;</span><br><span class="line">                CartProductVo cartProductVo =new CartProductVo();</span><br><span class="line">                cartProductVo.setId(cartItem.getId());</span><br><span class="line">                cartProductVo.setUserId(cartItem.getUserId());</span><br><span class="line">                cartProductVo.setProductId(cartItem.getProductId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                //根据购物车里面的商品Id来获取商品的信息</span><br><span class="line">                Product product =productMapper.selectByPrimaryKey(cartItem.getProductId());</span><br><span class="line">                //如果该商品存在的话，我们就使用前面的CartProductVo进行商品的组装(因为CartProductVo本身是一个对象，但是具体需要什么我们需要进行设置)</span><br><span class="line">                if(product != null)&#123;</span><br><span class="line">                    //我们这里之所以不直接从商品对象里获取信息，是因为后面有些是存在于购物车的，有些存在于商品，很容易造成混乱，因此我们这里就使用了一个组装的购物车商品对象，你需要的时候调用它就可以</span><br><span class="line">                    cartProductVo.setProductName(product.getName());</span><br><span class="line">                    cartProductVo.setProductSubtitle(product.getSubtitle());</span><br><span class="line">                    cartProductVo.setProductMainImage(product.getMainImage());</span><br><span class="line">                    cartProductVo.setProductStatus(product.getStatus());</span><br><span class="line">                    cartProductVo.setProductStock(product.getStock());</span><br><span class="line"></span><br><span class="line">                    //判断库存数量</span><br><span class="line">                    int buyLimitCount = 0;</span><br><span class="line">                    if(product.getStock() &gt;= cartItem.getQuantity())&#123;</span><br><span class="line">                        //库存充足的时候，系统会提示LIMIT_NUM_SUCCESS</span><br><span class="line">                        buyLimitCount = cartItem.getQuantity();</span><br><span class="line">                        cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_SUCCESS);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                        //库存不足的时候，系统提示LIMIT_NUM_FAIL</span><br><span class="line">                        buyLimitCount =product.getStock();</span><br><span class="line">                        cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_FAIL);</span><br><span class="line"></span><br><span class="line">                        //自动更新购物车的有效库存</span><br><span class="line">                        Cart cartForQuantity =new Cart();</span><br><span class="line">                        cartForQuantity.setId(cartItem.getId());</span><br><span class="line">                        cartForQuantity.setQuantity(buyLimitCount);</span><br><span class="line">                        cartMapper.updateByPrimaryKeySelective(cartForQuantity);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    //现在更新cartProductVo对象的其他信息</span><br><span class="line">                    cartProductVo.setQuantity(buyLimitCount);</span><br><span class="line">                    //计算该商品的总价，仅仅针对该商品</span><br><span class="line">                    //进行乘法运算:价格*数量，注意这里的单价因为是BigDecimal类型，所以需要转换成double类型，最后再利用工具类的toString调用String构造器</span><br><span class="line">                    //cartProductVo.setProductTotalPrice(BigDecimalUtil.mut(cartProductVo.getProductPrice().doubleValue(),cartProductVo.getQuantity()));  //这样会引发空指针异常</span><br><span class="line">  cartProductVo.setProductTotalPrice(BigDecimalUtil.mut(product.getPrice().doubleValue(),cartProductVo.getQuantity()));</span><br><span class="line">                    cartProductVo.setProductChecked(cartItem.getChecked());   //选中状态使用购物车自带的属性，不用商品自己设置属性</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //如果不判断是否有商品就进行添加购物车操作，会报空指针异常。(其实就是判断购物车是否是处于被选中状态)</span><br><span class="line">                if(cartItem.getChecked()  ==Const.Cart.CHECKED)&#123;</span><br><span class="line">                    //如果已经勾选,就把之前的商品价格添加到整个购物车总价中进行结算</span><br><span class="line">                    //这里面有2个参数，一个是我们在初始化的时候设置的0，另一个就是上面计算出来的ProductTotalPrice，这两个都需要进行double转化</span><br><span class="line">                    cartTotalPrice =BigDecimalUtil.add(cartTotalPrice.doubleValue(),cartProductVo.getProductTotalPrice().doubleValue());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //把我们上面设置的cartProductVo添加到cartProductVoList里面</span><br><span class="line">                cartProductVoList.add(cartProductVo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //把CartProductVo放入到我们的CartVo里面</span><br><span class="line">        cartVo.setCartTotalPrice(cartTotalPrice);</span><br><span class="line">        cartVo.setCartProductVoList(cartProductVoList);</span><br><span class="line">        cartVo.setAllChecked(this.getAllCheckedStatus(userId));</span><br><span class="line">        cartVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));   //这里需要直接从服务器中获取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return cartVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据用户id来判断购物车是否处于选中状态</span><br><span class="line">    public boolean getAllCheckedStatus (Integer userId)&#123;</span><br><span class="line">        if(userId ==null)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果用户不为空</span><br><span class="line">        //这里sql语句结果之所以没有返回boolean是因为我们去数据库里面一般返回的都是int，所以需要进行二次判断</span><br><span class="line">        return cartMapper.selectCartProductCheckedStatusByUserId(userId) ==0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面那个是我们的核心代码，所以我依旧啰嗦几句：<br><strong>1、</strong>首先判断传入的参数是否正确：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(productId ==null ||count ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>看到<code>Cart cart =cartMapper.selectCartByUserIdAndProductId(userId,productId);   //自定义的sql语句</code>就知道需要去dao层的CartMapper.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">Cart selectCartByUserIdAndProductId(@Param(value =&quot;userId&quot; )Integer userId,@Param(value = &quot;productId&quot;) Integer productId);</span><br></pre></td></tr></table></figure></p><p>接着打开mappers包的CartMapper.xml文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartByUserIdAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id=#&#123;userId&#125;</span><br><span class="line">  and  product_id =#&#123;productId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>3、</strong>继续回到CartServiceImpl.java文件，我们发现该产品不在这个购物车里面,因此需要新增一个这个产品的记录，而且商品的选中是自动的，也就是需要设置一个常量。我们能打开common包下面的const文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Cart&#123;</span><br><span class="line">    int CHECKED = 1;//购物车选中状态</span><br><span class="line">    int UN_CHECKED = 0;//购物车中未选中状态</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4、</strong>接下来是核心的功能，如数量判断，值校验，购物车里面的商品也有图片，因此需要组装一个“新的”vo对象。因此，我们需要在Vo这个包里面，新建两个java类，一个是CartProductVo，它是结合了购物车和商品的对象，因此你可以去购物车和商品对象中选择你所需要的字段，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class CartProductVo &#123;</span><br><span class="line"></span><br><span class="line">    //本vo是结合了购物车和商品的对象，因此你可以去购物车和商品对象中选择你所需要的字段</span><br><span class="line">    private Integer id;  //购物车id</span><br><span class="line">    private Integer userId;</span><br><span class="line">    private Integer productId;</span><br><span class="line">    private Integer quantity;  //购物车中商品的数量</span><br><span class="line">    private String productName;   //商品名称</span><br><span class="line">    private String productSubtitle;   //商品子标题</span><br><span class="line">    private String productMainImage;  //商品主图</span><br><span class="line">    private BigDecimal productPrice;  //商品价格</span><br><span class="line">    private Integer productStatus;   //商品状态</span><br><span class="line">    private BigDecimal productTotalPrice;  //商品总价</span><br><span class="line">    private Integer productStock;   //商品库存</span><br><span class="line">    private Integer productChecked;//商品是否勾选</span><br><span class="line"></span><br><span class="line">    private String limitQuantity;//用于限制数量的一个返回结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getUserId() &#123;</span><br><span class="line">        return userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(Integer userId) &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductId() &#123;</span><br><span class="line">        return productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductId(Integer productId) &#123;</span><br><span class="line">        this.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getQuantity() &#123;</span><br><span class="line">        return quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setQuantity(Integer quantity) &#123;</span><br><span class="line">        this.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductName() &#123;</span><br><span class="line">        return productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductName(String productName) &#123;</span><br><span class="line">        this.productName = productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductSubtitle() &#123;</span><br><span class="line">        return productSubtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductSubtitle(String productSubtitle) &#123;</span><br><span class="line">        this.productSubtitle = productSubtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductMainImage() &#123;</span><br><span class="line">        return productMainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductMainImage(String productMainImage) &#123;</span><br><span class="line">        this.productMainImage = productMainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getProductPrice() &#123;</span><br><span class="line">        return productPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductPrice(BigDecimal productPrice) &#123;</span><br><span class="line">        this.productPrice = productPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductStatus() &#123;</span><br><span class="line">        return productStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductStatus(Integer productStatus) &#123;</span><br><span class="line">        this.productStatus = productStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getProductTotalPrice() &#123;</span><br><span class="line">        return productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductTotalPrice(BigDecimal productTotalPrice) &#123;</span><br><span class="line">        this.productTotalPrice = productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductStock() &#123;</span><br><span class="line">        return productStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductStock(Integer productStock) &#123;</span><br><span class="line">        this.productStock = productStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductChecked() &#123;</span><br><span class="line">        return productChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductChecked(Integer productChecked) &#123;</span><br><span class="line">        this.productChecked = productChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLimitQuantity() &#123;</span><br><span class="line">        return limitQuantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLimitQuantity(String limitQuantity) &#123;</span><br><span class="line">        this.limitQuantity = limitQuantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另一个文件是CartVo，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class CartVo &#123;</span><br><span class="line">    //购物车Vo对象</span><br><span class="line">    private List&lt;CartProductVo&gt; cartProductVoList;   //商品对象</span><br><span class="line">    private BigDecimal cartTotalPrice;  //购物车所有商品总价</span><br><span class="line">    private boolean allChecked;   //购物车是否处于选中状态</span><br><span class="line">    private String imageHost;  //购物车对象的主图</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;CartProductVo&gt; getCartProductVoList() &#123;</span><br><span class="line">        return cartProductVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCartProductVoList(List&lt;CartProductVo&gt; cartProductVoList) &#123;</span><br><span class="line">        this.cartProductVoList = cartProductVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getCartTotalPrice() &#123;</span><br><span class="line">        return cartTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCartTotalPrice(BigDecimal cartTotalPrice) &#123;</span><br><span class="line">        this.cartTotalPrice = cartTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isAllChecked() &#123;</span><br><span class="line">        return allChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAllChecked(boolean allChecked) &#123;</span><br><span class="line">        this.allChecked = allChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5、</strong>我们继续回到CartServiceImpl.java文件，看到这行代码<code>List&lt;Cart&gt; cartList =cartMapper.selectCartByUserId(userId);  //自定义的sql语句</code>就知道需要去dao层的CartMapper.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Cart&gt; selectCartByUserId(Integer UserId);</span><br></pre></td></tr></table></figure></p><p>接着打开mappers包的CartMapper.xml文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartByUserId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>6、</strong>Java中丢失精度的问题是一个值得注意的问题，因此我们需要进行设置。float和double只能用于科学计算和工程计算，商业运算必须使用BigDecimal。通过查看BigDecimal的String构造器，我们发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">When a &#123;@code double&#125; must be used as a source for a</span><br><span class="line">* &#123;@code BigDecimal&#125;, note that this constructor provides an</span><br><span class="line">* exact conversion; it does not give the same result as</span><br><span class="line">* converting the &#123;@code double&#125; to a &#123;@code String&#125; using the</span><br><span class="line">* &#123;@link Double#toString(double)&#125; method and then using the</span><br><span class="line">* &#123;@link #BigDecimal(String)&#125; constructor.  To get that result,</span><br><span class="line">* use the &#123;@code static&#125; &#123;@link #valueOf(double)&#125; method.</span><br></pre></td></tr></table></figure></p><p>从上面的源码中我们也发现了这一情况，因此需要使用它的String构造器。但是呢，我们的数据库中存放的都是int类型，因此我们需要创建一个用于转换类型的工具类，打开Util这个包，我们在里面新建一个BigDecimalUtil.java的文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class BigDecimalUtil &#123;</span><br><span class="line">    //我们不能使我们的工具类在外部进行实例化，因此将构造方法私有化</span><br><span class="line">    private BigDecimalUtil()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //加法</span><br><span class="line">    public static BigDecimal add(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //减法</span><br><span class="line">    public static BigDecimal sub(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //乘法</span><br><span class="line">    public static BigDecimal mut(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //除法，注意使用四舍五入</span><br><span class="line">    public static BigDecimal div(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.divide(b2,2,BigDecimal.ROUND_HALF_UP);  //四舍五入模式，保留2位小数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你可以使用Ctrl+O（字母O）来查看该类的不同类型的构造方法,我们使用下面的构造方法，scale是指你保留的位数，roundingMode是指什么模式：ROUND_HALF_UP是四舍五入模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</span><br></pre></td></tr></table></figure></p><p>具体的可以参看这篇文章：<a href="https://www.cnblogs.com/yingchen/p/5459501.html" target="_blank" rel="noopener">BigDecimal.ROUND_HALF_XXX的各种用法</a><br><strong>7、</strong>我们这里之所以不直接从商品对象里获取信息，是因为后面有些是存在于购物车的，有些存在于商品，很容易造成混乱，因此我们这里就使用了一个组装的购物车商品对象，你需要的时候调用它就可以。<br><strong>8、</strong>在判断库存数量的时候，我们需要注意设置一个常量，用于提示前端最低库存，继续打开common包下面的const文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String LIMIT_NUM_FAIL = &quot;LIMIT_NUM_FAIL&quot;;</span><br><span class="line">String LIMIT_NUM_SUCCESS = &quot;LIMIT_NUM_SUCCESS&quot;;</span><br></pre></td></tr></table></figure></p><p>把之前的购物车状态代码合在一块就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface Cart&#123;</span><br><span class="line">    int CHECKED = 1;//购物车选中状态</span><br><span class="line">    int UN_CHECKED = 0;//购物车中未选中状态</span><br><span class="line"></span><br><span class="line">    String LIMIT_NUM_FAIL = &quot;LIMIT_NUM_FAIL&quot;;</span><br><span class="line">    String LIMIT_NUM_SUCCESS = &quot;LIMIT_NUM_SUCCESS&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>9、</strong>然后就是<code>cartVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));   //这里需要直接从服务器中获取</code>这个很多注意事项我都在代码里面作了详细的说明。<br><strong>10、</strong>看到这行代码，你同样需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果用户不为空</span><br><span class="line">//这里sql语句结果之所以没有返回boolean是因为我们去数据库里面一般返回的都是int，所以需要进行二次判断</span><br><span class="line">return cartMapper.selectCartProductCheckedStatusByUserId(userId) ==0;</span><br></pre></td></tr></table></figure></p><p>去dao层的CartMapper.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int selectCartProductCheckedStatusByUserId(Integer userId);</span><br></pre></td></tr></table></figure></p><p>接着打开mappers包的CartMapper.xml文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;select id=&quot;selectCartProductCheckedStatusByUserId&quot; resultType=&quot;int&quot; parameterType=&quot;int&quot;&gt; &lt;!--这里就是说里面有没有选中的就意味着不是全选--&gt;</span><br><span class="line">    SELECT  count(1) from store_cart where checked = 0 and user_id = #&#123;userId&#125;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h3 id="精度测试"><a href="#精度测试" class="headerlink" title="精度测试"></a>精度测试</h3><p>对了，还有前面的精度测试，我们打开test包下面的java包，里面新建一个包<code>top.licheetools.test</code>，名字随意，我这里就是这个样子，然后新建BigDecimalTest.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package top.licheetools.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">//这里因为是专门的测试包，所以不需要使用junit，也不需要加载Spring容器</span><br><span class="line">public class BigDecimalTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line">        System.out.println(0.08+0.05);</span><br><span class="line">        System.out.println(2.01-0.58);</span><br><span class="line">        System.out.println(0.08*100);</span><br><span class="line">        System.out.println(6.89/100);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        //使用BigDecimal的Integer构造函数</span><br><span class="line">        BigDecimal b1 =new BigDecimal(0.06);</span><br><span class="line">        BigDecimal b2 =new BigDecimal(0.09);</span><br><span class="line">        System.out.println(b1.add(b2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test3()&#123;</span><br><span class="line">        //使用BigDecimal的String构造函数</span><br><span class="line">        BigDecimal b1 =new BigDecimal(&quot;0.06&quot;);</span><br><span class="line">        BigDecimal b2 =new BigDecimal(&quot;0.09&quot;);</span><br><span class="line">        System.out.println(b1.add(b2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果我这里就只附上截图：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-011f1c75b8ca614b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b8be261813fbfae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-624dce4cccb03d30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们本篇关于如何将商品加入到购物车的介绍就到此为止了，这里因为需要构造一个复用的购物车模型，所以需要很多时间，但是后面功能的实现就能直接借助它了，开发起来还是快速的，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本章节我们来介绍购物车模块相关功能的开发，具体包括加入商品；更新商品数；查询商品数；移除商品；单选/取消；全选/取消和购物车
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十七）：前台商品列表，搜索，动态排序</title>
    <link href="http://blog.licheetools.top/2018/08/26/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%EF%BC%8C%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%8A%A8%E6%80%81%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.licheetools.top/2018/08/26/SSM搭建二手市场交易平台（十七）：前台商品列表，搜索，动态排序/</id>
    <published>2018-08-26T03:21:06.000Z</published>
    <updated>2019-04-15T14:14:23.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在前面的某一篇里面，我们完成了后台商品详情，列表，搜索，动态排序功能的开发。那么本篇我们来介绍前台商品详情，列表，搜索，动态排序功能的开发，这个和那个不一样，希望大家多看几遍，好好理解一下其中的不同。</p><h2 id="前台商品详情获取"><a href="#前台商品详情获取" class="headerlink" title="前台商品详情获取"></a>前台商品详情获取</h2><p>我们打开controller包，在里面的portal包里面新建ProductController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">  * 前台获取商品的详情信息</span><br><span class="line">  * @author lenovo</span><br><span class="line">  * */</span><br><span class="line"> @RequestMapping(value = &quot;detail.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line"> @ResponseBody   //自动序列化json功能</span><br><span class="line"> public ServerResponse&lt;ProductDetailVo&gt; detail(Integer productId)&#123;</span><br><span class="line">     //前台和后台关于商品详情信息的获取是非常相似的，除了前台需要判断商品的状态，如果下线或者删除就返回一个错误或者是不进行返回</span><br><span class="line">     return iProductService.getProductDetail(productId);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *前台获取商品的详情信息</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;ProductDetailVo&gt; getProductDetail(Integer productId)&#123;</span><br><span class="line">    //判断商品是否存在</span><br><span class="line">    if (productId == null) &#123;   //商品id不存在</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">    if (product == null) &#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(product.getStatus() != Const.ProductStatusEnum.ON_SALE.getCode())&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //商品存在,我们现在是进行信息的传递</span><br><span class="line">    ProductDetailVo productDetailVo =assembleProductDetailVo(product);</span><br><span class="line">    return ServerResponse.createBySuccess(productDetailVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码基本上和我们之前后台获取商品详情的逻辑一样，但是多了一部就是需要判断商品的状态，对于那些不存在或者已经下架的商品我们就不需要显示了，直接返回提示信息。</p><p>看到<code>if(product.getStatus() != Const.ProductStatusEnum.ON_SALE.getCode()){            return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);        }</code>这行代码，说明我们需要新建一个枚举类，打开之前的Comm包下面的Const这个java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public enum ProductStatusEnum&#123;</span><br><span class="line">        ON_SALE(1,&quot;在线&quot;)</span><br><span class="line">        ;</span><br><span class="line">        private String value;</span><br><span class="line">        private int code;</span><br><span class="line"></span><br><span class="line">        ProductStatusEnum(int code,String value)&#123;</span><br><span class="line">            this.code =code;</span><br><span class="line">            this.value=value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getCode() &#123;</span><br><span class="line">            return code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后打开IProductService这个接口，我们把刚才的实现类的接口代码添加进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;ProductDetailVo&gt; getProductDetail(Integer productId);   //前台获取商品的详情信息</span><br></pre></td></tr></table></figure></p><p>这样我们关于前台商品详情获取的功能开发就完成了，接下来就是前台列表的分页，搜索，动态排序功能了。</p><h2 id="前台列表分页，搜索，动态排序实现"><a href="#前台列表分页，搜索，动态排序实现" class="headerlink" title="前台列表分页，搜索，动态排序实现"></a>前台列表分页，搜索，动态排序实现</h2><p>老规矩，我们打开ProductController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台获取商品列表并进行分页,搜索，动态排序</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; list (@RequestParam(value = &quot;keyword&quot; ,required = false) String keyword,</span><br><span class="line">                                      @RequestParam(value = &quot;categoryId&quot; ,required = false)Integer categoryId,</span><br><span class="line">                                      @RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                                      @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize,</span><br><span class="line">                                      @RequestParam(value = &quot;orderBy&quot; ,defaultValue = &quot;&quot;)String orderBy</span><br><span class="line">                                      )&#123;</span><br><span class="line">    return iProductService.getProductByKeywordCategory(keyword,categoryId,pageNum,pageSize,orderBy);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">  * 前台获取商品列表并进行分页,搜索，动态排序</span><br><span class="line">  * @author lenovo</span><br><span class="line">  * */</span><br><span class="line"> public ServerResponse&lt;PageInfo&gt; getProductByKeywordCategory(String keyword,Integer categoryId,int pageNum,int pageSize,String orderBy)&#123;</span><br><span class="line">     //判断一下keyword和categoryId是否为空，如果是的话就显示参数错误</span><br><span class="line">     if(StringUtils.isBlank(keyword)  &amp;&amp; categoryId ==null)&#123;</span><br><span class="line">         return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     List&lt;Integer&gt; categoryIdList = new ArrayList&lt;Integer&gt;();  //这里声明一个list用于保存通过递归得到的它的及其子类id</span><br><span class="line"></span><br><span class="line">     if(categoryId !=null)&#123;</span><br><span class="line">         //通过categoryId来获取category这个对象</span><br><span class="line">         Category category =categoryMapper.selectByPrimaryKey(categoryId);</span><br><span class="line"></span><br><span class="line">         if(category ==null&amp;&amp;StringUtils.isBlank(keyword))&#123;</span><br><span class="line">             //没有该分类,并且还没有关键字,这个时候返回一个空的结果集,不能报错</span><br><span class="line">             //这里的意思就是说假设前端请求categoryId==1,但是我们数据库里面没有1只有2，这就是不匹配而已，并不是错误</span><br><span class="line">             PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">             List&lt;ProductListVo&gt; productListVoList =Lists.newArrayList();</span><br><span class="line">             PageInfo pageInfo =new PageInfo(productListVoList);</span><br><span class="line">             return ServerResponse.createBySuccess(pageInfo);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         //这是通过之前写的递归算法拿到了它的分类以及其子分类</span><br><span class="line">         categoryIdList =iCategoryService.selectCategoryAndChildrenById(category.getId()).getData();   //这里需要去CategoryServiceImpl里面对我们之前写的关于递归查询子节点的函数进行一个修改，添加返回值的类型List&lt;Integer&gt;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     //判断keyword是否为空</span><br><span class="line">     if(StringUtils.isNotBlank(keyword))&#123;</span><br><span class="line">         //将keyword变成%keyword%用于模糊查询操作</span><br><span class="line">         keyword =new StringBuilder().append(&quot;%&quot;).append(keyword).append(&quot;%&quot;).toString();</span><br><span class="line">     &#125;</span><br><span class="line">     PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">     //进行排序处理</span><br><span class="line">     //我们和前端约定弄一个接口去实现orderBy的选择</span><br><span class="line">     //判断orderBy这个字段不为空</span><br><span class="line">     if(StringUtils.isNotBlank(orderBy))&#123;</span><br><span class="line">         //判断前端传的orderBy是否在我们定义的Const集合中</span><br><span class="line">         if(Const.ProductListOrderBy.PRICE_ASC_DESC.contains(orderBy))&#123;</span><br><span class="line">             //因为pageHelper.orderBy里面的参格式是price desc，所以我们需要对集合中的&quot;price_desc&quot;和&quot;price_asc&quot;进行分割</span><br><span class="line">             String[] orderByArray =orderBy.split(&quot;_&quot;);</span><br><span class="line">             PageHelper.orderBy(orderByArray[0]+&quot; &quot;+orderByArray[1]);  //注意一下这里双引号之间有一个空格</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     //进行动态搜索</span><br><span class="line">     //这里注意我们的keyword就是productName</span><br><span class="line"></span><br><span class="line">     //仅仅使用下面的这行代码是不可以的，因为keyword和categoryIdList有可能没有，所以我们需要使用三元运算符进行判断</span><br><span class="line">    // List&lt;Product&gt; productList =productMapper.selectByNameAndCategoryIds(keyword,categoryIdList);</span><br><span class="line">     //将之前的(keyword,categoryIdList)变成(StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList)</span><br><span class="line"></span><br><span class="line">     //使用sql语句获取的结果</span><br><span class="line">     List&lt;Product&gt; productList =productMapper.selectByNameAndCategoryIds(StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList);</span><br><span class="line">     List&lt;ProductListVo&gt; productListVoList =Lists.newArrayList();</span><br><span class="line">     for(Product product:productList)&#123;</span><br><span class="line">         ProductListVo productListVo =assembleProductListVo(product);</span><br><span class="line">         productListVoList.add(productListVo);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     PageInfo pageInfo =new PageInfo(productList);  //注意这里传入的就是通过sql语句获得的列表</span><br><span class="line">     pageInfo.setList(productListVoList);</span><br><span class="line">     return ServerResponse.createBySuccess(pageInfo);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这段代码是核心代码，对此我有几个注意事项需要说明：<br>1、首先我们这个商品的查询是通过keyword来实现的，采用模糊查询。<br>2、假设前端请求categoryId==1,但是我们数据库里面没有1只有2，这就是不匹配而已，并不是错误所以我们需要进行一个信息提示。<br>3、我们前面参数中的categoryId是用来获取category这个对象，然后利用这个对象来调用递归算法拿到了它的分类以及其子分类组成的列表。<br>4、排序处理的时候，我们打开Const这个类，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface ProductListOrderBy&#123;</span><br><span class="line">    //这里使用set是因为set的contain函数的时间复杂度是O(1),而List的contain函数的时间复杂度则是O(n);</span><br><span class="line">    Set&lt;String&gt; PRICE_ASC_DESC = Sets.newHashSet(&quot;price_desc&quot;,&quot;price_asc&quot;);  //按照价格进行排序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个就是排序的依据，而且不知道你注意到没有，我们这里使用了set是因为set的contains函数的时间复杂度是O(1),而List的contains函数的时间复杂度则是O(n);</p><p>5、因为<code>pageHelper.orderBy</code>里面的参格式是<code>price desc</code>，所以我们需要对集合中的<code>&quot;price_desc&quot;</code>和<code>&quot;price_asc&quot;</code>进行分割，我们知道split函数最后返回的就是一个String类型的数组，最后直接调用它的<code>PageHelper.orderBy(orderByArray[0]+&quot; &quot;+orderByArray[1]);</code>就可以了。<br>6、动态搜索，这里注意我们的keyword就是productName，而且keyword和categoryIdList有可能没有，所以我们需要使用三元运算符进行判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList</span><br></pre></td></tr></table></figure></p><p>7、注意这里的<code>selectByNameAndCategoryIds</code>函数，所以我们需要ProductMapper.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis里面，多个参数时需要使用param注解</span><br><span class="line">  List&lt;Product&gt; selectByNameAndCategoryIds(@Param(value = &quot;productName&quot;) String productName,@Param(&quot;categoryIdList&quot;)List&lt;Integer&gt; categoryIdList);</span><br></pre></td></tr></table></figure></p><p>然后记得打开ProductMapper.xml文件，新增sql语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndCategoryIds&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    where status = 1</span><br><span class="line">    &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">        and name like #&#123;productName&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;categoryIdList != null&quot; &gt;</span><br><span class="line">        and category_id in</span><br><span class="line">        &lt;foreach item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot; collection=&quot;categoryIdList&quot;&gt;</span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>8、<code>categoryIdList=iCategoryService.selectCategoryAndChildrenById(category.getId()).getData();</code>这里需要去CategoryServiceImpl里面对我们之前写的关于递归查询子节点的函数进行一个修改，添加返回值的类型List<integer>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public ServerResponse&lt;List&lt;Integer&gt;&gt; selectCategoryAndChildrenById(Integer categoryId)&#123;</span><br></pre></td></tr></table></figure></integer></p><p>以及iCategoryService.java文件，修改为以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;List&lt;Integer&gt;&gt; selectCategoryAndChildrenById(Integer categoryId);    //后台管理员递归查询本节点及子节点的id并返回列表</span><br></pre></td></tr></table></figure></p><p>最后记得打开IProductService这个接口，我们把刚才的实现类的接口代码添加进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; getProductByKeywordCategory(String keyword,Integer categoryId,int pageNum,int pageSize,String orderBy);   //前台获取商品列表并进行分页,搜索，动态排序</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于前台商品详情，列表，搜索，动态排序功能的开发介绍就到此为止了，接下来是进行各个相关接口的测试。</p><p> 由于测试比较简单，这里直接附上几张测试截图即可，不作过多说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d1f1895a54197b8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-72666196f319e983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们本篇关于前台商品详情，列表，搜索，动态排序功能开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;在前面的某一篇里面，我们完成了后台商品详情，列表，搜索，动态排序功能的开发。那么本篇我们来介绍前台商品详情，列表，搜索，动态
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十六）：后台文件和富文本图片上传的开发</title>
    <link href="http://blog.licheetools.top/2018/08/25/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E5%92%8C%E5%AF%8C%E6%96%87%E6%9C%AC%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/08/25/SSM搭建二手市场交易平台（十六）：后台文件和富文本图片上传的开发/</id>
    <published>2018-08-25T01:21:06.000Z</published>
    <updated>2019-04-15T14:13:36.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台文件上传和后台富文本图片上传的开发，这里面涉及到的内容比较多，而且还是具有一定的难度，建议大家没事多看几遍，多敲代码。</p><h2 id="后台文件上传"><a href="#后台文件上传" class="headerlink" title="后台文件上传"></a>后台文件上传</h2><p>首先打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *</span><br><span class="line">    * 后台管理员--上传文件到服务器（spring mvc）</span><br><span class="line">    * */</span><br><span class="line">   @RequestMapping(&quot;upload.do&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public ServerResponse upload(HttpSession session, @RequestParam(value = &quot;upload_file&quot;,required = false) MultipartFile file, HttpServletRequest request)&#123;</span><br><span class="line">       //判断一下登录情况</span><br><span class="line">       User user = (User)session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">       if(user == null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录,请登录管理员&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //判断一下是不是管理员身份</span><br><span class="line">       if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line"></span><br><span class="line">           //如果是管理员就进行后台上传文件的逻辑</span><br><span class="line">           String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;);</span><br><span class="line">           String targetFileName = iFileService.upload(file,path);</span><br><span class="line">           String url = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)+targetFileName;   //进行url的拼接以供前端使用</span><br><span class="line"></span><br><span class="line">           Map fileMap = Maps.newHashMap();</span><br><span class="line">           fileMap.put(&quot;uri&quot;,targetFileName);</span><br><span class="line">           fileMap.put(&quot;url&quot;,url);</span><br><span class="line">           return ServerResponse.createBySuccess(fileMap);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>关于这段代码，我需要说明几点：<br>1、参数问题，这里不仅仅需要登录，而且还需要一个文件参数（非必须）和请求参数（必须因为文件上传路径需要从它里面进行获取）。<br>2、<code>String targetFileName = iFileService.upload(file,path);</code>看到这里就说明你需要完成几个事情：首先新建iFileService这个接口，然后再创建一个该接口的实现类。<br>打开service这个包，在里面新建一个IFileService.java的接口，里面的代码如下：(按照我们之前的说明应该是最后进行的，这里考虑到介绍的顺序问题，就这里写吧)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">public interface IFileService &#123;</span><br><span class="line">    String upload(MultipartFile file, String path);   //上传文件到ftp服务器上面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开impl文件，在里面新建FileServiceImpl.java文件来实现我们IFileService这个接口，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">import top.store.service.IFileService;</span><br><span class="line">import top.store.util.FTPUtil;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iFileService&quot;)</span><br><span class="line">public class FileServiceImpl implements IFileService &#123;</span><br><span class="line"></span><br><span class="line">    //添加一个用于目录列表为空的日志</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(FileServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    public  String upload(MultipartFile file,String path)&#123;</span><br><span class="line">        //上传文件的名称</span><br><span class="line">        String fileName =file.getOriginalFilename();</span><br><span class="line">        //扩展名test.jpg，我们要获取jpg</span><br><span class="line">        String fileExtensionName =fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1);</span><br><span class="line"></span><br><span class="line">        //文件上传的名称</span><br><span class="line">        String uploadFileName = UUID.randomUUID().toString()+&quot;.&quot;+fileExtensionName;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;开始上传文件,上传文件的文件名:&#123;&#125;,上传的路径:&#123;&#125;,新文件名:&#123;&#125;&quot;,fileName,path,uploadFileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        File fileDir = new File(path);</span><br><span class="line">        if(!fileDir.exists())&#123;</span><br><span class="line">            //文件可以设置权限</span><br><span class="line">            fileDir.setWritable(true);</span><br><span class="line">            //创建多个文件</span><br><span class="line">            fileDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        File targetFile = new File(path,uploadFileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            file.transferTo(targetFile);  //文件已经上传成功了</span><br><span class="line"></span><br><span class="line">            FTPUtil.uploadFile(Lists.newArrayList(targetFile));   //已经上传到ftp服务器上</span><br><span class="line"></span><br><span class="line">            targetFile.delete();  //删除upload下面的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;上传文件异常&quot;,e);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //1:test.jpg 这里就是说明我们前面使用UUID的必要性，否则就很容易造成重复</span><br><span class="line">        //2:test.jpg</span><br><span class="line">        return targetFile.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这个实现文件上传的类不仅仅用在文件上传，而且后台富文本图片上传也是需要依靠它的。同样这里的<code>FTPUtil.uploadFile(Lists.newArrayList(targetFile));</code>也是需要你注意的，打开util包，在里面新建一个FTPUtil.java的工具类，我们在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class FTPUtil &#123;</span><br><span class="line"></span><br><span class="line">    //添加一个用于目录列表为空的日志</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(FTPUtil.class);</span><br><span class="line"></span><br><span class="line">    //使用我们之前定义的PropertiesUtil这个工具类来获取服务器属性</span><br><span class="line">    private static String ftpIp =PropertiesUtil.getProperty(&quot;ftp.server.ip&quot;);</span><br><span class="line">    private static String ftpUser =PropertiesUtil.getProperty(&quot;ftp.user&quot;);</span><br><span class="line">    private static String ftpPass =PropertiesUtil.getProperty(&quot;ftp.pass&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String ip;</span><br><span class="line">    private int port;</span><br><span class="line">    private String user;</span><br><span class="line">    private String pwd;</span><br><span class="line">    private FTPClient ftpClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public FTPUtil(String ip,int port,String user,String pwd )&#123;</span><br><span class="line">        this.ip =ip;</span><br><span class="line">        this.port =port;</span><br><span class="line">        this.user=user;</span><br><span class="line">        this.pwd =pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //上传服务器</span><br><span class="line">    public static boolean uploadFile(List&lt;File&gt; fileList) throws IOException &#123;</span><br><span class="line">        FTPUtil ftpUtil = new FTPUtil(ftpIp,21,ftpUser,ftpPass);</span><br><span class="line">        logger.info(&quot;开始连接 ftp 服务器&quot;);</span><br><span class="line">        boolean result = ftpUtil.uploadFile(&quot;img&quot;,fileList);</span><br><span class="line">        logger.info(&quot;开始连接 ftp 服务器,结束上传,上传结果:&#123;&#125;&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private boolean uploadFile(String remotePath,List&lt;File&gt; fileList) throws IOException &#123;</span><br><span class="line">        boolean uploaded = true;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        //连接 FTP 服务器</span><br><span class="line">        if(connectServer(this.ip,this.port,this.user,this.pwd))&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                ftpClient.changeWorkingDirectory(remotePath);</span><br><span class="line">                ftpClient.setBufferSize(1024);</span><br><span class="line">                ftpClient.setControlEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);  //二进制类型，可以防止乱码</span><br><span class="line">                ftpClient.enterLocalPassiveMode();   //打开本地的被动模式</span><br><span class="line">                for(File fileItem : fileList)&#123;</span><br><span class="line">                    fis = new FileInputStream(fileItem);</span><br><span class="line">                    ftpClient.storeFile(fileItem.getName(),fis);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                logger.error(&quot;上传文件异常&quot;,e);</span><br><span class="line">                uploaded = false;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                fis.close();  //释放连接</span><br><span class="line">                ftpClient.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return uploaded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //连接Ftp服务器</span><br><span class="line">    private boolean connectServer(String ip,int port,String user,String pwd)&#123;</span><br><span class="line"></span><br><span class="line">        boolean isSuccess = false;</span><br><span class="line">        ftpClient = new FTPClient();</span><br><span class="line">        try &#123;</span><br><span class="line">            ftpClient.connect(ip);</span><br><span class="line">            isSuccess = ftpClient.login(user,pwd);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;连接 FTP 服务器异常&quot;,e);</span><br><span class="line">        &#125;</span><br><span class="line">        return isSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getIp() &#123;</span><br><span class="line">        return ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIp(String ip) &#123;</span><br><span class="line">        this.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getPort() &#123;</span><br><span class="line">        return port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPort(int port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUser() &#123;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUser(String user) &#123;</span><br><span class="line">        this.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPwd() &#123;</span><br><span class="line">        return pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPwd(String pwd) &#123;</span><br><span class="line">        this.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FTPClient getFtpClient() &#123;</span><br><span class="line">        return ftpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFtpClient(FTPClient ftpClient) &#123;</span><br><span class="line">        this.ftpClient = ftpClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个文件的作用就是获取服务器的属性以及负责连接服务器和上传文件到服务器。</p><p>3、我们继续回到ProductManageController.java文件，在最上面进行IFileService 的注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private IFileService iFileService;</span><br></pre></td></tr></table></figure></p><p>关于文件上传的一些参数的设置，大家可以打开dispatcher-servlet.xml文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文件上传 --&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/&gt; &lt;!-- 10m --&gt;</span><br><span class="line">        &lt;property name=&quot;maxInMemorySize&quot; value=&quot;4096&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>上面说了允许文件上传的最大尺寸，默认编码方式以及阈值，低于此值，只保留在内存里，超过此阈值，生成硬盘上的临时文件。</p><p>为了后面进行测试，你可以打开webapp下面的index.jsp文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--springmvc 上传文件--%&gt;</span><br><span class="line">&lt;form name=&quot;form1&quot; action=&quot;/manage/product/upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;upload_file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;springmvc 上传文件&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>这样后台文件上传的实现就介绍完了，接下来就进行后台富文本图片上传的开发。</p><h2 id="后台富文本图片上传的开发"><a href="#后台富文本图片上传的开发" class="headerlink" title="后台富文本图片上传的开发"></a>后台富文本图片上传的开发</h2><p>前面说过，我们这两个功能的接口是一样的，因此那部分代码就可以不用再写了，直接就可以进行使用。但是我们这里使用了simditor，你可以点击这里进行了解：<a href="https://simditor.tower.im/docs/doc-config.html" target="_blank" rel="noopener">simditor</a>，我们这里主要使用json，因此你可以拉到底部看到这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;success&quot;: true/false,</span><br><span class="line">  &quot;msg&quot;: &quot;error message&quot;, # optional</span><br><span class="line">  &quot;file_path&quot;: &quot;[real file path]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以我们后面图片文件上传之后，返回的格式就是这个样子，这里告诉大家希望大家对此有个提前的认识。我们打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--富文本图片上传文件到服务器</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;richtext_img_upload.do&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Map  richtextImgUpload(HttpSession session, @RequestParam(value = &quot;upload_file&quot;,required = false) MultipartFile file, HttpServletRequest request, HttpServletResponse response)&#123;</span><br><span class="line">    Map resultMap =Maps.newHashMap();</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user = (User)session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user == null)&#123;</span><br><span class="line">        resultMap.put(&quot;success&quot;,false);</span><br><span class="line">        resultMap.put(&quot;msg&quot;,&quot;请登录管理员&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //富文本中对于返回值有自己的要求,我们使用simditor，因此按照simditor的要求进行返回，前面我们也说过了。</span><br><span class="line">    //&#123;</span><br><span class="line">    //     &quot;success&quot;: true/false,</span><br><span class="line">    //     &quot;msg&quot;: &quot;error message&quot;, # optional</span><br><span class="line">    //     &quot;file_path&quot;: &quot;[real file path]&quot;</span><br><span class="line">    //&#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line"></span><br><span class="line">        //如果是管理员就进行后台上传富文本文件的逻辑</span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;);</span><br><span class="line">        String targetFileName = iFileService.upload(file,path);</span><br><span class="line"></span><br><span class="line">       //判断文件名是否为空，如果为空的话</span><br><span class="line">        if(StringUtils.isBlank(targetFileName))&#123;</span><br><span class="line">            resultMap.put(&quot;success&quot;,false);</span><br><span class="line">            resultMap.put(&quot;msg&quot;,&quot;上传失败&quot;);</span><br><span class="line">            return resultMap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String url = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)+targetFileName;   //进行url的拼接以供前端使用</span><br><span class="line">        resultMap.put(&quot;success&quot;,true);</span><br><span class="line">        resultMap.put(&quot;msg&quot;,&quot;上传成功&quot;);</span><br><span class="line">        resultMap.put(&quot;file_path&quot;,url);</span><br><span class="line">        response.addHeader(&quot;Access-Control-Allow-Headers&quot;,&quot;X-File-Name&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        resultMap.put(&quot;success&quot;,false);</span><br><span class="line">        resultMap.put(&quot;msg&quot;,&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个段代码就是核心代码，所以我需要说明几点：<br>1、为什么我们最后的返回是一个map，因为simditor文档要求最后返回的是一个json而且是以一种键值对的格式进行返回，所以你要莫使用map，当然使用object也是可以的，你可以参考这篇文章：<a href="https://blog.csdn.net/qq_35221138/article/details/81239968" target="_blank" rel="noopener">list、map、对象对应json的格式</a>。</p><p>2、记住我们本项目都是使用了guava提供的map,set,list等，因为它们进行了更深层次的封装。</p><p>3、这里的逻辑就是先判断文件存在与否，不存在就直接返回失败，存在就进行url的拼接以及保存到header里面并及时显示成功之后的信息。这个逻辑还行，能理解。</p><p>同样为了后面进行测试，你可以打开webapp下面的index.jsp文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--富文本图片上传文件--%&gt;</span><br><span class="line">&lt;form name=&quot;form2&quot; action=&quot;/manage/product/richtext_img_upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;upload_file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;富文本图片上传文件&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于后台文件上传和后台富文本图片上传开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来介绍后台文件上传和后台富文本图片上传的开发，这里面涉及到的内容比较多，而且还是具有一定的难度，建议大家没事多看几遍
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十五）：后台商品列表动态分页及搜索功能</title>
    <link href="http://blog.licheetools.top/2018/08/24/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E5%8A%A8%E6%80%81%E5%88%86%E9%A1%B5%E5%8F%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    <id>http://blog.licheetools.top/2018/08/24/SSM搭建二手市场交易平台（十五）：后台商品列表动态分页及搜索功能/</id>
    <published>2018-08-24T00:21:06.000Z</published>
    <updated>2019-04-15T14:12:12.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台商品列表动态分页和后台商品搜索功能的开发，这里面会涉及到mybatis-pagehelper的使用。</p><h2 id="商品列表动态分页"><a href="#商品列表动态分页" class="headerlink" title="商品列表动态分页"></a>商品列表动态分页</h2><p>忘了告诉你，你可以按住shift+ctrl+T进行类的搜索，这个功能是非常好用的。好了，我们正式开始介绍后台商品列表动态分页功能的实现。</p><p>首先打开ProductManageController.java文件，在里面新增以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--后台商品列表及动态分页</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;list.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse getList(HttpSession session,@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;) int pageNum, @RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;10&quot;) int pageSize)&#123;</span><br><span class="line"></span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就进行后台商品列表及动态分页的逻辑</span><br><span class="line">        return iProductService.getProductList(pageNum,pageSize);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员--后台商品列表及动态分页</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; getProductList(int pageNum,int pageSize)&#123;</span><br><span class="line">        /***</span><br><span class="line">         * 使用mybatis-pagehelper的三个步骤：</span><br><span class="line">         * 1、startPage--start</span><br><span class="line">         * 2、填充自己的sql查询逻辑</span><br><span class="line">         * 3、pageHelper-收尾</span><br><span class="line">         * */</span><br><span class="line">        //startPage--start</span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">        //填充自己的sql查询逻辑</span><br><span class="line">        List&lt;Product&gt; productList =productMapper.selectList();</span><br><span class="line">        List&lt;ProductListVo&gt; productListVoList = Lists.newArrayList();  //Lists这是guava对list的封装</span><br><span class="line">        for(Product productItem : productList)&#123;</span><br><span class="line">            ProductListVo productListVo = assembleProductListVo(productItem);</span><br><span class="line">            productListVoList.add(productListVo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //pageHelper-收尾</span><br><span class="line">        PageInfo pageResult = new PageInfo(productList);</span><br><span class="line">        pageResult.setList(productListVoList);</span><br><span class="line">        return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //新的商品用于商品列表信息的获取</span><br><span class="line">    private ProductListVo assembleProductListVo(Product product) &#123;</span><br><span class="line">        ProductListVo productListVo = new ProductListVo();</span><br><span class="line">        productListVo.setId(product.getId());</span><br><span class="line">        productListVo.setCategoryId(product.getCategoryId());</span><br><span class="line">        productListVo.setName(product.getName());</span><br><span class="line">        productListVo.setSubtitle(product.getSubtitle());</span><br><span class="line">        productListVo.setMainImage(product.getMainImage());</span><br><span class="line">        productListVo.setPrice(product.getPrice());</span><br><span class="line">        productListVo.setStatus(product.getStatus());</span><br><span class="line">        productListVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;, &quot;http://img.licheetools.top/&quot;));</span><br><span class="line"></span><br><span class="line">        return productListVo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关于这段代码，我需要说明几点事项：<br>1、因为这里我们使用了mybatis-pagehelper这个分页插件，因此有必要了解一下它的官方文档：<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">使用方法</a>，觉得看不懂得可以参看这篇文章：<a href="https://blog.csdn.net/cs_hnu_scw/article/details/80718467" target="_blank" rel="noopener">手把手教你如何玩转插件：分页插件（Pagehelper）</a>。</p><p>2、因为我们后台已经有一个实现商品详情信息的功能了，这里我们只是对其进行分页而已，而且是不需要获取更多的信息，因此有必要新建一个product对象，我们称其为ProductListVo。所以我们就要打开vo这个包，在里面新建一个ProductListVo类，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class ProductListVo &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private Integer categoryId;</span><br><span class="line">    private String name;</span><br><span class="line">    private String subtitle;</span><br><span class="line">    private String mainImage;</span><br><span class="line">    private BigDecimal price;</span><br><span class="line">    private Integer status;</span><br><span class="line">    private String imageHost;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCategoryId() &#123;</span><br><span class="line">        return categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCategoryId(Integer categoryId) &#123;</span><br><span class="line">        this.categoryId = categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSubtitle() &#123;</span><br><span class="line">        return subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubtitle(String subtitle) &#123;</span><br><span class="line">        this.subtitle = subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMainImage() &#123;</span><br><span class="line">        return mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMainImage(String mainImage) &#123;</span><br><span class="line">        this.mainImage = mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(BigDecimal price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(Integer status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也许你也注意到，我们就是选择自己需要的信息然后才进行组装成一个新的product。</p><p>3、我们继续回到ProductServiceImpl.java文件，这后面的那段组装新的Product的代码是不是非常眼熟，对就是和我们之前的商品详情信息组装几乎是一模一样的，但是还依然要注意ImageHost这个字段的获取，你可以照搬前面的代码。</p><p>4、看到<code>List&lt;Product&gt; productList =productMapper.selectList();</code>这段代码，说明我们需要需要去productMapper.java文件里面添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Product&gt; selectList();</span><br></pre></td></tr></table></figure></p><p>然后打开productMapper.xml文件，往里面添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectList&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    order by id asc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IProductService.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; getProductList(int pageNum, int pageSize);    //后台管理员--后台商品列表及动态分页</span><br></pre></td></tr></table></figure></p><h2 id="后台商品搜索功能开发"><a href="#后台商品搜索功能开发" class="headerlink" title="后台商品搜索功能开发"></a>后台商品搜索功能开发</h2><p>老规矩，我们首先打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--后台商品搜索功能</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;search.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse productSearch(HttpSession session,String productName,Integer productId,@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;) int pageNum, @RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;10&quot;) int pageSize)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就进行后台商品搜索功能开发的逻辑</span><br><span class="line">        return iProductService.productSearch(productName,productId,pageNum,pageSize);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--后台商品搜索功能(同样也需要分页)</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; productSearch(String productName,Integer productId,int pageNum, int pageSize)&#123;</span><br><span class="line"></span><br><span class="line">    //startPage--start</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">    if(StringUtils.isNotBlank(productName))&#123;</span><br><span class="line">        productName = new StringBuilder().append(&quot;%&quot;).append(productName).append(&quot;%&quot;).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //填充自己的sql查询逻辑</span><br><span class="line">    List&lt;Product&gt; productList =productMapper.selectByNameAndProductId(productName,productId);</span><br><span class="line">    List&lt;ProductListVo&gt; productListVoList = Lists.newArrayList();  //Lists这是guava对list的封装</span><br><span class="line">    for(Product productItem : productList)&#123;</span><br><span class="line">        ProductListVo productListVo = assembleProductListVo(productItem);</span><br><span class="line">        productListVoList.add(productListVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //pageHelper-收尾</span><br><span class="line">    PageInfo pageResult = new PageInfo(productList);</span><br><span class="line">    pageResult.setList(productListVoList);</span><br><span class="line">    return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于这段代码，我需要说明几点事项：<br>1、<code>productName = new StringBuilder().append(&quot;%&quot;).append(productName).append(&quot;%&quot;).toString();</code>这行代码的意思就是构造一个新的productName对象，就是用于数据库字段的查找，我们知道如果你要进行查找，特别是模糊查找，那么相应的sql语句是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from store_product where name like %productName%；</span><br></pre></td></tr></table></figure></p><p>这里我们为了xml里面书写sql语句的便捷，就在这里进行了转化，此时的<code>productName=%productName%</code>。</p><p>2、%：表示任意0个或多个字，可匹配任意类型和长度的字符；_： 表示任意单个字符，匹配单个任意字符，它常用来限制表达式的字符长度语句。</p><p>3、看到<code>productMapper.selectByNameAndProductId(productName,productId);</code>你应该就知道需要打开dao包的ProductMapper.java这个接口，在里面定义一个查询sql的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Product&gt; selectByNameAndProductId(@Param(value = &quot;productName&quot;) String productName,@Param(value = &quot;productId&quot;) Integer productId);  //注意在mybatis里面，多个参数时需要使用param注解。</span><br></pre></td></tr></table></figure></p><p>然后我们打开ProductMapper.xml文件，在里面新增sql查询语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_product</span><br><span class="line">  where id=#&#123;productId&#125; || name like #&#123;productName&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这种你觉得可以莫，我觉得不能使用短路或，因为一旦前面id为空，后面就不进行判断了，所以我们需要进行改写：</p><p>下面的如何？使用了if判断条件，但是还是有问题就是假如两个条件都不满足条件，那就会报错，因此这种也是不可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_product</span><br><span class="line">  &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">    where name like #&#123;productName&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">    and id =#&#123;productId&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>再来看看下面这个版本，这个经过使用<code>where 1=1</code>这个条件，的确可以满足要求，但是你不觉得这个太Low了莫？在这里加一个没有任何关系的<code>where 1=1</code>是不是没必要？对，mybatis给我们提供了一个where判断，可以避免这种情况的发生。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_product</span><br><span class="line">  where 1=1</span><br><span class="line">  &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">    and name like #&#123;productName&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">    and id =#&#123;productId&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>就是下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">            and name like #&#123;productName&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">            and id =#&#123;productId&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>或者是这样的，都是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">            or name like #&#123;productName&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">            or id =#&#123;productId&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>也就是说一旦逻辑传到where里面，而且if判断条件成立的情况下，将所有的or或者and替换为where，这样我们就不需要担心后面的where条件是否成立了。</p><p>最后打开IProductService.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; productSearch(String productName,Integer productId,int pageNum, int pageSize);  //后台管理员--后台商品搜索功能(同样也需要分页)</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于后台商品列表动态分页和后台商品搜索功能的开发介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来介绍后台商品列表动态分页和后台商品搜索功能的开发，这里面会涉及到mybatis-pagehelper的使用。&lt;/p
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十四）：商品详情信息获取</title>
    <link href="http://blog.licheetools.top/2018/08/23/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"/>
    <id>http://blog.licheetools.top/2018/08/23/SSM搭建二手市场交易平台（十四）：商品详情信息获取/</id>
    <published>2018-08-23T07:21:06.000Z</published>
    <updated>2019-04-15T14:11:20.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台商品详细信息获取的功能，这里面有几个字段的获取比较特殊，需要格外注意。</p><h2 id="获取商品详情"><a href="#获取商品详情" class="headerlink" title="获取商品详情"></a>获取商品详情</h2><p>首先打开ProductManageController.java文件，在里面新增以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员获取商品的详情</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;detail.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse getDetail(HttpSession session, Integer productId)&#123;</span><br><span class="line"></span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加我们获取商品详情的逻辑</span><br><span class="line">            return iProductService.manageGetDetail(productId);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员获取商品的详情</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;ProductDetailVo&gt; manageGetDetail(Integer productId) &#123;</span><br><span class="line">    //判断商品是否存在</span><br><span class="line">    if (productId == null) &#123;   //商品id不存在</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">    if (product == null) &#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // vo对象--value object</span><br><span class="line">    //pojo --&gt;bo(business object)---&gt;vo(view object)</span><br><span class="line">    //我们这里还是先按照技术结构的演变，使用vo等到后面升级的时候再进行替换</span><br><span class="line"></span><br><span class="line">    //商品存在,我们现在是进行信息的传递</span><br><span class="line">    ProductDetailVo productDetailVo =assembleProductDetailVo(product);</span><br><span class="line">   return ServerResponse.createBySuccess(productDetailVo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们知道现在是要获取商品的详细信息，那么我们可以使用不同的架构来完成，有两种架构可供选择：pojo –&gt;vo对象（value object）和pojo –&gt;bo(business object)—&gt;vo(view object)，考虑到技术的演变，我们这里还是使用vo等到后面升级的时候再进行替换。前面我们进行了商品信息是否存在的判断，现在是有商品，那么如何获取商品呢？</p><p>这里我们写了一个方法，用于获取商品信息(在ProductServiceImpl.java文件里面继续写入以下代码：)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private ProductDetailVo assembleProductDetailVo(Product product) &#123;</span><br><span class="line">    ProductDetailVo productDetailVo = new ProductDetailVo();</span><br><span class="line">    productDetailVo.setId(product.getId());</span><br><span class="line">    productDetailVo.setSubtitle(product.getSubtitle());</span><br><span class="line">    productDetailVo.setPrice(product.getPrice());</span><br><span class="line">    productDetailVo.setMainImage(product.getMainImage());</span><br><span class="line">    productDetailVo.setSubImages(product.getSubImages());</span><br><span class="line">    productDetailVo.setCategoryId(product.getCategoryId());</span><br><span class="line">    productDetailVo.setDetail(product.getDetail());</span><br><span class="line">    productDetailVo.setName(product.getName());</span><br><span class="line">    productDetailVo.setStatus(product.getStatus());</span><br><span class="line">    productDetailVo.setStock(product.getStock());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //imageHost:这个我们需要进行单独的配置，这样便于后面的维护</span><br><span class="line">    productDetailVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;, &quot;http://img.licheetools.top/&quot;));</span><br><span class="line"></span><br><span class="line">    //parentCategoryId</span><br><span class="line">    Category category = categoryMapper.selectByPrimaryKey(product.getId());</span><br><span class="line">    if (category ==null) &#123;</span><br><span class="line">        productDetailVo.setParentCategoryId(0);   //没有父节点就默认该节点为0</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        productDetailVo.setParentCategoryId(category.getParentId());  //存在就赋值给它</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //createTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">    productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));</span><br><span class="line"></span><br><span class="line">    //updateTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">    productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));</span><br><span class="line">    return productDetailVo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>既然我们使用了vo那么我们就要去vo包里面新建一个ProductDetailVo.java，在里面写入以下代码，这个文件里面就是定义一些你需要查询的商品字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class ProductDetailVo &#123;</span><br><span class="line">    private Integer  id;</span><br><span class="line">    private Integer categoryId;</span><br><span class="line">    private String name;</span><br><span class="line">    private String subtitle;</span><br><span class="line">    private String mainImage;</span><br><span class="line">    private String subImages;</span><br><span class="line">    private String detail;</span><br><span class="line">    private BigDecimal price;</span><br><span class="line">    private Integer stock;</span><br><span class="line">    private Integer status;</span><br><span class="line">    private String createTime;</span><br><span class="line">    private String updateTime;</span><br><span class="line"></span><br><span class="line">    private String imageHost;   //这个是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问</span><br><span class="line">    private Integer parentCategoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCategoryId() &#123;</span><br><span class="line">        return categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCategoryId(Integer categoryId) &#123;</span><br><span class="line">        this.categoryId = categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSubtitle() &#123;</span><br><span class="line">        return subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubtitle(String subtitle) &#123;</span><br><span class="line">        this.subtitle = subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMainImage() &#123;</span><br><span class="line">        return mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMainImage(String mainImage) &#123;</span><br><span class="line">        this.mainImage = mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSubImages() &#123;</span><br><span class="line">        return subImages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubImages(String subImages) &#123;</span><br><span class="line">        this.subImages = subImages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDetail() &#123;</span><br><span class="line">        return detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDetail(String detail) &#123;</span><br><span class="line">        this.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(BigDecimal price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStock() &#123;</span><br><span class="line">        return stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStock(Integer stock) &#123;</span><br><span class="line">        this.stock = stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(Integer status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(String createTime) &#123;</span><br><span class="line">        this.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUpdateTime() &#123;</span><br><span class="line">        return updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUpdateTime(String updateTime) &#123;</span><br><span class="line">        this.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getParentCategoryId() &#123;</span><br><span class="line">        return parentCategoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setParentCategoryId(Integer parentCategoryId) &#123;</span><br><span class="line">        this.parentCategoryId = parentCategoryId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>里面我们有一个<code>imageHost</code>字段，它是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问。继续回到我们的ProductServiceImpl.java文件，不知道细心的你发现没有，有4个字段的获取我们是使用了特殊的方法。其实也正是因为这个原因，我们并没有直接从product对象里面直接获取信息，因为那样获取的信息有可能不是我们所需要的格式，所以我们这里就重新定义了一个ProductDetailVo类，它的实例对象都是来源于product对象但是又进行了更深层次的处理，因此它就是我们想要的。</p><p>那么这4个特殊字段的获取应该怎么操作呢？接下来一一为你介绍。</p><h3 id="imageHost字段获取"><a href="#imageHost字段获取" class="headerlink" title="imageHost字段获取"></a>imageHost字段获取</h3><p>前面说过因为imageHost是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问，所以肯定会涉及到一些服务器属性的配置，这样我们把与服务器属性相关的利用配置文件来处理，这样一旦服务器发送变动，你只需要修改一下配置文件即可，不需要进行很多代码的修改，无形中提高了代码的可维护性。</p><p>打开util包，在里面新建一个PropertiesUtil.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class PropertiesUtil &#123;</span><br><span class="line"></span><br><span class="line">    //定义日志</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(PropertiesUtil.class);</span><br><span class="line"></span><br><span class="line">    private static Properties properties;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        String fileName =&quot;store.properties&quot;;</span><br><span class="line">        properties =new Properties();</span><br><span class="line">        try &#123;</span><br><span class="line">            properties.load(new InputStreamReader(PropertiesUtil.class.getClassLoader().getResourceAsStream(fileName),&quot;UTF-8&quot;));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.info(&quot;配置文件读取异常&quot;,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //定义方法用于从store.properties文件中读取信息</span><br><span class="line">    public static String getProperty(String key)&#123;</span><br><span class="line">        //可能我们写的property文件存在空格，需要去掉key包含的空格</span><br><span class="line">        String value =properties.getProperty(key.trim());</span><br><span class="line">        if(StringUtils.isBlank(value))&#123;   //注意这里使用isBlank，就算是空格和制表符也是为空</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return value.trim();  //有可能后面的值也存在空值</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义方法用于从store.properties文件中读取信息，添加默认参数</span><br><span class="line">    public static String getProperty(String key,String defaultValue)&#123;</span><br><span class="line">        //可能我们写的property文件存在空格，需要去掉key包含的空格</span><br><span class="line">        String value =properties.getProperty(key.trim());</span><br><span class="line">        if(StringUtils.isBlank(value))&#123;   //注意这里使用isBlank，就算是空格和制表符也是为空</span><br><span class="line">            value= defaultValue;</span><br><span class="line">        &#125;</span><br><span class="line">        return value.trim();  //有可能后面的值也存在空值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们这里利用的就是静态代码块，因为它只在类被加载时执行，而且只执行一次。这里我们重载了两个方法，目的就是适应不同的业务需求。同时为了能及时发现问题，我们定义了日志，用于相关信息的输出。</p><h3 id="parentCategoryId字段获取"><a href="#parentCategoryId字段获取" class="headerlink" title="parentCategoryId字段获取"></a>parentCategoryId字段获取</h3><p>因为我们这里是通过商品的Id来获取其详细信息的，这样就可能会存在一个情况就是没有父节点，所以这个字段我们需要格外注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//parentCategoryId</span><br><span class="line">Category category = categoryMapper.selectByPrimaryKey(product.getId());</span><br><span class="line">if (category ==null) &#123;</span><br><span class="line">    productDetailVo.setParentCategoryId(0);   //没有父节点就默认该节点为0</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    productDetailVo.setParentCategoryId(category.getParentId());  //存在就赋值给它</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间字段获取"><a href="#时间字段获取" class="headerlink" title="时间字段获取"></a>时间字段获取</h3><p>在这里我们有两个关于时间的字段：createTime和updateTime，我们知道在mybatis里面时间单位都是毫秒数，这是不利于我们展示的，所以需要进行配置。我们可以自己定义一个专门用于处理时间的工具类。打开util包，在里面新建一个工具类DateTimeUtil，我们知道一般时间处理就两种格式：str-&gt;Date或者是Date-&gt;str。这里我们使用了joda-time这个专门用于处理时间的工具，具体的可以参考这里：<a href="https://blog.csdn.net/backbug/article/details/78646152" target="_blank" rel="noopener">Joda-Time的使用</a>。DateTimeUtil文件写入以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.joda.time.DateTime;</span><br><span class="line">import org.joda.time.format.DateTimeFormat;</span><br><span class="line">import org.joda.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class DateTimeUtil &#123;</span><br><span class="line">    //我们使用joda-time</span><br><span class="line"></span><br><span class="line">    //定义一下我们的日期格式</span><br><span class="line">    public static final String STANDARD_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line"></span><br><span class="line">    //主要完成两种类型的转换</span><br><span class="line">    //str-&gt;Date</span><br><span class="line">    //Date-&gt;str</span><br><span class="line"></span><br><span class="line">    //str-&gt;Date，使用前面定义的默认的日期格式</span><br><span class="line">    public static Date strToDate(String dateTimeStr)&#123;</span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(STANDARD_FORMAT);</span><br><span class="line">        DateTime dateTime = dateTimeFormatter.parseDateTime(dateTimeStr);</span><br><span class="line">        return dateTime.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //str-&gt;Date</span><br><span class="line">    public static Date strToDate(String dateTimeStr,String formatStr)&#123;</span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(formatStr);</span><br><span class="line">        DateTime dateTime = dateTimeFormatter.parseDateTime(dateTimeStr);</span><br><span class="line">        return dateTime.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //Date-&gt;str，使用前面定义的默认的日期格式</span><br><span class="line">    public static String dateToStr(Date date)&#123;</span><br><span class="line">        if(date == null)&#123;</span><br><span class="line">            return StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime dateTime = new DateTime(date);</span><br><span class="line">        return dateTime.toString(STANDARD_FORMAT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //Date-&gt;str</span><br><span class="line">    public static String dateToStr(Date date,String formatStr)&#123;</span><br><span class="line">        if(date == null)&#123;</span><br><span class="line">            return StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime dateTime = new DateTime(date);</span><br><span class="line">        return dateTime.toString(formatStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //测试上面方法有没有问题的方法</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(DateTimeUtil.dateToStr(new Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line">        System.out.println(DateTimeUtil.strToDate(&quot;2008-08-08 20:08:08&quot;,&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回到ProductServiceImpl.java文件，添加以下代码（实际上前面已经写过了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//createTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">      productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));</span><br><span class="line"></span><br><span class="line">//updateTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">       productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));</span><br></pre></td></tr></table></figure><p>最后打开IProductService.java文件，里面写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;ProductDetailVo&gt; manageGetDetail(Integer productId);     //后台管理员获取商品的详情</span><br></pre></td></tr></table></figure><p>这样我们本篇，关于后台商品详细信息获取功能的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来介绍后台商品详细信息获取的功能，这里面有几个字段的获取比较特殊，需要格外注意。&lt;/p&gt;
&lt;h2 id=&quot;获取商品详
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十三）：后台商品的增加与更新</title>
    <link href="http://blog.licheetools.top/2018/08/22/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E5%95%86%E5%93%81%E7%9A%84%E5%A2%9E%E5%8A%A0%E4%B8%8E%E6%9B%B4%E6%96%B0/"/>
    <id>http://blog.licheetools.top/2018/08/22/SSM搭建二手市场交易平台（十三）：后台商品的增加与更新/</id>
    <published>2018-08-22T06:21:06.000Z</published>
    <updated>2019-04-15T14:10:29.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台商品新增，更新和上下架功能开发。说的比较通俗易懂的话，其实就是后台商品的增删改查一部分功能而已。</p><h3 id="商品模块开发"><a href="#商品模块开发" class="headerlink" title="商品模块开发"></a>商品模块开发</h3><p>商品模块开发分为前台和后台两部分，其中前台包括产品搜索，动态排序列表和商品详情；后台包括：商品列表、商品搜索、图片上传、富文本上传、商品详情、商品上下架、增加商品以及更新商品等。</p><p>在此过程中，你将会学到一下知识：1、FTP 服务器的对接；2、SpringMVC 文件上传；3、流读取 Properties 配置文件；4、抽取 POJO、BO、VO 对象之间的转换关系及解决思路；5、joda-time 快速入门；6、静态块；7、Mybatis-PageHelper 高效准确地分页及动态排序；8、Mybatis 对 List 遍历的实现方法；9、Mybatis 对 where 语句动态拼装的几个版本演变等。</p><h3 id="POJO、BO、VO"><a href="#POJO、BO、VO" class="headerlink" title="POJO、BO、VO"></a>POJO、BO、VO</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b33db7e922a826f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="POJO、VO"><a href="#POJO、VO" class="headerlink" title="POJO、VO"></a>POJO、VO</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3cbb6ef1c69493c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>数据表设计：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4f8d63402964d9e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="后台产品新增"><a href="#后台产品新增" class="headerlink" title="后台产品新增"></a>后台产品新增</h2><p>在controller文件的backend包里面新建一个ProductManageController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IProductService;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/product&quot;)</span><br><span class="line">public class ProductManageController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService iProductService;</span><br><span class="line"></span><br><span class="line">    /****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员保存商品</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;save.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse productSave(HttpSession session, Product product)&#123;</span><br><span class="line"></span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加我们保存商品的逻辑</span><br><span class="line">            return iProductService.saveOrUpdateProduct(product);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个和之前写的关于商品分类的模块其实很类似。接着我们在impl包里面新建一个ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.ProductMapper;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line">import top.store.service.IProductService;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iProductService&quot;)</span><br><span class="line">public class ProductServiceImpl implements IProductService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 后台管理员保存商品</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse saveOrUpdateProduct(Product product)&#123;</span><br><span class="line">        if(product != null)&#123;</span><br><span class="line">            //产品主图的选择</span><br><span class="line">            if(StringUtils.isNoneBlank(product.getSubImages()))&#123;  //存在子图的情况下</span><br><span class="line">                String[] subImageArray = product.getSubImages().split(&quot;,&quot;);</span><br><span class="line">                if(subImageArray.length&gt;0)&#123;</span><br><span class="line">                    product.setMainImage(subImageArray[0]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //如果是更新的话，我们产品的id肯定是存在的，不能为空（与前端进行了约定）</span><br><span class="line">            if(product.getId() != null)&#123;</span><br><span class="line">               int rowCount = productMapper.updateByPrimaryKey(product);   //前端更新肯定是全部商品</span><br><span class="line">                if(rowCount&gt;0)&#123;</span><br><span class="line">                    return ServerResponse.createBySuccessMassage(&quot;更新产品成功&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;更新产品失败&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //如果是新增的话，产品是没有id的，就要执行插入操作</span><br><span class="line">              int rowCount =  productMapper.insert(product);   //前端更新肯定是全部商品</span><br><span class="line">                if(rowCount&gt;0)&#123;</span><br><span class="line">                    return ServerResponse.createBySuccessMassage(&quot;新增产品成功&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;新增产品失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;保存或更新产品参数不正确&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意几点：</strong><br><strong>1、</strong>我们首先需要判断产品是否存在，存在然后判断产品是否存在子图，如果存在，我们就取第一个子图作为产品的主图进行前台的显示。<br><strong>2、</strong>我们这里把商品的修改和更新的逻辑写在一起了，我们在前端进行了声明：就是如果是进行产品的更新就必须把产品id传进来，然后依据Id来进行判断，否则就是新增产品的操作，这个应该还是比较好理解的.</p><p>接着我们在Service包里面新建一个IProductService.java文件（记住前面是I说明是接口），里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line"></span><br><span class="line">public interface IProductService  &#123;</span><br><span class="line">    ServerResponse saveOrUpdateProduct(Product product);    //后台管理员保存商品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们关于商品的更新和新增操作就完成了，接下来是后台管理员进行商品信息的状态设置。</p><h2 id="上下架功能开发"><a href="#上下架功能开发" class="headerlink" title="上下架功能开发"></a>上下架功能开发</h2><p>首先打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *</span><br><span class="line">    * 后台管理员进行商品的上下架状态修改</span><br><span class="line">    * */</span><br><span class="line">   @RequestMapping(&quot;set_sale_status.do&quot;)</span><br><span class="line">   @ResponseBody   //自动序列化json功能</span><br><span class="line">   public ServerResponse setSaleStatus(HttpSession session, Integer productId,Integer status)&#123;</span><br><span class="line"></span><br><span class="line">       //判断一下登录情况</span><br><span class="line">       User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">       if(user ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //判断一下是不是管理员身份</span><br><span class="line">       if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">           //如果是管理员就增加我们进行商品上下架的逻辑</span><br><span class="line">           return iProductService.setSaleStatus(productId,status);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *</span><br><span class="line">    * 后台管理员进行商品的上下架状态修改</span><br><span class="line">    * */</span><br><span class="line">   public ServerResponse&lt;String&gt; setSaleStatus(Integer productId,Integer status)&#123;</span><br><span class="line">       if(productId ==null || status ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">       &#125;</span><br><span class="line">       Product product =new Product();</span><br><span class="line">       product.setId(productId);</span><br><span class="line">       product.setStatus(status);</span><br><span class="line"></span><br><span class="line">       int rowCount = productMapper.updateByPrimaryKeySelective(product);    //我们这里是仅对状态进行修改，所以只需更新选中的即可</span><br><span class="line">       if(rowCount&gt;0)&#123;</span><br><span class="line">           return ServerResponse.createBySuccessMassage(&quot;修改产品销售状态成功！&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return ServerResponse.createByErrorMessage(&quot;修改产品销售状态失败！&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>最后打开IProductService.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; setSaleStatus(Integer productId,Integer status);    //后台管理员进行商品的上下架状态修改</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于后台商品新增，更新和上下架功能开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来介绍后台商品新增，更新和上下架功能开发。说的比较通俗易懂的话，其实就是后台商品的增删改查一部分功能而已。&lt;/p&gt;

      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十二）：分类管理功能开发</title>
    <link href="http://blog.licheetools.top/2018/08/21/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/08/21/SSM搭建二手市场交易平台（十二）：分类管理功能开发/</id>
    <published>2018-08-21T05:21:06.000Z</published>
    <updated>2019-04-15T14:09:44.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们继续来介绍有关分类管理的内容，具体包括：查询节点和递归查找功能开发等。</p><h3 id="查询节点功能开发"><a href="#查询节点功能开发" class="headerlink" title="查询节点功能开发"></a>查询节点功能开发</h3><p>我们打开CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 后台管理员查询品类子节点（平级）</span><br><span class="line">   * */</span><br><span class="line">  @RequestMapping(value = &quot;get_category.do&quot;)</span><br><span class="line">  @ResponseBody   //自动序列化json功能</span><br><span class="line">  public ServerResponse getChildrenParallelCategory(HttpSession session,@RequestParam(value = &quot;categoryId&quot;,defaultValue = &quot;0&quot;) Integer categoryId)&#123;</span><br><span class="line">      //判断一下登录情况</span><br><span class="line">      User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">      if(user ==null)&#123;</span><br><span class="line">          return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //判断一下是不是管理员身份</span><br><span class="line">      if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">          //如果是管理员,我们就查询子节点的category信息，并且不递归，保持平级</span><br><span class="line">          return iCategoryService.getChildrenParallelCategory(categoryId);</span><br><span class="line"></span><br><span class="line">      &#125;else &#123;</span><br><span class="line">          return  ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CategoryServiceImpl.java文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> /****</span><br><span class="line"> *</span><br><span class="line"> *后台管理员查询品类子节点</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;List&lt;Category&gt;&gt; getChildrenParallelCategory(Integer categoryId)&#123;</span><br><span class="line">    List&lt;Category&gt; categoryList = categoryMapper.selectChildrenCategoryByParentId(categoryId);</span><br><span class="line">    if(CollectionUtils.isEmpty(categoryList))&#123;</span><br><span class="line">        loggger.info(&quot;未找到当前分类的子分类&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccess(categoryList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>几点说明：</strong><br><strong>1、</strong>在这里我们自己新定义了方法selectChildrenCategoryByParentId，所以我们要去CategoryMappr.java文件里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Category&gt; selectChildrenCategoryByParentId(Integer parentId);</span><br></pre></td></tr></table></figure></p><p>然后自然就得去CategoryMappr.xml文件里面进行sql语句的建立：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectChildrenCategoryByParentId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;int&quot;&gt;  </span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">  from store_category</span><br><span class="line">  where parent_id = #&#123;parentId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>关于上面为什么这样写大家可以参看18-23行代码：(本文件)，也就是下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByPrimaryKey&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;java.lang.Integer&quot; &gt;</span><br><span class="line">  select </span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">  from store_category</span><br><span class="line">  where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>这里判断列表是否为空，使用了<code>CollectionUtils.isEmpty</code>方法，返回的是boolean类型，注意我们之前判断字符串是否为空使用了<code>StringUtils.isEmpty</code>方法，我们简单看一下上面那个<code>CollectionUtils.isEmpty</code>方法的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isEmpty(Collection coll) &#123;</span><br><span class="line">    return coll == null || coll.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于是否是空和空集合都进行了判断，所以我们就可以不用考虑多种情况了。</p><p>最后打开ICategoryService.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;List&lt;Category&gt;&gt; getChildrenParallelCategory(Integer categoryId);   //后台管理员查询品类子节点（不递归保持平级）</span><br></pre></td></tr></table></figure></p><h2 id="递归查找功能开发"><a href="#递归查找功能开发" class="headerlink" title="递归查找功能开发"></a>递归查找功能开发</h2><p>我们上面那个查询节点功能开发完成的只是对于平级的查询，是不进行递归查询的。<br>接下来我们就来完成递归查找功能的开发，可能会有一些难以理解，但是我尽量以通俗易懂的方式来进行说明。</p><p>我们打开CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 后台管理员查询品类子节点（递归）</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;get_deep_category.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse getCategoryAndDeepChildrenCategory(HttpSession session,@RequestParam(value = &quot;categoryId&quot;,defaultValue = &quot;0&quot;) Integer categoryId)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员,我们就查询当前节点的id和递归查询子节点的id</span><br><span class="line">        return iCategoryService.selectCategoryAndChildrenById(categoryId);</span><br><span class="line"></span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return  ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CategoryServiceImpl.java文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> /****</span><br><span class="line">     *</span><br><span class="line">     *后台管理员递归查询本节点及子节点的id并返回列表</span><br><span class="line">     */</span><br><span class="line">    public ServerResponse selectCategoryAndChildrenById(Integer categoryId)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> //递归算法，自己调用自己</span><br><span class="line">    private Set&lt;Category&gt; findChildrenCategory(Set&lt;Category&gt; categorySet,Integer categoryId)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们现在来完成递归算法的部分，递归就是自己调用自己，我们上面那个方法（<code>selectCategoryAndChildrenById</code>）就是实现总的要求查询本节点及子节点的id并返回列表。而递归算法的作用就是遍历当前节点，如果有子节点就把子节点当做父节点进行遍历，当父节点没有子节点的时候就进行递归退出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//递归算法，自己调用自己</span><br><span class="line">    private Set&lt;Category&gt; findChildrenCategory(Set&lt;Category&gt; categorySet,Integer categoryId)&#123;</span><br><span class="line">        Category category =categoryMapper.selectByPrimaryKey(categoryId);</span><br><span class="line">        //判断当前节点是否为空，不为空则继续</span><br><span class="line">        if(category != null)&#123;</span><br><span class="line">            categorySet.add(category);  //当前节点不为空就添加到集合里面，从它开始判断后面的子节点</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //查找子节点，递归算法一定要有一个退出的条件（也就是基准条件）这里是没有子节点就退出</span><br><span class="line">        List&lt;Category&gt; categoryList =categoryMapper.selectChildrenCategoryByParentId(categoryId);</span><br><span class="line">        //注意一下，因为我们这里是使用了mybatis，因此就算我们这里的categoryList是空，也不会返回null值，从而不会造成空指针异常</span><br><span class="line">        //对查询到的子节点进行遍历，然后调用前面查询当前节点的方法，其实也就是子节点被当做父节点使用，进行它下面的子节点的查询</span><br><span class="line">        for(Category categoryItem:categoryList)&#123;</span><br><span class="line">            findChildrenCategory(categorySet,categoryItem.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        return categorySet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>里面的注释写的应该比较详细了。对了还有一件事就是我们这里需要保证我们的category里面是没有重复元素的，如何实现没有重复元素呢？集合就可以，所以我们需要把我们category变成具有类似于集合的无重复性功能，你只要重写hashCode和equals方法，为什么重写这两个方法就可以呢？（在pojo里面的Category.java文件里面）这里我就不介绍了，我在另一篇《关于JAVA你必须知道的那些事（七）：输入输出流和集合》里面有过介绍，大家可以去我微信公众号里进行查看。如何快速重写这两个方法呢？在idea里面：code–&gt;generate–&gt;equals() and hashCode()，然后选择id就可以了，我们是通过id来进行判断的;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//重写equals和hashcode方法，目的就是使我们自定义的Category类型也能和集合一样具有消除不重复元素的功能</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object o) &#123;</span><br><span class="line">    if (this == o) return true;</span><br><span class="line">    if (o == null || getClass() != o.getClass()) return false;</span><br><span class="line">    Category category = (Category) o;</span><br><span class="line">    return Objects.equals(id, category.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">    return Objects.hash(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们继续回到CategoryServiceImpl.java文件，修改<code>selectCategoryAndChildrenById</code>方法的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public ServerResponse selectCategoryAndChildrenById(Integer categoryId)&#123;</span><br><span class="line">    Set&lt;Category&gt; categorySet = Sets.newHashSet();   //调用递归算法的时候进行初始化，使用sets这是guava提供的对于set的优化</span><br><span class="line">    findChildrenCategory(categorySet,categoryId);</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; categoryIdList = Lists.newArrayList();</span><br><span class="line">    if(categoryId != null)&#123;</span><br><span class="line">        for(Category categoryItem:categorySet)&#123;</span><br><span class="line">            categoryIdList.add(categoryItem.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccess(categoryIdList);  //返回查到的当前包括子节点的id列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意<code>Sets.newHashSet()</code>和<code>Lists.newArrayList()</code>都是使用了guava提供的类，具体可以参看这里：<a href="http://ifeve.com/google-guava/" target="_blank" rel="noopener">Google Guava官方教程（中文版）</a></p><p>最后打开ICategoryService.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse selectCategoryAndChildrenById(Integer categoryId);    //后台管理员递归查询本节点及子节点的id并返回列表</span><br></pre></td></tr></table></figure></p><p>不知道细心的你发现没有，我们这里关于分类的功能的地方，都没有强制使用提交的方式GET或者POST，因为分类可以允许你带参数，也可以不带参数，所以方法就不要求了。就类似于这样的，理解了么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;get_deep_category.do&quot;,method = RequestMethod.POST)</span><br></pre></td></tr></table></figure></p><p>接下来便是进行相关的商品品类的接口测试，这里就不介绍了，之前介绍过。</p><p>这样我们本篇关于查询节点和递归查找功能开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们继续来介绍有关分类管理的内容，具体包括：查询节点和递归查找功能开发等。&lt;/p&gt;
&lt;h3 id=&quot;查询节点功能开发&quot;&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十一）：添加和更新分类名称</title>
    <link href="http://blog.licheetools.top/2018/08/20/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%92%8C%E6%9B%B4%E6%96%B0%E5%88%86%E7%B1%BB%E5%90%8D%E7%A7%B0/"/>
    <id>http://blog.licheetools.top/2018/08/20/SSM搭建二手市场交易平台（十一）：添加和更新分类名称/</id>
    <published>2018-08-20T07:21:06.000Z</published>
    <updated>2019-04-15T14:08:52.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇，我们来介绍如何添加和更新分类的名称。里面的内容很多，希望大家对此有一个提前的认识。</p><h3 id="分类管理模块开发"><a href="#分类管理模块开发" class="headerlink" title="分类管理模块开发"></a>分类管理模块开发</h3><p>我们在分类管理模块开发主要介绍以下内容：获取节点；增加加点；修改名字；获取分类 ID；递归子节点 ID这些功能的实现相对来说比较有意思。在此过程中我们会介绍如何设计及封装无限层级的树状数据结构；递归算法的设计思想；如何处理复杂对象排重以及重写hashcode 和equal时应当注意的事项。</p><h2 id="添加商品分类"><a href="#添加商品分类" class="headerlink" title="添加商品分类"></a>添加商品分类</h2><p>因为商品分类都是在后台进行的，因此都在backend这个包里面。我们打开controller包下面的backend 包，在里面新建CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.ICategoryService;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/category&quot;)</span><br><span class="line">public class CategoryManageController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ICategoryService iCategoryService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后台管理员添加商品品类</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;add_category.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse addCategory(HttpSession session,String categoryName,@RequestParam(value = &quot;parentId&quot;, defaultValue = &quot;0&quot;) int parentId)&#123;</span><br><span class="line">        //注意一下上面我们需要给parentId一个默认的值0,它是我们分类的根节点，否则就会出错</span><br><span class="line"></span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加我们处理分类的逻辑</span><br><span class="line">            return iCategoryService.addCategory(categoryName,parentId);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着在service里面新建一个ICategoryService.java文件，用于接口的声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line"></span><br><span class="line">public interface ICategoryService &#123;</span><br><span class="line">    ServerResponse addCategory(String categoryName, Integer parentId);  //管理员后台添加商品品类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在impl文件夹下新建CategoryServiceImpl.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.CategoryMapper;</span><br><span class="line">import top.store.pojo.Category;</span><br><span class="line">import top.store.service.ICategoryService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service(&quot;iCategoryService&quot;)</span><br><span class="line">public class CategoryServiceImpl implements ICategoryService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 管理员后台添加商品品类</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse addCategory(String categoryName,Integer parentId)&#123;</span><br><span class="line">        //校验一下两者是否为空</span><br><span class="line">        if(parentId ==null || StringUtils.isBlank(categoryName))&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;添加商品品类错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Category category =new Category();  //实例化一个分类对象</span><br><span class="line">        category.setName(categoryName);   //设置分类名</span><br><span class="line">        category.setParentId(parentId);   //设置父类id</span><br><span class="line">        category.setStatus(true);   //设置这个分类是可以使用的状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        int rowCount =categoryMapper.insert(category);</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;添加商品品类成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;添加商品品类失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就完成了我们后台管理员添加商品分类的功能，你可能要问了我们还没在dao层的CategoryMapper里面定义方法呢，那是因为我们这里只是单纯的增删改查，里面已经给我们提供了它的实现，我们直接使用就可以，后面复杂的就可能需要自己定义方法和书写sql语句了。</p><h2 id="商品品类名称修改"><a href="#商品品类名称修改" class="headerlink" title="商品品类名称修改"></a>商品品类名称修改</h2><p>这个和上面的差不多，就是功能实现不同而已。我们打开CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后台管理员更新商品品类名称</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;set_category_name.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse setCategoryName(HttpSession session,Integer categoryId,String categoryName)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就增加我们处理更新分类名称的逻辑</span><br><span class="line">        return iCategoryService.setCategoryName(categoryId,categoryName);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return  ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ICategoryService.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse setCategoryName(Integer categoryId,String categoryName);   //后台管理员更新商品品类名称</span><br></pre></td></tr></table></figure></p><p>最后打开CategoryServiceImpl.java文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 管理员后台更新商品品类名称</span><br><span class="line">    * */</span><br><span class="line">   public ServerResponse setCategoryName(Integer categoryId,String categoryName)&#123;</span><br><span class="line">       //校验一下两者是否为空</span><br><span class="line">       if(categoryId ==null || StringUtils.isBlank(categoryName))&#123;</span><br><span class="line">           return ServerResponse.createByErrorMessage(&quot;添加商品品类错误&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Category category =new Category();  //实例化一个分类对象</span><br><span class="line">       category.setId(categoryId);  //传入id</span><br><span class="line">       category.setName(categoryName);   //设置新的品类名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       int rowCount =categoryMapper.updateByPrimaryKeySelective(category); //使用有选择性的更新，根据商品的id来进行更新</span><br><span class="line">       if(rowCount &gt;0)&#123;</span><br><span class="line">           return ServerResponse.createBySuccess(&quot;修改商品品类名字成功！&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return ServerResponse.createByErrorMessage(&quot;添加商品品类名字失败！&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于如何添加和更新分类的的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇，我们来介绍如何添加和更新分类的名称。里面的内容很多，希望大家对此有一个提前的认识。&lt;/p&gt;
&lt;h3 id=&quot;分类管理模
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>SSM搭建二手市场交易平台（十）：获取用户详细信息的功能开发</title>
    <link href="http://blog.licheetools.top/2018/08/19/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E7%9A%84%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.licheetools.top/2018/08/19/SSM搭建二手市场交易平台（十）：获取用户详细信息的功能开发/</id>
    <published>2018-08-19T05:21:06.000Z</published>
    <updated>2019-04-15T14:07:41.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上一篇中我们介绍了登录状态下重置密码功能开发，更新用户个人信息功能开发。那么本篇我们就来介绍如何获取用户详细信息的功能开发从而完成所有用户信息功能的开发。里面的内容很多，希望大家对此有一个提前的认识。</p><h2 id="获取用户详细信息的功能开发"><a href="#获取用户详细信息的功能开发" class="headerlink" title="获取用户详细信息的功能开发"></a>获取用户详细信息的功能开发</h2><p>我们的开发顺序是<code>service--&gt;mybatis--&gt;dao</code>，所以再次强调它的重要性！！！<br>打开UserController.java文件，写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 登录状态下的获取用户的详细信息</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = &quot;get_information.do&quot;,method = RequestMethod.POST)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;User&gt; getInformation(HttpSession session)&#123;</span><br><span class="line">    User currentUser =(User)session.getAttribute(Const.CURRENT_USER);   //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了</span><br><span class="line">    if(currentUser ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录需要强制登录，状态status为10&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return iUserService.getInformation(currentUser.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 登录状态下的获取用户的详细信息</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;User&gt; getInformation(Integer userId)&#123;</span><br><span class="line">    User user =userMapper.selectByPrimaryKey(userId);</span><br><span class="line">    if(user ==null)&#123;//根据用户id来获取其详细信息</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该用户不存在&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    user.setPassword(StringUtils.EMPTY);  //将密码这种关键信息设置为空</span><br><span class="line">    return ServerResponse.createBySuccess(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下，我们这里使用了<code>selectByPrimaryKey</code>方法，目的就是根据userId来进行个人信息查询的。当然我们需要在后台提供一个管理员登录的方法，不会允许任何人都可以使用个人信息查询功能，只有管理员才有登录后台的权限。我们在controller 包下面再新建一个名为backend的包（backend顾名思义就是后台模块），然后在backend包下面新建UserManageController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/user&quot;)</span><br><span class="line">public class UserManageController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;login.do&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;User&gt; login (String username, String password, HttpSession session)&#123;</span><br><span class="line">        ServerResponse&lt;User&gt; response =iUserService.login(username,password);</span><br><span class="line">        if(response.isSuccess())&#123;   //请求成功</span><br><span class="line">            User user = response.getData();</span><br><span class="line">            if(user.getRole() == Const.Role.ROLE_ADMIN)&#123;  //说明登录的是管理员</span><br><span class="line">                session.setAttribute(Const.CURRENT_USER,user);   //把用户添加到session里面</span><br><span class="line">                return response;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;不是管理员，无法登录&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后记得去IUserService.java文件里面添加接口类的声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;User&gt; getInformation(Integer userId);   //登录状态下的获取用户的详细信息</span><br></pre></td></tr></table></figure></p><p>这样我们登录状态下获取用户个人详细信息的功能就开发完毕了。</p><p>最后记得去打开UserController.java文件，将里面目前为止所有的<code>method = RequestMethod.GET</code>修改为<code>method = RequestMethod.POST</code>，可以按住Ctrl+F调出搜索框，然后直接进行替换就可以了。</p><h3 id="Md5加盐值的问题"><a href="#Md5加盐值的问题" class="headerlink" title="Md5加盐值的问题"></a>Md5加盐值的问题</h3><p>这个问题后面会教大家如何使用，现在大家了解这个网站就行：<a href="https://www.cmd5.com/" target="_blank" rel="noopener">cmd5</a></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>到目前为止，关于个人用户的信息的开发已经完成了，接下来进行模块单元测试。<br>首先确保我们的tomcat的配置没有问题，打开logback.xml文件，具体检查的内容包括：项目日志的File和fileNamePattern的前一部分相同，然后启动我们的tomcat：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f86d082aa8f653ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>正常浏览器会自动打开<code>http://localhost:8080/</code>页面，上面只有Hello World，但是并不影响我们的测试，我们然后打开我们的restlet client进行模块测试，我这里以注册为例进行说明（注意需要打开数据库，实时观察数据的变动）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1bf568fdcb2ed77c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5d186cbafc1b7aa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面的测试过程非常简单，选择post提交方式，根据你在UserController里的mapping设置，补充完整url，然后选择form，输入你在接口类声明的参数，点击提交就能出现结果了（具体的结果根据你参数的填写而有所不同）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bd60ce31d3703ee2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上图是用户板块所有的测试接口，下面则是我们在测试时打印的日志：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-916285f2edec7cbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>通过上面的测试我们发现上面的接口都没有问题。</p><p>至此，我们关于用户的相关功能的实现就全部结束了，接下来我们开始进行商品信息的相关配置，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;上一篇中我们介绍了登录状态下重置密码功能开发，更新用户个人信息功能开发。那么本篇我们就来介绍如何获取用户详细信息的功能开发从
      
    
    </summary>
    
      <category term="java" scheme="http://blog.licheetools.top/categories/java/"/>
    
    
      <category term="SSM框架" scheme="http://blog.licheetools.top/tags/SSM%E6%A1%86%E6%9E%B6/"/>
    
      <category term="JAVA后端" scheme="http://blog.licheetools.top/tags/JAVA%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
