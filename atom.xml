<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>编程思录，记录思考</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://licheetools.github.io/"/>
  <updated>2019-04-13T13:47:31.002Z</updated>
  <id>http://licheetools.github.io/</id>
  
  <author>
    <name>Envy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>趣玩爬虫实战训练（一）：12306火车车次信息爬取分析</title>
    <link href="http://licheetools.github.io/2019/04/01/%E8%B6%A3%E7%8E%A9%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A12306%E7%81%AB%E8%BD%A6%E8%BD%A6%E6%AC%A1%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96%E5%88%86%E6%9E%90/"/>
    <id>http://licheetools.github.io/2019/04/01/趣玩爬虫实战训练（一）：12306火车车次信息爬取分析/</id>
    <published>2019-04-01T13:38:39.000Z</published>
    <updated>2019-04-13T13:47:31.002Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为付费内容，请添加小编QQ：2810706745。付费以后，凭密码进行阅读，感谢您的支持与理解！" />    <label for="pass">对不起，此文章为付费内容，请添加小编QQ：2810706745。付费以后，凭密码进行阅读，感谢您的支持与理解！</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      本套实战教程为付费教程，请输入密码以后再进行阅读。版权所有，请勿传播，以免产生纠纷。本套教程是一次购买，终身阅读的。
    
    </summary>
    
      <category term="money" scheme="http://licheetools.github.io/categories/money/"/>
    
    
      <category term="趣玩爬虫" scheme="http://licheetools.github.io/tags/%E8%B6%A3%E7%8E%A9%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍</title>
    <link href="http://licheetools.github.io/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%88%A9%E5%99%A8JDBC%E4%BB%8B%E7%BB%8D/"/>
    <id>http://licheetools.github.io/2018/08/05/关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍/</id>
    <published>2018-08-05T13:33:59.000Z</published>
    <updated>2019-04-13T13:34:34.674Z</updated>
    
    <content type="html"><![CDATA[<p>jdbc全称java database connectivity.是java程序与数据库连接的一种机制。</p><p>jdbc的过程：<br>1、搭建开发环境<br>2、编写程序，在程序中加载数据库驱动<br>3、建立连接<br>4、创建用于向数据库发送sql语句的Statement对象<br>5、从代表结果集的ResultSet中取出数据<br>6、断开与数据库的链接，并释放相关的资源</p><p>###<br>DriverManager：驱动管理类<br>主要作用：<br>1、注册驱动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(new Driver());   //会导致驱动注册两次</span><br><span class="line">Class.forName(&quot;com.test.jdbc.demo1.JdbcTest1&quot;);   //实际上使用这种方式</span><br></pre></td></tr></table></figure></p><p>2、获得连接<br>Connection getConnection(String url,String username,String password)；<br>url的写法：jdbc:mysql://localhost:3306/jdbc<br>jdbc:协议<br>mysql:子协议<br>localhost:主机号<br>3306:端口号<br>注意如果为本地ip地址，则可以简写为：jdbc:mysql:///jdbc</p><p>###jdbc工具类的书写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line"></span><br><span class="line">//没有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        driverClass = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">        url = &quot;jdbc:mysql://localhost:3306/jdbctest&quot;;</span><br><span class="line">        username = &quot;root&quot;;</span><br><span class="line">        password = &quot;root&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是具有了jdbc.propreties属性的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        //加载属性文件并解析</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        //如何获得属性文件的输入流？</span><br><span class="line">        //通常情况下使用类的加载器的方式进行获取</span><br><span class="line">        InputStream is = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            props.load(is);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        driverClass =props.getProperty(&quot;driverClass&quot;);</span><br><span class="line">        url =props.getProperty(&quot;url&quot;);</span><br><span class="line">        username =props.getProperty(&quot;username&quot;);</span><br><span class="line">        password =props.getProperty(&quot;password&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中jdbc.propreties文件里面的代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClass = com.mysql.jdbc.Driver</span><br><span class="line">url = jdbc:mysql://localhost:3306/jdbctest</span><br><span class="line">username = root</span><br><span class="line">password = root</span><br></pre></td></tr></table></figure></p><h3 id="Statement的使用"><a href="#Statement的使用" class="headerlink" title="Statement的使用"></a>Statement的使用</h3><p>它的使用和我们后面所说的preparedStatement的使用有点不相同，而且我们优先后面的那种方式，因为不会产生sql注入的危险。</p><h3 id="preparedStatement的使用"><a href="#preparedStatement的使用" class="headerlink" title="preparedStatement的使用"></a>preparedStatement的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    /***</span><br><span class="line">     * 保存数据到数据库，其实就是插入操作</span><br><span class="line">     * */</span><br><span class="line">    public void demo1() &#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        PreparedStatement preparedStatement = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JdbcUtils.ReleaseSource(connection, preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在增删改查四个操作里面，我们先来简单连接四个过程的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">//保存数据到数据库，其实就是插入操作</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改数据库中的数据</span><br><span class="line">             //注册驱动与获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;update user set username =?,password =?,name=? where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;eee&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;555&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;lichee&quot;);</span><br><span class="line">            preparedStatement.setInt(4, 7);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据修改成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//删除数据库中的数据</span><br><span class="line">//注册驱动与获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;delete from user where uid =?&quot;;</span><br><span class="line">            //预处理sql</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,6);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if(i&gt;0)&#123;</span><br><span class="line">                System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的全部数据</span><br><span class="line">      //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;select * from user&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">           //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           while (resultSet.next())&#123;</span><br><span class="line">               System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的一条数据</span><br><span class="line"> //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;select * from user where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,1);</span><br><span class="line">            //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>也就是说增加，修改，删除都是使用executeUpdate函数，而且返回的是int类型的受影响的行数，然后我们就可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = preparedStatement.executeUpdate();</span><br><span class="line">           if(i&gt;0)&#123;</span><br><span class="line">               System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><p>只有查询使用的是executeQuery函数，而且返回的是resultSet类型的结果集，然后使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。</p><p>C3P0连接池</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jdbc全称java database connectivity.是java程序与数据库连接的一种机制。&lt;/p&gt;
&lt;p&gt;jdbc的过程：&lt;br&gt;1、搭建开发环境&lt;br&gt;2、编写程序，在程序中加载数据库驱动&lt;br&gt;3、建立连接&lt;br&gt;4、创建用于向数据库发送sql语句的Sta
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（八）：反射机制</title>
    <link href="http://licheetools.github.io/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://licheetools.github.io/2018/08/05/关于JAVA你必须知道的那些事（八）：反射机制/</id>
    <published>2018-08-05T13:33:08.000Z</published>
    <updated>2019-04-13T13:33:39.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。</p><h2 id="四大类"><a href="#四大类" class="headerlink" title="四大类"></a>四大类</h2><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>Constructor：关于单个类的构造方法以及对它的访问权限;<br>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>Method：提供关于类或者接口上的单独某个方法的信息。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-013cf6f3c2bf9298.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>java中java.lang.Class类用于表示一个类的字节码（.class）文件;获取某个class文件对应的Class对象：<br>1、在已知类和对象的情况下：<br>类名.class<br>对象.getClass()  –由Object类提供。<br>2、在未知类的情况下：<br>Class.forName(“包名.类名”)</p><p>Class类代表某个类的字节码，并提供了加载字节码的方法：forName(“包名.类名”)，forName方法用于类字节码到内存中，并封装成一个Class对象。</p><p>我们通过代码来测试一下：首先先新建一个测试类Person：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String sex;</span><br><span class="line"></span><br><span class="line">public Person() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Person(String name,String sex) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">this.sex =sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String getSex() &#123;</span><br><span class="line">return sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setSex(String sex) &#123;</span><br><span class="line">this.sex=sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;吃东西......&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Person [name=&quot; + name + &quot;, sex=&quot; + sex + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来建一个ReflectTest类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class ReflectTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获得Class对象： 1、通过类.class； 2、通过对象.getClass()； 3、通过Class.forName();</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demo1() throws ClassNotFoundException &#123;</span><br><span class="line">// 1、通过类.class；</span><br><span class="line">Class csone = Person.class;</span><br><span class="line"></span><br><span class="line">// 2、通过对象.getClass()；</span><br><span class="line">Person person = new Person();</span><br><span class="line">Class cstwo = person.getClass();</span><br><span class="line"></span><br><span class="line">// 3、通过Class.forName()获取信息（推荐）</span><br><span class="line">Class csthree = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(csthree);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ReflectTest.demo1();</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上三种方法获得的都是类的字节码文件对应的对象在内存中的地址。</p><h3 id="Constructor构造方法"><a href="#Constructor构造方法" class="headerlink" title="Constructor构造方法"></a>Constructor构造方法</h3><p>Constructor：关于单个类的构造方法以及对它的访问权限;<br>我们在前面已经得到了类名，那么就可以调用它的getConstructor()方法来获得它的有参或者无参的构造方法，紧接着你可以利用这个获得的构造方法的newInstance()方法，来达到完成实例化一个对象的目的。</p><p>我们新建一个测试类：ConstructorTest：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class ConstructorTest &#123;</span><br><span class="line">/**</span><br><span class="line"> * 获得无参的构造方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demo2() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得无参的构造方法</span><br><span class="line">Constructor cs = cls.getConstructor(null);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cs.newInstance(null); // 其实这里就相当于Person person =new Person();</span><br><span class="line">person.eat();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void demo3() throws Exception &#123;</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">Constructor cso = cls.getConstructor(String.class, String.class);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cso.newInstance(&quot;小白&quot;, &quot;男&quot;);  //这里其实就是相当于Person person =new Person(&quot;小白&quot;,&quot;男&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ConstructorTest.demo3();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Person [name=小白, sex=男]</span><br></pre></td></tr></table></figure></p><h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>我们在前面已经得到了类名，那么就可以得到它的成员变量（包括所有的成员变量和指定的成员变量）。</p><p>如果你想获得所有的（非私有）成员变量，那么你可以调用它的getFields()方法，获得该类所有public属性（包括父类继承的）；</p><p>如果你想获得所有的（含私有）成员变量<strong>getDeclaredFields()</strong>方法，获得该类所有声明的属性（包括私有属性和父类继承的）；</p><p>如果你想获得指定的（非私有）成员变量，那么你可以调用它的getField(String name)方法，获得指定的（非私有）成员变量；</p><p>如果你想获得指定的（含私有）成员变量，那么你可以调用它的<strong>getDeclaredField(String name)</strong>方法，获得指定的（含私有）成员变量;</p><p>设置Field变量是否可以访问，你可以使用field.setAccessible(boolean)，<br>boolean为真则表示可以，反之则不可以。</p><p>Field变量值的读取与设置：<br>field.get(obj);<br>field.set(obj,value);</p><p>我们首先在之前的Person类中添加一个公有的属性（public Sting hobby），然后新建一个测试类:FieldTest:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class FieldTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有属性</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public static void publicDemoTest() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定公有属性字段</span><br><span class="line">Field field1 = class1.getField(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">// 给指定的公有属性赋值</span><br><span class="line">Person p = (Person) class1.newInstance();</span><br><span class="line"></span><br><span class="line">//p.hobby =&quot;reading book&quot;;  //通过普通的对象.属性的方法来给对象的属性赋值</span><br><span class="line"></span><br><span class="line">field1.set(p, &quot;reading book&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 测试私有属性</span><br><span class="line"> * @throws Exception </span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void privateDemoTest() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定私有属性字段（注意这里需要注释掉该字段对应的getter和setter方法）</span><br><span class="line">Field field2 = class2.getDeclaredField(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//先实例化一个对象</span><br><span class="line">Person person =(Person)class2.newInstance();</span><br><span class="line"></span><br><span class="line">//给指定的私有属性赋值（操作属性）:</span><br><span class="line">//1、这里必须先要设置是否可以操作</span><br><span class="line">field2.setAccessible(true);</span><br><span class="line">//2、给对应的属性赋值</span><br><span class="line">field2.set(person,&quot;小白&quot;);</span><br><span class="line">//3、获取对应的属性值</span><br><span class="line">Object obj =field2.get(person);</span><br><span class="line"></span><br><span class="line">System.out.println(obj);</span><br><span class="line">System.out.println(&quot;**************************&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">FieldTest.publicDemoTest();</span><br><span class="line">FieldTest.privateDemoTest();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">Person [name=null, sex=null, hobby=reading book]</span><br><span class="line">小白</span><br><span class="line">**************************</span><br><span class="line">Person [name=小白, sex=null, hobby=null]</span><br></pre></td></tr></table></figure></p><h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>Method：提供关于类或者接口上的单独某个方法的信息。<br>Method类代表某个类中的一个成员方法<br>Method对象的获得方法：</p><p>如果你想获得所有的（非私有）方法，那么你可以调用它的getMethods()方法；</p><p>如果你想获得所有的（含私有）方法，那么你可以调用它<strong>getDeclaredMethods()</strong>方法；</p><p>如果你想获得指定的（非私有）方法，那么你可以调用它的getMethod()方法；（常用）</p><p>如果你想获得指定的（含私有）方法，那么你可以调用它的<strong>getDeclaredMethod()</strong>方法；（常用）</p><p>得到了方法，那么如何执行方法呢？我们可以通过反射来执行方法：<br>invoke(Object obj,Object….args)</p><p>我们依旧通过测试来完成相关信息的输出，在前面的Person类中新增两个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">System.out.println(&quot;跑步......&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String wacthTv(String name) &#123;</span><br><span class="line">return &quot;我在看&quot; + name + &quot;电视节目&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着新建一个测试类MethodTest：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class MethodTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demoOne() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person1 = (Person) class1.newInstance();</span><br><span class="line">// 获得公有方法</span><br><span class="line">Method method = class1.getMethod(&quot;eat&quot;);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person1); // 这里就相当于person.eat()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demoTwo() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person2 = (Person) class2.newInstance();</span><br><span class="line">// 获得私有方法</span><br><span class="line">Method method = class2.getDeclaredMethod(&quot;run&quot;);</span><br><span class="line">// 设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法（带参数）</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line">public static void demoThree() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class3 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person3 = (Person) class3.newInstance();</span><br><span class="line">// 获得带参数的私有方法</span><br><span class="line">Method method = class3.getDeclaredMethod(&quot;wacthTv&quot;, String.class);</span><br><span class="line">//设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">//执行该方法</span><br><span class="line">//method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line"></span><br><span class="line">Object obj =method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">MethodTest.demoOne();</span><br><span class="line">MethodTest.demoTwo();</span><br><span class="line">MethodTest.demoThree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出信息</span><br><span class="line">吃东西......</span><br><span class="line">跑步......</span><br><span class="line">我在看新闻联播电视节目</span><br></pre></td></tr></table></figure><p>上面我们测试了3种情况，分别是公有方法，私有方法，以及私有的带参数的方法。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>1、什么是Java的反射机制？<br>Java的反射机制是在运行状态中，对于任意一个类，都能够知道这个类的属性和方法；对于任意一个对象，都能够调用它的任意属性和方法；这种动态获取信息以及动态调用对象方法的功能称之为Java的反射机制。</p><p>2、Java的反射机制的作用？<br>是用来编写一些通用性较高的代码或者框架的时候使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。&lt;/p&gt;
&lt;h2 id=&quot;四大类&quot;&gt;&lt;a href=&quot;#四大类&quot; cl
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（七）：输入输出流和集合</title>
    <link href="http://licheetools.github.io/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://licheetools.github.io/2018/08/04/关于JAVA你必须知道的那些事（七）：输入输出流和集合/</id>
    <published>2018-08-04T13:32:02.000Z</published>
    <updated>2019-04-13T13:32:38.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h3><p>程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。</p><p>那么什么是流呢？所谓的流就是指一连串流动的字符，它是以先进先出的方式发送信息的通道。</p><p>流分为两种，输出流和输入流：</p><p>输出流一般是屏幕，打印机等，用来输出的设备，而输入流则是键盘或者扫描仪等设备。</p><p>数据源（键盘）将数据放到字符流中，然后程序通过read（读操作）进行读取。</p><p>也就是说文件输入是读，文件输出是写。</p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>File就是文件，它可认为是相关记录或放在一起的数据的集合，在Java中，我们使用java.io.File类对文件迸行操作。可以点击这里查看api文档：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8 api</a></p><p>需要注意的是，Windows中的目录分隔符为反斜杠“\”，而Linux的目录中的分隔符则是斜杠“/”。</p><p>eclipse的快速导包快捷键为ctrl+shift+o。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建File对象的三种方式</span><br><span class="line">File file1 =new File(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);   //方法一</span><br><span class="line"></span><br><span class="line">File file1 =new File(&quot;F:\\JAVA&quot;,&quot;\\javatest\\io\\score.txt&quot;);   //方法二</span><br><span class="line"></span><br><span class="line">File file =new File(&quot;F:\\JAVA&quot;);</span><br><span class="line">File file1 =new File(file ,&quot;\\javatest\\io\\score&quot;);   //方法三</span><br></pre></td></tr></table></figure><p>下面介绍一些常见的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">isDirectory()：判断是否是目录</span><br><span class="line">isFile()：判断是否是文件</span><br><span class="line">exists()：判断是否存在</span><br><span class="line">mkdir()：创建一级目录</span><br><span class="line">mkdirs()：创建多级目录</span><br><span class="line">createNewFile()：创建新的文件</span><br><span class="line">canRead()：是否可读</span><br><span class="line">canWrite()：是否可写</span><br></pre></td></tr></table></figure></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>字节分为两种：字节输入流 InputStream和字节输出流 OutputStream，我从网上找了两张图片，大家可以看一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b1d9716f1c8accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4b8a6b6b9bcfaa98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="FileInputStream文件输入流"><a href="#FileInputStream文件输入流" class="headerlink" title="FileInputStream文件输入流"></a>FileInputStream文件输入流</h3><p>FileInputStream文件输入流有几个作用：</p><ul><li>1、就是从文件系统中的某个文件中获得输入字节。</li></ul><p>举个简单的例子，复制就是把原来文件的信息进行读取的操作，然后粘贴就是把读取的信息进行写入的操作；</p><ul><li>2、用于读取图像数据之类的原始字节流。</li></ul><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public int read()</td><td style="text-align:center">从输入流中读取一个数据字节</td></tr><tr><td>public int read(byte[] b)</td><td style="text-align:center">从输入流中将最多b.length个字节的数据读入一个byte数组中</td></tr><tr><td>public int read(byte[] b,int off, int len)</td><td style="text-align:center">从输入流中将最多len个字节的数据读入byte数组中</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输入流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：如果int的返回值为-1，则表示已经读到了文件的末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamOne &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files =new  FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">//int n = files.read();  // 只能读取第一个数据字节</span><br><span class="line">//while(n!=-1) &#123;</span><br><span class="line">//System.out.print((char)n);</span><br><span class="line">//n =files.read();</span><br><span class="line">//&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int n =0;</span><br><span class="line">while((n=files.read())!=-1) &#123;</span><br><span class="line">System.out.print((char)n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再来看一个字节数组的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamTwo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files = new FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">byte [] b =new byte[100];</span><br><span class="line">files.read(b,0,5); //后面2个是偏移量，0表示从开始读取，而5代表存取的字节的长度</span><br><span class="line">System.out.println(new String(b));</span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="FileOutputStream文件输出流"><a href="#FileOutputStream文件输出流" class="headerlink" title="FileOutputStream文件输出流"></a>FileOutputStream文件输出流</h2><p>上面我们说完了FileInputStream文件输入流，接下来说文件输出流FileOutputStream：</p><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public void write(int b)</td><td style="text-align:center">将指定字节写入此文件输出流</td></tr><tr><td>public void write(byte[] b)</td><td style="text-align:center">将b.length个字节从指定byte数组写入此文件输出流中</td></tr><tr><td>public void write(byte[] b,int off,int len)</td><td style="text-align:center">将指定byte数组中从偏移量off开始的len个字节写入此文件输出流</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输出流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：在上面的方法里面都有一个默认参数为append（追加的意思），但是默认为空白（False也就是覆盖的意思），如果你设为True那么就是后面追加，会保留原来的信息。</p><p>上面的方法是不是和前面输入流很相似，是的这就是一个互逆的过程。</p><p>不过还有一个问题就是很容易发生编码错误，所以你会发现字节流其实不是很容易适合做字符相关的操作，适合做二进制数据相关的操作。但是却是非常适合文件的复制，粘贴。</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>我们之前的文件读写都是直接从硬盘上读取的，其实这种方式读取非常慢的；而我们现在要说的缓冲流这表明我们可以从内存中进行读取。</p><p>缓冲流包括：缓冲输入流BufferedInputStream和缓冲输出流BufferedOutputStream</p><p>缓冲输入流是不能直接直接读取文件系统中的数据的，它必须要和文件输入流进行结合。</p><p>缓冲区满了，会自动清空；不满则需要强制清空（你可以调用flush或者close方法）。</p><p>有时候我们会比较程序的运行时间，这时候我们可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long startTime =System.currentTimeMillis();  //获取当前的时间-1970年1月1日最后就是运行时间</span><br></pre></td></tr></table></figure></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>同样字符流也分为两种：字符输入流Reader和字符输出流 Writer</p><p>字节流和字符流它们主要的区别就是应用的场景不一样：<a href="https://blog.csdn.net/cynhafa/article/details/6882061" target="_blank" rel="noopener">java 字节流与字符流的区别</a></p><p>我网上找了2张图片，大家看一下关于字符流相关的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-73464e734ce3a5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30a69bdd4bdbf1c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="字节字符转换流"><a href="#字节字符转换流" class="headerlink" title="字节字符转换流"></a>字节字符转换流</h2><p>接下我们来谈谈字节字符转换流，顾名思义就是供字节字符转换用的（两者过渡的桥梁）：InputStreamReader和OutputStreamWriter：<br><a href="https://www.cnblogs.com/alsf/p/6778055.html" target="_blank" rel="noopener">掌握OutputStreamWriter和InputStreamReader类的作用</a></p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。简单点说就是把java对象转换为字节序列的过程。反序列就是和它相反的过程。</p><p>序列化步骤：<br>1、创建一个类，然后实现Serializable接口；<br>2、创建对象：将对象写入文件；<br>3、从文件读取对象信息<br>这个过程会涉及到两个流：对象输入流ObjectInputStream 和 对象输出流ObjectOutputStream</p><p> <a href="https://www.cnblogs.com/xdp-gacl/p/3777987.html" target="_blank" rel="noopener">Java基础学习总结——Java对象的序列化和反序列化</a></p><p><a href="http://www.importnew.com/17964.html" target="_blank" rel="noopener">Java对象的序列化与反序列化</a></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>在前面我们好像有介绍过数组（又好像没有，不管了），我们知道数组用于固定长度的数据场景，而集合更适合数据动态变化的场景。</p><p>或者说集合更加适合应用于下列场景:<br>1、无法预测存储数据的数量；<br>2、同时存储具有一对一关系的数据(商品信息&amp;详情或者学生&amp;学号等)；<br>3、需要进行数据的增删；<br>4、数据不允许重复等</p><h3 id="集合框架的体系结构"><a href="#集合框架的体系结构" class="headerlink" title="集合框架的体系结构"></a>集合框架的体系结构</h3><p>集合框架一共分为两类：Collection和Map。其中Collection用于存储类的对象，而Map用于以键值对的形式来存储信息。</p><p>为了更好的理解，我从网上找了一张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-115e000525e874e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Collection这个类下面有3个子接口，分别是List（序列），Queue（队列），Set（集）。其中，List（序列），Queue（队列）中存放的数据必须是有序的，并且是允许重复的；Set（集）存放的数据是无序的，且不允许重复的。每个接口下面又有许多的实现类。List的实例类是ArrayList（可以看做一个长度动态增长的数组）。Queue的实现类是LinkedList（它实现了List和Queue，也就是链表）。Set的实现类是HashSet，也就是哈希集。</p><p>Map这个类可以实现的类有HashMap，也就是哈希表。</p><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><p>List：是元素有序并且可以重复的集合，称为序列或者列表。</p><p>List可以精确控制每个元素的插入位置或删除某个位置的元素。</p><p>List的两个主要实现类是ArrayList和LinkedList。这里我们主要介绍ArrayList类，因为这个类使用比较多。其实ArrayList和数组是比较相似的，只是它的长度可以动态增长，它其实也是内存上一片连续的存储空间进行存储。而LinkedList本身是一个链表，这两个中方法的作用是几乎相同的。</p><p>ArrayList底层是由数组实现的，它的长度是可以动态增长的，用来满足应用程序的需求。如果你要在在列表尾部插入或删除数据，那么使用ArrayList是非常有效的(如果中间插入或者删除会过多挪位，并不适合)。当然它还更适合查找和更新元素，最重要的一点就是ArrayList中的<strong>元素可以为null值</strong>。</p><p>我们即将要将的Collection都是存放于java.util 包中的，所以在使用的时候需要我们自己进行包的导入。</p><p>下面简单介绍List接口中几种常用的方法，以便于大家在用的时候得心用手：</p><p>add()：向列表末尾添加元素；clear()：清空列表中元素；contains()：判断列表中是否包含指定的对象。</p><p>get()：返回此列表中指定位置的元素； indexOf ()：返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。</p><p>isEmpty() ：集合是否为空，空返回true； iterator ()：以正确的顺序返回该列表中的元素的迭代器；remove()：删除该列表中指定位置的元素；size()：返回此列表中的元素数；sort()：对列表进行排序。</p><p>接下来我们来看ArrayList这个类，你会发现它的方法其实和我们List这个接口的方法非常类似。其中<code>ArrayList()</code>是它的无参构造方法：构造一个初始容量为十的空列表；<code>ArrayList(Collection &lt;? extends E&gt; c)</code>是它的有参构造方法，它可以通过已存在的Collection来构造ArrayList。</p><p>记住列表的索引号是从零开始的，这一点很重要，需要特别注意。</p><p>我觉得学语言很多时候就得多看Api文档，这对自己自身能力的提高非常有帮助。</p><h3 id="ArrayList案例分析"><a href="#ArrayList案例分析" class="headerlink" title="ArrayList案例分析"></a>ArrayList案例分析</h3><p>双十一的时候，很多网站都会在其首页发布一些打折的消息，我们现在的任务就是模拟这个场景，要求如下：<br>1、添加和显示信息；<br>2、在指定位置处插入信息；<br>3、删除消息；<br>4、修改消息。<br>条件：编号 id，标题 title，创建人 creator，创建时间 createTime。</p><p>博主是一个重度的Python爱好者，所以这些要求刚写的时候，就已经想到如何用Python中的list去实现相关功能了。所以，如果你也喜欢Python不妨来交流学习。</p><p>好了，有点跑题了，你自己先尝试通过查看api文档的方式，看看自己能否独立实现这些要求，之后再来查看结果吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class Notice &#123;</span><br><span class="line">//公告的添加和显示;在指定位置处插入公告;删除公告;修改公告</span><br><span class="line">// 编号 id;标题 title;创建人 creator;创建时间 createTime</span><br><span class="line"></span><br><span class="line">private int id;</span><br><span class="line">private String title;</span><br><span class="line">private String create;</span><br><span class="line">private Date createTime;</span><br><span class="line"></span><br><span class="line">public Notice() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">public Notice(int id, String title, String create, Date createTime) &#123;</span><br><span class="line">super();</span><br><span class="line">this.id = id;</span><br><span class="line">this.title = title;</span><br><span class="line">this.create = create;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setId(int id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getTitle() &#123;</span><br><span class="line">return title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTitle(String title) &#123;</span><br><span class="line">this.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getCreate() &#123;</span><br><span class="line">return create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreate(String create) &#123;</span><br><span class="line">this.create = create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Date getCreateTime() &#123;</span><br><span class="line">return createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreateTime(Date createTime) &#123;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看这个类的测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class NoticeTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建Notice类的对象，我们先实例化3条信息</span><br><span class="line">Notice notice1 =new Notice(1,&quot;欢迎来到啃饼小白的修炼之旅&quot;,&quot;啃饼小白&quot;,new Date());</span><br><span class="line">Notice notice2 =new Notice(2,&quot;欢迎来到java的世界&quot;,&quot;管理员&quot;,new Date());</span><br><span class="line">Notice notice3 =new Notice(3,&quot;世界那么大，我想出去看看&quot;,&quot;思录者&quot;,new Date());</span><br><span class="line"></span><br><span class="line">// 将消息添加到ArrayList里面</span><br><span class="line">ArrayList noticelist =new ArrayList();</span><br><span class="line">noticelist.add(notice1);  // 默认为末尾添加</span><br><span class="line">noticelist.add(notice2);</span><br><span class="line">noticelist.add(notice3);</span><br><span class="line"></span><br><span class="line">// 消息的显示</span><br><span class="line">System.out.println(&quot;消息的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 在第一条消息后面添加一条消息</span><br><span class="line">Notice notice4 =new Notice(4,&quot;努力与运动兼备&quot;,&quot;拾光小白&quot;,new Date());</span><br><span class="line">noticelist.add(1,notice4);</span><br><span class="line">System.out.println(&quot;添加完消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 删除编号为3的消息：欢迎来到java的世界</span><br><span class="line">//noticelist.remove(2);</span><br><span class="line">noticelist.remove(notice2);</span><br><span class="line">System.out.println(&quot;删除消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 修改编号为3的消息：世界那么大，我想出去看看，中的我修改为你</span><br><span class="line">notice3.setTitle(&quot;世界那么大，你想出去看看&quot;);</span><br><span class="line">System.out.println(&quot;修改消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们来介绍集合中的另一个set。</p><h2 id="set-集"><a href="#set-集" class="headerlink" title="set(集)"></a>set(集)</h2><p>Set是元素无序且不可以重复的集合，被称为集。而我们上面刚介绍的列表则是有序且重复的，这一点要弄清楚。</p><p>set是一个接口，而它的实现类是HashSet（哈希集）。哈希集中的元素是无序且不可以重复的。而且在HashSet中，只允许有一个null元素因此它具有良好的存取和查找性能。</p><p>由于HashSet中的方法和前面介绍的ArrayList中的差不多，因此这里就不再过多的介绍其方法了，而是直接通过一个例子来进行具体方法的使用：</p><p>不过在这之前，我需要告诉你的是hashset里面是没有提供用于元素输出的get()方法，但是呢，它提供了一个iterator()方法，用于对集合元素进行遍历。</p><p>Iterator (迭代器): Iterator接口可以以统一的方式对各种集合元素进行遍历。记住这个Iterator (迭代器)是存在于java.util包里面的。</p><p>迭代器有2个方法：hasNext()和next()。其中hasNext()方法用于检测集合中是否还有下一个元素，这个是遍历的终止条件；而另一个next()方法是用于返回集合中的下一个元素。</p><p>要求：用HashSet存储多个表示颜色的英文单词,并输出。<br>其中单词包括: “blue”,”red”,”black”,”yellow”和”white”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class HashSetDemo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 将英文单词添加到HashSet当中, &quot;blue&quot;,&quot;red&quot;,&quot;black&quot;,&quot;yellow&quot;和&quot;white&quot;</span><br><span class="line">HashSet hset =new HashSet();</span><br><span class="line">hset.add(&quot;red&quot;);</span><br><span class="line">hset.add(&quot;blue&quot;);</span><br><span class="line">hset.add(&quot;black&quot;);</span><br><span class="line">hset.add(&quot;yellow&quot;);</span><br><span class="line">hset.add(&quot;white&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;集合中的元素为：&quot;);</span><br><span class="line">Iterator it =hset.iterator();</span><br><span class="line">// 遍历迭代器并进行输出</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在有一个问题，如果你把一个已经重复的对象插入到集合里面，会发生什么情况呢？答案是不会报错，可以运行，但是你会发现其实你根本插入不进去。是的，集合就是这样。</p><p>我们现在又来举一个例子，这个例子会让你对上面的介绍生产模糊，但这是必要的：</p><p>案例：如何在HashSet中添加自定义类的对象?<br>需求：<br>1、添加和显示宠物猫信息；<br>2、查找某只宠物猫的信息并输出；<br>3、修改宠物猫的信息;删除宠物猫信息</p><p>其中属性为: 名字name；年龄month；品种species<br>方法为: 构造方法；获取和设置属性值的方法；其他方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">public class Cat &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int month;</span><br><span class="line">private String species;</span><br><span class="line">public Cat(String name, int month, String species) &#123;</span><br><span class="line">super();</span><br><span class="line">this.name = name;</span><br><span class="line">this.month = month;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getMonth() &#123;</span><br><span class="line">return month;</span><br><span class="line">&#125;</span><br><span class="line">public void setMonth(int month) &#123;</span><br><span class="line">this.month = month;</span><br><span class="line">&#125;</span><br><span class="line">public String getSpecies() &#123;</span><br><span class="line">return species;</span><br><span class="line">&#125;</span><br><span class="line">public void setSpecies(String species) &#123;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot; 姓名=&quot; + name + &quot;, 年龄=&quot; + month + &quot;, 品种=&quot; + species + &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class CatTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 定义宠物猫对象</span><br><span class="line">Cat huahua = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">Cat fanfan = new Cat(&quot;凡凡&quot;, 10, &quot;英国短毛猫&quot;);</span><br><span class="line"></span><br><span class="line">// 将对象添加到hashset中</span><br><span class="line">HashSet hset = new HashSet();</span><br><span class="line">hset.add(huahua);</span><br><span class="line">hset.add(fanfan);</span><br><span class="line"></span><br><span class="line">// 显示宠物猫信息</span><br><span class="line">Iterator it = hset.iterator();</span><br><span class="line"></span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*******************************************&quot;);</span><br><span class="line">// 添加一个与花花属性一模一样的猫</span><br><span class="line">Cat huahua1 = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">hset.add(huahua1);</span><br><span class="line">Iterator its = hset.iterator();</span><br><span class="line">while (its.hasNext()) &#123;</span><br><span class="line">System.out.println(its.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br><span class="line">*******************************************</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br></pre></td></tr></table></figure></p><p>你运行上面的代码，你会发现一个有趣的事，你在集合里面竟然添加了一条和花花一模一样的数据，说好的集合不能添加相同的数据，你仿佛在逗我玩？我被欺骗了，宝宝不开心了。。。。。。</p><p>其实刚才那句话是适合于字符串的，为什么这么说呢，那是因为字符串是系统提供给我们的类，它里面已经将数据重复的规则，也就是这两个对象是否完全一样（属性，方法等）已经定义好了。这个你可以类比到toString方法，你直接输出对象却是对象在内存中的地址，但是你输出字符串却是字符串的值，这其实也就是字符串里面已经重写了自己的toString方法。</p><p>所以呢，如果你也希望自己定义的类也具有相似的功能，那么你需要重写hashCode()和equals()方法。我们知道equals()在字符串中是判断两个对象的值是否相等。在java里面，hashCode是与哈希表有关的，这是数据结构的知识，我这里简单说明一下。</p><p>举个例子，假如你要存储100个数字，如果你使用前面ArrayList或者数组来存储，而不是哈希表的话，在内存中连续的开辟一个空间用来存放数据，这似乎是可以的，但是一旦要是查找你就不行了。假设你要查找的数据在第100个位置，又或者说是不存在的，但你还是得从头开始查找，这样太浪费时间了。</p><p>那么如何利用哈希表来存储上述数据呢？我们可以这样：在内存中开辟3个区域来进行存放，同时为这3个区域进行编号和命名为桶0，桶1，桶2。然后我们制定一些规则用于桶里面数据的存放，而这些规则就是hashCode。假设我们定义的hashCode为n%3也就是利用数对3进行取余，来进行判断。那么桶0，桶1，桶2存放的数据分别是3的倍数，对3取余数加1，对3取余数加2。</p><p>有了这样的存储结构，我们首先是判断这个数是不是在这个桶里，然后是在哪个桶里，然后就去遍历这个桶里的元素。判断元素在哪个桶里，我们使用的是hashCode()方法，而判断桶里哪一个元素是我们要找的，则是使用equals()方法。这种方法真的好快。</p><p>下面是系统生成的equals方法，我觉得很麻烦，那么你自己是可以重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">Cat other = (Cat) obj;</span><br><span class="line">if (month != other.month)</span><br><span class="line">return false;</span><br><span class="line">if (name == null) &#123;</span><br><span class="line">if (other.name != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!name.equals(other.name))</span><br><span class="line">return false;</span><br><span class="line">if (species == null) &#123;</span><br><span class="line">if (other.species != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!species.equals(other.species))</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写后的equals方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if(this==obj) // 判断对象是否相等，相等则返回true，没必要继续比较属性</span><br><span class="line">return true;</span><br><span class="line">if (obj.getClass()==Cat.class) // 判断obj是否是Cat类的对象，是进行强制转换，进行对象属性的比较</span><br><span class="line">&#123;</span><br><span class="line">Cat cat = (Cat)obj;</span><br><span class="line">    return (cat.getName().equals(name))&amp;&amp;(cat.getMonth()==month)&amp;&amp;(cat.getSpecies().equals(species));</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写了这两个方法以后，现在你再来运行我们的测试类，你会发现花花这个重复对象是不能再次添加进去了。</p><p>现在我们想查找花花的信息，我们有多种方式，第一种是通过花花这个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面查找花花的信息并进行输出</span><br><span class="line">if(hset.contains(huahua)) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(huahua);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;对不起，花花没有找到&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种是通过花花的名字来查找花花的信息并进行输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面使用名字来查找花花的信息并进行输出</span><br><span class="line">boolean flag =false;</span><br><span class="line">its = hset.iterator();</span><br><span class="line">Cat cat =null ;</span><br><span class="line">while(its.hasNext()) &#123;  // 判断是否有下一个对象</span><br><span class="line">                cat=(Cat)its.next();    // 输出下一个对象的信息</span><br><span class="line">if(cat.getName().equals(&quot;花花&quot;)) &#123;</span><br><span class="line">flag =true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(cat);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;花花没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说完了hsahset，接下来我们来聊聊map的那些事。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map中的数据是以键值对( key-value )的形式存储的，这个和Python中的dict（字典）<br>很相似。</p><p>key-value以Entry类型的对象实例存在，而MAp.Entry本身也是一个接口；你可以通过key值来快速地查找value的值。</p><p>一个key-value的映射不能包含重复的键（Key的值必须是唯一的），但是Value是可以重复的。每个键最多只能映射到一个值。</p><p>同样这个Map接口中最常用的实现类是HashMap类，我们前面说过HashSet是基于HashMap而实现的。</p><p>HashMap是基于哈希表的Map接口的实现，它允许使用null值和null键（但是只能有一个）</p><p>key值不允许重复，HashMap中的Entry对象是无序排列的。</p><p>Map接口，HashSet 泛型有一个类，Map&lt;&gt;后可以有key的类型以及Value的类型。</p><p>entrySet获取键值对所有的内容，你可以通过get(key)取Value。keySet取出所有key值。HashMap中使用put添加元素，remove根据key值来移除元素。</p><p>HashMap中构造方法，默认容量16，加载因,0.75 ；你可以使用已存在map集合创建HashMap。</p><p>关于这一块，大家还是多看看api文档，多自己动手操作吧。</p><p>需求：完成一个类似字典的功能：<br>1、将单词以及单词的注释存储到HashMap中；<br>2、显示HashMap中的内容；<br>3、查找某个单词的注释并显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class DictionaryDemoTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String,String&gt; animal =new HashMap&lt;String,String&gt;();</span><br><span class="line">System.out.println(&quot;请输入三组单词对应的注释，并存放到HashMap当中：&quot;);</span><br><span class="line">Scanner console =new Scanner(System.in);</span><br><span class="line">int i=0;</span><br><span class="line">while(i&lt;3) &#123;</span><br><span class="line">System.out.println(&quot;请输入key值(单词)：&quot;);</span><br><span class="line">String key =console.next();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入value值(注释)：&quot;);</span><br><span class="line">String value =console.next();</span><br><span class="line">animal.put(key, value);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印输出value的值（使用迭代器）</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">System.out.println(&quot;使用迭代器输出所有的value的值：&quot;);</span><br><span class="line">Iterator&lt;String&gt; it =animal.values().iterator();</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 打印输出key和value的值</span><br><span class="line">// 通过entrySet方法得到key-value</span><br><span class="line">System.out.println(&quot;通过entrySet方法得到key-value：&quot;);</span><br><span class="line">Set&lt;Entry&lt;String,String&gt;&gt; entrySet =animal.entrySet();// 使用增强型for循环进行遍历</span><br><span class="line">for(Entry&lt;String,String&gt; entryset:entrySet) &#123;</span><br><span class="line">System.out.print(entryset.getKey()+&quot;-&quot;);</span><br><span class="line">System.out.println(entryset.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 通过单词找到注释并输出</span><br><span class="line">// 使用KeySet方法</span><br><span class="line">System.out.println(&quot;请输入你要查找的key(单词)&quot;);</span><br><span class="line">String keySearch =console.next();</span><br><span class="line">// 1、取得KeySet</span><br><span class="line">Set&lt;String&gt; KeySet =animal.keySet();</span><br><span class="line">//2、遍历KeySet</span><br><span class="line">boolean flag =false;</span><br><span class="line">for(String key:KeySet) &#123;</span><br><span class="line">if(key.equals(keySearch)) &#123;</span><br><span class="line">System.out.println(&quot;找到了&quot;+&quot;键值对为：&quot;+key+&quot;-&quot;+animal.get(key));</span><br><span class="line">flag=true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!flag) &#123;</span><br><span class="line">System.out.println(&quot;对不起，没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们再来看一个例子：商品信息管理的HashMap实例。</p><p>需求：使用HashMap対商品信息迸行管理：其中key是商品编号, value是商品对象；<br>你需要对HashMap中的商品信息迸行増、刪、改、査操作。</p><p>要求：分析商品信息类:<br>属性：商品编号: id；商品名称: name；商品价格: price<br>方法：构造方法，获取和设置属性值的方法和其他方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">float goodsPrice = console.nextFloat();</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是初始的代码，这个代码尽管能运行，但是实际上运行的问题还是很多的：<br>商品编号不可以重复（后面对前面的信息进行了覆盖）；类型输入错误。接下来我们就对这些进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.InputMismatchException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">// 判断商品编号id是否存在</span><br><span class="line">if(goodsMap.containsKey(goodsId)) &#123;</span><br><span class="line">System.out.println(&quot;该商品编号已经存在，请重新输入&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line"></span><br><span class="line">float goodsPrice = 0;</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">try &#123;</span><br><span class="line"> goodsPrice = console.nextFloat();</span><br><span class="line">&#125;catch(InputMismatchException e) &#123;</span><br><span class="line">System.out.println(&quot;商品价格的格式不准确，请输入数值型数据&quot;);</span><br><span class="line">console.next();</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9916f2753ebb5bf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们通过这张图片，来简单的对集合进行一下总结。</p><p>我们知道Collection这个接口是有3个实现接口的，list，queue和set，而每个接口下面都有其实现的类。</p><p>Arraylist：底层由数组实现，它的元素是有序且可以重复的，它可以动态增长，以满足应用程序的需求。值得注意的是，ArrayList的元素值可以为null。</p><p>HashSet：是Set接口的实现类，它的元素是无序且不可以重复的，不过只允许一个null元素</p><p>HashMap：以键值对存储的数据，里面的键不能重复，但是允许使用null值和null键 。HashMap中的Entry对象(键值对)是无序排列的。</p><p>也就是说上面3个只有第一个是有序的，其它两个都是无序的。</p><p>Iterator (迭代器) ：Iterator接口以统一的方式对各种集合元素进行遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it=set.iterator();</span><br><span class="line"></span><br><span class="line">while(it.hasNext())&#123;  // 判断迭代器下一个是否有内容</span><br><span class="line"> System.out.print(it.next()+&quot;  &quot;);   // 取出存在的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在String对象比较的是按照ASCII值进行对比的，如果要比较我们自己定义的类呢？就必须重写我们的hashCode()方法和equals方法。如果两者的hashCode不同，那肯定不是一个对象，后面不需要使用equals方法；如果hashCode相同，我们再去调用equals方法，比较对象的其他属性或方法是否相同。</p><p>本来这里应该介绍泛型的，但是考虑到篇幅的原因，下次再介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;输入输出流&quot;&gt;&lt;a href=&quot;#输入输出流&quot; class=&quot;headerlink&quot; title=&quot;输入输出流&quot;&gt;&lt;/a&gt;输入输出流&lt;/h3&gt;&lt;p&gt;程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。&lt;/p&gt;
&lt;p&gt;那么什么是流呢？所谓的流就是
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（六）：包装类和多线程</title>
    <link href="http://licheetools.github.io/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://licheetools.github.io/2018/08/04/关于JAVA你必须知道的那些事（六）：包装类和多线程/</id>
    <published>2018-08-04T13:30:42.000Z</published>
    <updated>2019-04-13T13:31:19.921Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。</p><p>那么我们如何让它和我们的对象一样，具有属性和方法呢？这里你就要用到包装类了。</p><p>包装类的产生就是为了解决基本数据类型存在的上述问题。通过包装类可以让基本数据类型获取对象一样的特征，拥有属性方法，行使对象一样的权益，从而完成对象化交互。</p><p>包装类与基本数据类型之间的对应关系，见下面的表格：<br>基本数据类型| 对应的包装类| 说明</p><ul><li>| :-: |-:<br>byte|    Byte|原始大写<br>short    |Short|原始大写<br>int    |Integer|变形<br>long|    Long|原始大写<br>float    |Float|原始大写<br>double|    Double|原始大写<br>char    |Character|变形<br>boolean    |Boolean|原始大写<br>注意：只有int 和char其基本数据类型与对应的包装类有一个变形以外，其余的都是其首字母的大写而已。</li></ul><p>所有的包装类都存在于java.lang中，而且都是被final关键字所修饰，也就是说所有的包装类是没有子类的，不可以被继承的。</p><p> 所有的数值型（byte,short,int,long,float,double,）都是继承自Number的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1d47a9ad1455103a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>余下的char 和 boolean是继承Object类的：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1f2a9cbdf0c10741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b10919e52363d087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="基本数据类型和包装型之间的转换"><a href="#基本数据类型和包装型之间的转换" class="headerlink" title="基本数据类型和包装型之间的转换"></a>基本数据类型和包装型之间的转换</h2><p>基本数据类型—–》包装型（装箱）；<br>包装型—–》基本数据类型（拆箱）；</p><h3 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h3><p>装箱：把基本数据类型转换成包装类，有自动装箱和手动装箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 自动装箱</span><br><span class="line">int a1 =1;</span><br><span class="line">Integer a2=a1;</span><br><span class="line"></span><br><span class="line">// 手动装箱</span><br><span class="line">Integer a3 =new Integer(a1);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;基本数据类型a1的值是：&quot;+a1);</span><br><span class="line">System.out.println(&quot;Integer类a2的值是：&quot;+a2);</span><br><span class="line">System.out.println(&quot;Integer类a3的值是：&quot;+a3);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">基本数据类型a1的值是：1</span><br><span class="line">Integer类a2的值是：1</span><br><span class="line">Integer类a3的值是：1</span><br></pre></td></tr></table></figure></p><h3 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h3><p>拆箱：把包装类转换成基本数据类型，也有自动拆箱和手动拆箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 自动拆箱</span><br><span class="line"></span><br><span class="line">int a4 = a1;</span><br><span class="line"></span><br><span class="line">// 手动拆箱</span><br><span class="line">Integer a5 = a3.intValue();</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">System.out.println(&quot;Interger：&quot; + a1);</span><br><span class="line">System.out.println(&quot;基本数据类型a4是：&quot; + a4);</span><br><span class="line">System.out.println(&quot;手动intValue：&quot; + a5);</span><br><span class="line"></span><br><span class="line">double a6 = a2.doubleValue();</span><br><span class="line">System.out.println(&quot;手动拆箱 double: &quot;+a6);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Interger：1</span><br><span class="line">基本数据类型a4是：1</span><br><span class="line">手动intValue：1</span><br><span class="line">手动拆箱 double: 1.0</span><br></pre></td></tr></table></figure></p><h3 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 基本数据类型转换为字符串</span><br><span class="line"></span><br><span class="line">// 将整型转换为字符串</span><br><span class="line">int a1 =9;</span><br><span class="line">String a2 =Integer.toString(a1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">System.out.println(&quot;int类型转换为String类型对象a2的值：&quot;+a2);</span><br><span class="line">System.out.println(&quot;******************************&quot;);</span><br><span class="line"></span><br><span class="line">//字符串转换为基本数据类型</span><br><span class="line">// 1、包装类的parse方法</span><br><span class="line">int a3 =Integer.parseInt(a2);</span><br><span class="line"></span><br><span class="line">//2、包装类的valueOf方法，现将字符串转换为包装类，再通过自动拆箱完成基本数据类型的转换</span><br><span class="line">int a4 =Integer.valueOf(a2);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a3的值：&quot;+a3);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a4的值：&quot;+a4);</span><br></pre></td></tr></table></figure><p>总结一下，你可以通过toString方法将基本数据类型转换为字符串。</p><p>同样可以通过Parse和valueOf将字符串转换为基本数据类型。需要注意的是，valueOf是对Parse的封装。</p><h3 id="包装类的几点说明"><a href="#包装类的几点说明" class="headerlink" title="包装类的几点说明"></a>包装类的几点说明</h3><p>我们前面好像有说过基本数据类型的默认值，这里重新贴一下：</p><table><thead><tr><th>基本数据类型</th><th style="text-align:center">默认值</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td>byte</td><td style="text-align:center">0</td></tr><tr><td>short</td><td style="text-align:center">0</td></tr><tr><td>int</td><td style="text-align:center">0</td></tr><tr><td>long</td><td style="text-align:center">0L</td></tr><tr><td>float</td><td style="text-align:center">0.0f</td></tr><tr><td>double</td><td style="text-align:center">0.0d</td></tr><tr><td>char</td><td style="text-align:center">‘\u0000’</td><td style="text-align:right">\u是指Unicode编码</td></tr><tr><td>boolean</td><td style="text-align:center">false</td></tr></tbody></table><p>那么现在问题来了，我们定义一个Integer类型的对象one ,它的初始值是不是也是0呢?答案不是0,而是null，因为此时Integer和String一样，都是类，其初始值为null。</p><h3 id="包装类的对象信息"><a href="#包装类的对象信息" class="headerlink" title="包装类的对象信息"></a>包装类的对象信息</h3><p>我们先来看一段代码，你先试着猜一下它的运行结果，然后参看输出结果，看看有什么体会：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ChangLiangTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Integer one =new Integer(100);</span><br><span class="line"></span><br><span class="line">Integer two =new Integer(100);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;one==two的结果：&quot;+(one==two));  //1</span><br><span class="line"></span><br><span class="line">Integer three =100;</span><br><span class="line">System.out.println(&quot;three==100的结果：&quot;+(three==100));  //2</span><br><span class="line"></span><br><span class="line">Integer four =100;</span><br><span class="line">System.out.println(&quot;three==four的结果：&quot;+(three==four));  //3</span><br><span class="line"></span><br><span class="line">Integer five =200;</span><br><span class="line">System.out.println(&quot;five==200的结果：&quot;+(five==200));  //4</span><br><span class="line"></span><br><span class="line">Integer six =200;</span><br><span class="line">System.out.println(&quot;five==six的结果：&quot;+(five==six));  //5</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在前面说过，使用new关键词就是直接在内存中开辟一个新的空间，one和two 只是值相等，内存中地址的引用并不相同，因此1输出的结果必然是false。</p><p><code>Integer three =100</code>其实是自动装箱，而后面的<code>three =100</code>其实是自动拆箱，实际上执行的是<code>Integer three =Integer.valueOf(100)</code>，最后比较的则是2个int类型的值是否相等，因此结果必然为true。</p><p>前面说过<code>Integer four =100</code>是自动装箱，但是它实际上执行的是<code>Integer four=nteger.valueOf(100);</code>。而valueOf会自动缓存值（在缓存区或者说对象池里面），也就是说当-128&lt;参数&lt;127的时候，该参数会直接从缓存区获取。因此两者比较的是来自缓存区的同一块地址。显然该结果是true。</p><p>同样<code>Integer five =200</code>是自动装箱，后面<code>five==200</code>自动拆箱，因此这里比较的则是2个int类型的值是否相等。显然该结果是true。</p><p>而最后一个则是因为参数200，它已经超出-128&lt;参数&lt;127这个范围，因此会直接实例化new 一个Integer，所以比较的是两个内存中的对象，显然结果是false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 输出结果：</span><br><span class="line">one==two的结果：false</span><br><span class="line">three==100的结果：true</span><br><span class="line">three==four的结果：true</span><br><span class="line">five==200的结果：true</span><br><span class="line">five==six的结果：false</span><br></pre></td></tr></table></figure><p>也就是说，当参数在-128 到 128之间才能从对象池中进行获取，超出则是不可以的，需要new了。</p><p>在java基本数据类型的包装类中除了 float 和 double都是可以应用对象常量池概念的。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-df9c491910b88071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面那样说你可能还不明白，我举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Double d1 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==100的结果是：&quot;+(d1==100));  //1</span><br><span class="line"></span><br><span class="line">Double d2 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==d2的结果是：&quot;+(d1==d2));  //2</span><br></pre></td></tr></table></figure></p><p>1的输出结果为true这是没有任何问题的，但是2的输出结果是false，因为float 和 double是不适用于对象常量池的。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>在说多线程之前，我么先来了解什么是进程？</p><p>进程就是可执行程序并存放在计算机存储器的一个指令序列，它是一个动态执行的过程。</p><p>线程是比进程还要小的运行单位，一个进程包含多个线程，你可以把线程看做一个子程序。</p><p>我们知道程序的运行是靠CPU的，那么在只有一个CPU情况下，如何才能保证程序的正常运行呢？我们可以把CPU的运行时间进行分片，根据时间片来进行任务的轮转执行，但由于时间片的长度太短了，以至于我们认为所有任务都是同时进行的。</p><h3 id="Thread和Runnable接口介绍"><a href="#Thread和Runnable接口介绍" class="headerlink" title="Thread和Runnable接口介绍"></a>Thread和Runnable接口介绍</h3><p>如何进行线程的创建呢？在Java里面，你可以通过创建一个Thread类或者一个Thread子类的对象来创建线程。也可以创建一个实现Runnable接口的类的对象。这两种都是可以的。</p><p>Thread是-个线程类，位于java.lang包下面，你可以去api文档进行查看，这里列举部分构造方法：<br>构造方法    | 说明| 备注</p><ul><li>| :-: | -:<br>Thread()|    创建一个线程对象|<br>Thread(String name)    |创建一个具有指定名称的线程对象|<br>Thread(Runnable target)    |创建一个基于Runnable接口实现类的线程对象|<br>Thread(Runnable target,String name)|    创建一个基于Runnable接口实现类,并且具有指定名称的线程对象。|</li></ul><p>以及Thread类的常用方法：<br>方法    | 说明| 备注</p><ul><li>| :-: | -:<br>public void run()    |线程相关的代码写在该方法中，一般需要重写<br>public void start()    |启动线程的方法<br>public static void sleep(long m)    |线程休眠m毫秒的方法<br>public void join()    |优先执行调用join()方法的线程</li></ul><p>你只需要记住，我们所有线程实现的代码都必须放在run方法里面，自然run方法中的代码被称为线程体。</p><p>还需要注意的是Runnable接口，它只有一个方法run()方法。你只需要记住Runnable是Java中用以实现线程的接口，任何实现线程功能的类都必须实现Runnable接口。</p><p>你可以点击这里查看<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Java8 api</a>，获取更多信息。</p><h3 id="通过Thread类创建线程"><a href="#通过Thread类创建线程" class="headerlink" title="通过Thread类创建线程"></a>通过Thread类创建线程</h3><p>在api里面，我们知道通过Thread类是可以创建线程的。那么我们现在就来通过继承Thread类的方式创建线程类，并重写run()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadTestDemo extends Thread &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(getName()+&quot;该线程正在执行！&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//System.out.println(&quot;主线程1正在执行&quot;);</span><br><span class="line">ThreadTestDemo ttd =new ThreadTestDemo();</span><br><span class="line">//ttd.start();  // 启动线程</span><br><span class="line">ttd.start();   //线程只能启动一次，不能多次启动</span><br><span class="line">//System.out.println(&quot;主线程2正在执行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大家知道除了我们刚才自定义的线程，其实还有一个主线程。现在我们自己来定义两个线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread &#123;</span><br><span class="line">public MyThread(String name) &#123;</span><br><span class="line">super(name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(getName()+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">public class ThreadTestTwo &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">MyThread t1 =new MyThread(&quot;线程1&quot;);</span><br><span class="line">MyThread t2 =new MyThread(&quot;线程2&quot;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个其实和我们上面的例子差别不是很大，只是现在我们定义了两个线程，但是主线程依然存在。运行一下，你会发现你每次的运行结果都是不相同的。对的，无论是线程还是进程，它们的运行顺序都是由系统来调度的，不是由程序员所能决定的（注意这是没有附加方法的情况，后面会说线程间的通信）</p><h3 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h3><p>现在你可能有一个疑问，为什么要实现Runnable接口呢又或者说为什么要实现Runnable接口创建线程呢?</p><p>答案你肯定知道，因为Java是单继承的，不支持多继承。现在问题来了，如果我现在定义的类已经继承了一个类，那么就不能通过继承Thread类来创建线程了？</p><p>又或者说，我不想重写Thread类的其他方法，只想使用run方法，这时候怎么办呢？</p><p>这时候Runnable接口就派上用场了。（前面说过Runnable接口只有一个run方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr2);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个输出结果也是随机的，但都会输出打印20个线程。现在我们对其修改一下，我们看一下，是不是多个线程可以共享同一个变量（言外之意，是不是只能打印输出11个线程，还有主线程）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">int i=0;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">for(;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">//TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#输出结果</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br></pre></td></tr></table></figure></p><p>结果是的，所以也就是说线程之间是可以共享成员变量的。</p><h3 id="线程的状态和生命周期"><a href="#线程的状态和生命周期" class="headerlink" title="线程的状态和生命周期"></a>线程的状态和生命周期</h3><p>通常而言，线程是有五个状态的，分别是：</p><p>新建(New)：创建一个Thread或Thread子类的对象时就会进入新建状态。</p><p>可运行(Runnable)： 调用start方法是进入可运行状态（而不是立即执行），就绪状态</p><p>正在运行(Running)： 一个Thread获取了cpu使用权就进入了正在运行状态。记住只有可运行状态才能进入到正在运行状态，其他的不可以。</p><p>阻塞(Blocked): 不再执行，缺少资源。</p><p>终止状态(Dead)：这个就是线程的停止运行了。</p><p>所谓的线程的生命周期，说白了就是这五个过程的相互转换而已，不过有些过程是双向的，有些则是单向的。我找了一张图，便于大家的理解：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d0aaaeef0cd473d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面简单说一下这个图的意思：</p><p>当你创建线程对象以后，该线程就变成了新建(New)状态，如果该线程调用start()方法，那么就变成了可运行(Runnable)状态；如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于可运行(Runnable)状态，如果此时该线程获取到了cpu的使用权，那么该线程就开心的进入到了正在运行(Running)状态；如果该线程调用了yield()方法，或者是时间片用完了，又回到了可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于正在运行(Running)状态，如果此时调用join()，wait()，sleep()或者I/O操作时，均会使该线程进入阻塞(Blocked)状态；如果此时该线程正常执行完毕或者异常终止，又或者调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于阻塞(Blocked)状态，如果此时等待执行join()方法的线程执行完毕；或者调用notify()或notifyall()方法；sleep()超时；I/O请求完成时，线程就会进入可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>需要说明的是，stop方法已经过时了，并不提倡大家去用。</p><p>下面简单介绍几个方法的使用。</p><h3 id="sleep方法的使用"><a href="#sleep方法的使用" class="headerlink" title="sleep方法的使用"></a>sleep方法的使用</h3><p>这个sleep方法是Thread类的一个方法，同时也是一个静态方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void sleep(long millis)</span><br></pre></td></tr></table></figure></p><p>sleep方法的作用是在指定的毫秒数内让正在执行的线程休眠(暂停执行)；其中的参数为休眠时间，单位是毫秒。</p><p>也就是说等休眠时间过了以后，程序才会继续执行。当你需要页面刷新或者计时的时候，这时候sleep就派上用场了。</p><h3 id="join方法的使用"><a href="#join方法的使用" class="headerlink" title="join方法的使用"></a>join方法的使用</h3><p>同样这个join方法也是Thread类的一个方法，但它是一个实例方法，因为有final的修饰，因此这个方法是不能被重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join()</span><br></pre></td></tr></table></figure></p><p>join方法的作用是等待调用该方法的线程结束后才能执行，是用来抢占资源优先执行的。也就是说如果某个线程调用了这个join方法，那么后面的线程都必须等这个线程运行完成后才能运行。</p><p>同时join方法还有一个带参数的同名方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join(long millis)</span><br></pre></td></tr></table></figure></p><p>带参数的join()方法的作用是等待该线程终止的最长时间为millis，这个参数的单位是毫秒。</p><p>也就是说没有参数的join方法是谁调用了它，它就开始执行，而后面的程序就必须等它执行完毕以后才能继续进行；有参数的join方法就是谁调用了它，在规定的毫秒以内无论你有没有执行完毕，只要时间一过，后面的程序就会开始执行。说白了，这是固定时间等待和永久时间等待而已。</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>现在你有一个想法，就是是否可以通过设置让某个线程优先执行呢?使用前面的join()方法尽管能完成部分要求，但还是想追求更加简单的方法。</p><p>这时候Java为线程类提供了10个优先级，优先级用整数1-10表示，超过该数字范围会抛出异常。</p><p>我们的主线程默认优先级为5，数字越大表示的优先级越高，当然你还可以使用优先级常量来进行优先级的表示：</p><ul><li>MAX_PRIORITY :线程的最高优先级10</li><li>MIN_PRIORITY :线程的最低优先级1</li><li>NORM_PRIORITY :线程的默认优先级5</li></ul><p>我们可以使用下面提供的方法来对优先级进行操作：</p><table><thead><tr><th>方法</th><th style="text-align:center">说明</th><th>备注</th></tr></thead><tbody><tr><td>public int getPriority()</td><td style="text-align:center">获取线程优先级的方法</td></tr><tr><td>public void setPriority(int newPriority)</td><td style="text-align:center">设置线程优先级的方法 </td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class MyThreadTestTwo extends Thread&#123;</span><br><span class="line">private String name;</span><br><span class="line">public MyThreadTestTwo(String name) &#123;</span><br><span class="line">this.name =name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(&quot;线程&quot;+name+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ThreadTestFive &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 获取主线程的优先级</span><br><span class="line">int mainPriority =Thread.currentThread().getPriority();</span><br><span class="line">System.out.println(&quot;主线程的优先级为：&quot;+mainPriority);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyThreadTestTwo tt1 =new MyThreadTestTwo(&quot;线程1&quot;);</span><br><span class="line">MyThreadTestTwo tt2 =new MyThreadTestTwo(&quot;线程2&quot;);</span><br><span class="line">tt1.setPriority(10);  //这与下面的代码的作用是一样的</span><br><span class="line">//tt1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">tt2.setPriority(1);</span><br><span class="line">//tt2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">tt1.start();</span><br><span class="line">tt2.start();</span><br><span class="line">//System.out.println(&quot;主线程1的优先级为：&quot;+tt1.getPriority());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你多运行上面的代码，你会发现并不是优先级大的线程先启动和执行。线程的执行和启动顺序，除了和优先级大小有关，还与操作系统调度，当前资源等有很大关系，是具有很强的随机性。</p><p><strong>总结一下：</strong></p><ul><li>各个线程是通过竞争CPU时间而获得运行机会的；</li><li>各线程什么时候得到CPU时间，占用多久，都是不可预测的；</li><li>一个正在运行的线程在什么地方被暂停是不确定的。</li></ul><p>也就是说到目前为止，我们还没有更好地办法来进行线程执行顺序的调度。</p><h3 id="银行存取钱业务"><a href="#银行存取钱业务" class="headerlink" title="银行存取钱业务"></a>银行存取钱业务</h3><p>如果按照我们前面所说的线程执行顺序是随机的，而且运行的线程在什么地方被暂停是不确定的话（的确，这是真的情况），那么银行就会出现一个非常有意思的现象：你存钱和取钱的总金额会发生丢失的情况：假设你开始银行账户有2000块钱，你取了100，存进去200，余额是不是2100块，但是有可能你的余额是2000块，你的余额更新失败了。这是我们不想看到的情况，但实际上这种情况是存在的，但是银行通过一些方法，杜绝了这种事情的发送，现在我们就来看看这些方法。</p><p>为了保证在存款或取款的时候，不允许其他线程对帐户余额进行操作，银行会将操作对象进行锁定，也就是同一时刻只允许一个线程进行运行。</p><p>也其实就是使用了synchronized关键字，也就是线程同步。synchronized关键字可以用在：成员方法，静态方法和语句块里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void Test()&#123;&#125;</span><br><span class="line">public static synchronized void Test()&#123;&#125;</span><br><span class="line">synchronized(obj)&#123;......&#125;</span><br></pre></td></tr></table></figure><p>使用关键字synchronized可以确保共享对象在同一时刻只能被一个线程访问，这种机制称为线程同步或者线程互斥。</p><h2 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h2><p>线程间通信的常用方法：</p><ul><li>wait方法：中断方法的执行，使线程等待。</li><li>notify()方法: 唤醒处于等待的某一个线程,使其结束等待</li><li>notifyAll()方法: 唤醒所有处于等待的线程,使它们结束等待</li></ul><p>建议使用notifyAll()，因为假如唤醒的单个线程还是我们刚休眠的生产线程，那么就会继续死锁，所以建议直接所有的等待线程。</p><p><a href="https://www.cnblogs.com/IUbanana/p/7067362.html" target="_blank" rel="noopener">详细介绍Java虚拟机（JVM）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。&lt;/p&gt;
&lt;p&gt;那么我们如何让它
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（五）：异常和字符串</title>
    <link href="http://licheetools.github.io/2018/08/03/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://licheetools.github.io/2018/08/03/关于JAVA你必须知道的那些事（五）：异常和字符串/</id>
    <published>2018-08-03T13:28:49.000Z</published>
    <updated>2019-04-13T13:29:21.697Z</updated>
    
    <content type="html"><![CDATA[<p>异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常:我们也称之为意外或者例外，它本质上就是程序上的错误。那么什么是错误呢？</p><p>错误如果用定义来说，我可能说不清楚。但是在我们编写程序的过程中，错误是会经常发生的，通常会发生在编译期间和运行期间。（这也就是编译型语言和解释型语言的一个非常大的不同，编译型语言会多一个编译过程，所以出错误的概率就相对低很多）</p><p>常见的编译错误包括：括号没有正常的配对; 语句结束后少写了分号;关键字拼写错误，通常这种错误编译器会帮助我们进行检查，但是运行期间的错误，编译器就无能为力了，只能靠程序员自己了。</p><p>常见的运行时错误有：使用空的对象引用调用方法；数组访问时下标越界；算术运算时除数为0；类型转换时无法正常转换等。这些错误在编译时是没有错误提示的，只能靠自己把握了。</p><p>在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。</p><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p>异常可以理解为一种事件，它的发生会影响正常的程序运行流程。在Java中你可以通过Throwable来进行各种异常信息的描述。</p><p>Throwable是根类，它具有2个子类：Error和Exception。</p><p>Error：程序无法处理的错误，表示运行应用程序中较严重问题。通常是Java虚拟机问题(比如虚拟机错误：VirtualMachineError；内存溢出：OutOfMemoryError；线程死锁 ：ThreadDeath等)；它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p><p>对于设计合理的应用程序来说,即使确实发生了错误,本质上也不应该试图去处理它所引起的异常状况。</p><p>Exception是程序本身可以处理的异常，我们通常所说的异常处理就是处理这种类型的异常。</p><p>Exception又可以分为两大类:：非检查异常(Unchecked Exception)和检查异常(Checked Exception)</p><p>非检查异常：它是编译器不要求强制处置的异常，通常包括：RuntimeException（运行时异常）以及它的子类:：NullPointerException（空指针异常）；ArrayIndexOutOfBoundsException（数组下标越界异常 ）；ArithmeticException（算数异常）和ClassCastException（类型转换异常）等。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bd8351144bfe45ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>java程序在编译阶段是不会去检查上面这些RuntimeException（运行时异常）异常的。</p><p>而检查异常则是编译器要求必须处置的异常，比如: IO异常 IOException; SQL异常 SQLException等。</p><h3 id="异常处理分类"><a href="#异常处理分类" class="headerlink" title="异常处理分类"></a>异常处理分类</h3><p>在Java应用程序中,异常处理机制为: 抛出异常和捕捉异常。异常必须要先被抛出，然后才能被捕获。</p><p>所谓抛出异常，它是指当一个方法当中出现异常，方法会去创建异常对象，并去交付给运行时系统来进行处理。</p><p>异常对象则是异常类型以及异常出现时的程序状态。</p><p>当程序运行时系统捕捉到这个异常，此时会去寻找合适的处理器，如果找到了，就会执行处理器的相关逻辑；如果始终没找到，程序就会终止运行。</p><p>对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同。</p><p>在Java中规定: 对于可查异常（检查异常(Checked Exception)）必须捕捉或者声明抛出；同时允许忽略不可查的RuntimeException(含子类)和Error(含子类)。</p><p>那么在java中，如何抛出异常和捕获异常呢？可以通过5个关键字来实现:：try catch finally throw throws。</p><p>try：将执行可能会产生异常的代码放在try里面；</p><p>catch：用来捕获异常；</p><p>finally：无论是否发生异常，finally里面的代码总能执行</p><p>try…catch…finally是一组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">          //代码段1</span><br><span class="line">          //产生异常的代码段2</span><br><span class="line">        &#125;catch (异常类型 ex) &#123;</span><br><span class="line">          //对异常进行处理的代码段3</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">          //代码段4</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>try代码块后可接零个或多个catch代码块，但是如果没有catch块，那么必须跟一个finally块。说白了就是try要和catch或finally组合使用，不能单独使用。你知道的，如果没产生异常的代码，你捕获什么？</p><p>如果有多个catch，记住要使用Exception放在最后一个，因为这个里面包含所有的你目前还未发现的异常。多个catch异常捕获的范围要满足自上而下，逐次增大的原则，否则小范围的异常会被大范围的覆盖哦。</p><p>一般情况下，finally里面的代码都会运行，但有时候你想提前停止代码运行，可以使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.exit(1);</span><br></pre></td></tr></table></figure></p><p>里面的状态码0代表正常退出,非0代表非正常退出（这里用了1代表，终止当前虚拟机的运行，使得程序无条件停止运行）。</p><p>也就是说，如果程序按照正常逻辑执行需要退出时，可以调用System.exit(0)。如果发生异常而退出，比如在catch块使用，那么会调用System.exit(1)。</p><h3 id="return关键字在异常处理中的作用"><a href="#return关键字在异常处理中的作用" class="headerlink" title="return关键字在异常处理中的作用"></a>return关键字在异常处理中的作用</h3><p>我们只需要记住一点：不管前面有多少个return，只要finally中有return，那么最终返回的就是finally中return的返回值。（前面的return则是按照异常捕获的顺序来返回）</p><h3 id="使用throws声明异常类型"><a href="#使用throws声明异常类型" class="headerlink" title="使用throws声明异常类型"></a>使用throws声明异常类型</h3><p><strong>throws：自动抛出异常类型，一次抛出很多个（多个之间用逗号隔开），在方法定义的时候被使用</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws Exception1,Exception2,...,ExceptionN &#123;</span><br><span class="line">    //可能产生异常的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说，如果一个方法可能会出现异常，但没有能力处理这种异常，那么我们就可以在方法声明的时候使用throws来声明抛出异常。</p><p>举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static int test() throws ArithmeticException &#123;  //声明可能会引发的异常，这里只声明异常，不去处理，谁调用谁处理</span><br><span class="line">System.out.println(&quot;====运算开始====&quot;);</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">System.out.print(&quot;请输入第一个数字: &quot;);</span><br><span class="line">int one = scanner.nextInt();</span><br><span class="line">System.out.print(&quot;请输入第二个数字: &quot;);</span><br><span class="line">int two = scanner.nextInt();</span><br><span class="line">System.out.println(&quot;====运算结束====&quot;);</span><br><span class="line">return one / two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们调用的时候来进行异常处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">int result = test();</span><br><span class="line">System.out.println(&quot;one和two的商是：&quot; + result);</span><br><span class="line">&#125; catch (ArithmeticException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(&quot;除数不能为0&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意你可以在throws声明异常的时候，尽量多考虑一些情况，然后可以在调用的时候利用surround with来进行异常的快速生成处理，这里快速生成的异常类型和你在throws抛出的类型一致。</p><p>当然，你完全可以直接抛出Exception，那样调用的时候处理就只需要直接处理Exception这个了。</p><p>还需要注意的一点就是，当throws后面直接跟Exception的时候，编译器会提示你当前方法可能会产生异常，因为Exception这个父类包含了出现检查异常的情况。但是如果你不是Exception，而是前面所列举的非检查异常，那么编译器就不会给你报错的。</p><p>说明白编译器只会对检查异常进行报错处理，但是对于非检查异常是不进行报错处理的。如果非要有一种对于非检查异常类似的报错处理，你可以使用文档注释来达到这个目的，但是报错处理不是编译器完成的，而是程序员自己发现的。</p><h3 id="使用throw手动抛出异常"><a href="#使用throw手动抛出异常" class="headerlink" title="使用throw手动抛出异常"></a>使用throw手动抛出异常</h3><p><strong>throw：手动抛出异常，一次只能抛出一个异常，在方法体内被使用</strong>：<br>throw用来抛出一个异常，如: throw new IOException()；而且throw抛出的只能是可Throwable类或者其子类的实例对象，不能是自己定义的，如: throw new String(“出错啦”)，这种明显就是错误的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void method()&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    //代码段1</span><br><span class="line">  throw new 异常类型();</span><br><span class="line">  &#125; catch(异常类型 e)&#123;</span><br><span class="line">    //对异常进行处理的代码段2</span><br><span class="line">  &#125;</span><br><span class="line">finally&#123;</span><br><span class="line">// 需要执行的代码段3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你还可以，在抛出异常的地方通过throws关键字来标明异常的类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws 异常类型&#123;</span><br><span class="line">  //代码段1</span><br><span class="line">    throw new 异常类型();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：<br>1、通过try..catch包含throw语句，自己抛出异常，自己处理异常；<br>2.、通过throws在方法声明出抛出异常类型，谁调用谁处理，调用者可以自己处理，也可以继续上抛，此时可以抛出与throw对象相同的类型或者其父类（但是不能是其子类）。</p><p>你可以通过throws声明将要抛出何种类型的异常，并通过throw将产生的异常进行抛出。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>尽管我们使用Java内置的异常类可以描述在编程时出现的大部分异常情况，但是还是有一些情况我们难以处理，这时候我们可以自定义异常，用来描述特定情况下产生的异常类型。</p><p>所谓自定义异常，说白了就是定义一个类，去继承Throwable类或者它的子类。然后其他的就和我们前面说过的一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class CarTest extends Exception &#123;</span><br><span class="line">public CarTest() &#123;</span><br><span class="line">super(&quot;18岁以下，70岁以上的人不允许报考驾照&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testAge() throws CarTest&#123;</span><br><span class="line">System.out.println(&quot;请输入你的年龄：&quot;);</span><br><span class="line">Scanner input = new Scanner(System.in);</span><br><span class="line">int age = input.nextInt();</span><br><span class="line">if (age &lt; 18 || age &gt; 70) &#123;</span><br><span class="line">throw new CarTest();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;欢迎报考驾校&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testAge();</span><br><span class="line">&#125; catch (CarTeste) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">System.out.println(&quot;驾校前台人员不得办理相关业务&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>这个顾名思义就是一系列的异常，前面捕获到了异常自己不处理而是向后面抛出，从而形成异常链。</p><p>为了更好的说明，我找了一个例子，大家可以看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class TryDemoFive &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testone() throws HotelAgeTest &#123;</span><br><span class="line">throw new HotelAgeTest();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testthree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，testone手动抛出了一个异常，但是没有处理，而是向后抛出，testtwo虽然进行了处理，但是又抛出了一个新的异常，testthree也是这样，之后最后的main方法里对testthree的异常进行了处理，并且进行了输出。</p><p>所以这段代码的运行结果就是下面的结果，只打印输出了testthree的信息，其他却没有，实际上这就造成了前面异常信息的丢失：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 我是新产生的异常2</span><br><span class="line">at JavaExceptionTest.TryDemoFive.testthree(TryDemoFive.java:23)</span><br><span class="line">at JavaExceptionTest.TryDemoFive.main(TryDemoFive.java:29)</span><br></pre></td></tr></table></figure></p><p>那么如何解决这种异常的丢失呢？从而让异常链的情况为我们所知呢，你可以在构造方法中添加上一层异常e或者使用initCause(e)就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;,e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">//throw new Exception(&quot;我是新产生的异常2&quot;,e);</span><br><span class="line">Exception e1 =new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">e1.initCause(e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>也就是说，异常链将异常发生的原因一个传一个串起来，把底层的异常信息传给上层，这样逐层抛出。</p><h2 id="异常总结"><a href="#异常总结" class="headerlink" title="异常总结"></a>异常总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7ec06da956208712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在Java中, 通过Throwable及其子类描述各种不同的异常类型。其中这个Error是我们无法预测的，但是Exception却是我们可以避免的。Exception又分为2类，一个是运行时异常（非检查异常），这种编译器是不会给你报错的，另一种异常是则是编译器强制你去处理的异常。</p><p>几点建议：<br>1、处理运行时异常时,采用逻辑去合理规避同时辅助try-catch处理；<br>2、在多重catch块后面,可以加一个catch(Exception)来处理可能会被遗漏的异常；<br>3、对于不确定的代码,也可以加上try-catch ,处理潜在的异常；<br>4、尽量去处理异常,切忌只是简单的调用printStackTrace()去打印输出；<br>5、具体如何处理异常,要根据不同的业务需求和异常类型去决定；<br>6、尽量添加finally语句块去释放占用的资源，如关闭文件和数据库连接等。</p><p><strong>最后一点：当子类重写父类抛出异常的方法时,声明的异常必须是父类方法所声明异常的同类或子类。</strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>创建字符串的3种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 =&quot;hello world&quot;;</span><br><span class="line">String str2 =new String();</span><br><span class="line">String str3 =new String(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure></p><p>字符串的常用方法及说明：<br>返回类型| 方法| 说明</p><ul><li>| :-: | -:<br>int |  length() |     返回当前字符串的长度<br>int  | indexOf(int ch)     | 查找ch字符在该字符串中第一次出现的位置<br>int |  indexOf(String str)     | 查找str子字符串在该字符串中第一次出现的位置<br>int |  lastIndexOf(int ch)     | 查找ch字符在该字符串中最后一次出现的位置<br>int  | lastIndexOf(String str) |     查找str子字符串在该字符串中最后一次出现的位置<br>String  | substring(int beginIndex) | 获取从beginIndex位置开始到结束的子字符串<br>String  | substring(int beginIndex, int endIndex)     | 获取从beginIndex位置开始到endIndex位置的子字符串<br>String  | trim()     | 返回去除了前后空格的字符串<br>boolean  | equals(Object obj)     | 将该字符串与指定对象比较，返回true或false<br>String  | toLowerCase() |     将字符串转换为小写<br>String  | toUpperCase()     | 将字符串转换为大写<br>char |  charAt(int index) |     获取字符串中指定位置的字符<br>String [] |  split(String regex, int limit)     | 将字符串分割为子字符串，返回字符串数组<br>byte []  | getBytes()     | 将该字符串转换为byte数组</li></ul><h3 id="运算符与equals方法的区别"><a href="#运算符与equals方法的区别" class="headerlink" title="==运算符与equals方法的区别"></a>==运算符与equals方法的区别</h3><p>我们在前面也说过，==运算符比较的是对象在内存中的引用地址，而equals方法的用法就需要分情况了，如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因为这里谈的是字符串，因此可以说equals比较的是字符串的值是否相等。</p><p>内存空间：栈存放的是类的引用，常量池存放的是字符串常量，而堆里存放的则是通过new创建的字符串对象（在这里是这样的，我们这里只谈字符串）</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>String和StringBuilder的区别:：String是不可变的，而StringBuilder则是可变的，因此当频繁操作字符串时，建议使用StringBuilder。</p><p>有人就要问了，不是还有一个StringBuffer么，那这个跟前面的有啥区别么？其实StringBuilder和StringBuffer二者基本上是一样的，但是StringBuffer是线程安全的,，而StringBuilder则不是，因此也正是因为这样，所以StringBuilder性能略高一点。因为字符串处理一般都是单线程，所以我们使用StringBulider就行了。</p><p>StringBuilder常用方法<br>append()：在末尾增加内容；<br>delete()：删除内容；<br>insert()：插入内容；<br>length()：返回字符串长度；<br>replace()：替换内容。<br>这些方法和Python中的容器操作是很相似的，这里就不再举例说明了。</p><p>后面的内容等我有空再更新了，这次就说到这里，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。&lt;/p&gt;
&lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（四）：单例模式和多态</title>
    <link href="http://licheetools.github.io/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>http://licheetools.github.io/2018/08/02/关于JAVA你必须知道的那些事（四）：单例模式和多态/</id>
    <published>2018-08-02T13:27:57.000Z</published>
    <updated>2019-04-13T13:28:29.457Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>官方的解释是，设计模式是：一套被反复使用，多数人知晓的，经过分类编目，代码设计经验的总结。说人话就是：软件开发人员在软件开发过程中面临的一般问题的解决方案。</p><p>常见的设计模式可以参看这张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2a714e288d048e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们可以对其按照作用来进行分类:：<br>关注对象创建过程的：<strong>创建型模式</strong>；<br>类和对象组合：<strong>结构型模式</strong>；<br>对象之间的通信过程：<strong>行为型模式</strong>；</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8f3d74b6c145ed8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式: 一个类<strong>有且仅有</strong>一个实例,并且自行实例化向整个系统提供，它的目的就是使得类的一个对象成为该类系统中的唯一实例。</p><p>要点：</p><ol><li>某个类只能有一个实例;；</li><li>必须自行创建实例；<ol start="3"><li>必须自行向整个系统提供这个实例；</li></ol></li></ol><p>实现：<br>1、只提供<strong>私有</strong>的构造方法；<br>2、只含有一个该类的<strong>静态私有</strong>对象；<br>3、提供一个<strong>静态</strong>的<strong>公有方法</strong>用于创建、获取静态私有对象。</p><p>对于1的理解：private是访问限制能力最强的修饰符，只能在当前类内被使用。也就是说经过private修饰，该类的对象在类外无法通过new关键字直接实例化，这样可以做到限制类实例化产生；</p><p>对于2的理解：1可以实现有且仅有一个实例，static修饰的静态成员可以满足该类有且仅有一个，所有的对象都共享这一个静态成员；</p><p>对于3的理解：类似于封装，必须向外部系统提供唯一的公有访问方法。</p><p>在java中实现单例模式有2种方式：饿汉式和懒汉式。</p><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）如此看来确实挺饿的；</p><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）如此看来确实挺懒的。</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">// 饿汉式：创建对象实例的时候直接初始化；（空间换时间）</span><br><span class="line"></span><br><span class="line">public class SingletonOne &#123;</span><br><span class="line"></span><br><span class="line">//1、创建类中私有的构造方法</span><br><span class="line">private SingletonOne() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//2、创建该类型的私有静态实例</span><br><span class="line">private static SingletonOne instance = new SingletonOne();</span><br><span class="line"></span><br><span class="line">//3、创建公有的静态方法，返回静态实例对象</span><br><span class="line">public static SingletonOne getinstance() &#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleOneTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonOne one =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonOne two =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one==two);   //输出结果为true</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">//懒汉式：创建对象实例的时候并不初始化；（时间换空间）</span><br><span class="line"></span><br><span class="line">public class SingletonTwo &#123;</span><br><span class="line">// 1、创建类中私有的构造方法</span><br><span class="line">private SingletonTwo() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 2、创建静态的该类实例对象</span><br><span class="line">private static SingletonTwo instance = null;</span><br><span class="line"></span><br><span class="line">// 3、创建公有的静态方法，提供实例对象</span><br><span class="line">public static SingletonTwo getinstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">instance = new SingletonTwo();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的测试代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleTwoTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonTwo one = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonTwo two = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one == two);   //输出结果为true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="单例模式两种实现总结"><a href="#单例模式两种实现总结" class="headerlink" title="单例模式两种实现总结"></a>单例模式两种实现总结</h3><p>饿汉式在类加载时就创建实例，第一次加载速度快；<br>懒汉式在第一次使用时才进行实例化，第一次加载速度慢；</p><p>饿汉式：空间换时间<br>懒汉式：时间换空间</p><p>饿汉式，类在加载时进行了对象的实例化创建，即使多个进程进行并发操作，访问的实例也是唯一的，饿汉式线程安全。</p><p>懒汉式，第一次使用才会实例化，多个线程并发操作时，由于时间片的切换，可能导致线程风险。</p><p>但是懒汉式的线程危险是可以规避的，通过关键字Synchronized实现线程的锁定，也可以通过静态内部类和枚举保证操作时的线程唯一。</p><h3 id="单例模式优缺点及使用场景"><a href="#单例模式优缺点及使用场景" class="headerlink" title="单例模式优缺点及使用场景"></a>单例模式优缺点及使用场景</h3><p>单例模式的优点：<br>1、在内存中只有一个对象,节省内存空间；<br>2、避免频繁的创建销毁对象, 提高性能；<br>3、避免对共享资源的多重占用。</p><p>单例模式的缺点:<br>1、扩展比较困难；<br>2、如果实例化后的对象长期不利用,系统将默认为垃圾进行回收,造成对象状态丢失。</p><p>使用场景:<br>1、创建对象时占用资源过多,但同时又需要用到该类对象；<br>2、对系统内资源要求统一读写,如读写配置信息；<br>3、当多个实例存在可能引起程序逻辑错误,如号码生成器；</p><p>每一种设计模式都是针对场景，针对某种具体问题的，具体场景应当进行具体分析，选用合适的设计模式。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>终于开始进入多态的世界了，在这里你将全面了解多态的特点及使用。</p><p>多态你可以理解为不同类的对象对同一消息做出不同的响应。</p><p>一般而言，多态分为编译时多态和运行时多态这两种。</p><p>编译时多态：也称设计时多态，它是通过方法重载来实现的，编译器在编译状态可以进行不同行为的区分。</p><p>而运行时多态，则必须要求程序运行时，动态决定调用哪个方法。</p><p>我们通常在Java中的多态指的就是运行时多态。</p><p>实现多态的必要条件: 满足继承；父类引用指向子类对象</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>所谓的向上转型也指隐式转型（自动转型）。说通俗一点就是父类引用指向子类实例，它可以调用子类重写父类的方法以及父类派生的方法，但是无法调用子类特有方法。</p><p>举个例子，假如Dog这个类继承了我们Animal这个类，我们不仅可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog dog =new Dog();</span><br><span class="line">Animal animal =new Animal();</span><br></pre></td></tr></table></figure></p><p>你还可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal dog2 =new Dog();</span><br></pre></td></tr></table></figure></p><p>这就是将一个子类对象转型为一个父类对象，这个很好理解，对吧。</p><p>接下来我们来说一下，向下转型，顾名思义就是和向上转型相反的操作了，是的，你很聪明。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>向下转型也称强制类型转换。它是子类引用指向父类实例，我们在之前就用过了，还记得我们在重写Object类的equals方法时，就将父类Object强制转换，然后才调用子类特有的方法。</p><p>向下转型并不是可以随便转换的，需要满足一定的转换条件。我们可以通过instanceof这个运算符来判断是否能进行强制类型转换。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ca1a5995341c12b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>通过上面的图片，我们可以很清楚的知道instanceof的作用就是判断左边对象是否是右边这个类的实例，如果是就返true，否则就返回false。</p><p>因此，我们在进行向下转型的时候，可以用instanceof来判断一个对象是否满足某个类的实例特征。满足，我们才进行类型转换，否则强制转换会报错。</p><p>总结一下：<br>向上转型: 父类引用指向子类对象。即小变大。</p><p>向下转型: 子类引用指向父类对象。即大变小。</p><p>需要注意的是：父类中static修饰的方法允许被子类使用，但是不允许被子类重写，所以向上转型之后，只能调用到父类原有的静态方法。如果此时要用子类中的，只能通过向下转型来实现。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法，这样我们的抽象类就派上用场了。</p><p>抽象类可以避免子类设计的随意性，还可以避免父类无意义的实例化。</p><p>你只需知道，修饰抽象类要用abstract这个关键词，抽象类不可以直接被实例化。</p><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>我们前面说过，父类只是规定子类拥有该项能力，但在父类中具体实现它是没有任何意义的，因此该方法应设置为抽象方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void test();</span><br></pre></td></tr></table></figure></p><p>你记住，抽象方法是不允许有方法体的，也就是不能有花括号。而且此时子类<strong>必须</strong>实现父类的抽象方法，如果你不实现，那么这个类就必须被设置为抽象类（不设置就会报错），然后由继承它的类去具体实现相应的方法。简单来说就是一句话：抽象方法中不允许包含方法体，子类需要重写父类的抽象方法。</p><p>一般抽象类适用于这种情况：1、父类中的实现没有意义；2、提醒子类必须要去自己实现自己的这个方法。</p><p>通常子类变多了之后，你新建一个类只要继承了抽象的父类，IDE会自动提醒你实现父类中的抽象方法的，你不实现就会报错。</p><h3 id="抽象类和抽象方法的使用"><a href="#抽象类和抽象方法的使用" class="headerlink" title="抽象类和抽象方法的使用"></a>抽象类和抽象方法的使用</h3><p>你可以使用abstract关键词来定义抽象类，抽象类不能被直接实例化，你可以通过向上转型完成对象实例，只能被继承。</p><p>abstract关键词定义抽象方法 ，你不需要具体实现也不能具体实现，也就是花括号不能有。</p><p>需要注意的是：抽象类可以没有抽象方法，但包含抽象方法的类一定是抽象类。</p><p>我们前面说过，当一个类继承抽象类，必须实现类中的抽象方法。如果不重写，则必须将该子类也变为抽象类，由其子类来实现，否则会报错。</p><p><strong>注意：static final private 不可以和abstract同时出现</strong>（因为抽象方法是要在子类中进行重写的，而private只能在当前类被访问，final方法不允许被子类重写，static静态不允许被子类重写。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。&lt;/p&gt;
&lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;p&gt;官方的解释
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（三）：继承和访问修饰符</title>
    <link href="http://licheetools.github.io/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://licheetools.github.io/2018/08/02/关于JAVA你必须知道的那些事（三）：继承和访问修饰符/</id>
    <published>2018-08-02T13:26:44.000Z</published>
    <updated>2019-04-13T13:27:32.480Z</updated>
    
    <content type="html"><![CDATA[<p>今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：它是一种类与类之间的关系，通过使用已存在的类作为基础来建立新类。其中已存在的类称为父类(或基类); 建立的新类称为子类(或派生类)。简单的就是子类继承父类的非私有属性和方法。</p><p>需要注意的是，新定义的类可以选择继续使用父类的功能或者自己增加新的数据或新的功能，但<strong>不能选择性地继承父类</strong>。（要么继承所有（前提是非私有），要么就不继承）</p><p>只要能满足 “A is a B”的关系就可以形成继承关系，代码中是通过 extends 关键字来实现继承的。</p><p>特别注意：在java中只能继承一个父类(也就是单继承)，而且子类可以访问父类的非私有成员。这个和Python不一样，Python的继承可就灵活了。</p><p>我们知道子类继承了父类之后，可以访问父类的非私有成员；但是父类的私有成员，子类还是无法直接访问。如果我们想访问呢？可以通过父类暴露的公有方法来实现间接访问。</p><p>父类对象不可以访问到子类特有的方法或属性，同时父类不可以访问子类特有成员（那怕是公有的成员）</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>方法重载必须同时满足以下条件: </p><ol><li>同一个类中;；</li><li>方法名相同，参数列表不同(参数顺序、个数、类型)；</li><li>方法返回值、访问修饰符任意；</li><li>与方法的参数名无关。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void printinfo() &#123;</span><br><span class="line">System.out.println(&quot;方法重载1&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void printinfo(String name) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;方法重载2&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String name, int age) &#123;</span><br><span class="line">return &quot;方法重载3&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String age, String name) &#123;</span><br><span class="line">return &quot;方法重载4&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(int age, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> // 与方法的参数名无关,加上下面的代码会和上面的 printinfo(int age, String name)造成重复而报错：</span><br><span class="line">public String printinfo(int size, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>方法重写也必须同时满足以下条件:<br>1、在满足继承关系的子类中；<br>2、方法名相同，参数列表相同(参数顺序、个数、类型)；<br>3、方法返回值相同或者是子类类型（但不允许是Object类型，可以向下兼容，向上是不可以的）；<br>4、访问修饰符的限定范围大于等于父类方法。</p><p>注意：在子类中是可以定义与父类重名的属性的，但这并不说明属性是可以重写的。</p><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>在Java里面一共包含4种访问修饰符，分别是：<br>1、private：私有的；<br>2、默认；<br>3、protected：受保护的；<br>4、public：公共的。</p><p>其中，<strong>private</strong>:只允许在本类范围中进行访问，离开了当前类就不允许访问；</p><p><strong>默认</strong>: 允许在当前类，同包子类/非子类都可调用，跨包子类/非子类都不允许；</p><p><strong>protected</strong>:允许在当前类，同包中的子类/非子类都可以以及跨包子类调用。跨包的非子类不允许调用。</p><p><strong>public</strong>:允许在任意位置访问。</p><p>按照前面的顺序，自上而下，访问范围越来越大；自下而上，限制能力越来越强：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4bd5c8b69ee574fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>（同包包括同包子类与非子类；子类包括同包子类和跨包子类）</p><h2 id="访问修饰符对方法重写的影响"><a href="#访问修饰符对方法重写的影响" class="headerlink" title="访问修饰符对方法重写的影响"></a>访问修饰符对方法重写的影响</h2><p>子类重写父类方法时，访问修饰符是允许改变的，要求是: 子类的访问范围必须大于等于父类的访问范围。也就是说如果父类访问修饰符是public，那么子类的访问修饰符也必须是public，其他的类似。</p><h2 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h2><p>继承后的初始化顺序如下：</p><p>父类静态成员 -&gt; 子类静态成员 -&gt; 父类对象的构造 -&gt; 子类对象的构造</p><p><strong>一个问题:</strong> 访问修饰符影响成员加载顺序?静态成员优先于静态代码块执行?</p><p>访问修饰符不影响成员加载顺序,跟书写位置有关。如果把静态代码块写在静态变量的前面，那么先执行静态代码块。</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>如果子类继承并重写了父类的方法，那么我们通常调用的就是重写后的子类方法。如果需要调用父类的方法，我们可以使用<code>super.方法</code>来达到这个目的。</p><p>当然也可以使用<code>super.属性</code>来达到访问父类的非私有属性的目的。</p><p><strong>尽管父类的构造方法的访问修饰符是public，但是它却不可以被子类继承和重写的。</strong></p><p>虽然它两个不可以，但是它的存在却是非常必要的，因为子类对象的实例化要依赖于父类对象的构造方法(默认，无参或有参的构造方法)。</p><p>如果子类调用了自己有参的构造方法，而父类定义了有参和无参的构造方法，程序依然是调用父类无参的构造方法。也就是说，我们在子类的构造方法中没有显式标注的情况下，默认调用父类的无参构造方法，因此父类的无参构造方法很重要，一定要写，否则会影响子类的对象实例化。</p><p>如果子类构造方法中既没有显式标注,且父类中没有无参的构造方法,则引发编译错误。</p><p>我们可以使用<code>super(参数)</code>这种形式来调用父类允许被访问的其他构造方法，但是此时super()必须放在子类构造方法有效代码的第一行（必须是子类的构造方法（其他方法不行）的第一行（其他行不行））。</p><p>也就是说父类在实例化的时候会默认调用无参的构造方法（此时你不定义无参的构造方法是可以的），但是如果子类在实例化对象的时候没有显示标志（也就是会默认调用父类无参的构造方法），而此时父类其实是不存在无参的构造方法，所以会引发编译错误。</p><h2 id="this和super的对比"><a href="#this和super的对比" class="headerlink" title="this和super的对比"></a>this和super的对比</h2><p><strong>this:</strong>当前类对象的引用：<br>1、访问当前类的成员方法；<br>2、访问当前类的成员属性；<br>3、访问当前类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>super:</strong>父类对象的引用：<br>1、访问父类的成员方法；<br>2、访问父类的成员属性；<br>3、访问父类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>注意：在调用构造方法时，this和super不能同时存在（前面说过两者都要求在第一行）。</strong></p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是所有类的父类，这个其实和Python中差不多，在Python里面也是所有的类都继承于object这个基类。点这直接查看api：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8api</a></p><p>一个类没有使用extends关键字明确标识继承关系,则默认继承Object类(包括数组)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class Object is the root of the class hierarchy.</span><br><span class="line">Every class has Object as a superclass. </span><br><span class="line">All objects, including arrays, implement the methods of this class.</span><br></pre></td></tr></table></figure></p><p>Object类存放于java.lang包中，这个包系统默认会为我们直接加载。</p><h3 id="equals用法"><a href="#equals用法" class="headerlink" title="equals用法"></a>equals用法</h3><p>如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因此我们不能这样说equals比较的两个对象的值，或者引用地址，但是我们却可以说”==”比较的却一定是两个对象的引用地址。</p><h3 id="toString用法"><a href="#toString用法" class="headerlink" title="toString用法"></a>toString用法</h3><p>api告诉我们，toString最后返回的是下面这种形式：（包名.类名@内存中的哈希码）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure></p><p>同样的，子类如果没有重写Object类的toString方法，那么则会打印输出其在内存中的哈希码；而String类则重写了Object类的toString方法，所以打印输出其真实值。（言外之意，子类可以通过重写toString方法的形式，改变输出的内容）</p><p>还要说明的一点就是输出<code>对象</code>和<code>对象.toString</code>的效果是一样的，因为直接输出对象的时候其实是调用了对象.toString方法。</p><h2 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h2><p>当我们不希望某些类被继承，某些方法被重写或者某些数据被修改时，可以使用final关键字来实现这个目的。</p><p>如果某个类被final修饰，则表明该类不可以被继承，该类没有子类，public final class/final public class都可以，只要是放在class的前面就可以；</p><p>如果某个方法被final修饰，则表明该方法不可以被重写，但是并不影响子类去继承调用它（final不可以修饰构造方法）。</p><p>如果某个局部变量被final修饰，那么我们可以不用在声明的同时立马进行赋值，但是必须在使用之前进行赋值，一旦赋值就不能被修改；</p><p>（方法内的局部变量的作用范围，从该行开始到所在大括号结束；而类的成员变量的作用范围取决于它前面的访问修饰符）；</p><p>如果某个成员变量被final修饰，我们同样不需要声明的同时进行立马赋值，但是必须在使用之前进行赋值，而且只能在构造方法或者类代码块(构造代码块)中进行赋值，一旦赋值就不能被修改；也就是说类中成员属性的赋值可以有三种方式： 1. 定义是直接初始化； 2. 构造方法; 3. 构造代码块（类代码块）。</p><p><strong>注意: 当具有多个构造方法时，final关键字修饰的成员变量如果选择了在构造方法里面进行赋值，那么就需要在所有的构造方法里面进行赋值，但是不同构造方法是可以赋不同值的</strong></p><h2 id="final对数据类型的影响"><a href="#final对数据类型的影响" class="headerlink" title="final对数据类型的影响"></a>final对数据类型的影响</h2><p>我们知道java 数据类型分为基本数据类型（byte,short,int,long,float,double,char,boolean） 和 引用数据类型(array,String,interface,自定义的类…)</p><p>基本数据类型是可以直接进行赋值的，而引用类型需要实例化该类的对象，然后才能给其对象进行赋值（String这个比较特殊，两种形式都是可以的）</p><p>我们知道基本数据类型在内存中存放的是数据本身，而引用数据类型在内存中存放的则是对象的引用地址。</p><p>下面的例子告诉我们，被final修饰的对象不可以修改它的引用地址，但是属性却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final Test test=new Test(&quot;hello&quot;);</span><br><span class="line">//test=new Test ();</span><br><span class="line">Test.key=&quot;world&quot;;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：基本数据类型的变量其一旦被赋初值，就无法进行修改；而引用类型的变量只是在初始化之后不能再指向另一个对象，但是对象的内容却是可变的。</p><p>因此final可配合static使用，用来修饰方法和变量。通常是用于修饰配置信息等(因为这类信息只需要加载一次，而且后面不需要被修改)。言外之意，使用final修饰可以提高性能，但会降低可扩展性。</p><h3 id="普通代码块，类代码块，构造代码块，静态代码块区别"><a href="#普通代码块，类代码块，构造代码块，静态代码块区别" class="headerlink" title="普通代码块，类代码块，构造代码块，静态代码块区别"></a>普通代码块，类代码块，构造代码块，静态代码块区别</h3><p>代码块都是一对大括号{}所括起来的内容。</p><p>普通代码块就是一对大括号{}所括起来的内容，只存在于类的方法之中；</p><p>类代码块和构造代码块是一个东西，就是直接在类中进行定义的，前面没有static进行修饰。构造代码块在创建对象时被调用，每次创建对象都会被调用，并且构造代码块的执行次序优先于类的构造方法。</p><p>静态代码块前面有static关键字进行修饰，它不能存在于任何方法体内，也不能直接访问实例变量和实例方法，需要通过类的实例对象来访问。</p><p>通常我们new一个对象，JVM要经过这样的初始化顺序：父类静态块&gt;子类静态块&gt;父类属性&gt;父类构造器&gt;子类属性&gt;子类构造器，这一系列的工作会消耗大量的内存和cpu。 </p><p>具体的研究可以参看这里：<a href="https://www.jb51.net/article/129990.htm" target="_blank" rel="noopener">详解java中的四种代码块</a>。</p><h2 id="java中的注解"><a href="#java中的注解" class="headerlink" title="java中的注解"></a>java中的注解</h2><p>注解是JDK1.5版本引入的一个特性, 它可以声明在包、类、属性、方法、局部变量、方法参数等前面，作用就是对这些元素进行说明、注释。</p><h3 id="按照运行机制来分类"><a href="#按照运行机制来分类" class="headerlink" title="按照运行机制来分类"></a>按照运行机制来分类</h3><p>注解按照<strong>运行机制</strong>来进行划分，可以分为3部分:<strong>源码注解，编译时注解，运行时注解。</strong></p><p>源码注解：只在源码.java文件中存在，编译成.class字节码文件就不存在了；</p><p>编译时注解：在源码.java文件和字节码.class文件中都存在；</p><p>运行时注解：在运行阶段还起作用,甚至会影响运行逻辑的注解。（spring框架中的@Autowired依赖注入的这种注解，它实现的就是在程序运行的过程当中自动的将外部传入的信息加载进去,它就是一种可以影响程序运行逻辑的运行时注解。）</p><h3 id="按照来源来分"><a href="#按照来源来分" class="headerlink" title="按照来源来分"></a>按照来源来分</h3><p>注解按照<strong>来源</strong>来进行划分，可以分为3部分:<strong>JDK注解，第三方注解，自定义注解。</strong></p><p>还有一种元注解，它是对注解进行注解的。</p><p>不行了，写着写着字数又超了，快4000字了，面向对象最后一个特性：多态，我还没说呢，下次吧，今天得滚去运动了。。。感谢你的赏阅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。&lt;/p&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（二）：封装</title>
    <link href="http://licheetools.github.io/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B0%81%E8%A3%85/"/>
    <id>http://licheetools.github.io/2018/08/01/关于JAVA你必须知道的那些事（二）：封装/</id>
    <published>2018-08-01T13:25:15.000Z</published>
    <updated>2019-04-13T13:25:45.394Z</updated>
    
    <content type="html"><![CDATA[<p>时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>在这之前，我们先了解什么是对象，已经什么是面向对象？对象：万物皆对象，现实中实际存在的事物都可以看成一个对象。而面向对象就是人在关注对象， 关注事物的信息。那什么是类？类就是模子，通常用于确定对象将会拥有的特征(属性)和行为(方法)。也就是说对象是类的具体存在，而类则是对象的抽象化。苹果是一个类，你手里拿的苹果就是一个实例化的对象。</p><p>刚才说了对象具有属性和方法，那么属性和方法又是什么呢？属性就是对象具有的各种静态特征，通常用来说明对象有什么；而方法就是说明对象具有的各种动态行为，也即对象能做什么。</p><p>假如我有一辆吉普车，它的颜色，价格，型号就是属性；而它能加速，减速，停止就是具有各种方法。</p><p>创建类的一般步骤为：创建类==》实例化对象==》书写具体的逻辑。</p><p>通常我们在书写类的时候，都需要遵循单一职责原则(单一功能原则)，也就是说 一个类应该有且只有一个引起功能变化的原因。如果在一个类当中承担的功能越多，那么它的交融，耦合性就越高，被复用的可能性就越低。特别是因为耦合度高，可能会因为一个职责的变化，引起其他职责的变化，进而影响整个程序的运行，这一点是我们所不想看到的。</p><p>实例化对象的过程可以分为三步：声明对象，实例化对象，将两者进行绑定。其中声明对象是在栈内存中开辟了一块内存空间，但此时还不是一个有效的对象，因为此时对象的空间里是空的。如果此时调用它的属性和方法则会引发错误。而实例化对象则是在堆空间开辟一块空间，它完成了具体对象相关信息的初始化操作。最后通过赋值进行两者绑定。</p><p>也就是声明对象和实例化对象是在内存中的不同空间完成的，通过赋值操作，将两者关联。具体的关联就是将堆中具体对象的内存地址存放在之前在栈中开辟的内存中，从而完成绑定。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法也称为: 构造函数或者构造器，你可以使用构造方法来完成对象初始化相关操作。</p><p>构造方法的调用必须配合new关键字，不能被对象单独调用。注意，<strong>构造方法必须与类同名且没有返回值。</strong></p><p>方法名中的参数列表可有可无，但是只能在对象实例化的时候被调用。</p><p>当没有指定构造方法时，系统会自动添加无参的构造方法；当有指定的构造方法时,无论是有参、无参的构造方法，系统都不会自动添加无参的构造方法，一个类中可以有多个构造方法。</p><p>this: 当前对象的默认引用; this的使用:调用成员属性,解决成员属性和局部变量同名冲突，也可以调用成员方法。</p><p>如果你想调用重载的构造方法，那么只能通过this关键字来使用this()；同时请记住，如果是通过this()来调用构造方法时,它必须放在方法体内第一行。（这个一定注意）</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是将类的某些信息隐藏在类内部, 不允许外部程序直接访问，但是通过该类提供的方法来实现对隐藏信息的操作和访问。也就是说两点：一是隐藏对象的信息，第二留出可以访问的接口（方法）。</p><p>封装的具体步骤：1、将访问修饰符替换为private；2、提供公共的setter和getter方法；3、必须有构造方法（系统会默认调用无参的构造方法）。其中setter方法是可写，getter方法是可读。我们可以在setter方法里面添加自己的业务逻辑，从而实现对值的合理性进行判断。</p><p>因为已经实现了封装，因此我们在实例化对象的时候就不需要再次传入自定义的参数了，否则就没有使我们提供的setter方法生效了。</p><h2 id="包的管理"><a href="#包的管理" class="headerlink" title="包的管理"></a>包的管理</h2><p>为什么要说包的管理呢？因为包的管理太重要了，其实很多坑就是包的命令和管理不规范引起的。</p><p>我们知道文件夹可以进行文件的管理，同一个文件中可以存放多个不同的文件，同名的文件只能存放在不同的文件夹中。</p><p>在Java中我们也是通过包来管理java文件来解决同名文件的冲突问题，Java中一个包里不能存放同名类，但不同包却是可以。</p><p>包的定义必须放在Java源文件的第一行。前面说过，我们在定义类的时候，尽量遵循单一职责原则，同样的道理，在建立包的时候，建议每个包内存储的信息功能应该单一。</p><p>如何实现跨包类的调用？可以采用Import这个关键字，来实现包的导入。需要注意的是<strong>import包名.* 只能访问指定包名下的类，无法访问子包下的类</strong>。</p><p>还有就是包的效率问题，建议采用<code>import包名.类名</code>的方式进行包的导入，这样可以提高加载效率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import net.oschina.Test.*; // 加载包下的所有类</span><br><span class="line">import net.oschina.Test.Java; // 加载指定包下的指定类</span><br></pre></td></tr></table></figure></p><p>注意一下，加载类的顺序跟import导入语句的位置无关:指定的具体包的优先级大于通配符。也就是下面加载会大于上面加载的速率。</p><p>最后说一下关于包管理的几个注意事项：<br>1、必须放在Java源文件中的第一行；<br>2、一个Java源文件中只能有一个package语句；<br>3、包名全部采用英文字母小写的方式；<br>4、包的命名方式为：域名倒序+模块+功能。</p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="static修饰"><a href="#static修饰" class="headerlink" title="static修饰"></a>static修饰</h3><p>static表示静态的。</p><p>如果它修饰成员变量，那么该变量被称为静态成员或类成员，它是这个类所有的。也就是说无论这个类实例化出多少对象，它都会共用同一块内存空间。后面的只会覆盖前面的值。</p><p>如果它修饰属性，那么该属性被称为静态属性。</p><p>如果它修饰方法，那么该方法被称为静态方法。</p><p>如果它修饰初始化块，那么该初始化块被称为静态初始化块。</p><p>但是static是不能修饰类，不能修饰局部变量，不能内部类中修饰初始化块（不可以在内部类定义静态初始化块）。</p><p>静态成员的生命周期很长，在类加载时产生，直到类被销毁时才释放。</p><h3 id="static访问"><a href="#static访问" class="headerlink" title="static访问"></a>static访问</h3><p>普通的成员方法可以直接访问当前对象（该类实例化的对象）的成员属性和方法，也可以直接访问当前对象的静态属性和静态方法</p><p>静态方法或者类方法（前面被static修饰），它不能直接访问同一个类中的非静态成员，因为它缺少隐含的this参数。静态方法只能直接调用同一个类中的静态成员。如果非要访问，只能通过实例化一个对象后，采用对象.成员方法的方式来访问非静态成员。</p><h2 id="初始化块（代码块）"><a href="#初始化块（代码块）" class="headerlink" title="初始化块（代码块）"></a>初始化块（代码块）</h2><h3 id="初始化块的说明"><a href="#初始化块的说明" class="headerlink" title="初始化块的说明"></a>初始化块的说明</h3><p>在Java里面，被{}括起来的代码就称之为代码块（初始化块）。</p><p>当代码块出现在方法里的时候，叫做普通代码块，普通代码块和一般语句的执行顺序是一样的：从上到下，顺序执行，先出现,，先执行。</p><p>当代码块直接在类中定义，与成员方法，属性并列时，我们此时称之为构造代码块。</p><p>记住构造代码块比构造函数优先执行。构造代码块它是在创建对象的时候被调用，优先于构造方法的执行。所以不管构造代码块放在类的其他位置，它都会先于构造函数执行。</p><p>多个构造代码块之间有先后顺序，但都先于构造函数前执行。</p><h3 id="初始化块的执行"><a href="#初始化块的执行" class="headerlink" title="初始化块的执行"></a>初始化块的执行</h3><p>现在考虑一下，静态初始化块，普通初始化块，构造函数这三者的执行顺序？你只要记住静态初始化块静态初始化块只在类初始化时进行加载，而且只执行一次。对于三者，程序的执行优先级：静态初始化块–》初始化块–》构造方法。（这里的初始化块包括构造初始化块（直接在类中声明）和普通的初始化块（在方法中声明）。</p><h3 id="初始化块的范围"><a href="#初始化块的范围" class="headerlink" title="初始化块的范围"></a>初始化块的范围</h3><p>看一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;初始化块的范围&quot;);</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块2&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这个test方法空间被分成了三部分，所以我们可以利用这个功能来实现变量的命名冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        int temp =10;</span><br><span class="line">        int temp =12;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面是不可以的，但是下面却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       </span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这时两个代码块空间中允许有自己的变量值，不会重名造成冲突。但是不能在方法的全局域位置添加同名变量，因为它会与两个变量都造成重复定义的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       int temp =11;</span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>因为temp的作用域是从那里到结尾的，会与后面的代码块里面的变量产生命名冲突。</p><p>由于篇幅的问题，继承和多态我下次再说哈，今天就写到这里了，感谢你的赏阅！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。&lt;/p&gt;
&lt;h2 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于JAVA你必须知道的那些事（一）：概述</title>
    <link href="http://licheetools.github.io/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A6%82%E8%BF%B0/"/>
    <id>http://licheetools.github.io/2018/08/01/关于JAVA你必须知道的那些事（一）：概述/</id>
    <published>2018-08-01T13:23:38.000Z</published>
    <updated>2019-04-13T13:24:45.535Z</updated>
    
    <content type="html"><![CDATA[<p>一、JAVA的主要特性：</p><p>1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。</p><p>2、Java是面向对象的，具有类，接口等；</p><p>3、Java是解释型的语言，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。即所谓的“一次编译，永久使用”。</p><p>下面解释一下解释型语言和编译型语言的区别？</p><p>（A）解释型语言：,解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。在发布程序时，看起来省了道编译工序。但是，在运行程序的时候，解释性语言必须先解释再运行。</p><p>（B）编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++、Delphi等。</p><p>二、JAVA的开发工具（JDK），工具及运行环境（JRE）</p><p>（1）Java主要分为三大体系：</p><p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p><p>JavaEE(J2EE)(Java 2 Platform,EnterpriseEdition，java平台企业版)</p><p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p><p>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE,J2SE更名为Java SE，J2ME更名为Java ME。</p><p>说明：</p><p>Standard Edition(标准版) J2SE 包含那些构成Java语言核心的类</p><p>比如：数据库连接、接口定义、输入/输出、网络编程</p><p>Enterprise Edition(企业版) J2EE 包含J2SE 中的类，并且还包含用于开发企业级应用的类。比如：EJB、servlet、JSP、XML、事务控制</p><p>Micro Edition(微缩版) J2ME 包含J2SE中一部分类，用于消费类电子产品的软件开发。比如：呼机、智能卡、手机、PDA、机顶盒</p><p>他们的范围是：J2SE包含于J2EE中，J2ME包含了J2SE的核心类，但新添加了一些专有类，应用场合，API的覆盖范围各不相同。</p><p>上面的每个版本都分别对应不同的JDK（java development kit），可以根据应用不同下载不同的JDK安装。对于初学者，先学习Java SE，有了一定基础之后，可以考虑深入学习Java EE，或者转战Android也行。</p><p>（2）JDK中包含了java开发需要的各种类和接口，以及运行java程序所需要的环境JRE，若是只想在各种系统平台上运行java程序而不进行开发，则可以直接下载JRE包即可。有些系统是自带JRE的，但不包括windows，因此要想在windows上运行java程序，需要在系统上安装JRE。</p><p>（3）JRE中包含了JVM（Java虚拟机）：它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。</p><p>2、工具</p><p>Java开发需要一些较好的开发工具，比较好的一个IDE就是Eclipse；eclipse、idea等IDE有自己的编译器而不是用JDKbin目录中自带的，所以在安装时你会发现他们只要求你选中jre路径就ok了；而且用eclipse的话不需要设置系统环境变量，它会自动找到安装的JRE地址。</p><p>3、开发环境</p><p>Java可以下windows和linux等系统下进行开发，这里仅介绍在windows下开发需要设置的环境参数，在安相应版本JDK之后，进行变量设置。</p><p>变量设置</p><p>变量名：JAVA_HOME</p><p>变量值：C:\ProgramFiles\Java\jdk1.7.0</p><p>//这里是你JDK的安装路径，可以更换</p><p>变量名：CLASSPATH</p><p>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;//记得前面有个”.”</p><p>变量名：Path</p><p>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p><p>1、”开始”-&gt;;”运行”，键入”cmd”；</p><p>2、键入命令”java -version”，”java”，”javac”几个命令，出现相关画面，说明环境变量配置成功；</p><p>三、Java基础语法</p><p>1、基本语法规则</p><p>编写Java程序时，应注意以下几点：</p><p>大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。</p><p>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</p><p>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p><p>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。</p><p>主方法入口：所有的Java 程序由public static void main(Stringargs)方法开始执行。</p><p>另外：java中没有头文件，它是以import的方法从外面导入.class文件的； java中的main函数是包含在一个类中的，与C++是不一样的，在C++中没有定义类也是一个程序。</p><p>2、源文件声明规则</p><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p><p>一个源文件中只能有一个public类</p><p>一个源文件可以有多个非public类</p><p>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</p><p>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</p><p>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</p><p>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</p><p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p><p>3、Java包：</p><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。（即包中包含很多种类的类和接口）</p><p>当编译一个.java文件（即一个编译单元）时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。如果你真的想学习java你可以来这个群前面是四九一，中间是八九七后面是一五八这里有技术大牛亲自指导帮助你 还有免费的直播课程学。因此在编译少量.java文件之后，会得到大量的.class文件。每一个.java文件编译以后都会有一个public类，以及任意数量的非public类。因此每个.java文件都是一个构件，如果希望许许多多的这样的构件从属于同一个群组，就可以在每一个.java文件中使用关键字package。而这个群组就是一个类库。</p><p>如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。</p><p>4、权限修饰符</p><p>Java中有四种权限修饰符，这些修饰符控制对类，类的成员方法，类的成员变量的访问；其作用范围如下：</p><p>public：所有的类都可以访问。</p><p>private：只有在同一个类中才可以访问。</p><p>protected：同一个类中、同一个包中、子类中都可以访问，其他包不可以。</p><p>包类型的，即默认类型同一个类中、同一个包中可以访问到，其他包和子类不可以。</p><p>5、数据类型</p><p>byte: Java数据类型和c/c++基本类似，但Java中有byte类型，表示8位2进制的整数，相当于c/c++中的char.</p><p>常量：Java中常量用final表示，相当于const，final中的值是可以改变的；</p><p>-包装类: 在开发过程中，有时候需要使用对象，而不是内置数据类型，因此java为每个内置数据类型提供了对应的包装类所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类Number的子类，对于字符也有相应的Character类。每个类具有相应的函数。</p><p>数组：java数组是对象，与c++不同，语法上与c++类似，java数组具有一个属性length可以获取数组的长度。（数组a，a.length为数组长度），Array类具有一些函数可以对数组进运算。</p><p>6、Java高级特性和接口</p><p>Java中类继承只允许一个父类，当需要进行多个继承时，需要使用接口。接口类似于类，定义时用interface替代类定义中的class，但里面的方法只有定义没有实现。接口文件的文件名必须与接口名相同。继承接口的关键字为implement，与类的继承extends相似，可以进行多继承。接口继承必须实现接口中的所有方法。</p><p>接口是规范，规定某个实现类里必须有那些方法，只要事先定义好接口，当大家一起合作的时候就不用特别麻烦的交互，而是每个人写好自己的接口实现类，最后拼接到一起就可以了比如数据库连接类，接口规定好有哪些方法、方法的功能，然后每个数据库厂商根据接口去实现具体的类，达到统一的目的，要不每个数据库厂商自己实现一套，那么你编程的时候就要根据不同驱动使用不同的方法，造成不必要的麻烦。</p><p>2、Java中的抽象类</p><p>只声明方法的存在而不具体实现的类，抽象类不能实例化（不能创建相应对象）定义方式：在class前加上abstract，ex：</p><p>abstractclass 类名{ ;;;}抽象类中定义的没有实际意义的，必须在子类重写的方法为抽象方法，定义时前面加abstract：abstract type name(agrs)。</p><p>一般方法定义与在正常类中定义一样。</p><p>关于如何创建类和其他知识我将在后续文章陆续介绍，谢谢大家！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、JAVA的主要特性：&lt;/p&gt;
&lt;p&gt;1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java
      
    
    </summary>
    
      <category term="java" scheme="http://licheetools.github.io/categories/java/"/>
    
    
      <category term="java基础" scheme="http://licheetools.github.io/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（十一）：商品类别数据显示（下）</title>
    <link href="http://licheetools.github.io/2018/05/15/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://licheetools.github.io/2018/05/15/采用Vue-Django-Restful-framework构建生鲜电商项目（十一）：商品类别数据显示（下）/</id>
    <published>2018-05-15T09:01:55.000Z</published>
    <updated>2019-04-15T09:05:09.466Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      对不起，此文章为加密内容，只有管理员才能查看。
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（十）：商品类别数据显示（上）</title>
    <link href="http://licheetools.github.io/2018/05/03/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://licheetools.github.io/2018/05/03/采用Vue-Django-Restful-framework构建生鲜电商项目（十）：商品类别数据显示（上）/</id>
    <published>2018-05-03T09:00:47.000Z</published>
    <updated>2019-04-15T09:01:21.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍如何把我们的商品类别数据进行显示，由于涉及的知识较多，会分成2篇进行说明。</p><h2 id="商品的分类"><a href="#商品的分类" class="headerlink" title="商品的分类"></a>商品的分类</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5919ff3da8e45111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-13f796433757ebea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们前面说过，这里面配置了2个组件，其实就和我们两个目录相关联。一个是全部数据的接口，用于首页的全部商品分类：一级-二级-三级就是上面的那样；另一个就是获取某一大类的二级分类以及对应的商品数量，就是下面的图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0ccf04239cbd93cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>当商品被大类进行过滤时，我们需要设置过滤的条件，如价格区间，以及按照价格，销量的排序，还有商品页面的分页功能。</p><p>通过vue提供的工具，我们可以很容易的知道组件的结构：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-6d6633628551ed5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在产品列表中是一堆的<code>router link</code>，你点击它会跳转到详情页，这个详情页其实就是vue 的router路由：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-34a82b7a57dcf39e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了，分析到这里我们现在开始进行开发。打开goods\views.py文件，我们新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from .serializers import  CategorySerializer</span><br><span class="line"></span><br><span class="line">class CategoryViewset(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list:</span><br><span class="line">        商品分类列表数据</span><br><span class="line">    retrieve:</span><br><span class="line">        获取商品分类详情</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = GoodsCategory.objects.filter(category_type=1)</span><br><span class="line">    serializer_class = CategorySerializer</span><br></pre></td></tr></table></figure></p><p><strong>注意一下，我们因为是进行商品类别数据的显示，但是数量不是很多，所以不需要进行分页处理。同时因为后面需要生成文档，所以我们需要规范化我们的注释语言。</strong>当然我们还需要进行序列化，打开goods\serializers.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from goods.models import GoodsCategory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsCategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure></p><p>接着打开urls.py文件，我们配置路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import CategoryViewset</span><br><span class="line"></span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet, base_name=&apos;goods&apos;)  # 这里前面加r可以进行转义</span><br><span class="line"></span><br><span class="line"># 配置categorys的url</span><br><span class="line">router.register(r&apos;categorys&apos;, CategoryViewset, base_name=&apos;categorys&apos;)  # 这里前面加r可以进行转义</span><br></pre></td></tr></table></figure></p><p>这里的register有三要素：(prefix, viewset, base_name)，各个参数含义如下：<br>prefix ：该视图集的路由前缀；<br>viewset： 视图集；<br>base_name ：路由名称的前缀；<br>详细的可以点击这里了解一下：<a href="https://blog.csdn.net/weixin_40226313/article/details/80842832" target="_blank" rel="noopener">DRF路由Routers</a>。然后浏览器地址栏访问一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/categorys/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-90f590a97831740e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们发现这里没有出现我们想要的嵌套显示，也就是一类显示下面的二类，二类显示下面的三类，我们修改serializers.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class CategorySerializer3(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品三级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer2(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品二级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sub_cat = CategorySerializer3(many=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品一级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sub_cat = CategorySerializer2(many=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br></pre></td></tr></table></figure></p><p>这里我们用到了<code>sub_cat</code>，因为我们在model里面将自身的继承关系进行了命名：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f36b6fa63e268f07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就可以通过一级分类(parents)得到二级分类（直接调用一级对象的sub_cat),此时就得到了二级对象的数据，但是对于此时得到的二级对象数据，我们依然可以对其进行序列化然后作为父本去获取三级分类对象的数据。</p><p>然后运行我们的项目，发现出了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AttributeError at /categories/</span><br><span class="line">Got AttributeError when attempting to get a value for field `sub_cat` on serializer `CategorySerializer2`.he serializer field might be named incorrectly and not match any attribute or key on the `RelatedManager` instance.Original exception text was: &apos;RelatedManager&apos; object has no attribute &apos;sub_cat&apos;.</span><br></pre></td></tr></table></figure></p><p>那么你需要检查是否缺少<strong>many = True</strong>这个参数，然后运行就没问题了。</p><p>我们思考这么一个问题， 我们现在获取的是所有的category，但是如何获取具体某一类别下面的信息呢。举个例子，我们点击生鲜食品这一栏，那么左侧出现的应该就是生鲜食品这一栏下面对应的具体信息，而不是依然得全部信息。</p><p>打开goods\views.py文件，我们可以多继承另外一个函数<code>mixins.RetrieveModelMixin</code>就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class CategoryViewset(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet):</span><br></pre></td></tr></table></figure></p><p>在前面的文章里面我们获取某个具体的数据，是不是都在后面添加了id。假设我们这里需要获取书店里面的某本书（假设该书店只有不到100本书），我们通过get加id的方式就能直接获取取来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /book/10：获取编号为10的那本书</span><br></pre></td></tr></table></figure></p><p><strong>注意这样方式是严格按照restful api 的规范来进行配置的</strong>。按照这样的逻辑，我们需要哪个商品的信息，就要传入对应的id，没错就是这样（这是在线教育网站的一个path的配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 密码重置url</span><br><span class="line">    re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>但是强大的drf已经通过刚才那个函数给我们这样配置了，我们只需刚才那一步即可，都不需要在url里面进行相应的配置,只要我们继承了<code>mixins.RetrieveModelMixin</code>就可以直接通过id来进行具体数据的获取了，是不是很赞。运行你的项目，然后在浏览器地址栏输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/categorys/1/</span><br></pre></td></tr></table></figure></p><p>回车，进行访问吧，可以看到此时返回的是一个字典。</p><h2 id="Vue展示商品分类的数据"><a href="#Vue展示商品分类的数据" class="headerlink" title="Vue展示商品分类的数据"></a>Vue展示商品分类的数据</h2><p>现在我们准备将category的数据和vue进行联调，不过在此之前我们我们需要解决跨域访问的问题。跨域问题在前后端分离的项目中是非常常见的，你不用大惊小怪。我们现在查看一下这个category是如何将数据映射进来的：<code>F:\cnpmtest\online-store\src\views\head\head.vue</code>文件里面，可以看到里面的getMenu函数调用了getCategory函数，那么问题来了getCatgory函数到底在哪里呢：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-be80e233790c059b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在这里<code>import { getHotSearch, getCategory ,deleteShopCart } from  &#39;../../api/api&#39;</code>看到文里面的导入说明了么，这个文件对应我的位置在<code>F:\cnpmtest\online-store\src\api\api.js</code>，我们打开看一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d0bdd89352df75f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到里面的getCategory 函数了么，这种写法是ES6的写法，可以点击这里了解一下：<a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">ECMAScript 6 入门</a>。ES6中的箭头函数params =&gt;传递一个params，如果params中有id那么，通过axios获取接口，并返回指定的具体信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.get(`$&#123;host&#125;/categorys/`+params.id+&apos;/&apos;);</span><br></pre></td></tr></table></figure></p><p>如果没有id就返回全部的信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.get(`$&#123;host&#125;/categorys/`, params);</span><br></pre></td></tr></table></figure></p><p>其中这里面的${host}是我们获取信息的域名，也就是bobby老师的网站：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let host = &apos;http://shop.projectsedu.com&apos;;  # 线上环境</span><br></pre></td></tr></table></figure></p><p>这个函数是一个公共的函数，export是导出数据： <a href="https://www.cnblogs.com/dupd/p/5951311.html" target="_blank" rel="noopener">ES6模块的import和export用法总结</a>。这样就解决了获取详情信息或通用性问题。那么问题来了，我们如何来调试接口呢？可以注意到，我们在很多地方都用到了host，而我们调试只是一个接口一个调试，该如何解决呢？办法就是新建一个自己的<code>local_host</code>，然后用这个来进行替换，调试谁就替换谁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let local_host = &apos;http://127.0.0.1:8000&apos;</span><br></pre></td></tr></table></figure></p><p>我们现在因为是调试category，所以需要替换它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//获取商品类别信息</span><br><span class="line">export const getCategory = params =&gt; &#123;</span><br><span class="line">  if(&apos;id&apos; in params)&#123;</span><br><span class="line">    return axios.get(`$&#123;local_host&#125;/categorys/`+params.id+&apos;/&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    return axios.get(`$&#123;local_host&#125;/categorys/`, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后启动我们的前端项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>发现出了这样的错误：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5c6fffbc1b2ad38d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load resource: net::ERR_CONNECTION_REFUSED</span><br></pre></td></tr></table></figure></p><p>说明我们的本地vueshop项目没有启动，我们运行我们的项目，然后发现还是有问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-aac22dc8bdf70523.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这条信息告诉不允许跨域访问，因为我们跨了端口访问，一个是8080，一个是8000，所以才会出错，解决的办法很多。前端的npm也是可以完成跨域访问的，一般是通过proxy代理来完成的。不过这里我们主要说明如何利用服务器来完成跨域访问的。</p><h3 id="服务器跨域访问"><a href="#服务器跨域访问" class="headerlink" title="服务器跨域访问"></a>服务器跨域访问</h3><p>在GitHub上面搜索<code>django-cors-headers</code>，然后按照要求进行配置：<code>Django app for handling the server headers required for Cross-Origin Resource Sharing (CORS)</code>。<br>1、安装django-cors-headers（记得是在虚拟环境下面进行安装）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>2、注册进入apps(settings.py文件):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    &apos;corsheaders&apos;,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>3、配置MIDDLEWARE(settings.py文件，最好放在第一个位置)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &apos;corsheaders.middleware.CorsMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>4、添加参数并设置为true以及白名单的配置（settings.py文件）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = True</span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    &apos;127.0.0.1:3000&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，发现数据就出来了，那么这个数据是如何出来的呢？继续回看我们的head.vue文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getMenu()&#123;//获取菜单</span><br><span class="line">          getCategory(&#123;</span><br><span class="line">            params:&#123;&#125;</span><br><span class="line">          &#125;).then((response)=&gt; &#123;</span><br><span class="line">                    console.log(response)</span><br><span class="line">                    this.allMenuLabel = response.data</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(function (error) &#123;</span><br><span class="line">                  console.log(error);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></p><p>看到没有，这里将response.data赋值给了<code>allMenuLabel</code>，我们在nodepad++里面搜索一下，看这个<code>allMenuLabel</code>，看它在哪个地方：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=&quot;first&quot; v-for=&quot;(item,index) in allMenuLabel&quot; @mouseover=&quot;overChildrenmenu(index)&quot; @mouseout=&quot;outChildrenmenu(index)&quot;&gt;</span><br><span class="line">                              &lt;h3 style=&quot;background:url(../images/1449088788518670880.png) 20px center no-repeat;&quot;&gt;</span><br><span class="line">                                &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt; &lt;/h3&gt;</span><br></pre></td></tr></table></figure></p><p>发现我们后面使用v-for对它的数据进行了遍历，而且这里有一个<code>router-link</code>，它是指向前端的vue_router路由，并不是我们后台的路径，这点要注意一下。其实我们这里就已经把数据的显示和路由交给了前端，后端只需要提供数据就可以了，我们的任务就已经完成了。</p><p>现在又有一个问题，为什么我们前面的导航栏没有数据呢:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2b86d30a857873d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们在后台管理的时候默认没有设置为允许导航，我们可以去后台添加几个导航栏试试.</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8cd751e1f08fe167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-57c15e350de1f2e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，然后发现导航栏就出现了我们想要的数据。其实我们在前面对这个是否显示导航栏也进行了配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-for=&quot;(item,index) in allMenuLabel&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;div v-if=&quot;item.is_tab&quot;&gt;</span><br><span class="line">   &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot; &gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"> &lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>至此，我们本篇关于商品类别数据进行显示上篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们来介绍如何把我们的商品类别数据进行显示，由于涉及的知识较多，会分成2篇进行说明。&lt;/p&gt;
&lt;h2 id=&quot;商品的分类
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（九）：商品列表页的配置（下）</title>
    <link href="http://licheetools.github.io/2018/05/02/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://licheetools.github.io/2018/05/02/采用Vue-Django-Restful-framework构建生鲜电商项目（九）：商品列表页的配置（下）/</id>
    <published>2018-05-02T08:59:24.000Z</published>
    <updated>2019-04-15T09:00:10.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们完成商品列表页面的剩余配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="drf中的request和response说明"><a href="#drf中的request和response说明" class="headerlink" title="drf中的request和response说明"></a>drf中的request和response说明</h2><h3 id="drf中的request"><a href="#drf中的request" class="headerlink" title="drf中的request"></a>drf中的request</h3><p>我们知道drf对于django的request和response进行了一层封装，所以我们使用起来会更加方便。<br><code>REST framework&#39;s Request class extends the standard HttpRequest, adding support for REST framework&#39;s flexible request parsing and request authentication.</code>这句话的意思是说：drf在标准的HttpRequest上进行了扩展，增加了对rest框架的灵活请求解析和请求认证的支持。</p><p>下面简要说明一下：request。我们可以点击这里<a href="https://www.django-rest-framework.org/api-guide/requests/" target="_blank" rel="noopener">drf中的request</a>。<br> <a href="https://www.django-rest-framework.org/api-guide/requests/#data" target="_blank" rel="noopener">.data</a>：<br> data ,返回用户获取的信息（包括所有的解析内容，文件和非文件），而且不仅能解析通过post方法过来的信息，其他的方法如put ，patch也能进行解析。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#query_params" target="_blank" rel="noopener">.query_params</a>：<br>query_params,里面有通过get请求传递过来的参数，自己可以配置。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#parsers" target="_blank" rel="noopener">.parsers</a>：<br>parsers，因为用户提交过来的数据有很多种类型，所以它就是负责接收各种信息，并提供各种解析器进行解析。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#authentication" target="_blank" rel="noopener">Authentication</a>包括：<a href="https://www.django-rest-framework.org/api-guide/requests/#user" target="_blank" rel="noopener">.user</a>和<a href="https://www.django-rest-framework.org/api-guide/requests/#auth" target="_blank" rel="noopener">.auth</a><br>.use就是说只有通过验证才能获取到当前的用户，而这个.auth返回一些额外的验证信息。</p><h3 id="drf中的response"><a href="#drf中的response" class="headerlink" title="drf中的response"></a>drf中的response</h3><p> <a href="https://www.django-rest-framework.org/api-guide/responses/#responses" target="_blank" rel="noopener">Responses</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b664746855c5e23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>response就是根据你发起的请求然后返回响应，对于我们爬虫人员来说最熟悉不过的了，所以我就不细说了。这些就是英文文档的内容，全都有，你点上面那些蓝色的<strong>xx</strong>就知道了，我就不一句句翻译了，可能我翻译的还没你理解的印象深刻呢。</p><h2 id="drf过滤器"><a href="#drf过滤器" class="headerlink" title="drf过滤器"></a>drf过滤器</h2><p>我们打开goods\views.py文件，开始书写代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有c或者java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        query_set = Goods.objects.all()</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            query_set = query_set.filter(shop_price__gt=price_min)</span><br><span class="line">        return query_set</span><br></pre></td></tr></table></figure></p><p>不过运行项目，在浏览器地址栏输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/%EF%BC%9Fprice_min=100</span><br></pre></td></tr></table></figure></p><p>，发现会错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> assert queryset is not None, &apos;`base_name` argument not specified, and could &apos; \</span><br><span class="line">AssertionError: `base_name` argument not specified, and could not automatically determine the name from the viewset, as it does not have a `.queryset` attribute.</span><br></pre></td></tr></table></figure></p><p>提示我们缺少一个queryset属性，我们尝试修改一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    query_set = Goods.objects.all()</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            self.query_set = Goods.objects.filter(shop_price__gt=int(price_min))</span><br><span class="line">        return self.query_set</span><br></pre></td></tr></table></figure></p><p>运行还是会报同样的错误。找了很久才发现，原来是query_set 这个名字错了，需要修改为queryset:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            self.queryset = Goods.objects.filter(shop_price__gt=int(price_min))</span><br><span class="line">        return self.queryset</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，在浏览器地址栏输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/?page=1&amp;price_min=100</span><br></pre></td></tr></table></figure></p><p>回车发现，问题解决了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d001e1c807a61785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你有没有觉得这种过滤很麻烦，既要获取参数，又要判断参数是否存在，存在之后又要进行int类型转化。有没有简单的方法呢，答案是有的：<a href="https://www.django-rest-framework.org/api-guide/filtering/#filtering" target="_blank" rel="noopener">Filtering</a>。这个drf提供的filter是非常强大的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c0b323c74a42f364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#djangofilterbackend" target="_blank" rel="noopener">DjangoFilterBackend</a>：传统的Django过滤器，类似于xadmin的后台管理器。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#searchfilter" target="_blank" rel="noopener">SearchFilter</a>：通过搜索关键词进行过滤。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a>：通过某个顺序来进行过滤。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#djangoobjectpermissionsfilter" target="_blank" rel="noopener">DjangoObjectPermissionsFilter</a>：通过权限进行过滤。</p><p>前面三种是比较常见的过滤，它们可以实现列表页面的普通字段精确过滤，搜索过滤，以及排序等功能，下面分别进行介绍。</p><h3 id="DjangoFilterBackend"><a href="#DjangoFilterBackend" class="headerlink" title="DjangoFilterBackend"></a>DjangoFilterBackend</h3><p>1、安装<code>django-filter</code>（前面已经安装过了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure></p><p>2、注册进入app<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;django_filters&apos;,</span><br></pre></td></tr></table></figure></p><p>3、添加设置（默认设置好了，不用管）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;django_filters.rest_framework.DjangoFilterBackend&apos;,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、开始使用,打开goods\vieews.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django_filters.rest_framework import DjangoFilterBackend</span><br></pre></td></tr></table></figure></p><p>5、删除原来定义的过滤方法：<code>def get_queryset(self)</code>代码全部去掉。<br>6、仿照官方案例进行代码书写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    filter_backends = (DjangoFilterBackend,)</span><br><span class="line">    filter_fields = (&apos;name&apos;, &apos;shop_price&apos;)</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们项目，发现页面多了一个过滤器按钮，我们可以进行过滤：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5085aae67da6835b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-aa5147ea18a50359.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们测试一下，价格输入123，名称不输入,然后回车，发现浏览器地址栏变成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/?name=&amp;shop_price=123</span><br></pre></td></tr></table></figure></p><p><strong>注意一下，过滤和搜索是不一样的，过滤是精确的，字段必须保持一模一样，但是搜索却不是。</strong></p><p>但是我们如果想要模糊查询，而且价格在某个区间里面，这该怎么办呢？</p><h2 id="区间搜索和模糊查询"><a href="#区间搜索和模糊查询" class="headerlink" title="区间搜索和模糊查询"></a>区间搜索和模糊查询</h2><p>点击这里查看<a href="https://django-filter.readthedocs.io/en/master/" target="_blank" rel="noopener">django-filter</a>，注意一下，这个django-filter不仅可以用在drf上面，还可以用于Django上面，它允许我们自定义filter类。</p><p>我们在goods app下面新建一个filters.py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: filters.py</span><br><span class="line"># @time: 2018/10/4 17:47</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django_filters import rest_framework as filters</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsFilter(filters.FilterSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品的过滤类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    price_min = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;gte&apos;)      # 指定字段及字段的行为，我们这里指定shop_price的区间</span><br><span class="line">    price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;lte&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [&apos;price_min&apos;, &apos;price_max&apos;]</span><br></pre></td></tr></table></figure></p><p>接着回到我们的views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from goods.filters import GoodsFilter</span><br><span class="line"></span><br><span class="line"> filter_backends = (DjangoFilterBackend,)  # # DjangoFilterBackend 过滤器</span><br><span class="line"> # filter_fields = (&apos;name&apos;, &apos;shop_price&apos;)   # 设置我们需要过滤的字段 </span><br><span class="line"> filter_class = GoodsFilter   # filter_class 等于我们自定义的类</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，发现出了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">super().__init__(**kwargs)</span><br><span class="line">TypeError: __init__() got an unexpected keyword argument &apos;name&apos;</span><br></pre></td></tr></table></figure></p><p>解决办法，修改 <code>price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&#39;lte&#39;)</code>里面的<code>name</code>字段为<code>field_name</code>即可。</p><p>刷新一下就成了这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-44886e282c1114bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意一下，这里如果出现过滤器没有确定按钮的话，检查一下看你有没有继承错误，应该继承的是<code>from django_filters import rest_framework as filters</code>这个语句。</p><p>还有出现了这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: &lt;class &apos;goods.models.Goods&apos;&gt; QuerySet.</span><br><span class="line">  paginator = self.django_paginator_class(queryset, page_size)</span><br></pre></td></tr></table></figure></p><p>因为对于无序的数据，分页器生成的分页数据可能不一致，才导致这种情况，解决办法（打开goods\views.py文件，修改一下queryset代码）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryset = Goods.objects.all().order_by(&apos;add_time&apos;)</span><br></pre></td></tr></table></figure></p><p>然后问题就解决了。接下来完成我们的迷糊查询（搜索）。采用Django QuerySetAPI来完成我们的要求，这里推荐自强学堂的一篇文章<a href="https://code.ziqiangxuetang.com/django/django-queryset-api.html" target="_blank" rel="noopener">Django QuerySetAPI</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = filters.CharFilter(field_name=&quot;name&quot;, lookup_expr=&quot;icontains&quot;)  # 模糊查询: 名称中包含某字符，且字符不区分大小写,不加lookup_expr=&quot;icontains&quot;则是等值匹配</span><br><span class="line"></span><br><span class="line">class Meta:</span><br><span class="line">    model = Goods</span><br><span class="line">    fields = [&apos;price_min&apos;, &apos;price_max&apos;, &apos;name&apos;]</span><br></pre></td></tr></table></figure></p><p>接下来我们进行搜索的配置，在这之前去掉前面的模糊查询代码，两行哈，就上面的。</p><h2 id="SearchFilter"><a href="#SearchFilter" class="headerlink" title="SearchFilter"></a>SearchFilter</h2><p>点击这里查看官方文档：<a href="https://www.django-rest-framework.org/api-guide/filtering/#searchfilter" target="_blank" rel="noopener">SearchFilter</a>，我们仿照官方的实例来测试一下：（打开goods\views.py文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import filters</span><br><span class="line"></span><br><span class="line">  filter_backends = (DjangoFilterBackend, filters.SearchFilter)   # DjangoFilterBackend,以及SearchFilter过滤器（SearchFilter）</span><br><span class="line">  search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;)</span><br></pre></td></tr></table></figure></p><p>然后运行一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eb445f4ff8d72e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面多了一个搜索框，<code>DjangoFilterBackend</code>和<code>SearchFilter</code>可以分开使用，也可以合起来使用，想让谁显示就配置谁，也可以同时显示。</p><p>如果出现下面的错误,说明你的filter导错了，我们这里要用到的是<code>from rest_framework import filters</code>而不是<code>from django_filters import filters</code>注意一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter)</span><br><span class="line">AttributeError: module &apos;django_filters.rest_framework.filters&apos; has no attribute &apos;SearchFilter&apos;</span><br></pre></td></tr></table></figure></p><p>然后搜索还支持多种过滤方式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d82f808707fbcf03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;)</span><br></pre></td></tr></table></figure><p>需要说明的一点是，这三个字段不是统一的，也就是说可以单独使用。例如对name进行等值搜索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;=name&apos;)</span><br></pre></td></tr></table></figure></p><p>去掉其他的字段，返回结果为0个。而我们在里面加一个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;=name&apos;, &apos;goods_brief&apos;)</span><br></pre></td></tr></table></figure></p><p>返回结果就不是了，而是有一个。如果你把第三个字段都加上，发现全部结果了，因为他们里面只要满足一个条件就能返回。也就是说是或的关系，而不是与的关系，这一点要注意一下。同时我们这里不进行全文的搜索，因为一般模糊查询最好是使用elasticSearch来做，那样更方便。接下来是OrderingFilter排序了。</p><h2 id="OrderingFilter"><a href="#OrderingFilter" class="headerlink" title="OrderingFilter"></a>OrderingFilter</h2><p>老规矩还是先看官方文档：<a href="https://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a>，然后按照官方的例子来测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># DjangoFilterBackend,,SearchFilter,OrderingFilter</span><br><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">ordering_fields = (&apos;sold_num&apos;, &apos;add_time&apos;)</span><br></pre></td></tr></table></figure></p><p>我们按照商品的销量，添加时间进行排序，分正排序与负排序：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b4493ed9f5882265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们通过简单的几行代码，完成了商品列表页的分页，过滤，搜索，排序功能。</p><p>至此，我们本篇关于商品列表页面的配置下篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们完成商品列表页面的剩余配置，里面包含的知识比较多，所以分成3篇文章进行介绍。&lt;/p&gt;
&lt;h2 id=&quot;drf中的re
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（八）：商品列表页的配置（中）</title>
    <link href="http://licheetools.github.io/2018/05/01/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>http://licheetools.github.io/2018/05/01/采用Vue-Django-Restful-framework构建生鲜电商项目（八）：商品列表页的配置（中）/</id>
    <published>2018-05-01T08:58:19.000Z</published>
    <updated>2019-04-15T08:58:58.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们继续进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="基于类来配置商品列表页"><a href="#基于类来配置商品列表页" class="headerlink" title="基于类来配置商品列表页"></a>基于类来配置商品列表页</h2><p>现在我们不使用那个APIView，而是使用更上层的view：<code>GenericAPIView</code><a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/#using-mixins" target="_blank" rel="noopener">Using mixins</a>，这样写起来更加简单。使用Using mixins 和 GenericAPIView，其中GenericAPIView是在APIView的基础上进行了更深层次的封装，里面加入了一些东西如分页用的pagination_class，过滤用的filter_backends等。</p><p>我们看到官方给我们提供的文档代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from snippets.models import Snippet</span><br><span class="line">from snippets.serializers import SnippetSerializer</span><br><span class="line">from rest_framework import mixins</span><br><span class="line">from rest_framework import generics</span><br><span class="line"></span><br><span class="line">class SnippetList(mixins.ListModelMixin,</span><br><span class="line">                  mixins.CreateModelMixin,</span><br><span class="line">                  generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>所以，我们按照这个代码来修改我们的goods\views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line">from rest_framework import mixins</span><br><span class="line">from rest_framework import generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(mixins.ListModelMixin, generics.GenericAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()[:10]</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>我们通过get方法最后返回的是一个list函数，我们看一下list函数到底是干嘛的，我们可以看到在mixin.py文件里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6566bfa836c6aad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>它其实已经可以实现分页和序列化的功能了。</p><p>现在我们尝试把get方法注释掉，运行一下项目，发现出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;detail&quot;: &quot;方法 “GET” 不被允许。&quot;</span><br></pre></td></tr></table></figure></p><p>所以说，不论是何种view，我们都需要去重写它的get或者post等http请求的方法（drf默认是不会接收任何方法请求的）</p><p>这样是不是很简单，几行代码就解决了问题。那么我要是告诉你还有比这更简单的方法，都不用你去写get或者post等http请求，是不是觉得太方便了呢。</p><p>我们查看Pycharm左边的源码：<code>F:\Envs\vueshop\Lib\site-packages\rest_framework\generics.py</code>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2402453503feb539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击那个<code>ListAPIView</code>，有没有发现右侧的代码和我们刚才写的一模一样，所以我们可以直接继承这个<code>ListAPIView</code>，就不用写那些多余的代码了。注意到没有，右边的函数都直接继承了两个：<code>mixins.XXXXModelMixin, GenericAPIView</code>，这个和我们前面代码所继承的一模一样（<code>mixins.ListModelMixin, generics.GenericAPIView</code>这里直接在generics.py文件里使用，所以不加generics），所以直接使用<br><code>ListAPIView</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.generics import ListAPIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(ListAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()[:10]</span><br><span class="line">    serializer_class = GoodsSerializer</span><br></pre></td></tr></table></figure><p>简单说一下几个常用的APIView：ListAPIview (用于获取列表)，CreateAPiView (用于创建一条信息)，RetrieveAPIView(用于获取某一条信息)。具体可以点击这里进行查看：<a href="https://www.cnblogs.com/yangxiaoling/p/6914880.html" target="_blank" rel="noopener">API Guide(四)之Generic views</a></p><p>现在又有问题，一般的列表页都是需要分页的，你不可能一下子把所有的信息都给展示出来,我们有简单的方法，只需要通过在setting里面配置一个参数就能完成我们的分页功能。我们所有关于rest-framework的配置都是在<code>F:\Envs\vueshop\Lib\site-packages\rest_framework\settings.py</code>里面的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-77b283c5c240d09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到，drf默认是不提供分页的，需要我们自己来写，我们打开vueshop\settings.py文件，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &apos;DEFAULT_PAGINATION_CLASS&apos;: &apos;rest_framework.pagination.LimitOffsetPagination&apos;,</span><br><span class="line">    &apos;PAGE_SIZE&apos;: 10,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这些功能都是刚才提到的<code>GenericAPIView</code>来实现的。我们发现运行之后都直接给图片把域名都给加上了，可以直接进行访问了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2fb3d6901c7b116e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还可以自定义pagination的样式： <a href="https://www.django-rest-framework.org/api-guide/pagination/#setting-the-pagination-style" target="_blank" rel="noopener">Setting the pagination style</a><br>我们继续在views.py里面进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.pagination import PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsPagination(PageNumberPagination):</span><br><span class="line">    page_size = 10   # 默认每页个数</span><br><span class="line">    page_size_query_param = &apos;page_size&apos;  # 可以自定义每页的个数</span><br><span class="line">    page_query_param = &quot;p&quot;</span><br><span class="line">    max_page_size = 100  # 默认每页最大个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(generics.ListAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure></p><p>注意这里在<code>GoodsListView</code>里面必须添加<code>pagination_class</code>字段，因为在<code>GenericAPIView</code>里面有这个参数，还字段调用了这个<code>DEFAULT_PAGINATION_CLASS</code>，也就意味着有了这个你就要把刚才在settings.py里面配置的那个<code>DEFAULT_PAGINATION_CLASS</code>给注释掉，否则就会出错哈：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0443de0023fcb94f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行结果如下(第几页，每页多少个都是可以自定义的，你不定义就用默认的)：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30d3d400539a3ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="Viewsets和router完成商品列表页"><a href="#Viewsets和router完成商品列表页" class="headerlink" title="Viewsets和router完成商品列表页"></a>Viewsets和router完成商品列表页</h2><p>现在我们来说一个比GenericAPIView还要更深层次的东西：Viewsets，这个不是某个具体的View，他包函5个view：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-706bfbdca1ee3aad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们现在将使用它的GenericViewSet，看到没有它不仅封装了我们的GenericAPIView，还添加了一个ViewSetMixin：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-df201f1205830bb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们来看一下这个ViewSetMixin里面包含了什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a5646d36b4e02fa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>里面有4个方法，第一个就是路由函数的配置。</p><p>我们知道我们刚才在GoodsListView里面继承的是这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListView(generics.ListAPIView):</span><br></pre></td></tr></table></figure></p><p>我们点开ListAPIView，发现ListAPIView其实继承了mixins.ListModelMixin和GenericAPIView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class ListAPIView(mixins.ListModelMixin,</span><br><span class="line">                  GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>而如果我们只这样写，发现GenericViewSet其实继承的是ViewSetMixin和generics.GenericAPIView，是不是少了一个，对把mixins.ListModelMixin给丢了，所以我们需要补上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListView(viewsets.GenericViewSet):</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br></pre></td></tr></table></figure><p>现在我们看这个： <a href="https://www.django-rest-framework.org/api-guide/viewsets/#viewsets" target="_blank" rel="noopener">ViewSets</a>，尝试将ViewSets和Routers来进行配套使用。为了更好地知道我们这里是使用了viewset，因此我们将GoodsListView进行改名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure></p><p>接下来去我们的urls.py文件里面配置我们的url:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListViewSet</span><br><span class="line"></span><br><span class="line">goods_list = GoodsListViewSet.as_view(&#123;</span><br><span class="line">    &apos;get&apos;: &apos;list&apos;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>我们可以直接将get请求绑定到list上面，类似于前面看到的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get(self, request, *args, **kwargs):</span><br><span class="line">    return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>既然这样弄好了，我们之前的url映射就要修改了（我们不再需要添加as_view()了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 商品列表页</span><br><span class="line">path(&apos;goods/&apos;, goods_list, name=&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></p><p>其实还有更简单的呢，我们可以看到官方文档里面有介绍这个<code>DefaultRouter</code>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d60fb33bc336e167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意由于官方是1.x的文档，所以2.0的drf配置可能url就有些不同，但是没关系，我这个我经过了测试，没有问题。我们继续修改urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet)  # 这里前面加r可以进行转义</span><br></pre></td></tr></table></figure></p><p>然后去掉之前对于goods的配置，在urlpatterns中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 对于goods的router path路径</span><br><span class="line">  re_path(&apos;^&apos;, include(router.urls)),</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，发现么有任何问题。</p><p>看到这里大家就可能会懵圈，其实我也是，因为我们不知道什么时候用GenericViewSet, GenericAPIView ，APIView  和 View。懵圈就是对的，我们接下来就是说明这些东西的层次结构，以后你就不会晕了。</p><h2 id="GenericViewSet，-GenericAPIView，APIView-和View的使用"><a href="#GenericViewSet，-GenericAPIView，APIView-和View的使用" class="headerlink" title="GenericViewSet， GenericAPIView，APIView 和View的使用"></a>GenericViewSet， GenericAPIView，APIView 和View的使用</h2><p>现在我们来理清一下这些view之间的关系，还有mixins.ListModelMixin以及这些关系如何来进行组合使用，这样我们就清楚什么时候使用什么了。看这里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GenericViewSet(viewset) -drf</span><br><span class="line">    GenericAPIView      -drf</span><br><span class="line">        APIView         -drf</span><br><span class="line">            View        -django</span><br></pre></td></tr></table></figure></p><p>层级关系有了（越往上就是对底层的一次封装）也就是说下面有的功能上面一定都有，而上面有的功能下面却不一定有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">class APIView(View):</span><br></pre></td></tr></table></figure></p><p>但还是不清楚各个view的区别（这里是指功能view），我们需要借助mixin来进行理解了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b1b89805fd9ba0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面可以看到mixin一共有5种类型，各个view 之间的差异其实就是通过这个mixin来实现的。这就好比英语中的时态一样，都是完成时，却又不同（前面那个层级关系就类似说明了，过去时，现在时，将来时的区别（实际上又没有，里面的意思你肯定懂））：</p><hr><p>过去完成时，现在完成时，将来完成时，过去将来完成时</p><hr><p>有点跑题，不懂的点这里看一下，毕竟英语还是挺重要的：<a href="https://baijiahao.baidu.com/s?id=1592289962651390333&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">现在完成时+过去完成时+将来完成时+过去将来完成时</a>。我们来看这5个mixin，我们以其中的ListModelMixin为例，来进行说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class ListModelMixin(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List a queryset.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def list(self, request, *args, **kwargs):</span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        if page is not None:</span><br><span class="line">            serializer = self.get_serializer(page, many=True)</span><br><span class="line">            return self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=True)</span><br><span class="line">        return Response(serializer.data)</span><br></pre></td></tr></table></figure></p><p>我们看到这个<code>ListModelMixin</code>继承的是最高类object（祖宗类），这个没什么说的。关键是这里的list方法，它将get 和 list进行了连接，里面实现了过滤，分页和序列化的功能。</p><p>其他的Mixin：<br>CreateModelMixin ：创建数据会用到；<br>RetrieveModelMixin：获取具体的信息，序列化；<br>UpdateModelMixin：更新全部还是部分的信息；<br>DestroyModelMixin：用来连接delete操作，并在操作的时候设置返回状态如200，204等。<br>上面这些功能都是由<code>mixin</code>来完成的，<code>GenericAPIView</code>并没有做，所以要实现相应的功能就必须通过两者结合来达到。那现在的问题就是这个<code>GenericAPIView</code>到底做了什么事情，不可能绑定这么一个没有的东西吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0b1eaab2f0b14899.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><code>GenericAPIView</code>有好多种，我们以<code>ListAPIView</code>为例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class ListAPIView(mixins.ListModelMixin, GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>点击右边的<code>GenericAPIView</code>，我们可以看到它是继承了<code>views.APIView</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Base class for all other generic views.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # You&apos;ll need to either set these attributes,</span><br><span class="line">    # or override `get_queryset()`/`get_serializer_class()`.</span><br><span class="line">    # If you are overriding a view method, it is important that you call</span><br><span class="line">    # `get_queryset()` instead of accessing the `queryset` property directly,</span><br><span class="line">    # as `queryset` will get evaluated only once, and those results are cached</span><br><span class="line">    # for all subsequent requests.</span><br><span class="line">    queryset = None</span><br><span class="line">    serializer_class = None</span><br><span class="line"></span><br><span class="line">    # If you want to use object lookups other than pk, set &apos;lookup_field&apos;.</span><br><span class="line">    # For more complex lookup requirements override `get_object()`.</span><br><span class="line">    lookup_field = &apos;pk&apos;</span><br><span class="line">    lookup_url_kwarg = None</span><br><span class="line"></span><br><span class="line">    # The filter backend classes to use for queryset filtering</span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line">    # The style to use for queryset pagination.</span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>看到上面的注释没有：<code>Base class for all other generic views</code>：所有通用（一般）视图的基类。里面还有两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># The filter backend classes to use for queryset filtering</span><br><span class="line">filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line"># The style to use for queryset pagination.</span><br><span class="line">pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>看到了，为什么我们可以过滤，可以分页？原因就在这里。我们再点击右边的APIView，看看这里面是什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e95f74b4583e1057.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这就是一些基本的功能，我们前面的<code>GenericAPIView</code>就已经封装具有了这些，一些没有的功能就在更深的view上面。这就好比你一年级会+，-运算，二年级你除了会+，-还会了*，/运算；到了后面，你不仅会前面的还会乘方，开方。。。。运算。</p><p>现在我们谈一下马上用到的<code>RetrieveAPIView</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>这个注释<code>Concrete view for retrieving a model instance.</code>的意思是：取到一个模型实例化的具体视图。然后将get方法与retrieve方法进行绑定，就能利用到retrieve的方法了，而不仅仅只是get数据了。而且通过浏览器发送过来的请求只有http协议中规定的几种，我们这里就不只有那些了。我们点<code>retrieve</code>进去，看看这个函数实现了什么功能。它自动帮我们跳到了RetrieveModelMixin这个类，而里面有一个<code>retrieve</code>函数。这个类的作用就是获取一个模型的实例而且是通过<code>retrieve</code>函数来完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveModelMixin(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Retrieve a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def retrieve(self, request, *args, **kwargs):</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        return Response(serializer.data)</span><br></pre></td></tr></table></figure><p>所以这其实就是<code>mixins.RetrieveModelMixin</code>和<code>GenericAPIView</code>的一次组合，实际上你通过那个RetrieveAPIView的继承关系就能看出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin, GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>那么按照这种组合我们是否可以自己组合自己想要的类呢？答案是可以的，但是别忘了把get 方法和 retrieve方法进行绑定，也就是说光有下面是不可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>正确的应该是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>所以一般情况我们都会优先考虑那些已经组合好的APIView，只有在满足不了需求的情况下，我们才进行组合，记得将http请求方法（不一定是get）与mixin方法进行绑定哈:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b1a3b176a4188c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们往上走，说完了<code>GenericAPIView</code>，现在来说一下<code>GenericViewSet(viewset)</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GenericViewSet(viewset) -drf</span><br><span class="line">    GenericAPIView      -drf</span><br><span class="line">        APIView         -drf</span><br><span class="line">            View        -django</span><br></pre></td></tr></table></figure></p><p>这个viewset有什么好处呢？我们知道这个viewset有5种：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d8db077e5e58398c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>它们也都继承了GenericAPIView，并都与唯一的ViewSetMixin进行了组合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>我们看一下这个<code>ViewSetMixin</code>它里面是什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4f43f5c4ea8596da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个<code>ViewSetMixin</code>将具体的每个modelmixin(例如:(mixins.DestroyModelMixin，mixins.UpdateModelMixin)进行了功能合并，形成了唯一的一个<code>ViewSetMixin</code>。</p><p>在讲<code>GenericAPIView</code>的时候我们说过，当你自定义APIView的时候需要将http请求方法与mixin方法进行绑定。那么上面说过这个唯一的<code>ViewSetMixin</code>既然是进行了功能合并，那我们就不需要进行方法绑定了。<strong>注意我这里是说不需要进行方法的绑定，但没说不需要其他的绑定关系。</strong></p><p>url的配置还是需要配置的，我们打开那个viewsets.py文件（实际上我们上通过点击这个GenericViewSet来直接进入该文件的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e97c6fc89718e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这其实就是url的配置，它重写了as_view方法，接受参数，并传递到对应的method 与action进行绑定。所以我们在urls.py文件里面，就要修改了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goods_list = GoodsListViewSet.as_view(&#123;</span><br><span class="line">    &apos;get&apos;: &apos;list&apos;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(&apos;goods/&apos;, goods_list ,name=&quot;goods-list&quot;),  # 这里就不需要as_view()了</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这样尽管很简单，但是drf还是给我们提供了一个更简单的Routers：<a href="https://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/#using-routers" target="_blank" rel="noopener">Using Routers</a></p><p>我们可以使用这个进行默认的绑定，这个其实和generic中的差不多，怎么用呢？直接在urls.py文件里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListViewSet</span><br><span class="line"></span><br><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet)  # 这里前面加r可以进行转义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   # 对于goods的router path路径</span><br><span class="line">   re_path(&apos;^&apos;, include(router.urls)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>是不是很简单。<code>ViewSetMixin</code>除了不需要进行方法绑定，还有其他的好处：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efc04ca2f8909702.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>比如依赖于具体的request请求方法，来给视图绑定动作。这个操作在后面的开发中进行动态的serializer时具有非常大的好处，非常方便。</p><p>最后奉上一张图片，让你对此有更直观的认识：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5d185b88b06f7ffa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>大家可以点击这里，了解更多关于drf的知识：<a href="https://github.com/leilux/Django-REST-Framework-Tutorial_zh-CN" target="_blank" rel="noopener">drf翻译的教程</a></p><p>至此，我们本篇关于商品列表页面的配置中篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们继续进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。&lt;/p&gt;
&lt;h2 id=&quot;基于类来配置商
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（七）：商品列表页的配置（上）</title>
    <link href="http://licheetools.github.io/2018/04/22/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://licheetools.github.io/2018/04/22/采用Vue-Django-Restful-framework构建生鲜电商项目（七）：商品列表页的配置（上）/</id>
    <published>2018-04-22T08:56:50.000Z</published>
    <updated>2019-04-15T08:57:34.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="基于类来配置商品列表页"><a href="#基于类来配置商品列表页" class="headerlink" title="基于类来配置商品列表页"></a>基于类来配置商品列表页</h2><p>在教育网站那个项目里面，我们介绍了基于视图（FBV）和基于类（CBV）来实现用户登录的功能：<a href="https://www.cnblogs.com/yuhy/p/8414340.html" target="_blank" rel="noopener">Django~FBV和CBV</a></p><p><strong>基于视图（FBV）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 基于视图函数的实现用户的登录</span><br><span class="line"># 当我们配置的url被这个view处理时，将会自动传入request对象.</span><br><span class="line">def user_login(request):</span><br><span class="line">   # 前端向后端发送的请求方式有两种: get和post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单时为post</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">       # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">        user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">     pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">       # 取值成功返回user对象,失败返回null</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。</span><br><span class="line">            login(request, user)</span><br><span class="line">            # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">            return render(request, &apos;index.html&apos;)</span><br><span class="line">        else:</span><br><span class="line">            # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">    # 获取登录页面时为get</span><br><span class="line">    elif request.method == &quot;GET&quot;:</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">       # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>基于类（CBV）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#  基于类实现用户的登录，它需要继承view</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    # 不需要判断，直接调用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息</span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line">        # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息</span><br><span class="line">        if login_form.is_valid():</span><br><span class="line">            # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">            pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">            # 取值成功返回user对象,失败返回null</span><br><span class="line">            user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">            if user is not None:</span><br><span class="line">                if user.is_active:</span><br><span class="line">                    # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                    login(request, user)</span><br><span class="line">                    # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                    return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br><span class="line">                else:</span><br><span class="line">                    return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;)</span><br><span class="line">            else:</span><br><span class="line">                # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回</span><br><span class="line">                return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">        # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;)</span><br></pre></td></tr></table></figure></p><p>为了实现我们的面向对象思想，我们更加喜欢后者来进行开发。</p><p>1、首先我们先进行url的配置，在vueshop\urls.py文件里面，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from goods.view_base import GoodsListView</span><br><span class="line"></span><br><span class="line"># 商品列表页</span><br><span class="line">   path(&apos;goods/&apos;, GoodsListView.as_view(), name=&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></p><p>先暂且这样，因为我们还没有配置视图函数，所以会出现红色的错误提示，先不用管。<br>2、我们在apps\goods中新建一个view_base.py文件，来实现一个仅仅只通过Django实现的json返回，这让我们更加了解Django的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: view_base.py</span><br><span class="line"># @time: 2018/10/3 14:46</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line">        for good in goods:</span><br><span class="line">            json_dict = &#123;&#125;</span><br><span class="line">            json_dict[&quot;name&quot;] = good.name</span><br><span class="line">            json_dict[&quot;category&quot;] = good.category.name</span><br><span class="line">            json_dict[&quot;market_price&quot;] = good.market_price</span><br><span class="line">            json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.http import HttpResponse</span><br><span class="line">        return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure><p>然后我们运行一下项目，在浏览器地址栏中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/</span><br></pre></td></tr></table></figure></p><p>会发现全是一堆乱码，所以我们利用Chrome的童鞋可以在应用商店里下载<strong>json viewer</strong>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4eb3d6af1a9b34b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击安装，最后刷新一下我们的项目，发现页面就好看多了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2664a5dd01b4da3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样就把我们当前的信息都给展示出来了，但是你肯定想这么简单的操作，我们还用什么restful framework呢？其实这是因为当我们的项目很多时，我们不可能还按照这种方式一一用属性的方法来取出来，这劳动量太大了。还有就是有些属性是通过这种方式是无法取出来的，你可以试试<code>json_dict[&quot;add_time&quot;] = good.add_time</code>这个你运行肯定会出错，因为这个不是一个jsonserializer对象。</p><p>现在我们来利用Django自带的<code>model_to_dict</code>来给刚才的代码进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: view_base.py</span><br><span class="line"># @time: 2018/10/3 14:46</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line">        # for good in goods:</span><br><span class="line">        #     json_dict = &#123;&#125;</span><br><span class="line">        #     json_dict[&quot;name&quot;] = good.name</span><br><span class="line">        #     json_dict[&quot;category&quot;] = good.category.name</span><br><span class="line">        #     json_dict[&quot;market_price&quot;] = good.market_price</span><br><span class="line">        #     json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.forms.models import model_to_dict</span><br><span class="line">        for good in goods:</span><br><span class="line">            json_dict = model_to_dict(good)</span><br><span class="line">            json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.http import HttpResponse</span><br><span class="line">        return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>运行一下我们的项目，发现大部分都能序列化，但还是有些字段不可以：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-fd9ca9edca887056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这时候Django自带的一个专门用于序列化的字段<code>serializers</code>派上用场了，我们修改代码如下（有了这个连model_to_dict都不需要了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line"></span><br><span class="line">        from django.core import serializers</span><br><span class="line">        json_data = serializers(&quot;json&quot;, goods)</span><br><span class="line">        json_data = json.loads(json_data)</span><br><span class="line">        from django.http import HttpResponse, JsonResponse</span><br><span class="line">        return HttpResponse((json_data), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>如果运行后出现这种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Requested setting UEDITOR_SETTINGS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() be</span><br></pre></td></tr></table></figure></p><p>请参考这篇文章：<a href="https://blog.csdn.net/u011013781/article/details/52155761" target="_blank" rel="noopener">PyCharm开发django配置过程遇到问题（转）</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5447159288c0db40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f02af4190660f417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行项目，又出现这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise AppRegistryNotReady(&quot;Apps aren&apos;t loaded yet.&quot;)</span><br><span class="line">django.core.exceptions.AppRegistryNotReady: Apps aren&apos;t loaded yet.</span><br></pre></td></tr></table></figure></p><p>这个很简单，是运行vueshop这个项目，不是view_base.py文件！！！运行vueshop这个项目，发现又出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> json_data = serializers(&quot;json&quot;, goods)</span><br><span class="line">TypeError: &apos;module&apos; object is not callable</span><br></pre></td></tr></table></figure></p><p>说明这是一个moudle我们不能直接调用它，而应该在调用的时候写清楚具体调用哪一个方法！修改<code>json_data = serializers(&quot;json&quot;, goods)</code>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> from django.core.serializers import serialize</span><br><span class="line">        json_data = serialize(&quot;json&quot;, goods)</span><br><span class="line">或者</span><br><span class="line"> from django.core import serializers</span><br><span class="line">        json_data = serializers.serialize(&quot;json&quot;, goods)</span><br></pre></td></tr></table></figure></p><p>然后运行一下vueshop项目，发现是一些没有规则的文字：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0dd47ef169154fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们没有把这些dict类型的数据转成str字符串，所以修改返回代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return HttpResponse((json.dumps(json_data)), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>当然你可以以直接使用JsonResponse，把鼠标移到JsonResponse按住Ctrl，单击左键，就可以看到源码了，看到没有这其实是对上面做了一次更深的封装：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-28a583d3fd8ef128.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以我们也可以这样修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return JsonResponse(json_data, safe=False)</span><br></pre></td></tr></table></figure></p><p>记住这里的safe=False一定要添加，否则会出错：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bdce0f10363fa753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意json.dumps()和json.loads()是相反的操作，前者用于将dict类型的数据转成str字符串，后者用于将str类型的数据转成dict类型。</strong>不清楚的童鞋可以阅读这篇文章：<a href="https://blog.csdn.net/mr_evanchen/article/details/77879967" target="_blank" rel="noopener">【Python】Json模块dumps、loads、dump、load函数介绍</a>。了解更多Django序列化的知识可以阅读这篇文章： <a href="https://www.cnblogs.com/zknublx/p/6061822.html" target="_blank" rel="noopener">Serialize—-序列化django对象</a>或者这篇<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000" target="_blank" rel="noopener">序列化介绍</a>。</p><p>看到这里你还是有疑问，前面说不能序列化所以用drf(Django Restful Framework的简称，以后都是这么说明)。可是现在Django通过其提供的序列化函数已经很好的解决了这个问题，那我们为什么还要用drf呢？</p><p>1、前面说过images这个字段保存的是图片的一个相对路径，我们需要在前面加上’media’。（如果通过PC端就可以不用，因为我们前面配置了media_root，但是通过app,pad就需要用户自己添加，这是不可能的，所以需要用到drf，它可以帮我们添加这个media前缀）</p><p>2、我们这里字段序列化方式被固定了，一旦需要重组就非常的麻烦，drf就不一样了。</p><p>3、drf可以生成文档，还可以进行输入检测等。</p><h2 id="采用drf完成商品列表页面的配置"><a href="#采用drf完成商品列表页面的配置" class="headerlink" title="采用drf完成商品列表页面的配置"></a>采用drf完成商品列表页面的配置</h2><p>首先通过浏览drf的官方网站，我们需要安装一些依赖包：</p><ul><li><a href="https://pypi.org/project/coreapi/" target="_blank" rel="noopener">coreapi</a> (1.32.0+) - Schema generation support.</li><li><a href="https://pypi.org/project/Markdown/" target="_blank" rel="noopener">Markdown</a> (2.1.0+) - Markdown support for the browsable API.</li><li><a href="https://pypi.org/project/django-filter/" target="_blank" rel="noopener">django-filter</a> (1.0.1+) - Filtering support.</li><li><a href="https://github.com/maraujop/django-crispy-forms" target="_blank" rel="noopener">django-crispy-forms</a> - Improved HTML display for filtering.</li><li><a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="noopener">django-guardian</a> (1.1.1+) - Object level permissions support.<br>我们发现其他都有，现在只需要安装<code>coreapi</code>(文档会用到)和<code>django-guardian</code>。使用下面的命令进行安装:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xx -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></li></ul><p>如果你在安装coreapi的过程中出现了utf-8的decode编码错误，那么你就要修改你的虚拟环境的编码格式了（一般来说使用pip18的版本都不会有这个错误，其他版本可能会有），具体操作如下：打开你虚拟环境下面的–init–.py文件（我的路径为F:\Envs\vueshop\Lib\site-packages\pip\compat）大约75行的位置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-64d9ecadd2ee2cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>将里面的utf_8修改为gbk。然后再进行安装，不过需要先卸载之前安过的版本资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall coreapi MarkupSafe</span><br></pre></td></tr></table></figure></p><p>然后在运行我们的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install coreapi -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>接下来引入我们的api文档，打开vueshop\urls.py文件，我们新增两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.documentation import include_docs_urls</span><br><span class="line"></span><br><span class="line"> # 自动化的文档,低版本的Django记得把docs/$后面的$去掉（我这采用的是Django2.0.1）</span><br><span class="line">   path(&apos;docs/&apos;, include_docs_urls(title=&apos;慕海生鲜网文档&apos;))</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，看看是不是没有错误发生。现在我们需要按照<a href="http://www.django-rest-framework.org/#" target="_blank" rel="noopener">官方文档</a>的说明去settings.py文件里面注册我们的<code>rest_framework</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    &apos;rest_framework&apos;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>还有路由的配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2dd75a6c994ab9e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>只不过这是Django1.x系列的路由配置，在Django2.x里面我们这样配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Django rest_framework的路由配置</span><br><span class="line">  path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;))</span><br></pre></td></tr></table></figure></p><p>然后我们按照官方快速使用的例子来创建一个api: <a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/#rewriting-our-api-using-class-based-views" target="_blank" rel="noopener">Rewriting our API using class-based views</a></p><p>我们直接复制上面的代码进入我们goods\views.py文件里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List all snippets, or create a new snippet.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, format=None):</span><br><span class="line">        goods = Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer = GoodsSerializer(goods, many=True)  # 因为返回的是列表，所以我们需要指定many为True</span><br><span class="line">        return Response(goods_serializer.data)</span><br></pre></td></tr></table></figure></p><p>说明一下，<code>from .models import Goods</code>表示当前的目录下的models文件，这样取不容易出现因为重名而导致的失败。<code>SnippetSerializer</code>是可以自定义序列化的类。在前面的教育网站里面我们说过了modelform 和form，特别是modelform，它可以将字段直接转成html代码。同样的在drf里面，serializer是用来取代form开发的，也就是说我们不使用form来进行后面的开发了(实际上是没有用于让用户表单提交的功能)，直接用serializer。而且它的功能都不一样了，serializer是用来对json进行序列化的。具体参考这个系列的文章：<a href="https://www.imooc.com/article/20443?block_id=tuijian_wz" target="_blank" rel="noopener">Django rest framework之Serializers笔记（一）</a></p><p>类似于之前对form的操作，我们先来在goods app下面新建一个文件<code>serializers.py</code>:<br>然后按照官方快速使用的例子来创建一个Serializer class：<a href="https://www.django-rest-framework.org/tutorial/1-serialization/#creating-a-serializer-class" target="_blank" rel="noopener">Creating a Serializer class</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: serializers.py.py</span><br><span class="line"># @time: 2018/10/3 20:09</span><br><span class="line"># 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField(required=True, max_length=100)</span><br><span class="line">    click_num = serializers.IntegerField(default=0)</span><br></pre></td></tr></table></figure></p><p>然后修改urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListView</span><br></pre></td></tr></table></figure></p><p>注意将之前的<code>from goods.view_base import GoodsListView</code>给删除掉，否则就有两个地址了。</p><p>现在运行我们的项目，发现出了问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f1d3f645091de553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个问题有两种解决方法，一种是注销后台xadmin，另一种则是修改UserProfile的返回值，将<code>name</code>修改为<code>username</code>，因为你在定义的时候是允许该字段为空的，所以会返回<code>non-string</code>，修改为<code>username</code>就不会了，因为该字段来自AbstractUser类，该类<code>username</code>是不允许为空的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ba7e0e27d3d4d6d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-be3b3883b5f5f337.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后重新运行我们的项目，出现正常画面了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2061d3ec9e5ab80c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>用浏览器请求drf默认会帮你渲染成网页的格式，这是已经api接口样式了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-990cbd763deaa927.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可以点击右上角的GET，选择json就是之前看到的那种：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-35a4d7569490034d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>选择api就是下面这种，这也是默认的样式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2061d3ec9e5ab80c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击旁边的option就会出现接口的描述：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-37ad1cb0e6c8c6c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f7044ea7916a6710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个接口的描述我们可以自己定义，上面就是那个<code>description</code>。它不仅能解析get信息，你通过post提交的数据也能进行解析。render和parse对于我们爬虫人员而言非常熟悉，分别代表渲染和解析。值得注意的是，因为我们这里是序列化Goods，因此我们serializers的字段要和goods app models.py里面的字段保持一致，这个和Django form里面对于form和model的要求也是一样的。</p><p>我们尝试添加一个不一样的字段<code>goods_front_image</code>，看看返回什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-69e331ae203d4140.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你知道的我们在数据库里面并没有添加media这个前缀，但是drf却给我们自动添加了，这是为什么呢？那是因为我们在setting.py里面配置了<code>MEDIA_URL</code>，所以drf根据这个就会自动添前缀。</p><p>我们可以对drf进行登入，登出操作，那是因为我们在urls.py里面配置了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Django rest_framework的路由配置</span><br><span class="line">  path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;))</span><br></pre></td></tr></table></figure></p><p>既然这个<code>serializers</code>类似于<code>form</code>，那么我们是否可以进行类似的保存到数据库的操作呢？答案是可以的。所以我们开始按照官方文档来进行配置：打开goods\views.py文件，修改为以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line">from rest_framework import status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List all snippets, or create a new snippet.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, format=None):</span><br><span class="line">        goods = Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer = GoodsSerializer(goods, many=True)  # 因为返回的是列表，所以我们需要指定many为True</span><br><span class="line">        return Response(goods_serializer.data)</span><br><span class="line"></span><br><span class="line">    def post(self, request, format=None):   # 这里的request不再是Django的request，而是对其进行了更深的封装</span><br><span class="line">        serializer = GoodsSerializer(data=request.data)</span><br><span class="line">        if serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            return Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure></p><p>是不是觉得上面的代码很眼熟？是的这个serializer 和form实在是太像了，连验证都差不多一样。有了drf之后，不需要对用户的请求方法method进行判断，我们直接使用<code>data=request.data</code>就可以取出数据，然后放到data里面，是不是很方便呢。然后调用serializer的save方法对数据进行保存。</p><p>接下来就是完善我们的goods\serializers.py文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: serializers.py.py</span><br><span class="line"># @time: 2018/10/3 20:09</span><br><span class="line"># 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同</span><br><span class="line"></span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField(required=True, max_length=100)</span><br><span class="line">    click_num = serializers.IntegerField(default=0)</span><br><span class="line">    goods_front_image = serializers.ImageField()</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Create and return a new `Snippet` instance, given the validated data.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return Goods.objects.create(**validated_data)</span><br></pre></td></tr></table></figure></p><p>这里调用serializer的create方法，用于把需要验证的字段创建一个验证对象。</p><p>说到这里你可能会问，Django的form为了避免我们重复的书写验证字段所以提供了一个Modelform。那么这里的serializer也是需要验证的，那么它是否也提供了一个类似于Modelform的Modelserializer呢？答案是有的！<a href="https://www.django-rest-framework.org/tutorial/1-serialization/#using-modelserializers" target="_blank" rel="noopener">Using ModelSerializers</a>这里就有介绍。</p><p>我们修改serilalizers.py文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure><p>注意一下，此处的外键（category）会被序列化为id，如果我们想要获取这个外键的全部信息并在此处进行显示呢，那该怎么办？我们可以通过嵌套的方式来实现这个功能，重新修改serilalizers.py文件为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from goods.models import Goods, GoodsCategory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    category = CategorySerializer()</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure></p><p>然后刷新一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ee5de22ef370ea86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你看，所有的信息都被显示出来了。</p><p>至此，我们本篇关于商品列表页面的配置上篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们将开始进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。&lt;/p&gt;
&lt;h2 id=&quot;基于类来配置
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（六）：restful api以及Vue的结构介绍</title>
    <link href="http://licheetools.github.io/2018/04/20/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Arestful-api%E4%BB%A5%E5%8F%8AVue%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
    <id>http://licheetools.github.io/2018/04/20/采用Vue-Django-Restful-framework构建生鲜电商项目（六）：restful-api以及Vue的结构介绍/</id>
    <published>2018-04-20T08:55:36.000Z</published>
    <updated>2019-04-15T08:56:22.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始介绍restful api以及Vue的结构。</p><h2 id="为什么要前后端分离"><a href="#为什么要前后端分离" class="headerlink" title="为什么要前后端分离"></a>为什么要前后端分离</h2><p><strong>1、pc,app,pad多端适应</strong><br>随着技术的发展，我们所开发的网站不仅仅是适配于PC端了，更需要进行多个服务端的匹配，目前来说后端模板渲染的方式非常适合pc端，但是对于app，pad端却是不友好的。</p><p><strong>2、SPA开发模式开始流行</strong><br>所谓的SPA开发模式，其实就是单页面应用。单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。现在最流行的方式就是前后端分离，由前端提供页面，后端提供接口。</p><p><strong>3、前后端开发的职责分不清</strong><br>正如我们在前面说过，其实Django的模板到底由谁来写？谁来拆分这都是值得大家头疼的事。我上次我下载了几百套的织梦cms模板，想用Django来搭建网站，发现里面嵌入了太多的php，java ，Ajax。。。代码，ajax，java代码还能理解一点，但是php我就不会了，所以这个问题就显得特别重要。</p><p><strong>4、开发效率问题，前后端互相等待</strong><br>前后端分离的坏处就是对方及时看不到项目的进展，很容易出现你等我，我等他的尴尬刚 局面。</p><p><strong>5、前端一直配合着后端，能力受限</strong><br>就拿Django来说吧，后端觉得某个字段起的名字有问题，想要修改就必须及时通知前端人员，这样前端一直配合着后端，要求高水平的能力。</p><p><strong>6、后台开发语言和模板高度耦合，导致开发语言依赖严重</strong><br>其实很多开发语言都有属于自己的Web框架，Python就有Django，Flask，Tornado，而在java Web里面就有Spring，Struts，Hibernate。这些开发语言和模板高度耦合，使得你如果不会Python语法就不会使用Django，不会Java就不会Spring。</p><p>但是前后端尽管很流弊，但也有缺点。</p><h2 id="前后端分离缺点"><a href="#前后端分离缺点" class="headerlink" title="前后端分离缺点"></a>前后端分离缺点</h2><ul><li>前后端学习的门槛增加，后端使用if else来显示数据的语法其实完全可以交给前端</li><li>数据依赖导致文档重要性增加，如果没有文档，那么前端人员不知道后端的业务逻辑</li><li>前端工作量加大（大部分数据显示的工作都由他来负责）</li><li>seo的难度加大，爬虫请求不到数据（有些是ajax请求，爬虫只会爬到静态html代码）</li><li>后端开发模式迁移增加成本</li></ul><h2 id="restful-api的介绍"><a href="#restful-api的介绍" class="headerlink" title="restful api的介绍"></a>restful api的介绍</h2><p>restful api 目前是前后端分离的最佳实践(它只是一套标准，建议性质的，类似于PEP8的规范，你可以不遵循它，但是为了更好的开发与他人交流最好还是遵循它)</p><h2 id="restful-api的特点"><a href="#restful-api的特点" class="headerlink" title="restful api的特点"></a>restful api的特点</h2><p>1、轻量，直接通过http，不需要额外的协议，通过post/get/put/delete进行操作；’<br>2、面向资源，一目了然，具有自解释性。<br>看看这篇面向资源的架构文章：<a href="https://blog.csdn.net/u012068294/article/details/78519058" target="_blank" rel="noopener">面向资源的架构</a>。资源是名词，post/get/put/delete等是动词，那么如何关联呢？这就是restful了。推荐两篇文章：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a>，这篇写的比较久，注重于概念，但是比较容易理解。<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>，这篇注重于实践，非常详细。</p><h2 id="Vue的介绍"><a href="#Vue的介绍" class="headerlink" title="Vue的介绍"></a>Vue的介绍</h2><h3 id="Vue基本概念"><a href="#Vue基本概念" class="headerlink" title="Vue基本概念"></a>Vue基本概念</h3><p>1、前端工程化： <a href="https://www.cnblogs.com/fsyz/p/8274727.html" target="_blank" rel="noopener">浅谈什么是前端工程化</a><br>2、数据双向绑定：<a href="https://blog.csdn.net/zhang5207892/article/details/78389121" target="_blank" rel="noopener">怎么理解vue的数据双向绑定</a><br>3、组件化开发：<a href="https://blog.csdn.net/lican_2017/article/details/79365573" target="_blank" rel="noopener">什么叫组件化开发</a></p><p>MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。当然这些事 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。说白了就是:数据驱动view，view又改变数据。</p><p>数据双向绑定，你可以点击<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC" target="_blank" rel="noopener">表单输入绑定</a>，体会一下它的用途，都不需要你另写js代码来进行实现。</p><h3 id="Vue开发中的几个概念"><a href="#Vue开发中的几个概念" class="headerlink" title="Vue开发中的几个概念"></a>Vue开发中的几个概念</h3><p><strong>1、webpack</strong><br>它只是一个js工具，用于es6到es5代码转换，记住是vue不能被浏览器识别的，浏览器只能识别老三样：HTML，CSS，JAVASCRIPT。所以webpack就是把我们的代码转换成这种浏览器可以识别的代码。你可以打开我们的项目，F12查看源码，发现里面的东西很少，那是因为我们的代码都在这个js文件里面了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-853feabd911b0fae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、Vue全家桶（vue，vuex，vue_router，axios）</strong><br>vue（框架），vuex（组件通讯），vue_router（单页面的路由），axios（Vue里面类似于ajax。因为是前端框架肯定需要发送ajax请求，但是我们不推荐直接来操作dom而是通过jQuery来进行操作。不过如果我们只需要一个函数，但也需要把整个JQuery包导入，而我们又只用ajax.。鉴于此，官方推荐我们使用axios，这个就不需要了，用到就导入那个）</p><p><strong>3、ES6, babel</strong><br>Es6语法是将来的趋势，但是目前浏览器还都只是ES5，所以需要用babel将Es6转换为Es5。</p><h2 id="vue项目的目录结构"><a href="#vue项目的目录结构" class="headerlink" title="vue项目的目录结构"></a>vue项目的目录结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5fbdf75e77ee8663.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Mock数据（Mock.js生成随机数据,拦截Ajax 请求 ，前后端分离，让前端攻城师独立于后端进行开发：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">mock.js官网</a>）;node_modules这个就是我们利用node.js启动必备的文件；src则是一些资源包。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-514b00e332b667c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>api：我们请求网络的api，所有组件的api都是在这里进行配置的；<br>axios：我们在里面配置了全局拦截；<br>components：这个是一些基础组件；<br>router ：路由；<br>static：全局的静态文件；<br>store：一些Js文件；<br>style：一些css样式表单；<br>views：所有的组件；</p><p>接下来我们就看一下所有的组件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-771f78d9369f1260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>差不多就是这些：导航栏组件；轮播图组件；新品组件；分页组件；个人中心组件；结算组。。。如果想在浏览器里面快速知道页面是由哪些vue的组件构成的，可以下载安装官方的插件:<strong>vuejs devtools</strong>，具体安装方法在这里：<a href="https://www.cnblogs.com/alice-fee/p/8038367.html" target="_blank" rel="noopener">谷歌浏览器chrome的vuejs devtools 插件的安装</a>。</p><p>至此，我们本篇关于restful api以及Vue结构的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们将开始介绍restful api以及Vue的结构。&lt;/p&gt;
&lt;h2 id=&quot;为什么要前后端分离&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入</title>
    <link href="http://licheetools.github.io/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Axadmin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5/"/>
    <id>http://licheetools.github.io/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入/</id>
    <published>2018-04-18T09:54:15.000Z</published>
    <updated>2019-04-15T08:54:56.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始介绍xadmin的后台管理系统以及项目资源的导入。</p><h2 id="新建adminx-py文件"><a href="#新建adminx-py文件" class="headerlink" title="新建adminx.py文件"></a>新建adminx.py文件</h2><p>在各个app下面新建adminx.py文件，我们开始进行配置。</p><h3 id="在goods下面的adminx-py代码内容"><a href="#在goods下面的adminx-py代码内容" class="headerlink" title="在goods下面的adminx.py代码内容"></a>在goods下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import Goods, GoodsCategory, GoodsImage, GoodsCategoryBrand, Banner, HotSearchWords</span><br><span class="line">from .models import IndexAd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsAdmin(object):</span><br><span class="line">    list_display = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                    &quot;shop_price&quot;, &quot;goods_brief&quot;, &quot;goods_desc&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;]</span><br><span class="line">    search_fields = [&apos;name&apos;, ]</span><br><span class="line">    list_editable = [&quot;is_hot&quot;, ]</span><br><span class="line">    list_filter = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                   &quot;shop_price&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;, &quot;category__name&quot;]</span><br><span class="line">    style_fields = &#123;&quot;goods_desc&quot;: &quot;ueditor&quot;&#125;</span><br><span class="line"></span><br><span class="line">    class GoodsImagesInline(object):</span><br><span class="line">        model = GoodsImage</span><br><span class="line">        exclude = [&quot;add_time&quot;]</span><br><span class="line">        extra = 1</span><br><span class="line">        style = &apos;tab&apos;</span><br><span class="line"></span><br><span class="line">    inlines = [GoodsImagesInline]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsCategoryAdmin(object):</span><br><span class="line">    list_display = [&quot;name&quot;, &quot;category_type&quot;, &quot;parent_category&quot;, &quot;add_time&quot;]</span><br><span class="line">    list_filter = [&quot;category_type&quot;, &quot;parent_category&quot;, &quot;name&quot;]</span><br><span class="line">    search_fields = [&apos;name&apos;, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsBrandAdmin(object):</span><br><span class="line">    list_display = [&quot;category&quot;, &quot;image&quot;, &quot;name&quot;, &quot;desc&quot;]</span><br><span class="line"></span><br><span class="line">    def get_context(self):</span><br><span class="line">        context = super(GoodsBrandAdmin, self).get_context()</span><br><span class="line">        if &apos;form&apos; in context:</span><br><span class="line">            context[&apos;form&apos;].fields[&apos;category&apos;].queryset = GoodsCategory.objects.filter(category_type=1)</span><br><span class="line">        return context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BannerGoodsAdmin(object):</span><br><span class="line">    list_display = [&quot;goods&quot;, &quot;image&quot;, &quot;index&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HotSearchAdmin(object):</span><br><span class="line">    list_display = [&quot;keywords&quot;, &quot;index&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class IndexAdAdmin(object):</span><br><span class="line">    list_display = [&quot;category&quot;, &quot;goods&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(Goods, GoodsAdmin)</span><br><span class="line">xadmin.site.register(GoodsCategory, GoodsCategoryAdmin)</span><br><span class="line">xadmin.site.register(Banner, BannerGoodsAdmin)</span><br><span class="line">xadmin.site.register(GoodsCategoryBrand, GoodsBrandAdmin)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(HotSearchWords, HotSearchAdmin)</span><br><span class="line">xadmin.site.register(IndexAd, IndexAdAdmin)</span><br></pre></td></tr></table></figure><h3 id="在trade下面的adminx-py代码内容"><a href="#在trade下面的adminx-py代码内容" class="headerlink" title="在trade下面的adminx.py代码内容"></a>在trade下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import ShoppingCart, OrderInfo, OrderGoods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShoppingCartAdmin(object):</span><br><span class="line">    list_display = [&quot;user&quot;, &quot;goods&quot;, &quot;nums&quot;, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class OrderInfoAdmin(object):</span><br><span class="line">    list_display = [&quot;user&quot;, &quot;order_sn&quot;,  &quot;trade_no&quot;, &quot;pay_status&quot;, &quot;post_script&quot;, &quot;order_mount&quot;,</span><br><span class="line">                    &quot;order_mount&quot;, &quot;pay_time&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line">    class OrderGoodsInline(object):</span><br><span class="line">        model = OrderGoods</span><br><span class="line">        exclude = [&apos;add_time&apos;, ]</span><br><span class="line">        extra = 1</span><br><span class="line">        style = &apos;tab&apos;</span><br><span class="line"></span><br><span class="line">    inlines = [OrderGoodsInline, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(ShoppingCart, ShoppingCartAdmin)</span><br><span class="line">xadmin.site.register(OrderInfo, OrderInfoAdmin)</span><br></pre></td></tr></table></figure><h3 id="在users下面的adminx-py代码内容"><a href="#在users下面的adminx-py代码内容" class="headerlink" title="在users下面的adminx.py代码内容"></a>在users下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from xadmin import views</span><br><span class="line">from .models import VerifyCode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BaseSetting(object):</span><br><span class="line">    enable_themes = True</span><br><span class="line">    use_bootswatch = True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &quot;慕海生鲜后台&quot;</span><br><span class="line">    site_footer = &quot;vueshop&quot;</span><br><span class="line">    # menu_style = &quot;accordion&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VerifyCodeAdmin(object):</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;mobile&apos;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(VerifyCode, VerifyCodeAdmin)</span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure><h3 id="在user-operation下面的adminx-py代码内容"><a href="#在user-operation下面的adminx-py代码内容" class="headerlink" title="在user_operation下面的adminx.py代码内容"></a>在user_operation下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import UserFav, UserLeavingMessage, UserAddress</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;goods&apos;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserLeavingMessageAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;message_type&apos;, &quot;message&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAddressAdmin(object):</span><br><span class="line">    list_display = [&quot;signer_name&quot;, &quot;signer_mobile&quot;, &quot;district&quot;, &quot;address&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserFav, UserFavAdmin)</span><br><span class="line">xadmin.site.register(UserAddress, UserAddressAdmin)</span><br><span class="line">xadmin.site.register(UserLeavingMessage, UserLeavingMessageAdmin)</span><br></pre></td></tr></table></figure><p>然后安装依赖库<code>xlwt</code>和<code>xlsxwriter</code>这两个库（用于后面数据的excel导出）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xlwt xlsxwriter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后运行我们的makemigrations和migrate，生成我们xadmin的一些数据表。</p><p>接下来创建超级管理员：<code>createsuperuser</code>然后输入用户名，邮箱，密码回车即可。</p><p>然后运行我们的项目，在浏览器地址栏中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/xadmin</span><br></pre></td></tr></table></figure></p><p>用刚才的账号和密码进行登录，登录成功就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-064a36d313f60a6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后你可以对其进行汉化和自定义配置，可以参考这些文章：<br><a href="https://www.jianshu.com/p/f92c7d5897aa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</a>和<a href="https://www.jianshu.com/p/586aea424287" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置</a>以及<a href="https://www.jianshu.com/p/b0a9a82adb5f" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发</a>这三篇文章。</p><p>记得配置富文本的路径，打开vueshop\urls.py文件，我们新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include</span><br><span class="line"></span><br><span class="line">path(&apos;ueditor/&apos;, include(&apos;DjangoUeditor.urls&apos;)),</span><br></pre></td></tr></table></figure></p><p>最后我的配置截图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efa679a18cb7995a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="资源的导入"><a href="#资源的导入" class="headerlink" title="资源的导入"></a>资源的导入</h2><p>在media下面新建三个文件夹：banner，goods，message，分别与下图中的path对应：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2529bb9c4e277fd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>只需新建banner文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-772aed2fe73c9b2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建brands文件夹，再在里面新建images文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2db954d0cac201a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建goods文件夹，再在里面新建images文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9be84396fe2bbb58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建message文件夹，再在里面新建images文件夹。</p><p>有人要问建这么多文件夹干嘛，其实我们这是模拟了后台数据库的添加数据操作，如果你觉得太累了，可以不这么干，直接在后台添加数据，实际上比我们这还累。。。</p><p>接着在db_tools文件夹下面新建一个data的文件夹，在里面导入2个文件：<code>category_data.py</code>和<code>product_data.py</code>。然后直接在db_tools文件夹下面新建两个文件夹：<code>import_category_data.py</code>和<code>import_goods_data.py</code>。</p><p>接下来我们给<code>import_category_data.py</code>文件写入代码(独立使用django的model)，其作用就是把数据直接保存到数据库里面。然后给’import_goods_data.py’文件写入代码(独立使用django的model)其作用也是把数据直接保存到数据库里面。<strong>由于版权问题，这里就不贴出代码了</strong>。</p><p>运行完发现缺少图片上传地址：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eb9250ccfd28712a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以我们需要在settings.py里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置上传文件，图片访问路径</span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</span><br></pre></td></tr></table></figure></p><p>还没完，我们需要进行url的配置，打开vueshop\urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.views.static import serve</span><br><span class="line">from django.urls import re_path</span><br><span class="line">from vueshop.settings import MEDIA_ROOT</span><br><span class="line"></span><br><span class="line"># 配置文件上传的访问处理url</span><br><span class="line">   re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的项目，发现图片已经成功显示了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-dbf10b0216770394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此我们本篇关于xadmin的后台管理系统以及项目资源导入的相关介绍就到此为止了，感谢你的赏阅！下一篇我们开始介绍restful api 相关的知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇我们将开始介绍xadmin的后台管理系统以及项目资源的导入。&lt;/p&gt;
&lt;h2 id=&quot;新建adminx-py文件&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（四）：数据库字段的定义(下)</title>
    <link href="http://licheetools.github.io/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/"/>
    <id>http://licheetools.github.io/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（四）：数据库字段的定义-下/</id>
    <published>2018-04-18T09:52:42.000Z</published>
    <updated>2019-04-15T08:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于user应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。<strong>因为我们这个项目是前后端分离的，所以一些数据库字段的名称请不要随意修改，否则就会出现运行错误！</strong></p><h2 id="goods-app的配置"><a href="#goods-app的配置" class="headerlink" title="goods app的配置"></a>goods app的配置</h2><p>前面说过全部商品分类里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-98927403f686963c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在教育网站中，我们的从属关系是通过外键来完成的。如果按照那样的思维，我们这里因为有三个相关的表，是否意味我们必须要建三个model，然后每个model之间利用从属的外键关系串起来，而且我们这样我们的目录就是写死的，只能是三级目录，但是我们如果要去做一个四级，五级，甚至无限级别的分类即可扩展目录时，这工作量是不是太大了呢？而且几乎是不可能完成的任务，我们考虑有没有其他方法呢？答案是有的。我们可以使用一张数据表来完成这样的任务，就是根据级别进行前台显示。</p><p>打开我们的goods/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class GoodsCategory(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品级别分类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    CATEGORY_TYPE = (</span><br><span class="line">        (1, &quot;一级类目&quot;),</span><br><span class="line">        (2, &quot;二级类目&quot;),</span><br><span class="line">        (3, &quot;三级类目&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别名&quot;, help_text=&quot;类别名&quot;)</span><br><span class="line">    code = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别code&quot;, help_text=&quot;类别code&quot;)</span><br><span class="line">    desc = models.TextField(default=&quot;&quot;, verbose_name=&quot;类别描述&quot;, help_text=&quot;类别描述&quot;)</span><br><span class="line">    category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=&quot;类目级别&quot;, help_text=&quot;类目级别&quot;)     # 设置目录树的级别</span><br><span class="line">    parent_category = models.ForeignKey(&quot;self&quot;, null=True, blank=True, verbose_name=&quot;父类目级别&quot;, help_text=&quot;父目录&quot;,</span><br><span class="line">                                        related_name=&quot;sub_cat&quot;)</span><br><span class="line">    is_tab = models.BooleanField(default=False, verbose_name=&quot;是否导航&quot;, help_text=&quot;是否导航&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;商品类别&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p><strong>注意一下：</strong> help_text: 在后面生成接口测试文档时会用到，而related_name: 进行查询的时候会用到，这里那个self参数就是自己跟自己进行外键关联，因为目录有的时候就是这样。</p><p>不知道你注意没有，在上面一行的导航栏在左侧都会有一个比较醒目的图片，这里展示了它的部分品牌商标：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b44e6f558506c121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里我们需要重新定义一个数据表，用于存放这个，接着刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class GoodsCategoryBrand(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    导航栏左侧品牌图片</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=&apos;brands&apos;, null=True, blank=True, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;品牌名&quot;, help_text=&quot;品牌名&quot;)</span><br><span class="line">    desc = models.TextField(max_length=200, default=&quot;&quot;, verbose_name=&quot;品牌描述&quot;, help_text=&quot;品牌描述&quot;)</span><br><span class="line">    image = models.ImageField(max_length=200, upload_to=&quot;brands/images&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;品牌信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        db_table = &quot;goods_goodsbrand&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>然后就是商品信息了，不过在此之前，我们需要把在线教育网站用到的<strong>DjangoUeditor</strong>和<strong>xadmin</strong>拷贝进我们的extra_app里面，然后还要把这些都注册到我们的setting里面去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">    &apos;goods&apos;,</span><br><span class="line">    &apos;trade&apos;,</span><br><span class="line">    &apos;user_operation&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>现在开始书写商品的信息代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from extra_apps.DjangoUeditor.models import UEditorField</span><br><span class="line"></span><br><span class="line">class Goods(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    goods_sn = models.CharField(max_length=50, default=&quot;&quot;, verbose_name=&quot;商品唯一编号&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;商品名&quot;)</span><br><span class="line">    click_num = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;)</span><br><span class="line">    sold_num = models.IntegerField(default=0, verbose_name=&quot;商品销售量&quot;)</span><br><span class="line">    fav_num = models.IntegerField(default=0, verbose_name=&quot;收藏数&quot;)</span><br><span class="line">    goods_num = models.IntegerField(default=0, verbose_name=&quot;库存数&quot;)</span><br><span class="line">    market_price = models.FloatField(default=0, verbose_name=&quot;市场价格&quot;)</span><br><span class="line">    shop_price = models.FloatField(default=0, verbose_name=&quot;本店价格&quot;)</span><br><span class="line">    goods_brief = models.TextField(max_length=500, verbose_name=&quot;商品简短描述&quot;)</span><br><span class="line">    goods_desc = UEditorField(verbose_name=&quot;内容&quot;, imagePath=&quot;goods/images/&quot;, width=1000, height=300,</span><br><span class="line">                              filePath=&quot;goods/files/&quot;, default=&apos;&apos;)</span><br><span class="line">    ship_free = models.BooleanField(default=True, verbose_name=&quot;是否承担运费&quot;)</span><br><span class="line">    goods_front_image = models.ImageField(upload_to=&quot;goods/images/&quot;, null=True, blank=True, verbose_name=&quot;封面图&quot;)</span><br><span class="line">    is_new = models.BooleanField(default=False, verbose_name=&quot;是否新品&quot;)</span><br><span class="line">    is_hot = models.BooleanField(default=False, verbose_name=&quot;是否热销&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;商品信息&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>前面也说过商品详情那块有轮播图，这个我们可以直接在商品信息这个表里面添加一个字段，当然也可以另建一个专门的表，后面这种似乎管理起来更加的方便。所以我们继续书写代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class GoodsImage(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品详情页面轮播图</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, related_name=&quot;images&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&quot;&quot;, verbose_name=&quot;图片&quot;, null=True, blank=True)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;商品轮播图&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><p>在首页我们看见也有一些轮播图，而这些轮播图是大图，和在商品详情页看到的不一样，所以我们需要单独创建一张表，用于管理它。继续刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Banner(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品首页轮播图（大图）</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&apos;banner&apos;, verbose_name=&quot;轮播图片&quot;)</span><br><span class="line">    index = models.IntegerField(default=0, verbose_name=&quot;轮播顺序&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;首页轮播图&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><p>不知道你注意没有，在搜索栏的下面有一行提示语（热搜榜），这个我们也要单独进行管理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class HotSearchWords(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    搜索框下面的热搜榜</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    keywords = models.CharField(default=&quot;&quot;, max_length=20, verbose_name=&quot;热搜词&quot;)</span><br><span class="line">    index = models.IntegerField(default=0, verbose_name=&quot;排序&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;热搜词&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.keywords</span><br></pre></td></tr></table></figure></p><p>还有首页一个商品类别广告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class IndexAd(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   首页商品类别广告</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, on_delete=models.CASCADE, related_name=&apos;category&apos;, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, on_delete=models.CASCADE, related_name=&apos;goods&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;首页商品类别广告&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><h2 id="trade-app的配置"><a href="#trade-app的配置" class="headerlink" title="trade app的配置"></a>trade app的配置</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8884c4ea499deec6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在进行配置之前要说明几点：<strong>1、在一个订单里面，同一条商品信息，不会出现多条记录，而是以数量来进行统计。（图上的信息就是错误的，我说了，如果是在不同的订单里面却是可以的）；2、一旦购物车点击结算就会清空购物车，会以订单详情来展示商品信息。</strong>你在淘宝或者其他电商平台进行购物的时候，其实这些你就无意中知道了，但是从来没有说出来，现在看到这里是不是觉得就是这样的呢。</p><p>现在我们开始进行购物车这个数据表的配置，打开trade/models.py文件，我们知道这个表肯定会与我们User表有关联（不要问我为什么，因为东西是不可能自己飞到购物车里面去的），我们在教育网站里面是采用这样来进行User信息的导入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from users.models import UserProfile</span><br><span class="line"></span><br><span class="line">User = UserProfile()</span><br></pre></td></tr></table></figure></p><p>这样做的前提是你已经知道这个UserProfile放那个位置了，假如别人不知道呢，那该怎么办，这时候我们就要查看源码了。还记得我们之前在settings.py里面在INSTALLED_APPS的下面新增的一行代码么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL = &apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><p>这才是我们这个UserProfile的注册位置，我们真正调用的目录在这里。那么如何调用呢？使用下面的命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br></pre></td></tr></table></figure></p><p>我们把光标放在get_user_model，按住Ctrl然后点击鼠标左键，直接进入get_user_model的源代码函数，我们发现其实这个函数才是直接调用了这个<code>AUTH_USER_MODEL</code>.<br><img src="https://upload-images.jianshu.io/upload_images/8964398-930c2329b4c1c129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>开始写我们购物车的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">User = get_user_model()</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShoppingCart(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    购物车</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    nums = models.IntegerField(default=0, verbose_name=&quot;购买数量&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;购物车&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (&quot;user&quot;, &quot;goods&quot;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;%s(%d)&quot;.format(self.goods.name, self.nums)</span><br></pre></td></tr></table></figure></p><p>接下来是订单的创建，我们知道订单有不同的状态，像创建交易，成功，待支付等，所以需要有选择的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class OrderInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    ORDER_STATUS = (</span><br><span class="line">        (&quot;TRADE_SUCCESS&quot;, &quot;成功&quot;),</span><br><span class="line">        (&quot;TRADE_CLOSED&quot;, &quot;超时关闭&quot;),</span><br><span class="line">        (&quot;WAIT_BUYER_PAY&quot;, &quot;交易创建&quot;),</span><br><span class="line">        (&quot;TRADE_FINISHED&quot;, &quot;交易结束&quot;),</span><br><span class="line">        (&quot;paying&quot;, &quot;待支付&quot;),</span><br><span class="line">    )</span><br><span class="line">    PAY_TYPE = (</span><br><span class="line">        (&quot;alipay&quot;, &quot;支付宝&quot;),</span><br><span class="line">        (&quot;wechat&quot;, &quot;微信&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    order_sn = models.CharField(max_length=30, null=True, blank=True, unique=True, verbose_name=&quot;订单号&quot;)   # 订单号唯一</span><br><span class="line">    nonce_str = models.CharField(max_length=50, null=True, blank=True, unique=True, verbose_name=&quot;随机加密串&quot;)   # 微信支付可能会用到</span><br><span class="line">    trade_no = models.CharField(max_length=100, unique=True, null=True, blank=True, verbose_name=&quot;交易号&quot;)   # 交易号也是唯一的，用于支付宝与本系统进行关联</span><br><span class="line">    pay_status = models.CharField(choices=ORDER_STATUS, default=&quot;paying&quot;, max_length=30, verbose_name=&quot;订单状态&quot;)</span><br><span class="line">    pay_type = models.CharField(choices=PAY_TYPE, default=&quot;alipay&quot;, max_length=10, verbose_name=&quot;支付类型&quot;)</span><br><span class="line">    post_script = models.CharField(max_length=200, verbose_name=&quot;订单留言&quot;)</span><br><span class="line">    order_mount = models.FloatField(default=0.0, verbose_name=&quot;订单金额&quot;)</span><br><span class="line">    pay_time = models.DateTimeField(null=True, blank=True, verbose_name=&quot;支付时间&quot;)</span><br><span class="line"></span><br><span class="line">    # 订单上面用户的基本信息</span><br><span class="line">    address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;收货地址&quot;)</span><br><span class="line">    signer_name = models.CharField(max_length=20, default=&quot;&quot;, verbose_name=&quot;签收人&quot;)</span><br><span class="line">    singer_mobile = models.CharField(max_length=11, verbose_name=&quot;联系电话&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;订单信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.order_sn)</span><br></pre></td></tr></table></figure></p><p>接下来就是为订单里面的商品单独创建一个数据表了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class OrderGoods(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单的商品详情</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    order = models.ForeignKey(OrderInfo, verbose_name=&quot;订单信息&quot;, related_name=&quot;goods&quot;)    # 一个订单里面可以有多个商品信息</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    goods_num = models.IntegerField(default=0, verbose_name=&quot;商品数量&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;订单内的商品&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.order.order_sn)</span><br></pre></td></tr></table></figure></p><h3 id="user-operation-app的配置"><a href="#user-operation-app的配置" class="headerlink" title="user_operation app的配置"></a>user_operation app的配置</h3><p>现在我们进行用户操作这个app的配置，具体包括：商品收藏，添加收货信息，用户留言等。打开user_operation\modles.py文件，我们新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"># Create your models here.</span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFav(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户收藏</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, help_text=&quot;商品id&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户收藏&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (&quot;user&quot;, &quot;goods&quot;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.user.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserLeavingMessage(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户留言</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    MESSAGE_CHOICES = (</span><br><span class="line">        (1, &quot;留言&quot;),</span><br><span class="line">        (2, &quot;投诉&quot;),</span><br><span class="line">        (3, &quot;询问&quot;),</span><br><span class="line">        (4, &quot;售后&quot;),</span><br><span class="line">        (5, &quot;求购&quot;)</span><br><span class="line">    )</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    message_type = models.IntegerField(default=1, choices=MESSAGE_CHOICES, verbose_name=&quot;留言类型&quot;,</span><br><span class="line">                                      help_text=&quot;留言类型: 1(留言),2(投诉),3(询问),4(售后),5(求购)&quot;)    # 这里不要新建一个为type的字段，这是Python内置的函数</span><br><span class="line">    subject = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;主题&quot;)</span><br><span class="line">    message = models.TextField(default=&quot;&quot;, verbose_name=&quot;留言内容&quot;, help_text=&quot;留言内容&quot;)</span><br><span class="line">    file = models.FileField(upload_to=&quot;message/images/&quot;, verbose_name=&quot;上传的文件&quot;, help_text=&quot;上传的文件&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户留言&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.subject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAddress(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户收货地址</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    province = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;省份&quot;)</span><br><span class="line">    city = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;城市&quot;)</span><br><span class="line">    district = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;区域&quot;)</span><br><span class="line">    address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;详细地址&quot;)</span><br><span class="line">    signer_name = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;签收人&quot;)</span><br><span class="line">    signer_mobile = models.CharField(max_length=11, default=&quot;&quot;, verbose_name=&quot;电话&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;收货地址&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.address</span><br></pre></td></tr></table></figure></p><p>这样到目前为止，我们的models都设计完了，没有考虑到的我们将在后续的开发中进行添加。接下来我们说一下migrations原理及表的生成。</p><h2 id="migrations原理及表的生成"><a href="#migrations原理及表的生成" class="headerlink" title="migrations原理及表的生成"></a>migrations原理及表的生成</h2><p>在这之前，请确保我们把app都添加到了setting.py里面，注意名字不要写错了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-26eab3e72af7ceb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们运行run manage.py Task出现了下面的错误：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-16115a394adbb57b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们的users app注册了两个，所以说不唯一：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-109189113e8ea0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们按照Django自带的那种方式修改我们的app的引入方式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-adbe360d082307b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>实际上每个项目都有这个，我们修改settings.py的引入方式如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;goods.apps.GoodsConfig&apos;,</span><br><span class="line">    &apos;trade.apps.TradeConfig&apos;,</span><br><span class="line">    &apos;user_operation.apps.UserOperationConfig&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>接着我们再来运行我们的run manage.py Task，发现出现了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> from future.utils import iteritems</span><br><span class="line">ModuleNotFoundError: No module named &apos;future&apos;</span><br></pre></td></tr></table></figure></p><p>说明我们缺少future这个库，我们使用下面的命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install future -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后再来运行我们的run manage.py Task，发现又出现了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> related_name=&quot;sub_cat&quot;)</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos;</span><br></pre></td></tr></table></figure></p><p>相信看过前面那个教育网站的童鞋都知道，这个问题出现的原因：缺少级联删除on_delete。<code>on_delete=models.CASCADE</code>是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示） 具体可以阅读这篇文章：<a href="https://www.jianshu.com/p/bfc17faf1ace" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)</a>。<br>就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=&quot;用户&quot;)</span><br></pre></td></tr></table></figure></p><p>在所有ForeignKey的4个app里面，都添加<code>on_delete=models.CASCADE</code>这个字段。有点多，大家需要慢慢添加，也有简单的方法，开启全局搜索，然后替换也可以。</p><p>接着再来运行我们的run manage.py Task，发现又出现了这样的错误（真是命途多舛。。。）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from crispy_forms.utils import TEMPLATE_PACK</span><br><span class="line">ModuleNotFoundError: No module named &apos;crispy_forms&apos;</span><br></pre></td></tr></table></figure></p><p>又是缺少这个包，我们安装一下，不知道你想起来没，在教育网站我们也遇到过类似的问题，你可以阅读一下：<a href="https://www.jianshu.com/p/f92c7d5897aa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</a><br>解决办法如下：打开settings.py文件，找到里面的INSTALLED_APPS，在后面修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;goods.apps.GoodsConfig&apos;,</span><br><span class="line">    &apos;trade.apps.TradeConfig&apos;,</span><br><span class="line">    &apos;user_operation.apps.UserOperationConfig&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">    &apos;crispy_forms&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后依次按照如下库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br><span class="line">pip install django-formtools==2.1   # 记住一定是2.1的版本，否则会出错</span><br></pre></td></tr></table></figure><p>使用的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>之后会安装一大堆库，我们使用<strong>pip list</strong>命令查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs\vueshop&gt;pip list</span><br><span class="line">Package              Version</span><br><span class="line">-------------------- --------</span><br><span class="line">diff-match-patch     20121119</span><br><span class="line">Django               2.0.1</span><br><span class="line">django-crispy-forms  1.7.2</span><br><span class="line">django-filter        2.0.0</span><br><span class="line">django-formtools     2.1</span><br><span class="line">django-import-export 1.1.0</span><br><span class="line">djangorestframework  3.8.2</span><br><span class="line">et-xmlfile           1.0.1</span><br><span class="line">future               0.16.0</span><br><span class="line">httplib2             0.11.3</span><br><span class="line">jdcal                1.4</span><br><span class="line">Markdown             3.0.1</span><br><span class="line">mysqlclient          1.3.13</span><br><span class="line">odfpy                1.3.6</span><br><span class="line">openpyxl             2.5.8</span><br><span class="line">Pillow               5.3.0</span><br><span class="line">pip                  18.0</span><br><span class="line">pytz                 2018.5</span><br><span class="line">PyYAML               3.13</span><br><span class="line">setuptools           40.4.3</span><br><span class="line">six                  1.11.0</span><br><span class="line">tablib               0.12.1</span><br><span class="line">unicodecsv           0.14.1</span><br><span class="line">wheel                0.32.0</span><br><span class="line">xlrd                 1.1.0</span><br><span class="line">xlwt                 1.3.0</span><br></pre></td></tr></table></figure></p><p>我上面贴了我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）。</p><p>然后再来运行我们的run manage.py Task，发现又出现了这样的错误（是不是很绝望，哈哈哈哈~~~）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;INSTALLED_APPS.&quot; % (module, name)</span><br><span class="line">RuntimeError: Model class django.contrib.admin.models.LogEntry doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS.</span><br></pre></td></tr></table></figure></p><p>看了上面那篇文章，你是不是发现缺少admin了，对因为我们开头没有启用admin，如果你开头启用了就没有这个错误,你只需要在INSTALLED_APPS 里面添加admin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>接着再来运行我们的run manage.py Task，发现终于运行正常，没有错误了。我们不妨在这里把xadmin给导入进来吧，反正后面会用到。打开vueshop/urls.py文件，把urls中默认的admin修改为xadmin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后进行我们数据库的生成和迁移操作，运行：makemigrations和migrate命令。</p><h3 id="makemigrations和migrate介绍"><a href="#makemigrations和migrate介绍" class="headerlink" title="makemigrations和migrate介绍"></a>makemigrations和migrate介绍</h3><p>我们知道数据库的生成和迁移操作有两个命令：<code>makemigrations</code>和<code>migrate</code>。其中<code>makemigrations</code>的作用是生成数据库变动的Py脚本，也就是Python文件，会自动存放在各个app下面默认生成的<code>migrations</code>文件夹里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-780978b5565c1a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们随意打开一个app下面生成的Py脚本，看到里面其实是后面<code>migrate</code>命令将要执行的代码，我们运行<code>migrate appname</code>其实就是在对应的app 下面的migrations文件夹下面查找上面的py脚本，然后运行它，从而达到新建数据表的目的。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-51a004aaf0121581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不信的话，你现在在manage.py Task下面运行<code>migrate</code>，然后发现这个和我们刚才分析的一模一样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a2dcbcec2240084e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有的migrations操作都会被记录到<code>django_migrations</code>这个表里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b16529934918697c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不过这里面有几个坑：<br>1、我们一旦数据库有变动就要使用上述两个命令，否则就会出错；2、我们修改数据库字段不要直接在Navicat里面修改，我们需要通过修改源代码，然后重新运行上述两个命令即可；3、每次数据库的变动都会有记录在<code>django_migrations</code>这个表里面进行追加，运行上述两个命令系统会默认运行这个表里面更新的代码。</p><p>至此我们关于数据库字段的设计的介绍就到此为止了，感谢你的赏阅，下一篇我们将介绍xadmin的后台管理配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于user应用的数据库字段定义的方
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（三）：数据库字段的定义(上)</title>
    <link href="http://licheetools.github.io/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/"/>
    <id>http://licheetools.github.io/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（三）：数据库字段的定义-上/</id>
    <published>2018-04-18T09:46:27.000Z</published>
    <updated>2019-04-15T09:03:55.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们来学习如何安装各种依赖库以及数据库字段的设计，其中数据库字段的定义我们分两篇进行。</p><h2 id="新建虚拟环境"><a href="#新建虚拟环境" class="headerlink" title="新建虚拟环境"></a>新建虚拟环境</h2><p>关于虚拟环境的搭建，前面已经讲得很清楚，这里就直接开始安装了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv vueshop</span><br></pre></td></tr></table></figure></p><p>这样就在<code>F:Envs</code>下面新建了一个名为vueshop的虚拟环境，而且是Python3.6的版本。然后使用<code>pip list</code>查看一下当前的安装列表，如果出现pip的版本是9.x，我们建议你升级一下pip的版本。可以使用<code>pip install --upgrade pip</code>，如果安装不了建议把pip下载到本地，然后进入你的pip里面，执行<code>python setup.py install</code>命令即可。然后再次运行pip list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) C:\Users\lenovo&gt;pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        18.0</span><br><span class="line">setuptools 39.0.1</span><br><span class="line">wheel      0.30.0</span><br><span class="line"></span><br><span class="line">(vueshop) C:\Users\lenovo&gt;</span><br></pre></td></tr></table></figure></p><h3 id="安装django-和-django-rest-framework"><a href="#安装django-和-django-rest-framework" class="headerlink" title="安装django 和 django rest framework"></a>安装django 和 django rest framework</h3><p>点击这里查看<a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">django rest framework官网</a>，我们看到已经支持Django2.0了，所以我们就安装2.0的版本：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d70081c3c064d36d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>使用下面的命令安装djangorestframework:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure></p><p>如果在安装过程中出现这种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrying (Retry(total=4, connect=None, read=None, redirect=None)) </span><br><span class="line">after connection broken</span><br><span class="line">by &apos;ConnectTimeoutError(&lt;pip._vendor.requests.packages.urllib3.connection.</span><br><span class="line">VerifiedHTTPSConnection object at 0x10b058850&gt;, </span><br><span class="line">&apos;Connection to pypi.python.org timed out. (connect timeout=15)&apos;)&apos;:</span><br></pre></td></tr></table></figure></p><p>说明你采用了默认的pypi源(国外的pypi源)，这个很容易出现这种连接超时的问题，所以应当采用国内的镜像源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework -i http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure></p><p>如果还有问题，请阅读我的另一篇文章《使用默认pypi源出现连接超时的解决办法》一文，寻求解决的办法。</p><p>然后使用<code>pip list</code>查看，发现里面没有Django,我们需要自己安装Django，注意要指定Django的版本，因为博主在写这套教程的时候，Django2.1已经发布了，你不指定Django的版本就默认安装了最新版的Django2.1，而djangorestframework目前暂不支持Django2.1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs&gt;pip list</span><br><span class="line">Package             Version</span><br><span class="line">------------------- -------</span><br><span class="line">djangorestframework 3.8.2</span><br><span class="line">pip                 18.0</span><br><span class="line">setuptools          40.4.3</span><br><span class="line">wheel               0.32.0</span><br><span class="line"></span><br><span class="line">(vueshop) F:\Envs&gt;</span><br></pre></td></tr></table></figure></p><p>我们使用下面的命令进行安装Django2.0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0.1 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后安装markdown，django-filter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown       # Markdown support for the browsable API.</span><br><span class="line">pip install django-filter  # Filtering support</span><br></pre></td></tr></table></figure></p><p>如果安装不了，请使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line"></span><br><span class="line">pip install django-filter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后查看list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs&gt;pip list</span><br><span class="line">Package             Version</span><br><span class="line">------------------- -------</span><br><span class="line">Django              2.0.1</span><br><span class="line">django-filter       2.0.0</span><br><span class="line">djangorestframework 3.8.2</span><br><span class="line">Markdown            3.0.1</span><br><span class="line">pip                 18.0</span><br><span class="line">pytz                2018.5</span><br><span class="line">setuptools          40.4.3</span><br><span class="line">wheel               0.32.0</span><br></pre></td></tr></table></figure></p><p>好了，现在我们开始新建Django项目了，记得在用Pycharm新建Django项目的时候，必须要在之前安装Django，否则就新建不了Django项目。</p><h2 id="新建Django项目"><a href="#新建Django项目" class="headerlink" title="新建Django项目"></a>新建Django项目</h2><h3 id="已有虚拟环境"><a href="#已有虚拟环境" class="headerlink" title="已有虚拟环境"></a>已有虚拟环境</h3><p>因为我们之前已经在<code>F:Envs</code>下面创建了一个名为vueshop的虚拟环境，所以这里就选用<code>Existing interpreter</code>即可，不要选用上面那个<strong>New environment</strong>。那个2是项目的存放路径，那个<strong>interpreter</strong>也就是3，用虚拟环境下面的Scripts\python.exe。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9842030d1626ec60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="没有虚拟环境"><a href="#没有虚拟环境" class="headerlink" title="没有虚拟环境"></a>没有虚拟环境</h3><p>在你没有创建自己的虚拟环境的时候，你才使用上面的那个<code>New environment</code>，也要说明一下，那个2是项目的存放路径，3是你利用Pycharm新建的虚拟环境的路径，4则是你使用哪个Python来创建你的虚拟环境（就是说你在这个虚拟环境里面的Python版本将会和这个一模一样，其实就是安装了指定Python版本的虚拟环境而已。）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1399888fc8766697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这两种情况，小白很容易搞混淆，所以需要特别注意。点击确定，就成了这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-49bed352d52dc521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关于上面Django项目的介绍我这里不说了，大家去阅读我的另外一个专题：<strong>《零基础使用Django2.0.1打造在线教育网站》</strong>，下面就是你的虚拟环境。我们后面会查看源码，所以虚拟环境里面的包比较重要：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3aa02165e1ad4e36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的项目，发现没有问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9f3b752f5b4ececc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>我们不使用默认的sqlite数据库，采用MySQL数据库，打开settings.py文件，找到第77行代码：将：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;vueshop&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;xxxx&apos;,  # 密码可以随意设置，我使用xxxx</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下这里的storage_engine必须是InnoDB。尽管mysql的数据库引擎有InnoDB 和Myisam这两种，但是后面用到的第三方登录，它所支持的库只支持innodb ，否则在使用migration时，会出错。关于这两种数据库引擎，大家可以看这篇文章：<a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="noopener">MySQL存储引擎－－MyISAM与InnoDB区别</a>。</p><h3 id="新建数据库vueshop"><a href="#新建数据库vueshop" class="headerlink" title="新建数据库vueshop"></a>新建数据库vueshop</h3><p>打开Navicat，新建数据库vueshop:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-da4f4885247e7cdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="安装-mysqlclient和配置seeting文件"><a href="#安装-mysqlclient和配置seeting文件" class="headerlink" title="安装 mysqlclient和配置seeting文件"></a>安装 mysqlclient和配置seeting文件</h3><p>点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</span><br><span class="line">Did you install mysqlclient?</span><br></pre></td></tr></table></figure></p><p>上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。</p><p>你可以在Pycharm里面进行安装，但这种很容易出错。最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">mysql-python</a>，点击这个网站，然后按住<code>Ctrl+F</code>键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5feb1fccdd1cf004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！<br>然后把mysqlclient放在我们的虚拟环境下面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-589b580e1d9e8ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在虚拟环境中安装mysqlclient，如图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs\vueshop&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Processing f:\envs\vueshop\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Installing collected packages: mysqlclient</span><br><span class="line">Successfully installed mysqlclient-1.3.13</span><br><span class="line"></span><br><span class="line">(vueshop) F:\Envs\vueshop&gt;</span><br></pre></td></tr></table></figure></p><p>注意需要进入到vueshop这个目录下进行安装，安装的命令是：<code>pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</code>（后面的是你刚才下载的版本名称，带whl）。</p><p>接下来我们再次运行项目，发现出了一个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> super(Connection, self).__init__(*args, **kwargs2)</span><br><span class="line">django.db.utils.OperationalError: (1193, &quot;Unknown system variable &apos;storage_engine&apos;&quot;)</span><br></pre></td></tr></table></figure></p><p>看样子是我们的数据库引擎变量名配置出了问题，我们修改一下，把：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;,</span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET default_storage_engine=INNODB;&apos;&#125;,</span><br></pre></td></tr></table></figure></p><p>再次运行，发现正常了。</p><p>接下来安装用于图片处理的库：<code>pillow</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><h3 id="新建包和文件夹"><a href="#新建包和文件夹" class="headerlink" title="新建包和文件夹"></a>新建包和文件夹</h3><p>新建两个python package，分别命名为apps和extra_apps。然后新建两个directory,分别命名为media和db_tools。注意一下包和文件夹的区别，包可以折叠，里面含有–init–.py文件，而文件夹不可以折叠，里面啥也没有。最后将两个python package:apps和extra_apps给Mark为source root。（前面教育网站有介绍操作）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88771b8df7cfb1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。在settings.py文件里面，我们新增路径代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.path.insert(0, BASE_DIR)</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;extra_apps&apos;))</span><br></pre></td></tr></table></figure></p><p>然后运行发现没有问题，接下来进行数据库字段的定义。</p><h2 id="数据库字段的定义"><a href="#数据库字段的定义" class="headerlink" title="数据库字段的定义"></a>数据库字段的定义</h2><p>首先进行需求分析从而设计数据字段，我们发现里面有一个导航栏，左边是商品全部信息，后面则是商品的部分信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b5ae9e3ea149c7d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那个全部商品分类，里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏。右边上面则是搜索框，网站主体部分则是商品的缩略图，最底下是排序和分页。<br>进入商品详情页，就能看到商品的详细信息，商品轮播图，原价，促销价格，以及富文本显示的信息。最右边则是热卖商品的信息，这个非常详细，可以看到详情信息。</p><p>现在就是数据库字段的设计了，我们采用归类的思想，肯定有一个商品信息，一个交易信息，一个用户信息，以及一个用于记录用户操作的信息。（教育网站里面有说过，避免引用的死循环）不过这种没有一个明确的分类，一般是根据程序员自己的经验来划分的。</p><p>所以我们的app一共有4个，用于分别实现不同的功能，具体如下：</p><blockquote><p>(user)用户版块：负责记录用户的个人信息相关的内容,</p></blockquote><blockquote><p>(goods)商品版块：用于记录商品信息相关的内容,</p></blockquote><blockquote><p>(trade)交易板块：用于记录交易相关的内容,</p></blockquote><blockquote><p>(user_operation)用户操作板块：用于记录用户操作的相关的内容。</p></blockquote><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中依次输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">startapp user</span><br><span class="line">startapp goods</span><br><span class="line">startapp trade</span><br><span class="line">startapp user_operation</span><br></pre></td></tr></table></figure></p><p>然后拖到app这个包里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9a637b993764fee6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了，现在开始进行各个app的models.py的配置了。记住一般都是先进行用户（user）这个app的配置。</p><h3 id="user-app的配置"><a href="#user-app的配置" class="headerlink" title="user app的配置"></a>user app的配置</h3><p>在前面的一篇文章里面：<a href="https://www.jianshu.com/p/460724e1c668" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)</a>，说过user自带的用户表是无法满足我们的需求，我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。</p><p>打开我们的user/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    name = models.CharField(max_length=30, null=True, blank=True, verbose_name=&quot;姓名&quot;)</span><br><span class="line">    birthday = models.DateField(verbose_name=&apos;生日&apos;, null=True, blank=True)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;)</span><br><span class="line">    gender = models.CharField(max_length=6, choices=((&apos;male&apos;, &apos;男&apos;), (&apos;female&apos;, &apos;女&apos;)), default=&apos;female&apos;, verbose_name=&apos;性别&apos;)</span><br><span class="line">    email = models.CharField(max_length=100, null=True, blank=True, verbose_name=&quot;邮箱&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VerifyCode(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    短信验证码</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;短信验证码&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.code</span><br></pre></td></tr></table></figure></p><p>记住：CharField必须有max_length！！！<br>这里还没完，就是我们这里定义的<code>UserProfile</code>其实并没有覆盖掉原本的<code>User</code>表，所以我们需要重载AUTH_USER_MODEL，打开settings.py,在<strong>INSTALLED_APPS</strong>的下面我们新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL = &apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><h3 id="注意一下"><a href="#注意一下" class="headerlink" title="注意一下"></a>注意一下</h3><p>我们不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错。</p><p>至此我们完成了第一个app的配置及其自定义字段的设计！</p><p>至此，本篇关于如何安装各种依赖库以及部分数据库字段的设计的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本篇笔记我们来学习如何安装各种依赖库以及数据库字段的设计，其中数据库字段的定义我们分两篇进行。&lt;/p&gt;
&lt;h2 id=&quot;新建
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>采用Vue+Django Restful framework构建生鲜电商项目（二）：环境搭建</title>
    <link href="http://licheetools.github.io/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://licheetools.github.io/2018/04/18/采用Vue-Django-Restful-framework构建生鲜电商项目（二）：环境搭建/</id>
    <published>2018-04-18T09:39:24.000Z</published>
    <updated>2019-04-15T08:51:42.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。<strong>注意我们是在windows的开发环境下进行开发。</strong>网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python，vue，在前面的笔记中我都有介绍过前4个的安装，但是考虑到小白，所以我就直接复制过来，只是对部分内容进行修改（pycharm升级版）。</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="Pycharm的安装"><a href="#Pycharm的安装" class="headerlink" title="Pycharm的安装"></a>Pycharm的安装</h3><p>之前那几个专题用的Pycharm版本是2017，现在我在微信公众号里重新介绍了如何破解安装最新版的pycharm2018,这里放个链接：搜索微信公众号:  啃饼思录，或者扫描上面关于博主介绍里面的二维码即可获取。当然这里我也会把里面的破解地址粘贴过来的：<a href="https://mp.weixin.qq.com/s/z-WoBxzasQGAqC5hqempnQ" target="_blank" rel="noopener">手把手教你破解Pycharm2018.2（JetBrains全家桶）</a>。</p><p>当然如果你还是比较喜欢Pycharm2017,那你可以点击这里进行安装：<a href="https://www.jianshu.com/p/6b007bc61f5c" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</a></p><h3 id="Mysql的安装"><a href="#Mysql的安装" class="headerlink" title="Mysql的安装"></a>Mysql的安装</h3><p><strong>1、下载压缩包</strong><br><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载地址</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5ca6a4d9a1aba8e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、解压到文件夹目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2f4b7ff1541738c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>3、新建txt文件内容如下：</strong><br><strong>设置mysql客户端默认字符集</strong></p><p>default-character-set=utf8</p><p><strong>设置3306端口</strong></p><p>port = 3306</p><p><strong>设置mysql的安装目录</strong></p><p>basedir=D:\Program Files\mysql-5.7.21-winx64</p><p><strong>设置mysql数据库的数据的存放目录</strong></p><p>datadir=D:\Program Files\mysql-5.7.21-winx64\data</p><p><strong>允许最大连接数</strong></p><p>max_connections=200</p><p><strong>服务端使用的字符集默认为8比特编码的latin1字符集</strong></p><p>character-set-server=utf8</p><p><strong>创建新表时将使用的默认存储引擎</strong></p><p>default-storage-engine=INNODB</p><p>注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini</p><p><strong>4  添加bin目录到path环境变量</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cd834e29d47e9d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>5 安装 MySQL服务，以管理员身份运行cmd</strong></p><p>执行 mysqld install 命令</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-643f118e3fae68c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>若出现“缺少xxx.dll，请安装微软运行库</p><p><a href="http://www.pc6.com/softview/SoftView_104246.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_104246.html</a></p><p><strong>6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b7a4895d4e32d205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-73b726ce792763b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行 mysqld –initialize-insecure –user=mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1448a95597d04114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data文件夹</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e4735c229dfc43fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data目录内容是否正确</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b6fb91b6926e8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>7  运行MySQL服务</strong></p><p>net start mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f39b42622e911be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关闭MySQL服务的命令是net stop mysql</p><p>8  登陆MySQL</p><p>mysql -u root –p</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-67df9096636696cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有命令：安装服务 mysqld install</p><pre><code>进入bin目录 cd E:\mysql-5.7.21-winx64\bin生成data文件夹 mysqld --initialize-insecure --user=mysql启动服务   net start mysql登录 mysql -u root –p</code></pre><p>修改密码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7142b21a0458a91b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>在忘记root密码的时候，可以这样</strong></p><p><strong>以windows为例：</strong></p><p>1. 关闭正在运行的MySQL服务。</p><p>2. 打开DOS窗口，转到mysql\bin目录。</p><p>3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</p><p>4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</p><p>5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</p><p>6. 连接权限数据库： use mysql; 。</p><p>6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。</p><p>7. 刷新权限（必须步骤）：flush privileges;　。</p><p>8. 退出 quit。</p><p>9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</p><h3 id="Navicat的安装"><a href="#Navicat的安装" class="headerlink" title="Navicat的安装"></a>Navicat的安装</h3><p>步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e93d6a71e62666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤二 在欢迎画面点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b59309f71e5159e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤三 阅读许可协议，接受并点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b3c41f29a829c78c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-be9ca29a49189112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤五 运行其余的步骤。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88d1948d0c99bddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤六 点击“完成”，结束安装进程。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-fd49020988775b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-a359883e5fd81315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV</strong><br>其余版本的可以参考这个<a href="https://www.jianshu.com/p/42a33b0dda9c" target="_blank" rel="noopener">链接</a></p><h3 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h3><p><a href="https://www.python.org/downloads/release/python-364/" target="_blank" rel="noopener">官网传送Python3.6.4版本下载链接</a><br>由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接<a href="https://jingyan.baidu.com/article/3ea51489bebde652e61bbad3.html" target="_blank" rel="noopener">python3.6.3安装教程</a>。</p><h2 id="virtualenv的安装和配置"><a href="#virtualenv的安装和配置" class="headerlink" title="virtualenv的安装和配置"></a>virtualenv的安装和配置</h2><h3 id="使用虚拟环境的好处"><a href="#使用虚拟环境的好处" class="headerlink" title="使用虚拟环境的好处"></a>使用虚拟环境的好处</h3><p>我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹<code>(记住要和Python放在同一目录下)</code>，采用添加环境变量的方法<code>（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path）</code>，我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录<code>(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格</code>，</p><blockquote><p>C:\Users\Kbthinking&gt;F:<br>F:&gt;cd Python<br>F:\Python&gt;cd pystall<br>F:\Python\pystall&gt;</p></blockquote><p>然后输入：<code>python setup.py install</code>回车，等待几分钟即可。</p><p>最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件<br>–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者<code>Windows徽标+R</code>中输入</p><blockquote><p>pip -—version</p></blockquote><p>小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入<br>python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句）</p><p>如果已经成功<strong>安装 pip</strong>，会提示类似下面的：</p><blockquote><p>pip 1.5.6 from C:\Python35\lib\site-packages\pip-1.5.6-py3.5.egg</p></blockquote><p>pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么<br>每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。</p><p>如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考<br>这个方法为你的 Windows电脑安装pip: <a href="https://taizilongxu.gitbooks.io/stackoverflowabout-python/content/8/README.html" target="_blank" rel="noopener">pip安装问题</a><br><a href="https://jingyan.baidu.com/article/ff42efa9d630e5c19e220207.html" target="_blank" rel="noopener">windows安装pip</a></p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>在终端输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line">virtualenv testvir  # 在当前用户目录(win+r %HOMEPATH%可查看)生成</span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat  # 激活</span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure></p><p>其实这种方法挺麻烦的，这里我推荐一种简单方法，<strong>安装virtualenvwrapper</strong></p><h3 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h3><p>在终端输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p><p>接下来便是创建虚拟环境了，同样采用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv djangoTest  # djangoTest为你新建虚拟环境的名称</span><br></pre></td></tr></table></figure></p><p>它会创建在C:\Users\YC\Envs当前用户目录下的Envs目录。</p><p>你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME<br><img src="https://upload-images.jianshu.io/upload_images/8964398-4f6aefde07e8c27b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>退出激活状态命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><p><strong>知道有哪些虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></p><p><strong>直接进入虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon djangoTest</span><br></pre></td></tr></table></figure></p><p>如果出现这种情况，表示你已经进入到虚拟环境中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Envs\Test\django(djangoTest)</span><br></pre></td></tr></table></figure></p><p>再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。</p><h3 id="使用镜像安装库"><a href="#使用镜像安装库" class="headerlink" title="使用镜像安装库"></a>使用镜像安装库</h3><p>有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">镜像</a>,并简单介绍一下如何使用。正常我们下载Django的命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.1.0</span><br></pre></td></tr></table></figure></p><p>(请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.1.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>(注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！)</p><h2 id="Vue开发环境的搭建"><a href="#Vue开发环境的搭建" class="headerlink" title="Vue开发环境的搭建"></a>Vue开发环境的搭建</h2><h3 id="1、webstorm的安装"><a href="#1、webstorm的安装" class="headerlink" title="1、webstorm的安装"></a>1、webstorm的安装</h3><p>当然webstorm只是一个IDE，你可以安装其他类似的IDE，例如sublime Text3，VSCode，Notepad++等，这里就不详细说明了，直接开启传送大门：<br><a href="https://blog.csdn.net/u011781521/article/details/53558979" target="_blank" rel="noopener">WebStorm安装与使用</a>这里没有提供破解方法，你可以点击这里进行破解(方法类似):<a href="https://mp.weixin.qq.com/s/z-WoBxzasQGAqC5hqempnQ" target="_blank" rel="noopener">手把手教你破解JetBrains全家桶</a>。sublime Text3安装：<a href="https://blog.csdn.net/weixin_38091374/article/details/78652778" target="_blank" rel="noopener">sublime Text3安装到破解详解</a>。VSCode安装：<a href="https://jingyan.baidu.com/article/642c9d3430c2ec644a46f7d6.html" target="_blank" rel="noopener">VSCode安装</a>。Notepad++安装：<a href="https://jingyan.baidu.com/article/154b463109921828cb8f4151.html" target="_blank" rel="noopener">notepad++安装教程</a></p><h3 id="2、node-js的安装"><a href="#2、node-js的安装" class="headerlink" title="2、node.js的安装"></a>2、node.js的安装</h3><p>同样node.js的安装，我们直接开启传送大门：<a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html" target="_blank" rel="noopener">Node.js安装及环境配置之Windows篇</a>，安装完成以后记得使用下面的命令确认是否安装成功：<code>node --version</code>，如果出现版本号就表明安装成功了，实际上一些常用的软件都可以用这种方式来检测是否安装成功：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f923c1f6eb5e2e39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是cnpm的安装了，这个对于后端人员可能不太熟悉，但是前端人员确是非常了解，可以点击这里进行了解一下：<a href="https://www.jianshu.com/p/f581cf9360a2" target="_blank" rel="noopener">如何使用NPM？CNPM又是什么？</a></p><h3 id="3、cnpm的安装"><a href="#3、cnpm的安装" class="headerlink" title="3、cnpm的安装"></a>3、cnpm的安装</h3><p>点击这里<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>，然后安装提示进行安装即可，非常简单，就一步而已：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>当然为防止我们没有安装正确，我们使用<code>cnpm -v</code>来进行检测一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f8a4fa9c9af05752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>出现上面的情况，表明你已经安装成功了，当然你还可以自定义配置，点击这里：<a href="https://www.cnblogs.com/yominhi/p/7039795.html" target="_blank" rel="noopener">安装npm及cnpm(Windows)</a></p><p>现在进入我们的online-store，我们在英文输入法状态下按住shift键，同时点击鼠标左键，在出现的命令栏中选择<strong>在此处打开命令栏窗口</strong>，然后直接使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><p>如果出现下面的情况，我们选择以管理员身份运行：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f65462018d1f1f4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果还是出现这样的问题，就有可能是环境的问题，建议安装这里的教程重新安装和配置一下环境变量（安装最新版的node.js）：<a href="https://www.cnblogs.com/yominhi/p/7039795.html" target="_blank" rel="noopener">安装npm及cnpm(Windows)</a></p><p>现在重新安装配置以后，我们win+x选择以管理员身份运行cmd，然后到online-store文件夹下面重新运行一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><p>发现就是这样了，安装成功：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4388a66688085fc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>发现运行成功了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-38e7d93e7008c639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f6e71406f21d7070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后打开浏览器，在地址栏中输入：<code>http://localhost:8080/</code>就能看到我们的项目了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ec33932aed2beab0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意一下，下面没有是正常情况，不是你静态资源没有加载出来，而是bobby老师的服务器停了，导致api接入不了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bdf4807ef4ec3c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error occurred while trying to proxy request /favicon.ico from localhost:8080 to http://shop.projectsedu.com:8001 (ETIMEDOUT) (https://nodejs.org/api/errors.html#errors_common_system_errors)</span><br></pre></td></tr></table></figure></p><p>不相信的话，你可以在浏览器地址栏中输入：<code>http://shop.projectsedu.com:8001</code>，你会发现访问不了！当然你可以修改这个api.js文件，换成其他的地址就能访问了。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-91614cb429eca361.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，本篇关于项目环境搭建的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。&lt;strong&gt;注意我们是在wind
      
    
    </summary>
    
      <category term="django" scheme="http://licheetools.github.io/categories/django/"/>
    
    
      <category term="django建站" scheme="http://licheetools.github.io/tags/django%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Vue前端" scheme="http://licheetools.github.io/tags/Vue%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
