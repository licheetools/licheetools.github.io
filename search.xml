<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>趣玩爬虫实战训练（一）：12306火车车次信息爬取分析</title>
      <link href="/2019/04/01/%E8%B6%A3%E7%8E%A9%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A12306%E7%81%AB%E8%BD%A6%E8%BD%A6%E6%AC%A1%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96%E5%88%86%E6%9E%90/"/>
      <url>/2019/04/01/%E8%B6%A3%E7%8E%A9%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A12306%E7%81%AB%E8%BD%A6%E8%BD%A6%E6%AC%A1%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为付费内容，请添加小编QQ：2810706745。付费以后，凭密码进行阅读，感谢您的支持与理解！" />    <label for="pass">对不起，此文章为付费内容，请添加小编QQ：2810706745。付费以后，凭密码进行阅读，感谢您的支持与理解！</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> money </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 趣玩爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍</title>
      <link href="/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%88%A9%E5%99%A8JDBC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%88%A9%E5%99%A8JDBC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>jdbc全称java database connectivity.是java程序与数据库连接的一种机制。</p><p>jdbc的过程：<br>1、搭建开发环境<br>2、编写程序，在程序中加载数据库驱动<br>3、建立连接<br>4、创建用于向数据库发送sql语句的Statement对象<br>5、从代表结果集的ResultSet中取出数据<br>6、断开与数据库的链接，并释放相关的资源</p><p>###<br>DriverManager：驱动管理类<br>主要作用：<br>1、注册驱动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(new Driver());   //会导致驱动注册两次</span><br><span class="line">Class.forName(&quot;com.test.jdbc.demo1.JdbcTest1&quot;);   //实际上使用这种方式</span><br></pre></td></tr></table></figure></p><p>2、获得连接<br>Connection getConnection(String url,String username,String password)；<br>url的写法：jdbc:mysql://localhost:3306/jdbc<br>jdbc:协议<br>mysql:子协议<br>localhost:主机号<br>3306:端口号<br>注意如果为本地ip地址，则可以简写为：jdbc:mysql:///jdbc</p><p>###jdbc工具类的书写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line"></span><br><span class="line">//没有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        driverClass = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">        url = &quot;jdbc:mysql://localhost:3306/jdbctest&quot;;</span><br><span class="line">        username = &quot;root&quot;;</span><br><span class="line">        password = &quot;root&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是具有了jdbc.propreties属性的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        //加载属性文件并解析</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        //如何获得属性文件的输入流？</span><br><span class="line">        //通常情况下使用类的加载器的方式进行获取</span><br><span class="line">        InputStream is = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            props.load(is);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        driverClass =props.getProperty(&quot;driverClass&quot;);</span><br><span class="line">        url =props.getProperty(&quot;url&quot;);</span><br><span class="line">        username =props.getProperty(&quot;username&quot;);</span><br><span class="line">        password =props.getProperty(&quot;password&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中jdbc.propreties文件里面的代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClass = com.mysql.jdbc.Driver</span><br><span class="line">url = jdbc:mysql://localhost:3306/jdbctest</span><br><span class="line">username = root</span><br><span class="line">password = root</span><br></pre></td></tr></table></figure></p><h3 id="Statement的使用"><a href="#Statement的使用" class="headerlink" title="Statement的使用"></a>Statement的使用</h3><p>它的使用和我们后面所说的preparedStatement的使用有点不相同，而且我们优先后面的那种方式，因为不会产生sql注入的危险。</p><h3 id="preparedStatement的使用"><a href="#preparedStatement的使用" class="headerlink" title="preparedStatement的使用"></a>preparedStatement的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    /***</span><br><span class="line">     * 保存数据到数据库，其实就是插入操作</span><br><span class="line">     * */</span><br><span class="line">    public void demo1() &#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        PreparedStatement preparedStatement = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JdbcUtils.ReleaseSource(connection, preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在增删改查四个操作里面，我们先来简单连接四个过程的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">//保存数据到数据库，其实就是插入操作</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改数据库中的数据</span><br><span class="line">             //注册驱动与获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;update user set username =?,password =?,name=? where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;eee&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;555&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;lichee&quot;);</span><br><span class="line">            preparedStatement.setInt(4, 7);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据修改成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//删除数据库中的数据</span><br><span class="line">//注册驱动与获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;delete from user where uid =?&quot;;</span><br><span class="line">            //预处理sql</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,6);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if(i&gt;0)&#123;</span><br><span class="line">                System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的全部数据</span><br><span class="line">      //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;select * from user&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">           //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           while (resultSet.next())&#123;</span><br><span class="line">               System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的一条数据</span><br><span class="line"> //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;select * from user where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,1);</span><br><span class="line">            //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>也就是说增加，修改，删除都是使用executeUpdate函数，而且返回的是int类型的受影响的行数，然后我们就可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = preparedStatement.executeUpdate();</span><br><span class="line">           if(i&gt;0)&#123;</span><br><span class="line">               System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><p>只有查询使用的是executeQuery函数，而且返回的是resultSet类型的结果集，然后使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。</p><p>C3P0连接池</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（八）：反射机制</title>
      <link href="/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。</p><h2 id="四大类"><a href="#四大类" class="headerlink" title="四大类"></a>四大类</h2><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>Constructor：关于单个类的构造方法以及对它的访问权限;<br>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>Method：提供关于类或者接口上的单独某个方法的信息。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-013cf6f3c2bf9298.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>java中java.lang.Class类用于表示一个类的字节码（.class）文件;获取某个class文件对应的Class对象：<br>1、在已知类和对象的情况下：<br>类名.class<br>对象.getClass()  –由Object类提供。<br>2、在未知类的情况下：<br>Class.forName(“包名.类名”)</p><p>Class类代表某个类的字节码，并提供了加载字节码的方法：forName(“包名.类名”)，forName方法用于类字节码到内存中，并封装成一个Class对象。</p><p>我们通过代码来测试一下：首先先新建一个测试类Person：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String sex;</span><br><span class="line"></span><br><span class="line">public Person() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Person(String name,String sex) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">this.sex =sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String getSex() &#123;</span><br><span class="line">return sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setSex(String sex) &#123;</span><br><span class="line">this.sex=sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;吃东西......&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Person [name=&quot; + name + &quot;, sex=&quot; + sex + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来建一个ReflectTest类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class ReflectTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获得Class对象： 1、通过类.class； 2、通过对象.getClass()； 3、通过Class.forName();</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demo1() throws ClassNotFoundException &#123;</span><br><span class="line">// 1、通过类.class；</span><br><span class="line">Class csone = Person.class;</span><br><span class="line"></span><br><span class="line">// 2、通过对象.getClass()；</span><br><span class="line">Person person = new Person();</span><br><span class="line">Class cstwo = person.getClass();</span><br><span class="line"></span><br><span class="line">// 3、通过Class.forName()获取信息（推荐）</span><br><span class="line">Class csthree = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(csthree);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ReflectTest.demo1();</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上三种方法获得的都是类的字节码文件对应的对象在内存中的地址。</p><h3 id="Constructor构造方法"><a href="#Constructor构造方法" class="headerlink" title="Constructor构造方法"></a>Constructor构造方法</h3><p>Constructor：关于单个类的构造方法以及对它的访问权限;<br>我们在前面已经得到了类名，那么就可以调用它的getConstructor()方法来获得它的有参或者无参的构造方法，紧接着你可以利用这个获得的构造方法的newInstance()方法，来达到完成实例化一个对象的目的。</p><p>我们新建一个测试类：ConstructorTest：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class ConstructorTest &#123;</span><br><span class="line">/**</span><br><span class="line"> * 获得无参的构造方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demo2() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得无参的构造方法</span><br><span class="line">Constructor cs = cls.getConstructor(null);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cs.newInstance(null); // 其实这里就相当于Person person =new Person();</span><br><span class="line">person.eat();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void demo3() throws Exception &#123;</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">Constructor cso = cls.getConstructor(String.class, String.class);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cso.newInstance(&quot;小白&quot;, &quot;男&quot;);  //这里其实就是相当于Person person =new Person(&quot;小白&quot;,&quot;男&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ConstructorTest.demo3();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Person [name=小白, sex=男]</span><br></pre></td></tr></table></figure></p><h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>我们在前面已经得到了类名，那么就可以得到它的成员变量（包括所有的成员变量和指定的成员变量）。</p><p>如果你想获得所有的（非私有）成员变量，那么你可以调用它的getFields()方法，获得该类所有public属性（包括父类继承的）；</p><p>如果你想获得所有的（含私有）成员变量<strong>getDeclaredFields()</strong>方法，获得该类所有声明的属性（包括私有属性和父类继承的）；</p><p>如果你想获得指定的（非私有）成员变量，那么你可以调用它的getField(String name)方法，获得指定的（非私有）成员变量；</p><p>如果你想获得指定的（含私有）成员变量，那么你可以调用它的<strong>getDeclaredField(String name)</strong>方法，获得指定的（含私有）成员变量;</p><p>设置Field变量是否可以访问，你可以使用field.setAccessible(boolean)，<br>boolean为真则表示可以，反之则不可以。</p><p>Field变量值的读取与设置：<br>field.get(obj);<br>field.set(obj,value);</p><p>我们首先在之前的Person类中添加一个公有的属性（public Sting hobby），然后新建一个测试类:FieldTest:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class FieldTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有属性</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public static void publicDemoTest() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定公有属性字段</span><br><span class="line">Field field1 = class1.getField(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">// 给指定的公有属性赋值</span><br><span class="line">Person p = (Person) class1.newInstance();</span><br><span class="line"></span><br><span class="line">//p.hobby =&quot;reading book&quot;;  //通过普通的对象.属性的方法来给对象的属性赋值</span><br><span class="line"></span><br><span class="line">field1.set(p, &quot;reading book&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 测试私有属性</span><br><span class="line"> * @throws Exception </span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void privateDemoTest() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定私有属性字段（注意这里需要注释掉该字段对应的getter和setter方法）</span><br><span class="line">Field field2 = class2.getDeclaredField(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//先实例化一个对象</span><br><span class="line">Person person =(Person)class2.newInstance();</span><br><span class="line"></span><br><span class="line">//给指定的私有属性赋值（操作属性）:</span><br><span class="line">//1、这里必须先要设置是否可以操作</span><br><span class="line">field2.setAccessible(true);</span><br><span class="line">//2、给对应的属性赋值</span><br><span class="line">field2.set(person,&quot;小白&quot;);</span><br><span class="line">//3、获取对应的属性值</span><br><span class="line">Object obj =field2.get(person);</span><br><span class="line"></span><br><span class="line">System.out.println(obj);</span><br><span class="line">System.out.println(&quot;**************************&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">FieldTest.publicDemoTest();</span><br><span class="line">FieldTest.privateDemoTest();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">Person [name=null, sex=null, hobby=reading book]</span><br><span class="line">小白</span><br><span class="line">**************************</span><br><span class="line">Person [name=小白, sex=null, hobby=null]</span><br></pre></td></tr></table></figure></p><h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>Method：提供关于类或者接口上的单独某个方法的信息。<br>Method类代表某个类中的一个成员方法<br>Method对象的获得方法：</p><p>如果你想获得所有的（非私有）方法，那么你可以调用它的getMethods()方法；</p><p>如果你想获得所有的（含私有）方法，那么你可以调用它<strong>getDeclaredMethods()</strong>方法；</p><p>如果你想获得指定的（非私有）方法，那么你可以调用它的getMethod()方法；（常用）</p><p>如果你想获得指定的（含私有）方法，那么你可以调用它的<strong>getDeclaredMethod()</strong>方法；（常用）</p><p>得到了方法，那么如何执行方法呢？我们可以通过反射来执行方法：<br>invoke(Object obj,Object….args)</p><p>我们依旧通过测试来完成相关信息的输出，在前面的Person类中新增两个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">System.out.println(&quot;跑步......&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String wacthTv(String name) &#123;</span><br><span class="line">return &quot;我在看&quot; + name + &quot;电视节目&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着新建一个测试类MethodTest：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class MethodTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demoOne() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person1 = (Person) class1.newInstance();</span><br><span class="line">// 获得公有方法</span><br><span class="line">Method method = class1.getMethod(&quot;eat&quot;);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person1); // 这里就相当于person.eat()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demoTwo() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person2 = (Person) class2.newInstance();</span><br><span class="line">// 获得私有方法</span><br><span class="line">Method method = class2.getDeclaredMethod(&quot;run&quot;);</span><br><span class="line">// 设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法（带参数）</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line">public static void demoThree() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class3 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person3 = (Person) class3.newInstance();</span><br><span class="line">// 获得带参数的私有方法</span><br><span class="line">Method method = class3.getDeclaredMethod(&quot;wacthTv&quot;, String.class);</span><br><span class="line">//设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">//执行该方法</span><br><span class="line">//method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line"></span><br><span class="line">Object obj =method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">MethodTest.demoOne();</span><br><span class="line">MethodTest.demoTwo();</span><br><span class="line">MethodTest.demoThree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出信息</span><br><span class="line">吃东西......</span><br><span class="line">跑步......</span><br><span class="line">我在看新闻联播电视节目</span><br></pre></td></tr></table></figure><p>上面我们测试了3种情况，分别是公有方法，私有方法，以及私有的带参数的方法。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>1、什么是Java的反射机制？<br>Java的反射机制是在运行状态中，对于任意一个类，都能够知道这个类的属性和方法；对于任意一个对象，都能够调用它的任意属性和方法；这种动态获取信息以及动态调用对象方法的功能称之为Java的反射机制。</p><p>2、Java的反射机制的作用？<br>是用来编写一些通用性较高的代码或者框架的时候使用。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（七）：输入输出流和集合</title>
      <link href="/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%92%8C%E9%9B%86%E5%90%88/"/>
      <url>/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%92%8C%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h3><p>程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。</p><p>那么什么是流呢？所谓的流就是指一连串流动的字符，它是以先进先出的方式发送信息的通道。</p><p>流分为两种，输出流和输入流：</p><p>输出流一般是屏幕，打印机等，用来输出的设备，而输入流则是键盘或者扫描仪等设备。</p><p>数据源（键盘）将数据放到字符流中，然后程序通过read（读操作）进行读取。</p><p>也就是说文件输入是读，文件输出是写。</p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>File就是文件，它可认为是相关记录或放在一起的数据的集合，在Java中，我们使用java.io.File类对文件迸行操作。可以点击这里查看api文档：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8 api</a></p><p>需要注意的是，Windows中的目录分隔符为反斜杠“\”，而Linux的目录中的分隔符则是斜杠“/”。</p><p>eclipse的快速导包快捷键为ctrl+shift+o。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建File对象的三种方式</span><br><span class="line">File file1 =new File(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);   //方法一</span><br><span class="line"></span><br><span class="line">File file1 =new File(&quot;F:\\JAVA&quot;,&quot;\\javatest\\io\\score.txt&quot;);   //方法二</span><br><span class="line"></span><br><span class="line">File file =new File(&quot;F:\\JAVA&quot;);</span><br><span class="line">File file1 =new File(file ,&quot;\\javatest\\io\\score&quot;);   //方法三</span><br></pre></td></tr></table></figure><p>下面介绍一些常见的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">isDirectory()：判断是否是目录</span><br><span class="line">isFile()：判断是否是文件</span><br><span class="line">exists()：判断是否存在</span><br><span class="line">mkdir()：创建一级目录</span><br><span class="line">mkdirs()：创建多级目录</span><br><span class="line">createNewFile()：创建新的文件</span><br><span class="line">canRead()：是否可读</span><br><span class="line">canWrite()：是否可写</span><br></pre></td></tr></table></figure></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>字节分为两种：字节输入流 InputStream和字节输出流 OutputStream，我从网上找了两张图片，大家可以看一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b1d9716f1c8accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4b8a6b6b9bcfaa98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="FileInputStream文件输入流"><a href="#FileInputStream文件输入流" class="headerlink" title="FileInputStream文件输入流"></a>FileInputStream文件输入流</h3><p>FileInputStream文件输入流有几个作用：</p><ul><li>1、就是从文件系统中的某个文件中获得输入字节。</li></ul><p>举个简单的例子，复制就是把原来文件的信息进行读取的操作，然后粘贴就是把读取的信息进行写入的操作；</p><ul><li>2、用于读取图像数据之类的原始字节流。</li></ul><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public int read()</td><td style="text-align:center">从输入流中读取一个数据字节</td></tr><tr><td>public int read(byte[] b)</td><td style="text-align:center">从输入流中将最多b.length个字节的数据读入一个byte数组中</td></tr><tr><td>public int read(byte[] b,int off, int len)</td><td style="text-align:center">从输入流中将最多len个字节的数据读入byte数组中</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输入流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：如果int的返回值为-1，则表示已经读到了文件的末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamOne &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files =new  FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">//int n = files.read();  // 只能读取第一个数据字节</span><br><span class="line">//while(n!=-1) &#123;</span><br><span class="line">//System.out.print((char)n);</span><br><span class="line">//n =files.read();</span><br><span class="line">//&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int n =0;</span><br><span class="line">while((n=files.read())!=-1) &#123;</span><br><span class="line">System.out.print((char)n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再来看一个字节数组的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamTwo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files = new FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">byte [] b =new byte[100];</span><br><span class="line">files.read(b,0,5); //后面2个是偏移量，0表示从开始读取，而5代表存取的字节的长度</span><br><span class="line">System.out.println(new String(b));</span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="FileOutputStream文件输出流"><a href="#FileOutputStream文件输出流" class="headerlink" title="FileOutputStream文件输出流"></a>FileOutputStream文件输出流</h2><p>上面我们说完了FileInputStream文件输入流，接下来说文件输出流FileOutputStream：</p><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public void write(int b)</td><td style="text-align:center">将指定字节写入此文件输出流</td></tr><tr><td>public void write(byte[] b)</td><td style="text-align:center">将b.length个字节从指定byte数组写入此文件输出流中</td></tr><tr><td>public void write(byte[] b,int off,int len)</td><td style="text-align:center">将指定byte数组中从偏移量off开始的len个字节写入此文件输出流</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输出流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：在上面的方法里面都有一个默认参数为append（追加的意思），但是默认为空白（False也就是覆盖的意思），如果你设为True那么就是后面追加，会保留原来的信息。</p><p>上面的方法是不是和前面输入流很相似，是的这就是一个互逆的过程。</p><p>不过还有一个问题就是很容易发生编码错误，所以你会发现字节流其实不是很容易适合做字符相关的操作，适合做二进制数据相关的操作。但是却是非常适合文件的复制，粘贴。</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>我们之前的文件读写都是直接从硬盘上读取的，其实这种方式读取非常慢的；而我们现在要说的缓冲流这表明我们可以从内存中进行读取。</p><p>缓冲流包括：缓冲输入流BufferedInputStream和缓冲输出流BufferedOutputStream</p><p>缓冲输入流是不能直接直接读取文件系统中的数据的，它必须要和文件输入流进行结合。</p><p>缓冲区满了，会自动清空；不满则需要强制清空（你可以调用flush或者close方法）。</p><p>有时候我们会比较程序的运行时间，这时候我们可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long startTime =System.currentTimeMillis();  //获取当前的时间-1970年1月1日最后就是运行时间</span><br></pre></td></tr></table></figure></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>同样字符流也分为两种：字符输入流Reader和字符输出流 Writer</p><p>字节流和字符流它们主要的区别就是应用的场景不一样：<a href="https://blog.csdn.net/cynhafa/article/details/6882061" target="_blank" rel="noopener">java 字节流与字符流的区别</a></p><p>我网上找了2张图片，大家看一下关于字符流相关的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-73464e734ce3a5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30a69bdd4bdbf1c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="字节字符转换流"><a href="#字节字符转换流" class="headerlink" title="字节字符转换流"></a>字节字符转换流</h2><p>接下我们来谈谈字节字符转换流，顾名思义就是供字节字符转换用的（两者过渡的桥梁）：InputStreamReader和OutputStreamWriter：<br><a href="https://www.cnblogs.com/alsf/p/6778055.html" target="_blank" rel="noopener">掌握OutputStreamWriter和InputStreamReader类的作用</a></p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。简单点说就是把java对象转换为字节序列的过程。反序列就是和它相反的过程。</p><p>序列化步骤：<br>1、创建一个类，然后实现Serializable接口；<br>2、创建对象：将对象写入文件；<br>3、从文件读取对象信息<br>这个过程会涉及到两个流：对象输入流ObjectInputStream 和 对象输出流ObjectOutputStream</p><p> <a href="https://www.cnblogs.com/xdp-gacl/p/3777987.html" target="_blank" rel="noopener">Java基础学习总结——Java对象的序列化和反序列化</a></p><p><a href="http://www.importnew.com/17964.html" target="_blank" rel="noopener">Java对象的序列化与反序列化</a></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>在前面我们好像有介绍过数组（又好像没有，不管了），我们知道数组用于固定长度的数据场景，而集合更适合数据动态变化的场景。</p><p>或者说集合更加适合应用于下列场景:<br>1、无法预测存储数据的数量；<br>2、同时存储具有一对一关系的数据(商品信息&amp;详情或者学生&amp;学号等)；<br>3、需要进行数据的增删；<br>4、数据不允许重复等</p><h3 id="集合框架的体系结构"><a href="#集合框架的体系结构" class="headerlink" title="集合框架的体系结构"></a>集合框架的体系结构</h3><p>集合框架一共分为两类：Collection和Map。其中Collection用于存储类的对象，而Map用于以键值对的形式来存储信息。</p><p>为了更好的理解，我从网上找了一张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-115e000525e874e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Collection这个类下面有3个子接口，分别是List（序列），Queue（队列），Set（集）。其中，List（序列），Queue（队列）中存放的数据必须是有序的，并且是允许重复的；Set（集）存放的数据是无序的，且不允许重复的。每个接口下面又有许多的实现类。List的实例类是ArrayList（可以看做一个长度动态增长的数组）。Queue的实现类是LinkedList（它实现了List和Queue，也就是链表）。Set的实现类是HashSet，也就是哈希集。</p><p>Map这个类可以实现的类有HashMap，也就是哈希表。</p><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><p>List：是元素有序并且可以重复的集合，称为序列或者列表。</p><p>List可以精确控制每个元素的插入位置或删除某个位置的元素。</p><p>List的两个主要实现类是ArrayList和LinkedList。这里我们主要介绍ArrayList类，因为这个类使用比较多。其实ArrayList和数组是比较相似的，只是它的长度可以动态增长，它其实也是内存上一片连续的存储空间进行存储。而LinkedList本身是一个链表，这两个中方法的作用是几乎相同的。</p><p>ArrayList底层是由数组实现的，它的长度是可以动态增长的，用来满足应用程序的需求。如果你要在在列表尾部插入或删除数据，那么使用ArrayList是非常有效的(如果中间插入或者删除会过多挪位，并不适合)。当然它还更适合查找和更新元素，最重要的一点就是ArrayList中的<strong>元素可以为null值</strong>。</p><p>我们即将要将的Collection都是存放于java.util 包中的，所以在使用的时候需要我们自己进行包的导入。</p><p>下面简单介绍List接口中几种常用的方法，以便于大家在用的时候得心用手：</p><p>add()：向列表末尾添加元素；clear()：清空列表中元素；contains()：判断列表中是否包含指定的对象。</p><p>get()：返回此列表中指定位置的元素； indexOf ()：返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。</p><p>isEmpty() ：集合是否为空，空返回true； iterator ()：以正确的顺序返回该列表中的元素的迭代器；remove()：删除该列表中指定位置的元素；size()：返回此列表中的元素数；sort()：对列表进行排序。</p><p>接下来我们来看ArrayList这个类，你会发现它的方法其实和我们List这个接口的方法非常类似。其中<code>ArrayList()</code>是它的无参构造方法：构造一个初始容量为十的空列表；<code>ArrayList(Collection &lt;? extends E&gt; c)</code>是它的有参构造方法，它可以通过已存在的Collection来构造ArrayList。</p><p>记住列表的索引号是从零开始的，这一点很重要，需要特别注意。</p><p>我觉得学语言很多时候就得多看Api文档，这对自己自身能力的提高非常有帮助。</p><h3 id="ArrayList案例分析"><a href="#ArrayList案例分析" class="headerlink" title="ArrayList案例分析"></a>ArrayList案例分析</h3><p>双十一的时候，很多网站都会在其首页发布一些打折的消息，我们现在的任务就是模拟这个场景，要求如下：<br>1、添加和显示信息；<br>2、在指定位置处插入信息；<br>3、删除消息；<br>4、修改消息。<br>条件：编号 id，标题 title，创建人 creator，创建时间 createTime。</p><p>博主是一个重度的Python爱好者，所以这些要求刚写的时候，就已经想到如何用Python中的list去实现相关功能了。所以，如果你也喜欢Python不妨来交流学习。</p><p>好了，有点跑题了，你自己先尝试通过查看api文档的方式，看看自己能否独立实现这些要求，之后再来查看结果吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class Notice &#123;</span><br><span class="line">//公告的添加和显示;在指定位置处插入公告;删除公告;修改公告</span><br><span class="line">// 编号 id;标题 title;创建人 creator;创建时间 createTime</span><br><span class="line"></span><br><span class="line">private int id;</span><br><span class="line">private String title;</span><br><span class="line">private String create;</span><br><span class="line">private Date createTime;</span><br><span class="line"></span><br><span class="line">public Notice() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">public Notice(int id, String title, String create, Date createTime) &#123;</span><br><span class="line">super();</span><br><span class="line">this.id = id;</span><br><span class="line">this.title = title;</span><br><span class="line">this.create = create;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setId(int id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getTitle() &#123;</span><br><span class="line">return title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTitle(String title) &#123;</span><br><span class="line">this.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getCreate() &#123;</span><br><span class="line">return create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreate(String create) &#123;</span><br><span class="line">this.create = create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Date getCreateTime() &#123;</span><br><span class="line">return createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreateTime(Date createTime) &#123;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看这个类的测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class NoticeTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建Notice类的对象，我们先实例化3条信息</span><br><span class="line">Notice notice1 =new Notice(1,&quot;欢迎来到啃饼小白的修炼之旅&quot;,&quot;啃饼小白&quot;,new Date());</span><br><span class="line">Notice notice2 =new Notice(2,&quot;欢迎来到java的世界&quot;,&quot;管理员&quot;,new Date());</span><br><span class="line">Notice notice3 =new Notice(3,&quot;世界那么大，我想出去看看&quot;,&quot;思录者&quot;,new Date());</span><br><span class="line"></span><br><span class="line">// 将消息添加到ArrayList里面</span><br><span class="line">ArrayList noticelist =new ArrayList();</span><br><span class="line">noticelist.add(notice1);  // 默认为末尾添加</span><br><span class="line">noticelist.add(notice2);</span><br><span class="line">noticelist.add(notice3);</span><br><span class="line"></span><br><span class="line">// 消息的显示</span><br><span class="line">System.out.println(&quot;消息的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 在第一条消息后面添加一条消息</span><br><span class="line">Notice notice4 =new Notice(4,&quot;努力与运动兼备&quot;,&quot;拾光小白&quot;,new Date());</span><br><span class="line">noticelist.add(1,notice4);</span><br><span class="line">System.out.println(&quot;添加完消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 删除编号为3的消息：欢迎来到java的世界</span><br><span class="line">//noticelist.remove(2);</span><br><span class="line">noticelist.remove(notice2);</span><br><span class="line">System.out.println(&quot;删除消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 修改编号为3的消息：世界那么大，我想出去看看，中的我修改为你</span><br><span class="line">notice3.setTitle(&quot;世界那么大，你想出去看看&quot;);</span><br><span class="line">System.out.println(&quot;修改消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们来介绍集合中的另一个set。</p><h2 id="set-集"><a href="#set-集" class="headerlink" title="set(集)"></a>set(集)</h2><p>Set是元素无序且不可以重复的集合，被称为集。而我们上面刚介绍的列表则是有序且重复的，这一点要弄清楚。</p><p>set是一个接口，而它的实现类是HashSet（哈希集）。哈希集中的元素是无序且不可以重复的。而且在HashSet中，只允许有一个null元素因此它具有良好的存取和查找性能。</p><p>由于HashSet中的方法和前面介绍的ArrayList中的差不多，因此这里就不再过多的介绍其方法了，而是直接通过一个例子来进行具体方法的使用：</p><p>不过在这之前，我需要告诉你的是hashset里面是没有提供用于元素输出的get()方法，但是呢，它提供了一个iterator()方法，用于对集合元素进行遍历。</p><p>Iterator (迭代器): Iterator接口可以以统一的方式对各种集合元素进行遍历。记住这个Iterator (迭代器)是存在于java.util包里面的。</p><p>迭代器有2个方法：hasNext()和next()。其中hasNext()方法用于检测集合中是否还有下一个元素，这个是遍历的终止条件；而另一个next()方法是用于返回集合中的下一个元素。</p><p>要求：用HashSet存储多个表示颜色的英文单词,并输出。<br>其中单词包括: “blue”,”red”,”black”,”yellow”和”white”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class HashSetDemo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 将英文单词添加到HashSet当中, &quot;blue&quot;,&quot;red&quot;,&quot;black&quot;,&quot;yellow&quot;和&quot;white&quot;</span><br><span class="line">HashSet hset =new HashSet();</span><br><span class="line">hset.add(&quot;red&quot;);</span><br><span class="line">hset.add(&quot;blue&quot;);</span><br><span class="line">hset.add(&quot;black&quot;);</span><br><span class="line">hset.add(&quot;yellow&quot;);</span><br><span class="line">hset.add(&quot;white&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;集合中的元素为：&quot;);</span><br><span class="line">Iterator it =hset.iterator();</span><br><span class="line">// 遍历迭代器并进行输出</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在有一个问题，如果你把一个已经重复的对象插入到集合里面，会发生什么情况呢？答案是不会报错，可以运行，但是你会发现其实你根本插入不进去。是的，集合就是这样。</p><p>我们现在又来举一个例子，这个例子会让你对上面的介绍生产模糊，但这是必要的：</p><p>案例：如何在HashSet中添加自定义类的对象?<br>需求：<br>1、添加和显示宠物猫信息；<br>2、查找某只宠物猫的信息并输出；<br>3、修改宠物猫的信息;删除宠物猫信息</p><p>其中属性为: 名字name；年龄month；品种species<br>方法为: 构造方法；获取和设置属性值的方法；其他方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">public class Cat &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int month;</span><br><span class="line">private String species;</span><br><span class="line">public Cat(String name, int month, String species) &#123;</span><br><span class="line">super();</span><br><span class="line">this.name = name;</span><br><span class="line">this.month = month;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getMonth() &#123;</span><br><span class="line">return month;</span><br><span class="line">&#125;</span><br><span class="line">public void setMonth(int month) &#123;</span><br><span class="line">this.month = month;</span><br><span class="line">&#125;</span><br><span class="line">public String getSpecies() &#123;</span><br><span class="line">return species;</span><br><span class="line">&#125;</span><br><span class="line">public void setSpecies(String species) &#123;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot; 姓名=&quot; + name + &quot;, 年龄=&quot; + month + &quot;, 品种=&quot; + species + &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class CatTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 定义宠物猫对象</span><br><span class="line">Cat huahua = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">Cat fanfan = new Cat(&quot;凡凡&quot;, 10, &quot;英国短毛猫&quot;);</span><br><span class="line"></span><br><span class="line">// 将对象添加到hashset中</span><br><span class="line">HashSet hset = new HashSet();</span><br><span class="line">hset.add(huahua);</span><br><span class="line">hset.add(fanfan);</span><br><span class="line"></span><br><span class="line">// 显示宠物猫信息</span><br><span class="line">Iterator it = hset.iterator();</span><br><span class="line"></span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*******************************************&quot;);</span><br><span class="line">// 添加一个与花花属性一模一样的猫</span><br><span class="line">Cat huahua1 = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">hset.add(huahua1);</span><br><span class="line">Iterator its = hset.iterator();</span><br><span class="line">while (its.hasNext()) &#123;</span><br><span class="line">System.out.println(its.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br><span class="line">*******************************************</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br></pre></td></tr></table></figure></p><p>你运行上面的代码，你会发现一个有趣的事，你在集合里面竟然添加了一条和花花一模一样的数据，说好的集合不能添加相同的数据，你仿佛在逗我玩？我被欺骗了，宝宝不开心了。。。。。。</p><p>其实刚才那句话是适合于字符串的，为什么这么说呢，那是因为字符串是系统提供给我们的类，它里面已经将数据重复的规则，也就是这两个对象是否完全一样（属性，方法等）已经定义好了。这个你可以类比到toString方法，你直接输出对象却是对象在内存中的地址，但是你输出字符串却是字符串的值，这其实也就是字符串里面已经重写了自己的toString方法。</p><p>所以呢，如果你也希望自己定义的类也具有相似的功能，那么你需要重写hashCode()和equals()方法。我们知道equals()在字符串中是判断两个对象的值是否相等。在java里面，hashCode是与哈希表有关的，这是数据结构的知识，我这里简单说明一下。</p><p>举个例子，假如你要存储100个数字，如果你使用前面ArrayList或者数组来存储，而不是哈希表的话，在内存中连续的开辟一个空间用来存放数据，这似乎是可以的，但是一旦要是查找你就不行了。假设你要查找的数据在第100个位置，又或者说是不存在的，但你还是得从头开始查找，这样太浪费时间了。</p><p>那么如何利用哈希表来存储上述数据呢？我们可以这样：在内存中开辟3个区域来进行存放，同时为这3个区域进行编号和命名为桶0，桶1，桶2。然后我们制定一些规则用于桶里面数据的存放，而这些规则就是hashCode。假设我们定义的hashCode为n%3也就是利用数对3进行取余，来进行判断。那么桶0，桶1，桶2存放的数据分别是3的倍数，对3取余数加1，对3取余数加2。</p><p>有了这样的存储结构，我们首先是判断这个数是不是在这个桶里，然后是在哪个桶里，然后就去遍历这个桶里的元素。判断元素在哪个桶里，我们使用的是hashCode()方法，而判断桶里哪一个元素是我们要找的，则是使用equals()方法。这种方法真的好快。</p><p>下面是系统生成的equals方法，我觉得很麻烦，那么你自己是可以重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">Cat other = (Cat) obj;</span><br><span class="line">if (month != other.month)</span><br><span class="line">return false;</span><br><span class="line">if (name == null) &#123;</span><br><span class="line">if (other.name != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!name.equals(other.name))</span><br><span class="line">return false;</span><br><span class="line">if (species == null) &#123;</span><br><span class="line">if (other.species != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!species.equals(other.species))</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写后的equals方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if(this==obj) // 判断对象是否相等，相等则返回true，没必要继续比较属性</span><br><span class="line">return true;</span><br><span class="line">if (obj.getClass()==Cat.class) // 判断obj是否是Cat类的对象，是进行强制转换，进行对象属性的比较</span><br><span class="line">&#123;</span><br><span class="line">Cat cat = (Cat)obj;</span><br><span class="line">    return (cat.getName().equals(name))&amp;&amp;(cat.getMonth()==month)&amp;&amp;(cat.getSpecies().equals(species));</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写了这两个方法以后，现在你再来运行我们的测试类，你会发现花花这个重复对象是不能再次添加进去了。</p><p>现在我们想查找花花的信息，我们有多种方式，第一种是通过花花这个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面查找花花的信息并进行输出</span><br><span class="line">if(hset.contains(huahua)) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(huahua);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;对不起，花花没有找到&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种是通过花花的名字来查找花花的信息并进行输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面使用名字来查找花花的信息并进行输出</span><br><span class="line">boolean flag =false;</span><br><span class="line">its = hset.iterator();</span><br><span class="line">Cat cat =null ;</span><br><span class="line">while(its.hasNext()) &#123;  // 判断是否有下一个对象</span><br><span class="line">                cat=(Cat)its.next();    // 输出下一个对象的信息</span><br><span class="line">if(cat.getName().equals(&quot;花花&quot;)) &#123;</span><br><span class="line">flag =true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(cat);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;花花没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说完了hsahset，接下来我们来聊聊map的那些事。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map中的数据是以键值对( key-value )的形式存储的，这个和Python中的dict（字典）<br>很相似。</p><p>key-value以Entry类型的对象实例存在，而MAp.Entry本身也是一个接口；你可以通过key值来快速地查找value的值。</p><p>一个key-value的映射不能包含重复的键（Key的值必须是唯一的），但是Value是可以重复的。每个键最多只能映射到一个值。</p><p>同样这个Map接口中最常用的实现类是HashMap类，我们前面说过HashSet是基于HashMap而实现的。</p><p>HashMap是基于哈希表的Map接口的实现，它允许使用null值和null键（但是只能有一个）</p><p>key值不允许重复，HashMap中的Entry对象是无序排列的。</p><p>Map接口，HashSet 泛型有一个类，Map&lt;&gt;后可以有key的类型以及Value的类型。</p><p>entrySet获取键值对所有的内容，你可以通过get(key)取Value。keySet取出所有key值。HashMap中使用put添加元素，remove根据key值来移除元素。</p><p>HashMap中构造方法，默认容量16，加载因,0.75 ；你可以使用已存在map集合创建HashMap。</p><p>关于这一块，大家还是多看看api文档，多自己动手操作吧。</p><p>需求：完成一个类似字典的功能：<br>1、将单词以及单词的注释存储到HashMap中；<br>2、显示HashMap中的内容；<br>3、查找某个单词的注释并显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class DictionaryDemoTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String,String&gt; animal =new HashMap&lt;String,String&gt;();</span><br><span class="line">System.out.println(&quot;请输入三组单词对应的注释，并存放到HashMap当中：&quot;);</span><br><span class="line">Scanner console =new Scanner(System.in);</span><br><span class="line">int i=0;</span><br><span class="line">while(i&lt;3) &#123;</span><br><span class="line">System.out.println(&quot;请输入key值(单词)：&quot;);</span><br><span class="line">String key =console.next();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入value值(注释)：&quot;);</span><br><span class="line">String value =console.next();</span><br><span class="line">animal.put(key, value);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印输出value的值（使用迭代器）</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">System.out.println(&quot;使用迭代器输出所有的value的值：&quot;);</span><br><span class="line">Iterator&lt;String&gt; it =animal.values().iterator();</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 打印输出key和value的值</span><br><span class="line">// 通过entrySet方法得到key-value</span><br><span class="line">System.out.println(&quot;通过entrySet方法得到key-value：&quot;);</span><br><span class="line">Set&lt;Entry&lt;String,String&gt;&gt; entrySet =animal.entrySet();// 使用增强型for循环进行遍历</span><br><span class="line">for(Entry&lt;String,String&gt; entryset:entrySet) &#123;</span><br><span class="line">System.out.print(entryset.getKey()+&quot;-&quot;);</span><br><span class="line">System.out.println(entryset.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 通过单词找到注释并输出</span><br><span class="line">// 使用KeySet方法</span><br><span class="line">System.out.println(&quot;请输入你要查找的key(单词)&quot;);</span><br><span class="line">String keySearch =console.next();</span><br><span class="line">// 1、取得KeySet</span><br><span class="line">Set&lt;String&gt; KeySet =animal.keySet();</span><br><span class="line">//2、遍历KeySet</span><br><span class="line">boolean flag =false;</span><br><span class="line">for(String key:KeySet) &#123;</span><br><span class="line">if(key.equals(keySearch)) &#123;</span><br><span class="line">System.out.println(&quot;找到了&quot;+&quot;键值对为：&quot;+key+&quot;-&quot;+animal.get(key));</span><br><span class="line">flag=true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!flag) &#123;</span><br><span class="line">System.out.println(&quot;对不起，没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们再来看一个例子：商品信息管理的HashMap实例。</p><p>需求：使用HashMap対商品信息迸行管理：其中key是商品编号, value是商品对象；<br>你需要对HashMap中的商品信息迸行増、刪、改、査操作。</p><p>要求：分析商品信息类:<br>属性：商品编号: id；商品名称: name；商品价格: price<br>方法：构造方法，获取和设置属性值的方法和其他方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">float goodsPrice = console.nextFloat();</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是初始的代码，这个代码尽管能运行，但是实际上运行的问题还是很多的：<br>商品编号不可以重复（后面对前面的信息进行了覆盖）；类型输入错误。接下来我们就对这些进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.InputMismatchException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">// 判断商品编号id是否存在</span><br><span class="line">if(goodsMap.containsKey(goodsId)) &#123;</span><br><span class="line">System.out.println(&quot;该商品编号已经存在，请重新输入&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line"></span><br><span class="line">float goodsPrice = 0;</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">try &#123;</span><br><span class="line"> goodsPrice = console.nextFloat();</span><br><span class="line">&#125;catch(InputMismatchException e) &#123;</span><br><span class="line">System.out.println(&quot;商品价格的格式不准确，请输入数值型数据&quot;);</span><br><span class="line">console.next();</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9916f2753ebb5bf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们通过这张图片，来简单的对集合进行一下总结。</p><p>我们知道Collection这个接口是有3个实现接口的，list，queue和set，而每个接口下面都有其实现的类。</p><p>Arraylist：底层由数组实现，它的元素是有序且可以重复的，它可以动态增长，以满足应用程序的需求。值得注意的是，ArrayList的元素值可以为null。</p><p>HashSet：是Set接口的实现类，它的元素是无序且不可以重复的，不过只允许一个null元素</p><p>HashMap：以键值对存储的数据，里面的键不能重复，但是允许使用null值和null键 。HashMap中的Entry对象(键值对)是无序排列的。</p><p>也就是说上面3个只有第一个是有序的，其它两个都是无序的。</p><p>Iterator (迭代器) ：Iterator接口以统一的方式对各种集合元素进行遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it=set.iterator();</span><br><span class="line"></span><br><span class="line">while(it.hasNext())&#123;  // 判断迭代器下一个是否有内容</span><br><span class="line"> System.out.print(it.next()+&quot;  &quot;);   // 取出存在的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在String对象比较的是按照ASCII值进行对比的，如果要比较我们自己定义的类呢？就必须重写我们的hashCode()方法和equals方法。如果两者的hashCode不同，那肯定不是一个对象，后面不需要使用equals方法；如果hashCode相同，我们再去调用equals方法，比较对象的其他属性或方法是否相同。</p><p>本来这里应该介绍泛型的，但是考虑到篇幅的原因，下次再介绍。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（六）：包装类和多线程</title>
      <link href="/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。</p><p>那么我们如何让它和我们的对象一样，具有属性和方法呢？这里你就要用到包装类了。</p><p>包装类的产生就是为了解决基本数据类型存在的上述问题。通过包装类可以让基本数据类型获取对象一样的特征，拥有属性方法，行使对象一样的权益，从而完成对象化交互。</p><p>包装类与基本数据类型之间的对应关系，见下面的表格：<br>基本数据类型| 对应的包装类| 说明</p><ul><li>| :-: |-:<br>byte|    Byte|原始大写<br>short    |Short|原始大写<br>int    |Integer|变形<br>long|    Long|原始大写<br>float    |Float|原始大写<br>double|    Double|原始大写<br>char    |Character|变形<br>boolean    |Boolean|原始大写<br>注意：只有int 和char其基本数据类型与对应的包装类有一个变形以外，其余的都是其首字母的大写而已。</li></ul><p>所有的包装类都存在于java.lang中，而且都是被final关键字所修饰，也就是说所有的包装类是没有子类的，不可以被继承的。</p><p> 所有的数值型（byte,short,int,long,float,double,）都是继承自Number的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1d47a9ad1455103a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>余下的char 和 boolean是继承Object类的：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1f2a9cbdf0c10741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b10919e52363d087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="基本数据类型和包装型之间的转换"><a href="#基本数据类型和包装型之间的转换" class="headerlink" title="基本数据类型和包装型之间的转换"></a>基本数据类型和包装型之间的转换</h2><p>基本数据类型—–》包装型（装箱）；<br>包装型—–》基本数据类型（拆箱）；</p><h3 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h3><p>装箱：把基本数据类型转换成包装类，有自动装箱和手动装箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 自动装箱</span><br><span class="line">int a1 =1;</span><br><span class="line">Integer a2=a1;</span><br><span class="line"></span><br><span class="line">// 手动装箱</span><br><span class="line">Integer a3 =new Integer(a1);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;基本数据类型a1的值是：&quot;+a1);</span><br><span class="line">System.out.println(&quot;Integer类a2的值是：&quot;+a2);</span><br><span class="line">System.out.println(&quot;Integer类a3的值是：&quot;+a3);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">基本数据类型a1的值是：1</span><br><span class="line">Integer类a2的值是：1</span><br><span class="line">Integer类a3的值是：1</span><br></pre></td></tr></table></figure></p><h3 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h3><p>拆箱：把包装类转换成基本数据类型，也有自动拆箱和手动拆箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 自动拆箱</span><br><span class="line"></span><br><span class="line">int a4 = a1;</span><br><span class="line"></span><br><span class="line">// 手动拆箱</span><br><span class="line">Integer a5 = a3.intValue();</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">System.out.println(&quot;Interger：&quot; + a1);</span><br><span class="line">System.out.println(&quot;基本数据类型a4是：&quot; + a4);</span><br><span class="line">System.out.println(&quot;手动intValue：&quot; + a5);</span><br><span class="line"></span><br><span class="line">double a6 = a2.doubleValue();</span><br><span class="line">System.out.println(&quot;手动拆箱 double: &quot;+a6);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Interger：1</span><br><span class="line">基本数据类型a4是：1</span><br><span class="line">手动intValue：1</span><br><span class="line">手动拆箱 double: 1.0</span><br></pre></td></tr></table></figure></p><h3 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 基本数据类型转换为字符串</span><br><span class="line"></span><br><span class="line">// 将整型转换为字符串</span><br><span class="line">int a1 =9;</span><br><span class="line">String a2 =Integer.toString(a1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">System.out.println(&quot;int类型转换为String类型对象a2的值：&quot;+a2);</span><br><span class="line">System.out.println(&quot;******************************&quot;);</span><br><span class="line"></span><br><span class="line">//字符串转换为基本数据类型</span><br><span class="line">// 1、包装类的parse方法</span><br><span class="line">int a3 =Integer.parseInt(a2);</span><br><span class="line"></span><br><span class="line">//2、包装类的valueOf方法，现将字符串转换为包装类，再通过自动拆箱完成基本数据类型的转换</span><br><span class="line">int a4 =Integer.valueOf(a2);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a3的值：&quot;+a3);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a4的值：&quot;+a4);</span><br></pre></td></tr></table></figure><p>总结一下，你可以通过toString方法将基本数据类型转换为字符串。</p><p>同样可以通过Parse和valueOf将字符串转换为基本数据类型。需要注意的是，valueOf是对Parse的封装。</p><h3 id="包装类的几点说明"><a href="#包装类的几点说明" class="headerlink" title="包装类的几点说明"></a>包装类的几点说明</h3><p>我们前面好像有说过基本数据类型的默认值，这里重新贴一下：</p><table><thead><tr><th>基本数据类型</th><th style="text-align:center">默认值</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td>byte</td><td style="text-align:center">0</td></tr><tr><td>short</td><td style="text-align:center">0</td></tr><tr><td>int</td><td style="text-align:center">0</td></tr><tr><td>long</td><td style="text-align:center">0L</td></tr><tr><td>float</td><td style="text-align:center">0.0f</td></tr><tr><td>double</td><td style="text-align:center">0.0d</td></tr><tr><td>char</td><td style="text-align:center">‘\u0000’</td><td style="text-align:right">\u是指Unicode编码</td></tr><tr><td>boolean</td><td style="text-align:center">false</td></tr></tbody></table><p>那么现在问题来了，我们定义一个Integer类型的对象one ,它的初始值是不是也是0呢?答案不是0,而是null，因为此时Integer和String一样，都是类，其初始值为null。</p><h3 id="包装类的对象信息"><a href="#包装类的对象信息" class="headerlink" title="包装类的对象信息"></a>包装类的对象信息</h3><p>我们先来看一段代码，你先试着猜一下它的运行结果，然后参看输出结果，看看有什么体会：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ChangLiangTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Integer one =new Integer(100);</span><br><span class="line"></span><br><span class="line">Integer two =new Integer(100);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;one==two的结果：&quot;+(one==two));  //1</span><br><span class="line"></span><br><span class="line">Integer three =100;</span><br><span class="line">System.out.println(&quot;three==100的结果：&quot;+(three==100));  //2</span><br><span class="line"></span><br><span class="line">Integer four =100;</span><br><span class="line">System.out.println(&quot;three==four的结果：&quot;+(three==four));  //3</span><br><span class="line"></span><br><span class="line">Integer five =200;</span><br><span class="line">System.out.println(&quot;five==200的结果：&quot;+(five==200));  //4</span><br><span class="line"></span><br><span class="line">Integer six =200;</span><br><span class="line">System.out.println(&quot;five==six的结果：&quot;+(five==six));  //5</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在前面说过，使用new关键词就是直接在内存中开辟一个新的空间，one和two 只是值相等，内存中地址的引用并不相同，因此1输出的结果必然是false。</p><p><code>Integer three =100</code>其实是自动装箱，而后面的<code>three =100</code>其实是自动拆箱，实际上执行的是<code>Integer three =Integer.valueOf(100)</code>，最后比较的则是2个int类型的值是否相等，因此结果必然为true。</p><p>前面说过<code>Integer four =100</code>是自动装箱，但是它实际上执行的是<code>Integer four=nteger.valueOf(100);</code>。而valueOf会自动缓存值（在缓存区或者说对象池里面），也就是说当-128&lt;参数&lt;127的时候，该参数会直接从缓存区获取。因此两者比较的是来自缓存区的同一块地址。显然该结果是true。</p><p>同样<code>Integer five =200</code>是自动装箱，后面<code>five==200</code>自动拆箱，因此这里比较的则是2个int类型的值是否相等。显然该结果是true。</p><p>而最后一个则是因为参数200，它已经超出-128&lt;参数&lt;127这个范围，因此会直接实例化new 一个Integer，所以比较的是两个内存中的对象，显然结果是false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 输出结果：</span><br><span class="line">one==two的结果：false</span><br><span class="line">three==100的结果：true</span><br><span class="line">three==four的结果：true</span><br><span class="line">five==200的结果：true</span><br><span class="line">five==six的结果：false</span><br></pre></td></tr></table></figure><p>也就是说，当参数在-128 到 128之间才能从对象池中进行获取，超出则是不可以的，需要new了。</p><p>在java基本数据类型的包装类中除了 float 和 double都是可以应用对象常量池概念的。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-df9c491910b88071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面那样说你可能还不明白，我举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Double d1 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==100的结果是：&quot;+(d1==100));  //1</span><br><span class="line"></span><br><span class="line">Double d2 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==d2的结果是：&quot;+(d1==d2));  //2</span><br></pre></td></tr></table></figure></p><p>1的输出结果为true这是没有任何问题的，但是2的输出结果是false，因为float 和 double是不适用于对象常量池的。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>在说多线程之前，我么先来了解什么是进程？</p><p>进程就是可执行程序并存放在计算机存储器的一个指令序列，它是一个动态执行的过程。</p><p>线程是比进程还要小的运行单位，一个进程包含多个线程，你可以把线程看做一个子程序。</p><p>我们知道程序的运行是靠CPU的，那么在只有一个CPU情况下，如何才能保证程序的正常运行呢？我们可以把CPU的运行时间进行分片，根据时间片来进行任务的轮转执行，但由于时间片的长度太短了，以至于我们认为所有任务都是同时进行的。</p><h3 id="Thread和Runnable接口介绍"><a href="#Thread和Runnable接口介绍" class="headerlink" title="Thread和Runnable接口介绍"></a>Thread和Runnable接口介绍</h3><p>如何进行线程的创建呢？在Java里面，你可以通过创建一个Thread类或者一个Thread子类的对象来创建线程。也可以创建一个实现Runnable接口的类的对象。这两种都是可以的。</p><p>Thread是-个线程类，位于java.lang包下面，你可以去api文档进行查看，这里列举部分构造方法：<br>构造方法    | 说明| 备注</p><ul><li>| :-: | -:<br>Thread()|    创建一个线程对象|<br>Thread(String name)    |创建一个具有指定名称的线程对象|<br>Thread(Runnable target)    |创建一个基于Runnable接口实现类的线程对象|<br>Thread(Runnable target,String name)|    创建一个基于Runnable接口实现类,并且具有指定名称的线程对象。|</li></ul><p>以及Thread类的常用方法：<br>方法    | 说明| 备注</p><ul><li>| :-: | -:<br>public void run()    |线程相关的代码写在该方法中，一般需要重写<br>public void start()    |启动线程的方法<br>public static void sleep(long m)    |线程休眠m毫秒的方法<br>public void join()    |优先执行调用join()方法的线程</li></ul><p>你只需要记住，我们所有线程实现的代码都必须放在run方法里面，自然run方法中的代码被称为线程体。</p><p>还需要注意的是Runnable接口，它只有一个方法run()方法。你只需要记住Runnable是Java中用以实现线程的接口，任何实现线程功能的类都必须实现Runnable接口。</p><p>你可以点击这里查看<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Java8 api</a>，获取更多信息。</p><h3 id="通过Thread类创建线程"><a href="#通过Thread类创建线程" class="headerlink" title="通过Thread类创建线程"></a>通过Thread类创建线程</h3><p>在api里面，我们知道通过Thread类是可以创建线程的。那么我们现在就来通过继承Thread类的方式创建线程类，并重写run()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadTestDemo extends Thread &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(getName()+&quot;该线程正在执行！&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//System.out.println(&quot;主线程1正在执行&quot;);</span><br><span class="line">ThreadTestDemo ttd =new ThreadTestDemo();</span><br><span class="line">//ttd.start();  // 启动线程</span><br><span class="line">ttd.start();   //线程只能启动一次，不能多次启动</span><br><span class="line">//System.out.println(&quot;主线程2正在执行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大家知道除了我们刚才自定义的线程，其实还有一个主线程。现在我们自己来定义两个线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread &#123;</span><br><span class="line">public MyThread(String name) &#123;</span><br><span class="line">super(name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(getName()+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">public class ThreadTestTwo &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">MyThread t1 =new MyThread(&quot;线程1&quot;);</span><br><span class="line">MyThread t2 =new MyThread(&quot;线程2&quot;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个其实和我们上面的例子差别不是很大，只是现在我们定义了两个线程，但是主线程依然存在。运行一下，你会发现你每次的运行结果都是不相同的。对的，无论是线程还是进程，它们的运行顺序都是由系统来调度的，不是由程序员所能决定的（注意这是没有附加方法的情况，后面会说线程间的通信）</p><h3 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h3><p>现在你可能有一个疑问，为什么要实现Runnable接口呢又或者说为什么要实现Runnable接口创建线程呢?</p><p>答案你肯定知道，因为Java是单继承的，不支持多继承。现在问题来了，如果我现在定义的类已经继承了一个类，那么就不能通过继承Thread类来创建线程了？</p><p>又或者说，我不想重写Thread类的其他方法，只想使用run方法，这时候怎么办呢？</p><p>这时候Runnable接口就派上用场了。（前面说过Runnable接口只有一个run方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr2);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个输出结果也是随机的，但都会输出打印20个线程。现在我们对其修改一下，我们看一下，是不是多个线程可以共享同一个变量（言外之意，是不是只能打印输出11个线程，还有主线程）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">int i=0;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">for(;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">//TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#输出结果</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br></pre></td></tr></table></figure></p><p>结果是的，所以也就是说线程之间是可以共享成员变量的。</p><h3 id="线程的状态和生命周期"><a href="#线程的状态和生命周期" class="headerlink" title="线程的状态和生命周期"></a>线程的状态和生命周期</h3><p>通常而言，线程是有五个状态的，分别是：</p><p>新建(New)：创建一个Thread或Thread子类的对象时就会进入新建状态。</p><p>可运行(Runnable)： 调用start方法是进入可运行状态（而不是立即执行），就绪状态</p><p>正在运行(Running)： 一个Thread获取了cpu使用权就进入了正在运行状态。记住只有可运行状态才能进入到正在运行状态，其他的不可以。</p><p>阻塞(Blocked): 不再执行，缺少资源。</p><p>终止状态(Dead)：这个就是线程的停止运行了。</p><p>所谓的线程的生命周期，说白了就是这五个过程的相互转换而已，不过有些过程是双向的，有些则是单向的。我找了一张图，便于大家的理解：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d0aaaeef0cd473d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面简单说一下这个图的意思：</p><p>当你创建线程对象以后，该线程就变成了新建(New)状态，如果该线程调用start()方法，那么就变成了可运行(Runnable)状态；如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于可运行(Runnable)状态，如果此时该线程获取到了cpu的使用权，那么该线程就开心的进入到了正在运行(Running)状态；如果该线程调用了yield()方法，或者是时间片用完了，又回到了可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于正在运行(Running)状态，如果此时调用join()，wait()，sleep()或者I/O操作时，均会使该线程进入阻塞(Blocked)状态；如果此时该线程正常执行完毕或者异常终止，又或者调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于阻塞(Blocked)状态，如果此时等待执行join()方法的线程执行完毕；或者调用notify()或notifyall()方法；sleep()超时；I/O请求完成时，线程就会进入可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>需要说明的是，stop方法已经过时了，并不提倡大家去用。</p><p>下面简单介绍几个方法的使用。</p><h3 id="sleep方法的使用"><a href="#sleep方法的使用" class="headerlink" title="sleep方法的使用"></a>sleep方法的使用</h3><p>这个sleep方法是Thread类的一个方法，同时也是一个静态方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void sleep(long millis)</span><br></pre></td></tr></table></figure></p><p>sleep方法的作用是在指定的毫秒数内让正在执行的线程休眠(暂停执行)；其中的参数为休眠时间，单位是毫秒。</p><p>也就是说等休眠时间过了以后，程序才会继续执行。当你需要页面刷新或者计时的时候，这时候sleep就派上用场了。</p><h3 id="join方法的使用"><a href="#join方法的使用" class="headerlink" title="join方法的使用"></a>join方法的使用</h3><p>同样这个join方法也是Thread类的一个方法，但它是一个实例方法，因为有final的修饰，因此这个方法是不能被重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join()</span><br></pre></td></tr></table></figure></p><p>join方法的作用是等待调用该方法的线程结束后才能执行，是用来抢占资源优先执行的。也就是说如果某个线程调用了这个join方法，那么后面的线程都必须等这个线程运行完成后才能运行。</p><p>同时join方法还有一个带参数的同名方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join(long millis)</span><br></pre></td></tr></table></figure></p><p>带参数的join()方法的作用是等待该线程终止的最长时间为millis，这个参数的单位是毫秒。</p><p>也就是说没有参数的join方法是谁调用了它，它就开始执行，而后面的程序就必须等它执行完毕以后才能继续进行；有参数的join方法就是谁调用了它，在规定的毫秒以内无论你有没有执行完毕，只要时间一过，后面的程序就会开始执行。说白了，这是固定时间等待和永久时间等待而已。</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>现在你有一个想法，就是是否可以通过设置让某个线程优先执行呢?使用前面的join()方法尽管能完成部分要求，但还是想追求更加简单的方法。</p><p>这时候Java为线程类提供了10个优先级，优先级用整数1-10表示，超过该数字范围会抛出异常。</p><p>我们的主线程默认优先级为5，数字越大表示的优先级越高，当然你还可以使用优先级常量来进行优先级的表示：</p><ul><li>MAX_PRIORITY :线程的最高优先级10</li><li>MIN_PRIORITY :线程的最低优先级1</li><li>NORM_PRIORITY :线程的默认优先级5</li></ul><p>我们可以使用下面提供的方法来对优先级进行操作：</p><table><thead><tr><th>方法</th><th style="text-align:center">说明</th><th>备注</th></tr></thead><tbody><tr><td>public int getPriority()</td><td style="text-align:center">获取线程优先级的方法</td></tr><tr><td>public void setPriority(int newPriority)</td><td style="text-align:center">设置线程优先级的方法 </td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class MyThreadTestTwo extends Thread&#123;</span><br><span class="line">private String name;</span><br><span class="line">public MyThreadTestTwo(String name) &#123;</span><br><span class="line">this.name =name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(&quot;线程&quot;+name+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ThreadTestFive &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 获取主线程的优先级</span><br><span class="line">int mainPriority =Thread.currentThread().getPriority();</span><br><span class="line">System.out.println(&quot;主线程的优先级为：&quot;+mainPriority);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyThreadTestTwo tt1 =new MyThreadTestTwo(&quot;线程1&quot;);</span><br><span class="line">MyThreadTestTwo tt2 =new MyThreadTestTwo(&quot;线程2&quot;);</span><br><span class="line">tt1.setPriority(10);  //这与下面的代码的作用是一样的</span><br><span class="line">//tt1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">tt2.setPriority(1);</span><br><span class="line">//tt2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">tt1.start();</span><br><span class="line">tt2.start();</span><br><span class="line">//System.out.println(&quot;主线程1的优先级为：&quot;+tt1.getPriority());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你多运行上面的代码，你会发现并不是优先级大的线程先启动和执行。线程的执行和启动顺序，除了和优先级大小有关，还与操作系统调度，当前资源等有很大关系，是具有很强的随机性。</p><p><strong>总结一下：</strong></p><ul><li>各个线程是通过竞争CPU时间而获得运行机会的；</li><li>各线程什么时候得到CPU时间，占用多久，都是不可预测的；</li><li>一个正在运行的线程在什么地方被暂停是不确定的。</li></ul><p>也就是说到目前为止，我们还没有更好地办法来进行线程执行顺序的调度。</p><h3 id="银行存取钱业务"><a href="#银行存取钱业务" class="headerlink" title="银行存取钱业务"></a>银行存取钱业务</h3><p>如果按照我们前面所说的线程执行顺序是随机的，而且运行的线程在什么地方被暂停是不确定的话（的确，这是真的情况），那么银行就会出现一个非常有意思的现象：你存钱和取钱的总金额会发生丢失的情况：假设你开始银行账户有2000块钱，你取了100，存进去200，余额是不是2100块，但是有可能你的余额是2000块，你的余额更新失败了。这是我们不想看到的情况，但实际上这种情况是存在的，但是银行通过一些方法，杜绝了这种事情的发送，现在我们就来看看这些方法。</p><p>为了保证在存款或取款的时候，不允许其他线程对帐户余额进行操作，银行会将操作对象进行锁定，也就是同一时刻只允许一个线程进行运行。</p><p>也其实就是使用了synchronized关键字，也就是线程同步。synchronized关键字可以用在：成员方法，静态方法和语句块里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void Test()&#123;&#125;</span><br><span class="line">public static synchronized void Test()&#123;&#125;</span><br><span class="line">synchronized(obj)&#123;......&#125;</span><br></pre></td></tr></table></figure><p>使用关键字synchronized可以确保共享对象在同一时刻只能被一个线程访问，这种机制称为线程同步或者线程互斥。</p><h2 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h2><p>线程间通信的常用方法：</p><ul><li>wait方法：中断方法的执行，使线程等待。</li><li>notify()方法: 唤醒处于等待的某一个线程,使其结束等待</li><li>notifyAll()方法: 唤醒所有处于等待的线程,使它们结束等待</li></ul><p>建议使用notifyAll()，因为假如唤醒的单个线程还是我们刚休眠的生产线程，那么就会继续死锁，所以建议直接所有的等待线程。</p><p><a href="https://www.cnblogs.com/IUbanana/p/7067362.html" target="_blank" rel="noopener">详细介绍Java虚拟机（JVM）</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（五）：异常和字符串</title>
      <link href="/2018/08/03/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/08/03/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常:我们也称之为意外或者例外，它本质上就是程序上的错误。那么什么是错误呢？</p><p>错误如果用定义来说，我可能说不清楚。但是在我们编写程序的过程中，错误是会经常发生的，通常会发生在编译期间和运行期间。（这也就是编译型语言和解释型语言的一个非常大的不同，编译型语言会多一个编译过程，所以出错误的概率就相对低很多）</p><p>常见的编译错误包括：括号没有正常的配对; 语句结束后少写了分号;关键字拼写错误，通常这种错误编译器会帮助我们进行检查，但是运行期间的错误，编译器就无能为力了，只能靠程序员自己了。</p><p>常见的运行时错误有：使用空的对象引用调用方法；数组访问时下标越界；算术运算时除数为0；类型转换时无法正常转换等。这些错误在编译时是没有错误提示的，只能靠自己把握了。</p><p>在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。</p><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p>异常可以理解为一种事件，它的发生会影响正常的程序运行流程。在Java中你可以通过Throwable来进行各种异常信息的描述。</p><p>Throwable是根类，它具有2个子类：Error和Exception。</p><p>Error：程序无法处理的错误，表示运行应用程序中较严重问题。通常是Java虚拟机问题(比如虚拟机错误：VirtualMachineError；内存溢出：OutOfMemoryError；线程死锁 ：ThreadDeath等)；它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p><p>对于设计合理的应用程序来说,即使确实发生了错误,本质上也不应该试图去处理它所引起的异常状况。</p><p>Exception是程序本身可以处理的异常，我们通常所说的异常处理就是处理这种类型的异常。</p><p>Exception又可以分为两大类:：非检查异常(Unchecked Exception)和检查异常(Checked Exception)</p><p>非检查异常：它是编译器不要求强制处置的异常，通常包括：RuntimeException（运行时异常）以及它的子类:：NullPointerException（空指针异常）；ArrayIndexOutOfBoundsException（数组下标越界异常 ）；ArithmeticException（算数异常）和ClassCastException（类型转换异常）等。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bd8351144bfe45ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>java程序在编译阶段是不会去检查上面这些RuntimeException（运行时异常）异常的。</p><p>而检查异常则是编译器要求必须处置的异常，比如: IO异常 IOException; SQL异常 SQLException等。</p><h3 id="异常处理分类"><a href="#异常处理分类" class="headerlink" title="异常处理分类"></a>异常处理分类</h3><p>在Java应用程序中,异常处理机制为: 抛出异常和捕捉异常。异常必须要先被抛出，然后才能被捕获。</p><p>所谓抛出异常，它是指当一个方法当中出现异常，方法会去创建异常对象，并去交付给运行时系统来进行处理。</p><p>异常对象则是异常类型以及异常出现时的程序状态。</p><p>当程序运行时系统捕捉到这个异常，此时会去寻找合适的处理器，如果找到了，就会执行处理器的相关逻辑；如果始终没找到，程序就会终止运行。</p><p>对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同。</p><p>在Java中规定: 对于可查异常（检查异常(Checked Exception)）必须捕捉或者声明抛出；同时允许忽略不可查的RuntimeException(含子类)和Error(含子类)。</p><p>那么在java中，如何抛出异常和捕获异常呢？可以通过5个关键字来实现:：try catch finally throw throws。</p><p>try：将执行可能会产生异常的代码放在try里面；</p><p>catch：用来捕获异常；</p><p>finally：无论是否发生异常，finally里面的代码总能执行</p><p>try…catch…finally是一组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">          //代码段1</span><br><span class="line">          //产生异常的代码段2</span><br><span class="line">        &#125;catch (异常类型 ex) &#123;</span><br><span class="line">          //对异常进行处理的代码段3</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">          //代码段4</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>try代码块后可接零个或多个catch代码块，但是如果没有catch块，那么必须跟一个finally块。说白了就是try要和catch或finally组合使用，不能单独使用。你知道的，如果没产生异常的代码，你捕获什么？</p><p>如果有多个catch，记住要使用Exception放在最后一个，因为这个里面包含所有的你目前还未发现的异常。多个catch异常捕获的范围要满足自上而下，逐次增大的原则，否则小范围的异常会被大范围的覆盖哦。</p><p>一般情况下，finally里面的代码都会运行，但有时候你想提前停止代码运行，可以使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.exit(1);</span><br></pre></td></tr></table></figure></p><p>里面的状态码0代表正常退出,非0代表非正常退出（这里用了1代表，终止当前虚拟机的运行，使得程序无条件停止运行）。</p><p>也就是说，如果程序按照正常逻辑执行需要退出时，可以调用System.exit(0)。如果发生异常而退出，比如在catch块使用，那么会调用System.exit(1)。</p><h3 id="return关键字在异常处理中的作用"><a href="#return关键字在异常处理中的作用" class="headerlink" title="return关键字在异常处理中的作用"></a>return关键字在异常处理中的作用</h3><p>我们只需要记住一点：不管前面有多少个return，只要finally中有return，那么最终返回的就是finally中return的返回值。（前面的return则是按照异常捕获的顺序来返回）</p><h3 id="使用throws声明异常类型"><a href="#使用throws声明异常类型" class="headerlink" title="使用throws声明异常类型"></a>使用throws声明异常类型</h3><p><strong>throws：自动抛出异常类型，一次抛出很多个（多个之间用逗号隔开），在方法定义的时候被使用</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws Exception1,Exception2,...,ExceptionN &#123;</span><br><span class="line">    //可能产生异常的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说，如果一个方法可能会出现异常，但没有能力处理这种异常，那么我们就可以在方法声明的时候使用throws来声明抛出异常。</p><p>举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static int test() throws ArithmeticException &#123;  //声明可能会引发的异常，这里只声明异常，不去处理，谁调用谁处理</span><br><span class="line">System.out.println(&quot;====运算开始====&quot;);</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">System.out.print(&quot;请输入第一个数字: &quot;);</span><br><span class="line">int one = scanner.nextInt();</span><br><span class="line">System.out.print(&quot;请输入第二个数字: &quot;);</span><br><span class="line">int two = scanner.nextInt();</span><br><span class="line">System.out.println(&quot;====运算结束====&quot;);</span><br><span class="line">return one / two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们调用的时候来进行异常处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">int result = test();</span><br><span class="line">System.out.println(&quot;one和two的商是：&quot; + result);</span><br><span class="line">&#125; catch (ArithmeticException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(&quot;除数不能为0&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意你可以在throws声明异常的时候，尽量多考虑一些情况，然后可以在调用的时候利用surround with来进行异常的快速生成处理，这里快速生成的异常类型和你在throws抛出的类型一致。</p><p>当然，你完全可以直接抛出Exception，那样调用的时候处理就只需要直接处理Exception这个了。</p><p>还需要注意的一点就是，当throws后面直接跟Exception的时候，编译器会提示你当前方法可能会产生异常，因为Exception这个父类包含了出现检查异常的情况。但是如果你不是Exception，而是前面所列举的非检查异常，那么编译器就不会给你报错的。</p><p>说明白编译器只会对检查异常进行报错处理，但是对于非检查异常是不进行报错处理的。如果非要有一种对于非检查异常类似的报错处理，你可以使用文档注释来达到这个目的，但是报错处理不是编译器完成的，而是程序员自己发现的。</p><h3 id="使用throw手动抛出异常"><a href="#使用throw手动抛出异常" class="headerlink" title="使用throw手动抛出异常"></a>使用throw手动抛出异常</h3><p><strong>throw：手动抛出异常，一次只能抛出一个异常，在方法体内被使用</strong>：<br>throw用来抛出一个异常，如: throw new IOException()；而且throw抛出的只能是可Throwable类或者其子类的实例对象，不能是自己定义的，如: throw new String(“出错啦”)，这种明显就是错误的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void method()&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    //代码段1</span><br><span class="line">  throw new 异常类型();</span><br><span class="line">  &#125; catch(异常类型 e)&#123;</span><br><span class="line">    //对异常进行处理的代码段2</span><br><span class="line">  &#125;</span><br><span class="line">finally&#123;</span><br><span class="line">// 需要执行的代码段3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你还可以，在抛出异常的地方通过throws关键字来标明异常的类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws 异常类型&#123;</span><br><span class="line">  //代码段1</span><br><span class="line">    throw new 异常类型();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：<br>1、通过try..catch包含throw语句，自己抛出异常，自己处理异常；<br>2.、通过throws在方法声明出抛出异常类型，谁调用谁处理，调用者可以自己处理，也可以继续上抛，此时可以抛出与throw对象相同的类型或者其父类（但是不能是其子类）。</p><p>你可以通过throws声明将要抛出何种类型的异常，并通过throw将产生的异常进行抛出。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>尽管我们使用Java内置的异常类可以描述在编程时出现的大部分异常情况，但是还是有一些情况我们难以处理，这时候我们可以自定义异常，用来描述特定情况下产生的异常类型。</p><p>所谓自定义异常，说白了就是定义一个类，去继承Throwable类或者它的子类。然后其他的就和我们前面说过的一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class CarTest extends Exception &#123;</span><br><span class="line">public CarTest() &#123;</span><br><span class="line">super(&quot;18岁以下，70岁以上的人不允许报考驾照&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testAge() throws CarTest&#123;</span><br><span class="line">System.out.println(&quot;请输入你的年龄：&quot;);</span><br><span class="line">Scanner input = new Scanner(System.in);</span><br><span class="line">int age = input.nextInt();</span><br><span class="line">if (age &lt; 18 || age &gt; 70) &#123;</span><br><span class="line">throw new CarTest();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;欢迎报考驾校&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testAge();</span><br><span class="line">&#125; catch (CarTeste) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">System.out.println(&quot;驾校前台人员不得办理相关业务&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>这个顾名思义就是一系列的异常，前面捕获到了异常自己不处理而是向后面抛出，从而形成异常链。</p><p>为了更好的说明，我找了一个例子，大家可以看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class TryDemoFive &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testone() throws HotelAgeTest &#123;</span><br><span class="line">throw new HotelAgeTest();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testthree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，testone手动抛出了一个异常，但是没有处理，而是向后抛出，testtwo虽然进行了处理，但是又抛出了一个新的异常，testthree也是这样，之后最后的main方法里对testthree的异常进行了处理，并且进行了输出。</p><p>所以这段代码的运行结果就是下面的结果，只打印输出了testthree的信息，其他却没有，实际上这就造成了前面异常信息的丢失：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 我是新产生的异常2</span><br><span class="line">at JavaExceptionTest.TryDemoFive.testthree(TryDemoFive.java:23)</span><br><span class="line">at JavaExceptionTest.TryDemoFive.main(TryDemoFive.java:29)</span><br></pre></td></tr></table></figure></p><p>那么如何解决这种异常的丢失呢？从而让异常链的情况为我们所知呢，你可以在构造方法中添加上一层异常e或者使用initCause(e)就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;,e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">//throw new Exception(&quot;我是新产生的异常2&quot;,e);</span><br><span class="line">Exception e1 =new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">e1.initCause(e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>也就是说，异常链将异常发生的原因一个传一个串起来，把底层的异常信息传给上层，这样逐层抛出。</p><h2 id="异常总结"><a href="#异常总结" class="headerlink" title="异常总结"></a>异常总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7ec06da956208712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在Java中, 通过Throwable及其子类描述各种不同的异常类型。其中这个Error是我们无法预测的，但是Exception却是我们可以避免的。Exception又分为2类，一个是运行时异常（非检查异常），这种编译器是不会给你报错的，另一种异常是则是编译器强制你去处理的异常。</p><p>几点建议：<br>1、处理运行时异常时,采用逻辑去合理规避同时辅助try-catch处理；<br>2、在多重catch块后面,可以加一个catch(Exception)来处理可能会被遗漏的异常；<br>3、对于不确定的代码,也可以加上try-catch ,处理潜在的异常；<br>4、尽量去处理异常,切忌只是简单的调用printStackTrace()去打印输出；<br>5、具体如何处理异常,要根据不同的业务需求和异常类型去决定；<br>6、尽量添加finally语句块去释放占用的资源，如关闭文件和数据库连接等。</p><p><strong>最后一点：当子类重写父类抛出异常的方法时,声明的异常必须是父类方法所声明异常的同类或子类。</strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>创建字符串的3种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 =&quot;hello world&quot;;</span><br><span class="line">String str2 =new String();</span><br><span class="line">String str3 =new String(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure></p><p>字符串的常用方法及说明：<br>返回类型| 方法| 说明</p><ul><li>| :-: | -:<br>int |  length() |     返回当前字符串的长度<br>int  | indexOf(int ch)     | 查找ch字符在该字符串中第一次出现的位置<br>int |  indexOf(String str)     | 查找str子字符串在该字符串中第一次出现的位置<br>int |  lastIndexOf(int ch)     | 查找ch字符在该字符串中最后一次出现的位置<br>int  | lastIndexOf(String str) |     查找str子字符串在该字符串中最后一次出现的位置<br>String  | substring(int beginIndex) | 获取从beginIndex位置开始到结束的子字符串<br>String  | substring(int beginIndex, int endIndex)     | 获取从beginIndex位置开始到endIndex位置的子字符串<br>String  | trim()     | 返回去除了前后空格的字符串<br>boolean  | equals(Object obj)     | 将该字符串与指定对象比较，返回true或false<br>String  | toLowerCase() |     将字符串转换为小写<br>String  | toUpperCase()     | 将字符串转换为大写<br>char |  charAt(int index) |     获取字符串中指定位置的字符<br>String [] |  split(String regex, int limit)     | 将字符串分割为子字符串，返回字符串数组<br>byte []  | getBytes()     | 将该字符串转换为byte数组</li></ul><h3 id="运算符与equals方法的区别"><a href="#运算符与equals方法的区别" class="headerlink" title="==运算符与equals方法的区别"></a>==运算符与equals方法的区别</h3><p>我们在前面也说过，==运算符比较的是对象在内存中的引用地址，而equals方法的用法就需要分情况了，如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因为这里谈的是字符串，因此可以说equals比较的是字符串的值是否相等。</p><p>内存空间：栈存放的是类的引用，常量池存放的是字符串常量，而堆里存放的则是通过new创建的字符串对象（在这里是这样的，我们这里只谈字符串）</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>String和StringBuilder的区别:：String是不可变的，而StringBuilder则是可变的，因此当频繁操作字符串时，建议使用StringBuilder。</p><p>有人就要问了，不是还有一个StringBuffer么，那这个跟前面的有啥区别么？其实StringBuilder和StringBuffer二者基本上是一样的，但是StringBuffer是线程安全的,，而StringBuilder则不是，因此也正是因为这样，所以StringBuilder性能略高一点。因为字符串处理一般都是单线程，所以我们使用StringBulider就行了。</p><p>StringBuilder常用方法<br>append()：在末尾增加内容；<br>delete()：删除内容；<br>insert()：插入内容；<br>length()：返回字符串长度；<br>replace()：替换内容。<br>这些方法和Python中的容器操作是很相似的，这里就不再举例说明了。</p><p>后面的内容等我有空再更新了，这次就说到这里，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（四）：单例模式和多态</title>
      <link href="/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%A4%9A%E6%80%81/"/>
      <url>/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>官方的解释是，设计模式是：一套被反复使用，多数人知晓的，经过分类编目，代码设计经验的总结。说人话就是：软件开发人员在软件开发过程中面临的一般问题的解决方案。</p><p>常见的设计模式可以参看这张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2a714e288d048e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们可以对其按照作用来进行分类:：<br>关注对象创建过程的：<strong>创建型模式</strong>；<br>类和对象组合：<strong>结构型模式</strong>；<br>对象之间的通信过程：<strong>行为型模式</strong>；</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8f3d74b6c145ed8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式: 一个类<strong>有且仅有</strong>一个实例,并且自行实例化向整个系统提供，它的目的就是使得类的一个对象成为该类系统中的唯一实例。</p><p>要点：</p><ol><li>某个类只能有一个实例;；</li><li>必须自行创建实例；<ol start="3"><li>必须自行向整个系统提供这个实例；</li></ol></li></ol><p>实现：<br>1、只提供<strong>私有</strong>的构造方法；<br>2、只含有一个该类的<strong>静态私有</strong>对象；<br>3、提供一个<strong>静态</strong>的<strong>公有方法</strong>用于创建、获取静态私有对象。</p><p>对于1的理解：private是访问限制能力最强的修饰符，只能在当前类内被使用。也就是说经过private修饰，该类的对象在类外无法通过new关键字直接实例化，这样可以做到限制类实例化产生；</p><p>对于2的理解：1可以实现有且仅有一个实例，static修饰的静态成员可以满足该类有且仅有一个，所有的对象都共享这一个静态成员；</p><p>对于3的理解：类似于封装，必须向外部系统提供唯一的公有访问方法。</p><p>在java中实现单例模式有2种方式：饿汉式和懒汉式。</p><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）如此看来确实挺饿的；</p><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）如此看来确实挺懒的。</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">// 饿汉式：创建对象实例的时候直接初始化；（空间换时间）</span><br><span class="line"></span><br><span class="line">public class SingletonOne &#123;</span><br><span class="line"></span><br><span class="line">//1、创建类中私有的构造方法</span><br><span class="line">private SingletonOne() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//2、创建该类型的私有静态实例</span><br><span class="line">private static SingletonOne instance = new SingletonOne();</span><br><span class="line"></span><br><span class="line">//3、创建公有的静态方法，返回静态实例对象</span><br><span class="line">public static SingletonOne getinstance() &#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleOneTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonOne one =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonOne two =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one==two);   //输出结果为true</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">//懒汉式：创建对象实例的时候并不初始化；（时间换空间）</span><br><span class="line"></span><br><span class="line">public class SingletonTwo &#123;</span><br><span class="line">// 1、创建类中私有的构造方法</span><br><span class="line">private SingletonTwo() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 2、创建静态的该类实例对象</span><br><span class="line">private static SingletonTwo instance = null;</span><br><span class="line"></span><br><span class="line">// 3、创建公有的静态方法，提供实例对象</span><br><span class="line">public static SingletonTwo getinstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">instance = new SingletonTwo();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的测试代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleTwoTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonTwo one = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonTwo two = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one == two);   //输出结果为true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="单例模式两种实现总结"><a href="#单例模式两种实现总结" class="headerlink" title="单例模式两种实现总结"></a>单例模式两种实现总结</h3><p>饿汉式在类加载时就创建实例，第一次加载速度快；<br>懒汉式在第一次使用时才进行实例化，第一次加载速度慢；</p><p>饿汉式：空间换时间<br>懒汉式：时间换空间</p><p>饿汉式，类在加载时进行了对象的实例化创建，即使多个进程进行并发操作，访问的实例也是唯一的，饿汉式线程安全。</p><p>懒汉式，第一次使用才会实例化，多个线程并发操作时，由于时间片的切换，可能导致线程风险。</p><p>但是懒汉式的线程危险是可以规避的，通过关键字Synchronized实现线程的锁定，也可以通过静态内部类和枚举保证操作时的线程唯一。</p><h3 id="单例模式优缺点及使用场景"><a href="#单例模式优缺点及使用场景" class="headerlink" title="单例模式优缺点及使用场景"></a>单例模式优缺点及使用场景</h3><p>单例模式的优点：<br>1、在内存中只有一个对象,节省内存空间；<br>2、避免频繁的创建销毁对象, 提高性能；<br>3、避免对共享资源的多重占用。</p><p>单例模式的缺点:<br>1、扩展比较困难；<br>2、如果实例化后的对象长期不利用,系统将默认为垃圾进行回收,造成对象状态丢失。</p><p>使用场景:<br>1、创建对象时占用资源过多,但同时又需要用到该类对象；<br>2、对系统内资源要求统一读写,如读写配置信息；<br>3、当多个实例存在可能引起程序逻辑错误,如号码生成器；</p><p>每一种设计模式都是针对场景，针对某种具体问题的，具体场景应当进行具体分析，选用合适的设计模式。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>终于开始进入多态的世界了，在这里你将全面了解多态的特点及使用。</p><p>多态你可以理解为不同类的对象对同一消息做出不同的响应。</p><p>一般而言，多态分为编译时多态和运行时多态这两种。</p><p>编译时多态：也称设计时多态，它是通过方法重载来实现的，编译器在编译状态可以进行不同行为的区分。</p><p>而运行时多态，则必须要求程序运行时，动态决定调用哪个方法。</p><p>我们通常在Java中的多态指的就是运行时多态。</p><p>实现多态的必要条件: 满足继承；父类引用指向子类对象</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>所谓的向上转型也指隐式转型（自动转型）。说通俗一点就是父类引用指向子类实例，它可以调用子类重写父类的方法以及父类派生的方法，但是无法调用子类特有方法。</p><p>举个例子，假如Dog这个类继承了我们Animal这个类，我们不仅可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog dog =new Dog();</span><br><span class="line">Animal animal =new Animal();</span><br></pre></td></tr></table></figure></p><p>你还可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal dog2 =new Dog();</span><br></pre></td></tr></table></figure></p><p>这就是将一个子类对象转型为一个父类对象，这个很好理解，对吧。</p><p>接下来我们来说一下，向下转型，顾名思义就是和向上转型相反的操作了，是的，你很聪明。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>向下转型也称强制类型转换。它是子类引用指向父类实例，我们在之前就用过了，还记得我们在重写Object类的equals方法时，就将父类Object强制转换，然后才调用子类特有的方法。</p><p>向下转型并不是可以随便转换的，需要满足一定的转换条件。我们可以通过instanceof这个运算符来判断是否能进行强制类型转换。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ca1a5995341c12b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>通过上面的图片，我们可以很清楚的知道instanceof的作用就是判断左边对象是否是右边这个类的实例，如果是就返true，否则就返回false。</p><p>因此，我们在进行向下转型的时候，可以用instanceof来判断一个对象是否满足某个类的实例特征。满足，我们才进行类型转换，否则强制转换会报错。</p><p>总结一下：<br>向上转型: 父类引用指向子类对象。即小变大。</p><p>向下转型: 子类引用指向父类对象。即大变小。</p><p>需要注意的是：父类中static修饰的方法允许被子类使用，但是不允许被子类重写，所以向上转型之后，只能调用到父类原有的静态方法。如果此时要用子类中的，只能通过向下转型来实现。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法，这样我们的抽象类就派上用场了。</p><p>抽象类可以避免子类设计的随意性，还可以避免父类无意义的实例化。</p><p>你只需知道，修饰抽象类要用abstract这个关键词，抽象类不可以直接被实例化。</p><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>我们前面说过，父类只是规定子类拥有该项能力，但在父类中具体实现它是没有任何意义的，因此该方法应设置为抽象方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void test();</span><br></pre></td></tr></table></figure></p><p>你记住，抽象方法是不允许有方法体的，也就是不能有花括号。而且此时子类<strong>必须</strong>实现父类的抽象方法，如果你不实现，那么这个类就必须被设置为抽象类（不设置就会报错），然后由继承它的类去具体实现相应的方法。简单来说就是一句话：抽象方法中不允许包含方法体，子类需要重写父类的抽象方法。</p><p>一般抽象类适用于这种情况：1、父类中的实现没有意义；2、提醒子类必须要去自己实现自己的这个方法。</p><p>通常子类变多了之后，你新建一个类只要继承了抽象的父类，IDE会自动提醒你实现父类中的抽象方法的，你不实现就会报错。</p><h3 id="抽象类和抽象方法的使用"><a href="#抽象类和抽象方法的使用" class="headerlink" title="抽象类和抽象方法的使用"></a>抽象类和抽象方法的使用</h3><p>你可以使用abstract关键词来定义抽象类，抽象类不能被直接实例化，你可以通过向上转型完成对象实例，只能被继承。</p><p>abstract关键词定义抽象方法 ，你不需要具体实现也不能具体实现，也就是花括号不能有。</p><p>需要注意的是：抽象类可以没有抽象方法，但包含抽象方法的类一定是抽象类。</p><p>我们前面说过，当一个类继承抽象类，必须实现类中的抽象方法。如果不重写，则必须将该子类也变为抽象类，由其子类来实现，否则会报错。</p><p><strong>注意：static final private 不可以和abstract同时出现</strong>（因为抽象方法是要在子类中进行重写的，而private只能在当前类被访问，final方法不允许被子类重写，static静态不允许被子类重写。）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（三）：继承和访问修饰符</title>
      <link href="/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：它是一种类与类之间的关系，通过使用已存在的类作为基础来建立新类。其中已存在的类称为父类(或基类); 建立的新类称为子类(或派生类)。简单的就是子类继承父类的非私有属性和方法。</p><p>需要注意的是，新定义的类可以选择继续使用父类的功能或者自己增加新的数据或新的功能，但<strong>不能选择性地继承父类</strong>。（要么继承所有（前提是非私有），要么就不继承）</p><p>只要能满足 “A is a B”的关系就可以形成继承关系，代码中是通过 extends 关键字来实现继承的。</p><p>特别注意：在java中只能继承一个父类(也就是单继承)，而且子类可以访问父类的非私有成员。这个和Python不一样，Python的继承可就灵活了。</p><p>我们知道子类继承了父类之后，可以访问父类的非私有成员；但是父类的私有成员，子类还是无法直接访问。如果我们想访问呢？可以通过父类暴露的公有方法来实现间接访问。</p><p>父类对象不可以访问到子类特有的方法或属性，同时父类不可以访问子类特有成员（那怕是公有的成员）</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>方法重载必须同时满足以下条件: </p><ol><li>同一个类中;；</li><li>方法名相同，参数列表不同(参数顺序、个数、类型)；</li><li>方法返回值、访问修饰符任意；</li><li>与方法的参数名无关。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void printinfo() &#123;</span><br><span class="line">System.out.println(&quot;方法重载1&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void printinfo(String name) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;方法重载2&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String name, int age) &#123;</span><br><span class="line">return &quot;方法重载3&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String age, String name) &#123;</span><br><span class="line">return &quot;方法重载4&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(int age, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> // 与方法的参数名无关,加上下面的代码会和上面的 printinfo(int age, String name)造成重复而报错：</span><br><span class="line">public String printinfo(int size, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>方法重写也必须同时满足以下条件:<br>1、在满足继承关系的子类中；<br>2、方法名相同，参数列表相同(参数顺序、个数、类型)；<br>3、方法返回值相同或者是子类类型（但不允许是Object类型，可以向下兼容，向上是不可以的）；<br>4、访问修饰符的限定范围大于等于父类方法。</p><p>注意：在子类中是可以定义与父类重名的属性的，但这并不说明属性是可以重写的。</p><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>在Java里面一共包含4种访问修饰符，分别是：<br>1、private：私有的；<br>2、默认；<br>3、protected：受保护的；<br>4、public：公共的。</p><p>其中，<strong>private</strong>:只允许在本类范围中进行访问，离开了当前类就不允许访问；</p><p><strong>默认</strong>: 允许在当前类，同包子类/非子类都可调用，跨包子类/非子类都不允许；</p><p><strong>protected</strong>:允许在当前类，同包中的子类/非子类都可以以及跨包子类调用。跨包的非子类不允许调用。</p><p><strong>public</strong>:允许在任意位置访问。</p><p>按照前面的顺序，自上而下，访问范围越来越大；自下而上，限制能力越来越强：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4bd5c8b69ee574fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>（同包包括同包子类与非子类；子类包括同包子类和跨包子类）</p><h2 id="访问修饰符对方法重写的影响"><a href="#访问修饰符对方法重写的影响" class="headerlink" title="访问修饰符对方法重写的影响"></a>访问修饰符对方法重写的影响</h2><p>子类重写父类方法时，访问修饰符是允许改变的，要求是: 子类的访问范围必须大于等于父类的访问范围。也就是说如果父类访问修饰符是public，那么子类的访问修饰符也必须是public，其他的类似。</p><h2 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h2><p>继承后的初始化顺序如下：</p><p>父类静态成员 -&gt; 子类静态成员 -&gt; 父类对象的构造 -&gt; 子类对象的构造</p><p><strong>一个问题:</strong> 访问修饰符影响成员加载顺序?静态成员优先于静态代码块执行?</p><p>访问修饰符不影响成员加载顺序,跟书写位置有关。如果把静态代码块写在静态变量的前面，那么先执行静态代码块。</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>如果子类继承并重写了父类的方法，那么我们通常调用的就是重写后的子类方法。如果需要调用父类的方法，我们可以使用<code>super.方法</code>来达到这个目的。</p><p>当然也可以使用<code>super.属性</code>来达到访问父类的非私有属性的目的。</p><p><strong>尽管父类的构造方法的访问修饰符是public，但是它却不可以被子类继承和重写的。</strong></p><p>虽然它两个不可以，但是它的存在却是非常必要的，因为子类对象的实例化要依赖于父类对象的构造方法(默认，无参或有参的构造方法)。</p><p>如果子类调用了自己有参的构造方法，而父类定义了有参和无参的构造方法，程序依然是调用父类无参的构造方法。也就是说，我们在子类的构造方法中没有显式标注的情况下，默认调用父类的无参构造方法，因此父类的无参构造方法很重要，一定要写，否则会影响子类的对象实例化。</p><p>如果子类构造方法中既没有显式标注,且父类中没有无参的构造方法,则引发编译错误。</p><p>我们可以使用<code>super(参数)</code>这种形式来调用父类允许被访问的其他构造方法，但是此时super()必须放在子类构造方法有效代码的第一行（必须是子类的构造方法（其他方法不行）的第一行（其他行不行））。</p><p>也就是说父类在实例化的时候会默认调用无参的构造方法（此时你不定义无参的构造方法是可以的），但是如果子类在实例化对象的时候没有显示标志（也就是会默认调用父类无参的构造方法），而此时父类其实是不存在无参的构造方法，所以会引发编译错误。</p><h2 id="this和super的对比"><a href="#this和super的对比" class="headerlink" title="this和super的对比"></a>this和super的对比</h2><p><strong>this:</strong>当前类对象的引用：<br>1、访问当前类的成员方法；<br>2、访问当前类的成员属性；<br>3、访问当前类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>super:</strong>父类对象的引用：<br>1、访问父类的成员方法；<br>2、访问父类的成员属性；<br>3、访问父类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>注意：在调用构造方法时，this和super不能同时存在（前面说过两者都要求在第一行）。</strong></p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是所有类的父类，这个其实和Python中差不多，在Python里面也是所有的类都继承于object这个基类。点这直接查看api：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8api</a></p><p>一个类没有使用extends关键字明确标识继承关系,则默认继承Object类(包括数组)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class Object is the root of the class hierarchy.</span><br><span class="line">Every class has Object as a superclass. </span><br><span class="line">All objects, including arrays, implement the methods of this class.</span><br></pre></td></tr></table></figure></p><p>Object类存放于java.lang包中，这个包系统默认会为我们直接加载。</p><h3 id="equals用法"><a href="#equals用法" class="headerlink" title="equals用法"></a>equals用法</h3><p>如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因此我们不能这样说equals比较的两个对象的值，或者引用地址，但是我们却可以说”==”比较的却一定是两个对象的引用地址。</p><h3 id="toString用法"><a href="#toString用法" class="headerlink" title="toString用法"></a>toString用法</h3><p>api告诉我们，toString最后返回的是下面这种形式：（包名.类名@内存中的哈希码）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure></p><p>同样的，子类如果没有重写Object类的toString方法，那么则会打印输出其在内存中的哈希码；而String类则重写了Object类的toString方法，所以打印输出其真实值。（言外之意，子类可以通过重写toString方法的形式，改变输出的内容）</p><p>还要说明的一点就是输出<code>对象</code>和<code>对象.toString</code>的效果是一样的，因为直接输出对象的时候其实是调用了对象.toString方法。</p><h2 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h2><p>当我们不希望某些类被继承，某些方法被重写或者某些数据被修改时，可以使用final关键字来实现这个目的。</p><p>如果某个类被final修饰，则表明该类不可以被继承，该类没有子类，public final class/final public class都可以，只要是放在class的前面就可以；</p><p>如果某个方法被final修饰，则表明该方法不可以被重写，但是并不影响子类去继承调用它（final不可以修饰构造方法）。</p><p>如果某个局部变量被final修饰，那么我们可以不用在声明的同时立马进行赋值，但是必须在使用之前进行赋值，一旦赋值就不能被修改；</p><p>（方法内的局部变量的作用范围，从该行开始到所在大括号结束；而类的成员变量的作用范围取决于它前面的访问修饰符）；</p><p>如果某个成员变量被final修饰，我们同样不需要声明的同时进行立马赋值，但是必须在使用之前进行赋值，而且只能在构造方法或者类代码块(构造代码块)中进行赋值，一旦赋值就不能被修改；也就是说类中成员属性的赋值可以有三种方式： 1. 定义是直接初始化； 2. 构造方法; 3. 构造代码块（类代码块）。</p><p><strong>注意: 当具有多个构造方法时，final关键字修饰的成员变量如果选择了在构造方法里面进行赋值，那么就需要在所有的构造方法里面进行赋值，但是不同构造方法是可以赋不同值的</strong></p><h2 id="final对数据类型的影响"><a href="#final对数据类型的影响" class="headerlink" title="final对数据类型的影响"></a>final对数据类型的影响</h2><p>我们知道java 数据类型分为基本数据类型（byte,short,int,long,float,double,char,boolean） 和 引用数据类型(array,String,interface,自定义的类…)</p><p>基本数据类型是可以直接进行赋值的，而引用类型需要实例化该类的对象，然后才能给其对象进行赋值（String这个比较特殊，两种形式都是可以的）</p><p>我们知道基本数据类型在内存中存放的是数据本身，而引用数据类型在内存中存放的则是对象的引用地址。</p><p>下面的例子告诉我们，被final修饰的对象不可以修改它的引用地址，但是属性却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final Test test=new Test(&quot;hello&quot;);</span><br><span class="line">//test=new Test ();</span><br><span class="line">Test.key=&quot;world&quot;;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：基本数据类型的变量其一旦被赋初值，就无法进行修改；而引用类型的变量只是在初始化之后不能再指向另一个对象，但是对象的内容却是可变的。</p><p>因此final可配合static使用，用来修饰方法和变量。通常是用于修饰配置信息等(因为这类信息只需要加载一次，而且后面不需要被修改)。言外之意，使用final修饰可以提高性能，但会降低可扩展性。</p><h3 id="普通代码块，类代码块，构造代码块，静态代码块区别"><a href="#普通代码块，类代码块，构造代码块，静态代码块区别" class="headerlink" title="普通代码块，类代码块，构造代码块，静态代码块区别"></a>普通代码块，类代码块，构造代码块，静态代码块区别</h3><p>代码块都是一对大括号{}所括起来的内容。</p><p>普通代码块就是一对大括号{}所括起来的内容，只存在于类的方法之中；</p><p>类代码块和构造代码块是一个东西，就是直接在类中进行定义的，前面没有static进行修饰。构造代码块在创建对象时被调用，每次创建对象都会被调用，并且构造代码块的执行次序优先于类的构造方法。</p><p>静态代码块前面有static关键字进行修饰，它不能存在于任何方法体内，也不能直接访问实例变量和实例方法，需要通过类的实例对象来访问。</p><p>通常我们new一个对象，JVM要经过这样的初始化顺序：父类静态块&gt;子类静态块&gt;父类属性&gt;父类构造器&gt;子类属性&gt;子类构造器，这一系列的工作会消耗大量的内存和cpu。 </p><p>具体的研究可以参看这里：<a href="https://www.jb51.net/article/129990.htm" target="_blank" rel="noopener">详解java中的四种代码块</a>。</p><h2 id="java中的注解"><a href="#java中的注解" class="headerlink" title="java中的注解"></a>java中的注解</h2><p>注解是JDK1.5版本引入的一个特性, 它可以声明在包、类、属性、方法、局部变量、方法参数等前面，作用就是对这些元素进行说明、注释。</p><h3 id="按照运行机制来分类"><a href="#按照运行机制来分类" class="headerlink" title="按照运行机制来分类"></a>按照运行机制来分类</h3><p>注解按照<strong>运行机制</strong>来进行划分，可以分为3部分:<strong>源码注解，编译时注解，运行时注解。</strong></p><p>源码注解：只在源码.java文件中存在，编译成.class字节码文件就不存在了；</p><p>编译时注解：在源码.java文件和字节码.class文件中都存在；</p><p>运行时注解：在运行阶段还起作用,甚至会影响运行逻辑的注解。（spring框架中的@Autowired依赖注入的这种注解，它实现的就是在程序运行的过程当中自动的将外部传入的信息加载进去,它就是一种可以影响程序运行逻辑的运行时注解。）</p><h3 id="按照来源来分"><a href="#按照来源来分" class="headerlink" title="按照来源来分"></a>按照来源来分</h3><p>注解按照<strong>来源</strong>来进行划分，可以分为3部分:<strong>JDK注解，第三方注解，自定义注解。</strong></p><p>还有一种元注解，它是对注解进行注解的。</p><p>不行了，写着写着字数又超了，快4000字了，面向对象最后一个特性：多态，我还没说呢，下次吧，今天得滚去运动了。。。感谢你的赏阅。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（二）：封装</title>
      <link href="/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B0%81%E8%A3%85/"/>
      <url>/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>在这之前，我们先了解什么是对象，已经什么是面向对象？对象：万物皆对象，现实中实际存在的事物都可以看成一个对象。而面向对象就是人在关注对象， 关注事物的信息。那什么是类？类就是模子，通常用于确定对象将会拥有的特征(属性)和行为(方法)。也就是说对象是类的具体存在，而类则是对象的抽象化。苹果是一个类，你手里拿的苹果就是一个实例化的对象。</p><p>刚才说了对象具有属性和方法，那么属性和方法又是什么呢？属性就是对象具有的各种静态特征，通常用来说明对象有什么；而方法就是说明对象具有的各种动态行为，也即对象能做什么。</p><p>假如我有一辆吉普车，它的颜色，价格，型号就是属性；而它能加速，减速，停止就是具有各种方法。</p><p>创建类的一般步骤为：创建类==》实例化对象==》书写具体的逻辑。</p><p>通常我们在书写类的时候，都需要遵循单一职责原则(单一功能原则)，也就是说 一个类应该有且只有一个引起功能变化的原因。如果在一个类当中承担的功能越多，那么它的交融，耦合性就越高，被复用的可能性就越低。特别是因为耦合度高，可能会因为一个职责的变化，引起其他职责的变化，进而影响整个程序的运行，这一点是我们所不想看到的。</p><p>实例化对象的过程可以分为三步：声明对象，实例化对象，将两者进行绑定。其中声明对象是在栈内存中开辟了一块内存空间，但此时还不是一个有效的对象，因为此时对象的空间里是空的。如果此时调用它的属性和方法则会引发错误。而实例化对象则是在堆空间开辟一块空间，它完成了具体对象相关信息的初始化操作。最后通过赋值进行两者绑定。</p><p>也就是声明对象和实例化对象是在内存中的不同空间完成的，通过赋值操作，将两者关联。具体的关联就是将堆中具体对象的内存地址存放在之前在栈中开辟的内存中，从而完成绑定。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法也称为: 构造函数或者构造器，你可以使用构造方法来完成对象初始化相关操作。</p><p>构造方法的调用必须配合new关键字，不能被对象单独调用。注意，<strong>构造方法必须与类同名且没有返回值。</strong></p><p>方法名中的参数列表可有可无，但是只能在对象实例化的时候被调用。</p><p>当没有指定构造方法时，系统会自动添加无参的构造方法；当有指定的构造方法时,无论是有参、无参的构造方法，系统都不会自动添加无参的构造方法，一个类中可以有多个构造方法。</p><p>this: 当前对象的默认引用; this的使用:调用成员属性,解决成员属性和局部变量同名冲突，也可以调用成员方法。</p><p>如果你想调用重载的构造方法，那么只能通过this关键字来使用this()；同时请记住，如果是通过this()来调用构造方法时,它必须放在方法体内第一行。（这个一定注意）</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是将类的某些信息隐藏在类内部, 不允许外部程序直接访问，但是通过该类提供的方法来实现对隐藏信息的操作和访问。也就是说两点：一是隐藏对象的信息，第二留出可以访问的接口（方法）。</p><p>封装的具体步骤：1、将访问修饰符替换为private；2、提供公共的setter和getter方法；3、必须有构造方法（系统会默认调用无参的构造方法）。其中setter方法是可写，getter方法是可读。我们可以在setter方法里面添加自己的业务逻辑，从而实现对值的合理性进行判断。</p><p>因为已经实现了封装，因此我们在实例化对象的时候就不需要再次传入自定义的参数了，否则就没有使我们提供的setter方法生效了。</p><h2 id="包的管理"><a href="#包的管理" class="headerlink" title="包的管理"></a>包的管理</h2><p>为什么要说包的管理呢？因为包的管理太重要了，其实很多坑就是包的命令和管理不规范引起的。</p><p>我们知道文件夹可以进行文件的管理，同一个文件中可以存放多个不同的文件，同名的文件只能存放在不同的文件夹中。</p><p>在Java中我们也是通过包来管理java文件来解决同名文件的冲突问题，Java中一个包里不能存放同名类，但不同包却是可以。</p><p>包的定义必须放在Java源文件的第一行。前面说过，我们在定义类的时候，尽量遵循单一职责原则，同样的道理，在建立包的时候，建议每个包内存储的信息功能应该单一。</p><p>如何实现跨包类的调用？可以采用Import这个关键字，来实现包的导入。需要注意的是<strong>import包名.* 只能访问指定包名下的类，无法访问子包下的类</strong>。</p><p>还有就是包的效率问题，建议采用<code>import包名.类名</code>的方式进行包的导入，这样可以提高加载效率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import net.oschina.Test.*; // 加载包下的所有类</span><br><span class="line">import net.oschina.Test.Java; // 加载指定包下的指定类</span><br></pre></td></tr></table></figure></p><p>注意一下，加载类的顺序跟import导入语句的位置无关:指定的具体包的优先级大于通配符。也就是下面加载会大于上面加载的速率。</p><p>最后说一下关于包管理的几个注意事项：<br>1、必须放在Java源文件中的第一行；<br>2、一个Java源文件中只能有一个package语句；<br>3、包名全部采用英文字母小写的方式；<br>4、包的命名方式为：域名倒序+模块+功能。</p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="static修饰"><a href="#static修饰" class="headerlink" title="static修饰"></a>static修饰</h3><p>static表示静态的。</p><p>如果它修饰成员变量，那么该变量被称为静态成员或类成员，它是这个类所有的。也就是说无论这个类实例化出多少对象，它都会共用同一块内存空间。后面的只会覆盖前面的值。</p><p>如果它修饰属性，那么该属性被称为静态属性。</p><p>如果它修饰方法，那么该方法被称为静态方法。</p><p>如果它修饰初始化块，那么该初始化块被称为静态初始化块。</p><p>但是static是不能修饰类，不能修饰局部变量，不能内部类中修饰初始化块（不可以在内部类定义静态初始化块）。</p><p>静态成员的生命周期很长，在类加载时产生，直到类被销毁时才释放。</p><h3 id="static访问"><a href="#static访问" class="headerlink" title="static访问"></a>static访问</h3><p>普通的成员方法可以直接访问当前对象（该类实例化的对象）的成员属性和方法，也可以直接访问当前对象的静态属性和静态方法</p><p>静态方法或者类方法（前面被static修饰），它不能直接访问同一个类中的非静态成员，因为它缺少隐含的this参数。静态方法只能直接调用同一个类中的静态成员。如果非要访问，只能通过实例化一个对象后，采用对象.成员方法的方式来访问非静态成员。</p><h2 id="初始化块（代码块）"><a href="#初始化块（代码块）" class="headerlink" title="初始化块（代码块）"></a>初始化块（代码块）</h2><h3 id="初始化块的说明"><a href="#初始化块的说明" class="headerlink" title="初始化块的说明"></a>初始化块的说明</h3><p>在Java里面，被{}括起来的代码就称之为代码块（初始化块）。</p><p>当代码块出现在方法里的时候，叫做普通代码块，普通代码块和一般语句的执行顺序是一样的：从上到下，顺序执行，先出现,，先执行。</p><p>当代码块直接在类中定义，与成员方法，属性并列时，我们此时称之为构造代码块。</p><p>记住构造代码块比构造函数优先执行。构造代码块它是在创建对象的时候被调用，优先于构造方法的执行。所以不管构造代码块放在类的其他位置，它都会先于构造函数执行。</p><p>多个构造代码块之间有先后顺序，但都先于构造函数前执行。</p><h3 id="初始化块的执行"><a href="#初始化块的执行" class="headerlink" title="初始化块的执行"></a>初始化块的执行</h3><p>现在考虑一下，静态初始化块，普通初始化块，构造函数这三者的执行顺序？你只要记住静态初始化块静态初始化块只在类初始化时进行加载，而且只执行一次。对于三者，程序的执行优先级：静态初始化块–》初始化块–》构造方法。（这里的初始化块包括构造初始化块（直接在类中声明）和普通的初始化块（在方法中声明）。</p><h3 id="初始化块的范围"><a href="#初始化块的范围" class="headerlink" title="初始化块的范围"></a>初始化块的范围</h3><p>看一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;初始化块的范围&quot;);</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块2&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这个test方法空间被分成了三部分，所以我们可以利用这个功能来实现变量的命名冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        int temp =10;</span><br><span class="line">        int temp =12;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面是不可以的，但是下面却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       </span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这时两个代码块空间中允许有自己的变量值，不会重名造成冲突。但是不能在方法的全局域位置添加同名变量，因为它会与两个变量都造成重复定义的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       int temp =11;</span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>因为temp的作用域是从那里到结尾的，会与后面的代码块里面的变量产生命名冲突。</p><p>由于篇幅的问题，继承和多态我下次再说哈，今天就写到这里了，感谢你的赏阅！！！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（一）：概述</title>
      <link href="/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>一、JAVA的主要特性：</p><p>1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。</p><p>2、Java是面向对象的，具有类，接口等；</p><p>3、Java是解释型的语言，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。即所谓的“一次编译，永久使用”。</p><p>下面解释一下解释型语言和编译型语言的区别？</p><p>（A）解释型语言：,解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。在发布程序时，看起来省了道编译工序。但是，在运行程序的时候，解释性语言必须先解释再运行。</p><p>（B）编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++、Delphi等。</p><p>二、JAVA的开发工具（JDK），工具及运行环境（JRE）</p><p>（1）Java主要分为三大体系：</p><p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p><p>JavaEE(J2EE)(Java 2 Platform,EnterpriseEdition，java平台企业版)</p><p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p><p>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE,J2SE更名为Java SE，J2ME更名为Java ME。</p><p>说明：</p><p>Standard Edition(标准版) J2SE 包含那些构成Java语言核心的类</p><p>比如：数据库连接、接口定义、输入/输出、网络编程</p><p>Enterprise Edition(企业版) J2EE 包含J2SE 中的类，并且还包含用于开发企业级应用的类。比如：EJB、servlet、JSP、XML、事务控制</p><p>Micro Edition(微缩版) J2ME 包含J2SE中一部分类，用于消费类电子产品的软件开发。比如：呼机、智能卡、手机、PDA、机顶盒</p><p>他们的范围是：J2SE包含于J2EE中，J2ME包含了J2SE的核心类，但新添加了一些专有类，应用场合，API的覆盖范围各不相同。</p><p>上面的每个版本都分别对应不同的JDK（java development kit），可以根据应用不同下载不同的JDK安装。对于初学者，先学习Java SE，有了一定基础之后，可以考虑深入学习Java EE，或者转战Android也行。</p><p>（2）JDK中包含了java开发需要的各种类和接口，以及运行java程序所需要的环境JRE，若是只想在各种系统平台上运行java程序而不进行开发，则可以直接下载JRE包即可。有些系统是自带JRE的，但不包括windows，因此要想在windows上运行java程序，需要在系统上安装JRE。</p><p>（3）JRE中包含了JVM（Java虚拟机）：它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。</p><p>2、工具</p><p>Java开发需要一些较好的开发工具，比较好的一个IDE就是Eclipse；eclipse、idea等IDE有自己的编译器而不是用JDKbin目录中自带的，所以在安装时你会发现他们只要求你选中jre路径就ok了；而且用eclipse的话不需要设置系统环境变量，它会自动找到安装的JRE地址。</p><p>3、开发环境</p><p>Java可以下windows和linux等系统下进行开发，这里仅介绍在windows下开发需要设置的环境参数，在安相应版本JDK之后，进行变量设置。</p><p>变量设置</p><p>变量名：JAVA_HOME</p><p>变量值：C:\ProgramFiles\Java\jdk1.7.0</p><p>//这里是你JDK的安装路径，可以更换</p><p>变量名：CLASSPATH</p><p>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;//记得前面有个”.”</p><p>变量名：Path</p><p>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p><p>1、”开始”-&gt;;”运行”，键入”cmd”；</p><p>2、键入命令”java -version”，”java”，”javac”几个命令，出现相关画面，说明环境变量配置成功；</p><p>三、Java基础语法</p><p>1、基本语法规则</p><p>编写Java程序时，应注意以下几点：</p><p>大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。</p><p>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</p><p>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p><p>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。</p><p>主方法入口：所有的Java 程序由public static void main(Stringargs)方法开始执行。</p><p>另外：java中没有头文件，它是以import的方法从外面导入.class文件的； java中的main函数是包含在一个类中的，与C++是不一样的，在C++中没有定义类也是一个程序。</p><p>2、源文件声明规则</p><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p><p>一个源文件中只能有一个public类</p><p>一个源文件可以有多个非public类</p><p>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</p><p>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</p><p>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</p><p>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</p><p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p><p>3、Java包：</p><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。（即包中包含很多种类的类和接口）</p><p>当编译一个.java文件（即一个编译单元）时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。如果你真的想学习java你可以来这个群前面是四九一，中间是八九七后面是一五八这里有技术大牛亲自指导帮助你 还有免费的直播课程学。因此在编译少量.java文件之后，会得到大量的.class文件。每一个.java文件编译以后都会有一个public类，以及任意数量的非public类。因此每个.java文件都是一个构件，如果希望许许多多的这样的构件从属于同一个群组，就可以在每一个.java文件中使用关键字package。而这个群组就是一个类库。</p><p>如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。</p><p>4、权限修饰符</p><p>Java中有四种权限修饰符，这些修饰符控制对类，类的成员方法，类的成员变量的访问；其作用范围如下：</p><p>public：所有的类都可以访问。</p><p>private：只有在同一个类中才可以访问。</p><p>protected：同一个类中、同一个包中、子类中都可以访问，其他包不可以。</p><p>包类型的，即默认类型同一个类中、同一个包中可以访问到，其他包和子类不可以。</p><p>5、数据类型</p><p>byte: Java数据类型和c/c++基本类似，但Java中有byte类型，表示8位2进制的整数，相当于c/c++中的char.</p><p>常量：Java中常量用final表示，相当于const，final中的值是可以改变的；</p><p>-包装类: 在开发过程中，有时候需要使用对象，而不是内置数据类型，因此java为每个内置数据类型提供了对应的包装类所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类Number的子类，对于字符也有相应的Character类。每个类具有相应的函数。</p><p>数组：java数组是对象，与c++不同，语法上与c++类似，java数组具有一个属性length可以获取数组的长度。（数组a，a.length为数组长度），Array类具有一些函数可以对数组进运算。</p><p>6、Java高级特性和接口</p><p>Java中类继承只允许一个父类，当需要进行多个继承时，需要使用接口。接口类似于类，定义时用interface替代类定义中的class，但里面的方法只有定义没有实现。接口文件的文件名必须与接口名相同。继承接口的关键字为implement，与类的继承extends相似，可以进行多继承。接口继承必须实现接口中的所有方法。</p><p>接口是规范，规定某个实现类里必须有那些方法，只要事先定义好接口，当大家一起合作的时候就不用特别麻烦的交互，而是每个人写好自己的接口实现类，最后拼接到一起就可以了比如数据库连接类，接口规定好有哪些方法、方法的功能，然后每个数据库厂商根据接口去实现具体的类，达到统一的目的，要不每个数据库厂商自己实现一套，那么你编程的时候就要根据不同驱动使用不同的方法，造成不必要的麻烦。</p><p>2、Java中的抽象类</p><p>只声明方法的存在而不具体实现的类，抽象类不能实例化（不能创建相应对象）定义方式：在class前加上abstract，ex：</p><p>abstractclass 类名{ ;;;}抽象类中定义的没有实际意义的，必须在子类重写的方法为抽象方法，定义时前面加abstract：abstract type name(agrs)。</p><p>一般方法定义与在正常类中定义一样。</p><p>关于如何创建类和其他知识我将在后续文章陆续介绍，谢谢大家！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）</title>
      <link href="/2018/06/30/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%EF%BC%88Centos%E7%89%88%EF%BC%89/"/>
      <url>/2018/06/30/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%EF%BC%88Centos%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们将介绍如何把我们的微电影视频网站部署上线。</p><h2 id="安装LNMP环境"><a href="#安装LNMP环境" class="headerlink" title="安装LNMP环境"></a>安装LNMP环境</h2><p>首先我们需要在云服务器上安装LNMP，所谓的LNMP是指：Centos,Nginx,Mysql和Python：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8a2a45e6955f15cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>我们需要的配置：</strong><br>服务器系统：Centos7<br>数据库: Mysql<br>编程语言: Python3.6<br>队列缓存: Redis<br>web反向代理: Nginx<br>依赖环境: flask ，mysql-connector-python ，wtform ，sqlachemy ，redis<br><strong>整个部署流程：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-681f2b6ddc507495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="一些常用的Centos命令"><a href="#一些常用的Centos命令" class="headerlink" title="一些常用的Centos命令"></a>一些常用的Centos命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip  # 查看服务器配置</span><br><span class="line"></span><br><span class="line">cat /etc/redhat-release  # 查看内存剩余</span><br><span class="line"></span><br><span class="line">free -m   # 查看硬盘剩余</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="1、安装python3-6的依赖包"><a href="#1、安装python3-6的依赖包" class="headerlink" title="1、安装python3.6的依赖包"></a>1、安装python3.6的依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel</span><br><span class="line">sqllite-devel</span><br></pre></td></tr></table></figure><h3 id="2、下载并解压Python3-6-4"><a href="#2、下载并解压Python3-6-4" class="headerlink" title="2、下载并解压Python3.6.4"></a>2、下载并解压Python3.6.4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf python-3.6.4.tgz</span><br><span class="line">cd python-3.6.4/</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line"></span><br><span class="line">yum -y install gcc gcc-c++</span><br><span class="line"></span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure><h3 id="3、采用软连接配置Python"><a href="#3、采用软连接配置Python" class="headerlink" title="3、采用软连接配置Python"></a>3、采用软连接配置Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line"></span><br><span class="line">mv python python.backup</span><br><span class="line"></span><br><span class="line"># 创建软连接</span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python</span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python3</span><br><span class="line"></span><br><span class="line">cd /usr/bin/</span><br><span class="line">ls yum*</span><br><span class="line">vim yum</span><br></pre></td></tr></table></figure><p>修改第一行尾python2:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d83a9c0da46eac23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yum-config-manager</span><br></pre></td></tr></table></figure></p><p>修改第一行尾python2：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e49564c4aae6f218.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>。。。。。。<br>运行下面所有的命令，把它们第一行尾的python都改成Python2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim yum-debug-restore</span><br><span class="line">vim yum-group-manager</span><br><span class="line">vim yum-build-dep</span><br><span class="line">vim yum-debug-dump</span><br><span class="line">vim yumdownloader</span><br><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure></p><p>然后输入Python发现就是Python3.6.4的版本了。</p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>直接利用命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mariadb-server  # 安装MySQL服务</span><br><span class="line"></span><br><span class="line">systemctl start mariadb.service  # 启动服务</span><br><span class="line"></span><br><span class="line">enable mariadb.service  # 设置开机自启</span><br></pre></td></tr></table></figure></p><p>然后修改密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot password &quot;root&quot;</span><br><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure></p><p>接下来更改MySQL的字符集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">character--set-server=utf8   # 更改字符集</span><br></pre></td></tr></table></figure></p><p>然后重启服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb.service</span><br></pre></td></tr></table></figure></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>拷贝Nginx到我们的服务器上面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp nginx.tar.gz root@192.168.x.x:/root/</span><br></pre></td></tr></table></figure></p><p>然后安装它的依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ openssl-devel pcre-devel httpd-tools</span><br></pre></td></tr></table></figure></p><p>接下来进行解压安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf nginx.tar.gz</span><br><span class="line">cd nginx/</span><br><span class="line"></span><br><span class="line">useradd nginx</span><br><span class="line">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_mp4_module --with-http_flv_moudle</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install  # 安装和编译</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/sbin/</span><br></pre></td></tr></table></figure></p><p>最后启动我们的nginx服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br><span class="line">netstat -anptu | grep nginx</span><br></pre></td></tr></table></figure></p><h2 id="部署微电影视频网站"><a href="#部署微电影视频网站" class="headerlink" title="部署微电影视频网站"></a>部署微电影视频网站</h2><p>部署的整个流程就是这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-873fe3b45af67590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="1、引入Manager"><a href="#1、引入Manager" class="headerlink" title="1、引入Manager"></a>1、引入Manager</h3><p>首先安装Flask-Script，然后在manage.py中导入Manager：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from app import app</span><br><span class="line">from flask_script import Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">manage = Manager(app)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><h3 id="2、修改服务器端口"><a href="#2、修改服务器端口" class="headerlink" title="2、修改服务器端口"></a>2、修改服务器端口</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-02c8bb4b7a0f99fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>端口需要和服务器保持一致，同时关闭调试模式。</p><h3 id="3、拷贝依赖文件到服务器"><a href="#3、拷贝依赖文件到服务器" class="headerlink" title="3、拷贝依赖文件到服务器"></a>3、拷贝依赖文件到服务器</h3><p>首先导出项目依赖的各种包req.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp req.txt movie.sql root@192.168.xx/root/</span><br></pre></td></tr></table></figure></p><p>当然如果你不熟悉，那你可以使用xshell来上传文件。</p><h3 id="4、新建虚拟环境"><a href="#4、新建虚拟环境" class="headerlink" title="4、新建虚拟环境"></a>4、新建虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --python=python3 movie</span><br></pre></td></tr></table></figure><h3 id="5、安装依赖的包"><a href="#5、安装依赖的包" class="headerlink" title="5、安装依赖的包"></a>5、安装依赖的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r req.txt</span><br></pre></td></tr></table></figure><p>如果安装太慢就可以使用豆瓣源进行加速：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com -r  req.txt</span><br></pre></td></tr></table></figure></p><h3 id="6、创建数据库并导入数据"><a href="#6、创建数据库并导入数据" class="headerlink" title="6、创建数据库并导入数据"></a>6、创建数据库并导入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database movie;</span><br><span class="line">use movie;</span><br><span class="line">source /root/movie.sql;</span><br></pre></td></tr></table></figure><h3 id="7、将项目拷贝到nginx的html目录"><a href="#7、将项目拷贝到nginx的html目录" class="headerlink" title="7、将项目拷贝到nginx的html目录"></a>7、将项目拷贝到nginx的html目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r movie /usr/local/nginx/html   或者  cp -r movie /usr/share/nginx/html</span><br></pre></td></tr></table></figure><h3 id="8、查看nginx的目录"><a href="#8、查看nginx的目录" class="headerlink" title="8、查看nginx的目录"></a>8、查看nginx的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp nginx.conf /usr/local/nginx/conf/</span><br><span class="line"></span><br><span class="line">ubuntu: cp nginx.conf /etc/nginx/conf.d</span><br></pre></td></tr></table></figure><h3 id="9、运行项目"><a href="#9、运行项目" class="headerlink" title="9、运行项目"></a>9、运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/html/movie_project</span><br><span class="line"></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>然后开启四个进程，修改端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup python manage.py runserver -h 192.168.x.x -p admin</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-85539797185ec8d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="10、上传nginx的配置文件"><a href="#10、上传nginx的配置文件" class="headerlink" title="10、上传nginx的配置文件"></a>10、上传nginx的配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 262180;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=addr:5m;</span><br><span class="line">    upstream movie &#123;</span><br><span class="line">        server 127.0.0.1:5001;</span><br><span class="line">        server 127.0.0.1:5002;</span><br><span class="line">        server 127.0.0.1:5003;</span><br><span class="line">        server 127.0.0.1:5004;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name movie.licheetools.top;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">            proxy_pass http://movie;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.flv$ &#123;</span><br><span class="line">            flv;</span><br><span class="line">            limit_conn addr 4;</span><br><span class="line">            limit_rate 1024k;</span><br><span class="line">            rewrite ^/static/uploads/(.+?).flv$ /movie/app/static/uploads/$1.flv permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.mp4$ &#123;</span><br><span class="line">            mp4;</span><br><span class="line">            limit_conn addr 4;   # 同时允许在线观看4个页面</span><br><span class="line">            limit_rate 1024k;   # 最高下载速度1M/s</span><br><span class="line">            rewrite ^/static/uploads/(.+?).mp4$ /movie/app/static/uploads/$1.mp4 permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、刷新Nginx"><a href="#11、刷新Nginx" class="headerlink" title="11、刷新Nginx"></a>11、刷新Nginx</h3><p>最后我们使用<code>nginx -s reload</code>来刷新我们的Nginx,然后你就可以在浏览器输入你的域名就可以访问你的微电影视频网站了。</p><p>至此，微电影视频网站项目我们就完成了开发，回顾这一路，坎坷确实很多，但是我们还是坚持了下来，最后项目成功上线，这其中的喜悦之情真是难以言表啊。</p><p>最后欢迎大家加我好友或者关注微信公众号，进行交流，我们一起进步！</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十五）：实现电影弹幕</title>
      <link href="/2018/06/27/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%BD%B1%E5%BC%B9%E5%B9%95/"/>
      <url>/2018/06/27/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%BD%B1%E5%BC%B9%E5%B9%95/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十四）：前台后续开发</title>
      <link href="/2018/06/25/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%90%8E%E7%BB%AD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/06/25/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%90%8E%E7%BB%AD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们将完成前台的后续开发，需要实现上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十四篇。</a></p><h2 id="上映预告"><a href="#上映预告" class="headerlink" title="上映预告"></a>上映预告</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Preview<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、修改动画视图"><a href="#1、修改动画视图" class="headerlink" title="1、修改动画视图"></a>1、修改动画视图</h3><p>打开views.py文件，我们修改一下动画视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from app.models import  Preview</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 动画</span><br><span class="line">@home.route(&apos;/animation/&apos;)</span><br><span class="line">def animation():</span><br><span class="line">    data = Preview.query.all()</span><br><span class="line">    return render_template(&quot;home/animation.html&quot;, data=data)</span><br></pre></td></tr></table></figure></p><h3 id="2、配置animation页面"><a href="#2、配置animation页面" class="headerlink" title="2、配置animation页面"></a>2、配置animation页面</h3><p>我们修改一下我们的animation.html页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ca2af6a2c58974df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="标签筛选和电影分页"><a href="#标签筛选和电影分页" class="headerlink" title="标签筛选和电影分页"></a>标签筛选和电影分页</h2><p>标签就是这里：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d67cba4ad755fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Tag ，Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、编写视图函数"><a href="#1、编写视图函数" class="headerlink" title="1、编写视图函数"></a>1、编写视图函数</h3><p>打开views.py文件，我们修改index函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    tags = Tag.query.all()</span><br><span class="line">    movtag = request.args.get(&quot;movtag&quot;, 0)    # 获取电影标签</span><br><span class="line">    star = request.args.get(&quot;star&quot;, 0)  # 获取电影星级</span><br><span class="line">    ontime = request.args.get(&quot;ontime&quot;, 0)  # 获取上映时间</span><br><span class="line">    playnum = request.args.get(&quot;playnum&quot;, 0)  # 获取播放数量</span><br><span class="line">    commnum = request.args.get(&quot;commnum&quot;, 0)  # 获取评论数量</span><br><span class="line">    return render_template(&quot;home/index.html&quot;, tags=tags)</span><br></pre></td></tr></table></figure></p><h3 id="2、进行标签和星级遍历"><a href="#2、进行标签和星级遍历" class="headerlink" title="2、进行标签和星级遍历"></a>2、进行标签和星级遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for v in tags %&#125;</span><br><span class="line">&lt;a  class=&quot;label label-info&quot;&gt;&lt;span</span><br><span class="line">class=&quot;glyphicon glyphicon-tag&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v.name &#125;&#125;&lt;/a&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% for v in range(1,6) %&#125;</span><br><span class="line">&lt;a class=&quot;label label-warning&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-star&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v &#125;&#125;&lt;/a&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="3、构建参数字典"><a href="#3、构建参数字典" class="headerlink" title="3、构建参数字典"></a>3、构建参数字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p = dict(</span><br><span class="line">       movtag=movtag,</span><br><span class="line">       star=star,</span><br><span class="line">       ontime=ontime,</span><br><span class="line">       playnum=playnum,</span><br><span class="line">       commnum=commnum</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><p>这是为了后面的筛选用，记得把p传进去！</p><h3 id="4、配置筛选"><a href="#4、配置筛选" class="headerlink" title="4、配置筛选"></a>4、配置筛选</h3><p>我们对电影标签进行筛选，采用这种方式进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; v.id &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>也就是说除了当前所选之外，其余的我们都是采用获取字典属性的方法来获得相关属性。</p><p><strong>电影星级：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; v &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><strong>上映时间：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=1&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;  .......最近&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">                          </span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=2&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;  ......更早&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用ontime的值1-2分别代表最近，更早。</p><p><strong>播放数量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=1&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从高到低&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=2&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从低到高&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用playnum的值1-2分别代表从高到低，从低到高。</p><p><strong>评论数量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=1&quot;......从高到低&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=2&quot; ......从低到高&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用commnum的值1-2分别代表从高到低，从低到高。</p><h3 id="5、修改视图函数"><a href="#5、修改视图函数" class="headerlink" title="5、修改视图函数"></a>5、修改视图函数</h3><p>我们打开views.py文件，继续完善我们的index视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Movie</span><br><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&quot;/&lt;int:page&gt;/&quot;, methods=[&quot;GET&quot;])</span><br><span class="line">@home.route(&quot;/&quot;, methods=[&quot;GET&quot;])</span><br><span class="line">def index(page=None):</span><br><span class="line">    tags = Tag.query.all()</span><br><span class="line">    page_data = Movie.query</span><br><span class="line"></span><br><span class="line">    movtag = request.args.get(&quot;movtag&quot;, 0)    # 获取电影标签</span><br><span class="line">    if int(movtag) != 0:</span><br><span class="line">        page_data = page_data.filter_by(tag_id=int(movtag))</span><br><span class="line"></span><br><span class="line">    star = request.args.get(&quot;star&quot;, 0)  # 获取电影星级</span><br><span class="line">    if int(star) != 0:</span><br><span class="line">        page_data = page_data.filter_by(star=int(star))</span><br><span class="line"></span><br><span class="line">    ontime = request.args.get(&quot;ontime&quot;, 0)  # 获取上映时间</span><br><span class="line">    if int(ontime) != 0:</span><br><span class="line">        if int(ontime) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.addtime.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.addtime.asc()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    playnum = request.args.get(&quot;playnum&quot;, 0)  # 获取播放数量</span><br><span class="line">    if int(playnum) != 0:</span><br><span class="line">        if int(playnum) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.playnum.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.playnum.asc()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    commnum = request.args.get(&quot;commnum&quot;, 0)  # 获取评论数量</span><br><span class="line">    if int(commnum) != 0:</span><br><span class="line">        if int(commnum) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.commentnum.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.commentnum.asc()</span><br><span class="line">            )</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = page_data.paginate(page=page, per_page=12)</span><br><span class="line"></span><br><span class="line">    p = dict(</span><br><span class="line">        movtag=movtag,</span><br><span class="line">        star=star,</span><br><span class="line">        ontime=ontime,</span><br><span class="line">        playnum=playnum,</span><br><span class="line">        commnum=commnum</span><br><span class="line">    )</span><br><span class="line">    return render_template(&quot;home/index.html&quot;, tags=tags, p=p, page_data=page_data)</span><br></pre></td></tr></table></figure></p><h3 id="6、进行列表显示和分页配置"><a href="#6、进行列表显示和分页配置" class="headerlink" title="6、进行列表显示和分页配置"></a>6、进行列表显示和分页配置</h3><p>打开搜索框，输入<code>home.index</code>，我们在这些后面添加<code>page=1</code>,一共5个地方：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2c2dfad9bc78db1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果少了运行就会报下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.index&apos;. Did you forget to specify values [&apos;page&apos;]?</span><br></pre></td></tr></table></figure></p><p>分页的配置就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.index&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别放错位置哈：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3df1ea20b07b26ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影搜索和电影分页"><a href="#电影搜索和电影分页" class="headerlink" title="电影搜索和电影分页"></a>电影搜索和电影分页</h2><h3 id="使用到的内容-2"><a href="#使用到的内容-2" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、书写搜索视图函数"><a href="#1、书写搜索视图函数" class="headerlink" title="1、书写搜索视图函数"></a>1、书写搜索视图函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 搜索页面</span><br><span class="line">@home.route(&apos;/search/&lt;int:page&gt;/&apos;)</span><br><span class="line">def search(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    key = request.args.get(&apos;key&apos;, &apos;&apos;)</span><br><span class="line">    movie_count = Movie.query.filter(</span><br><span class="line">        Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;)   # ilike可以进行模糊查询</span><br><span class="line">    ).count()</span><br><span class="line">    page_data = Movie.query.filter(</span><br><span class="line">        Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;)</span><br><span class="line">    ).order_by(</span><br><span class="line">        Movie.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/search.html&quot;, key=key, movie_count=movie_count, page_data=page_data)</span><br></pre></td></tr></table></figure><h3 id="2、修改home和layout页面"><a href="#2、修改home和layout页面" class="headerlink" title="2、修改home和layout页面"></a>2、修改home和layout页面</h3><p>为搜索电影加<code>id=&quot;key_movie&quot;</code>,与此同时为搜索添加<code>id=&quot;do_search&quot;</code>，还要删除搜索的链接href:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-462f7ed5b1a041e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后采用Jquery来控制搜索按钮，在JavaScript里面添加这段Jquery代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#do_search&quot;).click(function () &#123;</span><br><span class="line">            var key = $(&quot;#key_movie&quot;).val();</span><br><span class="line">            location.href = &quot;&#123;&#123; url_for(&apos;home.search&apos;, page=1) &#125;&#125;?key=&quot; + key;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>这段Jquery代码的意思是说，当点击class=”do_search”的搜索框时，就会去查询电影里面含有key的电影，并返回到search搜索结果列表页面。</p><p>注意这些操作都需要在home和layout页面进行，2个都要进行配置！！！</p><p>然后就是分页了，就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.search&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别放错位置哈!!!</p><h2 id="电影详情和电影播放"><a href="#电影详情和电影播放" class="headerlink" title="电影详情和电影播放"></a>电影详情和电影播放</h2><h3 id="使用到的内容-3"><a href="#使用到的内容-3" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型： Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、编写播放视图"><a href="#1、编写播放视图" class="headerlink" title="1、编写播放视图"></a>1、编写播放视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;)</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie)</span><br></pre></td></tr></table></figure><h3 id="2、添加电影id"><a href="#2、添加电影id" class="headerlink" title="2、添加电影id"></a>2、添加电影id</h3><p>打开搜索框，输入<code>home.play</code>，我们在这些后面添加<code>id=v.id</code>,一共3个地方：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3a2fc55b0f338d18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="3、修改播放页面显示"><a href="#3、修改播放页面显示" class="headerlink" title="3、修改播放页面显示"></a>3、修改播放页面显示</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a4305b064c530fb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意一下星级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for val in range(1,movie.star+1) %&#125;</span><br><span class="line"> &lt;span class=&quot;glyphicon glyphicon-star&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for val in range(1,5-movie.star) %&#125;</span><br><span class="line"> &lt;span class=&quot;glyphicon glyphicon-star-empty&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>还有底下的配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-84f01901a1fe2c13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影评论和电影统计"><a href="#电影评论和电影统计" class="headerlink" title="电影评论和电影统计"></a>电影评论和电影统计</h2><h3 id="使用到的内容-4"><a href="#使用到的内容-4" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie User Comment<br>表单: CommentForm<br>请求方法: GET ,POST<br>访问控制: 需要登入</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 添加评论</span><br><span class="line">class CommentForm(FlaskForm):</span><br><span class="line">    content = TextAreaField(</span><br><span class="line">        label=&quot;内容&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入内容！&quot;),</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;内容&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;id&quot;: &quot;input_content&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;提交评论&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;btn-sub&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="2、判断登入和是否显示评论框"><a href="#2、判断登入和是否显示评论框" class="headerlink" title="2、判断登入和是否显示评论框"></a>2、判断登入和是否显示评论框</h3><p>打开play.html页面，我们修改成这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cc0e688e108dafbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意，是”user”，不是user，这个一定要注意哈！！！</strong></p><h3 id="3、准备页面渲染字段"><a href="#3、准备页面渲染字段" class="headerlink" title="3、准备页面渲染字段"></a>3、准备页面渲染字段</h3><p>打开home/views.py文件，我们修改play函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import CommentForm</span><br><span class="line"></span><br><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="4、前台页面传值显示以及操作信息提示"><a href="#4、前台页面传值显示以及操作信息提示" class="headerlink" title="4、前台页面传值显示以及操作信息提示"></a>4、前台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改play.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-303c94cb88c9009d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、继续完善我们的播放视图"><a href="#5、继续完善我们的播放视图" class="headerlink" title="5、继续完善我们的播放视图"></a>5、继续完善我们的播放视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Comment</span><br><span class="line"></span><br><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    movie.playnum = movie.playnum + 1</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        comment = Comment(</span><br><span class="line">            content=data[&quot;content&quot;],    # 左侧字段与数据库Comment字段保持一致</span><br><span class="line">            movie_id=movie.id,</span><br><span class="line">            user_id=session[&quot;user_id&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(comment)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加评论成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.play&quot;, id=movie.id))</span><br><span class="line">        movie.commentnum = movie.commentnum+1</span><br><span class="line">    db.session.add(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form)</span><br></pre></td></tr></table></figure><p>然后你就可以去play.html页面添加我们的评论了！</p><h2 id="评论分页及显示"><a href="#评论分页及显示" class="headerlink" title="评论分页及显示"></a>评论分页及显示</h2><p>我们继续修改我们的播放视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None, page=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line"></span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == movie.id,</span><br><span class="line">        User.id == Comment.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line"></span><br><span class="line">    movie.playnum = movie.playnum + 1</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        comment = Comment(</span><br><span class="line">            content=data[&quot;content&quot;],    # 左侧字段与数据库Comment字段保持一致</span><br><span class="line">            movie_id=movie.id,</span><br><span class="line">            user_id=session[&quot;user_id&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(comment)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        movie.commentnum = movie.commentnum + 1</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加评论成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.play&quot;, id=movie.id, page=1))</span><br><span class="line">        movie.commentnum = movie.commentnum+1</span><br><span class="line">    db.session.add(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后就是在index.html 和search.html页面添加<code>page=1</code>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6569936e610fe2a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2a9a946f4a9c73a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是评论的遍历了，打开play.html页面，我们做如下修改：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0e52ecb5fa575076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>别忘记了评论数量的统计显示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7b0f9bd9da9b9f0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的项目，发现评论出现了，但是有些却是html片段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-24a7e582d2cd0a7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>、<br>那是因为为了保证页面的安全，都默认不允许直接显示html页面，我们可以和Django一样，管道符号加safe:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; v.content|safe &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>然后就是分页了：就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.play&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行发现报了下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.play&apos; with values [&apos;page&apos;]. Did you forget to specify values [&apos;id&apos;]?</span><br></pre></td></tr></table></figure></p><p>因为这个页面是比较特殊的，我们需要做一下配置：在ui文件夹下面新建comment_page.html，把home_page.html的页面信息全部拷贝进去，然后添加id参数，以及在第几页添加id=id:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-94c2a1ff9d16a6f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在修改我们play.html的分页配置：开头变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>下面也需要修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.play&quot;, movie.id) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>就是这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f4a6d7e6bc4b21c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新一下，看一下分页功能是否已经实现了呢！！！还记得我们之前在个人中心没有对个人评论进行配置吗，现在我们就可以配置了！</p><h2 id="个人中心评论配置"><a href="#个人中心评论配置" class="headerlink" title="个人中心评论配置"></a>个人中心评论配置</h2><p>首先需要修改我们的评论视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 评论记录</span><br><span class="line">@home.route(&apos;/comments/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def comments(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == Comment.movie_id,</span><br><span class="line">        User.id == session[&quot;user_id&quot;]</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;home/comments.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后就是打开comments.html页面，我们直接复制paly.html页面那里面关于评论的那部分：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-81742fb3c8a4b8fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页了，还是2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.comments&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，看看个人中心的评论记录是否都已经显示了呢！！！</p><h2 id="电影收藏"><a href="#电影收藏" class="headerlink" title="电影收藏"></a>电影收藏</h2><h3 id="使用到的内容-5"><a href="#使用到的内容-5" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie User Moviecol<br>表单: 无<br>请求方法: GET<br>访问控制: 需要登录</p><h3 id="1、新定义一个添加收藏函数："><a href="#1、新定义一个添加收藏函数：" class="headerlink" title="1、新定义一个添加收藏函数："></a>1、新定义一个添加收藏函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/add/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def moviecol_add():</span><br><span class="line">    mid = request.args.get(&quot;mid&quot;, &quot;&quot;)</span><br><span class="line">    uid = request.args.get(&quot;uid&quot;, &quot;&quot;)</span><br><span class="line">    moviecol = MovieCol.query.filter_by(</span><br><span class="line">        user_id=int(uid),</span><br><span class="line">        movie_id=int(mid),</span><br><span class="line">    ).count()</span><br><span class="line">    if moviecol == 1:</span><br><span class="line">        data = dict(ok=0)</span><br><span class="line">    if moviecol == 0:</span><br><span class="line">        moviecol = MovieCol(</span><br><span class="line">            user_id=int(uid),</span><br><span class="line">            movie_id=int(mid),</span><br><span class="line">        )</span><br><span class="line">        db.session.add(moviecol)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        data = dict(ok=1)</span><br><span class="line">    import json</span><br><span class="line">    return json.dumps(data)</span><br></pre></td></tr></table></figure><h3 id="2、采用ajax进行收藏的提示"><a href="#2、采用ajax进行收藏的提示" class="headerlink" title="2、采用ajax进行收藏的提示"></a>2、采用ajax进行收藏的提示</h3><p>打开play.html页面，我们新定义一个Script，编写我们的ajax代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#btn-col&quot;).click(function () &#123;</span><br><span class="line">                var mid = &#123;&#123; movie.id &#125;&#125;;</span><br><span class="line">                var uid = &#123;&#123; session[&apos;user_id&apos;] &#125;&#125;;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: &quot;&#123;&#123; url_for(&apos;home.moviecol_add&apos;) &#125;&#125;&quot;,</span><br><span class="line">                    type: &quot;GET&quot;,</span><br><span class="line">                    data: &quot;mid=&quot; + mid + &quot;&amp;uid=&quot; + uid,</span><br><span class="line">                    dataType: &quot;json&quot;,</span><br><span class="line">                    success: function (res) &#123;</span><br><span class="line">                        if (res.ok == 1) &#123;</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).empty();</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).append(&quot;收藏成功！&quot;);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).empty();</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).append(&quot;已经收藏！&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3、添加页面收藏提示"><a href="#3、添加页面收藏提示" class="headerlink" title="3、添加页面收藏提示"></a>3、添加页面收藏提示</h3><p>继续在我们的play.html页面配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-19bd8bd918f12406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就可以去测试我们的电影收藏功能是否已经实现了呢，接下来就是会员中心收藏电影的一个显示了，这个和我们的评论记录的显示几乎一样，所以我快点配置。</p><h2 id="个人中心电影收藏显示"><a href="#个人中心电影收藏显示" class="headerlink" title="个人中心电影收藏显示"></a>个人中心电影收藏显示</h2><p>首先我们需要在menu.html页面配置收藏电影的page=1:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-29c4a2f24f637f56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着去完善我们的收藏电影moviecol，我们可以借鉴之前的会员登入日志的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def moviecol(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = MovieCol.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        User.id == session[&quot;user_id&quot;],</span><br><span class="line">        Movie.id == MovieCol.movie_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        MovieCol.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/moviecol.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开moviecol.html页面，我们进行收藏电影的显示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ce33205e82727ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可能会遗漏<code>page=1</code>和<code>id=v.movie_id</code>，但是页面运行时会提示你的，这个按照提示进行即可。</p><p>然后就是分页了：还是2步：首先复制这个置于文件开头（可以借鉴我们loginlog.html的配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.moviecol&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，看看个人中心收藏的电影是否都已经显示了呢！！！</p><p>至此，本篇关于上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能的介绍就到此为止了。也就是说我们整个项目的开发就全部完成了，后面就是代码的优化和电影弹幕的实现了，我们下一篇介绍了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十四篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十三）：前台会员管理</title>
      <link href="/2018/06/20/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/20/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇笔记开始，我们将介绍前台的配置，也就是说现在你所有关于后台的页面都是可以关闭的，只需保留manage.py和moleds.py即可，好了话不多说，我们开始本篇的学习吧！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十三篇。</a></p><h2 id="前台会员管理"><a href="#前台会员管理" class="headerlink" title="前台会员管理"></a>前台会员管理</h2><p>前台会员管理主要包括会员注册，会员登录，会员退出，修改会员资料（包括会员密码），会员登录日志等5个功能，下面分别介绍。</p><h2 id="会员注册"><a href="#会员注册" class="headerlink" title="会员注册"></a>会员注册</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: RegisterForm<br>请求方法: GET ,POST<br>访问控制: 无</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开home/forms.py，我们定义Form字段，注意因为是会员注册，所以对应的html页面就是register.html，而且我们在forms.py里面定义的字段必须与register.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问register.html页面，这样明显多了！），可以复制修改后台的代码验证字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @Time: 2018/8/29 21:17</span><br><span class="line"># @Author: Envse</span><br><span class="line"># @File: forms.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from flask_wtf import FlaskForm</span><br><span class="line">from wtforms import StringField, PasswordField, SubmitField, FileField, TextAreaField, SelectField, SelectMultipleField</span><br><span class="line">from wtforms.validators import DataRequired, ValidationError, EqualTo, Email, Regexp</span><br><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 前台会员注册</span><br><span class="line">class RegisterForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;昵称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;昵称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;昵称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入昵称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    email = StringField(</span><br><span class="line">        label=&quot;邮箱&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;邮箱不能为空！&quot;),</span><br><span class="line">            Email(&quot;邮箱格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;邮箱&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入邮箱!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    phone = StringField(</span><br><span class="line">        label=&quot;手机号码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;手机号码不能为空！&quot;),</span><br><span class="line">            Regexp(&quot;1[3458]\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;手机号码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,     # 注意这个和后端页面的区别，不要拷贝错误</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入手机号码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    repwd = PasswordField(</span><br><span class="line">        label=&quot;确认密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;确认密码不能为空！&quot;),</span><br><span class="line">            EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;确认密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入确认密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;注册&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-lg btn-success btn-block&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    def validate_name(self, field):</span><br><span class="line">        name = field.data</span><br><span class="line">        user = User.query.filter_by(name=name).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该昵称已经存在！&quot;)</span><br><span class="line"></span><br><span class="line">    def validate_email(self, field):</span><br><span class="line">        email = field.data</span><br><span class="line">        user = User.query.filter_by(email=email).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该邮箱已经存在！&quot;)</span><br><span class="line"></span><br><span class="line">    def validate_phone(self, field):</span><br><span class="line">        phone = field.data</span><br><span class="line">        user = User.query.filter_by(phone=phone).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该手机号已经存在！&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开home/views.py文件，我们修改register函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import RegisterForm</span><br><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;)</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">    return render_template(&quot;home/register.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改register.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5c87c2be772ecced.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加<code></code>，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开register.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的phone需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.phone.errors %&#125;</span><br><span class="line"> &lt;div class=&quot;col-md-12&quot; id=&quot;error_phone&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改会员注册函数"><a href="#5、修改会员注册函数" class="headerlink" title="5、修改会员注册函数"></a>5、修改会员注册函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from app.models import User</span><br><span class="line">from werkzeug.security import generate_password_hash</span><br><span class="line">import uuid</span><br><span class="line">from app import db</span><br><span class="line">from flask import flash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            email=data[&quot;email&quot;],</span><br><span class="line">            phone=data[&quot;phone&quot;],</span><br><span class="line">            pwd=generate_password_hash(data[&quot;pwd&quot;]),</span><br><span class="line">            uuid=uuid.uuid4().hex</span><br><span class="line">        )</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;恭喜你注册成功，赶紧登录吧！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.login&quot;))</span><br><span class="line">    return render_template(&quot;home/register.html&quot;, form=form)</span><br></pre></td></tr></table></figure><h3 id="6、数据库字段验证"><a href="#6、数据库字段验证" class="headerlink" title="6、数据库字段验证"></a>6、数据库字段验证</h3><p>打开models.py文件，我们在User函数里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def check_pwd(self, pwd):</span><br><span class="line">       from werkzeug.security import check_password_hash</span><br><span class="line">       return check_password_hash(self.pwd, pwd)</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，就可以去首页注册我们的会员了！</p><h2 id="会员登录"><a href="#会员登录" class="headerlink" title="会员登录"></a>会员登录</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: LoginForm<br>请求方法: GET ,POST<br>访问控制: 无</p><h3 id="1、添加表单验证字段-1"><a href="#1、添加表单验证字段-1" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开home/forms.py，我们定义Form验证字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 前台会员登录</span><br><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;账号&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;账号不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;账号&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入账号!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;登录&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-lg btn-primary btn-block&quot;,   #注意这里最好是primary，不要用success</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-1"><a href="#2、准备页面渲染字段-1" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改login函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import LoginForm</span><br><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data=form.data</span><br><span class="line">    return render_template(&quot;home/login.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示-1"><a href="#3、后台页面传值显示以及操作信息提示-1" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改login.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-74b5485f4e8f597a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示-1"><a href="#4、后台页面错误信息提示-1" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开login.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改登录函数"><a href="#5、修改登录函数" class="headerlink" title="5、修改登录函数:"></a>5、修改登录函数:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data=form.data</span><br><span class="line">        user = User.query.filter_by(name=data[&quot;name&quot;]).first()</span><br><span class="line">        if not user.check_pwd(data[&quot;pwd&quot;]):</span><br><span class="line">            flash(&quot;密码错误！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.login&quot;))</span><br><span class="line">        session[&quot;user&quot;] = user.name</span><br><span class="line">        session[&quot;user_id&quot;] = user.id</span><br><span class="line">        userlog = UserLog(</span><br><span class="line">            user_id=user.id,</span><br><span class="line">            ip=request.remote_addr</span><br><span class="line">        )</span><br><span class="line">        db.session.add(userlog)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line">    return render_template(&quot;home/login.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去首页登录我们的网站了！</p><h3 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h3><p>现在有这样的问题，就是假如我们的账号不存在（这种情况也是有的，你长时间没登录忘记账号和密码了，然后就随便输入），这时候就很容易出现下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if not user.check_pwd(data[&quot;pwd&quot;]):</span><br><span class="line">AttributeError: &apos;NoneType&apos; object has no attribute &apos;check_pwd&apos;</span><br></pre></td></tr></table></figure></p><p>所以我们可以添加账号的验证（没有必要进行密码的验证，因为账号都不存在，哪来的密码呢，哈哈哈哈哈哈哈哈），可以仿照之前的注册在loginForm中定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def validate_name(self, field):</span><br><span class="line">      name = field.data</span><br><span class="line">      user = User.query.filter_by(name=name).count()</span><br><span class="line">      if user == 0:</span><br><span class="line">          raise ValidationError(&quot;该账号不存在！&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="会员登出"><a href="#会员登出" class="headerlink" title="会员登出"></a>会员登出</h2><p>会员登出相比其他是非常简单的，只需要把session里面的<code>user</code>和<code>user_id</code>删除即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 登出</span><br><span class="line">@home.route(&apos;/logout/&apos;)</span><br><span class="line">def logout():</span><br><span class="line">    session.pop(&quot;user&quot;, None)   # 重定向到前台的登录页面</span><br><span class="line">    session.pop(&quot;user_id&quot;, None)</span><br><span class="line">    return redirect(url_for(&apos;home.login&apos;))</span><br></pre></td></tr></table></figure></p><p>既然登出了，就不能查看登入之后的信息了，我们可以采用登入装饰器来控制访问,可以复制我们之前在admin里面配置的那个就可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登录装饰器</span><br><span class="line">def user_login_req(f):</span><br><span class="line">    @wraps(f)</span><br><span class="line">    def decorated_function(*args, **kwargs):</span><br><span class="line">        if &quot;user&quot; not in session:</span><br><span class="line">            return redirect(url_for(&quot;home.login&quot;, next=request.url))</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line">    return decorated_function</span><br></pre></td></tr></table></figure></p><p>然后就要在这些页面添加控制访问的权限了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7635eadc2b52254a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是会员中心资料的修改了！</p><h2 id="会员中心资料修改"><a href="#会员中心资料修改" class="headerlink" title="会员中心资料修改"></a>会员中心资料修改</h2><h3 id="使用到的内容-2"><a href="#使用到的内容-2" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: UserdetailForm<br>请求方法: GET ,POST<br>访问控制: @user_login_req</p><h3 id="1、添加表单验证字段-2"><a href="#1、添加表单验证字段-2" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># 修改个人资料</span><br><span class="line">class UserdetailForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;昵称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;昵称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;昵称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入昵称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    email = StringField(</span><br><span class="line">        label=&quot;邮箱&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;邮箱不能为空！&quot;),</span><br><span class="line">            Email(&quot;邮箱格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;邮箱&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入邮箱!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    phone = StringField(</span><br><span class="line">        label=&quot;手机号码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;手机号码不能为空！&quot;),</span><br><span class="line">            Regexp(&quot;1[3458]\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;手机号码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入手机号码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    face = FileField(</span><br><span class="line">        label=&quot;头像&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传头像！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;头像&quot;,</span><br><span class="line">    )</span><br><span class="line">    info = TextAreaField(</span><br><span class="line">        label=&quot;简介&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;简介不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;简介&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;rows=&quot;: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;保存修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="2、准备页面渲染字段-2"><a href="#2、准备页面渲染字段-2" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改user函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import UserdetailForm</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">import os</span><br><span class="line">import datetime</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># 会员中心</span><br><span class="line">@home.route(&apos;/user/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def user():</span><br><span class="line">    form = UserdetailForm()</span><br><span class="line">    user = User.query.get(int(session[&quot;user_id&quot;]))</span><br><span class="line">    form.face.validators = []</span><br><span class="line">    if request.method == &quot;GET&quot;:    # 给它们赋初始值</span><br><span class="line">        form.name.data = user.name</span><br><span class="line">        form.email.data = user.email</span><br><span class="line">        form.phone.data = user.phone</span><br><span class="line">        form.info.data = user.info</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        if form.face.data != &quot;&quot;:   # 没有修改时不能报错</span><br><span class="line">            file_face = secure_filename(form.face.data.filename)</span><br><span class="line">            if not os.path.exists(app.config[&quot;FC_DIR&quot;]):</span><br><span class="line">                os.makedirs(app.config[&quot;FC_DIR&quot;])</span><br><span class="line">                os.chmod(app.config[&quot;FC_DIR&quot;])</span><br><span class="line">            user.face = change_filename(file_face)</span><br><span class="line">            form.face.data.save(app.config[&quot;FC_DIR&quot;] + user.face)</span><br><span class="line"></span><br><span class="line">        name_count = User.query.filter_by(name=data[&quot;name&quot;]).count()</span><br><span class="line">        if data[&quot;name&quot;] != user.name and name_count == 1:</span><br><span class="line">            flash(&quot;该昵称已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        email_count = User.query.filter_by(email=data[&quot;email&quot;]).count()</span><br><span class="line">        if data[&quot;email&quot;] != user.email and email_count == 1:</span><br><span class="line">            flash(&quot;该邮箱已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        phone_count = User.query.filter_by(phone=data[&quot;phone&quot;]).count()</span><br><span class="line">        if data[&quot;phone&quot;] != user.phone and phone_count == 1:</span><br><span class="line">            flash(&quot;该手机已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        user.name = data[&quot;name&quot;]</span><br><span class="line">        user.email = data[&quot;email&quot;]</span><br><span class="line">        user.phone = data[&quot;phone&quot;]</span><br><span class="line">        user.info = data[&quot;info&quot;]</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改成功!&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line">    return render_template(&quot;home/user.html&quot;, form=form, user=user)</span><br></pre></td></tr></table></figure></p><h3 id="3、在初始的–init–-py文件里面，新增我们的图片存储地址："><a href="#3、在初始的–init–-py文件里面，新增我们的图片存储地址：" class="headerlink" title="3、在初始的–init–.py文件里面，新增我们的图片存储地址："></a>3、在初始的–init–.py文件里面，新增我们的图片存储地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[&quot;FC_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/users/&quot;)</span><br></pre></td></tr></table></figure><h3 id="4、后台页面传值显示以及操作信息提示"><a href="#4、后台页面传值显示以及操作信息提示" class="headerlink" title="4、后台页面传值显示以及操作信息提示"></a>4、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改user.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-63816b59b410b291.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法以及图片上传类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="5、前台页面错误信息提示"><a href="#5、前台页面错误信息提示" class="headerlink" title="5、前台页面错误信息提示"></a>5、前台页面错误信息提示</h3><p>打开user.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6、设置头像默认值"><a href="#6、设置头像默认值" class="headerlink" title="6、设置头像默认值"></a>6、设置头像默认值</h3><p>打开user.html页面，我们给用户头像一个初始值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4271674f3246f5ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的manage.py文件，就可以去后台修改个人中心的信息了！</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><h3 id="使用到的内容-3"><a href="#使用到的内容-3" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: PwdForm<br>请求方法: GET ,POST<br>访问控制: @user_login_req</p><h3 id="1、添加表单验证字段-3"><a href="#1、添加表单验证字段-3" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>这个表单验证字段和我们后台定义的修改密码是一模一样的，所以我们完全可以复制粘贴之前的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码</span><br><span class="line">class PwdForm(FlaskForm):</span><br><span class="line">    old_pwd = PasswordField(</span><br><span class="line">        label=&quot;旧密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;旧密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;旧密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入旧密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    new_pwd = PasswordField(</span><br><span class="line">        label=&quot;新密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;新密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;新密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入新密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改密码&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-3"><a href="#2、准备页面渲染字段-3" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改pwd函数（这个和我们后台修改密码一样，复制修改一下即可）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import PwdForm</span><br><span class="line"></span><br><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def pwd():</span><br><span class="line">    form = PwdForm()</span><br><span class="line">    if form.validate_on_submit():  # 表单验证，没有这个则无法进行错误信息提示</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User.query.filter_by(name=session[&quot;user&quot;]).first()</span><br><span class="line">        user.pwd = generate_password_hash(data[&quot;new_pwd&quot;])</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.logout&quot;))</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、前台页面传值显示以及操作信息提示"><a href="#3、前台页面传值显示以及操作信息提示" class="headerlink" title="3、前台页面传值显示以及操作信息提示"></a>3、前台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改pwd.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6d4c88923e8760b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、前台页面错误信息提示"><a href="#4、前台页面错误信息提示" class="headerlink" title="4、前台页面错误信息提示"></a>4、前台页面错误信息提示</h3><p>打开pwd.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改一下密码函数"><a href="#5、修改一下密码函数" class="headerlink" title="5、修改一下密码函数"></a>5、修改一下密码函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def pwd():</span><br><span class="line">    form = PwdForm()</span><br><span class="line">    if form.validate_on_submit():  # 表单验证，没有这个则无法进行错误信息提示</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User.query.filter_by(name=session[&quot;user&quot;]).first()</span><br><span class="line">        if not user.check_pwd(data[&quot;old_pwd&quot;]):</span><br><span class="line">            flash(&quot;旧密码错误！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&apos;home.pwd&apos;))</span><br><span class="line">        if data[&quot;old_pwd&quot;] == data[&quot;new_pwd&quot;]:</span><br><span class="line">            flash(&quot;新旧密码不能一样！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&apos;home.pwd&apos;))</span><br><span class="line">        user.pwd = generate_password_hash(data[&quot;new_pwd&quot;])</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.logout&quot;))</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去个人中心修改密码了！鉴于评论现在配置过早，我们现在暂且不配置，转向对登入日志的配置！</p><h2 id="登入日志"><a href="#登入日志" class="headerlink" title="登入日志"></a>登入日志</h2><h3 id="使用到的内容-4"><a href="#使用到的内容-4" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: 无<br>请求方法: GET<br>访问控制: @user_login_req</p><h3 id="1、编写登入日志函数"><a href="#1、编写登入日志函数" class="headerlink" title="1、编写登入日志函数"></a>1、编写登入日志函数</h3><p>这个是完全可以参考我们之前在后台对会员登录日志列表的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 登入日志</span><br><span class="line">@home.route(&apos;/loginlog/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def loginlog(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = UserLog.query.filter_by(</span><br><span class="line">        user_id=int(session[&quot;user_id&quot;])</span><br><span class="line">    ).order_by(</span><br><span class="line">        UserLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/loginlog.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><h3 id="2、遍历所要信息"><a href="#2、遍历所要信息" class="headerlink" title="2、遍历所要信息"></a>2、遍历所要信息</h3><p>打开loginlog.html页面，我们进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &#123;% for v in page_data.items %&#125;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.id &#125;&#125;&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;&#123;&#123; v.addtime &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.ip &#125;&#125;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、添加列表页"><a href="#3、添加列表页" class="headerlink" title="3、添加列表页"></a>3、添加列表页</h3><p>记得之前说过，凡是需要列表显示的都要有列表页page=1,打开menu.html，我们添加page=1即可！</p><h3 id="4、分页显示"><a href="#4、分页显示" class="headerlink" title="4、分页显示"></a>4、分页显示</h3><p>我们在ui文件夹下面新建一个名为home_page.html的页面，将之前的admin_page.html的代码拷贝进去，然后我们修改一下我们所指示的地方，增加nav标签，和修改class属性：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4a341c9fa9ac81cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着就是开头的引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>以及后面的替换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-footer clearfix&quot;&gt;</span><br><span class="line">         &#123;&#123; pg.page(page_data, &quot;home.loginlog&quot;) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-782b2917fe6eab04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>鉴于篇幅过长，后面的内容我们下一篇再介绍！</p><p>至此，本篇关于前台会员管理的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十三篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十二）：角色和管理员管理</title>
      <link href="/2018/06/18/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A7%92%E8%89%B2%E5%92%8C%E7%AE%A1%E7%90%86%E5%91%98%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/18/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A7%92%E8%89%B2%E5%92%8C%E7%AE%A1%E7%90%86%E5%91%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍角色管理，管理员管理以及访问权限控制这是三个功能。角色管理，管理员管理这个和前面介绍的标签，电影，预告管理也是差不多的，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十二篇。</a></p><h2 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h2><p>角色管理和上面的权限管理是非常相似的，所以有些操作就是复制粘贴和套用了！</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Role<br>表单: RoleForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是role_add.html，而且我们在forms.py里面定义的字段必须与role_add.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问role_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from wtforms import  SelectMultipleField</span><br><span class="line">from app.models import  Auth</span><br><span class="line"></span><br><span class="line"># 添加角色</span><br><span class="line">class RoleFrom(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;角色名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;角色名称不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;角色名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入角色名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    auths = SelectMultipleField(</span><br><span class="line">        label=&quot;权限列表&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限列表不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        coerce=int,</span><br><span class="line">        choices=[(v.id, v.name) for v in Auth.query.all()],   # 数据动态填充选择，采用列表生成式</span><br><span class="line">        description=&quot;权限列表&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_url&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请选择角色列表！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改role_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import RoleForm</span><br><span class="line">from app.models import Role</span><br><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_add():</span><br><span class="line">    form = RoleForm()</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改role_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c605f28e6785368e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加<code></code>，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开role_add.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改角色添加函数"><a href="#5、修改角色添加函数" class="headerlink" title="5、修改角色添加函数"></a>5、修改角色添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加角色</span><br><span class="line">@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_add():</span><br><span class="line">    form = RoleFrom()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        role = Role(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            auths=&apos;,&apos;.join(map(str, data[&quot;auths&quot;]))  # 采用高阶函数map来生成一个迭代器，然后用&apos;&apos;.join()来序列为一个字符串对象</span><br><span class="line">        )</span><br><span class="line">        db.session.add(role)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加角色成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的角色了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-20062bca3874a5f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查询一下数据库，发现这样的信息就说明权限添加成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from role;</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">| id | name        | auths | addtime             |</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">|  1 | 超级管理员 | NULL  | 2018-08-17 16:11:06 |</span><br><span class="line">|  2 | 管理员      | 1235  | 2018-08-12 16:24:18 |</span><br><span class="line">|  3 | 管理员1     | 12    | 2018-08-12 16:24:26 |</span><br><span class="line">|  4 | 管理员2     | 123   | 2018-08-12 16:24:33 |</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="角色列表的配置"><a href="#角色列表的配置" class="headerlink" title="角色列表的配置"></a>角色列表的配置</h2><p>打开我们的views.py文件，我们参考之前的权限列表的配置，对角色列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 角色列表</span><br><span class="line">@admin.route(&apos;/role/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line"># 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Role.query.order_by(</span><br><span class="line">        Role.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/role_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-960ebdc861a7de76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开role_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1023529d0a72b63e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个<ul class="pagination pagination-sm no-margin pull-right"> ……. </ul>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.role_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于角色列表的介绍就到此为止了！接下来是角色的删除！</p><h2 id="角色的删除"><a href="#角色的删除" class="headerlink" title="角色的删除"></a>角色的删除</h2><p>打开views.py文件，我们新定义role_del函数：（仿照权限删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 角色删除</span><br><span class="line">@admin.route(&apos;/role/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_del(id=None):</span><br><span class="line">    role = Role.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(role)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;角色删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.role_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开role_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的auth_list.html页面的那一部分）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e6c118ad75dd807f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>提示：有小伙伴们问我为啥需要添加这个操作成功的信息提示，那是因为我们的删除操作是在我们当前的列表页面进行的，所以自然我们的页面操作提示信息就应该放在列表页！！！</p><p>最后别忘了在role_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看角色删除功能是否已经实现了呢，接下来进行角色的编辑功能的实现！</p><h2 id="角色的编辑"><a href="#角色的编辑" class="headerlink" title="角色的编辑"></a>角色的编辑</h2><p>打开views.py文件，我们在角色列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 角色编辑</span><br><span class="line">@admin.route(&apos;/role/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_edit(id=None):</span><br><span class="line">    form = RoleForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    role = Role.query.get_or_404(id)</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.auths.data = list(map(int, role.auths.split(&quot;,&quot;)))  # form.auths.data为整形数组，而role.auths为一个可变字符串</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        role.auths = &apos;,&apos;.join(map(str, data[&quot;auths&quot;]))</span><br><span class="line">        role.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(role)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改角色成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.role_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/role_edit.html&quot;, form=form, role=role)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建role_edit.html页面，将role_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bf9cec2c94067680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记住那个<code></code>是无法直接给它付初始值的，我们采用GET方法来请求！</p><p>然后在role_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！</p><h2 id="错误修正"><a href="#错误修正" class="headerlink" title="错误修正"></a>错误修正</h2><p>近期有小伙伴反映页面跳转到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/admin/role/edit/&lt;int:id&gt;</span><br></pre></td></tr></table></figure></p><p>就出下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builtins.AttributeError</span><br><span class="line">AttributeError: &apos;NoneType&apos; object has no attribute &apos;split&apos;</span><br></pre></td></tr></table></figure></p><p>然后我通过单点测试，发现原来这个<code>form.auths.data</code>是个空值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b9364156861e25b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>但是呢，这个choices却不是，它是一个list，里面又有tuple。我们可以考虑取出每个tuple的第一个元素，它是Int类型，然后构造一个新的int类型的list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(lambda x: x[0], form.auths.choices))</span><br></pre></td></tr></table></figure></p><p>而且我们知道，我们这个role.auths它其实是一个varchar类型，所以我们也可以把它变为一个int类型的list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(int, auths.split(&quot;,&quot;)))</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-274036b39fe2dde8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(lambda x: x[0], form.auths.choices))==list(map(int, auths.split(&quot;,&quot;)))</span><br></pre></td></tr></table></figure></p><p>把之前的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form.auths.data = list(map(int, role.auths.split(&quot;,&quot;)))  # form.auths.data为整形数组，而role.auths为一个可变字符串</span><br></pre></td></tr></table></figure></p><p>替换掉！！！<strong>记住我们不可以修改超级管理员的角色名称和权限，因为超级管理员权力最大，如果某个权限连它都没有的话，那就没有人有了！！！</strong></p><h2 id="管理员管理"><a href="#管理员管理" class="headerlink" title="管理员管理"></a>管理员管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Admin<br>表单: AdminForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段-1"><a href="#1、添加表单验证字段-1" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是<code>admin_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>admin_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问admin_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Role</span><br><span class="line">from wtforms.validators import  EqualTo  # EqualTo 用于比对两次密码是否一致！ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">class AdminForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;管理员名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员名称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员名称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;管理员密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    repwd = PasswordField(</span><br><span class="line">        label=&quot;管理员重复密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员重复密码不能为空！&quot;),</span><br><span class="line">            EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员重复密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员重复密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    role_id = SelectField(</span><br><span class="line">        label=&quot;所属角色&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择所属角色！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 所属角色是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用下拉选择的方式进行所属角色的选择</span><br><span class="line">        choices=[(v.id, v.name) for v in Role.query.all()],</span><br><span class="line">        description=&quot;所属角色&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary btn-block btn-flat&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-1"><a href="#2、准备页面渲染字段-1" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改admin_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import AdminForm</span><br><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">@admin.route(&apos;/admin/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def admin_add():</span><br><span class="line">    form = AdminForm()</span><br><span class="line">    from werkzeug.security import generate_password_hash</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        admin = Admin(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            pwd=generate_password_hash(data[&quot;pwd&quot;]),</span><br><span class="line">            role_id=data[&quot;role_id&quot;],</span><br><span class="line">            is_super=1  # 普通管理员为1</span><br><span class="line">        )</span><br><span class="line">        db.session.add(admin)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加管理员成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/admin_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示-1"><a href="#3、后台页面传值显示以及操作信息提示-1" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的role_add.html来修改admin_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-23be1cbfd089a80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示-1"><a href="#4、后台页面错误信息提示-1" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开admin_add.html页面，我们同样可以仿照admin_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的管理员了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-99c0799429059300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="管理员列表的配置"><a href="#管理员列表的配置" class="headerlink" title="管理员列表的配置"></a>管理员列表的配置</h2><p>打开我们的views.py文件，我们参考之前的角色列表的配置，对管理员列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 管理员列表</span><br><span class="line">@admin.route(&apos;/admin/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def admin_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = Admin.query.join(</span><br><span class="line">        Role</span><br><span class="line">    ).filter(</span><br><span class="line">        Role.id == Admin.role_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Admin.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/admin_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a3a49afa5d3a5f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开admin_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8c1ac9bf0116a248.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开admin_list.html,删除那个<code>&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;</code>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.admin_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>错误提示：</strong>最近有小伙伴告诉我，一点击管理员列表就会出现这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinja2.exceptions.UndefinedError: &apos;app.models.Admin object&apos; has no attribute &apos;role&apos;</span><br></pre></td></tr></table></figure></p><p>那么你需要检查我们的models.py文件，查看我们的Role函数里面是否有这个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admins = db.relationship(&quot;Admin&quot;, backref=&apos;role&apos;)  # 管理员外键关系关联</span><br></pre></td></tr></table></figure></p><p>如果没有请添加，这样就应该不会出错了！</p><p>至此，关于管理员列表的介绍就到此为止了，下面介绍访问权限控制的配置！</p><h2 id="访问权限控制的配置"><a href="#访问权限控制的配置" class="headerlink" title="访问权限控制的配置"></a>访问权限控制的配置</h2><p>打开views.py文件，我们新定义一个访问权限控制装饰器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from flask import abort</span><br><span class="line"></span><br><span class="line"># 访问权限控制装饰器</span><br><span class="line">def admin_auth(f):</span><br><span class="line">    @wraps(f)</span><br><span class="line">    def decorated_function(*args, **kwargs):</span><br><span class="line">        admin = Admin.query.join(</span><br><span class="line">            Role</span><br><span class="line">        ).filter(</span><br><span class="line">            Role.id == Admin.role_id,</span><br><span class="line">            Admin.id == session[&quot;admin_id&quot;]</span><br><span class="line">        ).first()</span><br><span class="line">        auths = admin.role.auths</span><br><span class="line">        auths = list(map(int, auths.split(&quot;,&quot;)))</span><br><span class="line">        auth_list = Auth.query.all()</span><br><span class="line">        urls = [v.url for v in auth_list for val in auths if val == v.id]</span><br><span class="line">        rule = request.url_rule</span><br><span class="line">        if str(rule) not in urls:</span><br><span class="line">            abort(404)</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line">    return decorated_function</span><br></pre></td></tr></table></figure></p><p>接下来给除了登录和后台首页以外所有的函数都加上访问权限控制装饰器，然后运行manage.py测试一下我们的项目是否可以使用。</p><p>不过这样在代码里面添加访问权限控制器挺累的，等有时间准备做一个后台权限分配页面，这样可视化操作就比较人性化了。</p><p>至此，本篇关于角色管理，管理员管理以及访问权限控制的介绍就到此为止了。也就是说所有后台的管理配置都介绍完了，下一篇我们就开始进行前台页面的配置，感谢你的赏阅。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十二篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十一）：日志管理和权限管理</title>
      <link href="/2018/06/16/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/16/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍日志管理和权限管理，其中日志管理包括操作日志列表，管理员登录日志列表，会员登录日志列表，这个和前面介绍的标签，电影，预告管理也是差不多，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十一篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十一篇。</a></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h2 id="操作日志列表"><a href="#操作日志列表" class="headerlink" title="操作日志列表"></a>操作日志列表</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Oplog ，Userlog ，Adminlog<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET<br>访问控制: @admin_login_req</p><h3 id="上下文应用处理器"><a href="#上下文应用处理器" class="headerlink" title="上下文应用处理器"></a>上下文应用处理器</h3><p>这里我们需要引入上下文应用处理器的概念，它是可以封装全局变量并把全局变量展现到模板里面，我们前面在个人中心里面没有对操作时间进行配置，因为操作时间就是需要用到上下文处理器。我们打开views.py文件，新定义下面的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"># 上下文处理器</span><br><span class="line">@admin.context_processor</span><br><span class="line">def tpl_extra():</span><br><span class="line">    data = dict(</span><br><span class="line">        online_time=datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    )</span><br><span class="line">    return data</span><br></pre></td></tr></table></figure></p><p>接着用我们这里定义的<code>online_time</code>，去填充我们的admin.html页面里面的操作时间：<img src="https://upload-images.jianshu.io/upload_images/8964398-029b0b3cc86f65d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新一下我们的页面，发现操作时间就可以正常显示了。</p><p>注意一下，<code>import datetime</code>和<code>from datetime import datetime</code>是不同的，你可以点击这里<a href="https://stackoverflow.com/questions/15707532/python-import-datetime-v-s-from-datetime-import-datetime" target="_blank" rel="noopener">区别</a>！</p><h3 id="记录增删改查操作"><a href="#记录增删改查操作" class="headerlink" title="记录增删改查操作"></a>记录增删改查操作</h3><p>打开views.py文件，我们需要把登录时用户的id一块记录下来，修改登录函数：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5a6df71f73a890bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session[&quot;admin_id&quot;] = admin.id</span><br><span class="line">session.pop(&quot;admin_id&quot;, None)</span><br></pre></td></tr></table></figure></p><p>然后继续完善我们的视views.py,我们这里以添加标签为例，进行操作的记录演示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from app.models import OpLog, UserLog, AdminLog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oplog = OpLog(</span><br><span class="line">            admin_id=session[&quot;admin_id&quot;],</span><br><span class="line">            ip=request.remote_addr,</span><br><span class="line">            reason=&quot;添加标签%s&quot; % data[&quot;name&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(oplog)</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-bf55301e3ac72ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>flask中获取ip地址使用<code>request.remote_addr</code>，可以点击这里了解一下：<br><a href="https://www.jb51.net/article/62608.htm" target="_blank" rel="noopener">python使用Flask框架获取用户IP地址的方法</a></p><p>接下来你可以去添加几个标签，然后查询一下数据库，看是不是有了相应的记录！</p><p>然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。</p><h3 id="操作日志页面显示"><a href="#操作日志页面显示" class="headerlink" title="操作日志页面显示"></a>操作日志页面显示</h3><p>打开views.py文件，我们修改日志列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 操作日志列表</span><br><span class="line">@admin.route(&apos;/oploglist/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def oplog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = OpLog.query.join(</span><br><span class="line">        Admin</span><br><span class="line">    ).filter(</span><br><span class="line">        Admin.id == OpLog.admin_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        OpLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/oplog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开oplog_list.html页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d4a97be5ef585b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.oplog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加<code>page=1</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.oplog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 操作日志列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于操作日志列表的介绍就到此为止了！接下来是管理员登录日志列表！</p><h2 id="管理员登录日志列表"><a href="#管理员登录日志列表" class="headerlink" title="管理员登录日志列表"></a>管理员登录日志列表</h2><p>管理员登录日志列表是处理与管理员登录有关的列表，自然而的我们就要修改我们的登录函数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adminlog = AdminLog(</span><br><span class="line">          admin_id=session[&quot;admin_id&quot;],</span><br><span class="line">          ip=request.remote_addr,</span><br><span class="line">      )</span><br><span class="line">      db.session.add(adminlog)</span><br><span class="line">      db.session.commit()</span><br></pre></td></tr></table></figure></p><p>接下来你可以重新登录或退出，然后查询一下数据库，看是不是有了相应的记录！</p><p>然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。</p><h2 id="管理员登录日志页面显示"><a href="#管理员登录日志页面显示" class="headerlink" title="管理员登录日志页面显示"></a>管理员登录日志页面显示</h2><p>打开views.py文件，我们修改管理员登录日志列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 管理员登录日志列表</span><br><span class="line">@admin.route(&apos;/adminloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def adminloginlog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = AdminLog.query.join(</span><br><span class="line">        Admin</span><br><span class="line">    ).filter(</span><br><span class="line">        Admin.id == AdminLog.admin_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        AdminLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/adminloginlog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开adminloginlog_list.html页面，开始for循环的遍历：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-b3095c52611fe0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.adminloginlog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加page=1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.adminloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 管理员登录日志列表</span><br><span class="line">  &lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于管理员登录日志列表的介绍就到此为止了！接下来是会员登录日志列表！</p><h2 id="会员登录日志列表"><a href="#会员登录日志列表" class="headerlink" title="会员登录日志列表"></a>会员登录日志列表</h2><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入cmd，然后输入mysql -uroot -proot后回车，接着use movie; 然后查询一下userlog的信息：select * from userlog;接着复制粘贴下面的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into userlog(user_id,ip,addtime) values(1,&quot;192.188.8.1&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(2,&quot;192.188.8.2&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(3,&quot;192.188.8.3&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(4,&quot;192.188.8.4&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(5,&quot;192.188.8.5&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(6,&quot;192.188.8.6&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(7,&quot;192.188.8.7&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.8&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.9&quot;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：select * from userlog;，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userlog;</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">| id | user_id | ip          | addtime             |</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">|  1 |       1 | 192.188.8.1 | 2018-08-11 18:24:37 |</span><br><span class="line">|  2 |       2 | 192.188.8.2 | 2018-08-11 18:24:38 |</span><br><span class="line">|  3 |       3 | 192.188.8.3 | 2018-08-11 18:24:38 |</span><br><span class="line">|  4 |       4 | 192.188.8.4 | 2018-08-11 18:24:38 |</span><br><span class="line">|  5 |       5 | 192.188.8.5 | 2018-08-11 18:24:38 |</span><br><span class="line">|  6 |       6 | 192.188.8.6 | 2018-08-11 18:24:38 |</span><br><span class="line">|  7 |       7 | 192.188.8.7 | 2018-08-11 18:24:38 |</span><br><span class="line">|  8 |       8 | 192.188.8.8 | 2018-08-11 18:24:38 |</span><br><span class="line">|  9 |       8 | 192.188.8.9 | 2018-08-11 18:24:38 |</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">9 rows in set (0.19 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开views.py文件，我们修改会员登录日志列表函数（仿照之前的管理员登录列表）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员登录日志列表</span><br><span class="line">@admin.route(&apos;/userloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def userloginlog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = UserLog.query.join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        User.id == UserLog.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        UserLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/userloginlog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开userloginlog_list.html页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-8ba362fd48f9b40d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.userloginlog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加page=1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &lt;a href=&quot;&#123;&#123; url_for(&apos;admin.userloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">     &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员登录日志列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于会员登录日志列表的介绍就到此为止了，接下来便是权限管理的介绍了！</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Auth<br>表单: AuthForm<br>请求方法: GET，POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是<code>auth_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>auth_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问auth_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 添加权限</span><br><span class="line">class AuthForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;权限名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限名称不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;权限名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入权限名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    url = StringField(</span><br><span class="line">        label=&quot;权限地址&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限地址不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;权限地址&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_url&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入权限地址！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>auth_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import AuthForm</span><br><span class="line">from app.models import Auth</span><br><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_add():</span><br><span class="line">    form = AuthForm()</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的movie_add.html来修改auth_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-41778f12a04c0ded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开auth_add.html页面，我们同样可以仿照movie_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改权限添加函数"><a href="#5、修改权限添加函数" class="headerlink" title="5、修改权限添加函数"></a>5、修改权限添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_add():</span><br><span class="line">    form = AuthForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        auth = Auth(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            url=data[&quot;url&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(auth)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加权限成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的权限了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a4cb7d4b5e150f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查询一下数据库，发现这样的信息就说明权限添加成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from auth;</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">| id | name               | url                         | addtime             |</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">|  1 | 添加标签权限       | /admin/tag/add              | 2018-08-12 14:42:30 |</span><br><span class="line">|  2 | 编辑标签权限       | /admin/tag/edit/&lt;int:id&gt;/   | 2018-08-12 14:44:07 |</span><br><span class="line">|  3 | 标签列表权限       | /admin/tag/list/&lt;int:page&gt;/ | 2018-08-12 14:45:00 |</span><br><span class="line">|  5 | 删除标签权限       | /admin/tag/del/&lt;int:id&gt;/    | 2018-08-12 14:46:02 |</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">4 rows in set (0.10 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="权限列表的配置"><a href="#权限列表的配置" class="headerlink" title="权限列表的配置"></a>权限列表的配置</h2><p>打开我们的views.py文件，我们参考之前的标签列表的配置，对权限列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 权限列表</span><br><span class="line">@admin.route(&apos;/auth/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1  </span><br><span class="line"># 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Auth.query.order_by(</span><br><span class="line">        Auth.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=2)</span><br><span class="line">    return render_template(&quot;admin/auth_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-71f352efceaa7db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开auth_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-316e41d427f5cc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个<code>&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;</code>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.auth_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于权限列表的介绍就到此为止了！接下来是权限的删除！</p><h2 id="权限的删除"><a href="#权限的删除" class="headerlink" title="权限的删除"></a>权限的删除</h2><p>打开views.py文件，我们新定义auth_del函数：（仿照会员删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 权限删除</span><br><span class="line">@admin.route(&apos;/auth/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_del(id=None):</span><br><span class="line">    auth = Auth.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(auth)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;权限删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.auth_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开auth_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-06a8c82facc2bc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后别忘了在auth_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看权限删除功能是否已经实现了呢，接下来进行权限的编辑功能的实现！</p><h2 id="权限的编辑"><a href="#权限的编辑" class="headerlink" title="权限的编辑"></a>权限的编辑</h2><p>打开views.py文件，我们在权限列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 权限编辑</span><br><span class="line">@admin.route(&apos;/auth/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_edit(id=None):</span><br><span class="line">    form = AuthForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    auth = Auth.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        auth.url = data[&quot;url&quot;]</span><br><span class="line">        auth.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(auth)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改权限成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.auth_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/auth_edit.html&quot;, form=form, auth=auth)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建auth_edit.html页面，将auth_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d4f685a7f371142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后在auth_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！</p><p>至此，本篇关于日志管理和权限管理的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十一篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十一篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十）：收藏管理和密码修改</title>
      <link href="/2018/06/14/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E6%94%B6%E8%97%8F%E7%AE%A1%E7%90%86%E5%92%8C%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
      <url>/2018/06/14/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E6%94%B6%E8%97%8F%E7%AE%A1%E7%90%86%E5%92%8C%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（九）：会员和评论管理</title>
      <link href="/2018/06/13/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%BC%9A%E5%91%98%E5%92%8C%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/13/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%BC%9A%E5%91%98%E5%92%8C%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍会员和评论管理，这个和前面介绍的标签，电影，预告管理差不多，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第九篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第九篇。</a></p><h2 id="会员管理"><a href="#会员管理" class="headerlink" title="会员管理"></a>会员管理</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="插入一些数据"><a href="#插入一些数据" class="headerlink" title="插入一些数据"></a>插入一些数据</h3><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入<code>cmd</code>，然后输入<code>mysql -uroot -proot</code>后回车，接着<code>use movie;</code> 然后查询一下user的信息：<code>select * from user;</code>接着复制粘贴下面的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 会员列表</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;红&apos;,&apos;1001&apos;,&apos;1001@128.com&apos;,&apos;18888888881&apos;,&apos;红&apos;,&apos;01.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe0&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;蓝&apos;,&apos;1002&apos;,&apos;1002@128.com&apos;,&apos;18888888882&apos;,&apos;蓝&apos;,&apos;02.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe1&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;绿&apos;,&apos;1003&apos;,&apos;1003@128.com&apos;,&apos;18888888883&apos;,&apos;绿&apos;,&apos;03.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe2&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;白&apos;,&apos;1004&apos;,&apos;1004@128.com&apos;,&apos;18888888884&apos;,&apos;白&apos;,&apos;04.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe3&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;紫&apos;,&apos;1005&apos;,&apos;1005@128.com&apos;,&apos;18888888885&apos;,&apos;紫&apos;,&apos;05.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe4&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;黄&apos;,&apos;1006&apos;,&apos;1006@128.com&apos;,&apos;18888888886&apos;,&apos;黄&apos;,&apos;06.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe5&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;青&apos;,&apos;1007&apos;,&apos;1007@128.com&apos;,&apos;18888888887&apos;,&apos;青&apos;,&apos;07.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe6&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;橙&apos;,&apos;1008&apos;,&apos;1008@128.com&apos;,&apos;18888888888&apos;,&apos;橙&apos;,&apos;08.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe7&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;赤&apos;,&apos;1009&apos;,&apos;1009@128.com&apos;,&apos;18888888889&apos;,&apos;赤&apos;,&apos;09.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe8&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;靛&apos;,&apos;1010&apos;,&apos;1010@128.com&apos;,&apos;18888888891&apos;,&apos;靛&apos;,&apos;10.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe9&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;米&apos;,&apos;1011&apos;,&apos;1011@128.com&apos;,&apos;18888888892&apos;,&apos;米&apos;,&apos;11.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff0&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;栗&apos;,&apos;1012&apos;,&apos;1012@128.com&apos;,&apos;18888888893&apos;,&apos;栗&apos;,&apos;12.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff1&apos;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：<code>select * from user;</code>，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">| id | name | pwd  | email        | phone       | info | face   | addtime             | uuid                             |</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">|  1 | 红   | 1001 | 1001@128.com | 18888888881 | 红   | 01.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe0 |</span><br><span class="line">|  2 | 蓝   | 1002 | 1002@128.com | 18888888882 | 蓝   | 02.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe1 |</span><br><span class="line">|  3 | 绿   | 1003 | 1003@128.com | 18888888883 | 绿   | 03.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe2 |</span><br><span class="line">|  4 | 白   | 1004 | 1004@128.com | 18888888884 | 白   | 04.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe3 |</span><br><span class="line">|  5 | 紫   | 1005 | 1005@128.com | 18888888885 | 紫   | 05.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe4 |</span><br><span class="line">|  6 | 黄   | 1006 | 1006@128.com | 18888888886 | 黄   | 06.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe5 |</span><br><span class="line">|  7 | 青   | 1007 | 1007@128.com | 18888888887 | 青   | 07.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe6 |</span><br><span class="line">|  8 | 橙   | 1008 | 1008@128.com | 18888888888 | 橙   | 08.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe7 |</span><br><span class="line">|  9 | 赤   | 1009 | 1009@128.com | 18888888889 | 赤   | 09.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe8 |</span><br><span class="line">| 10 | 靛   | 1010 | 1010@128.com | 18888888891 | 靛   | 10.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe9 |</span><br><span class="line">| 11 | 米   | 1011 | 1011@128.com | 18888888892 | 米   | 11.png | 2018-08-10 19:18:06 | d32a72bdac524478b7e4f6dfc8394ff0 |</span><br><span class="line">| 12 | 栗   | 1012 | 1012@128.com | 18888888893 | 栗   | 12.png | 2018-08-10 19:18:10 | d32a72bdac524478b7e4f6dfc8394ff1 |</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>当然你打开navicat在查询框里执行这段代码也是可以的，然后把图片都拷贝到uploads/users文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-abb9fe87fad88d72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="会员列表分页"><a href="#会员列表分页" class="headerlink" title="会员列表分页"></a>会员列表分页</h3><p>打开views.py文件，我们修改会员列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"># 会员列表</span><br><span class="line">@admin.route(&apos;/user/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = User.query.order_by(</span><br><span class="line">        User.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/user_list.html&quot;, page_data=page_data)</span><br><span class="line">    return render_template(&quot;admin/user_list.html&quot;)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.user_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开user_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-d66829c3d775b6dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开user_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.user_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于会员列表的介绍就到此为止了！接下来是会员的查看！</p><h3 id="会员的查看"><a href="#会员的查看" class="headerlink" title="会员的查看"></a>会员的查看</h3><p>打开views.py文件，我们修改user_view函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看会员</span><br><span class="line">@admin.route(&apos;/user/view/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_view(id=None):</span><br><span class="line">    user = User.query.get_or_404(int(id))</span><br><span class="line">    return render_template(&quot;admin/user_view.html&quot;, user=user)</span><br></pre></td></tr></table></figure></p><p>接着打开user_view.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-cacbe8b2e137541e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们的查看功能就完成了，接下来是实现删除会员的操作了！</p><h2 id="会员的删除"><a href="#会员的删除" class="headerlink" title="会员的删除"></a>会员的删除</h2><p>首先打开user_list.html页面，我们进行删除的跳转链接配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;label label-danger&quot; href=&quot;&#123;&#123; url_for(&apos;admin.user_del&apos;, id =v.id) &#125;&#125;&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>接着就是打开views.py文件，定义我们的会员删除函数，我们可以仿照之前的电影删除或者是预告删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员删除</span><br><span class="line">@admin.route(&apos;/user/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_del(id=None):</span><br><span class="line">    user = User.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;会员删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.user_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开user_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-9411846ce2a29b04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后去测试一下我们的项目，看一看关于会员列表的相关功能是否都已经实现了呢！</p><h2 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Comment<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET （不涉及到信息的提交）<br>访问控制: @admin_login_req</p><h3 id="插入一些数据-1"><a href="#插入一些数据-1" class="headerlink" title="插入一些数据"></a>插入一些数据</h3><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入<code>cmd</code>，然后输入<code>mysql -uroot -proot</code>后回车，接着<code>use movie;</code> 然后查询一下comment的信息：<code>select * from comment;</code>接着复制粘贴下面的代码:（记住电影id要和你之前定义的电影id一样，因为是外键关联，当然也包括会员Id）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,1,&quot;好看&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,2,&quot;不错&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,3,&quot;经典&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,4,&quot;给力&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,5,&quot;精彩&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,6,&quot;无聊&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,7,&quot;乏味&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,8,&quot;难看&quot;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：select * from comment;，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from comment;</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">| id | content | movie_id | user_id | addtime             |</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">|  1 | 好看    |        1 |       1 | 2018-08-10 20:18:16 |</span><br><span class="line">|  2 | 不错    |        1 |       2 | 2018-08-10 20:18:16 |</span><br><span class="line">|  3 | 经典    |        5 |       3 | 2018-08-10 20:18:16 |</span><br><span class="line">|  4 | 给力    |        5 |       4 | 2018-08-10 20:18:16 |</span><br><span class="line">|  5 | 精彩    |        5 |       5 | 2018-08-10 20:18:16 |</span><br><span class="line">|  6 | 无聊    |        1 |       6 | 2018-08-10 20:18:16 |</span><br><span class="line">|  7 | 乏味    |        5 |       7 | 2018-08-10 20:18:16 |</span><br><span class="line">|  8 | 难看    |        1 |       8 | 2018-08-10 20:18:18 |</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开views.py文件，我们修改评论列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">@admin.route(&apos;/comment/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def comment_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == Comment.movie_id,</span><br><span class="line">        User.id == Comment.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/comment_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">           &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 评论列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开comment_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba50a35983497c8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开comment_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.comment_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于评论列表的介绍就到此为止了！接下来是评论的删除！</p><h2 id="评论的删除"><a href="#评论的删除" class="headerlink" title="评论的删除"></a>评论的删除</h2><p>打开views.py文件，我们新定义comment_del函数：（仿照会员删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 删除评论</span><br><span class="line">@admin.route(&apos;/comment/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def comment_del(id=None):</span><br><span class="line">    comment = Comment.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(comment)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;评论删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.comment_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开comment_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-1f20a5232b4b4802.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后别忘了在comment_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger pull-right&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看关于评论列表的相关功能是否都已经实现了呢！</p><p>至此本篇关于会员和评论管理的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第九篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第九篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（八）：预告管理</title>
      <link href="/2018/06/12/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E9%A2%84%E5%91%8A%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/12/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E9%A2%84%E5%91%8A%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍预告管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第八篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第八篇。</a></p><h2 id="预告管理"><a href="#预告管理" class="headerlink" title="预告管理"></a>预告管理</h2><p>包括添加预告和预告列表这两个模块，下面我们先介绍添加预告这个功能的实现。</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Preview<br>表单: PreviewForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是预告添加模块，所以对应的html页面就是<code>preview_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>preview_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问preview_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 添加预告</span><br><span class="line">class PreviewForm(FlaskForm):</span><br><span class="line">    title = StringField(</span><br><span class="line">        label=&quot;预告标题&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;预告标题不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;预告标题&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_title&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入预告标题！！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    logo = FileField(</span><br><span class="line">        label=&quot;预告封面&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传预告封面！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;预告封面&quot;,</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>preview_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import PreviewForm</span><br><span class="line">from app.models import Preview</span><br><span class="line"></span><br><span class="line"># 上映预告列表</span><br><span class="line">@admin.route(&apos;/preview/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的movie_add.html来修改preview_add.html:<img src="https://upload-images.jianshu.io/upload_images/8964398-6385c8afabe9f97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在submit的上面添加<code></code>，还有form提交的方法以及上传文件类别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开preview_add.html页面，我们同样可以仿照movie_add.html来进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、为视图函数添加方法"><a href="#5、为视图函数添加方法" class="headerlink" title="5、为视图函数添加方法"></a>5、为视图函数添加方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告添加</span><br><span class="line">@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;)</span><br></pre></td></tr></table></figure><h3 id="6、修改预告添加函数"><a href="#6、修改预告添加函数" class="headerlink" title="6、修改预告添加函数"></a>6、修改预告添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告添加</span><br><span class="line">@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line">        logo = change_filename(file_logo)</span><br><span class="line">        # 把他们进行保存到文件夹下面</span><br><span class="line">        form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo)</span><br><span class="line">        # 之后的url和logo就是我们修改之后的地址</span><br><span class="line">        preview = Preview(</span><br><span class="line">            title=data[&quot;title&quot;],</span><br><span class="line">            logo=logo,</span><br><span class="line">        )</span><br><span class="line">        db.session.add(preview)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加预告成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.preview_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的上映预告了。</p><h2 id="预告列表的配置"><a href="#预告列表的配置" class="headerlink" title="预告列表的配置"></a>预告列表的配置</h2><p>打开我们的views.py文件，我们参考之前的电影列表的配置，对预告列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告列表</span><br><span class="line">@admin.route(&apos;/preview/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Preview.query.order_by(</span><br><span class="line">        Preview.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/preview_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：<img src="https://upload-images.jianshu.io/upload_images/8964398-ac09258658426227.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开preview_list.html页面，进行for循环的填充：<img src="https://upload-images.jianshu.io/upload_images/8964398-fcd390e38d4cc118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着就是分页功能了，我们参考之前在电影列表页面的配置，打开preview_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.preview_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py发现图片太大了，我们可以限制一下它的大小：<img src="https://upload-images.jianshu.io/upload_images/8964398-fb3879ea085971f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，这样就好多了：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba1d33e6ffbefc57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，关于预告列表的介绍就到此为止了！接下来是预告的删除和编辑！</p><h2 id="预告的删除"><a href="#预告的删除" class="headerlink" title="预告的删除"></a>预告的删除</h2><p>打开views.py文件，我们在预告列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 预告删除</span><br><span class="line">@admin.route(&apos;/preview/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_del(id=None):</span><br><span class="line">    preview = Preview.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(preview)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;预告删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.preview_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开preview_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">   &lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">  &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-body table-responsive no-padding&quot;&gt;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开preview_list.html页面，修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="预告的编辑"><a href="#预告的编辑" class="headerlink" title="预告的编辑"></a>预告的编辑</h2><p>打开views.py文件，我们在预告列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告编辑</span><br><span class="line">@admin.route(&apos;/preview/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_edit(id):</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    form.logo.validators = []  # 如果封面为空，我们就不需要修改</span><br><span class="line">    preview = Preview.query.get_or_404(int(id))</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.title.data = preview.title   # 给title赋初始值</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        if form.logo.data != &quot;&quot;:</span><br><span class="line">            file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">            preview.logo = change_filename(file_logo)</span><br><span class="line">            form.logo.data.save(app.config[&quot;UP_DIR&quot;] + preview.logo)</span><br><span class="line">        preview.title = data[&quot;title&quot;]</span><br><span class="line">        db.session.add(preview)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改预告成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&apos;admin.preview_edit&apos;, id=id))</span><br><span class="line">    return render_template(&quot;admin/preview_edit.html&quot;, form=form, preview=preview)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建preview_edit.html页面，将preview_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且将其中的图片地址替换为我们当前预告的图片地址（赋初值）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;uploads/&apos;+preview.logo) &#125;&#125;&quot; style=&quot;margin-top:5px;&quot; class=&quot;img-responsive&quot;alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>然后在preview_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，我们的项目关于预告这一功能是不是都能使用了！</p><p>至此，我们关于预告的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第八篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第八篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（七）：电影管理</title>
      <link href="/2018/06/11/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%94%B5%E5%BD%B1%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/11/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%94%B5%E5%BD%B1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍电影管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第七篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第七篇。</a></p><h2 id="电影管理"><a href="#电影管理" class="headerlink" title="电影管理"></a>电影管理</h2><p>包括添加电影和电影列表这两个模块，下面我们先介绍添加电影这个功能的实现。</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie<br>表单: MovieForm<br>请求方法: GET POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是标签添加模块，所以对应的html页面就是<code>movie_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>movie_add.html</code>里面的保持一致！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">from wtforms import FileField, TextAreaField, SelectField</span><br><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加电影</span><br><span class="line">class MovieForm(FlaskForm):</span><br><span class="line">    title= StringField(</span><br><span class="line">        label=&quot;片名&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;片名不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;片名&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_title&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入片名！！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    url = FileField(</span><br><span class="line">        label=&quot;文件&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传文件！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;文件&quot;,</span><br><span class="line">    )</span><br><span class="line">    info = TextAreaField(</span><br><span class="line">        label=&quot;简介&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;简介不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;简介&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;rows=&quot;: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    logo = FileField(</span><br><span class="line">        label=&quot;封面&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传封面！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;封面&quot;,</span><br><span class="line">    )</span><br><span class="line">    star = SelectField(</span><br><span class="line">        label=&quot;星级&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择星级！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 星级是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用下拉选择的方式进行星级的选择</span><br><span class="line">        choices=[(1, &quot;1星级&quot;), (2, &quot;2星级&quot;), (3, &quot;3星级&quot;), (4, &quot;4星级&quot;), (5, &quot;5星级&quot;)],</span><br><span class="line">        description=&quot;星级&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    tag_id = SelectField(</span><br><span class="line">        label=&quot;所属标签&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择标签！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 标签id也是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用列表递归式来取出所有的标签</span><br><span class="line">        choices=[(v.id, v.name)for v in Tag.query.all()],</span><br><span class="line">        description=&quot;标签&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    area = StringField(</span><br><span class="line">        label=&quot;上映地区&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入地区！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;地区&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_area&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入地区！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    length = StringField(</span><br><span class="line">        label=&quot;电影片长&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入片长！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;片长&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_length&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入片长！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    release_time = StringField(</span><br><span class="line">        label=&quot;上映时间&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入上映时间！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;上映时间&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_release_time&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入上映时间！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>movie_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import MovieForm</span><br><span class="line">from app.models import Movie</span><br><span class="line"></span><br><span class="line"># 电影添加</span><br><span class="line">@admin.route(&apos;/movie/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_add():</span><br><span class="line">    form = MovieForm()</span><br><span class="line">    return render_template(&quot;admin/movie_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示"><a href="#3、后台页面传值显示" class="headerlink" title="3、后台页面传值显示"></a>3、后台页面传值显示</h3><p>修改<code>movie_add.html</code>:<img src="https://upload-images.jianshu.io/upload_images/8964398-1df230c892fb53a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在submit的上面添加<code></code>，还有form提交的方法以及上传文件类别：<br>···<br>  <form role="form" method="post" enctype="multipart/form-data"><br>···</form></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开movie_tag.html页面，我们进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d5274e79c71a8219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、文件上传"><a href="#5、文件上传" class="headerlink" title="5、文件上传"></a>5、文件上传</h3><p>打开app/–init–.py文件，我们现在上传文件代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">app.config[&quot;UP_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="6、定义修改文件名称函数"><a href="#6、定义修改文件名称函数" class="headerlink" title="6、定义修改文件名称函数"></a>6、定义修改文件名称函数</h3><p>在views.py文件新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from app import db, app</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">import os</span><br><span class="line">import uuid</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改文件名称</span><br><span class="line">def change_filename(filename):</span><br><span class="line">    fileinfo = os.path.splitext(filename)</span><br><span class="line">    filename = datetime.now().strftime(&quot;%Y%m%d%H%M%S&quot;) + str(uuid.uuid4().hex) + fileinfo[-1]  # 文件后缀</span><br><span class="line">    return filename</span><br></pre></td></tr></table></figure></p><h3 id="7、修改添加电影函数"><a href="#7、修改添加电影函数" class="headerlink" title="7、修改添加电影函数"></a>7、修改添加电影函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 电影添加</span><br><span class="line">@admin.route(&apos;/movie/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_add():</span><br><span class="line">    form = MovieForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        file_url = secure_filename(form.url.data.filename)</span><br><span class="line">        file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line">        url = change_filename(file_url)</span><br><span class="line">        logo = change_filename(file_logo)</span><br><span class="line">        # 把他们进行保存到文件夹下面</span><br><span class="line">        form.url.data.save(app.config[&quot;UP_DIR&quot;] + url)</span><br><span class="line">        form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo)</span><br><span class="line">        # 之后的url和logo就是我们修改之后的地址</span><br><span class="line">        movie = Movie(</span><br><span class="line">            title=data[&quot;title&quot;],</span><br><span class="line">            url=url,</span><br><span class="line">            info=data[&quot;info&quot;],</span><br><span class="line">            logo=logo,</span><br><span class="line">            star=data[&quot;star&quot;],</span><br><span class="line">            playnum=0,</span><br><span class="line">            commentnum=0,</span><br><span class="line">            tag_id=data[&quot;tag_id&quot;],</span><br><span class="line">            area=data[&apos;area&apos;],</span><br><span class="line">            release_time=data[&quot;release_time&quot;],</span><br><span class="line">            length=data[&quot;length&quot;],</span><br><span class="line">        )</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/movie_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><h3 id="8、添加电影成功消息闪现"><a href="#8、添加电影成功消息闪现" class="headerlink" title="8、添加电影成功消息闪现"></a>8、添加电影成功消息闪现</h3><p>打开movie_add.html页面，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-b78bb6d46fa669bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的manage.py发现报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builtins.TypeError</span><br><span class="line">TypeError: an integer is required (got type str)</span><br></pre></td></tr></table></figure></p><p>那是因为我们的星级和所属标签是Int类型，我们需要转换一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">star= int(data[&quot;star&quot;]),</span><br><span class="line">tag_id=int(data[&quot;tag_id&quot;]),</span><br></pre></td></tr></table></figure></p><p>接着重新运行一下我们的manage.py文件，发现电影添加没有任何问题。</p><p>至此，我们添加电影的功能就介绍完了，下面介绍电影管理列表的配置！</p><h2 id="电影管理列表的配置"><a href="#电影管理列表的配置" class="headerlink" title="电影管理列表的配置"></a>电影管理列表的配置</h2><p>电影管理列表的配置其实和我们之前配置的标签列表非常相似，所以我们介绍就快一点，打开admin/views.py文件，修改movie_list函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 电影列表</span><br><span class="line">@admin.route(&apos;/movie/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Movie.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/movie_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">       &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 电影列表</span><br><span class="line"> &lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开movie_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-da3301c9cce86c9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开movie_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.movie_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于电影列表的介绍就到此为止了！接下来是电影的删除和编辑！</p><h2 id="电影的删除"><a href="#电影的删除" class="headerlink" title="电影的删除"></a>电影的删除</h2><p>打开views.py文件，我们在电影列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 电影删除</span><br><span class="line">@admin.route(&apos;/movie/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_del(id=None):</span><br><span class="line">    movie = Movie.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;电影删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.movie_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开movie_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<img src="https://upload-images.jianshu.io/upload_images/8964398-0e45aebb89f51752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="电影的编辑"><a href="#电影的编辑" class="headerlink" title="电影的编辑"></a>电影的编辑</h2><p>打开views.py文件，我们在电影列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    movie = Movie.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建movie_edit.html页面，将movie_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为修改，为form.title增加初值(value=movie.title):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.title(value=movie.title)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别忘了还有form.url，form.info，form.star，form.tag_id，form.area，form.release_time和form.length：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &#123;&#123; form.url(value=movie.url) &#125;&#125;</span><br><span class="line"></span><br><span class="line"> &#123;&#123; form.info(value=movie.info) &#125;&#125;</span><br><span class="line"></span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><p><strong>注意form.logo的初值和其他不一样</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&apos;static&apos;,filename=&apos;uploads/&apos;+ movie.logo) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>就是这里：<img src="https://upload-images.jianshu.io/upload_images/8964398-ff3912dea133b403.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有js里面的也需要修改：<img src="https://upload-images.jianshu.io/upload_images/8964398-3d6ae2fe8d10c1c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还要在movie_list里面修改页面的跳转：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_edit&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，发现封面图片不显示：<img src="https://upload-images.jianshu.io/upload_images/8964398-d855382199c17182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>将图片里的data-src修改为src:<img src="https://upload-images.jianshu.io/upload_images/8964398-b91ffc40180b7349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新发现info，tag_id，star还是不行，我们需要重新配置这三个字段的初始值,去掉之前在movie_edit里面赋予的初始值(就是只有这种，不带初值)，我们直接在views.py文件里配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    movie = Movie.query.get_or_404(id)</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.info.data = movie.info</span><br><span class="line">        form.tag_id.data = movie.tag_id</span><br><span class="line">        form.star.data = movie.star</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>之后就是对修改的部分进行提交之后的保存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">movie.title = data[&quot;title&quot;]</span><br><span class="line">movie.info = data[&quot;info&quot;]</span><br><span class="line">movie.star = data[&quot;star&quot;]</span><br><span class="line">movie.tag_id = data[&quot;tag_id&quot;]</span><br><span class="line">movie.length = data[&quot;length&quot;]</span><br><span class="line">movie.area = data[&quot;area&quot;]</span><br><span class="line">movie.release_time = data[&quot;release_time&quot;]</span><br><span class="line">db.session.add(movie)</span><br><span class="line">db.session.commit()</span><br><span class="line">flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br></pre></td></tr></table></figure></p><p>不过这还有一个问题，那就是片名的唯一性，我们不可能有同名的电影（现实里面是有的，但做不到完全一样，至少在演员，导演，剧情，上映时间肯定有一个不一样，但这里我们只限定片名不一样即可！）</p><h3 id="片名的唯一性"><a href="#片名的唯一性" class="headerlink" title="片名的唯一性"></a>片名的唯一性</h3><p>打开views.py文件，我们修改电影编辑函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    form.url.validators = []    # 因为是编辑，所以首先必须是非空才需要验证</span><br><span class="line">    form.logo.validators = []</span><br><span class="line">    movie = Movie.query.get_or_404(int(id))</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.info.data = movie.info</span><br><span class="line">        form.tag_id.data = movie.tag_id</span><br><span class="line">        form.star.data = movie.star</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        movie_count = Movie.query.filter_by(title=data[&quot;title&quot;]).count()</span><br><span class="line">        # 电影去重，唯一性</span><br><span class="line">        if movie.title != data[&quot;title&quot;] and movie_count == 1:</span><br><span class="line">            flash(&quot;该影片已经存在了！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;admin.movie_edit&quot;, id=id))</span><br><span class="line">        # 如果文件夹不存在，那么就创建一个文件夹</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line"></span><br><span class="line">        # 如果视频文件修改了，就进行替换</span><br><span class="line">        if form.url.data.filename != &quot;&quot;:</span><br><span class="line">            file_url = secure_filename(form.url.data.filename)</span><br><span class="line">            movie.url = change_filename(file_url)</span><br><span class="line">            form.url.data.save(app.config[&quot;UP_DIR&quot;] + movie.url)</span><br><span class="line"></span><br><span class="line">        # 如果图片文件修改了，就进行替换</span><br><span class="line">        if form.logo.data.filename != &quot;&quot;:</span><br><span class="line">            file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">            movie.logo = change_filename(file_logo)</span><br><span class="line">            form.logo.data.save(app.config[&quot;UP_DIR&quot;] + movie.logo)</span><br><span class="line"></span><br><span class="line">        movie.title = data[&quot;title&quot;]</span><br><span class="line">        movie.info = data[&quot;info&quot;]</span><br><span class="line">        movie.star = data[&quot;star&quot;]</span><br><span class="line">        movie.tag_id = data[&quot;tag_id&quot;]</span><br><span class="line">        movie.length = data[&quot;length&quot;]</span><br><span class="line">        movie.area = data[&quot;area&quot;]</span><br><span class="line">        movie.release_time = data[&quot;release_time&quot;]</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>接下来去movie_edit.html页面添加操作信息提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">   &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">          &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;err&quot;]) %&#125;</span><br><span class="line"> &lt;div class=&quot;alert alert-danger alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-ban&quot;&gt;&lt;/i&gt; 操作失败&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下我们的后台，发现关于电影这一功能是不是都能使用了！</p><p>至此，我们关于电影管理的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第七篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第七篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（六）：标签管理</title>
      <link href="/2018/06/09/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/09/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们继续介绍后台页面逻辑的开发（所有的内容都是在后台admin下面，不与前台home有关系），今天分享的是关于标签的介绍，内容比较难懂，请多熟悉一下。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第六篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第六篇。</a></p><h2 id="标签管理的配置"><a href="#标签管理的配置" class="headerlink" title="标签管理的配置"></a>标签管理的配置</h2><p>后面所有的后台功能的配置几乎都是这样，像电影管理，预告管理，会员管理。。。<br>所以我这里介绍详细一点，后面的可能就没这么详细了，好了话不多说，我们开始介绍！</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Tag<br>表单: TagForm<br>请求方法: GET POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是标签添加模块，所以对应的html页面就是<code>tag_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>tag_add.html</code>里面的保持一致！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加标签</span><br><span class="line">class TagForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入标签&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;标签&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入标签名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &quot;添加&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>tag_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import TagForm</span><br><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"># 标签编辑</span><br><span class="line">@admin.route(&apos;/tag/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_add():</span><br><span class="line">    form = TagForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    return render_template(&quot;admin/tag_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示"><a href="#3、后台页面传值显示" class="headerlink" title="3、后台页面传值显示"></a>3、后台页面传值显示</h3><p>修改<code>tag_add.html</code>:<img src="https://upload-images.jianshu.io/upload_images/8964398-194356115caf95e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开tag_tag.html页面，我们进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.name.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-cde6ef1259bb0157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、修改提交方法"><a href="#5、修改提交方法" class="headerlink" title="5、修改提交方法"></a>5、修改提交方法</h3><p>打开tag_tag.html页面，我们进行修改：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9dfbf4cc4cc63623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着我们回到views.py文件，修改add_tag函数的提交方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 标签编辑</span><br><span class="line">@admin.route(&apos;/tag/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br></pre></td></tr></table></figure></p><h3 id="6、标签去除重名"><a href="#6、标签去除重名" class="headerlink" title="6、标签去除重名"></a>6、标签去除重名</h3><p>打开views.py文件，我们继续修改tag_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 标签编辑</span><br><span class="line">@admin.route(&apos;/tag/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_add():</span><br><span class="line">    form = TagForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        tag = Tag.query.filter_by(name=data[&quot;name&quot;]).count()</span><br><span class="line">        # 标签去重</span><br><span class="line">        if tag == 1:</span><br><span class="line">            flash(&quot;该标签已经存在了！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;admin.tag_add&quot;))</span><br><span class="line">        tag = Tag(</span><br><span class="line">            name=data[&quot;name&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(tag)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加标签成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.tag_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/tag_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="7、添加成功或者失败提示"><a href="#7、添加成功或者失败提示" class="headerlink" title="7、添加成功或者失败提示"></a>7、添加成功或者失败提示</h3><p>打开static/admin/index.html页面，我们用浏览器打开，点击UI element/General，就出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-e9a0cbe184c1387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>或者点击这里<a href="https://adminlte.io/" target="_blank" rel="noopener">admin LE2</a>，先下载文件，然后点击查看也可以！接着我们按键盘上的F12开启开发者工具，然后定位绿色的成功框，复制它的html源代码到我们的tag_agg.html页面，然后修改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">  &lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">        添加标签成功！</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>觉得格式不好看，可以ctal+alt+L进行代码的格式化。然后进行for循环遍历，就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-bde4aa4c1d7937cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>因为已经for循环了，所以需要把里面的 <strong>添加标签成功！</strong>修改为！<br>那么失败呢？也是类似的操作（用红色的框的代码），这里就只附上代码了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages("err") %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger alert-dismissible"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>×</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon fa fa-ban"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 操作失败<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>运行一下manage.py，然后添加一个标签，发现出了问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-ad6fa066a9b6a432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这是因为我们的get_flashed_messages用错了，可以点击这里查看官方文档：<a href="http://docs.jinkan.org/docs/flask/patterns/flashing.html" target="_blank" rel="noopener">过滤闪现消息</a><br>修改为这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get_flashed_messages(category_filter=[&quot;ok&quot;])</span><br><span class="line"></span><br><span class="line">get_flashed_messages(category_filter=[&quot;err&quot;])</span><br></pre></td></tr></table></figure></p><p>现在添加就没有问题了！</p><p>至此，我们关于标签的添加就介绍完了，下面就是标签的动态显示了！</p><h2 id="标签列表的配置"><a href="#标签列表的配置" class="headerlink" title="标签列表的配置"></a>标签列表的配置</h2><p>打开admin/views.py文件，修改tag_list函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 标签列表</span><br><span class="line">@admin.route(&apos;/tag/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = Tag.query.order_by(</span><br><span class="line">        Tag.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=1)</span><br><span class="line">    return render_template(&quot;admin/tag_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后tag_list.htm页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for v in page_data.items %&#125;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;&#123;&#123; v.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">td&gt;&#123;&#123; v.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.addtime &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;a class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">&lt;a class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">         &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 标签列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>点击这里，获取api<a href="http://www.pythondoc.com/flask-sqlalchemy/api.html#id4" target="_blank" rel="noopener">实用工具</a>，我们采用了macro的语法，我们在static文件夹下面新建一个ui的文件，然后在里面创建admin_page.html文件：<img src="https://upload-images.jianshu.io/upload_images/8964398-5b9027a160859caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后复制这段代码到里面去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro page(data,url) -%&#125;</span><br><span class="line">    &#123;% if data %&#125;</span><br><span class="line">        &lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=1) &#125;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &#123;% if data.has_prev %&#125;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.prev_num) &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                &lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% for v in data.iter_pages() %&#125;</span><br><span class="line">                &#123;% if v %&#125;</span><br><span class="line">                    &#123;% if v == data.page %&#125;</span><br><span class="line">                        &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123; v &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                    &#123;% else %&#125;</span><br><span class="line">                        &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=v) &#125;&#125;&quot;&gt;&#123;&#123; v &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% if data.has_next %&#125;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.next_num) &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                &lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.pages) &#125;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;%- endmacro %&#125;</span><br></pre></td></tr></table></figure></p><p>然后去掉tag_list.html里面的图中所示的那段代码：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-13cd9dbcb7227a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>并且在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.tag_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于标签列表的介绍就到此为止了！接下来是标签的删除和编辑！</p><h2 id="标签的删除"><a href="#标签的删除" class="headerlink" title="标签的删除"></a>标签的删除</h2><p>首先点击这里，获取官方文档<a href="http://www.pythondoc.com/flask-sqlalchemy/queries.html" target="_blank" rel="noopener">flask-sqlalchemy删除</a>,了解一下，我们现在开始编辑代码：打开views.py文件，我们在标签列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 标签删除</span><br><span class="line">@admin.route(&apos;/tag/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_del(id=None):</span><br><span class="line">    tag = Tag.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(tag)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;标签删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.tag_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开tag_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<img src="https://upload-images.jianshu.io/upload_images/8964398-451a1e8bfee46c51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="标签的编辑"><a href="#标签的编辑" class="headerlink" title="标签的编辑"></a>标签的编辑</h2><p>打开views.py文件，我们在标签列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 编辑标签</span><br><span class="line">@admin.route(&apos;/tag/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_edit(id=None):</span><br><span class="line">    form = TagForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    tag = Tag.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        tag_count = Tag.query.filter_by(name=data[&quot;name&quot;]).count()</span><br><span class="line">        # 标签去重</span><br><span class="line">        if tag.name != data[&quot;name&quot;] and tag_count == 1:</span><br><span class="line">            flash(&quot;该标签已经存在了！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;admin.tag_edit&quot;, id=id))</span><br><span class="line">        tag.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(tag)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改标签成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.tag_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/tag_edit.html&quot;, form=form, tag=tag)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建tag_edit.html页面，将tag_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑，为form.name增加属性(value=tag.name)，还要在form提交时添加action:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; action=&quot;&#123;&#123; url_for(&apos;admin.tag_edit&apos;, id=tag.id) &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>然后在tag_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_edit&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>以及标签的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=&quot;id&quot; value=&quot;&#123;&#123; tag.id &#125;&#125;&quot; type=&quot;hidden&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-8e13098af79daaa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，我们的项目关于标签这一功能是不是都能使用了！</p><p>至此，我们关于标签的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第六篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第六篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（五）：访问控制器</title>
      <link href="/2018/06/06/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>/2018/06/06/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（四）：后台页面搭建</title>
      <link href="/2018/06/04/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/06/04/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来学习Flask网站后台页面的搭建，因此我们本篇内容均在admin目录下面进行，所有与home相关的页面此刻都可以关闭了。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第四篇。</a></p><h2 id="管理员登录页面搭建"><a href="#管理员登录页面搭建" class="headerlink" title="管理员登录页面搭建"></a>管理员登录页面搭建</h2><p>打开我们的app/admin/views.py文件，我们在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import render_template, redirect, url_for</span><br><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@admin.route(&apos;/login/&apos;)</span><br><span class="line">def login():</span><br><span class="line">    return render_template(&quot;admin/login.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登出</span><br><span class="line">@admin.route(&apos;/logout/&apos;)</span><br><span class="line">def logout():</span><br><span class="line">    return redirect(url_for(&apos;admin.login&apos;))</span><br></pre></td></tr></table></figure></p><p>接下来就是在templates/admin文件夹下面新建对应的html文件（但是我们这里因为logout只是重定向到我们的login页面，因此只需要创建一个login.html即可），然后我们打开新建的login文件，复制3-admin/login.html的内容，并对静态文件和url跳转做一下配置，很简单，这里就不一一演示了。</p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="评论管理页面搭建"><a href="#评论管理页面搭建" class="headerlink" title="评论管理页面搭建"></a>评论管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">@admin.route(&apos;/comment/list&apos;)</span><br><span class="line">def comment_list():</span><br><span class="line">    return render_template(&quot;admin/comment_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-6和g-6-1，注意此处没有g-6-2!然后打开comment_list.html页面，对评论进行for循环，并修改页面的静态文件路径:<img src="https://upload-images.jianshu.io/upload_images/8964398-f4c6c081e73240be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="收藏管理页面搭建"><a href="#收藏管理页面搭建" class="headerlink" title="收藏管理页面搭建"></a>收藏管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 电影收藏</span><br><span class="line">@admin.route(&apos;/moviecol/list&apos;)</span><br><span class="line">def moviecol_list():</span><br><span class="line">    return render_template(&quot;admin/moviecol_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-7和g-7-1，注意此处没有g-7-2!然后打开moviecol_list.html页面，对收藏进行for循环：<img src="https://upload-images.jianshu.io/upload_images/8964398-5a9d51c159e4f586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="日志管理页面搭建"><a href="#日志管理页面搭建" class="headerlink" title="日志管理页面搭建"></a>日志管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 操作日志列表</span><br><span class="line">@admin.route(&apos;/oplog/list&apos;)</span><br><span class="line">def oplog_list():</span><br><span class="line">    return render_template(&quot;admin/oplog_list.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理员登录日志列表</span><br><span class="line">@admin.route(&apos;/adminloginlog/list&apos;)</span><br><span class="line">def adminloginlog_list():</span><br><span class="line">    return render_template(&quot;admin/adminloginlog_list.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 会员登录日志列表</span><br><span class="line">@admin.route(&apos;/userloginlog/list&apos;)</span><br><span class="line">def userloginlog_list():</span><br><span class="line">    return render_template(&quot;admin/userloginlog_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-8和g-8-1，g-8-2，g-8-3!然后打开3个html页面，对管理员，会员进行for循环遍历即可，这里就不多说了。</p><h2 id="权限管理页面搭建"><a href="#权限管理页面搭建" class="headerlink" title="权限管理页面搭建"></a>权限管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;)</span><br><span class="line">def auth_add():</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 权限列表</span><br><span class="line">@admin.route(&apos;/auth/list&apos;)</span><br><span class="line">def auth_list():</span><br><span class="line">    return render_template(&quot;admin/auth_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-9和g-9-1，g-9-2!然后打开auth_list.html页面，对权限进行for循环遍历即可，这里就不多说了。</p><h2 id="角色管理页面搭建"><a href="#角色管理页面搭建" class="headerlink" title="角色管理页面搭建"></a>角色管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 添加角色</span><br><span class="line">@admin.route(&apos;/role/add&apos;)</span><br><span class="line">def role_add():</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 角色列表</span><br><span class="line">@admin.route(&apos;/role/list&apos;)</span><br><span class="line">def role_list():</span><br><span class="line">    return render_template(&quot;admin/role_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-10和g-10-1，g-10-2!然后打开role_list.html页面，对角色进行for循环遍历即可，这里就不多说了。需要特别注意的是role_add.html页面有自己单独的css，需要你block一下。</p><h2 id="管理员管理页面的搭建"><a href="#管理员管理页面的搭建" class="headerlink" title="管理员管理页面的搭建"></a>管理员管理页面的搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">@admin.route(&apos;/admin/add&apos;)</span><br><span class="line">def admin_add():</span><br><span class="line">    return render_template(&quot;admin/admin_add.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理员列表</span><br><span class="line">@admin.route(&apos;/admin/list&apos;)</span><br><span class="line">def admin_list():</span><br><span class="line">    return render_template(&quot;admin/admin_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-11和g-11-1，g-11-2!然后打开admin_list.html页面，对管理员进行for循环遍历即可，这里就不多说了。</p><p>至此，我们本篇关于后台页面搭建的介绍就到此为止了，感谢你的赏阅！下一篇，我们将正式进入到后台页面逻辑的开发了，希望你紧跟我的步伐，一步步敲下去，最后一个属于自己的微电影网站就会出现，那时的你心里乐开了花，我们期待着那样的一个你！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第四篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（三）：前端首页搭建</title>
      <link href="/2018/06/03/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%A6%96%E9%A1%B5%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/06/03/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%A6%96%E9%A1%B5%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来学习Flask网站前端首页面的搭建，这其实和Django搭建网页很类似，大家好好体会一下。</p><p>获取更多教程，请点击注册啃饼网:<a href="http://www.licheetools.top/" target="_blank" rel="noopener">http://www.licheetools.top</a></p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第三篇。</a></p><h2 id="前台布局搭建"><a href="#前台布局搭建" class="headerlink" title="前台布局搭建"></a>前台布局搭建</h2><p>第一步将所有static文件都放进指定的位置：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-dae3b19af76a8a35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后在templates/home文件夹下面新建一个home.html文件，将tpl/2-movie/nav.html文件内容全部拷贝到我们刚才新建的home.html页面里面，然后修改我们静态文件的目录，可以按照下面的图片要求进行：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8020177352e06aac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>1、静态文件的引入</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&apos;static&apos;,filename=&apos;文件路径&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2、定义路由</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&apos;模块名.视图名&apos;,变量=参数)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3、定义数据块</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%block 数据块名称%&#125; .....&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 原来代码为 &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/base/css/bootstrap.min.css&quot;&gt;</span><br><span class="line"># 现在代码为   &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap.min.css&apos;) &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>其余所有的js, jpg,css均按照这样的要求进行，这里就不再一一提示了，直接附上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link rel=&quot;shortcut icon&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/images/logo.png&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap.min.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap-movie.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/animate.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/images/logo.png&apos;) &#125;&#125;&quot; style=&quot;height:30px;&quot;&gt;&amp;nbsp;微电影</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/jquery.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/bootstrap.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/jquery.singlePageNav.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/wow.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;lazyload/jquery.lazyload.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>接着在图示位置进行挖坑填坑操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top:76px&quot;&gt;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开home模块的视图处理器（home/views.py）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from . import home</span><br><span class="line">from flask import render_template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@home.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;home/index.html&quot;)i</span><br></pre></td></tr></table></figure></p><p>你发现没有此刻我们在templates/home文件夹下面是没有index.html文件的，我们需要去创建一个index.html文件，在里面输入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block %&#125;</span><br><span class="line">&lt;h1&gt;helloworld&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，在浏览器地址栏中输入<a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a> 出现了错误：<img src="https://upload-images.jianshu.io/upload_images/8964398-b9c6375a97a1fd18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>错误提示我们block缺少一个名字，那我们就修改一下index.html文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;Helo,World!&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后再次刷新一下我们的页面，发现还是出了问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-5b8c84d06ee45c38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>错误提示我们没有找到home.html页面，那是因为我们的路径出了问题，我们继续修改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;Helo,World!&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接着我们再次刷新一下，页面正常显示了：<img src="https://upload-images.jianshu.io/upload_images/8964398-372c157c1cf0ceb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="会员登录页面搭建"><a href="#会员登录页面搭建" class="headerlink" title="会员登录页面搭建"></a>会员登录页面搭建</h2><p>打开app/home/views.py文件，新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import  redirect, url_for</span><br><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;)</span><br><span class="line">def login():</span><br><span class="line">    return render_template(&quot;home/login.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登出</span><br><span class="line">@home.route(&apos;/logout/&apos;)</span><br><span class="line">def logout():</span><br><span class="line">    return redirect(url_for(&apos;home.login&apos;))</span><br></pre></td></tr></table></figure></p><p>然后在templates/home下面新建login.html文件，往里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;home/home.html&apos; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;panel panel-primary&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">                    &lt;h3 class=&quot;panel-title&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-log-in&quot;&gt;&lt;/span&gt;&amp;nbsp;会员登录&lt;/h3&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">                    &lt;form role=&quot;form&quot;&gt;</span><br><span class="line">                        &lt;fieldset&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_contact&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;账号&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_contact&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;用户名/邮箱/手机号码&quot; name=&quot;contact&quot; type=&quot;text&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_contact&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_password&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;密码&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_password&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;密码&quot; name=&quot;password&quot; type=&quot;password&quot; value=&quot;&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_password&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;a href=&quot;user.html&quot; class=&quot;btn btn-lg btn-success btn-block&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">                        &lt;/fieldset&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>（这段代码来自tpl/2-movie/login.html里面<div class="container" style="margin-top:120px"> 内容</div>的内容部分）<br>然后打开home/home.html文件，修改我们的url跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-089318013909fb7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="会员注册"><a href="#会员注册" class="headerlink" title="会员注册"></a>会员注册</h2><p>打开app/home/views.py文件，新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;)</span><br><span class="line">def register():</span><br><span class="line">    return render_template(&quot;home/register.html&quot;)</span><br></pre></td></tr></table></figure></p><p>然后在templates/home下面新建register.html文件，往里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;home/home.html&apos; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;panel panel-success&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">                    &lt;h3 class=&quot;panel-title&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/span&gt;&amp;nbsp;会员注册&lt;/h3&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">                    &lt;form role=&quot;form&quot;&gt;</span><br><span class="line">                        &lt;fieldset&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_name&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;昵称&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_name&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;昵称&quot; name=&quot;name&quot; type=&quot;text&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_name&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_email&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-envelope&quot;&gt;&lt;/span&gt;&amp;nbsp;邮箱&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_email&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;邮箱&quot; name=&quot;email&quot; type=&quot;email&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_email&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_phone&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-phone&quot;&gt;&lt;/span&gt;&amp;nbsp;手机&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_phone&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;手机&quot; name=&quot;phone&quot; type=&quot;text&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_phone&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_password&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;密码&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_password&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;密码&quot; name=&quot;password&quot; type=&quot;password&quot; value=&quot;&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_password&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_repassword&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;确认密码&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_repassword&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;确认密码&quot; name=&quot;repassword&quot; type=&quot;password&quot; value=&quot;&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_repassword&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;a href=&quot;user.html&quot; class=&quot;btn btn-lg btn-success btn-block&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">                        &lt;/fieldset&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>（这段代码来自tpl/2-movie/register.html里面<div class="container" style="margin-top:120px"> 内容</div>的内容部分）<br>然后打开home/home.html文件，修改我们的url跳转链接：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-94beca17cc1bf19c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="会员中心页面搭建"><a href="#会员中心页面搭建" class="headerlink" title="会员中心页面搭建"></a>会员中心页面搭建</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-002ed5a8c1dd298a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>由于前面已经有过2个页面搭建的例子，所以这里我们先定义完所以的路由，再在home文件夹里面新建对应的html文件！打开app/home/views.py文件，新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 会员中心</span><br><span class="line">@home.route(&apos;/user/&apos;)</span><br><span class="line">def user():</span><br><span class="line">    return render_template(&quot;home/user.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;)</span><br><span class="line">def pwd():</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 评论记录</span><br><span class="line">@home.route(&apos;/comments/&apos;)</span><br><span class="line">def comments():</span><br><span class="line">    return render_template(&quot;home/comments.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登入日志</span><br><span class="line">@home.route(&apos;/loginlog/&apos;)</span><br><span class="line">def loginlog():</span><br><span class="line">    return render_template(&quot;home/loginlog.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/&apos;)</span><br><span class="line">def moviecol():</span><br><span class="line">    return render_template(&quot;home/moviecol.html&quot;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-598c077d1cd48507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来定义会员中心菜单栏页面,在home文件夹里面，新建menu.html文件，里面写入从tpl/2-movie/user.html页面中<div class="col-md-3"> </div>的部分,并且修改一下url的跳转问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;col-md-3&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.user&apos;) &#125;&#125;&quot; class=&quot;list-group-item active&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;会员中心</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.pwd&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;修改密码</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.comments&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/span&gt;&amp;nbsp;评论记录</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.loginlog&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/span&gt;&amp;nbsp;登录日志</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.moviecol&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt;&amp;nbsp;收藏电影</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="user-html书写"><a href="#user-html书写" class="headerlink" title="user.html书写"></a>user.html书写</h3><p>现在开始书写我们的user.html文件，我们复制tpl/2-movie/user.html页面中<div class="col-md-9"> </div>的部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">     ......</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，发现我们的个人中心页面出来了，但是菜单栏没有出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-1ee8f36699393cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们需要include我们之前定义的menu.html页面,修改我们的user.html文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">     ......</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>再刷新一下我们的页面试试，发现菜单栏已经可以正常显示了：<img src="https://upload-images.jianshu.io/upload_images/8964398-7f124d87f57f0653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来将home/home.html里面的style进行合并，再进行挖坑填坑操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">       .navbar-brand &gt; img &#123;</span><br><span class="line">           display: inline;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       .media &#123;</span><br><span class="line">           padding: 3px;</span><br><span class="line">           border: 1px solid #ccc</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">   &#123;% block css %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开home/user.html页面，对原来页面的css样式进行挖坑填坑操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="pwd-html的书写"><a href="#pwd-html的书写" class="headerlink" title="pwd.html的书写"></a>pwd.html的书写</h3><p>现在开始书写我们的pwd.html文件，我们复制tpl/2-movie/pwd.html页面中<div class="col-md-9"> </div>的部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand&gt;img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9&#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line">        .media&#123;</span><br><span class="line">            padding:3px;</span><br><span class="line">            border:1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">     ......</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现我们还没有判断选中状态，我们给menu.html的类加上一个ID，然后采用jQuery来进行判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;col-md-3&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">        &lt;a id =&quot;m-1&quot; href=&quot;&#123;&#123; url_for(&apos;home.user&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;会员中心</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-2&quot; href=&quot;&#123;&#123; url_for(&apos;home.pwd&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;修改密码</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-3&quot; href=&quot;&#123;&#123; url_for(&apos;home.comments&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/span&gt;&amp;nbsp;评论记录</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-4&quot; href=&quot;&#123;&#123; url_for(&apos;home.loginlog&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/span&gt;&amp;nbsp;登录日志</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-5&quot; href=&quot;&#123;&#123; url_for(&apos;home.moviecol&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt;&amp;nbsp;收藏电影</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>打开home.html页面，在底部新增js的挖坑填坑代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开user.html页面，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-1&quot;).addClass(&quot;active&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>我们顺便在pwd.html页面也加上类似的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-2&quot;).addClass(&quot;active&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="comments-html的书写"><a href="#comments-html的书写" class="headerlink" title="comments.html的书写"></a>comments.html的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-3&quot;).addClass(&quot;active&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="loginlog-html的书写"><a href="#loginlog-html的书写" class="headerlink" title="loginlog.html的书写"></a>loginlog.html的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-4&quot;).addClass(&quot;active&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="moviecol-html的书写"><a href="#moviecol-html的书写" class="headerlink" title="moviecol.html的书写"></a>moviecol.html的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-5&quot;).addClass(&quot;active&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>现在再来运行我们的manage.py文件，我们在浏览器地址栏里面输入<a href="http://127.0.0.1:5000/user/，然后回车，然后点击左侧的菜单栏，发现页面显示没有问题。最后来完善一下url的跳转，我们打开home/home.html页面，修改如下：![](https://upload-images.jianshu.io/upload_images/8964398-26906216cdd4d18c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:5000/user/，然后回车，然后点击左侧的菜单栏，发现页面显示没有问题。最后来完善一下url的跳转，我们打开home/home.html页面，修改如下：![](https://upload-images.jianshu.io/upload_images/8964398-26906216cdd4d18c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><h2 id="电影列表页面搭建"><a href="#电影列表页面搭建" class="headerlink" title="电影列表页面搭建"></a>电影列表页面搭建</h2><p>继续在我们的home/views.py文件里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;home/index.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 动画</span><br><span class="line">@home.route(&apos;/animation/&apos;)</span><br><span class="line">def animation():</span><br><span class="line">    return render_template(&quot;home/animation.html&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>注意：因为在前面我们已经创建了一个index函数，所以我们需要把它们去掉，或者重写一个</strong><br>做完这些自然就是在templates/home文件夹下面新建对应的index.html和animation.html页面。考虑到首页的独立性，我们也在templates/home文件夹下面新建一个layout.html页面，并同时将home/home.html文件里面的代码都拷贝进去，并且修改一下home/home.html，将内容部分进行挖坑填坑操作：<img src="https://upload-images.jianshu.io/upload_images/8964398-3b7f9d948e2d2dab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在回到我们的templates/home/index.html页面，其block content部分来自我们的tpl/2-movie/index.html的热门电影和电影列表部分：<img src="https://upload-images.jianshu.io/upload_images/8964398-200ae6ee92d3d589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>紧接着将我们templates/home/index.html页面的电影列表展开和收起，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-53c522e00a5640ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们只留下前四个col-md-3，其余的col-md-3就都删除！</p><p>然后将tpl/1-index-animation/animation.html的代码复制到home/animation.html里面，接着在static文件下新建anim文件，把与animation有关的js,css,main-banner都复制进去，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ad27ee276d2ed454.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们回到templates/animation.html页面，修改我们的静态样式加载地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/css/style.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/main_banner/big0020150102211033.jpg&apos;) &#125;&#125;&quot; alt=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/js/jquery.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>接着回到我们的home/index.html页面，我们进行animation的跳转链接配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe class=&quot;wow fadeIn&quot; width=&quot;100%&quot; height=&quot;375px&quot; frameborder=0 scrolling=no src=&quot;&#123;&#123; url_for(&apos;home.animation&apos;) &#125;&#125;&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>还有对我们的列表进行for循环的读取：<img src="https://upload-images.jianshu.io/upload_images/8964398-5223402d8b9e7f33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>最后运行一下我们的manage.py文件，发现样式和页面都正常显示了：<img src="https://upload-images.jianshu.io/upload_images/8964398-32d77efc9c937a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影搜索页面搭建"><a href="#电影搜索页面搭建" class="headerlink" title="电影搜索页面搭建"></a>电影搜索页面搭建</h2><p>老规矩，在home/views.py文件下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 搜索页面</span><br><span class="line">@home.route(&apos;/search/&apos;)</span><br><span class="line">def search():</span><br><span class="line">    return render_template(&quot;home/search.html&quot;)</span><br></pre></td></tr></table></figure></p><p>自然你就需要在templates/home文件夹下面新建一个search.html页面。<br>打开home/search.html页面，我们新建以下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-62efe6da6b989438.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后展开和收起页面，利用for循环进行填充：<img src="https://upload-images.jianshu.io/upload_images/8964398-73fb0d7bc7eba951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是search相关的url跳转的配置，home.html和layout.html页面都需要配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;a class=&quot;btn btn-default&quot; href=&quot;&#123;&#123; url_for(&apos;home.search&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;&amp;nbsp;搜索&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a class=&quot;btn btn-default&quot; href=&quot;&#123;&#123; url_for(&apos;home.search&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;&amp;nbsp;搜索&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h2 id="电影详情页面搭建"><a href="#电影详情页面搭建" class="headerlink" title="电影详情页面搭建"></a>电影详情页面搭建</h2><p>老规矩，在home/views.py文件下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&apos;)</span><br><span class="line">def play():</span><br><span class="line">    return render_template(&quot;home/play.html&quot;)</span><br></pre></td></tr></table></figure></p><p>自然你就需要在templates/home文件夹下面新建一个play.html页面。</p><p>打开home/play.html页面，我们新建以下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-9187382ceb34be89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后对所以的静态文件进行访问配置，由于太多，这里就不一一说明了。</p><p>接下来对home/home.html页面所以的url进行跳转配置，还有搜索中的电影播放与收藏中的电影播放页面的跳转，这个很多，需要耐心一个个去查找，修改。<br>还有收藏页面的for循环：<img src="https://upload-images.jianshu.io/upload_images/8964398-6025357cb78a59fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>之后运行一下manage.py文件，发现页面跳转没有问题。</p><h2 id="404页面的搭建"><a href="#404页面的搭建" class="headerlink" title="404页面的搭建"></a>404页面的搭建</h2><p>因为404页面是一个全局页面，所以我们需要在初始化文件里面写入，而不是在home这个应用里面(app/–init–.py文件)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from flask import Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">from app.home import home as home_blueprint</span><br><span class="line">from app.admin import admin as admin_blueprint</span><br><span class="line"></span><br><span class="line">app.register_blueprint(home_blueprint)</span><br><span class="line">app.register_blueprint(admin_blueprint, url_prefix=&quot;/admin&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 404页面</span><br><span class="line">@app.errorhandler(404)</span><br><span class="line">def page_not_found(error):</span><br><span class="line">    return render_template(&quot;home/404.html&quot;), 404</span><br></pre></td></tr></table></figure></p><p>自然你就需要在templates/home文件夹下面新建一个404.html页面。</p><p>然后把4-404.html页面的代码都拷贝进去，并修改页面的跳转和静态文件的加载样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;消失在宇宙星空中的404页面&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/404.css&apos;) &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 代码 开始 --&gt;</span><br><span class="line">&lt;div class=&quot;fullScreen&quot; id=&quot;fullScreen&quot;&gt;</span><br><span class="line">    &lt;img class=&quot;rotating&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/spaceman.svg&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;pagenotfound-text&quot;&gt;</span><br><span class="line">        &lt;h1&gt;迷失在太空中！&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;&quot;&gt;返回首页&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;canvas id=&quot;canvas2d&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/spaceman.svg&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 代码 结束 --&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下我们的页面，发现404页面可以正常显示出来。</p><p>至此，我们本篇关于前端首页搭建的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第三篇。</a></p><p>获取更多教程，请点击注册啃饼网:<a href="http://www.licheetools.top/" target="_blank" rel="noopener">http://www.licheetools.top</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（二）：项目优化与模型设计</title>
      <link href="/2018/06/02/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E4%B8%8E%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/06/02/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E4%B8%8E%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇笔记开始，我们正式进入flask的编程世界，话不多说，我们先来创建我们的第一个flask程序，然后进行项目的优化以及模型设计。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第二篇。</a></p><h2 id="第一个flask程序"><a href="#第一个flask程序" class="headerlink" title="第一个flask程序"></a>第一个flask程序</h2><p>打开pycharm按照图示创建flask项目：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d2d7672689c3204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击确定之后就成了这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba3d5106f1613a2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你会发现上面2个文件static和templates竟然都是空的，也就说只有movie.py文件才有，而且只有寥寥的7行代码。我给你看一下Django创建项目之后的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-0893770248378d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，flask的确是轻巧，巧到刚开始只有2个空文件和一个7行代码的py文件。而纵观Django，刚开始就有那些看不懂的而且代码挺多的py文件，所以还是那句话，学好flask需要花费一定的时间。我们继续回到flask页面：点击上面的运行按钮，提示你在浏览器输入：<strong><a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a></strong>，flask的默认端口号为5000，Django的端口号为8000，要注意区别！你会发现页面只有Hello World!这个单词而已！！！</p><h2 id="项目优化与模型设计"><a href="#项目优化与模型设计" class="headerlink" title="项目优化与模型设计"></a>项目优化与模型设计</h2><p>我们这个微电影网站包括：<strong>前台模块（home）</strong>和<strong>后台模块（admin）</strong>。</p><hr><p>其中前台模块（home）包括：<br>数据模型：models.py<br>表单处理： home/forms.py<br>模板目录： templates/home<br>静态目录：static</p><hr><hr><p>而后台模块（admin）也同样包括：<br>数据模型：models.py<br>表单处理： admin/forms.py<br>模板目录： templates/admin<br>静态目录：static</p><hr><p>数据模型是共用的，而表单提交和模板都是独立的，下面看一下前后台的目录分析：<img src="https://upload-images.jianshu.io/upload_images/8964398-85bf8a274a91a3aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>按照上述图片所示，新建文件树：<img src="https://upload-images.jianshu.io/upload_images/8964398-0d897c91449e30e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="使用flask的蓝图-Blueprint-来规划项目的结构"><a href="#使用flask的蓝图-Blueprint-来规划项目的结构" class="headerlink" title="使用flask的蓝图(Blueprint)来规划项目的结构"></a>使用flask的蓝图(Blueprint)来规划项目的结构</h2><p><strong>1、什么是蓝图？</strong><br>它是一个应用中或跨应用制作应用组件和支持通用的模式。<br><strong>2、蓝图的作用？</strong><br>将不同的功能模块化；构建大型应用；优化项目结构；增强可读性，易于维护。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-662b6cdacebaaea3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下面我们将对上面的3个目录进行分开介绍,由于前后台的目录结构很类似，这里我以app/admin为例进行说明，大家跟紧我的节奏即可。<br><strong>1、定义蓝图(app/admin/–init–.py)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Blueprint</span><br><span class="line">admin = Blueprint(&quot;admin&quot;, __name__)</span><br><span class="line">import app.admin.views</span><br></pre></td></tr></table></figure></p><p><strong>2、注册蓝图(app/–init–.py)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">from app.admin import admin as admin_blueprint</span><br><span class="line"></span><br><span class="line">app.register_blueprint(admin_blueprint, url_prefix=&quot;/admin&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>3、调用蓝图(app/admin/views.py)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from . import admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@admin.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;&lt;h1 style=&apos;color:blue&apos;&gt;This is admin&lt;/h1&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>而在<strong>app/home</strong>里面同样是这样的：<br>1、定义蓝图(app/home/–init–.py)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Blueprint</span><br><span class="line">home = Blueprint(&quot;home&quot;, __name__)</span><br><span class="line">import app.home.views</span><br></pre></td></tr></table></figure></p><p>2、注册蓝图(app/–init–.py)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">from app.home import admin as home_blueprint</span><br><span class="line"></span><br><span class="line">app.register_blueprint(home_blueprint) # 这里url可以不写</span><br></pre></td></tr></table></figure></p><p>3、调用蓝图(app/home/views.py)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from . import admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@home.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;&lt;h1 style=&apos;color:red&apos;&gt;This is home&lt;/h1&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>在完成上述代码之后，最后一步书写manage.py文件，开始启动app。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from app import app</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>在浏览器地址栏中输入：<a href="http://127.0.0.1:5000，则显示红色的This" target="_blank" rel="noopener">http://127.0.0.1:5000，则显示红色的This</a> is home；而输入<a href="http://127.0.0.1:5000/admin/，则显示蓝色的This" target="_blank" rel="noopener">http://127.0.0.1:5000/admin/，则显示蓝色的This</a> is admin.</p><h2 id="会员及会员登录日志数据模型设计"><a href="#会员及会员登录日志数据模型设计" class="headerlink" title="会员及会员登录日志数据模型设计"></a>会员及会员登录日志数据模型设计</h2><p><strong>1、安装数据库连接依赖包</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>关于sqlalchmey的介绍，请关注我的另外一个专题《Python3操作三大数据库》这里面就会有详细的介绍，这里我就不细说了，你只要记住它是一个企业级的ORM对象关系映射框架就够了。<br><strong>2、定义mysql数据库连接：</strong><br>打开models.py文件，我们新建下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = from flask import Flask </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URL&apos;] = &quot;mysql://账号:密码@ip地址/movie&quot;</span><br><span class="line">app.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] =True</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></p><p>大家可以点击<a href="http://www.pythondoc.com/flask-sqlalchemy/config.html" target="_blank" rel="noopener">flask-sqlalchemy</a>,来了解更多的信息。</p><p><strong>3、定义会员数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-0fad1292449dca50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>继续在models.py文件里添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 定义会员数据模型</span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &quot;user&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 昵称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 密码</span><br><span class="line">    email = db.Column(db.String(100), unique=True)  # 邮箱</span><br><span class="line">    phone = db.Column(db.String(11), unique=True)  # 电话号码</span><br><span class="line">    info = db.Column(db.Text)  # 个性简介</span><br><span class="line">    face = db.Column(db.String(255), unique=True)  # 头像</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    uuid = db.Column(db.String(255), unique=True)  # 唯一标志符</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;User %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><p>大家对此内容不了解可以点击<a href="http://www.pythondoc.com/flask-sqlalchemy/models.html" target="_blank" rel="noopener">声明模型</a>。</p><p><strong>4、会员登录日志数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-98f8e8190195f606.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 会员登录日志</span><br><span class="line">class UserLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;userlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属会员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;UserLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure><p>注意由于此处采用了外键，所以需要在User函数里面新增关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userlogs = db.relationship(&apos;userlog&apos;, backref=&apos;user&apos;)  # 会员日志外键关系</span><br></pre></td></tr></table></figure></p><p>注意到没有，这里和Django中字段的定义是不一样的，Django不需要在关系外键里面增加外键关系，但是Flask却是必须的，要注意这一点。</p><p>总结一下，models.py文件的代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql://root:root@127.0.0.5/movie&quot;</span><br><span class="line">app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = True</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义会员数据模型</span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &quot;user&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 昵称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 密码</span><br><span class="line">    email = db.Column(db.String(100), unique=True)  # 邮箱</span><br><span class="line">    phone = db.Column(db.String(11), unique=True)  # 电话号码</span><br><span class="line">    info = db.Column(db.Text)  # 个性简介</span><br><span class="line">    face = db.Column(db.String(255), unique=True)  # 头像</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    uuid = db.Column(db.String(255), unique=True)  # 唯一标志符</span><br><span class="line">    userlogs = db.relationship(&apos;UserLog&apos;, backref=&apos;user&apos;)  # 会员日志外键关系</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;User %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 会员登录日志</span><br><span class="line">class UserLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;userlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属会员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;UserLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure></p><p><strong>5、标签数据模型设计</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-9b874434e937c01f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义标签数据模型</span><br><span class="line">class Tag(db.Model):</span><br><span class="line">    __tablename__ = &quot;tag&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)   # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)   # 标题</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    movies = db.relationship(&apos;Movie&apos;, backref=&apos;tag&apos;)  # 电影外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Tag %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><p><strong>其中，relationship(‘Movie’, backref=’tag’)里面，Movie为所关联的类名，backref为当前的表名！</strong><br><strong>6、电影数据模型设计</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-752eb4e4e587edc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 定义电影数据模型</span><br><span class="line">class Movie(db.Model):</span><br><span class="line">    __tablename__ = &quot;movie&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    info = db.Column(db.Text)  # 电影简介</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    star = db.Column(db.SmallInteger)  # 星级</span><br><span class="line">    playnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    commentnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    tag_id = db.Column(db.Integer, db.ForeignKey(&apos;tag.id&apos;))  # 所属标签</span><br><span class="line">    area = db.Column(db.String(255))  # 地区</span><br><span class="line">    release_time = db.Column(db.Date)  # 发布时间</span><br><span class="line">    length = db.Column(db.String(100))  # 电影长度</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Movie %r&gt;&apos; % self.title</span><br></pre></td></tr></table></figure></p><p><strong>7、上映预告数据模型设计</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f9f93220526613b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义上映预告数据模型</span><br><span class="line">class Preview(db.Model):</span><br><span class="line">    __tablename__ = &quot;preview&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Preview %r&gt;&apos; % self.title</span><br></pre></td></tr></table></figure></p><h2 id="评论及收藏电影数据模型设计"><a href="#评论及收藏电影数据模型设计" class="headerlink" title="评论及收藏电影数据模型设计"></a>评论及收藏电影数据模型设计</h2><p><strong>1、定义评论数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-2bec6a0adb9a3499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 定义评论数据模型</span><br><span class="line">class Comment(db.Model):</span><br><span class="line">    __tablename__ = &quot;comment&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    content = db.Column(db.Text)  # 评论内容</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Comment %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure></p><p><strong>2、定义收藏电影数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-24c7ce9398651ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义收藏电影数据模型</span><br><span class="line">class MovieCol(db.Model):</span><br><span class="line">    __tablename__ = &quot;moviecol&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 最近登录时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;MovieCol %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure></p><h2 id="权限及角色数据模型设计"><a href="#权限及角色数据模型设计" class="headerlink" title="权限及角色数据模型设计"></a>权限及角色数据模型设计</h2><p><strong>1、定义权限数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-07fca41473877c97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义权限数据模型</span><br><span class="line">class Auth(db.Model):</span><br><span class="line">    __tablename__ = &quot;auth&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Auth %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><p><strong>2、定义角色数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-8495eb4b3bbcc0c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义角色数据模型</span><br><span class="line">class Role(db.Model):</span><br><span class="line">    __tablename__ = &quot;role&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    auths = db.Column(db.String(600)) # 权限列表</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Role %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><h2 id="管理员、管理员登陆日志、操作日志数据模型设计"><a href="#管理员、管理员登陆日志、操作日志数据模型设计" class="headerlink" title="管理员、管理员登陆日志、操作日志数据模型设计"></a>管理员、管理员登陆日志、操作日志数据模型设计</h2><p><strong>1、定义管理员数据模型</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-153c1932df6e1a87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 定义管理员数据模型</span><br><span class="line">class Admin(db.Model):</span><br><span class="line">    __tablename__ = &quot;admin&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 管理员名称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 管理员密码</span><br><span class="line">    is_super = db.Column(db.SmallInteger)  # 是否为超级管理员，0为超级管理员</span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;role.id&apos;))  # 所属角色</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Admin %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure><p><strong>2、定义管理员登陆日志数据模型</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-c489aed4b919dd45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义管理员登陆日志数据模型</span><br><span class="line">class AdminLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;adminlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;AdminLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure><p><strong>3、定义操作日志数据模型</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-86c8d73b321c88f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 定义操作日志数据模型</span><br><span class="line">class OpLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;oplog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    reason = db.Column(db.String(600))  # 操作原因</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;OpLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure><p>考虑到部分关系只有全部字段定义完成以后才能开始，所以这里贴一下models.py的全部代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @Time: 2018/3/29 21:20</span><br><span class="line"># @Author: Envse</span><br><span class="line"># @File: models.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql://账号:密码@ip地址/movie&quot;</span><br><span class="line">app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = True</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义会员数据模型</span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &quot;user&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 昵称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 密码</span><br><span class="line">    email = db.Column(db.String(100), unique=True)  # 邮箱</span><br><span class="line">    phone = db.Column(db.String(11), unique=True)  # 电话号码</span><br><span class="line">    info = db.Column(db.Text)  # 个性简介</span><br><span class="line">    face = db.Column(db.String(255), unique=True)  # 头像</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    uuid = db.Column(db.String(255), unique=True)  # 唯一标志符</span><br><span class="line">    userlogs = db.relationship(&apos;UserLog&apos;, backref=&apos;user&apos;)  # 会员日志外键关系</span><br><span class="line">    comments = db.relationship(&apos;Comment&apos;, backref=&apos;user&apos;)  # 评论外键关系关联</span><br><span class="line">    moviecols = db.relationship(&apos;MovieCol&apos;, backref=&apos;user&apos;)  # 电影收藏外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;User %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义会员登录日志模型</span><br><span class="line">class UserLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;userlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属会员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;UserLog %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义标签数据模型</span><br><span class="line">class Tag(db.Model):</span><br><span class="line">    __tablename__ = &quot;tag&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)   # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)   # 标题</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    movies = db.relationship(&apos;Movie&apos;, backref=&apos;tag&apos;)  # 电影外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Tag %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义电影数据模型</span><br><span class="line">class Movie(db.Model):</span><br><span class="line">    __tablename__ = &quot;movie&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    info = db.Column(db.Text)  # 电影简介</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    star = db.Column(db.SmallInteger)  # 星级</span><br><span class="line">    playnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    commentnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    tag_id = db.Column(db.Integer, db.ForeignKey(&apos;tag.id&apos;))  # 所属标签</span><br><span class="line">    area = db.Column(db.String(255))  # 地区</span><br><span class="line">    release_time = db.Column(db.Date)  # 发布时间</span><br><span class="line">    length = db.Column(db.String(100))  # 电影长度</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    comments = db.relationship(&apos;Comment&apos;, backref=&apos;movie&apos;)  # 电影评论外键关联</span><br><span class="line">    movieclos = db.relationship(&apos;MovieCol&apos;, backref=&apos;movie&apos;)  # 电影收藏外键关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Movie %r&gt;&apos; % self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义上映预告数据模型</span><br><span class="line">class Preview(db.Model):</span><br><span class="line">    __tablename__ = &quot;preview&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Preview %r&gt;&apos; % self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义评论数据模型</span><br><span class="line">class Comment(db.Model):</span><br><span class="line">    __tablename__ = &quot;comment&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    content = db.Column(db.Text)  # 评论内容</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Comment %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义收藏电影数据模型</span><br><span class="line">class MovieCol(db.Model):</span><br><span class="line">    __tablename__ = &quot;moviecol&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 最近登录时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;MovieCol %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义权限数据模型</span><br><span class="line">class Auth(db.Model):</span><br><span class="line">    __tablename__ = &quot;auth&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Auth %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义角色数据模型</span><br><span class="line">class Role(db.Model):</span><br><span class="line">    __tablename__ = &quot;role&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    auths = db.Column(db.String(600)) # 权限列表</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Role %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义管理员数据模型</span><br><span class="line">class Admin(db.Model):</span><br><span class="line">    __tablename__ = &quot;admin&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 管理员名称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 管理员密码</span><br><span class="line">    is_super = db.Column(db.SmallInteger)  # 是否为超级管理员，0为超级管理员</span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;role.id&apos;))  # 所属角色</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    adminlogs = db.relationship(&apos;AdminLog&apos;, backref=&apos;admin&apos;)  # 管理员登录日志外键关系关联</span><br><span class="line">    oplogs = db.relationship(&apos;OpLog&apos;, backref=&apos;admin&apos;)  # 管理员操作日志外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Admin %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义管理员登陆日志数据模型</span><br><span class="line">class AdminLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;adminlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;AdminLog %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义操作日志数据模型</span><br><span class="line">class OpLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;oplog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    reason = db.Column(db.String(600))  # 操作原因</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;OpLog %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    db.create_all()  # 开始创建数据表</span><br></pre></td></tr></table></figure></p><h2 id="结合mysql数据库来生成数据表"><a href="#结合mysql数据库来生成数据表" class="headerlink" title="结合mysql数据库来生成数据表"></a>结合mysql数据库来生成数据表</h2><p><strong>1、进入到虚拟环境后，安装pymysql</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p><strong>2、导入pymysql并加以使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql+pymysql://账号:密码@ip地址/movie&quot;</span><br></pre></td></tr></table></figure></p><p><strong>3、运行models.py文件</strong><br>运行models.py文件之后，你会发现出现字符编码的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\Envs\movie\lib\site-packages\pymysql\cursors.py:170: Warning: (1366, &quot;Incorrect string value: &apos;\\xD6\\xD0\\xB9\\xFA\\xB1\\xEA...&apos; for column &apos;VARIABLE_VALUE&apos; at row 481&quot;)</span><br></pre></td></tr></table></figure></p><p>因为windows系统默认使用的是GBK字符集，而我们在windows系统上使用的数据库默认也是GBK字符集，尽管我们在创建数据库的时候已经把字符集设定为utf8，但还是有问题，说明还是系统字符集影响到了我们项目的运行。但是数据库定义没问题，你输入中文是没有问题的这是mysql5.7的一个Bug，你可以忽略这个问题。</p><p>博主通过各方努力终于找到了解决问题的办法：<a href="https://www.jianshu.com/p/9bf524d49a3f" target="_blank" rel="noopener">Flask利用pymysql出现Warning：1366的解决办法</a></p><p><strong>4、打开movie数据库</strong><br>打开数据库，你会发现新生成了许多数据表，这与我们在models.py文件里定义的一模一样。<img src="https://upload-images.jianshu.io/upload_images/8964398-e98f39eb4fd86a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此本篇关于项目优化与模型设计的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第二篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（一）：项目介绍</title>
      <link href="/2018/06/01/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/06/01/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嘿，小伙伴们好久不见。在上一套教程里，我们利用了Python的Django框架搭建了一个在线教育网站，这次我们尝试接触Python web开发的另一个框架：Flask。我们同样尝试利用它来搭建一个网站，这次我们是搭建一个在线的微电影视频网站。通过对比，我们来学着在比较中提升自己。同样在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="Flask介绍"><a href="#Flask介绍" class="headerlink" title="Flask介绍"></a>Flask介绍</h3><p>Flask是一个用 Python 编写的轻量级 Web 应用框架。其 WSGI工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。Flask使用 BSD 授权。Flask也被称为 “microframework” ，因为它使用简单的核心，用 extension 增加其他功能。Flask没有默认使用的数据库、窗体验证工具。所以与Django相比，它没有很多系统自带的功能就显得非常轻巧，但是另一方面就意味着你必须自己动手去实现一些看似非常简单的功能，从这点来说Flask比Django需要花费更多的时间来学习。</p><p>目前Django一般都是适合一些访问量较小的，规模不大的网站，真正那些访问量大的网站管理人员会采用Flask进行编辑，例如果壳网，知乎网，豆瓣网：<img src="https://upload-images.jianshu.io/upload_images/8964398-aab9a50a3563db0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Flask与Django，Tornado对比"><a href="#Flask与Django，Tornado对比" class="headerlink" title="Flask与Django，Tornado对比"></a>Flask与Django，Tornado对比</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e41c9769759182e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="网站介绍"><a href="#网站介绍" class="headerlink" title="网站介绍"></a>网站介绍</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0a579bfebd1f162e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>前台包括：首页-电影筛选-电影列表- 播放详情-评论-收藏-搜索-注册-登录-会员中心（修改会员资料，查看评论记录，登录日志，收藏电影）</p><p>后台包括：电影标签-电影管理-电影预告-网站会员-评论-收藏-日志-权限管理-角色-管理员等。</p><p><strong>总体设计框架</strong>为：<img src="https://upload-images.jianshu.io/upload_images/8964398-9b34dcd28fe5617b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>开发环境</strong>为：<img src="https://upload-images.jianshu.io/upload_images/8964398-c99f9c86bbbabeba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Flask丰富的扩展插件"><a href="#Flask丰富的扩展插件" class="headerlink" title="Flask丰富的扩展插件"></a>Flask丰富的扩展插件</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-45b8643c9ac34946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-64a802a077c70272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="你能学到的知识"><a href="#你能学到的知识" class="headerlink" title="你能学到的知识"></a>你能学到的知识</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-194ee6626f79d9a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6eaa07744ca9cdaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-377a6ffc4f75e628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>以及视频技术：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-ba54db0092786239.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="环境搭建与工具"><a href="#环境搭建与工具" class="headerlink" title="环境搭建与工具"></a>环境搭建与工具</h2><p>网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发，具体涉及到的软件我们接下来为你介绍。</p><h3 id="Pycharm的安装"><a href="#Pycharm的安装" class="headerlink" title="Pycharm的安装"></a>Pycharm的安装</h3><p>我在前面有一篇文章介绍了Pycharm的详细安装，这里就不赘述了，开启传送大门：<a href="https://www.jianshu.com/p/3c5a0457c643" target="_blank" rel="noopener">Python Web技术开发软件安装</a></p><h3 id="虚拟环境vritualenv的安装"><a href="#虚拟环境vritualenv的安装" class="headerlink" title="虚拟环境vritualenv的安装"></a>虚拟环境vritualenv的安装</h3><p>同样virtualenv的安装我之前也有3篇文章进行过介绍，为了便于学习，我这里直接复制过来了！</p><h3 id="1、安装pip"><a href="#1、安装pip" class="headerlink" title="1、安装pip"></a>1、安装pip</h3><p>我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹<code>(记住要和Python放在同一目录下)</code>，采用添加环境变量的方法<code>（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path）</code>，我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录<code>(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格</code>，</p><blockquote><p>C:\Users\YC-Jiang&gt;F:<br>F:&gt;cd Python<br>F:\Python&gt;cd pystall<br>F:\Python\pystall&gt;</p></blockquote><p>然后输入：<code>python setup.py install</code>回车，等待几分钟即可。</p><p>最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件<br>–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者<code>Windows徽标+R</code>中输入</p><blockquote><p>pip -—version</p></blockquote><p>小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入<br>python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句）</p><p>如果已经成功<strong>安装 pip</strong>，会提示类似下面的：</p><blockquote><p>pip 1.5.6 from C:\Python35\lib\site-packages\pip-1.5.6-py3.5.egg</p></blockquote><p>pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么<br>每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。</p><p>如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考<br>这个方法为你的 Windows电脑安装pip: <a href="https://taizilongxu.gitbooks.io/stackoverflowabout-python/content/8/README.html" target="_blank" rel="noopener">pip安装问题</a></p><h3 id="2、安装virtualenv"><a href="#2、安装virtualenv" class="headerlink" title="2、安装virtualenv"></a>2、安装virtualenv</h3><p>在终端输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line">virtualenv testvir  # 在当前用户目录(win+r %HOMEPATH%可查看)生成</span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat  # 激活</span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure><p>其实这种方法挺麻烦的，这里我推荐一种简单方法，<strong>安装virtualenvwrapper</strong></p><h3 id="3、安装virtualenvwrapper"><a href="#3、安装virtualenvwrapper" class="headerlink" title="3、安装virtualenvwrapper"></a>3、安装virtualenvwrapper</h3><p>在终端输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>接下来便是创建虚拟环境了，同样采用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv movie  # movie 为你新建虚拟环境的名称</span><br></pre></td></tr></table></figure><p>它会创建在C:\Users\YC\Envs当前用户目录下的Envs目录。</p><p>你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-036cc39d39c4a23f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>退出激活状态命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><strong>知道有哪些虚拟环境命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><p><strong>直接进入虚拟环境命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon movie</span><br></pre></td></tr></table></figure><p>如果出现这种情况，表示你已经进入到虚拟环境中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\Envs\movie</span><br></pre></td></tr></table></figure><p>再次说明，出现前面的(movie)就代表进入了虚拟环境，之后就可以进行包和库的安装了。输入pip list查看一下现在已经安装的包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(movie) F:\Envs\movie&gt;pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        18.0</span><br><span class="line">setuptools 40.2.0</span><br><span class="line">wheel      0.31.1</span><br><span class="line"></span><br><span class="line">(movie) F:\Envs\movie&gt;</span><br></pre></td></tr></table></figure></p><p>接下来是进行Flask的安装，这个其实和Django的安装很类似，只不过多了一个安装前和安装后的环境检测而已.</p><h3 id="Flask的安装"><a href="#Flask的安装" class="headerlink" title="Flask的安装"></a>Flask的安装</h3><hr><p>安装前检测：pip freeze<br>安装flask： pip install flask -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>安装后检测：pip freeze</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(movie) F:\Envs\movie&gt;pip list</span><br><span class="line">Package      Version</span><br><span class="line">------------ -------</span><br><span class="line">click        6.7</span><br><span class="line">Flask        1.0.2</span><br><span class="line">itsdangerous 0.24</span><br><span class="line">Jinja2       2.10</span><br><span class="line">MarkupSafe   1.0</span><br><span class="line">pip          18.0</span><br><span class="line">setuptools   40.2.0</span><br><span class="line">Werkzeug     0.14.1</span><br><span class="line">wheel        0.31.1</span><br><span class="line"></span><br><span class="line">(movie) F:\Envs\movie&gt;</span><br></pre></td></tr></table></figure><p>至此本篇关于项目的介绍以及开发环境的搭建就到此为止，感谢你的赏阅！</p><h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><p><strong>1、</strong><a href="http://www.pythondoc.com/flask-mega-tutorial/" target="_blank" rel="noopener">欢迎进入Flask大型教程项目！</a>一个不错的Flask介绍网站。<br><strong>2、</strong><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">Flask文档介绍</a>，挺官方的一个技术文档。<br><strong>3、</strong><a href="https://www.yiibai.com/flask/" target="_blank" rel="noopener">Flask教程</a>，一个受欢迎的技术网站。<br><strong>4、<a href="https://study.163.com/course/introduction.htm?courseId=1004091002" target="_blank" rel="noopener">Python Flask系列（1）——基础</a></strong>,网易云课堂的<strong>免费视频</strong>，教你如何入门Flask。</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（十一）：商品类别数据显示（下）</title>
      <link href="/2018/05/15/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/05/15/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（十）：商品类别数据显示（上）</title>
      <link href="/2018/05/03/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/05/03/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍如何把我们的商品类别数据进行显示，由于涉及的知识较多，会分成2篇进行说明。</p><h2 id="商品的分类"><a href="#商品的分类" class="headerlink" title="商品的分类"></a>商品的分类</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5919ff3da8e45111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-13f796433757ebea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们前面说过，这里面配置了2个组件，其实就和我们两个目录相关联。一个是全部数据的接口，用于首页的全部商品分类：一级-二级-三级就是上面的那样；另一个就是获取某一大类的二级分类以及对应的商品数量，就是下面的图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0ccf04239cbd93cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>当商品被大类进行过滤时，我们需要设置过滤的条件，如价格区间，以及按照价格，销量的排序，还有商品页面的分页功能。</p><p>通过vue提供的工具，我们可以很容易的知道组件的结构：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-6d6633628551ed5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在产品列表中是一堆的<code>router link</code>，你点击它会跳转到详情页，这个详情页其实就是vue 的router路由：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-34a82b7a57dcf39e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了，分析到这里我们现在开始进行开发。打开goods\views.py文件，我们新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from .serializers import  CategorySerializer</span><br><span class="line"></span><br><span class="line">class CategoryViewset(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list:</span><br><span class="line">        商品分类列表数据</span><br><span class="line">    retrieve:</span><br><span class="line">        获取商品分类详情</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = GoodsCategory.objects.filter(category_type=1)</span><br><span class="line">    serializer_class = CategorySerializer</span><br></pre></td></tr></table></figure></p><p><strong>注意一下，我们因为是进行商品类别数据的显示，但是数量不是很多，所以不需要进行分页处理。同时因为后面需要生成文档，所以我们需要规范化我们的注释语言。</strong>当然我们还需要进行序列化，打开goods\serializers.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from goods.models import GoodsCategory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsCategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure></p><p>接着打开urls.py文件，我们配置路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import CategoryViewset</span><br><span class="line"></span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet, base_name=&apos;goods&apos;)  # 这里前面加r可以进行转义</span><br><span class="line"></span><br><span class="line"># 配置categorys的url</span><br><span class="line">router.register(r&apos;categorys&apos;, CategoryViewset, base_name=&apos;categorys&apos;)  # 这里前面加r可以进行转义</span><br></pre></td></tr></table></figure></p><p>这里的register有三要素：(prefix, viewset, base_name)，各个参数含义如下：<br>prefix ：该视图集的路由前缀；<br>viewset： 视图集；<br>base_name ：路由名称的前缀；<br>详细的可以点击这里了解一下：<a href="https://blog.csdn.net/weixin_40226313/article/details/80842832" target="_blank" rel="noopener">DRF路由Routers</a>。然后浏览器地址栏访问一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/categorys/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-90f590a97831740e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们发现这里没有出现我们想要的嵌套显示，也就是一类显示下面的二类，二类显示下面的三类，我们修改serializers.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class CategorySerializer3(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品三级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer2(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品二级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sub_cat = CategorySerializer3(many=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品一级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sub_cat = CategorySerializer2(many=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br></pre></td></tr></table></figure></p><p>这里我们用到了<code>sub_cat</code>，因为我们在model里面将自身的继承关系进行了命名：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f36b6fa63e268f07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就可以通过一级分类(parents)得到二级分类（直接调用一级对象的sub_cat),此时就得到了二级对象的数据，但是对于此时得到的二级对象数据，我们依然可以对其进行序列化然后作为父本去获取三级分类对象的数据。</p><p>然后运行我们的项目，发现出了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AttributeError at /categories/</span><br><span class="line">Got AttributeError when attempting to get a value for field `sub_cat` on serializer `CategorySerializer2`.he serializer field might be named incorrectly and not match any attribute or key on the `RelatedManager` instance.Original exception text was: &apos;RelatedManager&apos; object has no attribute &apos;sub_cat&apos;.</span><br></pre></td></tr></table></figure></p><p>那么你需要检查是否缺少<strong>many = True</strong>这个参数，然后运行就没问题了。</p><p>我们思考这么一个问题， 我们现在获取的是所有的category，但是如何获取具体某一类别下面的信息呢。举个例子，我们点击生鲜食品这一栏，那么左侧出现的应该就是生鲜食品这一栏下面对应的具体信息，而不是依然得全部信息。</p><p>打开goods\views.py文件，我们可以多继承另外一个函数<code>mixins.RetrieveModelMixin</code>就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class CategoryViewset(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet):</span><br></pre></td></tr></table></figure></p><p>在前面的文章里面我们获取某个具体的数据，是不是都在后面添加了id。假设我们这里需要获取书店里面的某本书（假设该书店只有不到100本书），我们通过get加id的方式就能直接获取取来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /book/10：获取编号为10的那本书</span><br></pre></td></tr></table></figure></p><p><strong>注意这样方式是严格按照restful api 的规范来进行配置的</strong>。按照这样的逻辑，我们需要哪个商品的信息，就要传入对应的id，没错就是这样（这是在线教育网站的一个path的配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 密码重置url</span><br><span class="line">    re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>但是强大的drf已经通过刚才那个函数给我们这样配置了，我们只需刚才那一步即可，都不需要在url里面进行相应的配置,只要我们继承了<code>mixins.RetrieveModelMixin</code>就可以直接通过id来进行具体数据的获取了，是不是很赞。运行你的项目，然后在浏览器地址栏输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/categorys/1/</span><br></pre></td></tr></table></figure></p><p>回车，进行访问吧，可以看到此时返回的是一个字典。</p><h2 id="Vue展示商品分类的数据"><a href="#Vue展示商品分类的数据" class="headerlink" title="Vue展示商品分类的数据"></a>Vue展示商品分类的数据</h2><p>现在我们准备将category的数据和vue进行联调，不过在此之前我们我们需要解决跨域访问的问题。跨域问题在前后端分离的项目中是非常常见的，你不用大惊小怪。我们现在查看一下这个category是如何将数据映射进来的：<code>F:\cnpmtest\online-store\src\views\head\head.vue</code>文件里面，可以看到里面的getMenu函数调用了getCategory函数，那么问题来了getCatgory函数到底在哪里呢：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-be80e233790c059b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在这里<code>import { getHotSearch, getCategory ,deleteShopCart } from  &#39;../../api/api&#39;</code>看到文里面的导入说明了么，这个文件对应我的位置在<code>F:\cnpmtest\online-store\src\api\api.js</code>，我们打开看一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d0bdd89352df75f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到里面的getCategory 函数了么，这种写法是ES6的写法，可以点击这里了解一下：<a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">ECMAScript 6 入门</a>。ES6中的箭头函数params =&gt;传递一个params，如果params中有id那么，通过axios获取接口，并返回指定的具体信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.get(`$&#123;host&#125;/categorys/`+params.id+&apos;/&apos;);</span><br></pre></td></tr></table></figure></p><p>如果没有id就返回全部的信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.get(`$&#123;host&#125;/categorys/`, params);</span><br></pre></td></tr></table></figure></p><p>其中这里面的${host}是我们获取信息的域名，也就是bobby老师的网站：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let host = &apos;http://shop.projectsedu.com&apos;;  # 线上环境</span><br></pre></td></tr></table></figure></p><p>这个函数是一个公共的函数，export是导出数据： <a href="https://www.cnblogs.com/dupd/p/5951311.html" target="_blank" rel="noopener">ES6模块的import和export用法总结</a>。这样就解决了获取详情信息或通用性问题。那么问题来了，我们如何来调试接口呢？可以注意到，我们在很多地方都用到了host，而我们调试只是一个接口一个调试，该如何解决呢？办法就是新建一个自己的<code>local_host</code>，然后用这个来进行替换，调试谁就替换谁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let local_host = &apos;http://127.0.0.1:8000&apos;</span><br></pre></td></tr></table></figure></p><p>我们现在因为是调试category，所以需要替换它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//获取商品类别信息</span><br><span class="line">export const getCategory = params =&gt; &#123;</span><br><span class="line">  if(&apos;id&apos; in params)&#123;</span><br><span class="line">    return axios.get(`$&#123;local_host&#125;/categorys/`+params.id+&apos;/&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    return axios.get(`$&#123;local_host&#125;/categorys/`, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后启动我们的前端项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>发现出了这样的错误：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5c6fffbc1b2ad38d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load resource: net::ERR_CONNECTION_REFUSED</span><br></pre></td></tr></table></figure></p><p>说明我们的本地vueshop项目没有启动，我们运行我们的项目，然后发现还是有问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-aac22dc8bdf70523.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这条信息告诉不允许跨域访问，因为我们跨了端口访问，一个是8080，一个是8000，所以才会出错，解决的办法很多。前端的npm也是可以完成跨域访问的，一般是通过proxy代理来完成的。不过这里我们主要说明如何利用服务器来完成跨域访问的。</p><h3 id="服务器跨域访问"><a href="#服务器跨域访问" class="headerlink" title="服务器跨域访问"></a>服务器跨域访问</h3><p>在GitHub上面搜索<code>django-cors-headers</code>，然后按照要求进行配置：<code>Django app for handling the server headers required for Cross-Origin Resource Sharing (CORS)</code>。<br>1、安装django-cors-headers（记得是在虚拟环境下面进行安装）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>2、注册进入apps(settings.py文件):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    &apos;corsheaders&apos;,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>3、配置MIDDLEWARE(settings.py文件，最好放在第一个位置)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &apos;corsheaders.middleware.CorsMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>4、添加参数并设置为true以及白名单的配置（settings.py文件）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = True</span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    &apos;127.0.0.1:3000&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，发现数据就出来了，那么这个数据是如何出来的呢？继续回看我们的head.vue文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getMenu()&#123;//获取菜单</span><br><span class="line">          getCategory(&#123;</span><br><span class="line">            params:&#123;&#125;</span><br><span class="line">          &#125;).then((response)=&gt; &#123;</span><br><span class="line">                    console.log(response)</span><br><span class="line">                    this.allMenuLabel = response.data</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(function (error) &#123;</span><br><span class="line">                  console.log(error);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></p><p>看到没有，这里将response.data赋值给了<code>allMenuLabel</code>，我们在nodepad++里面搜索一下，看这个<code>allMenuLabel</code>，看它在哪个地方：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=&quot;first&quot; v-for=&quot;(item,index) in allMenuLabel&quot; @mouseover=&quot;overChildrenmenu(index)&quot; @mouseout=&quot;outChildrenmenu(index)&quot;&gt;</span><br><span class="line">                              &lt;h3 style=&quot;background:url(../images/1449088788518670880.png) 20px center no-repeat;&quot;&gt;</span><br><span class="line">                                &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt; &lt;/h3&gt;</span><br></pre></td></tr></table></figure></p><p>发现我们后面使用v-for对它的数据进行了遍历，而且这里有一个<code>router-link</code>，它是指向前端的vue_router路由，并不是我们后台的路径，这点要注意一下。其实我们这里就已经把数据的显示和路由交给了前端，后端只需要提供数据就可以了，我们的任务就已经完成了。</p><p>现在又有一个问题，为什么我们前面的导航栏没有数据呢:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2b86d30a857873d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们在后台管理的时候默认没有设置为允许导航，我们可以去后台添加几个导航栏试试.</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8cd751e1f08fe167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-57c15e350de1f2e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，然后发现导航栏就出现了我们想要的数据。其实我们在前面对这个是否显示导航栏也进行了配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-for=&quot;(item,index) in allMenuLabel&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;div v-if=&quot;item.is_tab&quot;&gt;</span><br><span class="line">   &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot; &gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"> &lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>至此，我们本篇关于商品类别数据进行显示上篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（九）：商品列表页的配置（下）</title>
      <link href="/2018/05/02/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/05/02/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们完成商品列表页面的剩余配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="drf中的request和response说明"><a href="#drf中的request和response说明" class="headerlink" title="drf中的request和response说明"></a>drf中的request和response说明</h2><h3 id="drf中的request"><a href="#drf中的request" class="headerlink" title="drf中的request"></a>drf中的request</h3><p>我们知道drf对于django的request和response进行了一层封装，所以我们使用起来会更加方便。<br><code>REST framework&#39;s Request class extends the standard HttpRequest, adding support for REST framework&#39;s flexible request parsing and request authentication.</code>这句话的意思是说：drf在标准的HttpRequest上进行了扩展，增加了对rest框架的灵活请求解析和请求认证的支持。</p><p>下面简要说明一下：request。我们可以点击这里<a href="https://www.django-rest-framework.org/api-guide/requests/" target="_blank" rel="noopener">drf中的request</a>。<br> <a href="https://www.django-rest-framework.org/api-guide/requests/#data" target="_blank" rel="noopener">.data</a>：<br> data ,返回用户获取的信息（包括所有的解析内容，文件和非文件），而且不仅能解析通过post方法过来的信息，其他的方法如put ，patch也能进行解析。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#query_params" target="_blank" rel="noopener">.query_params</a>：<br>query_params,里面有通过get请求传递过来的参数，自己可以配置。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#parsers" target="_blank" rel="noopener">.parsers</a>：<br>parsers，因为用户提交过来的数据有很多种类型，所以它就是负责接收各种信息，并提供各种解析器进行解析。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#authentication" target="_blank" rel="noopener">Authentication</a>包括：<a href="https://www.django-rest-framework.org/api-guide/requests/#user" target="_blank" rel="noopener">.user</a>和<a href="https://www.django-rest-framework.org/api-guide/requests/#auth" target="_blank" rel="noopener">.auth</a><br>.use就是说只有通过验证才能获取到当前的用户，而这个.auth返回一些额外的验证信息。</p><h3 id="drf中的response"><a href="#drf中的response" class="headerlink" title="drf中的response"></a>drf中的response</h3><p> <a href="https://www.django-rest-framework.org/api-guide/responses/#responses" target="_blank" rel="noopener">Responses</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b664746855c5e23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>response就是根据你发起的请求然后返回响应，对于我们爬虫人员来说最熟悉不过的了，所以我就不细说了。这些就是英文文档的内容，全都有，你点上面那些蓝色的<strong>xx</strong>就知道了，我就不一句句翻译了，可能我翻译的还没你理解的印象深刻呢。</p><h2 id="drf过滤器"><a href="#drf过滤器" class="headerlink" title="drf过滤器"></a>drf过滤器</h2><p>我们打开goods\views.py文件，开始书写代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有c或者java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        query_set = Goods.objects.all()</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            query_set = query_set.filter(shop_price__gt=price_min)</span><br><span class="line">        return query_set</span><br></pre></td></tr></table></figure></p><p>不过运行项目，在浏览器地址栏输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/%EF%BC%9Fprice_min=100</span><br></pre></td></tr></table></figure></p><p>，发现会错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> assert queryset is not None, &apos;`base_name` argument not specified, and could &apos; \</span><br><span class="line">AssertionError: `base_name` argument not specified, and could not automatically determine the name from the viewset, as it does not have a `.queryset` attribute.</span><br></pre></td></tr></table></figure></p><p>提示我们缺少一个queryset属性，我们尝试修改一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    query_set = Goods.objects.all()</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            self.query_set = Goods.objects.filter(shop_price__gt=int(price_min))</span><br><span class="line">        return self.query_set</span><br></pre></td></tr></table></figure></p><p>运行还是会报同样的错误。找了很久才发现，原来是query_set 这个名字错了，需要修改为queryset:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            self.queryset = Goods.objects.filter(shop_price__gt=int(price_min))</span><br><span class="line">        return self.queryset</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，在浏览器地址栏输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/?page=1&amp;price_min=100</span><br></pre></td></tr></table></figure></p><p>回车发现，问题解决了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d001e1c807a61785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你有没有觉得这种过滤很麻烦，既要获取参数，又要判断参数是否存在，存在之后又要进行int类型转化。有没有简单的方法呢，答案是有的：<a href="https://www.django-rest-framework.org/api-guide/filtering/#filtering" target="_blank" rel="noopener">Filtering</a>。这个drf提供的filter是非常强大的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c0b323c74a42f364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#djangofilterbackend" target="_blank" rel="noopener">DjangoFilterBackend</a>：传统的Django过滤器，类似于xadmin的后台管理器。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#searchfilter" target="_blank" rel="noopener">SearchFilter</a>：通过搜索关键词进行过滤。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a>：通过某个顺序来进行过滤。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#djangoobjectpermissionsfilter" target="_blank" rel="noopener">DjangoObjectPermissionsFilter</a>：通过权限进行过滤。</p><p>前面三种是比较常见的过滤，它们可以实现列表页面的普通字段精确过滤，搜索过滤，以及排序等功能，下面分别进行介绍。</p><h3 id="DjangoFilterBackend"><a href="#DjangoFilterBackend" class="headerlink" title="DjangoFilterBackend"></a>DjangoFilterBackend</h3><p>1、安装<code>django-filter</code>（前面已经安装过了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure></p><p>2、注册进入app<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;django_filters&apos;,</span><br></pre></td></tr></table></figure></p><p>3、添加设置（默认设置好了，不用管）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;django_filters.rest_framework.DjangoFilterBackend&apos;,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、开始使用,打开goods\vieews.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django_filters.rest_framework import DjangoFilterBackend</span><br></pre></td></tr></table></figure></p><p>5、删除原来定义的过滤方法：<code>def get_queryset(self)</code>代码全部去掉。<br>6、仿照官方案例进行代码书写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    filter_backends = (DjangoFilterBackend,)</span><br><span class="line">    filter_fields = (&apos;name&apos;, &apos;shop_price&apos;)</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们项目，发现页面多了一个过滤器按钮，我们可以进行过滤：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5085aae67da6835b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-aa5147ea18a50359.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们测试一下，价格输入123，名称不输入,然后回车，发现浏览器地址栏变成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/?name=&amp;shop_price=123</span><br></pre></td></tr></table></figure></p><p><strong>注意一下，过滤和搜索是不一样的，过滤是精确的，字段必须保持一模一样，但是搜索却不是。</strong></p><p>但是我们如果想要模糊查询，而且价格在某个区间里面，这该怎么办呢？</p><h2 id="区间搜索和模糊查询"><a href="#区间搜索和模糊查询" class="headerlink" title="区间搜索和模糊查询"></a>区间搜索和模糊查询</h2><p>点击这里查看<a href="https://django-filter.readthedocs.io/en/master/" target="_blank" rel="noopener">django-filter</a>，注意一下，这个django-filter不仅可以用在drf上面，还可以用于Django上面，它允许我们自定义filter类。</p><p>我们在goods app下面新建一个filters.py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: filters.py</span><br><span class="line"># @time: 2018/10/4 17:47</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django_filters import rest_framework as filters</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsFilter(filters.FilterSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品的过滤类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    price_min = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;gte&apos;)      # 指定字段及字段的行为，我们这里指定shop_price的区间</span><br><span class="line">    price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;lte&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [&apos;price_min&apos;, &apos;price_max&apos;]</span><br></pre></td></tr></table></figure></p><p>接着回到我们的views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from goods.filters import GoodsFilter</span><br><span class="line"></span><br><span class="line"> filter_backends = (DjangoFilterBackend,)  # # DjangoFilterBackend 过滤器</span><br><span class="line"> # filter_fields = (&apos;name&apos;, &apos;shop_price&apos;)   # 设置我们需要过滤的字段 </span><br><span class="line"> filter_class = GoodsFilter   # filter_class 等于我们自定义的类</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，发现出了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">super().__init__(**kwargs)</span><br><span class="line">TypeError: __init__() got an unexpected keyword argument &apos;name&apos;</span><br></pre></td></tr></table></figure></p><p>解决办法，修改 <code>price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&#39;lte&#39;)</code>里面的<code>name</code>字段为<code>field_name</code>即可。</p><p>刷新一下就成了这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-44886e282c1114bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意一下，这里如果出现过滤器没有确定按钮的话，检查一下看你有没有继承错误，应该继承的是<code>from django_filters import rest_framework as filters</code>这个语句。</p><p>还有出现了这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: &lt;class &apos;goods.models.Goods&apos;&gt; QuerySet.</span><br><span class="line">  paginator = self.django_paginator_class(queryset, page_size)</span><br></pre></td></tr></table></figure></p><p>因为对于无序的数据，分页器生成的分页数据可能不一致，才导致这种情况，解决办法（打开goods\views.py文件，修改一下queryset代码）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryset = Goods.objects.all().order_by(&apos;add_time&apos;)</span><br></pre></td></tr></table></figure></p><p>然后问题就解决了。接下来完成我们的迷糊查询（搜索）。采用Django QuerySetAPI来完成我们的要求，这里推荐自强学堂的一篇文章<a href="https://code.ziqiangxuetang.com/django/django-queryset-api.html" target="_blank" rel="noopener">Django QuerySetAPI</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = filters.CharFilter(field_name=&quot;name&quot;, lookup_expr=&quot;icontains&quot;)  # 模糊查询: 名称中包含某字符，且字符不区分大小写,不加lookup_expr=&quot;icontains&quot;则是等值匹配</span><br><span class="line"></span><br><span class="line">class Meta:</span><br><span class="line">    model = Goods</span><br><span class="line">    fields = [&apos;price_min&apos;, &apos;price_max&apos;, &apos;name&apos;]</span><br></pre></td></tr></table></figure></p><p>接下来我们进行搜索的配置，在这之前去掉前面的模糊查询代码，两行哈，就上面的。</p><h2 id="SearchFilter"><a href="#SearchFilter" class="headerlink" title="SearchFilter"></a>SearchFilter</h2><p>点击这里查看官方文档：<a href="https://www.django-rest-framework.org/api-guide/filtering/#searchfilter" target="_blank" rel="noopener">SearchFilter</a>，我们仿照官方的实例来测试一下：（打开goods\views.py文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import filters</span><br><span class="line"></span><br><span class="line">  filter_backends = (DjangoFilterBackend, filters.SearchFilter)   # DjangoFilterBackend,以及SearchFilter过滤器（SearchFilter）</span><br><span class="line">  search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;)</span><br></pre></td></tr></table></figure></p><p>然后运行一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eb445f4ff8d72e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面多了一个搜索框，<code>DjangoFilterBackend</code>和<code>SearchFilter</code>可以分开使用，也可以合起来使用，想让谁显示就配置谁，也可以同时显示。</p><p>如果出现下面的错误,说明你的filter导错了，我们这里要用到的是<code>from rest_framework import filters</code>而不是<code>from django_filters import filters</code>注意一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter)</span><br><span class="line">AttributeError: module &apos;django_filters.rest_framework.filters&apos; has no attribute &apos;SearchFilter&apos;</span><br></pre></td></tr></table></figure></p><p>然后搜索还支持多种过滤方式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d82f808707fbcf03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;)</span><br></pre></td></tr></table></figure><p>需要说明的一点是，这三个字段不是统一的，也就是说可以单独使用。例如对name进行等值搜索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;=name&apos;)</span><br></pre></td></tr></table></figure></p><p>去掉其他的字段，返回结果为0个。而我们在里面加一个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;=name&apos;, &apos;goods_brief&apos;)</span><br></pre></td></tr></table></figure></p><p>返回结果就不是了，而是有一个。如果你把第三个字段都加上，发现全部结果了，因为他们里面只要满足一个条件就能返回。也就是说是或的关系，而不是与的关系，这一点要注意一下。同时我们这里不进行全文的搜索，因为一般模糊查询最好是使用elasticSearch来做，那样更方便。接下来是OrderingFilter排序了。</p><h2 id="OrderingFilter"><a href="#OrderingFilter" class="headerlink" title="OrderingFilter"></a>OrderingFilter</h2><p>老规矩还是先看官方文档：<a href="https://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a>，然后按照官方的例子来测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># DjangoFilterBackend,,SearchFilter,OrderingFilter</span><br><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">ordering_fields = (&apos;sold_num&apos;, &apos;add_time&apos;)</span><br></pre></td></tr></table></figure></p><p>我们按照商品的销量，添加时间进行排序，分正排序与负排序：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b4493ed9f5882265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们通过简单的几行代码，完成了商品列表页的分页，过滤，搜索，排序功能。</p><p>至此，我们本篇关于商品列表页面的配置下篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（八）：商品列表页的配置（中）</title>
      <link href="/2018/05/01/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
      <url>/2018/05/01/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们继续进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="基于类来配置商品列表页"><a href="#基于类来配置商品列表页" class="headerlink" title="基于类来配置商品列表页"></a>基于类来配置商品列表页</h2><p>现在我们不使用那个APIView，而是使用更上层的view：<code>GenericAPIView</code><a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/#using-mixins" target="_blank" rel="noopener">Using mixins</a>，这样写起来更加简单。使用Using mixins 和 GenericAPIView，其中GenericAPIView是在APIView的基础上进行了更深层次的封装，里面加入了一些东西如分页用的pagination_class，过滤用的filter_backends等。</p><p>我们看到官方给我们提供的文档代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from snippets.models import Snippet</span><br><span class="line">from snippets.serializers import SnippetSerializer</span><br><span class="line">from rest_framework import mixins</span><br><span class="line">from rest_framework import generics</span><br><span class="line"></span><br><span class="line">class SnippetList(mixins.ListModelMixin,</span><br><span class="line">                  mixins.CreateModelMixin,</span><br><span class="line">                  generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>所以，我们按照这个代码来修改我们的goods\views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line">from rest_framework import mixins</span><br><span class="line">from rest_framework import generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(mixins.ListModelMixin, generics.GenericAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()[:10]</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>我们通过get方法最后返回的是一个list函数，我们看一下list函数到底是干嘛的，我们可以看到在mixin.py文件里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6566bfa836c6aad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>它其实已经可以实现分页和序列化的功能了。</p><p>现在我们尝试把get方法注释掉，运行一下项目，发现出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;detail&quot;: &quot;方法 “GET” 不被允许。&quot;</span><br></pre></td></tr></table></figure></p><p>所以说，不论是何种view，我们都需要去重写它的get或者post等http请求的方法（drf默认是不会接收任何方法请求的）</p><p>这样是不是很简单，几行代码就解决了问题。那么我要是告诉你还有比这更简单的方法，都不用你去写get或者post等http请求，是不是觉得太方便了呢。</p><p>我们查看Pycharm左边的源码：<code>F:\Envs\vueshop\Lib\site-packages\rest_framework\generics.py</code>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2402453503feb539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击那个<code>ListAPIView</code>，有没有发现右侧的代码和我们刚才写的一模一样，所以我们可以直接继承这个<code>ListAPIView</code>，就不用写那些多余的代码了。注意到没有，右边的函数都直接继承了两个：<code>mixins.XXXXModelMixin, GenericAPIView</code>，这个和我们前面代码所继承的一模一样（<code>mixins.ListModelMixin, generics.GenericAPIView</code>这里直接在generics.py文件里使用，所以不加generics），所以直接使用<br><code>ListAPIView</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.generics import ListAPIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(ListAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()[:10]</span><br><span class="line">    serializer_class = GoodsSerializer</span><br></pre></td></tr></table></figure><p>简单说一下几个常用的APIView：ListAPIview (用于获取列表)，CreateAPiView (用于创建一条信息)，RetrieveAPIView(用于获取某一条信息)。具体可以点击这里进行查看：<a href="https://www.cnblogs.com/yangxiaoling/p/6914880.html" target="_blank" rel="noopener">API Guide(四)之Generic views</a></p><p>现在又有问题，一般的列表页都是需要分页的，你不可能一下子把所有的信息都给展示出来,我们有简单的方法，只需要通过在setting里面配置一个参数就能完成我们的分页功能。我们所有关于rest-framework的配置都是在<code>F:\Envs\vueshop\Lib\site-packages\rest_framework\settings.py</code>里面的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-77b283c5c240d09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到，drf默认是不提供分页的，需要我们自己来写，我们打开vueshop\settings.py文件，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &apos;DEFAULT_PAGINATION_CLASS&apos;: &apos;rest_framework.pagination.LimitOffsetPagination&apos;,</span><br><span class="line">    &apos;PAGE_SIZE&apos;: 10,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这些功能都是刚才提到的<code>GenericAPIView</code>来实现的。我们发现运行之后都直接给图片把域名都给加上了，可以直接进行访问了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2fb3d6901c7b116e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还可以自定义pagination的样式： <a href="https://www.django-rest-framework.org/api-guide/pagination/#setting-the-pagination-style" target="_blank" rel="noopener">Setting the pagination style</a><br>我们继续在views.py里面进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.pagination import PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsPagination(PageNumberPagination):</span><br><span class="line">    page_size = 10   # 默认每页个数</span><br><span class="line">    page_size_query_param = &apos;page_size&apos;  # 可以自定义每页的个数</span><br><span class="line">    page_query_param = &quot;p&quot;</span><br><span class="line">    max_page_size = 100  # 默认每页最大个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(generics.ListAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure></p><p>注意这里在<code>GoodsListView</code>里面必须添加<code>pagination_class</code>字段，因为在<code>GenericAPIView</code>里面有这个参数，还字段调用了这个<code>DEFAULT_PAGINATION_CLASS</code>，也就意味着有了这个你就要把刚才在settings.py里面配置的那个<code>DEFAULT_PAGINATION_CLASS</code>给注释掉，否则就会出错哈：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0443de0023fcb94f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行结果如下(第几页，每页多少个都是可以自定义的，你不定义就用默认的)：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30d3d400539a3ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="Viewsets和router完成商品列表页"><a href="#Viewsets和router完成商品列表页" class="headerlink" title="Viewsets和router完成商品列表页"></a>Viewsets和router完成商品列表页</h2><p>现在我们来说一个比GenericAPIView还要更深层次的东西：Viewsets，这个不是某个具体的View，他包函5个view：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-706bfbdca1ee3aad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们现在将使用它的GenericViewSet，看到没有它不仅封装了我们的GenericAPIView，还添加了一个ViewSetMixin：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-df201f1205830bb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们来看一下这个ViewSetMixin里面包含了什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a5646d36b4e02fa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>里面有4个方法，第一个就是路由函数的配置。</p><p>我们知道我们刚才在GoodsListView里面继承的是这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListView(generics.ListAPIView):</span><br></pre></td></tr></table></figure></p><p>我们点开ListAPIView，发现ListAPIView其实继承了mixins.ListModelMixin和GenericAPIView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class ListAPIView(mixins.ListModelMixin,</span><br><span class="line">                  GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>而如果我们只这样写，发现GenericViewSet其实继承的是ViewSetMixin和generics.GenericAPIView，是不是少了一个，对把mixins.ListModelMixin给丢了，所以我们需要补上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListView(viewsets.GenericViewSet):</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br></pre></td></tr></table></figure><p>现在我们看这个： <a href="https://www.django-rest-framework.org/api-guide/viewsets/#viewsets" target="_blank" rel="noopener">ViewSets</a>，尝试将ViewSets和Routers来进行配套使用。为了更好地知道我们这里是使用了viewset，因此我们将GoodsListView进行改名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure></p><p>接下来去我们的urls.py文件里面配置我们的url:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListViewSet</span><br><span class="line"></span><br><span class="line">goods_list = GoodsListViewSet.as_view(&#123;</span><br><span class="line">    &apos;get&apos;: &apos;list&apos;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>我们可以直接将get请求绑定到list上面，类似于前面看到的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get(self, request, *args, **kwargs):</span><br><span class="line">    return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>既然这样弄好了，我们之前的url映射就要修改了（我们不再需要添加as_view()了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 商品列表页</span><br><span class="line">path(&apos;goods/&apos;, goods_list, name=&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></p><p>其实还有更简单的呢，我们可以看到官方文档里面有介绍这个<code>DefaultRouter</code>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d60fb33bc336e167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意由于官方是1.x的文档，所以2.0的drf配置可能url就有些不同，但是没关系，我这个我经过了测试，没有问题。我们继续修改urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet)  # 这里前面加r可以进行转义</span><br></pre></td></tr></table></figure></p><p>然后去掉之前对于goods的配置，在urlpatterns中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 对于goods的router path路径</span><br><span class="line">  re_path(&apos;^&apos;, include(router.urls)),</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，发现么有任何问题。</p><p>看到这里大家就可能会懵圈，其实我也是，因为我们不知道什么时候用GenericViewSet, GenericAPIView ，APIView  和 View。懵圈就是对的，我们接下来就是说明这些东西的层次结构，以后你就不会晕了。</p><h2 id="GenericViewSet，-GenericAPIView，APIView-和View的使用"><a href="#GenericViewSet，-GenericAPIView，APIView-和View的使用" class="headerlink" title="GenericViewSet， GenericAPIView，APIView 和View的使用"></a>GenericViewSet， GenericAPIView，APIView 和View的使用</h2><p>现在我们来理清一下这些view之间的关系，还有mixins.ListModelMixin以及这些关系如何来进行组合使用，这样我们就清楚什么时候使用什么了。看这里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GenericViewSet(viewset) -drf</span><br><span class="line">    GenericAPIView      -drf</span><br><span class="line">        APIView         -drf</span><br><span class="line">            View        -django</span><br></pre></td></tr></table></figure></p><p>层级关系有了（越往上就是对底层的一次封装）也就是说下面有的功能上面一定都有，而上面有的功能下面却不一定有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">class APIView(View):</span><br></pre></td></tr></table></figure></p><p>但还是不清楚各个view的区别（这里是指功能view），我们需要借助mixin来进行理解了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b1b89805fd9ba0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面可以看到mixin一共有5种类型，各个view 之间的差异其实就是通过这个mixin来实现的。这就好比英语中的时态一样，都是完成时，却又不同（前面那个层级关系就类似说明了，过去时，现在时，将来时的区别（实际上又没有，里面的意思你肯定懂））：</p><hr><p>过去完成时，现在完成时，将来完成时，过去将来完成时</p><hr><p>有点跑题，不懂的点这里看一下，毕竟英语还是挺重要的：<a href="https://baijiahao.baidu.com/s?id=1592289962651390333&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">现在完成时+过去完成时+将来完成时+过去将来完成时</a>。我们来看这5个mixin，我们以其中的ListModelMixin为例，来进行说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class ListModelMixin(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List a queryset.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def list(self, request, *args, **kwargs):</span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        if page is not None:</span><br><span class="line">            serializer = self.get_serializer(page, many=True)</span><br><span class="line">            return self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=True)</span><br><span class="line">        return Response(serializer.data)</span><br></pre></td></tr></table></figure></p><p>我们看到这个<code>ListModelMixin</code>继承的是最高类object（祖宗类），这个没什么说的。关键是这里的list方法，它将get 和 list进行了连接，里面实现了过滤，分页和序列化的功能。</p><p>其他的Mixin：<br>CreateModelMixin ：创建数据会用到；<br>RetrieveModelMixin：获取具体的信息，序列化；<br>UpdateModelMixin：更新全部还是部分的信息；<br>DestroyModelMixin：用来连接delete操作，并在操作的时候设置返回状态如200，204等。<br>上面这些功能都是由<code>mixin</code>来完成的，<code>GenericAPIView</code>并没有做，所以要实现相应的功能就必须通过两者结合来达到。那现在的问题就是这个<code>GenericAPIView</code>到底做了什么事情，不可能绑定这么一个没有的东西吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0b1eaab2f0b14899.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><code>GenericAPIView</code>有好多种，我们以<code>ListAPIView</code>为例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class ListAPIView(mixins.ListModelMixin, GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>点击右边的<code>GenericAPIView</code>，我们可以看到它是继承了<code>views.APIView</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Base class for all other generic views.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # You&apos;ll need to either set these attributes,</span><br><span class="line">    # or override `get_queryset()`/`get_serializer_class()`.</span><br><span class="line">    # If you are overriding a view method, it is important that you call</span><br><span class="line">    # `get_queryset()` instead of accessing the `queryset` property directly,</span><br><span class="line">    # as `queryset` will get evaluated only once, and those results are cached</span><br><span class="line">    # for all subsequent requests.</span><br><span class="line">    queryset = None</span><br><span class="line">    serializer_class = None</span><br><span class="line"></span><br><span class="line">    # If you want to use object lookups other than pk, set &apos;lookup_field&apos;.</span><br><span class="line">    # For more complex lookup requirements override `get_object()`.</span><br><span class="line">    lookup_field = &apos;pk&apos;</span><br><span class="line">    lookup_url_kwarg = None</span><br><span class="line"></span><br><span class="line">    # The filter backend classes to use for queryset filtering</span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line">    # The style to use for queryset pagination.</span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>看到上面的注释没有：<code>Base class for all other generic views</code>：所有通用（一般）视图的基类。里面还有两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># The filter backend classes to use for queryset filtering</span><br><span class="line">filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line"># The style to use for queryset pagination.</span><br><span class="line">pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>看到了，为什么我们可以过滤，可以分页？原因就在这里。我们再点击右边的APIView，看看这里面是什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e95f74b4583e1057.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这就是一些基本的功能，我们前面的<code>GenericAPIView</code>就已经封装具有了这些，一些没有的功能就在更深的view上面。这就好比你一年级会+，-运算，二年级你除了会+，-还会了*，/运算；到了后面，你不仅会前面的还会乘方，开方。。。。运算。</p><p>现在我们谈一下马上用到的<code>RetrieveAPIView</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>这个注释<code>Concrete view for retrieving a model instance.</code>的意思是：取到一个模型实例化的具体视图。然后将get方法与retrieve方法进行绑定，就能利用到retrieve的方法了，而不仅仅只是get数据了。而且通过浏览器发送过来的请求只有http协议中规定的几种，我们这里就不只有那些了。我们点<code>retrieve</code>进去，看看这个函数实现了什么功能。它自动帮我们跳到了RetrieveModelMixin这个类，而里面有一个<code>retrieve</code>函数。这个类的作用就是获取一个模型的实例而且是通过<code>retrieve</code>函数来完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveModelMixin(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Retrieve a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def retrieve(self, request, *args, **kwargs):</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        return Response(serializer.data)</span><br></pre></td></tr></table></figure><p>所以这其实就是<code>mixins.RetrieveModelMixin</code>和<code>GenericAPIView</code>的一次组合，实际上你通过那个RetrieveAPIView的继承关系就能看出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin, GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>那么按照这种组合我们是否可以自己组合自己想要的类呢？答案是可以的，但是别忘了把get 方法和 retrieve方法进行绑定，也就是说光有下面是不可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>正确的应该是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>所以一般情况我们都会优先考虑那些已经组合好的APIView，只有在满足不了需求的情况下，我们才进行组合，记得将http请求方法（不一定是get）与mixin方法进行绑定哈:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b1a3b176a4188c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们往上走，说完了<code>GenericAPIView</code>，现在来说一下<code>GenericViewSet(viewset)</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GenericViewSet(viewset) -drf</span><br><span class="line">    GenericAPIView      -drf</span><br><span class="line">        APIView         -drf</span><br><span class="line">            View        -django</span><br></pre></td></tr></table></figure></p><p>这个viewset有什么好处呢？我们知道这个viewset有5种：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d8db077e5e58398c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>它们也都继承了GenericAPIView，并都与唯一的ViewSetMixin进行了组合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>我们看一下这个<code>ViewSetMixin</code>它里面是什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4f43f5c4ea8596da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个<code>ViewSetMixin</code>将具体的每个modelmixin(例如:(mixins.DestroyModelMixin，mixins.UpdateModelMixin)进行了功能合并，形成了唯一的一个<code>ViewSetMixin</code>。</p><p>在讲<code>GenericAPIView</code>的时候我们说过，当你自定义APIView的时候需要将http请求方法与mixin方法进行绑定。那么上面说过这个唯一的<code>ViewSetMixin</code>既然是进行了功能合并，那我们就不需要进行方法绑定了。<strong>注意我这里是说不需要进行方法的绑定，但没说不需要其他的绑定关系。</strong></p><p>url的配置还是需要配置的，我们打开那个viewsets.py文件（实际上我们上通过点击这个GenericViewSet来直接进入该文件的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e97c6fc89718e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这其实就是url的配置，它重写了as_view方法，接受参数，并传递到对应的method 与action进行绑定。所以我们在urls.py文件里面，就要修改了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goods_list = GoodsListViewSet.as_view(&#123;</span><br><span class="line">    &apos;get&apos;: &apos;list&apos;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(&apos;goods/&apos;, goods_list ,name=&quot;goods-list&quot;),  # 这里就不需要as_view()了</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这样尽管很简单，但是drf还是给我们提供了一个更简单的Routers：<a href="https://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/#using-routers" target="_blank" rel="noopener">Using Routers</a></p><p>我们可以使用这个进行默认的绑定，这个其实和generic中的差不多，怎么用呢？直接在urls.py文件里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListViewSet</span><br><span class="line"></span><br><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet)  # 这里前面加r可以进行转义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   # 对于goods的router path路径</span><br><span class="line">   re_path(&apos;^&apos;, include(router.urls)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>是不是很简单。<code>ViewSetMixin</code>除了不需要进行方法绑定，还有其他的好处：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efc04ca2f8909702.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>比如依赖于具体的request请求方法，来给视图绑定动作。这个操作在后面的开发中进行动态的serializer时具有非常大的好处，非常方便。</p><p>最后奉上一张图片，让你对此有更直观的认识：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5d185b88b06f7ffa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>大家可以点击这里，了解更多关于drf的知识：<a href="https://github.com/leilux/Django-REST-Framework-Tutorial_zh-CN" target="_blank" rel="noopener">drf翻译的教程</a></p><p>至此，我们本篇关于商品列表页面的配置中篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（七）：商品列表页的配置（上）</title>
      <link href="/2018/04/22/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/04/22/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="基于类来配置商品列表页"><a href="#基于类来配置商品列表页" class="headerlink" title="基于类来配置商品列表页"></a>基于类来配置商品列表页</h2><p>在教育网站那个项目里面，我们介绍了基于视图（FBV）和基于类（CBV）来实现用户登录的功能：<a href="https://www.cnblogs.com/yuhy/p/8414340.html" target="_blank" rel="noopener">Django~FBV和CBV</a></p><p><strong>基于视图（FBV）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 基于视图函数的实现用户的登录</span><br><span class="line"># 当我们配置的url被这个view处理时，将会自动传入request对象.</span><br><span class="line">def user_login(request):</span><br><span class="line">   # 前端向后端发送的请求方式有两种: get和post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单时为post</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">       # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">        user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">     pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">       # 取值成功返回user对象,失败返回null</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。</span><br><span class="line">            login(request, user)</span><br><span class="line">            # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">            return render(request, &apos;index.html&apos;)</span><br><span class="line">        else:</span><br><span class="line">            # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">    # 获取登录页面时为get</span><br><span class="line">    elif request.method == &quot;GET&quot;:</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">       # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>基于类（CBV）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#  基于类实现用户的登录，它需要继承view</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    # 不需要判断，直接调用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息</span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line">        # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息</span><br><span class="line">        if login_form.is_valid():</span><br><span class="line">            # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">            pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">            # 取值成功返回user对象,失败返回null</span><br><span class="line">            user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">            if user is not None:</span><br><span class="line">                if user.is_active:</span><br><span class="line">                    # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                    login(request, user)</span><br><span class="line">                    # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                    return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br><span class="line">                else:</span><br><span class="line">                    return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;)</span><br><span class="line">            else:</span><br><span class="line">                # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回</span><br><span class="line">                return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">        # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;)</span><br></pre></td></tr></table></figure></p><p>为了实现我们的面向对象思想，我们更加喜欢后者来进行开发。</p><p>1、首先我们先进行url的配置，在vueshop\urls.py文件里面，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from goods.view_base import GoodsListView</span><br><span class="line"></span><br><span class="line"># 商品列表页</span><br><span class="line">   path(&apos;goods/&apos;, GoodsListView.as_view(), name=&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></p><p>先暂且这样，因为我们还没有配置视图函数，所以会出现红色的错误提示，先不用管。<br>2、我们在apps\goods中新建一个view_base.py文件，来实现一个仅仅只通过Django实现的json返回，这让我们更加了解Django的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: view_base.py</span><br><span class="line"># @time: 2018/10/3 14:46</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line">        for good in goods:</span><br><span class="line">            json_dict = &#123;&#125;</span><br><span class="line">            json_dict[&quot;name&quot;] = good.name</span><br><span class="line">            json_dict[&quot;category&quot;] = good.category.name</span><br><span class="line">            json_dict[&quot;market_price&quot;] = good.market_price</span><br><span class="line">            json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.http import HttpResponse</span><br><span class="line">        return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure><p>然后我们运行一下项目，在浏览器地址栏中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/</span><br></pre></td></tr></table></figure></p><p>会发现全是一堆乱码，所以我们利用Chrome的童鞋可以在应用商店里下载<strong>json viewer</strong>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4eb3d6af1a9b34b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击安装，最后刷新一下我们的项目，发现页面就好看多了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2664a5dd01b4da3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样就把我们当前的信息都给展示出来了，但是你肯定想这么简单的操作，我们还用什么restful framework呢？其实这是因为当我们的项目很多时，我们不可能还按照这种方式一一用属性的方法来取出来，这劳动量太大了。还有就是有些属性是通过这种方式是无法取出来的，你可以试试<code>json_dict[&quot;add_time&quot;] = good.add_time</code>这个你运行肯定会出错，因为这个不是一个jsonserializer对象。</p><p>现在我们来利用Django自带的<code>model_to_dict</code>来给刚才的代码进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: view_base.py</span><br><span class="line"># @time: 2018/10/3 14:46</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line">        # for good in goods:</span><br><span class="line">        #     json_dict = &#123;&#125;</span><br><span class="line">        #     json_dict[&quot;name&quot;] = good.name</span><br><span class="line">        #     json_dict[&quot;category&quot;] = good.category.name</span><br><span class="line">        #     json_dict[&quot;market_price&quot;] = good.market_price</span><br><span class="line">        #     json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.forms.models import model_to_dict</span><br><span class="line">        for good in goods:</span><br><span class="line">            json_dict = model_to_dict(good)</span><br><span class="line">            json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.http import HttpResponse</span><br><span class="line">        return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>运行一下我们的项目，发现大部分都能序列化，但还是有些字段不可以：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-fd9ca9edca887056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这时候Django自带的一个专门用于序列化的字段<code>serializers</code>派上用场了，我们修改代码如下（有了这个连model_to_dict都不需要了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line"></span><br><span class="line">        from django.core import serializers</span><br><span class="line">        json_data = serializers(&quot;json&quot;, goods)</span><br><span class="line">        json_data = json.loads(json_data)</span><br><span class="line">        from django.http import HttpResponse, JsonResponse</span><br><span class="line">        return HttpResponse((json_data), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>如果运行后出现这种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Requested setting UEDITOR_SETTINGS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() be</span><br></pre></td></tr></table></figure></p><p>请参考这篇文章：<a href="https://blog.csdn.net/u011013781/article/details/52155761" target="_blank" rel="noopener">PyCharm开发django配置过程遇到问题（转）</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5447159288c0db40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f02af4190660f417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行项目，又出现这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise AppRegistryNotReady(&quot;Apps aren&apos;t loaded yet.&quot;)</span><br><span class="line">django.core.exceptions.AppRegistryNotReady: Apps aren&apos;t loaded yet.</span><br></pre></td></tr></table></figure></p><p>这个很简单，是运行vueshop这个项目，不是view_base.py文件！！！运行vueshop这个项目，发现又出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> json_data = serializers(&quot;json&quot;, goods)</span><br><span class="line">TypeError: &apos;module&apos; object is not callable</span><br></pre></td></tr></table></figure></p><p>说明这是一个moudle我们不能直接调用它，而应该在调用的时候写清楚具体调用哪一个方法！修改<code>json_data = serializers(&quot;json&quot;, goods)</code>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> from django.core.serializers import serialize</span><br><span class="line">        json_data = serialize(&quot;json&quot;, goods)</span><br><span class="line">或者</span><br><span class="line"> from django.core import serializers</span><br><span class="line">        json_data = serializers.serialize(&quot;json&quot;, goods)</span><br></pre></td></tr></table></figure></p><p>然后运行一下vueshop项目，发现是一些没有规则的文字：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0dd47ef169154fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们没有把这些dict类型的数据转成str字符串，所以修改返回代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return HttpResponse((json.dumps(json_data)), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>当然你可以以直接使用JsonResponse，把鼠标移到JsonResponse按住Ctrl，单击左键，就可以看到源码了，看到没有这其实是对上面做了一次更深的封装：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-28a583d3fd8ef128.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以我们也可以这样修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return JsonResponse(json_data, safe=False)</span><br></pre></td></tr></table></figure></p><p>记住这里的safe=False一定要添加，否则会出错：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bdce0f10363fa753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意json.dumps()和json.loads()是相反的操作，前者用于将dict类型的数据转成str字符串，后者用于将str类型的数据转成dict类型。</strong>不清楚的童鞋可以阅读这篇文章：<a href="https://blog.csdn.net/mr_evanchen/article/details/77879967" target="_blank" rel="noopener">【Python】Json模块dumps、loads、dump、load函数介绍</a>。了解更多Django序列化的知识可以阅读这篇文章： <a href="https://www.cnblogs.com/zknublx/p/6061822.html" target="_blank" rel="noopener">Serialize—-序列化django对象</a>或者这篇<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000" target="_blank" rel="noopener">序列化介绍</a>。</p><p>看到这里你还是有疑问，前面说不能序列化所以用drf(Django Restful Framework的简称，以后都是这么说明)。可是现在Django通过其提供的序列化函数已经很好的解决了这个问题，那我们为什么还要用drf呢？</p><p>1、前面说过images这个字段保存的是图片的一个相对路径，我们需要在前面加上’media’。（如果通过PC端就可以不用，因为我们前面配置了media_root，但是通过app,pad就需要用户自己添加，这是不可能的，所以需要用到drf，它可以帮我们添加这个media前缀）</p><p>2、我们这里字段序列化方式被固定了，一旦需要重组就非常的麻烦，drf就不一样了。</p><p>3、drf可以生成文档，还可以进行输入检测等。</p><h2 id="采用drf完成商品列表页面的配置"><a href="#采用drf完成商品列表页面的配置" class="headerlink" title="采用drf完成商品列表页面的配置"></a>采用drf完成商品列表页面的配置</h2><p>首先通过浏览drf的官方网站，我们需要安装一些依赖包：</p><ul><li><a href="https://pypi.org/project/coreapi/" target="_blank" rel="noopener">coreapi</a> (1.32.0+) - Schema generation support.</li><li><a href="https://pypi.org/project/Markdown/" target="_blank" rel="noopener">Markdown</a> (2.1.0+) - Markdown support for the browsable API.</li><li><a href="https://pypi.org/project/django-filter/" target="_blank" rel="noopener">django-filter</a> (1.0.1+) - Filtering support.</li><li><a href="https://github.com/maraujop/django-crispy-forms" target="_blank" rel="noopener">django-crispy-forms</a> - Improved HTML display for filtering.</li><li><a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="noopener">django-guardian</a> (1.1.1+) - Object level permissions support.<br>我们发现其他都有，现在只需要安装<code>coreapi</code>(文档会用到)和<code>django-guardian</code>。使用下面的命令进行安装:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xx -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></li></ul><p>如果你在安装coreapi的过程中出现了utf-8的decode编码错误，那么你就要修改你的虚拟环境的编码格式了（一般来说使用pip18的版本都不会有这个错误，其他版本可能会有），具体操作如下：打开你虚拟环境下面的–init–.py文件（我的路径为F:\Envs\vueshop\Lib\site-packages\pip\compat）大约75行的位置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-64d9ecadd2ee2cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>将里面的utf_8修改为gbk。然后再进行安装，不过需要先卸载之前安过的版本资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall coreapi MarkupSafe</span><br></pre></td></tr></table></figure></p><p>然后在运行我们的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install coreapi -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>接下来引入我们的api文档，打开vueshop\urls.py文件，我们新增两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.documentation import include_docs_urls</span><br><span class="line"></span><br><span class="line"> # 自动化的文档,低版本的Django记得把docs/$后面的$去掉（我这采用的是Django2.0.1）</span><br><span class="line">   path(&apos;docs/&apos;, include_docs_urls(title=&apos;慕海生鲜网文档&apos;))</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，看看是不是没有错误发生。现在我们需要按照<a href="http://www.django-rest-framework.org/#" target="_blank" rel="noopener">官方文档</a>的说明去settings.py文件里面注册我们的<code>rest_framework</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    &apos;rest_framework&apos;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>还有路由的配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2dd75a6c994ab9e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>只不过这是Django1.x系列的路由配置，在Django2.x里面我们这样配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Django rest_framework的路由配置</span><br><span class="line">  path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;))</span><br></pre></td></tr></table></figure></p><p>然后我们按照官方快速使用的例子来创建一个api: <a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/#rewriting-our-api-using-class-based-views" target="_blank" rel="noopener">Rewriting our API using class-based views</a></p><p>我们直接复制上面的代码进入我们goods\views.py文件里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List all snippets, or create a new snippet.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, format=None):</span><br><span class="line">        goods = Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer = GoodsSerializer(goods, many=True)  # 因为返回的是列表，所以我们需要指定many为True</span><br><span class="line">        return Response(goods_serializer.data)</span><br></pre></td></tr></table></figure></p><p>说明一下，<code>from .models import Goods</code>表示当前的目录下的models文件，这样取不容易出现因为重名而导致的失败。<code>SnippetSerializer</code>是可以自定义序列化的类。在前面的教育网站里面我们说过了modelform 和form，特别是modelform，它可以将字段直接转成html代码。同样的在drf里面，serializer是用来取代form开发的，也就是说我们不使用form来进行后面的开发了(实际上是没有用于让用户表单提交的功能)，直接用serializer。而且它的功能都不一样了，serializer是用来对json进行序列化的。具体参考这个系列的文章：<a href="https://www.imooc.com/article/20443?block_id=tuijian_wz" target="_blank" rel="noopener">Django rest framework之Serializers笔记（一）</a></p><p>类似于之前对form的操作，我们先来在goods app下面新建一个文件<code>serializers.py</code>:<br>然后按照官方快速使用的例子来创建一个Serializer class：<a href="https://www.django-rest-framework.org/tutorial/1-serialization/#creating-a-serializer-class" target="_blank" rel="noopener">Creating a Serializer class</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: serializers.py.py</span><br><span class="line"># @time: 2018/10/3 20:09</span><br><span class="line"># 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField(required=True, max_length=100)</span><br><span class="line">    click_num = serializers.IntegerField(default=0)</span><br></pre></td></tr></table></figure></p><p>然后修改urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListView</span><br></pre></td></tr></table></figure></p><p>注意将之前的<code>from goods.view_base import GoodsListView</code>给删除掉，否则就有两个地址了。</p><p>现在运行我们的项目，发现出了问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f1d3f645091de553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个问题有两种解决方法，一种是注销后台xadmin，另一种则是修改UserProfile的返回值，将<code>name</code>修改为<code>username</code>，因为你在定义的时候是允许该字段为空的，所以会返回<code>non-string</code>，修改为<code>username</code>就不会了，因为该字段来自AbstractUser类，该类<code>username</code>是不允许为空的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ba7e0e27d3d4d6d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-be3b3883b5f5f337.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后重新运行我们的项目，出现正常画面了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2061d3ec9e5ab80c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>用浏览器请求drf默认会帮你渲染成网页的格式，这是已经api接口样式了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-990cbd763deaa927.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可以点击右上角的GET，选择json就是之前看到的那种：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-35a4d7569490034d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>选择api就是下面这种，这也是默认的样式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2061d3ec9e5ab80c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击旁边的option就会出现接口的描述：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-37ad1cb0e6c8c6c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f7044ea7916a6710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个接口的描述我们可以自己定义，上面就是那个<code>description</code>。它不仅能解析get信息，你通过post提交的数据也能进行解析。render和parse对于我们爬虫人员而言非常熟悉，分别代表渲染和解析。值得注意的是，因为我们这里是序列化Goods，因此我们serializers的字段要和goods app models.py里面的字段保持一致，这个和Django form里面对于form和model的要求也是一样的。</p><p>我们尝试添加一个不一样的字段<code>goods_front_image</code>，看看返回什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-69e331ae203d4140.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你知道的我们在数据库里面并没有添加media这个前缀，但是drf却给我们自动添加了，这是为什么呢？那是因为我们在setting.py里面配置了<code>MEDIA_URL</code>，所以drf根据这个就会自动添前缀。</p><p>我们可以对drf进行登入，登出操作，那是因为我们在urls.py里面配置了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Django rest_framework的路由配置</span><br><span class="line">  path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;))</span><br></pre></td></tr></table></figure></p><p>既然这个<code>serializers</code>类似于<code>form</code>，那么我们是否可以进行类似的保存到数据库的操作呢？答案是可以的。所以我们开始按照官方文档来进行配置：打开goods\views.py文件，修改为以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line">from rest_framework import status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List all snippets, or create a new snippet.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, format=None):</span><br><span class="line">        goods = Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer = GoodsSerializer(goods, many=True)  # 因为返回的是列表，所以我们需要指定many为True</span><br><span class="line">        return Response(goods_serializer.data)</span><br><span class="line"></span><br><span class="line">    def post(self, request, format=None):   # 这里的request不再是Django的request，而是对其进行了更深的封装</span><br><span class="line">        serializer = GoodsSerializer(data=request.data)</span><br><span class="line">        if serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            return Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure></p><p>是不是觉得上面的代码很眼熟？是的这个serializer 和form实在是太像了，连验证都差不多一样。有了drf之后，不需要对用户的请求方法method进行判断，我们直接使用<code>data=request.data</code>就可以取出数据，然后放到data里面，是不是很方便呢。然后调用serializer的save方法对数据进行保存。</p><p>接下来就是完善我们的goods\serializers.py文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: serializers.py.py</span><br><span class="line"># @time: 2018/10/3 20:09</span><br><span class="line"># 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同</span><br><span class="line"></span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField(required=True, max_length=100)</span><br><span class="line">    click_num = serializers.IntegerField(default=0)</span><br><span class="line">    goods_front_image = serializers.ImageField()</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Create and return a new `Snippet` instance, given the validated data.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return Goods.objects.create(**validated_data)</span><br></pre></td></tr></table></figure></p><p>这里调用serializer的create方法，用于把需要验证的字段创建一个验证对象。</p><p>说到这里你可能会问，Django的form为了避免我们重复的书写验证字段所以提供了一个Modelform。那么这里的serializer也是需要验证的，那么它是否也提供了一个类似于Modelform的Modelserializer呢？答案是有的！<a href="https://www.django-rest-framework.org/tutorial/1-serialization/#using-modelserializers" target="_blank" rel="noopener">Using ModelSerializers</a>这里就有介绍。</p><p>我们修改serilalizers.py文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure><p>注意一下，此处的外键（category）会被序列化为id，如果我们想要获取这个外键的全部信息并在此处进行显示呢，那该怎么办？我们可以通过嵌套的方式来实现这个功能，重新修改serilalizers.py文件为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from goods.models import Goods, GoodsCategory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    category = CategorySerializer()</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure></p><p>然后刷新一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ee5de22ef370ea86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你看，所有的信息都被显示出来了。</p><p>至此，我们本篇关于商品列表页面的配置上篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（六）：restful api以及Vue的结构介绍</title>
      <link href="/2018/04/20/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Arestful-api%E4%BB%A5%E5%8F%8AVue%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/20/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Arestful-api%E4%BB%A5%E5%8F%8AVue%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始介绍restful api以及Vue的结构。</p><h2 id="为什么要前后端分离"><a href="#为什么要前后端分离" class="headerlink" title="为什么要前后端分离"></a>为什么要前后端分离</h2><p><strong>1、pc,app,pad多端适应</strong><br>随着技术的发展，我们所开发的网站不仅仅是适配于PC端了，更需要进行多个服务端的匹配，目前来说后端模板渲染的方式非常适合pc端，但是对于app，pad端却是不友好的。</p><p><strong>2、SPA开发模式开始流行</strong><br>所谓的SPA开发模式，其实就是单页面应用。单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。现在最流行的方式就是前后端分离，由前端提供页面，后端提供接口。</p><p><strong>3、前后端开发的职责分不清</strong><br>正如我们在前面说过，其实Django的模板到底由谁来写？谁来拆分这都是值得大家头疼的事。我上次我下载了几百套的织梦cms模板，想用Django来搭建网站，发现里面嵌入了太多的php，java ，Ajax。。。代码，ajax，java代码还能理解一点，但是php我就不会了，所以这个问题就显得特别重要。</p><p><strong>4、开发效率问题，前后端互相等待</strong><br>前后端分离的坏处就是对方及时看不到项目的进展，很容易出现你等我，我等他的尴尬刚 局面。</p><p><strong>5、前端一直配合着后端，能力受限</strong><br>就拿Django来说吧，后端觉得某个字段起的名字有问题，想要修改就必须及时通知前端人员，这样前端一直配合着后端，要求高水平的能力。</p><p><strong>6、后台开发语言和模板高度耦合，导致开发语言依赖严重</strong><br>其实很多开发语言都有属于自己的Web框架，Python就有Django，Flask，Tornado，而在java Web里面就有Spring，Struts，Hibernate。这些开发语言和模板高度耦合，使得你如果不会Python语法就不会使用Django，不会Java就不会Spring。</p><p>但是前后端尽管很流弊，但也有缺点。</p><h2 id="前后端分离缺点"><a href="#前后端分离缺点" class="headerlink" title="前后端分离缺点"></a>前后端分离缺点</h2><ul><li>前后端学习的门槛增加，后端使用if else来显示数据的语法其实完全可以交给前端</li><li>数据依赖导致文档重要性增加，如果没有文档，那么前端人员不知道后端的业务逻辑</li><li>前端工作量加大（大部分数据显示的工作都由他来负责）</li><li>seo的难度加大，爬虫请求不到数据（有些是ajax请求，爬虫只会爬到静态html代码）</li><li>后端开发模式迁移增加成本</li></ul><h2 id="restful-api的介绍"><a href="#restful-api的介绍" class="headerlink" title="restful api的介绍"></a>restful api的介绍</h2><p>restful api 目前是前后端分离的最佳实践(它只是一套标准，建议性质的，类似于PEP8的规范，你可以不遵循它，但是为了更好的开发与他人交流最好还是遵循它)</p><h2 id="restful-api的特点"><a href="#restful-api的特点" class="headerlink" title="restful api的特点"></a>restful api的特点</h2><p>1、轻量，直接通过http，不需要额外的协议，通过post/get/put/delete进行操作；’<br>2、面向资源，一目了然，具有自解释性。<br>看看这篇面向资源的架构文章：<a href="https://blog.csdn.net/u012068294/article/details/78519058" target="_blank" rel="noopener">面向资源的架构</a>。资源是名词，post/get/put/delete等是动词，那么如何关联呢？这就是restful了。推荐两篇文章：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a>，这篇写的比较久，注重于概念，但是比较容易理解。<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>，这篇注重于实践，非常详细。</p><h2 id="Vue的介绍"><a href="#Vue的介绍" class="headerlink" title="Vue的介绍"></a>Vue的介绍</h2><h3 id="Vue基本概念"><a href="#Vue基本概念" class="headerlink" title="Vue基本概念"></a>Vue基本概念</h3><p>1、前端工程化： <a href="https://www.cnblogs.com/fsyz/p/8274727.html" target="_blank" rel="noopener">浅谈什么是前端工程化</a><br>2、数据双向绑定：<a href="https://blog.csdn.net/zhang5207892/article/details/78389121" target="_blank" rel="noopener">怎么理解vue的数据双向绑定</a><br>3、组件化开发：<a href="https://blog.csdn.net/lican_2017/article/details/79365573" target="_blank" rel="noopener">什么叫组件化开发</a></p><p>MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。当然这些事 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。说白了就是:数据驱动view，view又改变数据。</p><p>数据双向绑定，你可以点击<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC" target="_blank" rel="noopener">表单输入绑定</a>，体会一下它的用途，都不需要你另写js代码来进行实现。</p><h3 id="Vue开发中的几个概念"><a href="#Vue开发中的几个概念" class="headerlink" title="Vue开发中的几个概念"></a>Vue开发中的几个概念</h3><p><strong>1、webpack</strong><br>它只是一个js工具，用于es6到es5代码转换，记住是vue不能被浏览器识别的，浏览器只能识别老三样：HTML，CSS，JAVASCRIPT。所以webpack就是把我们的代码转换成这种浏览器可以识别的代码。你可以打开我们的项目，F12查看源码，发现里面的东西很少，那是因为我们的代码都在这个js文件里面了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-853feabd911b0fae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、Vue全家桶（vue，vuex，vue_router，axios）</strong><br>vue（框架），vuex（组件通讯），vue_router（单页面的路由），axios（Vue里面类似于ajax。因为是前端框架肯定需要发送ajax请求，但是我们不推荐直接来操作dom而是通过jQuery来进行操作。不过如果我们只需要一个函数，但也需要把整个JQuery包导入，而我们又只用ajax.。鉴于此，官方推荐我们使用axios，这个就不需要了，用到就导入那个）</p><p><strong>3、ES6, babel</strong><br>Es6语法是将来的趋势，但是目前浏览器还都只是ES5，所以需要用babel将Es6转换为Es5。</p><h2 id="vue项目的目录结构"><a href="#vue项目的目录结构" class="headerlink" title="vue项目的目录结构"></a>vue项目的目录结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5fbdf75e77ee8663.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Mock数据（Mock.js生成随机数据,拦截Ajax 请求 ，前后端分离，让前端攻城师独立于后端进行开发：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">mock.js官网</a>）;node_modules这个就是我们利用node.js启动必备的文件；src则是一些资源包。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-514b00e332b667c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>api：我们请求网络的api，所有组件的api都是在这里进行配置的；<br>axios：我们在里面配置了全局拦截；<br>components：这个是一些基础组件；<br>router ：路由；<br>static：全局的静态文件；<br>store：一些Js文件；<br>style：一些css样式表单；<br>views：所有的组件；</p><p>接下来我们就看一下所有的组件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-771f78d9369f1260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>差不多就是这些：导航栏组件；轮播图组件；新品组件；分页组件；个人中心组件；结算组。。。如果想在浏览器里面快速知道页面是由哪些vue的组件构成的，可以下载安装官方的插件:<strong>vuejs devtools</strong>，具体安装方法在这里：<a href="https://www.cnblogs.com/alice-fee/p/8038367.html" target="_blank" rel="noopener">谷歌浏览器chrome的vuejs devtools 插件的安装</a>。</p><p>至此，我们本篇关于restful api以及Vue结构的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Axadmin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Axadmin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始介绍xadmin的后台管理系统以及项目资源的导入。</p><h2 id="新建adminx-py文件"><a href="#新建adminx-py文件" class="headerlink" title="新建adminx.py文件"></a>新建adminx.py文件</h2><p>在各个app下面新建adminx.py文件，我们开始进行配置。</p><h3 id="在goods下面的adminx-py代码内容"><a href="#在goods下面的adminx-py代码内容" class="headerlink" title="在goods下面的adminx.py代码内容"></a>在goods下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import Goods, GoodsCategory, GoodsImage, GoodsCategoryBrand, Banner, HotSearchWords</span><br><span class="line">from .models import IndexAd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsAdmin(object):</span><br><span class="line">    list_display = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                    &quot;shop_price&quot;, &quot;goods_brief&quot;, &quot;goods_desc&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;]</span><br><span class="line">    search_fields = [&apos;name&apos;, ]</span><br><span class="line">    list_editable = [&quot;is_hot&quot;, ]</span><br><span class="line">    list_filter = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                   &quot;shop_price&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;, &quot;category__name&quot;]</span><br><span class="line">    style_fields = &#123;&quot;goods_desc&quot;: &quot;ueditor&quot;&#125;</span><br><span class="line"></span><br><span class="line">    class GoodsImagesInline(object):</span><br><span class="line">        model = GoodsImage</span><br><span class="line">        exclude = [&quot;add_time&quot;]</span><br><span class="line">        extra = 1</span><br><span class="line">        style = &apos;tab&apos;</span><br><span class="line"></span><br><span class="line">    inlines = [GoodsImagesInline]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsCategoryAdmin(object):</span><br><span class="line">    list_display = [&quot;name&quot;, &quot;category_type&quot;, &quot;parent_category&quot;, &quot;add_time&quot;]</span><br><span class="line">    list_filter = [&quot;category_type&quot;, &quot;parent_category&quot;, &quot;name&quot;]</span><br><span class="line">    search_fields = [&apos;name&apos;, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsBrandAdmin(object):</span><br><span class="line">    list_display = [&quot;category&quot;, &quot;image&quot;, &quot;name&quot;, &quot;desc&quot;]</span><br><span class="line"></span><br><span class="line">    def get_context(self):</span><br><span class="line">        context = super(GoodsBrandAdmin, self).get_context()</span><br><span class="line">        if &apos;form&apos; in context:</span><br><span class="line">            context[&apos;form&apos;].fields[&apos;category&apos;].queryset = GoodsCategory.objects.filter(category_type=1)</span><br><span class="line">        return context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BannerGoodsAdmin(object):</span><br><span class="line">    list_display = [&quot;goods&quot;, &quot;image&quot;, &quot;index&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HotSearchAdmin(object):</span><br><span class="line">    list_display = [&quot;keywords&quot;, &quot;index&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class IndexAdAdmin(object):</span><br><span class="line">    list_display = [&quot;category&quot;, &quot;goods&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(Goods, GoodsAdmin)</span><br><span class="line">xadmin.site.register(GoodsCategory, GoodsCategoryAdmin)</span><br><span class="line">xadmin.site.register(Banner, BannerGoodsAdmin)</span><br><span class="line">xadmin.site.register(GoodsCategoryBrand, GoodsBrandAdmin)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(HotSearchWords, HotSearchAdmin)</span><br><span class="line">xadmin.site.register(IndexAd, IndexAdAdmin)</span><br></pre></td></tr></table></figure><h3 id="在trade下面的adminx-py代码内容"><a href="#在trade下面的adminx-py代码内容" class="headerlink" title="在trade下面的adminx.py代码内容"></a>在trade下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import ShoppingCart, OrderInfo, OrderGoods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShoppingCartAdmin(object):</span><br><span class="line">    list_display = [&quot;user&quot;, &quot;goods&quot;, &quot;nums&quot;, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class OrderInfoAdmin(object):</span><br><span class="line">    list_display = [&quot;user&quot;, &quot;order_sn&quot;,  &quot;trade_no&quot;, &quot;pay_status&quot;, &quot;post_script&quot;, &quot;order_mount&quot;,</span><br><span class="line">                    &quot;order_mount&quot;, &quot;pay_time&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line">    class OrderGoodsInline(object):</span><br><span class="line">        model = OrderGoods</span><br><span class="line">        exclude = [&apos;add_time&apos;, ]</span><br><span class="line">        extra = 1</span><br><span class="line">        style = &apos;tab&apos;</span><br><span class="line"></span><br><span class="line">    inlines = [OrderGoodsInline, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(ShoppingCart, ShoppingCartAdmin)</span><br><span class="line">xadmin.site.register(OrderInfo, OrderInfoAdmin)</span><br></pre></td></tr></table></figure><h3 id="在users下面的adminx-py代码内容"><a href="#在users下面的adminx-py代码内容" class="headerlink" title="在users下面的adminx.py代码内容"></a>在users下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from xadmin import views</span><br><span class="line">from .models import VerifyCode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BaseSetting(object):</span><br><span class="line">    enable_themes = True</span><br><span class="line">    use_bootswatch = True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &quot;慕海生鲜后台&quot;</span><br><span class="line">    site_footer = &quot;vueshop&quot;</span><br><span class="line">    # menu_style = &quot;accordion&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VerifyCodeAdmin(object):</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;mobile&apos;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(VerifyCode, VerifyCodeAdmin)</span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure><h3 id="在user-operation下面的adminx-py代码内容"><a href="#在user-operation下面的adminx-py代码内容" class="headerlink" title="在user_operation下面的adminx.py代码内容"></a>在user_operation下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import UserFav, UserLeavingMessage, UserAddress</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;goods&apos;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserLeavingMessageAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;message_type&apos;, &quot;message&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAddressAdmin(object):</span><br><span class="line">    list_display = [&quot;signer_name&quot;, &quot;signer_mobile&quot;, &quot;district&quot;, &quot;address&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserFav, UserFavAdmin)</span><br><span class="line">xadmin.site.register(UserAddress, UserAddressAdmin)</span><br><span class="line">xadmin.site.register(UserLeavingMessage, UserLeavingMessageAdmin)</span><br></pre></td></tr></table></figure><p>然后安装依赖库<code>xlwt</code>和<code>xlsxwriter</code>这两个库（用于后面数据的excel导出）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xlwt xlsxwriter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后运行我们的makemigrations和migrate，生成我们xadmin的一些数据表。</p><p>接下来创建超级管理员：<code>createsuperuser</code>然后输入用户名，邮箱，密码回车即可。</p><p>然后运行我们的项目，在浏览器地址栏中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/xadmin</span><br></pre></td></tr></table></figure></p><p>用刚才的账号和密码进行登录，登录成功就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-064a36d313f60a6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后你可以对其进行汉化和自定义配置，可以参考这些文章：<br><a href="https://www.jianshu.com/p/f92c7d5897aa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</a>和<a href="https://www.jianshu.com/p/586aea424287" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置</a>以及<a href="https://www.jianshu.com/p/b0a9a82adb5f" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发</a>这三篇文章。</p><p>记得配置富文本的路径，打开vueshop\urls.py文件，我们新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include</span><br><span class="line"></span><br><span class="line">path(&apos;ueditor/&apos;, include(&apos;DjangoUeditor.urls&apos;)),</span><br></pre></td></tr></table></figure></p><p>最后我的配置截图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efa679a18cb7995a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="资源的导入"><a href="#资源的导入" class="headerlink" title="资源的导入"></a>资源的导入</h2><p>在media下面新建三个文件夹：banner，goods，message，分别与下图中的path对应：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2529bb9c4e277fd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>只需新建banner文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-772aed2fe73c9b2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建brands文件夹，再在里面新建images文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2db954d0cac201a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建goods文件夹，再在里面新建images文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9be84396fe2bbb58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建message文件夹，再在里面新建images文件夹。</p><p>有人要问建这么多文件夹干嘛，其实我们这是模拟了后台数据库的添加数据操作，如果你觉得太累了，可以不这么干，直接在后台添加数据，实际上比我们这还累。。。</p><p>接着在db_tools文件夹下面新建一个data的文件夹，在里面导入2个文件：<code>category_data.py</code>和<code>product_data.py</code>。然后直接在db_tools文件夹下面新建两个文件夹：<code>import_category_data.py</code>和<code>import_goods_data.py</code>。</p><p>接下来我们给<code>import_category_data.py</code>文件写入代码(独立使用django的model)，其作用就是把数据直接保存到数据库里面。然后给’import_goods_data.py’文件写入代码(独立使用django的model)其作用也是把数据直接保存到数据库里面。<strong>由于版权问题，这里就不贴出代码了</strong>。</p><p>运行完发现缺少图片上传地址：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eb9250ccfd28712a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以我们需要在settings.py里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置上传文件，图片访问路径</span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</span><br></pre></td></tr></table></figure></p><p>还没完，我们需要进行url的配置，打开vueshop\urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.views.static import serve</span><br><span class="line">from django.urls import re_path</span><br><span class="line">from vueshop.settings import MEDIA_ROOT</span><br><span class="line"></span><br><span class="line"># 配置文件上传的访问处理url</span><br><span class="line">   re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的项目，发现图片已经成功显示了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-dbf10b0216770394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此我们本篇关于xadmin的后台管理系统以及项目资源导入的相关介绍就到此为止了，感谢你的赏阅！下一篇我们开始介绍restful api 相关的知识。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（四）：数据库字段的定义(下)</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于user应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。<strong>因为我们这个项目是前后端分离的，所以一些数据库字段的名称请不要随意修改，否则就会出现运行错误！</strong></p><h2 id="goods-app的配置"><a href="#goods-app的配置" class="headerlink" title="goods app的配置"></a>goods app的配置</h2><p>前面说过全部商品分类里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-98927403f686963c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在教育网站中，我们的从属关系是通过外键来完成的。如果按照那样的思维，我们这里因为有三个相关的表，是否意味我们必须要建三个model，然后每个model之间利用从属的外键关系串起来，而且我们这样我们的目录就是写死的，只能是三级目录，但是我们如果要去做一个四级，五级，甚至无限级别的分类即可扩展目录时，这工作量是不是太大了呢？而且几乎是不可能完成的任务，我们考虑有没有其他方法呢？答案是有的。我们可以使用一张数据表来完成这样的任务，就是根据级别进行前台显示。</p><p>打开我们的goods/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class GoodsCategory(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品级别分类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    CATEGORY_TYPE = (</span><br><span class="line">        (1, &quot;一级类目&quot;),</span><br><span class="line">        (2, &quot;二级类目&quot;),</span><br><span class="line">        (3, &quot;三级类目&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别名&quot;, help_text=&quot;类别名&quot;)</span><br><span class="line">    code = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别code&quot;, help_text=&quot;类别code&quot;)</span><br><span class="line">    desc = models.TextField(default=&quot;&quot;, verbose_name=&quot;类别描述&quot;, help_text=&quot;类别描述&quot;)</span><br><span class="line">    category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=&quot;类目级别&quot;, help_text=&quot;类目级别&quot;)     # 设置目录树的级别</span><br><span class="line">    parent_category = models.ForeignKey(&quot;self&quot;, null=True, blank=True, verbose_name=&quot;父类目级别&quot;, help_text=&quot;父目录&quot;,</span><br><span class="line">                                        related_name=&quot;sub_cat&quot;)</span><br><span class="line">    is_tab = models.BooleanField(default=False, verbose_name=&quot;是否导航&quot;, help_text=&quot;是否导航&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;商品类别&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p><strong>注意一下：</strong> help_text: 在后面生成接口测试文档时会用到，而related_name: 进行查询的时候会用到，这里那个self参数就是自己跟自己进行外键关联，因为目录有的时候就是这样。</p><p>不知道你注意没有，在上面一行的导航栏在左侧都会有一个比较醒目的图片，这里展示了它的部分品牌商标：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b44e6f558506c121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里我们需要重新定义一个数据表，用于存放这个，接着刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class GoodsCategoryBrand(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    导航栏左侧品牌图片</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=&apos;brands&apos;, null=True, blank=True, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;品牌名&quot;, help_text=&quot;品牌名&quot;)</span><br><span class="line">    desc = models.TextField(max_length=200, default=&quot;&quot;, verbose_name=&quot;品牌描述&quot;, help_text=&quot;品牌描述&quot;)</span><br><span class="line">    image = models.ImageField(max_length=200, upload_to=&quot;brands/images&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;品牌信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        db_table = &quot;goods_goodsbrand&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>然后就是商品信息了，不过在此之前，我们需要把在线教育网站用到的<strong>DjangoUeditor</strong>和<strong>xadmin</strong>拷贝进我们的extra_app里面，然后还要把这些都注册到我们的setting里面去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">    &apos;goods&apos;,</span><br><span class="line">    &apos;trade&apos;,</span><br><span class="line">    &apos;user_operation&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>现在开始书写商品的信息代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from extra_apps.DjangoUeditor.models import UEditorField</span><br><span class="line"></span><br><span class="line">class Goods(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    goods_sn = models.CharField(max_length=50, default=&quot;&quot;, verbose_name=&quot;商品唯一编号&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;商品名&quot;)</span><br><span class="line">    click_num = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;)</span><br><span class="line">    sold_num = models.IntegerField(default=0, verbose_name=&quot;商品销售量&quot;)</span><br><span class="line">    fav_num = models.IntegerField(default=0, verbose_name=&quot;收藏数&quot;)</span><br><span class="line">    goods_num = models.IntegerField(default=0, verbose_name=&quot;库存数&quot;)</span><br><span class="line">    market_price = models.FloatField(default=0, verbose_name=&quot;市场价格&quot;)</span><br><span class="line">    shop_price = models.FloatField(default=0, verbose_name=&quot;本店价格&quot;)</span><br><span class="line">    goods_brief = models.TextField(max_length=500, verbose_name=&quot;商品简短描述&quot;)</span><br><span class="line">    goods_desc = UEditorField(verbose_name=&quot;内容&quot;, imagePath=&quot;goods/images/&quot;, width=1000, height=300,</span><br><span class="line">                              filePath=&quot;goods/files/&quot;, default=&apos;&apos;)</span><br><span class="line">    ship_free = models.BooleanField(default=True, verbose_name=&quot;是否承担运费&quot;)</span><br><span class="line">    goods_front_image = models.ImageField(upload_to=&quot;goods/images/&quot;, null=True, blank=True, verbose_name=&quot;封面图&quot;)</span><br><span class="line">    is_new = models.BooleanField(default=False, verbose_name=&quot;是否新品&quot;)</span><br><span class="line">    is_hot = models.BooleanField(default=False, verbose_name=&quot;是否热销&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;商品信息&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>前面也说过商品详情那块有轮播图，这个我们可以直接在商品信息这个表里面添加一个字段，当然也可以另建一个专门的表，后面这种似乎管理起来更加的方便。所以我们继续书写代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class GoodsImage(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品详情页面轮播图</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, related_name=&quot;images&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&quot;&quot;, verbose_name=&quot;图片&quot;, null=True, blank=True)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;商品轮播图&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><p>在首页我们看见也有一些轮播图，而这些轮播图是大图，和在商品详情页看到的不一样，所以我们需要单独创建一张表，用于管理它。继续刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Banner(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品首页轮播图（大图）</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&apos;banner&apos;, verbose_name=&quot;轮播图片&quot;)</span><br><span class="line">    index = models.IntegerField(default=0, verbose_name=&quot;轮播顺序&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;首页轮播图&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><p>不知道你注意没有，在搜索栏的下面有一行提示语（热搜榜），这个我们也要单独进行管理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class HotSearchWords(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    搜索框下面的热搜榜</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    keywords = models.CharField(default=&quot;&quot;, max_length=20, verbose_name=&quot;热搜词&quot;)</span><br><span class="line">    index = models.IntegerField(default=0, verbose_name=&quot;排序&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;热搜词&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.keywords</span><br></pre></td></tr></table></figure></p><p>还有首页一个商品类别广告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class IndexAd(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   首页商品类别广告</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, on_delete=models.CASCADE, related_name=&apos;category&apos;, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, on_delete=models.CASCADE, related_name=&apos;goods&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;首页商品类别广告&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><h2 id="trade-app的配置"><a href="#trade-app的配置" class="headerlink" title="trade app的配置"></a>trade app的配置</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8884c4ea499deec6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在进行配置之前要说明几点：<strong>1、在一个订单里面，同一条商品信息，不会出现多条记录，而是以数量来进行统计。（图上的信息就是错误的，我说了，如果是在不同的订单里面却是可以的）；2、一旦购物车点击结算就会清空购物车，会以订单详情来展示商品信息。</strong>你在淘宝或者其他电商平台进行购物的时候，其实这些你就无意中知道了，但是从来没有说出来，现在看到这里是不是觉得就是这样的呢。</p><p>现在我们开始进行购物车这个数据表的配置，打开trade/models.py文件，我们知道这个表肯定会与我们User表有关联（不要问我为什么，因为东西是不可能自己飞到购物车里面去的），我们在教育网站里面是采用这样来进行User信息的导入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from users.models import UserProfile</span><br><span class="line"></span><br><span class="line">User = UserProfile()</span><br></pre></td></tr></table></figure></p><p>这样做的前提是你已经知道这个UserProfile放那个位置了，假如别人不知道呢，那该怎么办，这时候我们就要查看源码了。还记得我们之前在settings.py里面在INSTALLED_APPS的下面新增的一行代码么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL = &apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><p>这才是我们这个UserProfile的注册位置，我们真正调用的目录在这里。那么如何调用呢？使用下面的命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br></pre></td></tr></table></figure></p><p>我们把光标放在get_user_model，按住Ctrl然后点击鼠标左键，直接进入get_user_model的源代码函数，我们发现其实这个函数才是直接调用了这个<code>AUTH_USER_MODEL</code>.<br><img src="https://upload-images.jianshu.io/upload_images/8964398-930c2329b4c1c129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>开始写我们购物车的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">User = get_user_model()</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShoppingCart(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    购物车</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    nums = models.IntegerField(default=0, verbose_name=&quot;购买数量&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;购物车&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (&quot;user&quot;, &quot;goods&quot;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;%s(%d)&quot;.format(self.goods.name, self.nums)</span><br></pre></td></tr></table></figure></p><p>接下来是订单的创建，我们知道订单有不同的状态，像创建交易，成功，待支付等，所以需要有选择的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class OrderInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    ORDER_STATUS = (</span><br><span class="line">        (&quot;TRADE_SUCCESS&quot;, &quot;成功&quot;),</span><br><span class="line">        (&quot;TRADE_CLOSED&quot;, &quot;超时关闭&quot;),</span><br><span class="line">        (&quot;WAIT_BUYER_PAY&quot;, &quot;交易创建&quot;),</span><br><span class="line">        (&quot;TRADE_FINISHED&quot;, &quot;交易结束&quot;),</span><br><span class="line">        (&quot;paying&quot;, &quot;待支付&quot;),</span><br><span class="line">    )</span><br><span class="line">    PAY_TYPE = (</span><br><span class="line">        (&quot;alipay&quot;, &quot;支付宝&quot;),</span><br><span class="line">        (&quot;wechat&quot;, &quot;微信&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    order_sn = models.CharField(max_length=30, null=True, blank=True, unique=True, verbose_name=&quot;订单号&quot;)   # 订单号唯一</span><br><span class="line">    nonce_str = models.CharField(max_length=50, null=True, blank=True, unique=True, verbose_name=&quot;随机加密串&quot;)   # 微信支付可能会用到</span><br><span class="line">    trade_no = models.CharField(max_length=100, unique=True, null=True, blank=True, verbose_name=&quot;交易号&quot;)   # 交易号也是唯一的，用于支付宝与本系统进行关联</span><br><span class="line">    pay_status = models.CharField(choices=ORDER_STATUS, default=&quot;paying&quot;, max_length=30, verbose_name=&quot;订单状态&quot;)</span><br><span class="line">    pay_type = models.CharField(choices=PAY_TYPE, default=&quot;alipay&quot;, max_length=10, verbose_name=&quot;支付类型&quot;)</span><br><span class="line">    post_script = models.CharField(max_length=200, verbose_name=&quot;订单留言&quot;)</span><br><span class="line">    order_mount = models.FloatField(default=0.0, verbose_name=&quot;订单金额&quot;)</span><br><span class="line">    pay_time = models.DateTimeField(null=True, blank=True, verbose_name=&quot;支付时间&quot;)</span><br><span class="line"></span><br><span class="line">    # 订单上面用户的基本信息</span><br><span class="line">    address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;收货地址&quot;)</span><br><span class="line">    signer_name = models.CharField(max_length=20, default=&quot;&quot;, verbose_name=&quot;签收人&quot;)</span><br><span class="line">    singer_mobile = models.CharField(max_length=11, verbose_name=&quot;联系电话&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;订单信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.order_sn)</span><br></pre></td></tr></table></figure></p><p>接下来就是为订单里面的商品单独创建一个数据表了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class OrderGoods(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单的商品详情</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    order = models.ForeignKey(OrderInfo, verbose_name=&quot;订单信息&quot;, related_name=&quot;goods&quot;)    # 一个订单里面可以有多个商品信息</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    goods_num = models.IntegerField(default=0, verbose_name=&quot;商品数量&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;订单内的商品&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.order.order_sn)</span><br></pre></td></tr></table></figure></p><h3 id="user-operation-app的配置"><a href="#user-operation-app的配置" class="headerlink" title="user_operation app的配置"></a>user_operation app的配置</h3><p>现在我们进行用户操作这个app的配置，具体包括：商品收藏，添加收货信息，用户留言等。打开user_operation\modles.py文件，我们新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"># Create your models here.</span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFav(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户收藏</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, help_text=&quot;商品id&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户收藏&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (&quot;user&quot;, &quot;goods&quot;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.user.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserLeavingMessage(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户留言</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    MESSAGE_CHOICES = (</span><br><span class="line">        (1, &quot;留言&quot;),</span><br><span class="line">        (2, &quot;投诉&quot;),</span><br><span class="line">        (3, &quot;询问&quot;),</span><br><span class="line">        (4, &quot;售后&quot;),</span><br><span class="line">        (5, &quot;求购&quot;)</span><br><span class="line">    )</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    message_type = models.IntegerField(default=1, choices=MESSAGE_CHOICES, verbose_name=&quot;留言类型&quot;,</span><br><span class="line">                                      help_text=&quot;留言类型: 1(留言),2(投诉),3(询问),4(售后),5(求购)&quot;)    # 这里不要新建一个为type的字段，这是Python内置的函数</span><br><span class="line">    subject = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;主题&quot;)</span><br><span class="line">    message = models.TextField(default=&quot;&quot;, verbose_name=&quot;留言内容&quot;, help_text=&quot;留言内容&quot;)</span><br><span class="line">    file = models.FileField(upload_to=&quot;message/images/&quot;, verbose_name=&quot;上传的文件&quot;, help_text=&quot;上传的文件&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户留言&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.subject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAddress(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户收货地址</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    province = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;省份&quot;)</span><br><span class="line">    city = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;城市&quot;)</span><br><span class="line">    district = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;区域&quot;)</span><br><span class="line">    address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;详细地址&quot;)</span><br><span class="line">    signer_name = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;签收人&quot;)</span><br><span class="line">    signer_mobile = models.CharField(max_length=11, default=&quot;&quot;, verbose_name=&quot;电话&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;收货地址&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.address</span><br></pre></td></tr></table></figure></p><p>这样到目前为止，我们的models都设计完了，没有考虑到的我们将在后续的开发中进行添加。接下来我们说一下migrations原理及表的生成。</p><h2 id="migrations原理及表的生成"><a href="#migrations原理及表的生成" class="headerlink" title="migrations原理及表的生成"></a>migrations原理及表的生成</h2><p>在这之前，请确保我们把app都添加到了setting.py里面，注意名字不要写错了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-26eab3e72af7ceb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们运行run manage.py Task出现了下面的错误：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-16115a394adbb57b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们的users app注册了两个，所以说不唯一：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-109189113e8ea0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们按照Django自带的那种方式修改我们的app的引入方式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-adbe360d082307b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>实际上每个项目都有这个，我们修改settings.py的引入方式如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;goods.apps.GoodsConfig&apos;,</span><br><span class="line">    &apos;trade.apps.TradeConfig&apos;,</span><br><span class="line">    &apos;user_operation.apps.UserOperationConfig&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>接着我们再来运行我们的run manage.py Task，发现出现了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> from future.utils import iteritems</span><br><span class="line">ModuleNotFoundError: No module named &apos;future&apos;</span><br></pre></td></tr></table></figure></p><p>说明我们缺少future这个库，我们使用下面的命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install future -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后再来运行我们的run manage.py Task，发现又出现了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> related_name=&quot;sub_cat&quot;)</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos;</span><br></pre></td></tr></table></figure></p><p>相信看过前面那个教育网站的童鞋都知道，这个问题出现的原因：缺少级联删除on_delete。<code>on_delete=models.CASCADE</code>是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示） 具体可以阅读这篇文章：<a href="https://www.jianshu.com/p/bfc17faf1ace" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)</a>。<br>就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=&quot;用户&quot;)</span><br></pre></td></tr></table></figure></p><p>在所有ForeignKey的4个app里面，都添加<code>on_delete=models.CASCADE</code>这个字段。有点多，大家需要慢慢添加，也有简单的方法，开启全局搜索，然后替换也可以。</p><p>接着再来运行我们的run manage.py Task，发现又出现了这样的错误（真是命途多舛。。。）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from crispy_forms.utils import TEMPLATE_PACK</span><br><span class="line">ModuleNotFoundError: No module named &apos;crispy_forms&apos;</span><br></pre></td></tr></table></figure></p><p>又是缺少这个包，我们安装一下，不知道你想起来没，在教育网站我们也遇到过类似的问题，你可以阅读一下：<a href="https://www.jianshu.com/p/f92c7d5897aa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</a><br>解决办法如下：打开settings.py文件，找到里面的INSTALLED_APPS，在后面修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;goods.apps.GoodsConfig&apos;,</span><br><span class="line">    &apos;trade.apps.TradeConfig&apos;,</span><br><span class="line">    &apos;user_operation.apps.UserOperationConfig&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">    &apos;crispy_forms&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后依次按照如下库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br><span class="line">pip install django-formtools==2.1   # 记住一定是2.1的版本，否则会出错</span><br></pre></td></tr></table></figure><p>使用的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>之后会安装一大堆库，我们使用<strong>pip list</strong>命令查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs\vueshop&gt;pip list</span><br><span class="line">Package              Version</span><br><span class="line">-------------------- --------</span><br><span class="line">diff-match-patch     20121119</span><br><span class="line">Django               2.0.1</span><br><span class="line">django-crispy-forms  1.7.2</span><br><span class="line">django-filter        2.0.0</span><br><span class="line">django-formtools     2.1</span><br><span class="line">django-import-export 1.1.0</span><br><span class="line">djangorestframework  3.8.2</span><br><span class="line">et-xmlfile           1.0.1</span><br><span class="line">future               0.16.0</span><br><span class="line">httplib2             0.11.3</span><br><span class="line">jdcal                1.4</span><br><span class="line">Markdown             3.0.1</span><br><span class="line">mysqlclient          1.3.13</span><br><span class="line">odfpy                1.3.6</span><br><span class="line">openpyxl             2.5.8</span><br><span class="line">Pillow               5.3.0</span><br><span class="line">pip                  18.0</span><br><span class="line">pytz                 2018.5</span><br><span class="line">PyYAML               3.13</span><br><span class="line">setuptools           40.4.3</span><br><span class="line">six                  1.11.0</span><br><span class="line">tablib               0.12.1</span><br><span class="line">unicodecsv           0.14.1</span><br><span class="line">wheel                0.32.0</span><br><span class="line">xlrd                 1.1.0</span><br><span class="line">xlwt                 1.3.0</span><br></pre></td></tr></table></figure></p><p>我上面贴了我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）。</p><p>然后再来运行我们的run manage.py Task，发现又出现了这样的错误（是不是很绝望，哈哈哈哈~~~）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;INSTALLED_APPS.&quot; % (module, name)</span><br><span class="line">RuntimeError: Model class django.contrib.admin.models.LogEntry doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS.</span><br></pre></td></tr></table></figure></p><p>看了上面那篇文章，你是不是发现缺少admin了，对因为我们开头没有启用admin，如果你开头启用了就没有这个错误,你只需要在INSTALLED_APPS 里面添加admin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>接着再来运行我们的run manage.py Task，发现终于运行正常，没有错误了。我们不妨在这里把xadmin给导入进来吧，反正后面会用到。打开vueshop/urls.py文件，把urls中默认的admin修改为xadmin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后进行我们数据库的生成和迁移操作，运行：makemigrations和migrate命令。</p><h3 id="makemigrations和migrate介绍"><a href="#makemigrations和migrate介绍" class="headerlink" title="makemigrations和migrate介绍"></a>makemigrations和migrate介绍</h3><p>我们知道数据库的生成和迁移操作有两个命令：<code>makemigrations</code>和<code>migrate</code>。其中<code>makemigrations</code>的作用是生成数据库变动的Py脚本，也就是Python文件，会自动存放在各个app下面默认生成的<code>migrations</code>文件夹里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-780978b5565c1a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们随意打开一个app下面生成的Py脚本，看到里面其实是后面<code>migrate</code>命令将要执行的代码，我们运行<code>migrate appname</code>其实就是在对应的app 下面的migrations文件夹下面查找上面的py脚本，然后运行它，从而达到新建数据表的目的。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-51a004aaf0121581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不信的话，你现在在manage.py Task下面运行<code>migrate</code>，然后发现这个和我们刚才分析的一模一样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a2dcbcec2240084e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有的migrations操作都会被记录到<code>django_migrations</code>这个表里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b16529934918697c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不过这里面有几个坑：<br>1、我们一旦数据库有变动就要使用上述两个命令，否则就会出错；2、我们修改数据库字段不要直接在Navicat里面修改，我们需要通过修改源代码，然后重新运行上述两个命令即可；3、每次数据库的变动都会有记录在<code>django_migrations</code>这个表里面进行追加，运行上述两个命令系统会默认运行这个表里面更新的代码。</p><p>至此我们关于数据库字段的设计的介绍就到此为止了，感谢你的赏阅，下一篇我们将介绍xadmin的后台管理配置。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（三）：数据库字段的定义(上)</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们来学习如何安装各种依赖库以及数据库字段的设计，其中数据库字段的定义我们分两篇进行。</p><h2 id="新建虚拟环境"><a href="#新建虚拟环境" class="headerlink" title="新建虚拟环境"></a>新建虚拟环境</h2><p>关于虚拟环境的搭建，前面已经讲得很清楚，这里就直接开始安装了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv vueshop</span><br></pre></td></tr></table></figure></p><p>这样就在<code>F:Envs</code>下面新建了一个名为vueshop的虚拟环境，而且是Python3.6的版本。然后使用<code>pip list</code>查看一下当前的安装列表，如果出现pip的版本是9.x，我们建议你升级一下pip的版本。可以使用<code>pip install --upgrade pip</code>，如果安装不了建议把pip下载到本地，然后进入你的pip里面，执行<code>python setup.py install</code>命令即可。然后再次运行pip list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) C:\Users\lenovo&gt;pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        18.0</span><br><span class="line">setuptools 39.0.1</span><br><span class="line">wheel      0.30.0</span><br><span class="line"></span><br><span class="line">(vueshop) C:\Users\lenovo&gt;</span><br></pre></td></tr></table></figure></p><h3 id="安装django-和-django-rest-framework"><a href="#安装django-和-django-rest-framework" class="headerlink" title="安装django 和 django rest framework"></a>安装django 和 django rest framework</h3><p>点击这里查看<a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">django rest framework官网</a>，我们看到已经支持Django2.0了，所以我们就安装2.0的版本：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d70081c3c064d36d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>使用下面的命令安装djangorestframework:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure></p><p>如果在安装过程中出现这种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrying (Retry(total=4, connect=None, read=None, redirect=None)) </span><br><span class="line">after connection broken</span><br><span class="line">by &apos;ConnectTimeoutError(&lt;pip._vendor.requests.packages.urllib3.connection.</span><br><span class="line">VerifiedHTTPSConnection object at 0x10b058850&gt;, </span><br><span class="line">&apos;Connection to pypi.python.org timed out. (connect timeout=15)&apos;)&apos;:</span><br></pre></td></tr></table></figure></p><p>说明你采用了默认的pypi源(国外的pypi源)，这个很容易出现这种连接超时的问题，所以应当采用国内的镜像源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework -i http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure></p><p>如果还有问题，请阅读我的另一篇文章《使用默认pypi源出现连接超时的解决办法》一文，寻求解决的办法。</p><p>然后使用<code>pip list</code>查看，发现里面没有Django,我们需要自己安装Django，注意要指定Django的版本，因为博主在写这套教程的时候，Django2.1已经发布了，你不指定Django的版本就默认安装了最新版的Django2.1，而djangorestframework目前暂不支持Django2.1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs&gt;pip list</span><br><span class="line">Package             Version</span><br><span class="line">------------------- -------</span><br><span class="line">djangorestframework 3.8.2</span><br><span class="line">pip                 18.0</span><br><span class="line">setuptools          40.4.3</span><br><span class="line">wheel               0.32.0</span><br><span class="line"></span><br><span class="line">(vueshop) F:\Envs&gt;</span><br></pre></td></tr></table></figure></p><p>我们使用下面的命令进行安装Django2.0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0.1 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后安装markdown，django-filter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown       # Markdown support for the browsable API.</span><br><span class="line">pip install django-filter  # Filtering support</span><br></pre></td></tr></table></figure></p><p>如果安装不了，请使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line"></span><br><span class="line">pip install django-filter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后查看list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs&gt;pip list</span><br><span class="line">Package             Version</span><br><span class="line">------------------- -------</span><br><span class="line">Django              2.0.1</span><br><span class="line">django-filter       2.0.0</span><br><span class="line">djangorestframework 3.8.2</span><br><span class="line">Markdown            3.0.1</span><br><span class="line">pip                 18.0</span><br><span class="line">pytz                2018.5</span><br><span class="line">setuptools          40.4.3</span><br><span class="line">wheel               0.32.0</span><br></pre></td></tr></table></figure></p><p>好了，现在我们开始新建Django项目了，记得在用Pycharm新建Django项目的时候，必须要在之前安装Django，否则就新建不了Django项目。</p><h2 id="新建Django项目"><a href="#新建Django项目" class="headerlink" title="新建Django项目"></a>新建Django项目</h2><h3 id="已有虚拟环境"><a href="#已有虚拟环境" class="headerlink" title="已有虚拟环境"></a>已有虚拟环境</h3><p>因为我们之前已经在<code>F:Envs</code>下面创建了一个名为vueshop的虚拟环境，所以这里就选用<code>Existing interpreter</code>即可，不要选用上面那个<strong>New environment</strong>。那个2是项目的存放路径，那个<strong>interpreter</strong>也就是3，用虚拟环境下面的Scripts\python.exe。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9842030d1626ec60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="没有虚拟环境"><a href="#没有虚拟环境" class="headerlink" title="没有虚拟环境"></a>没有虚拟环境</h3><p>在你没有创建自己的虚拟环境的时候，你才使用上面的那个<code>New environment</code>，也要说明一下，那个2是项目的存放路径，3是你利用Pycharm新建的虚拟环境的路径，4则是你使用哪个Python来创建你的虚拟环境（就是说你在这个虚拟环境里面的Python版本将会和这个一模一样，其实就是安装了指定Python版本的虚拟环境而已。）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1399888fc8766697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这两种情况，小白很容易搞混淆，所以需要特别注意。点击确定，就成了这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-49bed352d52dc521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关于上面Django项目的介绍我这里不说了，大家去阅读我的另外一个专题：<strong>《零基础使用Django2.0.1打造在线教育网站》</strong>，下面就是你的虚拟环境。我们后面会查看源码，所以虚拟环境里面的包比较重要：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3aa02165e1ad4e36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的项目，发现没有问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9f3b752f5b4ececc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>我们不使用默认的sqlite数据库，采用MySQL数据库，打开settings.py文件，找到第77行代码：将：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;vueshop&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;xxxx&apos;,  # 密码可以随意设置，我使用xxxx</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下这里的storage_engine必须是InnoDB。尽管mysql的数据库引擎有InnoDB 和Myisam这两种，但是后面用到的第三方登录，它所支持的库只支持innodb ，否则在使用migration时，会出错。关于这两种数据库引擎，大家可以看这篇文章：<a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="noopener">MySQL存储引擎－－MyISAM与InnoDB区别</a>。</p><h3 id="新建数据库vueshop"><a href="#新建数据库vueshop" class="headerlink" title="新建数据库vueshop"></a>新建数据库vueshop</h3><p>打开Navicat，新建数据库vueshop:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-da4f4885247e7cdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="安装-mysqlclient和配置seeting文件"><a href="#安装-mysqlclient和配置seeting文件" class="headerlink" title="安装 mysqlclient和配置seeting文件"></a>安装 mysqlclient和配置seeting文件</h3><p>点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</span><br><span class="line">Did you install mysqlclient?</span><br></pre></td></tr></table></figure></p><p>上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。</p><p>你可以在Pycharm里面进行安装，但这种很容易出错。最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">mysql-python</a>，点击这个网站，然后按住<code>Ctrl+F</code>键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5feb1fccdd1cf004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！<br>然后把mysqlclient放在我们的虚拟环境下面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-589b580e1d9e8ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在虚拟环境中安装mysqlclient，如图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs\vueshop&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Processing f:\envs\vueshop\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Installing collected packages: mysqlclient</span><br><span class="line">Successfully installed mysqlclient-1.3.13</span><br><span class="line"></span><br><span class="line">(vueshop) F:\Envs\vueshop&gt;</span><br></pre></td></tr></table></figure></p><p>注意需要进入到vueshop这个目录下进行安装，安装的命令是：<code>pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</code>（后面的是你刚才下载的版本名称，带whl）。</p><p>接下来我们再次运行项目，发现出了一个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> super(Connection, self).__init__(*args, **kwargs2)</span><br><span class="line">django.db.utils.OperationalError: (1193, &quot;Unknown system variable &apos;storage_engine&apos;&quot;)</span><br></pre></td></tr></table></figure></p><p>看样子是我们的数据库引擎变量名配置出了问题，我们修改一下，把：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;,</span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET default_storage_engine=INNODB;&apos;&#125;,</span><br></pre></td></tr></table></figure></p><p>再次运行，发现正常了。</p><p>接下来安装用于图片处理的库：<code>pillow</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><h3 id="新建包和文件夹"><a href="#新建包和文件夹" class="headerlink" title="新建包和文件夹"></a>新建包和文件夹</h3><p>新建两个python package，分别命名为apps和extra_apps。然后新建两个directory,分别命名为media和db_tools。注意一下包和文件夹的区别，包可以折叠，里面含有–init–.py文件，而文件夹不可以折叠，里面啥也没有。最后将两个python package:apps和extra_apps给Mark为source root。（前面教育网站有介绍操作）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88771b8df7cfb1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。在settings.py文件里面，我们新增路径代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.path.insert(0, BASE_DIR)</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;extra_apps&apos;))</span><br></pre></td></tr></table></figure></p><p>然后运行发现没有问题，接下来进行数据库字段的定义。</p><h2 id="数据库字段的定义"><a href="#数据库字段的定义" class="headerlink" title="数据库字段的定义"></a>数据库字段的定义</h2><p>首先进行需求分析从而设计数据字段，我们发现里面有一个导航栏，左边是商品全部信息，后面则是商品的部分信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b5ae9e3ea149c7d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那个全部商品分类，里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏。右边上面则是搜索框，网站主体部分则是商品的缩略图，最底下是排序和分页。<br>进入商品详情页，就能看到商品的详细信息，商品轮播图，原价，促销价格，以及富文本显示的信息。最右边则是热卖商品的信息，这个非常详细，可以看到详情信息。</p><p>现在就是数据库字段的设计了，我们采用归类的思想，肯定有一个商品信息，一个交易信息，一个用户信息，以及一个用于记录用户操作的信息。（教育网站里面有说过，避免引用的死循环）不过这种没有一个明确的分类，一般是根据程序员自己的经验来划分的。</p><p>所以我们的app一共有4个，用于分别实现不同的功能，具体如下：</p><blockquote><p>(user)用户版块：负责记录用户的个人信息相关的内容,</p></blockquote><blockquote><p>(goods)商品版块：用于记录商品信息相关的内容,</p></blockquote><blockquote><p>(trade)交易板块：用于记录交易相关的内容,</p></blockquote><blockquote><p>(user_operation)用户操作板块：用于记录用户操作的相关的内容。</p></blockquote><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中依次输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">startapp user</span><br><span class="line">startapp goods</span><br><span class="line">startapp trade</span><br><span class="line">startapp user_operation</span><br></pre></td></tr></table></figure></p><p>然后拖到app这个包里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9a637b993764fee6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了，现在开始进行各个app的models.py的配置了。记住一般都是先进行用户（user）这个app的配置。</p><h3 id="user-app的配置"><a href="#user-app的配置" class="headerlink" title="user app的配置"></a>user app的配置</h3><p>在前面的一篇文章里面：<a href="https://www.jianshu.com/p/460724e1c668" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)</a>，说过user自带的用户表是无法满足我们的需求，我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。</p><p>打开我们的user/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    name = models.CharField(max_length=30, null=True, blank=True, verbose_name=&quot;姓名&quot;)</span><br><span class="line">    birthday = models.DateField(verbose_name=&apos;生日&apos;, null=True, blank=True)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;)</span><br><span class="line">    gender = models.CharField(max_length=6, choices=((&apos;male&apos;, &apos;男&apos;), (&apos;female&apos;, &apos;女&apos;)), default=&apos;female&apos;, verbose_name=&apos;性别&apos;)</span><br><span class="line">    email = models.CharField(max_length=100, null=True, blank=True, verbose_name=&quot;邮箱&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VerifyCode(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    短信验证码</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;短信验证码&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.code</span><br></pre></td></tr></table></figure></p><p>记住：CharField必须有max_length！！！<br>这里还没完，就是我们这里定义的<code>UserProfile</code>其实并没有覆盖掉原本的<code>User</code>表，所以我们需要重载AUTH_USER_MODEL，打开settings.py,在<strong>INSTALLED_APPS</strong>的下面我们新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL = &apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><h3 id="注意一下"><a href="#注意一下" class="headerlink" title="注意一下"></a>注意一下</h3><p>我们不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错。</p><p>至此我们完成了第一个app的配置及其自定义字段的设计！</p><p>至此，本篇关于如何安装各种依赖库以及部分数据库字段的设计的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（二）：环境搭建</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。<strong>注意我们是在windows的开发环境下进行开发。</strong>网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python，vue，在前面的笔记中我都有介绍过前4个的安装，但是考虑到小白，所以我就直接复制过来，只是对部分内容进行修改（pycharm升级版）。</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="Pycharm的安装"><a href="#Pycharm的安装" class="headerlink" title="Pycharm的安装"></a>Pycharm的安装</h3><p>之前那几个专题用的Pycharm版本是2017，现在我在微信公众号里重新介绍了如何破解安装最新版的pycharm2018,这里放个链接：搜索微信公众号:  啃饼思录，或者扫描上面关于博主介绍里面的二维码即可获取。当然这里我也会把里面的破解地址粘贴过来的：<a href="https://mp.weixin.qq.com/s/z-WoBxzasQGAqC5hqempnQ" target="_blank" rel="noopener">手把手教你破解Pycharm2018.2（JetBrains全家桶）</a>。</p><p>当然如果你还是比较喜欢Pycharm2017,那你可以点击这里进行安装：<a href="https://www.jianshu.com/p/6b007bc61f5c" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</a></p><h3 id="Mysql的安装"><a href="#Mysql的安装" class="headerlink" title="Mysql的安装"></a>Mysql的安装</h3><p><strong>1、下载压缩包</strong><br><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载地址</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5ca6a4d9a1aba8e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、解压到文件夹目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2f4b7ff1541738c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>3、新建txt文件内容如下：</strong><br><strong>设置mysql客户端默认字符集</strong></p><p>default-character-set=utf8</p><p><strong>设置3306端口</strong></p><p>port = 3306</p><p><strong>设置mysql的安装目录</strong></p><p>basedir=D:\Program Files\mysql-5.7.21-winx64</p><p><strong>设置mysql数据库的数据的存放目录</strong></p><p>datadir=D:\Program Files\mysql-5.7.21-winx64\data</p><p><strong>允许最大连接数</strong></p><p>max_connections=200</p><p><strong>服务端使用的字符集默认为8比特编码的latin1字符集</strong></p><p>character-set-server=utf8</p><p><strong>创建新表时将使用的默认存储引擎</strong></p><p>default-storage-engine=INNODB</p><p>注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini</p><p><strong>4  添加bin目录到path环境变量</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cd834e29d47e9d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>5 安装 MySQL服务，以管理员身份运行cmd</strong></p><p>执行 mysqld install 命令</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-643f118e3fae68c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>若出现“缺少xxx.dll，请安装微软运行库</p><p><a href="http://www.pc6.com/softview/SoftView_104246.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_104246.html</a></p><p><strong>6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b7a4895d4e32d205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-73b726ce792763b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行 mysqld –initialize-insecure –user=mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1448a95597d04114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data文件夹</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e4735c229dfc43fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data目录内容是否正确</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b6fb91b6926e8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>7  运行MySQL服务</strong></p><p>net start mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f39b42622e911be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关闭MySQL服务的命令是net stop mysql</p><p>8  登陆MySQL</p><p>mysql -u root –p</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-67df9096636696cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有命令：安装服务 mysqld install</p><pre><code>进入bin目录 cd E:\mysql-5.7.21-winx64\bin生成data文件夹 mysqld --initialize-insecure --user=mysql启动服务   net start mysql登录 mysql -u root –p</code></pre><p>修改密码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7142b21a0458a91b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>在忘记root密码的时候，可以这样</strong></p><p><strong>以windows为例：</strong></p><p>1. 关闭正在运行的MySQL服务。</p><p>2. 打开DOS窗口，转到mysql\bin目录。</p><p>3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</p><p>4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</p><p>5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</p><p>6. 连接权限数据库： use mysql; 。</p><p>6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。</p><p>7. 刷新权限（必须步骤）：flush privileges;　。</p><p>8. 退出 quit。</p><p>9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</p><h3 id="Navicat的安装"><a href="#Navicat的安装" class="headerlink" title="Navicat的安装"></a>Navicat的安装</h3><p>步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e93d6a71e62666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤二 在欢迎画面点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b59309f71e5159e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤三 阅读许可协议，接受并点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b3c41f29a829c78c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-be9ca29a49189112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤五 运行其余的步骤。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88d1948d0c99bddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤六 点击“完成”，结束安装进程。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-fd49020988775b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-a359883e5fd81315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV</strong><br>其余版本的可以参考这个<a href="https://www.jianshu.com/p/42a33b0dda9c" target="_blank" rel="noopener">链接</a></p><h3 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h3><p><a href="https://www.python.org/downloads/release/python-364/" target="_blank" rel="noopener">官网传送Python3.6.4版本下载链接</a><br>由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接<a href="https://jingyan.baidu.com/article/3ea51489bebde652e61bbad3.html" target="_blank" rel="noopener">python3.6.3安装教程</a>。</p><h2 id="virtualenv的安装和配置"><a href="#virtualenv的安装和配置" class="headerlink" title="virtualenv的安装和配置"></a>virtualenv的安装和配置</h2><h3 id="使用虚拟环境的好处"><a href="#使用虚拟环境的好处" class="headerlink" title="使用虚拟环境的好处"></a>使用虚拟环境的好处</h3><p>我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹<code>(记住要和Python放在同一目录下)</code>，采用添加环境变量的方法<code>（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path）</code>，我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录<code>(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格</code>，</p><blockquote><p>C:\Users\Kbthinking&gt;F:<br>F:&gt;cd Python<br>F:\Python&gt;cd pystall<br>F:\Python\pystall&gt;</p></blockquote><p>然后输入：<code>python setup.py install</code>回车，等待几分钟即可。</p><p>最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件<br>–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者<code>Windows徽标+R</code>中输入</p><blockquote><p>pip -—version</p></blockquote><p>小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入<br>python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句）</p><p>如果已经成功<strong>安装 pip</strong>，会提示类似下面的：</p><blockquote><p>pip 1.5.6 from C:\Python35\lib\site-packages\pip-1.5.6-py3.5.egg</p></blockquote><p>pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么<br>每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。</p><p>如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考<br>这个方法为你的 Windows电脑安装pip: <a href="https://taizilongxu.gitbooks.io/stackoverflowabout-python/content/8/README.html" target="_blank" rel="noopener">pip安装问题</a><br><a href="https://jingyan.baidu.com/article/ff42efa9d630e5c19e220207.html" target="_blank" rel="noopener">windows安装pip</a></p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>在终端输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line">virtualenv testvir  # 在当前用户目录(win+r %HOMEPATH%可查看)生成</span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat  # 激活</span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure></p><p>其实这种方法挺麻烦的，这里我推荐一种简单方法，<strong>安装virtualenvwrapper</strong></p><h3 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h3><p>在终端输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p><p>接下来便是创建虚拟环境了，同样采用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv djangoTest  # djangoTest为你新建虚拟环境的名称</span><br></pre></td></tr></table></figure></p><p>它会创建在C:\Users\YC\Envs当前用户目录下的Envs目录。</p><p>你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME<br><img src="https://upload-images.jianshu.io/upload_images/8964398-4f6aefde07e8c27b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>退出激活状态命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><p><strong>知道有哪些虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></p><p><strong>直接进入虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon djangoTest</span><br></pre></td></tr></table></figure></p><p>如果出现这种情况，表示你已经进入到虚拟环境中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Envs\Test\django(djangoTest)</span><br></pre></td></tr></table></figure></p><p>再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。</p><h3 id="使用镜像安装库"><a href="#使用镜像安装库" class="headerlink" title="使用镜像安装库"></a>使用镜像安装库</h3><p>有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">镜像</a>,并简单介绍一下如何使用。正常我们下载Django的命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.1.0</span><br></pre></td></tr></table></figure></p><p>(请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.1.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>(注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！)</p><h2 id="Vue开发环境的搭建"><a href="#Vue开发环境的搭建" class="headerlink" title="Vue开发环境的搭建"></a>Vue开发环境的搭建</h2><h3 id="1、webstorm的安装"><a href="#1、webstorm的安装" class="headerlink" title="1、webstorm的安装"></a>1、webstorm的安装</h3><p>当然webstorm只是一个IDE，你可以安装其他类似的IDE，例如sublime Text3，VSCode，Notepad++等，这里就不详细说明了，直接开启传送大门：<br><a href="https://blog.csdn.net/u011781521/article/details/53558979" target="_blank" rel="noopener">WebStorm安装与使用</a>这里没有提供破解方法，你可以点击这里进行破解(方法类似):<a href="https://mp.weixin.qq.com/s/z-WoBxzasQGAqC5hqempnQ" target="_blank" rel="noopener">手把手教你破解JetBrains全家桶</a>。sublime Text3安装：<a href="https://blog.csdn.net/weixin_38091374/article/details/78652778" target="_blank" rel="noopener">sublime Text3安装到破解详解</a>。VSCode安装：<a href="https://jingyan.baidu.com/article/642c9d3430c2ec644a46f7d6.html" target="_blank" rel="noopener">VSCode安装</a>。Notepad++安装：<a href="https://jingyan.baidu.com/article/154b463109921828cb8f4151.html" target="_blank" rel="noopener">notepad++安装教程</a></p><h3 id="2、node-js的安装"><a href="#2、node-js的安装" class="headerlink" title="2、node.js的安装"></a>2、node.js的安装</h3><p>同样node.js的安装，我们直接开启传送大门：<a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html" target="_blank" rel="noopener">Node.js安装及环境配置之Windows篇</a>，安装完成以后记得使用下面的命令确认是否安装成功：<code>node --version</code>，如果出现版本号就表明安装成功了，实际上一些常用的软件都可以用这种方式来检测是否安装成功：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f923c1f6eb5e2e39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是cnpm的安装了，这个对于后端人员可能不太熟悉，但是前端人员确是非常了解，可以点击这里进行了解一下：<a href="https://www.jianshu.com/p/f581cf9360a2" target="_blank" rel="noopener">如何使用NPM？CNPM又是什么？</a></p><h3 id="3、cnpm的安装"><a href="#3、cnpm的安装" class="headerlink" title="3、cnpm的安装"></a>3、cnpm的安装</h3><p>点击这里<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>，然后安装提示进行安装即可，非常简单，就一步而已：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>当然为防止我们没有安装正确，我们使用<code>cnpm -v</code>来进行检测一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f8a4fa9c9af05752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>出现上面的情况，表明你已经安装成功了，当然你还可以自定义配置，点击这里：<a href="https://www.cnblogs.com/yominhi/p/7039795.html" target="_blank" rel="noopener">安装npm及cnpm(Windows)</a></p><p>现在进入我们的online-store，我们在英文输入法状态下按住shift键，同时点击鼠标左键，在出现的命令栏中选择<strong>在此处打开命令栏窗口</strong>，然后直接使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><p>如果出现下面的情况，我们选择以管理员身份运行：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f65462018d1f1f4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果还是出现这样的问题，就有可能是环境的问题，建议安装这里的教程重新安装和配置一下环境变量（安装最新版的node.js）：<a href="https://www.cnblogs.com/yominhi/p/7039795.html" target="_blank" rel="noopener">安装npm及cnpm(Windows)</a></p><p>现在重新安装配置以后，我们win+x选择以管理员身份运行cmd，然后到online-store文件夹下面重新运行一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><p>发现就是这样了，安装成功：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4388a66688085fc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>发现运行成功了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-38e7d93e7008c639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f6e71406f21d7070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后打开浏览器，在地址栏中输入：<code>http://localhost:8080/</code>就能看到我们的项目了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ec33932aed2beab0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意一下，下面没有是正常情况，不是你静态资源没有加载出来，而是bobby老师的服务器停了，导致api接入不了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bdf4807ef4ec3c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error occurred while trying to proxy request /favicon.ico from localhost:8080 to http://shop.projectsedu.com:8001 (ETIMEDOUT) (https://nodejs.org/api/errors.html#errors_common_system_errors)</span><br></pre></td></tr></table></figure></p><p>不相信的话，你可以在浏览器地址栏中输入：<code>http://shop.projectsedu.com:8001</code>，你会发现访问不了！当然你可以修改这个api.js文件，换成其他的地址就能访问了。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-91614cb429eca361.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，本篇关于项目环境搭建的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（一）：项目介绍</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习Vue+Django Restful framework构建生鲜电商项目时的一些笔记，希望对即将学习Django和Vue的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="必备技术"><a href="#必备技术" class="headerlink" title="必备技术"></a>必备技术</h3><p><strong>1、Vue + Django Rest Framework 前后端分离技术</strong><br><strong>2、restful api 开发流程</strong><br><strong>3、Django Rest Framework 的功能实现和核心源码分析</strong><br><strong>4、Sentry 完成线上系统的错误日志的监控和告警</strong><br><strong>5、第三方登录和支付宝支付的集成</strong><br><strong>6、本地调试远程服务器代码的技巧</strong></p><h3 id="系统构成"><a href="#系统构成" class="headerlink" title="系统构成"></a>系统构成</h3><p><strong>1、vue前端项目</strong><br><strong>2、django rest framework 系统实现前台功能</strong><br><strong>3、xadmin后台管理系统</strong></p><h3 id="Vue介绍部分"><a href="#Vue介绍部分" class="headerlink" title="Vue介绍部分"></a>Vue介绍部分</h3><p><strong>1、API 接口</strong><br><strong>2、Vue 组件 与api的交互</strong><br><strong>3、vue的项目组织结构分析</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f0cfa648c5a3fb5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Django rest framework 专注于 restful API的开发，所以下面我们来介绍Django Rest Framework这方面的技术。</p><h2 id="Django-Rest-Framework技术"><a href="#Django-Rest-Framework技术" class="headerlink" title="Django Rest Framework技术"></a>Django Rest Framework技术</h2><h3 id="A、通用view实现-rest-api接口"><a href="#A、通用view实现-rest-api接口" class="headerlink" title="A、通用view实现 rest api接口"></a>A、通用view实现 rest api接口</h3><p><strong>1、ApiView方式实现api</strong><br><strong>2、GenericView方式实现api接口</strong><br><strong>3、Viewset和router方式实现api接口和url配置</strong><br><strong>4、Django_filter、SearchFilter、 OrderFilter 、分页</strong><br><strong>5、通用mixins</strong></p><h3 id="B、权限和认证"><a href="#B、权限和认证" class="headerlink" title="B、权限和认证"></a>B、权限和认证</h3><p><strong>1、Authentication用户认证设置</strong><br><strong>2、动态设置permission、authentication</strong><br><strong>3、Validators实现字段验证</strong></p><h3 id="C、序列化和表单验证"><a href="#C、序列化和表单验证" class="headerlink" title="C、序列化和表单验证"></a>C、序列化和表单验证</h3><p><strong>1、Serializer</strong><br><strong>2、ModelSerializer</strong><br><strong>3、动态设置Serializer</strong></p><h3 id="D、支付登录注册"><a href="#D、支付登录注册" class="headerlink" title="D、支付登录注册"></a>D、支付登录注册</h3><p><strong>1、json web token 实现登录</strong><br><strong>2、手机注册</strong><br><strong>3、支付宝支付</strong><br><strong>4、第三方登录</strong></p><h3 id="E、进阶开发"><a href="#E、进阶开发" class="headerlink" title="E、进阶开发"></a>E、进阶开发</h3><p><strong>1、django rest framework 部分核心源码解读</strong><br><strong>2、文档自动化管理</strong><br><strong>3、django rest framework的缓存</strong><br><strong>4、Throttling 对用户和ip进行限速</strong></p><h2 id="开发中常见的问题"><a href="#开发中常见的问题" class="headerlink" title="开发中常见的问题"></a>开发中常见的问题</h2><p><strong>1、本地系统不能重现的bug</strong></p><p><strong>2、api接口出错不能及时的发现或难以找到错误栈</strong></p><p><strong>3、api文档管理问题：html 或者markdown的文本交互技术</strong></p><p><strong>4、大量的url配置造成url配置越来越多难以维护</strong></p><p><strong>5、接口不及时去更新文档，对方不知道如何去测试接口，但写文档会花费大量的时间去维护</strong></p><p><strong>6、为了防止爬虫，我们需要针对api的访问频率进行限制，比如一分钟，一小时，或者一天用户的访问频率限制问题</strong></p><p><strong>7、某些页面将数据放入缓存，加速某些api的访问速度（商品分类的数据一般变动比较小，所以可以放入缓存中）</strong></p><h2 id="开发中常见问题的解决办法"><a href="#开发中常见问题的解决办法" class="headerlink" title="开发中常见问题的解决办法"></a>开发中常见问题的解决办法</h2><p><strong>1、通过介绍pycharm 的远程服务器代码调试技巧让大家不仅可以调试支付，第三方登录，还可以远程服务器代码来重现服务器上的bug</strong></p><p><strong>2、通过docker 搭建 sentry 来体验错误日志监控系统，让我们不仅可以得到线上的错误栈还能及时在发生系统错误时收到邮件通知</strong></p><p><strong>3、通过django rest framework 的文档自动化管理以及url的注册管理功能会让我们省去写文档的时间</strong></p><p><strong>4、django rest framework 的文档管理功能不仅可以让我们省去写文档的时间，还能直接在文档里面测试接口，自动生成js接口代码，shell测试代码和python测试代码</strong></p><p><strong>5、django rest framework 提供的throttle 对于api进行访问频率的限制</strong></p><p><strong>6、引入第三方框架来设置某些api的缓存</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a6fe7e1ed4775d62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Django进阶知识点"><a href="#Django进阶知识点" class="headerlink" title="Django进阶知识点"></a>Django进阶知识点</h3><p><strong>1、Django mirgrations原理</strong><br><strong>2、Django 信号量</strong><br><strong>3、Django从请求到响应的完整过程</strong><br><strong>4、独立使用Django的Model</strong></p><h3 id="Vue知识点"><a href="#Vue知识点" class="headerlink" title="Vue知识点"></a>Vue知识点</h3><p><strong>1、Vue技术选型分析</strong><br><strong>2、API后端数据填充到Vue组件模板</strong><br><strong>3、Vue代码结构分析</strong></p><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p>1、开发环境的搭建<br>2、设计数据库以及导入原始数据<br>3、restful api基础以及vue项目结构介绍<br>4、商品列表页功能<br>5、商品类别功能<br>6、手机注册和用户登录<br>7、商品详情页和收藏功能<br>8、个人中心功能<br>9、购物车、订单和支付宝支付功能<br>10、首页，商品相关数量，缓存，访问限速功能<br>11、第三方登录(微博 、QQ、 微信)<br>12、sentry系统错误日志监控</p><h2 id="技术要求"><a href="#技术要求" class="headerlink" title="技术要求"></a>技术要求</h2><p>由于这里主要是介绍Django的restful framework，所以我们就不介绍Django的基础知识了，大家可以去订阅我的另一个专题<strong>《零基础使用Django2.0.1打造在线教育网站》</strong>，通过这个专题的学习，你就会对Django的基础知识有一个比较深刻的认识。然后再来学习本套笔记吧。当然Python的基础语法还是要有的，对于小白我觉得还是不要一上来就接触这些比较深奥的技术。除此之外呢，你最好还有一些Vue和MySQL的基础知识。关于Vue这块，我准备下个月出一套实战教程，而MySQL呢，我已经出了2个专题<strong>《SQL数据库学习笔记》</strong>，<strong>《Python3操作三大数据库》</strong>，哪天有时间我继续更新一下（原谅我记忆力比较差。。。）。</p><h2 id="系统功能"><a href="#系统功能" class="headerlink" title="系统功能"></a>系统功能</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d8f774afb753530c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c9c0f193cd490d6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面是我们项目的一个运行截图，这里面包含的内容很多，例如：搜索关键词，第三方登录，支付宝结算，商品收藏……..这里就不一一说明了。看到这里，是不是有点想快速学习的念头呢？那么话不多说，上车吧，走你~~~</p><p><strong>特别说明：由于版权的问题，我这个项目的全部代码不会上传到github上了，如果你需要代码请到慕课网购买该课程。</strong></p><p>到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。</p><h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><p>1、<strong>[入门]</strong> <a href="http://www.runoob.com/django/django-tutorial.html" target="_blank" rel="noopener">菜鸟Django 教程</a>，非常简短的教程，可以快速让你有一个清楚的认识。<br>2、<strong>[基础]</strong> <a href="https://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="noopener">自强学堂Django</a>，非常不错的教程，可以没事看一看。<br>3、<strong>[基础]</strong> <a href="http://www.liujiangblog.com/course/django/2" target="_blank" rel="noopener">刘江的Django教程</a>，非常适合入门的小白阅读，还有2个例子供你练习。<br>4、<strong>[入门]</strong> <a href="http://dwz.cn/VHRVxWfC" target="_blank" rel="noopener">1元学习《Django零基础到项目实战》</a>，非常不错的基础入门<strong>视频</strong>教程。<br>5、<strong>[基础]</strong><a href="http://edu.51cto.com/course/2787.html" target="_blank" rel="noopener">用Python Django快速做出高大上的BBS论坛网站</a>，这是免费的<strong>视频</strong>教程，大家可以试着去练手。<br>6、<strong>[进阶]</strong><a href="https://www.jianshu.com/c/559ad89c808a" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站</a>，本人一套关于Django学习的实战笔记。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（提示）：错误贴</title>
      <link href="/2018/04/16/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E6%8F%90%E7%A4%BA%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E8%B4%B4/"/>
      <url>/2018/04/16/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E6%8F%90%E7%A4%BA%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近有小伙伴们私聊我说出现了很多问题，这里特开一个帖子专门用于错误的指导与交流。首先是说注册和激活有问题，我对此进行了测试，发现没有问题，小伙伴们出现这种问题可能是代码粘贴时的位置出现了错误，请各位小伙伴们自己对比一下代码，注意是否对齐（部分代码进行了完善），这里贴一下代码。</p><h2 id="注册代码"><a href="#注册代码" class="headerlink" title="注册代码"></a>注册代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户注册的函数</span><br><span class="line">class RegisterView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        register_form = RegisterForm()</span><br><span class="line">        return render(request, &quot;register.html&quot;, &#123;&apos;register_form&apos;: register_form&#125;)</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息</span><br><span class="line">        register_form = RegisterForm(request.POST)</span><br><span class="line">        if register_form.is_valid():</span><br><span class="line">            user_name = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">            if UserProfile.objects.filter(email=user_name):</span><br><span class="line">                # register_form回填信息必须有，msg是信息提示</span><br><span class="line">                return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;)</span><br><span class="line"></span><br><span class="line">            # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line">            # 实例化一个user_profile对象，存入前端页面获取的值</span><br><span class="line">            user_profile = UserProfile()</span><br><span class="line">            user_profile.username = user_name</span><br><span class="line">            user_profile.email = user_name</span><br><span class="line"></span><br><span class="line">            # 默认激活状态为False，也就是未激活</span><br><span class="line">            user_profile.is_active = False</span><br><span class="line"></span><br><span class="line">            # 对password进行加密并保存</span><br><span class="line">            user_profile.password = make_password(pass_word)</span><br><span class="line">            user_profile.save()</span><br><span class="line">            send_register_eamil(user_name, &apos;register&apos;)</span><br><span class="line">            return render(request, &quot;login.html&quot;, )</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;register.html&quot;, &#123;&quot;register_form&quot;: register_form&#125;)</span><br></pre></td></tr></table></figure><h2 id="激活代码"><a href="#激活代码" class="headerlink" title="激活代码"></a>激活代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户激活操作的函数</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        # 如果不为空也就是有用户</span><br><span class="line">        active_form = ActiveForm(request.GET)  </span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                user = UserProfile.objects.get(email=email)</span><br><span class="line">                user.is_active = True</span><br><span class="line">                user.save()</span><br><span class="line">                # 激活成功跳转到登录页面</span><br><span class="line">                return render(request, &quot;login.html&quot;, )</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;register.html&quot;, &#123;&quot;msg&quot;: &quot;您的激活链接无效&quot;, &quot;active_form&quot;: active_form&#125;)</span><br></pre></td></tr></table></figure><p>其次是突然所有图片显示不了，我调试发现可能是你上传图片的命名格式出了问题，所以我们的访问地址也要配置：两种形式都可以，不过呢建议大家使用第一种，因为第一种是匹配任意位数，第二种则是贪婪匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一种</span><br><span class="line"># 配置文件上传的访问处理url</span><br><span class="line">    re_path(&apos;media/(?P&lt;path&gt;\d+)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;)</span><br><span class="line"># 第二种</span><br><span class="line"># 配置文件上传的访问处理url</span><br><span class="line">    re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><p>还有因为我这个是Python3+Django2.0，如果你在部署的时候没有新建虚拟环境，那么你就很容易造成Python版本的使用混乱，而Ubuntu自带的Python版本是2.0系列，因此最好是使用虚拟环境来避免这个错误！</p><p>目前为止就是这几个问题出的错比较多，如果你发现了其他问题，可以在文章底部留言和我交流～～～</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十七）：项目部署上线</title>
      <link href="/2018/04/15/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/"/>
      <url>/2018/04/15/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍如何把我们的django项目部署到服务器上，里面涉及到的东西很多，特别是小白第一次接触可能不清楚，但是没关系，你跟着我的节奏走就可以。注意本文是部署Python3.6.4和Django2.0.1与bobby老师讲的大体上差不多，只是部分命令不一样。注意我已经把win10里面的eduline文件放到deepin的桌面上了。（推荐使用U盘导入文件，否则VMware导入本地文件很麻烦。）使用Centos的朋友请点击这里： <a href="http://www.projectsedu.com/2017/08/15/centos7-%E4%B8%8B%E9%80%9A%E8%BF%87nginx-uwsgi%E9%83%A8%E7%BD%B2django%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">centos7 下通过nginx+uwsgi部署django应用</a></p><h2 id="nginx-uwsgi"><a href="#nginx-uwsgi" class="headerlink" title="nginx + uwsgi"></a>nginx + uwsgi</h2><p>首先在win10上面利用虚拟机安装Ubantu系统，这里我个人推荐使用国产deepin操作系统。不会安装的请点击这里：<a href="https://blog.csdn.net/liberalliushahe/article/details/78950967" target="_blank" rel="noopener">VmWare安装深度deepin操作系统</a></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>1、使用命令，安装nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f8329e38265381a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>2、使用下面的命令查看是否启动nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b76c9a9a0ce060be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、使用下面的命令查看本地ip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b3e490574f22b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>4、本地输入获取到的ip到浏览器访问一下（服务器用公网IP）：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-753a5edb1611252b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>1、使用命令，安装数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-82b5c367b1501ec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>出现下面的图片：<img src="https://upload-images.jianshu.io/upload_images/8964398-ebfa8a9350fbdd84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>输入root,按上下箭头进行选择，回车进行确定！<br>2、使用下面的命令查看是否启动mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep mysql</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-52b4b58466bf9c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、使用下面的命令进入数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>查看数据库命令：<strong>show databases;</strong>，退出数据库命令：<strong>exit</strong></p><p>4、在终端中输入<strong>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</strong><br>修改其中bind-address =127.0.0.1为bind-address =0.0.0.0，注意这样会暴露端口，我们这里仅仅是为了让win10进行连接。所以真正部署的时候，尽量127.0.0.1，不要修改。（在vim中修改文件使用键盘上的<strong>i</strong>键进入，然后进行修改。修改完成以后，按键盘上的Esc键退出插入模式，再按<strong>shift+:</strong>，输入<strong>wq</strong>进行保存。仅仅输入<strong>q!</strong>是退出，而<strong>wq</strong>是保存并退出。）<br><img src="https://upload-images.jianshu.io/upload_images/8964398-e391cfccbd91b4a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>5、使用下面的命令重启数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart  # 重启数据库</span><br><span class="line"></span><br><span class="line">ifconfig # 查看ip</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efdca1a29846cb97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>6、打开win10上面的Navicat，将获取到的ip地址新建数据库，然后测试一下:发现链接不允许（（服务器用公网IP））。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c4e5a58db1b4db43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>7、在终端中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 192.168.118.128 -u root -p</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3760fea0e9666bc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>发现还是有问题。这时我们要修改数据库访问权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p  # 进入数据库</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-58018b2ec92381db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后<strong>exit</strong>退出数据库。<br>8、重新链接测试一下，发现可以正常连接了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-bed81033a52dca85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>9，新建数据库：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-67b8793e741c68e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>10、使用下面的命令安装pip3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bf95acf4ab9906bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>11、使用下面的命令安装virtualenv:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualenv</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a41556acb3a294a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>12、使用下面的命令安装virtualenvwrapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualenvwrapper</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d3bd6357e2b15594.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>13、修改配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/share/virtualenvwrapper/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>14、新建虚拟环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workon #测试一下</span><br><span class="line"></span><br><span class="line">mkvirtualenv eduline</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ba9c270e3edb2296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>15、win10导出requirements.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></p><p>16、虚拟机deepin安装requirements.txt（虚拟环境使用pip而不是pip3而且需要把requirements.txt放到虚拟环境里面）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0aacdad41528c4a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>17、如果遇到安装不了的软件或者第三方库，可以使用下面的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install Django==2.0.1</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-79989d2314ddf33c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>18、出现这种情况，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5af89a0dc0d9c2e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-2b081ebedddd5524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>19、如果第三方库安装太慢，可以使用豆瓣源加速：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i https://pypi.douban.com/simple pillow==4.10.1</span><br></pre></td></tr></table></figure></p><p>20、查看已经安装的包使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 list</span><br></pre></td></tr></table></figure></p><h2 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装uwsgi</h2><p>1、使用下面的命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install uwsgi</span><br></pre></td></tr></table></figure></p><p>如果安装不了，请先运行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpython3.x-dev  #x对应你Python3.x</span><br></pre></td></tr></table></figure></p><p>然后在重新运行一下上面的安装命令。<br>2、运行一下wsgi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --module eduline.wsgi</span><br></pre></td></tr></table></figure></p><p>3、启动本地服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-883e8326bc5c1b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>4、重新设置监听窗口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8fb3ae233871021c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>5、数据库迁移：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-73c67160cabfc26b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>6、使用你本地的ip地址进行访问，页面出现，没有问题。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-9410fb4ca141fa2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>7、配置nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">新建uc_nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># the upstream component nginx needs to connect to</span><br><span class="line">upstream django &#123;</span><br><span class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span><br><span class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line"># configuration of the server</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"># the port your site will be served on</span><br><span class="line">listen      80;</span><br><span class="line"># the domain name it will serve for</span><br><span class="line">server_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDN</span><br><span class="line">charset     utf-8;</span><br><span class="line"></span><br><span class="line"># max upload size</span><br><span class="line">client_max_body_size 75M;   # adjust to taste</span><br><span class="line"></span><br><span class="line"># Django media</span><br><span class="line">location /media  &#123;</span><br><span class="line">    alias 你的目录/eduline/media;  # 指向django的media目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /static &#123;</span><br><span class="line">    alias 你的目录/eduline/static; # 指向django的static目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Finally, send all non-media requests to the Django server.</span><br><span class="line">location / &#123;</span><br><span class="line">    uwsgi_pass  django;</span><br><span class="line">    include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9f0e1a8c4ea5efb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>8、将该配置文件加入到nginx的启动配置文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s 你的目录/eduline/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c4adb04e49328aa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>9、拉取所有需要的static file 到同一个目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在django的setting文件中，添加下面一行内容：</span><br><span class="line"></span><br><span class="line">    STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)</span><br></pre></td></tr></table></figure></p><p>10、运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure></p><p>11、通过配置文件启动uwsgi：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">新建uwsgi.ini 配置文件， 内容如下：</span><br><span class="line"></span><br><span class="line">    # mysite_uwsgi.ini file</span><br><span class="line">    [uwsgi]</span><br><span class="line"></span><br><span class="line">    # Django-related settings</span><br><span class="line">    # the base directory (full path)</span><br><span class="line">    chdir           = /home/licheetools/eduline</span><br><span class="line">    # Django&apos;s wsgi file</span><br><span class="line">    module          = eduline.wsgi</span><br><span class="line">    # the virtualenv (full path)</span><br><span class="line"></span><br><span class="line">    # process-related settings</span><br><span class="line">    # master</span><br><span class="line">    master          = true</span><br><span class="line">    # maximum number of worker processes</span><br><span class="line">    processes       = 10</span><br><span class="line">    # the socket (use the full path to be safe</span><br><span class="line">    socket          = 127.0.0.1:8000</span><br><span class="line">    # ... with appropriate permissions - may be needed</span><br><span class="line">    # chmod-socket    = 664</span><br><span class="line">    # clear environment on exit</span><br><span class="line">    vacuum          = true</span><br><span class="line">    virtualenv = /home/licheetools/.virtualenvs/mxonline</span><br><span class="line"></span><br><span class="line">    logto = /tmp/mylog.log</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">    chdir： 表示需要操作的目录，也就是项目的目录</span><br><span class="line">    module： wsgi文件的路径</span><br><span class="line">    processes： 进程数</span><br><span class="line">    virtualenv：虚拟环境的目录</span><br></pre></td></tr></table></figure></p><p>检查虚拟环境是否有问题：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-9cfbfd1786c09bba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workon eduline</span><br><span class="line"></span><br><span class="line">uwsgi -i 你的目录/eduline/conf/uwsgi.ini</span><br></pre></td></tr></table></figure></p><p>如果在conf目录下，只需使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi -i uwsgi.ini</span><br></pre></td></tr></table></figure></p><p>最后一步，在浏览器地址里面输入你的ip就可以访问到我们的项目了。</p><p>至此，我们Django项目就成功的部署到服务器上面了。回顾这个项目，收获很多，但是坑也很多，坚持到最后才会感受成功的喜悦！</p><ul><li>参考文章：<br>[-] <a href="https://www.jianshu.com/p/12e0814e6b56" target="_blank" rel="noopener">Django部署的正确打开方式 v2.0</a><br>[-] <a href="https://www.jianshu.com/p/d6f9138fab7b" target="_blank" rel="noopener">Django快速部署简约版 v3.0</a><br>[-] nginx一些常用命令：查看nginx进程命令<code>ps -ef | grep  nginx</code>和<code>pkill -9 nginx</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发</title>
      <link href="/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9Axadmin%E7%9A%84%E8%BF%9B%E9%98%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9Axadmin%E7%9A%84%E8%BF%9B%E9%98%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍xadmin的进阶开发，具体包括自定义icon，默认排序，字段只读，字段隐藏，搜索框，inlines，一张表分两个model来进行管理添加数据，直接列表页编辑，列表页显示章节数，显示自定义的html代码，列表页定时刷新，字段联动功能，xadmin源码目录简说，xadmin集成富文本等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><p>##<br>首先需要把我们在前面当Debug=False时，修改的以下代码全部删除掉：</p><hr><p>为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</span><br></pre></td></tr></table></figure></p><p>同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># STATICFILES_DIRS = [</span><br><span class="line">#     os.path.join(BASE_DIR, &quot;static&quot;),  # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾</span><br><span class="line"># ]</span><br></pre></td></tr></table></figure></p><p>打开eduline/urls.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from eduline.settings import  STATIC_ROOT</span><br><span class="line"></span><br><span class="line"> # 配置静态文件上传的访问处理url</span><br><span class="line">    re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><hr><p>恢复到Debug=True时的状态。<br>然后进入到我们的xadmin后台，开始xadmin的进阶开发。</p><h2 id="自定义icon"><a href="#自定义icon" class="headerlink" title="自定义icon"></a>自定义icon</h2><p>所谓icon其实就是你的功能小图标：<img src="https://upload-images.jianshu.io/upload_images/8964398-92b1bf9ba9bfc799.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们以修改邮箱验证码为例，打开users/adminx.py文件，在EmailVerifyRecordAdmin函数新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_icon = &apos;fa fa-user&apos;</span><br></pre></td></tr></table></figure></p><p>其实这个样式就是对应于<a href="http://fontawesome.io" target="_blank" rel="noopener">font awesome</a>里面的图标，你可以下载新的源代码对你的目录下的css和fonts文件夹进行替换：<img src="https://upload-images.jianshu.io/upload_images/8964398-932aabecbc41f2b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新一下就出现自己想要的样式icon了。</p><h2 id="默认排序，字段只读，字段隐藏"><a href="#默认排序，字段只读，字段隐藏" class="headerlink" title="默认排序，字段只读，字段隐藏"></a>默认排序，字段只读，字段隐藏</h2><p>我们以课程为例，来介绍这3个小功能。打开couses/adminx.py文件，在CourseAdmin中加入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 默认排序：以点击数排序</span><br><span class="line">ordering = [&apos;-click_nums&apos;]</span><br><span class="line"></span><br><span class="line"># 字段只读：点击数只允许读取</span><br><span class="line">readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]</span><br><span class="line"></span><br><span class="line"># 字段隐藏：收藏数隐藏显示</span><br><span class="line">exclude = [&apos;fav_nums&apos;]</span><br><span class="line"></span><br><span class="line"># 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏</span><br></pre></td></tr></table></figure></p><h2 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h2><p>当课程很多时，我们不能以下拉菜单的形式来查找我们的课程，我们需要有搜索框。你已经知道，课程它有一个外键是课程机构，因此我们需要到课程机构里面进行搜索框的配置。打开organization/adminx.py文件，在CourseOrgAdmin函数里面添加一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 搜索框，当课程数据量过大时，有课程指向它，会以ajax方式加载</span><br><span class="line">    relfield_style = &apos;fk-ajax&apos;</span><br></pre></td></tr></table></figure></p><h2 id="inlines添加数据"><a href="#inlines添加数据" class="headerlink" title="inlines添加数据"></a>inlines添加数据</h2><p>在这之前，我们新增课程的时候是不能同时新增课程章节信息的，需要跳到另一个页面，这是很麻烦的。所以我们考虑采用inlines来添加数据从而完成在一个页面直接完成章节信息的添加。</p><p>打开couses/adminx.py文件，在最顶部新定义一个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 课程直接添加章节</span><br><span class="line">class LessonInline(object):</span><br><span class="line">    model = Lesson</span><br><span class="line">    extra = 0</span><br><span class="line"></span><br><span class="line"># 同时在CourseAdmin中，新增一行代码</span><br><span class="line"># 课程直接添加章节</span><br><span class="line">    inlines = [LessonInline] # 数组，支持多个</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的后台，发现章节信息在课程页面底部出现了：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-7853d767568af92e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>同时也支持多个添加，比方再添加一个课程资源：<img src="https://upload-images.jianshu.io/upload_images/8964398-983c07e8c018bc3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="一张表分两个model来进行管理"><a href="#一张表分两个model来进行管理" class="headerlink" title="一张表分两个model来进行管理"></a>一张表分两个model来进行管理</h2><p>录播课程与非轮播课程可以分开管理，但是最好是在一张表里显示。打开courses/models.py文件，在course函数下面新增代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class BannerCourse(Course):  # 注意是继承Course而不是object这个最高类</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;轮播课程&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        proxy = True  # 很重要，否则会生成另外一张表，这样设置具有model的功能，但不会生成表</span><br></pre></td></tr></table></figure></p><p>然后打开courses/adminx.py文件，修改之前的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">from .models import  BannerCourse</span><br><span class="line"></span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                    &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;,</span><br><span class="line">                     &apos;click_nums&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                   &apos;add_time&apos;]  # 过滤器</span><br><span class="line">    # # 默认排序：以点击数排序</span><br><span class="line">    # ordering = [&apos;-click_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段只读：点击数只允许读取</span><br><span class="line">    # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段隐藏：收藏数隐藏显示</span><br><span class="line">    # exclude = [&apos;fav_nums&apos;]</span><br><span class="line">    # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏</span><br><span class="line"></span><br><span class="line">    # 课程直接添加章节,课程资源</span><br><span class="line">    inlines = [LessonInline, CourseResourceInline]</span><br><span class="line"></span><br><span class="line">    # 过滤列表中的数据</span><br><span class="line">    def queryset(self):</span><br><span class="line">        qs = super(CourseAdmin, self).queryset()</span><br><span class="line">        qs = qs.filter(is_banner=False)</span><br><span class="line">        return qs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BannerCourseAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                    &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;,</span><br><span class="line">                     &apos;click_nums&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                   &apos;add_time&apos;]  # 过滤器</span><br><span class="line">    # # 默认排序：以点击数排序</span><br><span class="line">    # ordering = [&apos;-click_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段只读：点击数只允许读取</span><br><span class="line">    # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段隐藏：收藏数隐藏显示</span><br><span class="line">    # exclude = [&apos;fav_nums&apos;]</span><br><span class="line">    # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏</span><br><span class="line"></span><br><span class="line">    # 课程直接添加章节,课程资源</span><br><span class="line">    inlines = [LessonInline, CourseResourceInline]</span><br><span class="line"></span><br><span class="line">    # 过滤列表中的数据</span><br><span class="line">    def queryset(self):</span><br><span class="line">        qs = super(BannerCourseAdmin, self).queryset()</span><br><span class="line">        qs = qs.filter(is_banner=True)</span><br><span class="line">        return qs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(BannerCourse, BannerCourseAdmin)</span><br></pre></td></tr></table></figure></p><p>然后刷新一下后台页面，发现有2个课程管理：<img src="https://upload-images.jianshu.io/upload_images/8964398-8c1e1a7fa2630ad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们还是要配置一下：打开users/adminx.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from courses.models import BannerCourse</span><br><span class="line"></span><br><span class="line">&#123;&apos;title&apos;: &apos;轮播课程&apos;, &apos;url&apos;: self.get_model_url(BannerCourse, &apos;changelist&apos;)&#125;,</span><br></pre></td></tr></table></figure></p><p>并修改之前的course的verbose_name为普通课程。<br>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-1781beebab497148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>刷新一下我们的后台页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-a9148c37f09f2090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="直接列表页编辑"><a href="#直接列表页编辑" class="headerlink" title="直接列表页编辑"></a>直接列表页编辑</h2><p>在courses/adminx.py文件的CourseAdmin函数，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接列表页编辑</span><br><span class="line">   list_editable = [&apos;degree&apos;, &apos;desc&apos;, ]</span><br></pre></td></tr></table></figure></p><h2 id="列表页显示章节数"><a href="#列表页显示章节数" class="headerlink" title="列表页显示章节数"></a>列表页显示章节数</h2><p>在courses/adminx.py文件的CourseAdmin和BannerCourseAdmin函数的list_display中，新增显示字段<code>get_zj_nums</code>，刷新后台发现是黑色的英文，我们需要修改，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_zj_nums.short_description = &quot;章节数&quot;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d01f3694a94d7d1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="显示自定义的html代码"><a href="#显示自定义的html代码" class="headerlink" title="显示自定义的html代码"></a>显示自定义的html代码</h2><p>在刚才的页面下面新增以下代码：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def go_to(self):</span><br><span class="line">        from django.utils.safestring import mark_safe</span><br><span class="line">        # 如果不使用mark_safe，系统则会对其进行转义</span><br><span class="line">        return mark_safe(&quot;&lt;a href=&apos;http://blog.licheetools.top&apos;&gt;跳转&lt;/&gt;&quot;)</span><br><span class="line">    go_to.short_description = &quot;跳转&quot;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-e52c998057f7f32d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="列表页定时刷新"><a href="#列表页定时刷新" class="headerlink" title="列表页定时刷新"></a>列表页定时刷新</h2><p>打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh_times = [3,5]  # 列表页定时刷新3s或者5s</span><br></pre></td></tr></table></figure></p><h2 id="字段联动功能"><a href="#字段联动功能" class="headerlink" title="字段联动功能"></a>字段联动功能</h2><p>打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 字段联动</span><br><span class="line">    def save_models(self):</span><br><span class="line">        # 在保存课程的时候,统计课程机构的课程数</span><br><span class="line">        obj = self.new_obj</span><br><span class="line">        # 新增课程还没有保存，统计的课程数就会少一个</span><br><span class="line">        obj.save()</span><br><span class="line">        # 必须确定存在</span><br><span class="line">        if obj.course_org is not None:</span><br><span class="line">            # obj实际是一个course对象</span><br><span class="line">            course_org = obj.course_org</span><br><span class="line">            course_org.course_nums = Course.objects.filter(course_org=course_org).count()</span><br><span class="line">            course_org.save()</span><br></pre></td></tr></table></figure></p><h2 id="xadmin源码目录简说"><a href="#xadmin源码目录简说" class="headerlink" title="xadmin源码目录简说"></a>xadmin源码目录简说</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8a5ca28f1ab83af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ul><li>locale  对应语言包</li><li>migrations 是数据表的记录</li><li>plugins 每一个后台页面都是一个plugin插件</li><li>static 静态文件夹，里面有js,css</li><li>template 这是xadmin自己使用的html文件</li><li>templatetags  这是tag模板<br>总而言之，xadmin它是对Django admin的封装和进阶开发，正所谓青出于蓝而胜于蓝就是这个理。</li></ul><h2 id="xadmin集成富文本"><a href="#xadmin集成富文本" class="headerlink" title="xadmin集成富文本"></a>xadmin集成富文本</h2><p>首先点击<a href="https://xadmin.readthedocs.io/en/docs-chinese/make_plugin.html" target="_blank" rel="noopener">Xadmin 插件制作</a>，我们学着官网的介绍，自己尝试做一个插件:富文本编辑器。<br>点击<a href="https://github.com/zhangfisher/DjangoUeditor" target="_blank" rel="noopener">DjangoUeditor</a>，获取<strong>DjangoUeditor</strong>的安装包，然后按照帮助文档或者下面的要求安装DjangoUeditor。</p><h3 id="1、安装方法-注意需要转到eduline这个虚拟环境下面才能安装"><a href="#1、安装方法-注意需要转到eduline这个虚拟环境下面才能安装" class="headerlink" title="1、安装方法(注意需要转到eduline这个虚拟环境下面才能安装)"></a>1、安装方法(注意需要转到eduline这个虚拟环境下面才能安装)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法一：将github整个源码包下载回家，在命令行运行：</span><br><span class="line">python setup.py install</span><br><span class="line">* 方法二：使用pip工具在命令行运行(推荐)：</span><br><span class="line">    pip install DjangoUeditor</span><br></pre></td></tr></table></figure><h3 id="2、在Django中安装DjangoUeditor"><a href="#2、在Django中安装DjangoUeditor" class="headerlink" title="2、在Django中安装DjangoUeditor"></a>2、在Django中安装DjangoUeditor</h3><p>在INSTALL_APPS里面增加DjangoUeditor app，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eduline/settings.py文件:</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = ( #........ &apos;DjangoUeditor&apos;, )</span><br></pre></td></tr></table></figure></p><h3 id="3、配置urls"><a href="#3、配置urls" class="headerlink" title="3、配置urls"></a>3、配置urls</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eduline/urls.py文件:</span><br><span class="line"></span><br><span class="line"> # 富文本相关path配置</span><br><span class="line">    path(&quot;ueditor/&quot;, include(&apos;DjangoUeditor.urls&apos;)),</span><br></pre></td></tr></table></figure><h3 id="4、在models中的使用"><a href="#4、在models中的使用" class="headerlink" title="4、在models中的使用"></a>4、在models中的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">courses/models.py文件：</span><br><span class="line"></span><br><span class="line">from DjangoUeditor.models import UEditorField</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Course(models.Model):</span><br><span class="line">    detail = UEditorField(verbose_name=&apos;课程详情&apos;, width=600, height=300, imagePath=&quot;courses/ueditor/&quot;,</span><br><span class="line">                                         filePath=&quot;courses/ueditor/&quot;, default=&apos;&apos;)</span><br></pre></td></tr></table></figure><h3 id="5、书写代码"><a href="#5、书写代码" class="headerlink" title="5、书写代码"></a>5、书写代码</h3><p>在xadmin的plugins文件夹下面，新增一个<strong>ueditor.py</strong>文件，在里面新增：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminView</span><br><span class="line">from DjangoUeditor.models import UEditorField</span><br><span class="line">from DjangoUeditor.widgets import UEditorWidget</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class XadminUEditorWidget(UEditorWidget):</span><br><span class="line">    def __init__(self,**kwargs):</span><br><span class="line">        self.ueditor_options=kwargs</span><br><span class="line">        self.Media.js = None</span><br><span class="line">        super(XadminUEditorWidget,self).__init__(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UeditorPlugin(BaseAdminPlugin):</span><br><span class="line">    def get_field_style(self, attrs, db_field, style, **kwargs):</span><br><span class="line">        if style == &apos;ueditor&apos;:</span><br><span class="line">            if isinstance(db_field, UEditorField):</span><br><span class="line">                widget = db_field.formfield().widget</span><br><span class="line">                param = &#123;&#125;</span><br><span class="line">                param.update(widget.ueditor_settings)</span><br><span class="line">                param.update(widget.attrs)</span><br><span class="line">                return &#123;&apos;widget&apos;: XadminUEditorWidget(**param)&#125;</span><br><span class="line">        return attrs</span><br><span class="line"></span><br><span class="line">    # 在我们生成的页面中放入自己的js文件</span><br><span class="line">    def block_extrahead(self, context, nodes):</span><br><span class="line">        js = &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.config.js&quot;)         #自己的静态目录</span><br><span class="line">        js += &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.all.min.js&quot;)   #自己的静态目录</span><br><span class="line">        nodes.append(js)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> # 新增页面</span><br><span class="line"></span><br><span class="line">xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)</span><br><span class="line"># 修改页面</span><br><span class="line"></span><br><span class="line">xadmin.site.register_plugin(UeditorPlugin, CreateAdminView)</span><br></pre></td></tr></table></figure></p><h3 id="6、字段显示样式"><a href="#6、字段显示样式" class="headerlink" title="6、字段显示样式"></a>6、字段显示样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">courses/adminx.py文件：</span><br><span class="line"></span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    # 字段显示样式</span><br><span class="line">    style_fields = &#123;&quot;detail&quot;: &quot;ueditor&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="7、注册进入plugins"><a href="#7、注册进入plugins" class="headerlink" title="7、注册进入plugins"></a>7、注册进入plugins</h3><p>找到plugins文件夹下的<strong>init</strong>.py文件，在PLUGINS中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PLUGINS= (&apos;ueditor&apos;,）</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-9f83eb8f6ee980af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的项目，登录到xadmin后台查看一下，富文本出来:<img src="https://upload-images.jianshu.io/upload_images/8964398-34540482f02c3dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着在前端刷新一下页面，如果没有出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-e930ce38bb41ca76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>那可能是你的course-detail.html页面中设置的有问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-2429c372ce0499cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>弄好以后，页面还是现实元原始的html代码，这是不允许的，所以我们需要进一步配置：在course-detail.html页面中，关闭转义功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">&#123;&#123; course.detail &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure></p><p>现在重新刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-1e6adefb522ae068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，本篇关于xadmin进阶开发的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应于第二十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十五）：常见的网络攻防</title>
      <link href="/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
      <url>/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍常见的网络攻击与防护，具体包括<strong>SQL注入攻击及防护</strong>，<strong>XSS攻击及防护</strong>以及<strong>CSRF攻击及防护</strong>，下面我们依次介绍一下。</p><h2 id="SQL注入攻击及防护"><a href="#SQL注入攻击及防护" class="headerlink" title="SQL注入攻击及防护"></a>SQL注入攻击及防护</h2><p>首先我们来了解一下什么是SQL注入？</p><hr><p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击。</p><hr><p>SQL注入的危害:<img src="https://upload-images.jianshu.io/upload_images/8964398-c92bdfe10eead09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下面我们通过一段代码了解一下SQL注入的过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># users/views.py文件：</span><br><span class="line">class LoginUnsafeView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        user_name = request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">        pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        import MySQLdb</span><br><span class="line">        conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;root&apos;, db=&apos;mxonline&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql_select = &quot;select * from users_userprofile where email=&apos;&#123;0&#125;&apos; and password=&apos;&#123;1&#125;&apos;&quot;.format(user_name, pass_word)</span><br><span class="line"></span><br><span class="line">        result = cursor.execute(sql_select)</span><br><span class="line">        for row in cursor.fetchall():</span><br><span class="line">            # 查询到用户</span><br><span class="line">            pass</span><br><span class="line">        print &apos;hello&apos;</span><br><span class="line"></span><br><span class="line"># eduline/urls.py文件:</span><br><span class="line">from users.views import LoginUnsafeView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;login/&apos;, LoginUnsafeView.as_view(), name=&apos;login&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这里竟然把sql语句写到这里，所以我们可以在参数中加入sql语句，使之拼接字符串从而为真被系统识别通过，盗取用户信息。但是在Django自带了orm,可以对这个进行验证，从而保证系统的安全。</p><p>因此建议大家都采用orm这种形式，不要使用原生的sql语句。</p><h2 id="XSS攻击及防护"><a href="#XSS攻击及防护" class="headerlink" title="XSS攻击及防护"></a>XSS攻击及防护</h2><p>首先我们来了解一下什么是XSS攻击？</p><hr><p>XSS跨站脚本攻击(Cross Site Scripting)，是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</p><hr><p>XSS攻击的危害：<img src="https://upload-images.jianshu.io/upload_images/8964398-894015e332ff45f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>攻击流程为：<img src="https://upload-images.jianshu.io/upload_images/8964398-81f36ada8c56a0ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>举个例子来说：<img src="https://upload-images.jianshu.io/upload_images/8964398-57e094ffd349369a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>当你输入iPhone6时，这个字符就会被显示到页面中：<img src="https://upload-images.jianshu.io/upload_images/8964398-0b9a77caa2802acf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>之后，黑客就会修改js代码:<img src="https://upload-images.jianshu.io/upload_images/8964398-1a311f7919d49e6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后就拿到了你的登录cookie就可以进入你的账户进行肆意掠夺你的money了。</p><p>这也就是为什么你觉得自己明明进入的是官方网站，怎么账号（经常就是QQ号）被盗了的缘故，所以不要随意点开陌生人发的链接。</p><p>XSS防护：<img src="https://upload-images.jianshu.io/upload_images/8964398-9eb097c927cdedea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="CSRF攻击及防护"><a href="#CSRF攻击及防护" class="headerlink" title="CSRF攻击及防护"></a>CSRF攻击及防护</h2><p>首先我们来了解一下什么是CSRF攻击？</p><hr><p>CSRF（Cross-site request forgery）跨站请求伪造，是通过伪装来自受信任用户的请求来利用受信任的网站。</p><hr><p>CSRF攻击的危害：<img src="https://upload-images.jianshu.io/upload_images/8964398-16f8fa9e56d4bcc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>攻击流程为：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a8a790c83270e4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你看，这就是伪装：用户开始访问了A，之后访问了B，而B是要求用户访问A的。用户以为这是跳转到A的链接，以为很官方，殊不知就是这种官方泄露了自己的信息。<br>原因在于用户每次向A请求时，都会带上session id，这样就很容易出问题。</p><hr><p>CSRF防护：提交form表单必须添加crsf token，进行crsf token验证，而攻击网站是无法生成crsf token的。还有一点，但凡涉及到敏感信息的网站，你登录进去就要及时登出，这样可以避免很多问题的发生。</p><p>至此，本篇关于常见网络攻击与防护的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十四）：全局页面配置</title>
      <link href="/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%85%A8%E5%B1%80%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%85%A8%E5%B1%80%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍全局页面的配置，具体包括首页登出实现，点击数加1，收藏数配置，小喇叭消息已读配置，首页的开发以及404和500页面的配置等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="首页登出实现"><a href="#首页登出实现" class="headerlink" title="首页登出实现"></a>首页登出实现</h2><p>现在我们来完善我们首页的系统登出功能，这个没有页码，你登出后只需要跳转到首页即可，所以我们只需要写一个view就能完成这个操作。</p><p>老规矩先配置path:打开eduline/urls.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import LogoutView</span><br><span class="line"></span><br><span class="line"># 登出url</span><br><span class="line">    path(&apos;logout/&apos;, LogoutView.as_view(), name=&quot;logout&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/view.py文件，在login的函数下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import reverse</span><br><span class="line">from django.contrib.auth import  logout</span><br><span class="line">from django.http import HttpResponseRedirect</span><br><span class="line"># 用于实现用户首页登出的函数</span><br><span class="line">class LogoutView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 采用Django自带的logout函数来完成我们登出的功能</span><br><span class="line">        logout(request)</span><br><span class="line">        # 不采用之前的render，而是采用重定向返回到首页</span><br><span class="line">        return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br></pre></td></tr></table></figure></p><p>接下来在base.html页面进行跳转链接的配置：<img src="https://upload-images.jianshu.io/upload_images/8964398-5bf36e7468e14c1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>别忘了还有其余2个base页面跳转的配置，很简单，这里就不介绍了。</p><h2 id="点击数加1"><a href="#点击数加1" class="headerlink" title="点击数加1"></a>点击数加1</h2><p><strong>1、</strong>为课程数加1：打开courses/view.py文件，找到CourseInfoView函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course.students += 1</span><br><span class="line">course.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-c412e17103908022.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>2、</strong>为讲师数加1：打开organization/view.py文件，找到TeacherDetailView函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">teacher.click_nums += 1</span><br><span class="line">teacher.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ae343a373282953d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>3、</strong>为机构数加1：打开organization/view.py文件，找到OrgHomeView函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course_org.click_nums += 1</span><br><span class="line">course_org.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-7a7af7f6a70f7583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="404和500页面的配置"><a href="#404和500页面的配置" class="headerlink" title="404和500页面的配置"></a>404和500页面的配置</h2><p>老规矩，从前端资料里面拷贝我们的404和500页面到templates文件夹并修改文件里面的静态文件地址。打开eduline/urls.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 全局404页面配置</span><br><span class="line">handler404 = &apos;users.views.page_not_found&apos;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-6e7a929f8dc33672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 404页面对应的处理函数</span><br><span class="line">def page_not_found(request):</span><br><span class="line">    from django.shortcuts import render_to_response</span><br><span class="line">    response = render_to_response(&quot;404.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    # 设置response的状态码</span><br><span class="line">    response.status_code = 404</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p><p>接着运行我们的项目，随意输入一个地址，发现页面并没有出来，那是因为在eduline/settings.py文件里面：DEBUG = True，所以我们需要修改它为False，还有下面的允许访问IP地址，否则404页面也是出不来的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = False</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br></pre></td></tr></table></figure></p><p>这样重新运行一下我们的项目，发现页面有了，但是样子却没加载出来，这是为什么呢？</p><p>因为DEBUG为True时，系统会自动前往STATICFILES_DIRS下寻找文件的。所以我们开始一般都会选择True，便于错误信息的显示。</p><p>但是一旦DEBUG为False时，情况就不一样了，Django就不会代管你的静态文件了，而事实上一般静态文件都是通过第三方http服务器来代理转发。（如常见的服务器Nignx 和 Apache都会自动代理这些静态文件）</p><p>为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</span><br></pre></td></tr></table></figure></p><p>同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># STATICFILES_DIRS = [</span><br><span class="line">#     os.path.join(BASE_DIR, &quot;static&quot;),  # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾</span><br><span class="line"># ]</span><br></pre></td></tr></table></figure></p><p>打开eduline/urls.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from eduline.settings import  STATIC_ROOT</span><br><span class="line"></span><br><span class="line"> # 配置静态文件上传的访问处理url</span><br><span class="line">    re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><p>现在重新运行我们的项目，看看404是不是出来了。</p><p>500的页面的配置和这个一模一样（注意函数名为page_error），这里就不再赘述了。</p><p>至此，本篇关于全局页面配置的介绍就到此为止了，感谢你的赏阅。</p><p>本篇笔记对应于第二十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十三）：个人信息相关页面配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍个人信息相关页面的配置，具体包括我的课程，我的收藏，我的消息等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="我的课程"><a href="#我的课程" class="headerlink" title="我的课程"></a>我的课程</h2><p>老规矩，让我们的usercenter_mycourse继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-319545ed446c02a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import  MyCourseView</span><br><span class="line"></span><br><span class="line">  # 用户个人中心我的课程url</span><br><span class="line">    path(&quot;mycourse/&quot;, MyCourseView.as_view(), name=&quot;mycourse&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 用户个人中心我的课程函数</span><br><span class="line">class MyCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;usercenter-mycourse.html&quot; ,&#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-base.html</strong>页面设置我们的跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-fea4ba32f0dac566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后运行我们的项目，就可以点击我的课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-1403db83732b6b0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来就是课程的动态填充了，自己先尝试一下在MyCourseView这个函数里面写一下业务逻辑代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 用户个人中心我的课程函数</span><br><span class="line">class MyCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user)</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;usercenter-mycourse.html&quot;, &#123;</span><br><span class="line">            &quot;user_courses&quot;: user_courses,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>usercenter-mycourse.html</strong>页面,配置动态加载：<img src="https://upload-images.jianshu.io/upload_images/8964398-690999f130e7741b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着刷新我们的页面，就可以看到我的课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-8ed9625ffed880d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="我的收藏"><a href="#我的收藏" class="headerlink" title="我的收藏"></a>我的收藏</h2><h3 id="收藏授课机构"><a href="#收藏授课机构" class="headerlink" title="收藏授课机构"></a>收藏授课机构</h3><p>这里面有3个页面，我们一个个的来弄，先弄usercenter_fav_org页面。老规矩，让我们的usercenter_fav_org继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-7ac2c83c300b9bed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyFavOrgView</span><br><span class="line"></span><br><span class="line"> # 我收藏的课程机构url</span><br><span class="line">    path(&quot;myfav/org/&quot;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from operation.models import UserFavorite</span><br><span class="line">from organization.models import CourseOrg</span><br><span class="line"></span><br><span class="line"># 我收藏的课程机构函数</span><br><span class="line">class MyFavOrgView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        org_list = []</span><br><span class="line">        fav_orgs = UserFavorite.objects.filter(user=request.user, fav_type=2)</span><br><span class="line">        for fav_org in fav_orgs:</span><br><span class="line">            org_id = fav_org.fav_id</span><br><span class="line">            org = CourseOrg.objects.get(id=org_id)</span><br><span class="line">            org_list.append(org)</span><br><span class="line">        return render(request, &quot;usercenter-fav-org.html&quot;, &#123;</span><br><span class="line">            &quot;org_list&quot;: org_list,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-base.html</strong>页面设置我们的跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-f491da32873f0fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行我们的项目，就可以点击我的课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-8bc723c7812e746c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后打开<strong>usercenter-fav_org.html</strong>页面,配置动态加载：<img src="https://upload-images.jianshu.io/upload_images/8964398-c0077878adcca225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着刷新我们的页面，就可以看到我收藏的课程机构了：<img src="https://upload-images.jianshu.io/upload_images/8964398-57d6b623c40770e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="收藏课程机构"><a href="#收藏课程机构" class="headerlink" title="收藏课程机构"></a>收藏课程机构</h3><h3 id="收藏授课讲师"><a href="#收藏授课讲师" class="headerlink" title="收藏授课讲师"></a>收藏授课讲师</h3><p>我们现在来弄usercenter_fav_teacher页面。老规矩，让我们的usercenter_fav_teacher继承我们的usercenter_base.html页面：</p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyFavTeacherView</span><br><span class="line"></span><br><span class="line"> # 我收藏的授课讲师url</span><br><span class="line">    path(&quot;myfav/teacher/&quot;, MyFavTeacherView.as_view(), name=&quot;myfav_teacher&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from organization.models import Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 我收藏的授课讲师函数</span><br><span class="line">class MyFavTeacherView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        teacher_list = []</span><br><span class="line">        fav_teachers = UserFavorite.objects.filter(user=request.user, fav_type=3)</span><br><span class="line">        for fav_teacher in fav_teachers:</span><br><span class="line">            teacher_id = fav_teacher.fav_id</span><br><span class="line">            teacher = Teacher.objects.get(id=teacher_id)</span><br><span class="line">            teacher_list.append(teacher)</span><br><span class="line">        return render(request, &quot;usercenter-fav-teacher.html&quot;, &#123;</span><br><span class="line">            &quot;teacher_list&quot;: teacher_list,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-fav_teacher.html</strong>页面设置我们的跳转链接和配置动态加载：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-e79821fb038474dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-fd0520030670b0d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开oganization/models.py文件，在Teacher函数新增用于获取课程数的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get_course_nums(self):</span><br><span class="line">       return self.course_set.all().count()</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-d3fc266ea3d5247d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有记得去<strong>usercenter-fav_org.html</strong>页面设置我们的跳转链接，否则就跳不到机构讲师页面了：<img src="https://upload-images.jianshu.io/upload_images/8964398-5067fc86c1dbd38e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行我们的项目，就可以看到我收藏的授课讲师了：<img src="https://upload-images.jianshu.io/upload_images/8964398-903f59c9b2b1e1ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="收藏公开课程"><a href="#收藏公开课程" class="headerlink" title="收藏公开课程"></a>收藏公开课程</h3><p>我们现在来弄usercenter_fav_course页面。老规矩，让我们的usercenter_fav_course继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-5b4e12c94254a513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyFavCourseView</span><br><span class="line"></span><br><span class="line"> # 我收藏的公开课程url</span><br><span class="line">    path(&quot;myfav/course/&quot;, MyFavCourseView.as_view(), name=&quot;myfav_course&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from courses.models import Course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 我收藏的公开课程函数</span><br><span class="line">class MyFavCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        course_list = []</span><br><span class="line">        fav_courses = UserFavorite.objects.filter(user=request.user, fav_type=1)</span><br><span class="line">        for fav_course in fav_courses:</span><br><span class="line">            course_id = fav_course.fav_id</span><br><span class="line">            course = Course.objects.get(id=course_id)</span><br><span class="line">            course_list.append(course)</span><br><span class="line">        return render(request, &quot;usercenter-fav-course.html&quot;, &#123;</span><br><span class="line">            &quot;course_list&quot;: course_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-fav_course.html</strong>页面设置我们的跳转链接和配置动态加载：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-8b6bdac4aa269267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意：双箭头指示的url跳转需要在fav_xx.html这3个页面进行修改从而可以3个页面切换自如。</strong></p><p>然后运行我们的项目，就可以看到我收藏的公开课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-d9d51e4dbc703943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不过右边的取消收藏，也就是删除还没实现：<img src="https://upload-images.jianshu.io/upload_images/8964398-348fb86dc24fff7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们需要在3个fav_xx.html页面修改传递的id即可：<img src="https://upload-images.jianshu.io/upload_images/8964398-264a1b8e489390c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-00d90cdac7286015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-8450c8f41248d69b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后打开我们的<strong>usercenter_base.html</strong>页面，找到这3段代码，这就是实现删除的js代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-57f3013db82f4a52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意一下，这段代码里面需要放csrf_token,否则会出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(&apos;.jsDeleteFav_course&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">        var _this = $(this),</span><br><span class="line">            favid = _this.attr(&apos;data-favid&apos;);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">                cache: false,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url: &quot;/org/add_fav/&quot;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    fav_type: 1,</span><br><span class="line">                    fav_id: favid,</span><br><span class="line">                    csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos;</span><br><span class="line">                &#125;,</span><br><span class="line">                async: true,</span><br><span class="line">                success: function(data) &#123;</span><br><span class="line">                    Dml.fun.winReload();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(&apos;.jsDeleteFav_teacher&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">            var _this = $(this),</span><br><span class="line">                favid = _this.attr(&apos;data-favid&apos;);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                    cache: false,</span><br><span class="line">                    type: &quot;POST&quot;,</span><br><span class="line">                    url: &quot;/org/add_fav/&quot;,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        fav_type: 3,</span><br><span class="line">                        fav_id: favid,</span><br><span class="line">                        csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    async: true,</span><br><span class="line">                    success: function(data) &#123;</span><br><span class="line">                        Dml.fun.winReload();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $(&apos;.jsDeleteFav_org&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">            var _this = $(this),</span><br><span class="line">                favid = _this.attr(&apos;data-favid&apos;);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                    cache: false,</span><br><span class="line">                    type: &quot;POST&quot;,</span><br><span class="line">                    url: &quot;/org/add_fav/&quot;,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        fav_type: 2,</span><br><span class="line">                        fav_id: favid,</span><br><span class="line">                        csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    async: true,</span><br><span class="line">                    success: function(data) &#123;</span><br><span class="line">                        Dml.fun.winReload();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>至此，我的收藏3个相关页面就实现了，下面我们来配置我的消息页面。</p><h2 id="我的消息"><a href="#我的消息" class="headerlink" title="我的消息"></a>我的消息</h2><p>老规矩，让我们的usercenter_message.html继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-c1a8ea6926df13d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyMessageView</span><br><span class="line"></span><br><span class="line"> # 我的消息url</span><br><span class="line">    path(&quot;mymessage/&quot;, MyMessageView.as_view(), name=&quot;mymessage&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line">from operation.models import UserMessage</span><br><span class="line"></span><br><span class="line"># 我的消息函数</span><br><span class="line">class MyMessageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 取出所有的信息</span><br><span class="line">        all_messages = UserMessage.objects.filter(user=request.user.id)</span><br><span class="line">        # 对消息进行分页,尝试获取前端get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数则默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从all_courses中取出来，每页显示9个</span><br><span class="line">        p = Paginator(all_messages, 9, request=request)</span><br><span class="line"></span><br><span class="line">        messages = p.page(page)</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;usercenter-message.html&quot;, &#123;</span><br><span class="line">            &quot;messages&quot;: messages,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开usercenter_base.html页面，我们修改页面跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-03108323f89b120e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开usercenter_message.html页面，我们修改页面信息如下：<img src="https://upload-images.jianshu.io/upload_images/8964398-cedb4561ed5b90e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ebe8b2eb3ea23ce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开users/views.py文件，找到我们之前的注册函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 写入欢迎注册的信息</span><br><span class="line">            user_message = UserMessage()</span><br><span class="line">            user_message.user = user_profile.id</span><br><span class="line">            user_message.message = &quot;欢迎注册慕海学习网！&quot;</span><br><span class="line">            user_message.save()</span><br></pre></td></tr></table></figure></p><p>也就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-036e494c114106aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来打开xadmin后台，我们对应id给其加几条信息，然后刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-e0e03faa89ef718e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不知道你是否注意到我们页面顶部的小喇叭，这就是未读消息的提示，所以我们需要统计一下未读消息的数量。打开users/model.py文件，在UserProfile函数里面新增用于获取用户的未读消息的数量的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_unread_nums(self):</span><br><span class="line">       # 获取用户的未读消息的数量</span><br><span class="line">       from operation.models import UserMessage</span><br><span class="line">       return UserMessage.objects.filter(user=self.id).count()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-364da62a888407b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开base.html页面，找到并修改信息为图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-9f51412562fe059a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>突然刷新一下我们的页面，回到首页，看到有2条信息未读：<img src="https://upload-images.jianshu.io/upload_images/8964398-fce57b8a1501c063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后点击进入个人中心，发现消息没有了，又回到首页，发现有出现了。这是因为我们的消息页面还没配置完，我们需要全部页面配置。</p><p>Ctrl+shift+F调出全局搜索，在里面选择.html文件，然后搜索<strong>MsgNum</strong>，全部修改成那个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-b192344ec510a149.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，本篇关于个人信息相关页面的配置介绍就到此结束，感谢你的赏阅。</p><p>本篇笔记对应于第二十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十二）：个人资料及搜索配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8F%8A%E6%90%9C%E7%B4%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8F%8A%E6%90%9C%E7%B4%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍用户个人资料页面的配置，具体包括全局导航栏配置，全局搜索功能开发，个人中心资料展示，修改密码和头像以及页面表单提交等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="全局导航栏配置"><a href="#全局导航栏配置" class="headerlink" title="全局导航栏配置"></a>全局导航栏配置</h2><p>首先修改<strong>index.html</strong>页面，让它也继承我们的<strong>base.html</strong>页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d879ab42bacbb20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开<strong>base.html</strong>.html页面，我们做一下页面的链接跳转：<img src="https://upload-images.jianshu.io/upload_images/8964398-bf7fbb1257fc3a1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">&lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li &gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li &gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;</span><br><span class="line">公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li &gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;active&quot; &gt;&lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>这样跳转链接算是弄好了，但是我们暂时还不知道根据什么来判断当前页面已经被选中，所以我们需要仿照之前在课程机构里面的那样，增加一个current_nav用于指明当前页面的代号然后就可以根据某值是否相等来判断页面是否选中的状态了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># organizaton/views.py里面</span><br><span class="line">class TeacherListView(View):</span><br><span class="line"></span><br><span class="line">current_nav = &quot;teacher&quot;</span><br><span class="line"></span><br><span class="line"> return render(request, &quot;teachers-list.html&quot;, &#123;</span><br><span class="line">            &quot;current_nav&quot;: current_nav,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"># base.html页面里面</span><br><span class="line">&lt;li &#123;% if current_nav == &apos;teacher&apos; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>上述方法的确可以使用，但是有一个问题，就是为了满足前端页面的显示，你在后端每个涉及到的view里面都必须有current view，这是不是太麻烦了？这只是一级导航栏少而且没有二三级导航栏的情况下才可以，多了完全是不可以的。你看一下淘宝的页面导航栏：<img src="https://upload-images.jianshu.io/upload_images/8964398-c856c8e370990f12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那么问题来了，又什么好方法可以解决这个问题吗？答案是有的！</p><p>我们可以根据request.path中的前几位来判断当前处于何种页面，从而选中何种状态。你可能会糊涂，别急我举个例子给你说明一下：<br><code>http://127.0.0.1:8000/</code> 你肯定知道访问的是根目录；  <code>http://127.0.0.1:8000/course/detail/2</code>你肯定也知道访问的是课程相关的页面；<br><code>http://127.0.0.1:8000/org/teacher/detail</code>你肯定也知道访问的是讲师相关的页面；<br>鉴于此，我们就是采用这种方式来判断选中状态的。打开<strong>base.html</strong>.html页面，修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li &#123;% if request.path == &quot;/&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">                                &lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">&lt;li &#123;% if request.path|slice:&quot;7&quot; == &quot;/course&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;</span><br><span class="line">公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li &#123;% if request.path|slice:&quot;12&quot; == &quot;/org/teacher&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li &#123;% if request.path|slice:&quot;9&quot; == &quot;/org/list&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125; &gt;</span><br><span class="line">                                &lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>其中request.path是指访问的全路径地址，if request.path|slice:”12” == “/org/teacher”是指除了域名以外(此处域名为127.0.0.1)，从1-12位的地址等于/org/teacher即访问地址为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/org/teacher</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-868248e983868a27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的项目，发现是随着我们点哪个，哪个页面就是被选中状态。</p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="页面表单提交"><a href="#页面表单提交" class="headerlink" title="页面表单提交"></a>页面表单提交</h2><p>打开users/forms.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 用户信息修改表单提交</span><br><span class="line">class UserInfoForm(forms.ModelForm):</span><br><span class="line">    # 除了继承现有的字段还可以新增字段</span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserProfile</span><br><span class="line">        # 自定义需要验证的字段，注意与数据库中字段应保持一致</span><br><span class="line">        fields = [&quot;nick_name&quot;, &quot;birday&quot;, &quot;gender&quot;, &quot;address&quot;, &quot;mobile&quot;]</span><br></pre></td></tr></table></figure></p><p>然后打开我们的users/views.py文件，找到我们之前定义的userinfoview这个函数，我们新增它的post方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from .forms import UserInfoForm</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"> def post(self, request):</span><br><span class="line">        user_info_form = UserInfoForm(request.POST, instance=request.user)</span><br><span class="line">        if user_info_form.is_valid():</span><br><span class="line">            user_info_form.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(json.dumps(user_info_form.errors), content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure></p><p>然后尝试提交一下你刚才修改过的表单，发现提交没有问题。</p><p>至此，本篇关于用户个人资料页面及搜索框的配置就到此为止，感谢你的赏阅。</p><p>本篇笔记对应于第二十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a>。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十一）：讲师相关页面配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%B2%E5%B8%88%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%B2%E5%B8%88%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍讲师相关页面的配置，具体包括讲师列表页，讲师详情页等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十一篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="讲师详情页配置"><a href="#讲师详情页配置" class="headerlink" title="讲师详情页配置"></a>讲师详情页配置</h2><p>打开<strong>teacher-detail.html</strong>页面，修改<strong>teacher_detail.html</strong>页面，保留部分信息，其余删除，<code>   <section></section></code>里面  <section>是原来<strong>teacher_detail.html</strong>保留下来的一部分：<img src="https://upload-images.jianshu.io/upload_images/8964398-3c16b2f2f691d505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></section></p><p>接着打开organization/urls.py文件，新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 讲师详情页url</span><br><span class="line">    re_path(&apos;teacher/detail/(?P&lt;teacher_id&gt;\d+)/&apos;, TeacherDetailView.as_view(), name=&quot;teacher_detail&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开organization/views.py文件，新增代码（这里面的代码用途前面已经说过，这里不再细说）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 讲师详情页</span><br><span class="line">class TeacherDetailView(View):</span><br><span class="line">    def get(self, request, teacher_id):</span><br><span class="line">        # 取出当前id的讲师信息</span><br><span class="line">        teacher = Teacher.objects.get(id=int(teacher_id))</span><br><span class="line">        # 前面的teacher是数据库里面的字段，后一个则是上面取到的teacher</span><br><span class="line">        all_courses = Course.objects.filter(teacher=teacher)</span><br><span class="line"></span><br><span class="line">        has_fav_teacher = False</span><br><span class="line">        if UserFavorite.objects.filter(user=request.user, fav_type=3, fav_id=teacher.id):</span><br><span class="line">            has_fav_teacher = True</span><br><span class="line">        has_fav_org = False</span><br><span class="line">        if UserFavorite.objects.filter(user=request.user, fav_type=2, fav_id=teacher.org.id):</span><br><span class="line">            has_fav_org = True</span><br><span class="line"></span><br><span class="line">        # 讲师排行榜</span><br><span class="line">        sorted_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;teacher-detail.html&quot;, &#123;</span><br><span class="line">            &quot;teacher&quot;: teacher,</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">            &quot;sorted_teacher&quot;: sorted_teacher,</span><br><span class="line">            &quot;has_fav_teacher&quot;: has_fav_teacher,</span><br><span class="line">            &quot;has_fav_org&quot;: has_fav_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开我们的<strong>teacher-detail.html</strong>页面，进行数据的动态加载以及页面的跳转，这里就不附上代码的，大家自己去和我github上的页面源代码进行对比（先尝试自己修改，之后可以看一下）。</p><p>还有页面中左右两侧的收藏功能，这里我直接附上js代码(不懂位置的可以去查看github上的页面源代码)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_js %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//收藏分享</span><br><span class="line">function add_fav(current_elem, fav_id, fav_type)&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        cache: false,</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        url:&quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;,</span><br><span class="line">        data:&#123;&apos;fav_id&apos;:fav_id, &apos;fav_type&apos;:fav_type&#125;,</span><br><span class="line">        async: true,</span><br><span class="line">        beforeSend:function(xhr, settings)&#123;</span><br><span class="line">            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">            if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                    window.location.href=&quot;/login/?next=&#123;&#123; request.path &#125;&#125;&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(data.msg)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                current_elem.text(data.msg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; teacher.id &#125;&#125;, 3);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; teacher.org.id &#125;&#125;, 2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    window._bd_share_config = &#123;</span><br><span class="line">        &quot;common&quot;:&#123;&quot;bdSnsKey&quot;:&#123;&#125;,&quot;bdText&quot;:&quot;&quot;,&quot;bdMini&quot;:&quot;1&quot;,&quot;bdMiniList&quot;:[&quot;mshare&quot;,&quot;qzone&quot;,&quot;tsina&quot;,&quot;weixin&quot;,&quot;sqq&quot;],&quot;bdPic&quot;:&quot;&quot;,&quot;bdStyle&quot;:&quot;0&quot;,&quot;bdSize&quot;:&quot;16&quot;&#125;,</span><br><span class="line">        share : [</span><br><span class="line">                   &#123;</span><br><span class="line">&quot;info&quot; : &quot;share_&#123;&#123; teacher.id &#125;&#125;&quot;,</span><br><span class="line">&quot;bdSize&quot; : 16,</span><br><span class="line">                       &quot;bdText&quot;:&quot;授课教师-&#123;&#123; teacher.name &#125;&#125;-慕海学习网&quot;,</span><br><span class="line">                       &quot;bdDesc&quot;: &quot;我在#慕海学习网#发现了老师“&#123;&#123; teacher.name &#125;&#125;”，对我们学习很有帮助，一起来看看吧&quot;,</span><br><span class="line">                        &quot;bdUrl&quot;: &apos;http://eduline.licheetools.top&#123;% url &apos;org:teacher_detail&apos; teacher.id %&#125;&apos;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">//以下为js加载部分</span><br><span class="line">with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?cdnversion=&apos;+~(-new Date()/36e5)];</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>顺便大家可以把之前<strong>teacher_list.html</strong>中的页面跳转弄一下（可以配置的尽量先配置）。</p><p>至此，我们本篇关于讲师详情页面的介绍就到此为止，感谢你的赏阅。</p><p>本篇笔记对应于第二十一篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十）：课程相关页面配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍课程相关页面的配置，具体包括课程章节信息，章节视频信息，课程评论页面，相关课程推荐，课程播放页面等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="课程章节信息配置"><a href="#课程章节信息配置" class="headerlink" title="课程章节信息配置"></a>课程章节信息配置</h2><p>老规矩，把前端资料里面的<strong>course-video.html</strong>和<strong>course-comment.html</strong>页面拷贝到我们的templates文件夹里面，接着修改<strong>course-video.html</strong>页面，保留部分信息，其余删除，<code>   <div id="main"></div></code>里面  <div id="main">是原来<strong>course-video.html</strong>保留下来的一部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;公开课视频信息 - 慕海学习网&#123;% endblock %&#125;</span><br><span class="line">&#123;% block custom_bread %&#125;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">        &lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">            &lt;ul  class=&quot;crumbs&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; course.id %&#125;&quot;&gt;课程详情&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;章节信息&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block custom_css %&#125;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/base.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/common-less.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/learn-less.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/aui.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/mooc.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/common-less.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125; </span><br><span class="line">  &lt;div id=&quot;main&quot;&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></div></p><p>就是这个样子（这里面的静态文件路径和url的跳转我都做好了，你按照图示进行修改即可）：<img src="https://upload-images.jianshu.io/upload_images/8964398-b3bbdc7483045d07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开course/urls.py文件，新增以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import CourseInfoView</span><br><span class="line"></span><br><span class="line"># 课程章节信息页url</span><br><span class="line">    re_path(&apos;info/(?P&lt;course_id&gt;.*)/&apos;, CourseInfoView.as_view(), name=&quot;course_info&quot;),</span><br></pre></td></tr></table></figure></p><p>接着打开course/views.py文件，新增以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息</span><br><span class="line">class CourseInfoView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>现在打开<strong>course-detail.html</strong>页面，ctrl+F搜索“开始学习”，配置跳转路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;buy btn&quot;&gt;&lt;a style=&quot;color: white&quot; href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;开始学习&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ad64e748fdee38c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行项目，点击课程详情页面的开始学习就进入到课程章节信息页面了：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-4cf94752664cffe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在在后台为指定某一门课添加课程章节信息，便于我们后面的测试：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-637118139c1ad452.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="章节视频信息配置"><a href="#章节视频信息配置" class="headerlink" title="章节视频信息配置"></a>章节视频信息配置</h2><p>接下来获取课程的章节：打开courses/models.py文件，在Course函数里面，新定义函数def get_course_lesson用于获取课程的章节：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_course_lesson(self):</span><br><span class="line">    # 获取课程所有章节</span><br><span class="line">    return self.lesson_set.all()</span><br></pre></td></tr></table></figure></p><p>在lesson函数里面，新定义函数def get_lesson_video用于获取章节的视频信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_lesson_video(self):</span><br><span class="line">    # 获取章节视频信息</span><br><span class="line">    return self.video_set.all()</span><br></pre></td></tr></table></figure></p><p>现在打开<strong>course-video.html</strong>页面，配置数据的动态显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for lesson in course.get_course_lesson %&#125;</span><br><span class="line">                        &lt;div class=&quot;chapter chapter-active&quot; &gt;</span><br><span class="line">                        &lt;h3&gt;</span><br><span class="line">                            &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt;</span><br><span class="line">                        &lt;/h3&gt;</span><br><span class="line">                        &lt;ul class=&quot;video&quot;&gt;</span><br><span class="line">                           &#123;% for video in lesson.get_lesson_video %&#125;</span><br><span class="line">                               &lt;li&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;)</span><br><span class="line">                                    &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                           &#123;% endfor %&#125;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-9903f3e0721c6d48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>前面说过，你可以选择不定义函数，自己调用它的queryset方法，那么只需修改<strong>course-video.html</strong>页面，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for lesson in course.lesson_set.get_queryset%&#125;</span><br><span class="line">                        &lt;div class=&quot;chapter chapter-active&quot; &gt;</span><br><span class="line">                        &lt;h3&gt;</span><br><span class="line">                            &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt;</span><br><span class="line">                        &lt;/h3&gt;</span><br><span class="line">                        &lt;ul class=&quot;video&quot;&gt;</span><br><span class="line">                           &#123;% for video in lesson.video_set.get_queryset %&#125;</span><br><span class="line">                               &lt;li&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;)</span><br><span class="line">                                    &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                           &#123;% endfor %&#125;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-b2ca42a985cc7581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="资源下载功能"><a href="#资源下载功能" class="headerlink" title="资源下载功能"></a>资源下载功能</h3><p>第一步，前往xadmin后台为某一门课添加课程资源，第二步打开courses/views.py文件，修改视图函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from .models import  CourseResource</span><br><span class="line"></span><br><span class="line">all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-828abb0a7594fc23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在打开<strong>course-video.html</strong>页面，配置资源下载的动态显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for resources in all_resources %&#125;</span><br><span class="line">                               &lt;li&gt;</span><br><span class="line">                                &lt;span &gt;&lt;i class=&quot;aui-iconfont aui-icon-file&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&#123;&#123; resources.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;a href=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; resources.download &#125;&#125;&quot; class=&quot;downcode&quot; target=&quot;_blank&quot; download=&quot;&quot; data-id=&quot;274&quot; title=&quot;&quot;&gt;下载&lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                           &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-dc8cd235382f971f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新页面，发现显示没有问题。<br>接下在<strong>course-video.html</strong>页面完成课程信息的修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;static-item &quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.get_degree_display &#125;&#125;&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;meta&quot;&gt;难度&lt;/span&gt;</span><br><span class="line">                    &lt;em&gt;&lt;/em&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;static-item static-time&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.learn_times &#125;&#125;分钟&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;meta&quot;&gt;时长&lt;/span&gt;</span><br><span class="line">                    &lt;em&gt;&lt;/em&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;static-item&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.students &#125;&#125;人&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;meta&quot;&gt;学习人数&lt;/span&gt;</span><br><span class="line">                    &lt;em&gt;&lt;/em&gt;</span><br><span class="line">                &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>在配置讲师提示的时候，发现讲师和课程之间没有建立外键连接，所以在courses/models.py文件的Course函数，新增讲师字段 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from organization.models import Teacher</span><br><span class="line"></span><br><span class="line">teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, verbose_name=&quot;讲师&quot;, null=True, blank=True)</span><br></pre></td></tr></table></figure></p><p><strong>记得数据库的变动需要两部曲：makemigrations和migrate</strong>。</p><p>然后前往xadmin后台为这门课添加一个讲师。</p><p>然后修改<strong>course-video.html</strong>页面,修改信息成图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-77d8a08af9fe0a35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新页面，发现显示没有问题。</p><h2 id="课程评论页面配置"><a href="#课程评论页面配置" class="headerlink" title="课程评论页面配置"></a>课程评论页面配置</h2><p>打开courses/urls.py文件，配置课程评论页面的url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import CourseCommentView</span><br><span class="line"></span><br><span class="line"> # 课程评论页面url</span><br><span class="line">    re_path(&apos;comment/(?P&lt;course_id&gt;.*)/&apos;, CourseCommentView.as_view(), name=&quot;course_comment&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开courses/views.py文件，新定义课程评论页面函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from operation.models import CourseComments</span><br><span class="line"></span><br><span class="line"># 课程评论页面</span><br><span class="line">class CourseCommentView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        all_comments = CourseComments.objects.all()</span><br><span class="line">        return render(request, &quot;course-comment.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;all_comments&quot;: all_comments,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开<strong>course-comment.html</strong>页面,修改跳转代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a class=&quot;ui-tabs-active active&quot; id=&quot;learnOn&quot;  href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;&lt;span&gt;章节&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a id=&quot;commentOn&quot; class=&quot;&quot; href=&quot;&#123;% url &apos;course:course_comment&apos; course.id %&#125;&quot;&gt;&lt;span&gt;评论&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>course-comment.html</strong>页面，修改课程信息，资料下载，讲师提示等（和前面在video页面配置的一模一样，这里不再介绍）：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1682fe0d4362ab4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ed0e8d429601f13c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-40151fefe9eba970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来打开courses/views.py文件，新定义用于用户增加课程评论的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 用户增加课程评论</span><br><span class="line">class AddCommentView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        if not request.user.is_authenticated:</span><br><span class="line">            # 未登录时页面提示未登录，并跳转到登录页面</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        course_id = request.POST.get(&quot;course_id&quot;, 0)</span><br><span class="line">        comments = request.POST.get(&quot;comments&quot;, &apos;&apos;)</span><br><span class="line">        if course_id &gt;0 and comments:</span><br><span class="line">            course_comments = CourseComments()</span><br><span class="line">            # get方法只能取出一条数据，如果有多条则抛出异常而且没有数据也抛异常</span><br><span class="line">            # filter方法可以取一个列表出来（可以遍历的queryset），没有数据返回空的queryset，是不会抛异常的</span><br><span class="line">            course = Course.objects.get(id=int(course_id))</span><br><span class="line">            course_comments.course = course</span><br><span class="line">            course_comments.comment = comments   # 前面comment为数据库中定义字段，要保持一致，否则数据存入不数据库</span><br><span class="line">            course_comments.user = request.user</span><br><span class="line">            course_comments.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;评论成功&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;评论失败&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure></p><p>现在回到courses/urls.py文件，我们来配置访问的url:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import  AddCommentView</span><br><span class="line"></span><br><span class="line">    # 用户增加课程评论页面url,注意此处为普通的url因为在post中，我们已经有了参数</span><br><span class="line">    path(&apos;add_comment/&apos;, AddCommentView.as_view(), name=&quot;add_comment&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>course-comment.html</strong>页面，在页面底部增加js代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_js %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //添加评论</span><br><span class="line">    $(&apos;#js-pl-submit&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">        var comments = $(&quot;#js-pl-textarea&quot;).val()</span><br><span class="line">        if(comments == &quot;&quot;)&#123;</span><br><span class="line">            alert(&quot;评论不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            cache: false,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            url:&quot;&#123;% url &apos;course:add_comment&apos; %&#125;&quot;,</span><br><span class="line">            data:&#123;&apos;course_id&apos;:&#123;&#123; course.id &#125;&#125;, &apos;comments&apos;:comments&#125;,</span><br><span class="line">            async: true,</span><br><span class="line">            beforeSend:function(xhr, settings)&#123;</span><br><span class="line">                xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">                if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                    if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                        window.location.href=&quot;&#123;% url &apos;login&apos; %&#125;&quot;;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                    window.location.reload();//刷新当前页面.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>继续在该页面修改如下代码，使页面评论可以动态加载出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for user_comments in all_comments %&#125;</span><br><span class="line">                                  &lt;li class=&quot;post-row&quot;&gt;</span><br><span class="line">                                &lt;div class=&quot;media&quot;&gt;</span><br><span class="line">                                    &lt;span target=&quot;_blank&quot;&gt;&lt;img src=&apos;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; user_comments.user.image &#125;&#125;&apos; width=&apos;40&apos; height=&apos;40&apos; /&gt;&lt;/span&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                                &lt;div class=&quot;bd&quot;&gt;</span><br><span class="line">                                    &lt;div class=&quot;tit&quot;&gt;</span><br><span class="line">                                        &lt;span target=&quot;_blank&quot;&gt;&#123;&#123; user_comments.user.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;p class=&quot;cnt&quot;&gt;&#123;&#123; user_comments.user.comment &#125;&#125;&lt;/p&gt;</span><br><span class="line">                                    &lt;div class=&quot;footer clearfix&quot;&gt;</span><br><span class="line">                                        &lt;span title=&quot;创建时间&quot; class=&quot;l timeago&quot;&gt;&#123;&#123; user_comments.add_time &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                             &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后你可以在图示位置打上断点，开启debug模式：<img src="https://upload-images.jianshu.io/upload_images/8964398-6b4c20d53f176ce4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f20cba60de8ea866.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>发现没有问题，我们可以去掉断点，自己再增加一条，页面是不是已经自动更新了你的评论内容。</p><h2 id="相关课程推荐配置"><a href="#相关课程推荐配置" class="headerlink" title="相关课程推荐配置"></a>相关课程推荐配置</h2><p>打开courses/views.py文件，找到CourseInfoView这个函数，修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息</span><br><span class="line">class CourseInfoView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line"></span><br><span class="line">        # 取出所有选过这门课的学生</span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        # 取出所有选过这门课的学生的id,采用递归表达式形式</span><br><span class="line">        user_ids = [user_course.user.id for user_course in user_courses]</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程</span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式</span><br><span class="line">        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]</span><br><span class="line">        # 取出学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5]</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p><strong>注意：双下划线代表代表传进来的是一个可以遍历的list。</strong><br>接着就是在前端页面配置动态加载信息了（记得course-video.html和course_comment.html这两个页面都需要配置，一模一样）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;other-list&quot;&gt;</span><br><span class="line">                                   &#123;% for relate_course in relate_courses %&#125;</span><br><span class="line">                                       &lt;li class=&quot;curr&quot;&gt;</span><br><span class="line">                                           &lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                                               &lt;img src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot;</span><br><span class="line">                                                    alt=&quot;&#123;&#123; relate_course.name &#125;&#125;&quot;&gt;</span><br><span class="line">                                               &lt;span class=&quot;name autowrap&quot;&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                           &lt;/a&gt;</span><br><span class="line">                                       &lt;/li&gt;</span><br><span class="line">                                   &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">                               &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-d51a2ca76b7ca285.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新一下我们的页面，发现没有问题！</p><p>不过还有一个问题，那就是用户如果没有登录，那是不能让他进入课程章节这个页面的，因此需要判断一下。这里因为使用的是方法型编程所以可以使用装饰器loginrequired来进行判断。</p><p>在utils文件夹下面，新建一个名为mixin_utils.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.decorators import login_required</span><br><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LoginRequiredMixin(object):</span><br><span class="line"></span><br><span class="line">    @method_decorator(login_required(login_url=&apos;/login/&apos;))</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>接着打开courses/views.py文件，在里面修改CourseInfoView和CourseCommentView，修改后如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from utils.mixin_utils import LoginRequiredMixin</span><br><span class="line"></span><br><span class="line"># 课程章节信息</span><br><span class="line">class CourseInfoView(LoginRequiredMixin, View):</span><br><span class="line">     login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;redirect_to&apos;</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line"></span><br><span class="line">        # 查询用户是否已经开始学习了该课程，如果没有则开始学习</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user, course=course)</span><br><span class="line">        if not user_courses:</span><br><span class="line">            user_course = UserCourse(user=request.user, course=course)</span><br><span class="line">            course.students += 1</span><br><span class="line">            course.save()</span><br><span class="line">            user_course.save()</span><br><span class="line"></span><br><span class="line">        # 取出所有选过这门课的学生</span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        # 取出所有选过这门课的学生的id,采用递归表达式形式</span><br><span class="line">        user_ids = [user_course.user.id for user_course in user_courses]</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程</span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式</span><br><span class="line">        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]</span><br><span class="line">        # 取出学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5]</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程评论页面</span><br><span class="line">class CourseCommentView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;redirect_to&apos; </span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        all_comments = CourseComments.objects.all()</span><br><span class="line">        return render(request, &quot;course-comment.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;all_comments&quot;: all_comments,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>刷新一下页面，点几个课程试试看，发现都在该同学还学过哪些课里推荐了。</p><h2 id="课程播放页面配置"><a href="#课程播放页面配置" class="headerlink" title="课程播放页面配置"></a>课程播放页面配置</h2><p>老规矩，把前端资料里面的<strong>course-play.html</strong>拷贝到我们的templates文件夹里面，然后替换继承base页面，这里就不细说了，直接贴图：<img src="https://upload-images.jianshu.io/upload_images/8964398-77d8993a8440498c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>打开courses/urls.py文件，新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from .views import  VideoPlayView</span><br><span class="line"></span><br><span class="line"># 视频播放页面url</span><br><span class="line">re_path(&apos;video/(?P&lt;video_id&gt;.*)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),</span><br><span class="line">或者 re_path(&apos;video/(?P&lt;video_id&gt;\d+)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),都是可以的</span><br></pre></td></tr></table></figure></p><p>接着打开courses/views.py文件，新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from .models import  Video</span><br><span class="line"></span><br><span class="line"># 视频播放页面</span><br><span class="line">class VideoPlayView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;redirect_to&apos;</span><br><span class="line">    </span><br><span class="line">    def get(self, request, video_id):</span><br><span class="line">        video = Video.objects.get(id=int(video_id))</span><br><span class="line">        course = video.lesson.course</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        # 查询用户是否已经开始学习了该课程，如果没有则开始学习</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user, course=course)</span><br><span class="line">        if not user_courses:</span><br><span class="line">            user_course = UserCourse(user=request.user, course=course)</span><br><span class="line">            course.students += 1</span><br><span class="line">            course.save()</span><br><span class="line">            user_course.save()</span><br><span class="line"></span><br><span class="line">        # 取出所有选过这门课的学生</span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        # 取出所有选过这门课的学生的id,采用递归表达式形式</span><br><span class="line">        user_ids = [user_course.user.id for user_course in user_courses]</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程</span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式</span><br><span class="line">        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]</span><br><span class="line">        # 取出学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5]</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;course-play.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">            &quot;video&quot;: video,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>上面的代码和之前在课程章节信息里面定义的几乎一模一样，只是course的来源不一样。</p><p>接着打开<strong>course-video.html</strong>文件，配置跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for video in lesson.get_lesson_video %&#125;</span><br><span class="line">                                    &lt;li&gt;</span><br><span class="line">                                        &lt;a target=&quot;_blank&quot; href=&apos;&#123;% url &apos;course:video_play&apos; video.id %&#125;&apos;</span><br><span class="line">                                           class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;)</span><br><span class="line">                                            &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                        &lt;/a&gt;</span><br><span class="line">                                    &lt;/li&gt;</span><br><span class="line">                                &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>course-video.html</strong>文件，配置视频链接，记住由于我们这边是<strong>type=’video/mp4’</strong>所以后台所添加的视频必须是<strong>.mp4</strong>结尾，否则会出错。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-e04e8316b3d9ac6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>刷新一下，发现页面跳转没有问题，显示也没有问题。</p><p>大家可以把自己的视频上传到七牛云，然后把生成的外键添加到后台即可,这里不详细介绍，直接开启传送大门：<a href="https://jingyan.baidu.com/article/335530da81510219cb41c3ce.html" target="_blank" rel="noopener">七牛云存储如何上传视频文件</a></p><p>至此，本篇关于课程相关页面的配置介绍就到此结束，感谢你的赏阅。</p><p>本篇笔记对应于第二十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十九）：课程详情页配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍课程详情页面的配置，这个页面和我们之前配置的页面差别不是很大，可以借鉴前面的配置。</p><p>本篇笔记对应于第十九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>小伙伴们可能会问了，这篇笔记还没开始写怎么就开始总结了呢？是的，尽管没写但是我觉得非常有必要在这里总结一下，特别是对之前讲的信息的总结。后面随着开发进度的加快，一些东西我就不会详细介绍了，因为都是非常类似的操作。</p><p>我们现在可以理解MTV的模式就应该是这样子的：<strong>新建数据库字段(models)–&gt;配置访问路径(urls) –&gt;新建视图函数(views) –&gt; 页面信息动态加载(templates)</strong>，所以后面的操作就是这个过程，大家在学习的时候对此要有一个清醒的认识。</p><p>话不多说，我们正式进入今天的学习内容，走你。</p><h2 id="课程列表页配置"><a href="#课程列表页配置" class="headerlink" title="课程列表页配置"></a>课程列表页配置</h2><p>老规矩，把前端资料里面的course-list.html页面拷贝到我们的templates文件夹里面，接着配置url,在eduline/urls.py文件新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程相关应用path配置</span><br><span class="line">path(&quot;course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)),</span><br></pre></td></tr></table></figure></p><p>然后打开courses应用，在里面新建urls.py文件并在里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path, include, re_path</span><br><span class="line">from .views import CourseListView</span><br><span class="line"></span><br><span class="line">app_name = &quot;courses&quot;</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;list/&apos;, CourseListView.as_view(), name=&apos;course_list&apos;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>现在打开courses/views.py文件，我们添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>运行一下我们的项目，在浏览器地址栏输入：<a href="http://127.0.0.1:8000/course/list/然后回车出现：![](https://upload-images.jianshu.io/upload_images/8964398-76c1aaf58130dc4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/course/list/然后回车出现：![](https://upload-images.jianshu.io/upload_images/8964398-76c1aaf58130dc4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>可以发现访问没有问题，但是样式并没有加载出来。我们仔细观察course_list.html页面之后发现它和之前的org_list.html页面一样是具有共同的头部和尾部，因此我们可以继承base.html页面。</p><p>在course_list.html里面删除所有代码，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;公开课列表 - 慕海学习网&#123;% endblock %&#125;</span><br><span class="line">&#123;% block custom_bread %&#125;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">        &lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">            &lt;ul  class=&quot;crumbs&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;公开课&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;section&gt;   &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-819c847fba1ca896.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后是回到我们的courses/views.py文件，我们修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line"># Create your views here.</span><br><span class="line">from .models import Course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_courses = Course.objects.all()</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>回到course_list.html页面，修改代码为图示信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-856b9001b703c465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="分页功能配置"><a href="#分页功能配置" class="headerlink" title="分页功能配置"></a>分页功能配置</h3><p>直接仿照我们当时在org_list.html的配置，拷贝如下代码至courses/views.py文件里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"># 对课程进行分页,尝试获取前端get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数则默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从all_courses中取出来，每页显示9个</span><br><span class="line">        p = Paginator(all_courses, 9, request=request)</span><br><span class="line"></span><br><span class="line">        courses = p.page(page)</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开course_list.html文件，修改代码为图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-41ef01a0822b5c92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在html中注意此刻不再是all_courses，前面说过此时的all_courses已经不是一个queryset对象，而是一个purepage对象，所以应该用all_courses.object_list。</p><p>还有复制org_list的页面分页代码，并将all_orgs修改为all_courses,就是这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;pageturn&quot;&gt;</span><br><span class="line">                           &lt;ul class=&quot;pagelist&quot;&gt;</span><br><span class="line">                               &#123;% if all_courses.has_previous %&#125;</span><br><span class="line">                                   &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">                                   &lt;/li&gt;</span><br><span class="line">                               &#123;% endif %&#125;</span><br><span class="line">                               &#123;% for page in all_courses.pages %&#125;</span><br><span class="line">                                   &#123;% if page %&#125;</span><br><span class="line">                                       &#123;% ifequal page all_courses.number %&#125;</span><br><span class="line">                                           &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                       &#123;% else %&#125;</span><br><span class="line">                                           &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                       &#123;% endifequal %&#125;</span><br><span class="line">                                   &#123;% else %&#125;</span><br><span class="line">                                       &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                   &#123;% endif %&#125;</span><br><span class="line">                               &#123;% endfor %&#125;</span><br><span class="line">                               &#123;% if all_courses.has_next %&#125;</span><br><span class="line">                                   &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                               &#123;% endif %&#125;</span><br><span class="line">                           &lt;/ul&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="排序功能的配置"><a href="#排序功能的配置" class="headerlink" title="排序功能的配置"></a>排序功能的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3a27f994033a89dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>和前面在org_list页面的配置一模一样，我们复制粘贴并修改一下那些代码，放到courses/views.py文件里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">all_courses = Course.objects.all().order_by(&quot;-add_time&quot;) # 默认是按添加顺序反着排序</span><br><span class="line"># 最热门和参与人数排名</span><br><span class="line">        # 最热门hot根据点击数来判断</span><br><span class="line">        # 参与人数是根据学习人数来判断</span><br><span class="line">        sort = request.GET.get(&apos;sort&apos;, &apos;&apos;)</span><br><span class="line">        if sort:</span><br><span class="line">            if sort == &quot;students&quot;:</span><br><span class="line">                all_courses = all_courses.order_by(&quot;-students&quot;)</span><br><span class="line">            elif sort == &quot;hot&quot;:</span><br><span class="line">                all_courses = all_courses.order_by(&quot;-click_nums&quot;)</span><br><span class="line"></span><br><span class="line">return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;sort&quot;: sort,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>现在打开course_list.html文件，我们将上述功能和选中状态进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;tab_header&quot;&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% ifequal sort &apos;&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=&quot;&gt;最新 &lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% ifequal sort &apos;hot&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=hot&quot;&gt;最热门&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% ifequal sort &apos;students&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&quot;&gt;参与人数&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f262bff947c23249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="热门课程推荐"><a href="#热门课程推荐" class="headerlink" title="热门课程推荐"></a>热门课程推荐</h3><p>打开courses/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 热门课程推荐</span><br><span class="line">      hot_courses = Course.objects.all().order_by(&quot;-students&quot;)[:3]</span><br><span class="line">     return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">          &quot;hot_courses&quot;: hot_courses,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开course_list.html文件，将热门课程推荐进行动态加载：<img src="https://upload-images.jianshu.io/upload_images/8964398-16c821012b786c25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>运行一下我们的项目，在浏览器地址栏输入<a href="http://127.0.0.1:8000/course/list/回车，发现课程难度显示有问题：![](https://upload-images.jianshu.io/upload_images/8964398-81c3e7a2a4f9840d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/course/list/回车，发现课程难度显示有问题：![](https://upload-images.jianshu.io/upload_images/8964398-81c3e7a2a4f9840d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>我们需要修改<strong>{ hot_course.degree }}</strong>为 <strong>{ hot_course.get_degree_display }}</strong>，这个字段的意思是说得到degree的字段显示，并不是得到它本身，事实上它本身为英文。（专门针对choices的显示）</p><p>现在刷新一下我们的页面，难度等级正常显示了，没有问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-3563d809a51410cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此课程列表页的介绍到此结束，下面我们介绍课程详情页面。</p><h2 id="课程详情页配置"><a href="#课程详情页配置" class="headerlink" title="课程详情页配置"></a>课程详情页配置</h2><p>老规矩，把前端资料里面的course-detail.html页面拷贝到我们的templates文件夹里面，正常情况下我们应该配置url，但是鉴于此处的course-detail.html页面会继承我们之前的course-list.html页面，所以我们就先把course-detail.html页面给配置完，然后才开始url的配置。</p><p>打开course-detail.html页面，删除所有代码，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;课程详情页 - 慕海学习网&#123;% endblock %&#125;</span><br><span class="line">&#123;% block custom_bread %&#125;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">        &lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">            &lt;ul  class=&quot;crumbs&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&#123;&#123; course.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">    &lt;section&gt;   &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接着配置url,打开courses/urls.py文件并在里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import CourseDetailView</span><br><span class="line"></span><br><span class="line"> # 课程机构首页url</span><br><span class="line">    re_path(&apos;detail/(?P&lt;course_id&gt;.*)/&apos;, CourseDetailView.as_view(), name=&quot;course_detail&quot;),</span><br></pre></td></tr></table></figure></p><p>现在书写我们的视图函数，打开courses/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 课程详情页</span><br><span class="line">class CourseDetailView(View):</span><br><span class="line">    def get(self, request，course_id):  # 所有re_path在请求参数的时候必须带上id</span><br><span class="line">        return render(request, &quot;course-detail.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>然后配置页面的跳转链接，我们希望可以从课程列表页面跳转进来，所以打开course_list.html页面，将图中信息修改为所示信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-d3cb90079c018b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来修改我们的view(courses/views.py文件)，准备页面信息的动态加载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 课程详情页</span><br><span class="line">class CourseDetailView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">#注意一下此处的id是数据库表默认为我们添加的</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        return render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开course_detail.html页面，使我们的数据得到动态加载并显示出来。</p><p>注意章节数和学习用户的获取方式：在courses/modles.py文件里面的Course类里面定义一个get-zj-nums方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    # 获取课程章节数</span><br><span class="line">    return self.lesson_set.all().count()</span><br></pre></td></tr></table></figure></p><p>还有学习用户的获取方式：我们之前在operation中专门定义了一个类UserCourse用于对用户学习作记录的。既然存在了这个类（数据库生成和迁移操作之后是一张表），那我们就可以采用获取学习章节数的方式来获取它。</p><p>同样在courses/modles.py文件里面的Course类里面定义一个get-learn-users方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_learn_users(self):</span><br><span class="line">   # 获取学习用户数，此处不用统计，我们只取出5个即可</span><br><span class="line">   return self.usercourse_set.all()[:5]</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-78d2c52750ccce9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在打开course_detail.html页面，将信息修改为图示那样：<img src="https://upload-images.jianshu.io/upload_images/8964398-453027970bd19369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后去xadmin后台新增用户课程，记得把刚才展示的课程加里面去，便于我们观察是否成功显示：<img src="https://upload-images.jianshu.io/upload_images/8964398-59e6907f4239f8f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>还有一个问题，就是你现在点进这个页面，那么相应课程的点击数应该加1，所以在我们的view(courses/views.py文件),新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程点击数增加</span><br><span class="line">        course.click_nums += 1</span><br><span class="line">        course.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-84f93695989d106f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="授课机构的配置"><a href="#授课机构的配置" class="headerlink" title="授课机构的配置"></a>授课机构的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cf1706b499a872c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意教师数的获取方式：<br>注意章节数和学习用户的获取方式：在organization/modles.py文件里面的CourseOrg类里面定义一个get_teacher_nums方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_teacher_nums(self):</span><br><span class="line"># 获取教师数</span><br><span class="line">return self.teacher_set.all().count()</span><br></pre></td></tr></table></figure></p><p>然后html页面调用，采用如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; course.course_org.get_teacher_nums &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>当然如果你不想自定义函数，那也是可以的，你仅仅只需要在前端页面采用如下代码即可,是不是更简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; course.course_org.teacher_set.count &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们完成右侧下面的相关课程推荐模块。</p><h3 id="相关课程推荐"><a href="#相关课程推荐" class="headerlink" title="相关课程推荐"></a>相关课程推荐</h3><p>这个就是相关课程推荐的页面，我们接下来就是完成这个功能：<img src="https://upload-images.jianshu.io/upload_images/8964398-aa0c51f45bf52346.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开courses/views.py文件，在CourseDetailView函数里面新增用于实现相关课程推荐功能的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 相关课程推荐</span><br><span class="line">        # 此处为course而不是Course,我们是用前面取出的课程</span><br><span class="line">        tag = course.tag</span><br><span class="line">        if tag:</span><br><span class="line">#  这里必须从1开始不然会推荐自己，也就是索引0</span><br><span class="line">            relate_courses = Course.objects.filter(tag=tag)[1:2]</span><br><span class="line">        else:</span><br><span class="line">            relate_courses = []</span><br><span class="line"> return render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-2816b3f02ea99fd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着在<strong>course-detail.html</strong>页面修改页面展示信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for relate_course in relate_courses %&#125;</span><br><span class="line">                        &lt;dl&gt;</span><br><span class="line">                            &lt;dt&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt;</span><br><span class="line">                                    &lt;img width=&quot;240&quot; height=&quot;220&quot; class=&quot;scrollLoading&quot;</span><br><span class="line">                                         src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot;/&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/dt&gt;</span><br><span class="line">                            &lt;dd&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt;</span><br><span class="line">                                    &lt;h2&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt;</span><br><span class="line">                                &lt;span class=&quot;fl&quot;&gt;学习时长：&lt;i class=&quot;key&quot;&gt;&#123;&#123; relate_course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">                            &lt;/dd&gt;</span><br><span class="line">                        &lt;/dl&gt;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-857f3b208b3ee826.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后去xadmin后台或者数据库中将几个课程的tag修改为同一个，然后再运行一下我们的项目，就出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-9ba5b0ab315442bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在还差页面中的收藏和开始学习这两个功能的配置了，开始学习我们在下一篇介绍。</p><h3 id="实现收藏功能"><a href="#实现收藏功能" class="headerlink" title="实现收藏功能"></a>实现收藏功能</h3><p>我们之前在课程机构里面配置过收藏的功能，如果不熟悉的小伙伴们可以回顾一下第十八篇：<br><a href="https://www.jianshu.com/p/e99b55f970fa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置</a>，这里我就快速介绍一下：<br>首先在<strong>course-detail.html</strong>页面底部添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_js %&#125;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        //收藏分享</span><br><span class="line">        function add_fav(current_elem, fav_id, fav_type) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                cache: false,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url: &quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;,</span><br><span class="line">                data: &#123;&apos;fav_id&apos;: fav_id, &apos;fav_type&apos;: fav_type&#125;,</span><br><span class="line">                async: true,</span><br><span class="line">                beforeSend: function (xhr, settings) &#123;</span><br><span class="line">                    xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                    if (data.status == &apos;fail&apos;) &#123;</span><br><span class="line">                        if (data.msg == &apos;用户未登录&apos;) &#123;</span><br><span class="line">                            window.location.href = &quot;&#123;% url &apos;login&apos; %&#125;?next=&#123;&#123; request.path &#125;&#125;&quot;;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            alert(data.msg)</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; else if (data.status == &apos;success&apos;) &#123;</span><br><span class="line">                        current_elem.text(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">            add_fav($(this), &#123;&#123; course.id &#125;&#125;, 1);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">            add_fav($(this), &#123;&#123; course.course_org.id &#125;&#125;, 2);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后再打开course/views.py文件，补充 CourseDetailView函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from operation.models import UserFavorite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 是否收藏课程，默认为否</span><br><span class="line">        has_fav_course = False</span><br><span class="line">        has_fav_org = False</span><br><span class="line"></span><br><span class="line">        # 用户必须已登录我们才判断，否则不需要</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course.id, fav_type=1):</span><br><span class="line">                has_fav_course = True</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course.course_org.id, fav_type=2):</span><br><span class="line">                has_fav_org = True</span><br><span class="line"></span><br><span class="line">return render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">            &quot;has_fav_course&quot;: has_fav_course,</span><br><span class="line">            &quot;has_fav_org&quot;: has_fav_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-bfa8c9b7ed4cf354.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着打开<strong>course-detail.html</strong>页面，修改收藏的显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btn colectgroupbtn&quot;  id=&quot;jsLeftBtn&quot;&gt;</span><br><span class="line">                                  &#123;% if has_fav_course %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;btn  notlogin</span><br><span class="line">     &quot;data-favid=&quot;14&quot; id=&quot;jsRightBtn&quot;&gt;</span><br><span class="line">                         &#123;% if has_fav_org %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125;</span><br><span class="line">                    &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>运行一下项目，两个都点击试试：<img src="https://upload-images.jianshu.io/upload_images/8964398-04d2b3d3d57d49cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eae934bc45c24dec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>数据库已经有了，点击就没有了。</p><p><strong>备注</strong></p><ul><li>如果出现上面两个收藏按钮点击没反应的情况，大家可以先尝试用浏览器f12（博主用的是chrome浏览器）看一下浏览器有没有post请求发出去以及参数和url的配置是否出错。如果还是有问题，那么回到<strong>base.html</strong>页面，将<code></code>的位置由开头放置到底部：<br><strong>原来：</strong><img src="https://upload-images.jianshu.io/upload_images/8964398-ab4b7a01e5ef1491.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>现在：</strong><img src="https://upload-images.jianshu.io/upload_images/8964398-097f26d54b3a663d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li></ul><p>知道为什么会出现这种情况么？那是因为jQuery 入口函数与 JavaScript 入口函数是有区别的：jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。而JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行的。这里是js还未加载完就去执行，所以才出现的问题，放在底部就没问题了。</p><p>至此本篇关于课程详情页面的配置介绍就到此结束了，感谢你的赏阅。</p><p>本篇笔记对应于第十九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E6%9C%BA%E6%9E%84%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E6%9C%BA%E6%9E%84%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍机构详情页面的配置，主要包括四个部分：<strong>机构首页</strong>、<strong>机构课程</strong>、<strong>机构介绍</strong>和<strong>机构讲师</strong>，以及用户收藏的介绍下面我将逐一介绍说明。</p><p>本篇笔记对应于第十八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="机构首页"><a href="#机构首页" class="headerlink" title="机构首页"></a>机构首页</h2><p>打开浏览器，在地址栏输入:<a href="http://127.0.0.1:8000/xadmin，往里面新增10门课程和10位讲师信息:![](https://upload-images.jianshu.io/upload_images/8964398-ebb88cd33034ae62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，往里面新增10门课程和10位讲师信息:![](https://upload-images.jianshu.io/upload_images/8964398-ebb88cd33034ae62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>新增课程信息的时候发现课程没有所属课程机构，这是不行的，因为我们后面还有机构课程这个模块，如果课程与课程机构之间没有外键来链接的话就无法实现相应的功能。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c0555ee873ffdb6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们需要在courses/models.py文件中，新增外键连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from organization.models import CourseOrg</span><br><span class="line"></span><br><span class="line">course_org = models.ForeignKey(CourseOrg,  on_delete=models.CASCADE, verbose_name=&quot;课程机构&quot;, null=True, blank=True)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f759d1eec4a19081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记住我们需要在外键里面增加要求<code>null=True, blank=True</code>,你可能会问，为什么之前的外键不用呢？那是因为之前没有课程数据，可是现在里面已经有了一门课程（之前添加的），如果不加这个要求，系统会提示之前的那门课的外键怎么办。所以为了避免这个问题，我们就加上这个要求。</p><p>接下来进行数据库的生成和迁移操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigration courses</span><br><span class="line">migrate courses</span><br></pre></td></tr></table></figure></p><p>就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cfd71a293b34e855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后继续在xadmin后台新增课程信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-87379e62e21bc5ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>完成以后，现在将前端资料里面与org相关的四个页面拷贝到我们的templates文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-681f1f04e43608d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来，通过观察新建<strong>org_base.html</strong>页面,将org_homepage页面全部复制过去，然后修改block：<img src="https://upload-images.jianshu.io/upload_images/8964398-05919e257f29cab4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f09d11205729edf0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是三部曲了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、页面第三行加上&#123;% load staticfiles %&#125;</span><br><span class="line">2、修改全部类型文件的static相对路径</span><br><span class="line">3、修改其中已经设置好的url，配置跳转链接</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-062098d1b9f8819a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-d85afd6d84402791.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在仿照之前的Base继承，清空org_homepage页面，往里面新增图示代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-11245ee6d412ddbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后删除<strong>org_base.html</strong>页面中的<code>`和`</code>之间的代码，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-828c07e042b1df4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来打开我们的organization/views.py文件，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 机构首页</span><br><span class="line">class OrgHomeView(View):</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id来获取课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id=int(org_id))</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有课程，我们取3个</span><br><span class="line">        all_courses = course_org.course_set.all()[:3]</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有讲师，我们取1个</span><br><span class="line">        all_teachers = course_org.teacher_set.all()[:1]</span><br><span class="line"></span><br><span class="line">        render(request, &quot;org-detail-homepage.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">            &quot;all_teachers&quot;: all_teachers,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后配置我们的path,打开organization/urls.py文件，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import OrgHomeView</span><br><span class="line"></span><br><span class="line"># 课程机构首页url,此处不是普通的url是因为我们必须知道是哪个机构的首页</span><br><span class="line">re_path(&apos;home/(?P&lt;org_id&gt;.*)/&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;),</span><br></pre></td></tr></table></figure></p><p>接着打开org_homepage页面，删除多余的课程，采用for循环来遍历数据库中的课程信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-4446b37a4a48131f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>顺便修改其中的课程信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for course in all_courses %&#125;</span><br><span class="line">                 &lt;div class=&quot;module1_5 box&quot;&gt;</span><br><span class="line">&lt;a href=&quot;course-detail.html&quot;&gt;&lt;img width=&quot;214&quot; src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course.image &#125;&#125;&quot;/&gt;&lt;/a&gt;</span><br><span class="line">                &lt;div class=&quot;des&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;course-detail.html&quot;&gt;&lt;h2&gt;&#123;&#123; course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt;</span><br><span class="line">                    &lt;span class=&quot;fl&quot;&gt;课时：&lt;i class=&quot;key&quot;&gt;&#123;&#123; course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;fr&quot;&gt;参加人数：&#123;&#123; course.students &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;fl&quot;&gt;&#123;&#123; course.course_org.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;star fr  notlogin</span><br><span class="line">                            &quot; data-favid=&quot;13&quot; data-fav-type=&quot;4&quot;&gt;</span><br><span class="line">                            &#123;&#123; course.fav_nums &#125;&#125;</span><br><span class="line">                        &lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p><strong>然后三部曲走一下，这里就不详细说明了。</strong></p><p>接着打开org_list页面，配置跳转链接：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e4fd915397ee3229.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; course_org.id %&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>记住因为之前我们的org_home配置的不是普通的path,所以你如果写成普通的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; %&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>那是会报错的，我们需要在此后空一格，然后带上我们在path中定义的id,因为是跳转到课程机构首页，所以写上它的id。</p><p>然后运行一下我们的项目：发现课程机构显示不同步，那我们把刚才获取到的数据返回到页面显示一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-87bf1141a41b86a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那我们就打开我们的organization/views.py文件，在底部修改为如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 机构首页</span><br><span class="line">class OrgHomeView(View):</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id来获取课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id=int(org_id))</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有课程，我们取3个</span><br><span class="line">        all_courses = course_org.course_set.all()[:3]</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有讲师，我们取1个</span><br><span class="line">        all_teachers = course_org.teacher_set.all()[:1]</span><br><span class="line"></span><br><span class="line">        render(request, &quot;org-detail-homepage.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">            &quot;all_teachers&quot;: all_teachers,</span><br><span class="line">            &quot;course_org&quot;: course_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着返回org_base页面,我们修改如下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-7a7e753f067693ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里的数据会向上传递，所以后面的那些org页面都是可以用到的。完成以后就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-2297c184e2ddedc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着运行一下我们的项目，发现显示没有问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-c2511b102dd1954f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面继续完成它的其余两个：机构教师和机构介绍。<br>机构教师：打开org_homepage页面，将信息修改成图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-b6c2c47dbad6680c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>机构介绍：还是在org_homepage页面，将信息修改成图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-53aa3cbc7308ad5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着运行一下我们的项目，发现显示没有问题。</p><p>至此，第一个机构首页的信息就全部配置完全了，其余几个很类似，所以介绍的就比较快了，当做复习一下。</p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><p>至此，本篇关于机构详情页面的配置以及用户收藏的介绍就到此为止了，感谢你的赏阅。</p><p>本篇笔记对应于第十八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十七）：我要学习配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%88%91%E8%A6%81%E5%AD%A6%E4%B9%A0%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%88%91%E8%A6%81%E5%AD%A6%E4%B9%A0%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍我要学习小页面的配置，为什么需要单独介绍，是因为这个和其他页面的耦合度不是很高，单独写一篇便于今后学习的需要。</p><p>本篇笔记对应于第十七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="配置我要学习"><a href="#配置我要学习" class="headerlink" title="配置我要学习"></a>配置我要学习</h2><p>这就是我要学习的页面，它是通过Ajax来控制的，也就是异步的javascript和xml。它可以在保证当前页面不被重新刷新的条件下，提交表单向后台传送数据。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a114b34dcbb10a7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>正如你在前面所学习的那样，但凡涉及到了表单的提交都会有一个form验证。我们仿照前面的逻辑在operation应用下面新建一个forms.py文件，用于此处表单的验证。</p><p>然后在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAskForm(forms.Form):</span><br><span class="line">    name = forms.CharField(required=True, min_length=2, max_length=20)</span><br><span class="line">    mobile = forms.CharField(required=True, min_length=11, max_length=11)</span><br><span class="line">    course_name = forms.CharField(required=True, min_length=5, max_length=50)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-5270ca8e5e39ba90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着打开operation/models.py文件,发现这两个函数定义的字段信息非常相似，连要求都是一样的：<img src="https://upload-images.jianshu.io/upload_images/8964398-7d073f0ef09124d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>那么我们就有一个疑问，如何让代码重复利用，不需要再次重新造轮子呢？我们可以利用Django自带的ModelForm,这比form强大多了，除了继承现有的字段还可以新增字段！新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进阶版的函数</span><br><span class="line">class AnotherUserAskForm(forms.ModelForm):</span><br><span class="line">    # 除了继承现有的字段还可以新增字段</span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserAsk</span><br><span class="line">        # 自定义需要验证的字段</span><br><span class="line">        fields = [&quot;name&quot;, &quot;mobile&quot;, &quot;course_name&quot;]</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ce41dced520d6f5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来的一步就是path的配置了，现在有一个疑问，就是我们的项目url文件，已经存放了很多url，如果我们再往里面新增url就很容易造成管理上的混乱：<img src="https://upload-images.jianshu.io/upload_images/8964398-95190512407fc3cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们在思考能不能像高考考场一样，有许多分考场，学生在各个分考场的试卷会送到省里，在保证考试有效的情况下，避免人员来往市区的麻烦。Django里面其实也是有的，所以我们就采用include的机制，来达到这个目的：在保证path的有效情况下，将各个app应用的path分开放置，最后将app的path引入项目的path就可以了。下面我们开始在organization应用下面，新建urls.py文件，里面增加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path, include, re_path</span><br><span class="line">from .views import OrgView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 课程机构列表页url</span><br><span class="line">    path(&quot;list/&quot;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后回到我们的eduline/urls.py文件，我们将刚才的那行path用下面的一行include代码替换掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 继续Ajax配置</span><br><span class="line">前面说到我要学习的页面，它是通过Ajax来控制的，是一种异步加载方式，所以我们此时不能在view里面直接render一个页面回来，应该是给前端返回json数据，而不是页面。这里我们就要用到HttpResponse这个类，它指明了给用户返回哪种类型的数据。</span><br><span class="line"></span><br><span class="line">打开organization/views.py文件，在里面添加如下代码：</span><br></pre></td></tr></table></figure></p><p>from operation.forms import AnotherUserAskForm</p><h1 id="我要学习功能实现"><a href="#我要学习功能实现" class="headerlink" title="我要学习功能实现"></a>我要学习功能实现</h1><p>class AddUserAskView(View):<br>    def post(self, request):<br>        userask_form = AnotherUserAskForm(request.POST)</p><pre><code># 判断form是否有效if userask_form.is_valid():    #  注意modelform和form的区别，modelform它有model的属性，而且有个参数commit，当它为真时会把数据存入到数据库    user_ask = userask_form.save(commit=True)    # 如果保存成功,则返回json,不过后面必须有content_type用于告诉浏览器返回的类型    return HttpResponse(&quot;{&apos;status&apos;: &apos;success&apos;}&quot;, content_type=&apos;application/json&apos;)else:    # 如果保存失败，则返回json,并将form的错误信息通过msg传递到前端进行显示    return HttpResponse(&quot;{&apos;status&apos;: &apos;fail&apos;, &apos;msg&apos;:{0}}&quot;.format(userask_form.errors),  content_type=&apos;application/json&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*****</span><br><span class="line">**由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！**</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">打开我们的operation/forms.py文件，里面加上如下代码：</span><br></pre></td></tr></table></figure><p>import re</p><h1 id="验证手机号码是否合法"><a href="#验证手机号码是否合法" class="headerlink" title="验证手机号码是否合法"></a>验证手机号码是否合法</h1><pre><code>def clean_mobile(self):    mobile = self.cleaned_data[&quot;mobile&quot;]    REGEX_MOBILE = &quot;^1[358]\d{9}$|^147\d{8}$|^176\d{8}$&quot;    p = re.compile(REGEX_MOBILE)    if p.match(mobile):        return mobile    else:        raise forms.ValidationError(&quot;手机号码非法&quot;, code=&quot;mobile_invalid&quot;)</code></pre><p><code>`</code><br>关于正则表达式的用法，大家可以关注我的另一个专题《趣玩Python爬虫》，我目前在筹划中，预计9月份就会更新了。</p><p>接下来你可以重复刚才的测试操作，看手机号码验证是否生效了，这里就不一一演示了。</p><p>至此，我们关于我要学习的小页面的配置就到此为止了，感谢你的赏阅。下一篇笔记，我们就介绍课程机构的详情页面的配置了。</p><p>本篇笔记对应于第十七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十六）：列表分页功能</title>
      <link href="/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%97%E8%A1%A8%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%97%E8%A1%A8%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的实现。</p><p>本篇笔记对应于第十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="列表分页"><a href="#列表分页" class="headerlink" title="列表分页"></a>列表分页</h2><p>各位小伙伴们看下面的图片，这就是列表分页，怎么样是不是觉得很简单，其实它挺复杂的，下面介绍如何实现这个功能：<img src="https://upload-images.jianshu.io/upload_images/8964398-63c91a8ad1275f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们是通过django-pure-pagination这个库来实现的，所以首先进入到我们的虚拟环境，安装这个库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\YC&gt;F:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd envs</span><br><span class="line"></span><br><span class="line">F:\Envs&gt;cd eduline</span><br><span class="line"></span><br><span class="line">F:\Envs\eduline&gt;workon eduline</span><br><span class="line">(eduline) F:\Envs\eduline&gt;pip install django-pure-pagination -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting django-pure-pagination</span><br><span class="line">Installing collected packages: django-pure-pagination</span><br><span class="line">Successfully installed django-pure-pagination-0.3.0</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs\eduline&gt;</span><br></pre></td></tr></table></figure></p><p>然后去settings.py文件里，注册这个app:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;pure_pagination&apos;,</span><br></pre></td></tr></table></figure></p><p>接下来点击github上的项目地址<a href="https://github.com/jamespacileo/django-pure-pagination" target="_blank" rel="noopener">django-pure-pagination</a>，然后下拉至settings：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-45475f6ed807d260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们看一下可设置的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PAGINATION_SETTINGS = &#123;</span><br><span class="line">    &apos;PAGE_RANGE_DISPLAYED&apos;: 10,</span><br><span class="line">    &apos;MARGIN_PAGES_DISPLAYED&apos;: 2,</span><br><span class="line"></span><br><span class="line">    &apos;SHOW_FIRST_PAGE_WHEN_INVALID&apos;: True,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解释一下上面参数的意义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PAGE_RANGE_DISPLAYED:  表示总共会显示多少个页数。(包括省略号，两边和中间)</span><br><span class="line">MARGIN_PAGES_DISPLAYED:  表示旁边会显示多少个。</span><br><span class="line">SHOW_FIRST_PAGE_WHEN_INVALID:  表示当输入页数不合法是否要跳到第一页</span><br></pre></td></tr></table></figure></p><p>我们继续下拉，看一下官方给的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># views.py</span><br><span class="line">from django.shortcuts import render_to_response</span><br><span class="line"></span><br><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    # 尝试获取页数参数</span><br><span class="line">    try:</span><br><span class="line">        page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">    except PageNotAnInteger:</span><br><span class="line">        page = 1</span><br><span class="line">    # objects是取到的数据</span><br><span class="line">    objects = [&apos;john&apos;, &apos;edward&apos;, &apos;josh&apos;, &apos;frank&apos;]</span><br><span class="line"></span><br><span class="line">    # 对取到的数据进行分页</span><br><span class="line">    p = Paginator(objects, request=request)</span><br><span class="line">    # 此时前台显示的就是我们此前获取的第几页的数据</span><br><span class="line">    people = p.page(page)</span><br><span class="line"></span><br><span class="line">    return render_to_response(&apos;index.html&apos;, &#123;</span><br><span class="line">        &apos;people&apos;: people,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们尝试对照实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 课程机构列表功能</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 查找所有的城市信息</span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line">        # 查找所有的课程机构信息</span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        # 统计课程机构的数量</span><br><span class="line">        org_nums = all_orgs.count()</span><br><span class="line">        # 对课程机构进行分页,尝试获取前端get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数则默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从all_org中取五个出来，每页显示6个,这个字段必填</span><br><span class="line">        p = Paginator(all_orgs, 6, request=request)</span><br><span class="line"></span><br><span class="line">        orgs = p.page(page)</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_citys&quot;: all_citys,</span><br><span class="line">            &quot;all_orgs&quot;: orgs,</span><br><span class="line">            &quot;org_nums&quot;: org_nums,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>继续看我们的官方文档：<img src="https://upload-images.jianshu.io/upload_images/8964398-1d5824bdbe8cd9c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们知道，因为我们返回给后端的是QueryDict，所以在前端页面可以使用for循环进行遍历显示，但是这里的orgs却不一定可以，查看文档，果真不能那样遍历，而是遍历其object_list,这一点很容易出错，需要格外注意。我们在前端页面配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for course_org in all_orgs.object_list %&#125;</span><br></pre></td></tr></table></figure></p><p>也就是这个地方：<img src="https://upload-images.jianshu.io/upload_images/8964398-dc666a3a0e1eb63d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在考虑如何在前端页面显示分页：<br>如果使用默认的render:<img src="https://upload-images.jianshu.io/upload_images/8964398-8c613223e664ba39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>前端页面配置如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a8c2b6575aad41ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>运行项目结果：<img src="https://upload-images.jianshu.io/upload_images/8964398-6776d9198f9a20d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这有点丑，所以我们还是自定义html页面的代码吧！怎么定义呢，还是查阅官方文档吧！</p><p>往下拉，可以看到这段代码，这就是官方文档告诉我们如何自定义分页样式的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load i18n %&#125;</span><br><span class="line">&lt;div class=&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;% if page_obj.has_previous %&#125;</span><br><span class="line">        &lt;a href=&quot;?&#123;&#123; page_obj.previous_page_number.querystring &#125;&#125;&quot; class=&quot;prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/a&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &lt;span class=&quot;disabled prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% for page in page_obj.pages %&#125;</span><br><span class="line">        &#123;% if page %&#125;</span><br><span class="line">            &#123;% ifequal page page_obj.number %&#125;</span><br><span class="line">                &lt;span class=&quot;current page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                &lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot; class=&quot;page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &#123;% endifequal %&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            ...</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% if page_obj.has_next %&#125;</span><br><span class="line">        &lt;a href=&quot;?&#123;&#123; page_obj.next_page_number.querystring &#125;&#125;&quot; class=&quot;next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/a&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &lt;span class=&quot;disabled next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>注意：这里面的page_obj其实就是我们的all_orgs！</strong></p><p>下面我们继续尝试对照实现，打开org-list.html页面，找到对应位置，复制官方文档内容，然后进行替换（代码格式化ctrl+alt+L）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;pageturn&quot;&gt;</span><br><span class="line">               &lt;ul class=&quot;pagelist&quot;&gt;</span><br><span class="line">                   &#123;% if all_orgs.has_previous %&#125;</span><br><span class="line">                       &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                   &#123;% endif %&#125;</span><br><span class="line">                   &#123;% for page in all_orgs.pages %&#125;</span><br><span class="line">                       &#123;% if page %&#125;</span><br><span class="line">                           &#123;% ifequal page all_orgs.number %&#125;</span><br><span class="line">                               &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &#123;% else %&#125;</span><br><span class="line">                               &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &#123;% endifequal %&#125;</span><br><span class="line">                       &#123;% else %&#125;</span><br><span class="line">                           &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                       &#123;% endif %&#125;</span><br><span class="line">                   &#123;% endfor %&#125;</span><br><span class="line">                   &#123;% if all_orgs.has_next %&#125;</span><br><span class="line">                       &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                   &#123;% endif %&#125;</span><br><span class="line">               &lt;/ul&gt;</span><br><span class="line">           &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-2d4bb44659a2a537.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>刷新一下我们的页面，出现了分页：<img src="https://upload-images.jianshu.io/upload_images/8964398-0044abf27c0ae300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>因为只有10个课程机构，每页只显示6个所以最多只有2页！</p><h2 id="城市分类的筛选"><a href="#城市分类的筛选" class="headerlink" title="城市分类的筛选"></a>城市分类的筛选</h2><p>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">city_id = request.GET.get(&apos;city&apos;, &apos;&apos;)</span><br><span class="line">        # 选中了某个城市之后，根据城市Id与数据库中的city_id进行判断（外键city在数据库中名为city_id且为字符串类型）</span><br><span class="line">        if city_id:</span><br><span class="line">            all_orgs = all_orgs.filter(city_id=int(city_id))</span><br><span class="line"></span><br><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;city_id&quot;: city_id,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-b4f10fa731023ca2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开org-list.html页面，我们需要回传我们的city_id并加以显示出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;?ct=&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;   # 判断是否选择城市，如果没有则显示全部，并显示加绿状态</span><br><span class="line">           &#123;% for city in all_citys %&#125;</span><br><span class="line">           &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt; # 判断是否选择城市并显示加绿状态</span><br><span class="line">           &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>解释一下这行代码的意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>这行代码的意思是说，如果所选城市的city_id与数据库中的city_id（其实就是city,不过在数据库中自动变成了字符串类型的city_id）相等，就是选择了当前城市，并且为加绿状态。<code>city.id|stringformat:&quot;i&quot;</code>就是把数据库中的字符串类型的city_id转换成整型值并加以比对，此处city.id中的id对象其实就是刚才转换成的整型值！</p><p>变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-bb998a91cc580e98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可以刷新一下页面后，切换几个城市试试看，没有问题的！接下来我们仿照上面的操作，对机构的类别也进行一下分类筛选。</p><h2 id="机构类别的筛选"><a href="#机构类别的筛选" class="headerlink" title="机构类别的筛选"></a>机构类别的筛选</h2><p>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 机构类别的筛选</span><br><span class="line"># ct是我们前端页面用于判断机构类别用的</span><br><span class="line">category = request.GET.get(&apos;ct&apos;, &apos;&apos;)</span><br><span class="line"># 选中了类别之后，根据category与数据库中的category进行判断，从而显示授课机构</span><br><span class="line"> if category:</span><br><span class="line">    all_orgs = all_orgs.filter(category=category)</span><br><span class="line"></span><br><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;category&quot;: category,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-8b4a72d2329878dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开org-list.html页面，我们需要回传我们的category并加以显示出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">&lt;a href=&quot;?city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;?ct=pxjg&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"> &lt;a href=&quot;?ct=gx&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;a href=&quot;?ct=gr&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-dcd1350caccdb50e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后去数据库里修改几个课程机构的类别，便于我们后续的进行：<img src="https://upload-images.jianshu.io/upload_images/8964398-6ac1db48b2b65f74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不过这样还是不行的，我们需要对城市信息与机构分类进行联动，也就是说可以进行二次选择，可以选择所有在北京市的培训机构，而不是只能显示全北京市的机构（包括培训机构，个人和高校），下面我们在org-list.html页面进行修改代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &lt;a href=&quot;?city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">    class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">     &lt;a href=&quot;?ct=pxjg&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">      class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;?ct=gx&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">   class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;a href=&quot;?ct=gr&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">class=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">   &#123;% for city in all_citys %&#125;</span><br><span class="line">    &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&amp;ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">  &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-7786551b09c6dce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们刷新一下我们的页面，可以发现已经可以联动了：<img src="https://upload-images.jianshu.io/upload_images/8964398-b8a42851a3a57ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不过右边的机构数量统计错了，我们刚才统计机构数目过早，应该移到后面，在已经筛选过后，才能开始统计，所以只需要把刚才用于统计的那行代码挪到筛选代码的后面即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 统计课程机构的数量</span><br><span class="line">org_nums = all_orgs.count()</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-417ee84c809220b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>再来刷新一下我们的页面，发现课程机构数量统计没有问题！</p><h3 id="授课机构排名"><a href="#授课机构排名" class="headerlink" title="授课机构排名"></a>授课机构排名</h3><p>授课机构排名就是图片中右边的那个，我们根据课程机构的点击数来进行排名：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9c7e1f77fee30cab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 授课机构的排名</span><br><span class="line">       hot_orgs = all_orgs.order_by(&quot;click_nums&quot;)[:3]  # 返回的是一个QueryDict我们取前三个</span><br></pre></td></tr></table></figure></p><p>然后我们在org-list.html页面进行修改代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;right companyrank layout&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;head&quot;&gt;授课机构排名&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &#123;% for current_org in hot_orgs %&#125;</span><br><span class="line">                &lt;dl class=&quot;des&quot;&gt;</span><br><span class="line">                    &lt;dt class=&quot;num fl&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/dt&gt;</span><br><span class="line">                    &lt;dd&gt;</span><br><span class="line">                        &lt;a href=&quot;/company/2/&quot;&gt;&lt;h1&gt;&#123;&#123; current_org.name &#125;&#125;&lt;/h1&gt;&lt;/a&gt;</span><br><span class="line">                        &lt;p&gt;&#123;&#123; current_org.address &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/dd&gt;</span><br><span class="line">                &lt;/dl&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>其中<strong></strong>是Django内置的用于统计循环变量循环到第几次的次数。</p><p>完成以后，我们再来刷新一下我们的页面，发现授课机构排名没有问题！</p><h3 id="学习人数和课程人数排名"><a href="#学习人数和课程人数排名" class="headerlink" title="学习人数和课程人数排名"></a>学习人数和课程人数排名</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5dbfcd8450656ea6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>其实这个功能和前面介绍的几个功能很相似，这里就简单介绍一下(步骤和前面的类似)</p><p>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> # 学习人数和课程人数排名</span><br><span class="line">        sort = request.GET.get(&apos;sort&apos;, &apos;&apos;)</span><br><span class="line">        if sort:</span><br><span class="line">            if sort == &quot;students&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-students&quot;)</span><br><span class="line">            elif sort == &quot;courses&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-course_nums&quot;)</span><br><span class="line"></span><br><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;sort&quot;: sort,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后我们在org-list.html页面进行修改代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;tab_header&quot;&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% if sort == &apos;&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;全部&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% if sort == &apos;students&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;学习人数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% if sort == &apos;courses&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=courses&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;课程数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p><code>sort=students&amp;ct=&amp;city=</code>和<code>sort=courses&amp;ct=&amp;city=</code>也是为了和前面的保持联动状态。</p><p>完成以后刷新一下我们的页面，看上面的各个功能是不是都实现了。</p><p>至此本篇关于列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的介绍就到此为止了，感谢你的赏阅。</p><p>本篇笔记对应于第十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十五）：模板继承应用</title>
      <link href="/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%BA%94%E7%94%A8/"/>
      <url>/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将开始进入课程机构前端页面的配置，你会了解到模板继承，城市筛选，数量统计等功能的实现。</p><p>本篇笔记对应于第十五篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p>通过观察，我们发现很多页面都是有相同的结构，例如header和footer都是一样的，我们是不是可以考虑单独给它们分别放在2个HTML页面里面，然后当需要用到的时候，可以include进来，这就是早期的模板继承原理。不过这个只能用于那些页面是固定的内容，也就是说如果要根据自己的想法随意对include进来的页面进行修改这是不可能的。鉴于此，人们在吸收了挖坑填坑的思想之后，提出了一种新的方法：子本继承父本，将需要修改的地方挖坑，然后采用不同的方式来填坑，这样就解决了这个问题（类似于子类继承父类的方法）。这就是模板继承的原理！</p><h3 id="新建父本base-html页面"><a href="#新建父本base-html页面" class="headerlink" title="新建父本base.html页面"></a>新建父本base.html页面</h3><p>在templates文件夹中新建base.html，同时将前端页面org-list.html拷贝到我们的templates里面，然后把org-list.html的全部内容复制粘贴到base.html页面中来，然后收起标签，成了下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-951378b0913cde32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后配置静态的文件相对路径，只需要修改图中的即可：<img src="https://upload-images.jianshu.io/upload_images/8964398-f520be33b0d7d8aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="开始定义父本挖坑操作"><a href="#开始定义父本挖坑操作" class="headerlink" title="开始定义父本挖坑操作"></a>开始定义父本挖坑操作</h3><p><strong>1、</strong>每个org-list网页的标题会发生变化，所以修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;&#123;% block title%&#125;课程机构列表 - 慕海学习网&#123;% endblock %&#125;&lt;/title&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>每个页面都具有公共的js和css，但又具有各自特殊的js和css,所以修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_css %&#125;&#123;% endblock %&#125;</span><br><span class="line">   </span><br><span class="line">&#123;% block custom_js %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>公共的js和css都不变，允许自定义样式,12步就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-1aa029676ec8970d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>3、</strong>面包屑和内容的修改如下：<img src="https://upload-images.jianshu.io/upload_images/8964398-9866905c7c073e7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>至此，我们的base.html的配置就差不多完成了，接下来是对它的引用！</p><hr><p><strong>非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>页面的继承关系可以让我们直接使用变量，比如user中的表单数据传递到register页面当中（register页面继承了base页面）那么你在base页面当中也是可以使用这些数据的。这就是参数的向上传递！</p><h2 id="课程机构列表页面数据显示"><a href="#课程机构列表页面数据显示" class="headerlink" title="课程机构列表页面数据显示"></a>课程机构列表页面数据显示</h2><p>通过观察页面，我们确定哪些数据是动态的，哪些是静态的，动态的需要从后台来显示，静态的可以通过HTML代码直接实现：（红色为动态，蓝色为静态）<img src="https://upload-images.jianshu.io/upload_images/8964398-c7ab19fbc71b15ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>登录xadmin后台管理系统，新增10个城市信息，10门课程信息数据：<img src="https://upload-images.jianshu.io/upload_images/8964398-b2d5fb55ac4964ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在新建课程信息之前，我们需要配置文件的上传路径，打开eduline/settings.py文件，在里面加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置我们上传文件的路径</span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</span><br></pre></td></tr></table></figure></p><p>然后在主目录下新建media文件夹，用于存放上传文件：<img src="https://upload-images.jianshu.io/upload_images/8964398-d4bcf4b7e59d7292.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>完成上面2步之后就可以增加10门课程信息数据了：<img src="https://upload-images.jianshu.io/upload_images/8964398-cc53a401c45686bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看media 文件夹，里面10张图片，就是10个课程机构的logo:<img src="https://upload-images.jianshu.io/upload_images/8964398-a1b15d6beccc000e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后继续完善我们的organization/views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from .models import CityDict, CourseOrg</span><br><span class="line"></span><br><span class="line"># 课程机构列表功能</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 查找所有的城市信息</span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line">        # 查找所有的课程机构信息</span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_citys&quot;: all_citys,</span><br><span class="line">            &quot;all_orgs&quot;: all_orgs</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-73a77d4bbbd44c5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在是回填动态的城市信息：在org_list页面，找到如下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-dce4379331b73317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们使用Django自带的for循环来从刚才获取到的城市信息中回填城市，并显示出来,修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for city in all_citys %&#125;</span><br><span class="line"> &lt;a href=&quot;?city=1&amp;ct=&quot;&gt;&lt;span class=&quot;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-285303ded183631a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>运行一下我们的项目：<img src="https://upload-images.jianshu.io/upload_images/8964398-5eab727aec52c11b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在城市就是动态的信息了，不再是被前端人员写死的页面了。同理我们现在把课程信息也给显示出来：<img src="https://upload-images.jianshu.io/upload_images/8964398-6e23e22834aec557.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>通过折叠代码分析发现，每一个des 就是一个课程，所以我们继续刚才的操作，把多余的删掉，保留一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for course_org in all_orgs %&#125;</span><br><span class="line">               &lt;dl class=&quot;des difdes&quot;&gt;</span><br><span class="line">       </span><br><span class="line">               &lt;/dl&gt;  </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>接下来对<code>&lt;dl class=&quot;des difdes&quot;&gt; &lt;/dl&gt;</code>里面的内容进行分析：<img src="https://upload-images.jianshu.io/upload_images/8964398-938ce441597a6c66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们尝试利用对象的属性来获取图片的地址，也就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-url=&quot;&#123;&#123; course_org.image &#125;&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>对，正如你想的那样，这其实获得只是图片的相对路径，系统根本找不到我们前面定义的路径。而且我们在数据库中的图片地址其实是字符串类型，也更加证明了这一点：<img src="https://upload-images.jianshu.io/upload_images/8964398-4c8626f632025173.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>因此，我们需要补全地址，变成下面这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-url=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course_org.image &#125;&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>不过这样还不够，我们需要配置图片处理器,打开eduline/settings.py文件，找到TEMPLATES，在后面添加一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 图片处理器，可以使&#123;&#123; MEDIA_URL &#125;&#125;产生作用</span><br><span class="line"> &apos;django.template.context_processors.media&apos;,</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-48130398902facc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新一下我们的页面，发现图片还是没有加载出来，那是因为path中没有处理图片相应路径的url，我们需要配置一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.views.static import serve</span><br><span class="line">from eduline.settings import MEDIA_ROOT</span><br><span class="line"></span><br><span class="line"> # 配置文件上传的访问处理url</span><br><span class="line"> re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT &#125;),</span><br></pre></td></tr></table></figure></p><p>然后再来刷新一下:<img src="https://upload-images.jianshu.io/upload_images/8964398-30b11d8e90c020c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>成功了！</p><p>接下来，我们来统计课程机构的数量，打开organization/views.py文件，我们修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构列表功能</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 查找所有的城市信息</span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line">        # 查找所有的课程机构信息</span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        # 统计课程机构的数量</span><br><span class="line">        org_nums = all_orgs.count()</span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_citys&quot;: all_citys,</span><br><span class="line">            &quot;all_orgs&quot;: all_orgs,</span><br><span class="line">            &quot;org_nums&quot;: org_nums</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后在org_list页面找到共的位置，填写这个变量：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c16d4ae5f7939a55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>至此，本篇关于模板继承，城市筛选，数量统计等功能的实现就介绍到这里，感谢你的赏阅。</p><p>本篇笔记对应于第十五篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十四）：用户密码找回</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将实现用户的激活，用户密码找回，重置密码，修改密码等功能，前面所介绍的知识大家没事可以复习一下，加深对知识的理解和应用，后面很多东西就是前面讲过的知识的应用。</p><p>本篇笔记对应于第十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="用户激活的操作"><a href="#用户激活的操作" class="headerlink" title="用户激活的操作"></a>用户激活的操作</h2><p>打开我们的Navicat，去数据库中找到我们的用户信息表：<img src="https://upload-images.jianshu.io/upload_images/8964398-689a06f410addd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这里面有个字段<strong>is_active</strong>，它是用来判别用户是否激活的，默认是未激活也就是0，这里都是1肯定是不行的，所以我们需要定义激活用户的函数，来完成用户的激活操作。</p><p>先配置一下路径path，打开eduline/urls.py文件，在里面添加一行代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import  re_path</span><br><span class="line">from users.views import ActiveUserView  #ActiveUserView目前未定义，后面马上定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 激活用户url</span><br><span class="line">re_path(&apos;active/(?P&lt;active_code&gt;.*)/&apos;, ActiveUserView.as_view(), name=&quot;user_active&quot;)</span><br></pre></td></tr></table></figure></p><p><code>&#39;active/(?P&lt;active_code&gt;.*)/&#39;</code>是正则表达式模式，用于匹配验证码！</p><p>打开users/views.py文件，我们设置默认未激活：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认激活状态为False，也就是未激活</span><br><span class="line">user_profile.is_active = False</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ff871e44a48a1a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>并且在下面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line"># 用于实现用户激活操作的函数</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line"> </span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                user = UserProfile.objects.filter(email=email)</span><br><span class="line">                user.is_active = True #激活用户</span><br><span class="line">                user.save()</span><br><span class="line">                # 激活成功跳转到登录页面</span><br><span class="line">            return render(request, &quot;login.html&quot;)</span><br></pre></td></tr></table></figure></p><p>现在回到我们的LoginView函数，我们当时没有判断用户是否激活，现在需要判断，修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if user is not None:</span><br><span class="line">               if user.is_active:</span><br><span class="line">                   # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                   login(request, user)</span><br><span class="line">                   # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                   return render(request, &quot;index.html&quot;)</span><br><span class="line">               else:</span><br><span class="line">                   return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;)</span><br><span class="line">           else:</span><br><span class="line">               # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回</span><br><span class="line">               return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9a7583795e3c7256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>将数据表中的<a href="mailto:licheetools@sina.cn" target="_blank" rel="noopener">licheetools@sina.cn</a>    用户的is_active修改为0，我们来测试一下，在图中所示位置打上断点，开始调试：<img src="https://upload-images.jianshu.io/upload_images/8964398-0d1caf9841f6cadc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们的用户测试激活调试没有问题，再来看一下验证码激活：我们去新浪邮箱，将获取到的链接访问一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请点击下面的链接激活你的账号: http://127.0.0.1:8000/active/HekaM6EfZfeKy1Zc</span><br></pre></td></tr></table></figure></p><p>按图示来测试一下，也没有问题！</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9b8d2ed7e01b277c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，我们完成了邮箱验证码的激活以及用户的激活。</p><p>不过我们还有两个问题，一个就是前面没有判断邮箱是否已经存在，我们不能用旧的邮箱来注册，所以我们需要配置一下，打开users/views.py文件，修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request):</span><br><span class="line">    # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息</span><br><span class="line">    register_form = RegisterForm(request.POST)</span><br><span class="line">    if register_form.is_valid():</span><br><span class="line">        user_name = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">        if UserProfile.objects.filter(email=user_name):</span><br><span class="line">            # register_form回填信息必须有，msg是信息提示</span><br><span class="line">            return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;)</span><br><span class="line">        else:</span><br><span class="line">            # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line">            # 实例化一个user_profile对象，存入前端页面获取的值</span><br><span class="line">            user_profile = UserProfile()</span><br><span class="line">            user_profile.username = user_name</span><br><span class="line">            user_profile.email = user_name</span><br><span class="line"></span><br><span class="line">            # 默认激活状态为False，也就是未激活</span><br><span class="line">            user_profile.is_active = False</span><br><span class="line"></span><br><span class="line">            # 对password进行加密并保存</span><br><span class="line">            user_profile.password = make_password(pass_word)</span><br><span class="line">            user_profile.save()</span><br><span class="line">            send_register_eamil(user_name, &apos;register&apos;)</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure></p><p>另一个就是我们对于链接的处理不够完善，正如你所了解的那样，链接肯定有有效时间，在这个规定的时间内点击才有用，过了规定时间就没有用，所以我们需要新建一个链接超时的html文件：新建<strong>active_fail.html</strong>文件，里面就几行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;链接失效&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;对不起，链接失效了&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>然后我们来users/views.py文件，修改一下激活的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户激活操作的函数</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                user = UserProfile.objects.filter(email=email)</span><br><span class="line">                user.is_active = True</span><br><span class="line">                user.save()</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;active_fail.html&quot;)</span><br><span class="line">        # 激活成功跳转到登录页面</span><br><span class="line">        return render(request, &quot;login.html&quot;)</span><br></pre></td></tr></table></figure></p><p>按照图示打上断点并开始调试：<img src="https://upload-images.jianshu.io/upload_images/8964398-c2e97efa56488de3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>调试没有问题！</p><p>好，解决了上面两个问题之后，下面我们来进行忘记密码，找回密码的操作。</p><h2 id="忘记密码的操作"><a href="#忘记密码的操作" class="headerlink" title="忘记密码的操作"></a>忘记密码的操作</h2><h3 id="拷贝forgetpwd页面"><a href="#拷贝forgetpwd页面" class="headerlink" title="拷贝forgetpwd页面"></a>拷贝forgetpwd页面</h3><p>将<strong>forgetpwd.html</strong>页面拷贝到我们的templates文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-2cf4e7d30eb40eea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="定义（忘记）找回密码的视图"><a href="#定义（忘记）找回密码的视图" class="headerlink" title="定义（忘记）找回密码的视图"></a>定义（忘记）找回密码的视图</h3><p>打开users/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户忘记码（找回密码）的函数</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>然后在eduline/urls.py文件里面配置url信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import  ForgetPwdView</span><br><span class="line"></span><br><span class="line"># 找回密码url，注意是普通的url</span><br><span class="line">path(&quot;forget/&quot;, ForgetPwdView.as_view(), name=&quot;forget_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>接下来配置跳转路径，首先ctrl+F 搜索<strong>login.html</strong>,找到忘记密码，修改href属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;fr&quot; href=&quot;forgetpwd.html&quot;&gt;忘记密码？&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5dbefe1d42ea6315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;fr&quot; href=&quot;&#123;% url &apos;forget_pwd&apos; %&#125;&quot;&gt;忘记密码？&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><strong>注意外部有双引号，里面就只能使用单引号。</strong></p><p>接着继续修改<strong>forgetpwd.html</strong>页面的跳转链接，一样的操作，这里就不演示了！</p><p>现在运行一下我们的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/forget/，出现了：![](https://upload-images.jianshu.io/upload_images/8964398-37f7bdbd37ebfc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/forget/，出现了：![](https://upload-images.jianshu.io/upload_images/8964398-37f7bdbd37ebfc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：<a href="https://www.jianshu.com/p/9019d6de27ae" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、页面第三行加上&#123;% load staticfiles %&#125;</span><br><span class="line">2、修改全部类型文件的static相对路径</span><br><span class="line">3、修改其中的url，配置跳转链接</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-577753e9e07b4f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>配置完刷新一下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-b378d9c411266bcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用户找回密码时的表单，注意字段与前端页面保持一致</span><br><span class="line">class ForgetForm(forms.Form):</span><br><span class="line">    email = forms.CharField(required=True)  # 用户名不能为空</span><br><span class="line">    captcha = CaptchaField(error_messages=&#123;&quot;invalid&quot;: &quot;验证码错误&quot;&#125;)</span><br></pre></td></tr></table></figure></p><p>接着回到我们的views.py文件，继续完善ForgetPwdView：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from users.forms import  ForgetForm</span><br><span class="line"></span><br><span class="line"># 用于实现用户忘记码（找回密码）的函数</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        forget_form = ForgetForm()</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;)</span><br></pre></td></tr></table></figure></p><p>然后回到我们的forgetpwd.html页面，我们删除captcha那一行，并修改为：<img src="https://upload-images.jianshu.io/upload_images/8964398-770faa6555d646d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group captcha1 marb38&quot;&gt;</span><br><span class="line">                        &lt;label&gt;验&amp;nbsp;证&amp;nbsp;码&lt;/label&gt;</span><br><span class="line">                        &#123;&#123; forget_form.captcha &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们再来刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-dba85389b2810052.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>页面正常显示了！</p><p>既然我们是找回密码，那么我们肯定需要发送邮件，我们前面新建了发送失败的html页面，那我们肯定也需要新建一个发送成功的html页面吧,新建<strong>send_success.html</strong>文件：<img src="https://upload-images.jianshu.io/upload_images/8964398-0700d1c263d79d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;邮件发送成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;邮件已发送，请注意查收！&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>还是回到我们的views.py文件，继续完善ForgetPwdView的post方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户忘记码（找回密码）的函数</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        forget_form = ForgetForm()</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;)</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        forget_form = ForgetForm(request.POST)</span><br><span class="line">        if forget_form.is_valid():</span><br><span class="line">            email = request.POST.get(&apos;email&apos;, &apos;&apos;)</span><br><span class="line">            # 发送找回密码的邮件</span><br><span class="line">            send_register_eamil(email, &apos;forget&apos;)</span><br><span class="line">            return render(request, &apos;send_success.html&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;)</span><br></pre></td></tr></table></figure></p><p>再回到前端页面，看看这些是不是都修改完了：<img src="https://upload-images.jianshu.io/upload_images/8964398-6a6e6f7a1bf8b13c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>还有页面的提示信息也要修改（参考前面的介绍）：<img src="https://upload-images.jianshu.io/upload_images/8964398-63fb69409a287ab3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，我们密码找回就已经完成了，我们来测试一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f40edd5a85d88efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f7baf6b767bf6f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-eb392ec907dc3a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>测试成功了！</p><p>下面完成重置密码和修改密码的操作！</p><h2 id="重置密码的操作"><a href="#重置密码的操作" class="headerlink" title="重置密码的操作"></a>重置密码的操作</h2><h3 id="拷贝password-reset-html页面"><a href="#拷贝password-reset-html页面" class="headerlink" title="拷贝password_reset.html页面"></a>拷贝password_reset.html页面</h3><p>将<strong>password_reset.html</strong>页面拷贝到我们的templates文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-c0160afd89704377.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="定义重置密码的视图"><a href="#定义重置密码的视图" class="headerlink" title="定义重置密码的视图"></a>定义重置密码的视图</h3><p>打开users/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户重置密码的函数</span><br><span class="line">class ResetView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email&#125;)   # 告诉页面是哪个用户在重置密码</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;active_fail.html&quot;)</span><br><span class="line">        # 激活成功跳转到登录页面</span><br><span class="line">        return render(request, &quot;login.html&quot;)</span><br></pre></td></tr></table></figure></p><p>然后在eduline/urls.py文件里面配置url信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import  ResetView</span><br><span class="line"></span><br><span class="line"> # 密码重置url</span><br><span class="line">    re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>接下来我们在页面隐式回填刚才的email，在<strong>password_reset.html</strong>页面，添加下面一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;&#123;&#123; email &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-bc1cb52f0b368592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在调试一下我们的项目，在图示位置打上断点：<img src="https://upload-images.jianshu.io/upload_images/8964398-310aae9aade6db7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着我们登录新浪邮箱（前面是QQ邮箱就用QQ邮箱），查找我们的之前的重置密码邮件：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-44ed0d322f3398f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着将重置密码链接复制到浏览器地址栏打开，页面进入到Pycharm出现了：<img src="https://upload-images.jianshu.io/upload_images/8964398-1e212ddba3a46e51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后step out结束：<img src="https://upload-images.jianshu.io/upload_images/8964398-57a40adbebe992e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还记得我们刚才在里面加的那个input么，它的作用是告知页面哪个用户此时此刻正在重置密码，我们点击查看网页源代码，看是不是input起了作用：<img src="https://upload-images.jianshu.io/upload_images/8964398-58227cfa325da20c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，确实起了作用，不过我们除非查看了源码，否则是看不到的！</p><p>不过样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：<a href="https://www.jianshu.com/p/9019d6de27ae" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、页面第三行加上&#123;% load staticfiles %&#125;</span><br><span class="line">2、修改全部类型文件的static相对路径</span><br><span class="line">3、修改其中的url，配置跳转链接</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a8daf97ac6ab3696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>配置完以后我们刷新页面会出错，这是正常现象，因为我们在url跳转时缺少参数，这个先放在这里（如果你为了不影响心情，可以不刷新页面）！</p><p>刚才那个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用户修改密码时的表单，注意字段与前端页面保持一致</span><br><span class="line">class ModifyPwdForm(forms.Form):</span><br><span class="line">    password1 = forms.CharField(required=True, min_length=5)  # 新密码不能为空</span><br><span class="line">    password2 = forms.CharField(required=True, min_length=5)  # 确认密码不能为空</span><br></pre></td></tr></table></figure></p><p>记得与前端页面字段一致：<img src="https://upload-images.jianshu.io/upload_images/8964398-74dd66ddb34d19a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着回到我们的views.py文件，继续完善ResetView：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from users.forms import  ModifyPwdForm</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        modify_form = ModifyPwdForm(request.POST)</span><br><span class="line">        if modify_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;)</span><br><span class="line">            pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;)</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            # 如果前后两次密码不相等，那么回填信息并返回错误提示</span><br><span class="line">            if pwd1 != pwd2:</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;)</span><br><span class="line">            # 如果前后两次密码相等，那么进入我们的密码修改保存</span><br><span class="line">            # 取出用户信息</span><br><span class="line">            user = UserProfile.objects.get(email=email)</span><br><span class="line">            # 随意取出一个密码并将其进行加密</span><br><span class="line">            user.password = make_password(pwd1)</span><br><span class="line">            # 将更新后的用户信息保存到数据库里面</span><br><span class="line">            user.save()</span><br><span class="line">            # 密码重置成功以后，跳转到登录页面</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;)</span><br><span class="line">        else:</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;)</span><br></pre></td></tr></table></figure></p><p>我们现在来解决刚才url出错的问题，我们在path中的配置是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>它和我们普通的path不一样，里面有一个匹配active_code的正则表达式，所以在前端页面不能和普通的url那样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=&quot;&#123;% url &apos;reset_pwd&apos; %&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>既然不能这样写，那我们可以用一个普通的path来定义它，作用是修改密码即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import  ModifyPwdView</span><br><span class="line"></span><br><span class="line"># 修改密码url</span><br><span class="line">path(&quot;modify/&quot;, ModifyPwdView.as_view(), name=&quot;modify_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>这里面的ModifyPwdView是我们新建的视图函数，可以将前面的ResetView中的post方法脱离出来，成为ModifyPwdView的一部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户修改密码的函数</span><br><span class="line">class ModifyPwdView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        modify_form = ModifyPwdForm(request.POST)</span><br><span class="line">        if modify_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;)</span><br><span class="line">            pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;)</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            # 如果前后两次密码不相等，那么回填信息并返回错误提示</span><br><span class="line">            if pwd1 != pwd2:</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;)</span><br><span class="line">            # 如果前后两次密码相等，那么进入我们的密码修改保存</span><br><span class="line">            # 取出用户信息</span><br><span class="line">            user = UserProfile.objects.get(email=email)</span><br><span class="line">            # 随意取出一个密码并将其进行加密</span><br><span class="line">            user.password = make_password(pwd1)</span><br><span class="line">            # 将更新后的用户信息保存到数据库里面</span><br><span class="line">            user.save()</span><br><span class="line">            # 密码重置成功以后，跳转到登录页面</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;)</span><br><span class="line">        else:</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;)</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-93104c4150de4e03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后修改前端页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;reset_password_form&quot; action=&quot;&#123;% url &apos;modify_pwd&apos; %&#125;&quot; method=&quot;post&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-c7cf843ced54c659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在图示位置打上断点,开始调试我们的项目，具体操作和前面类似，这里就不介绍了。<img src="https://upload-images.jianshu.io/upload_images/8964398-460688e374b3afe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>复制密码重置链接去浏览器地址栏打开，输入新的密码：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-b4d17a5ce747ad8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击提交按钮，就进入下面的Pycharm页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f495897e541f5a28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意：如果点击提交按钮没有反应，页面没有进入view.py里面的方法，可能是按钮的类型错了，type=”submit”而不是type=”button”，也就是这个样子：</strong><img src="https://upload-images.jianshu.io/upload_images/8964398-76b3224e0ce4817c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后，修改<strong>password_reset.html</strong>的错误信息的提示：<img src="https://upload-images.jianshu.io/upload_images/8964398-70c9aca9f3044fe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>前面说了这么多调试命令，小伙伴们可能会不太明白其中的意思，下面我详细介绍一下Pycharm是如何调试代码的！</p><h2 id="Pycharm中的调试"><a href="#Pycharm中的调试" class="headerlink" title="Pycharm中的调试"></a>Pycharm中的调试</h2><p>如果你熟悉Eclipse，那你肯定知道它的快捷键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F5：跳入方法</span><br><span class="line">F6：向下逐行调试</span><br><span class="line">F7：跳出方法</span><br><span class="line">F8：直接跳转到下一个断点</span><br></pre></td></tr></table></figure></p><p>当然Pycharm也是可以采用Eclipse的快捷键来调试代码的，具体设置方法如下：</p><p>点击File–&gt; Settings–&gt; Apperance–&gt; Keymap–&gt; 右侧下拉选Eclipse–&gt; Apply –&gt; OK这几步就完成了，没看懂的可以看下面的图片（记得按照序号的顺序来操作哈）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-69b4a5a2982797df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>当然如果你没用过Eclipse，也不想记那些快捷键，这也是可以的，那看下面的图片：<img src="https://upload-images.jianshu.io/upload_images/8964398-b62f2965bd305534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个页面你总是经常看到吧，下面分别解释一下各个键的名称及功能作用（括号内是默认的快捷键，也就是Pycharm自己设定的）：</p><hr><ul><li>1、step over（F8）作用是在同一个调用栈层中移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将在函数调用之后的下一条语句停止。调试器不会进入函数体。如果当前行是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。</li></ul><hr><hr><ul><li>2、step into（F7）作用是移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将进入函数，并停止在函数体的第一行。step-into可以帮助初步揭开代码位置的谜团。例如，函数调用和函数本身可能在不同的文件中是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。</li></ul><hr><hr><ul><li>3、Force step into（Ctrl+shift+F7）可以看做是step into的升级版本，可以越过代码，强力执行。</li></ul><hr><hr><ul><li>4、step-out（shift+F8）作用是在栈中前进到下一层，并在调用函数的下一行停止。</li></ul><hr><p>还有，如果你有多个断点，如何在pycharm中从第一个断点跳转至第二个断点呢？<br>例如第一个断点在第一行，第二个断点在第五十行，那么开始debug后，你首先停在第一行，随后点击菜单栏的Run-&gt; Resume Program即可跳转至第二个断点了，是不是很简单!</p><p>至此，关于用户的激活，用户密码找回，重置密码，修改密码，调试代码等功能的介绍就到此为止，感谢你的赏阅！</p><p>本篇笔记对应于第十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十三）：邮箱验证码实现</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要解决用户注册，验证码的实现，邮箱验证码的发送这3个问题。</p><p>本篇笔记对应于第十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><hr><p><strong>非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><p>至此，本篇关于用户注册，验证码的实现，邮箱验证码的发送这3个问题的介绍就到此结束了，下一篇我们将实现用户的激活，用户密码找回等功能的实现，感谢你的赏阅。</p><p>本篇笔记对应于第十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十二）：错误信息提示</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E6%8F%90%E7%A4%BA/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E6%8F%90%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题。</p><p>本篇笔记对应于第十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="基于类的用户登录实现"><a href="#基于类的用户登录实现" class="headerlink" title="基于类的用户登录实现"></a>基于类的用户登录实现</h2><p>在前面我们实现用户登录是基于视图函数来实现的，也就是下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 当我们配置的url被这个view处理时，将会自动传入request对象.</span><br><span class="line">def user_login(request):</span><br><span class="line">    # 前端向后端发送的请求方式有两种: get和post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单时为post</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">        # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">        user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">        pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">        # 取值成功返回user对象,失败返回null</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。</span><br><span class="line">            login(request, user)</span><br><span class="line">            # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">            return render(request, &apos;index.html&apos;)</span><br><span class="line">        else:</span><br><span class="line">            # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">    # 获取登录页面时为get</span><br><span class="line">    elif request.method == &quot;GET&quot;:</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>同时在eduline/urls.py文件的路径配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from users.views import user_login</span><br><span class="line"></span><br><span class="line">path(&apos;login/&apos;, user_login, name=&quot;login&quot;)</span><br></pre></td></tr></table></figure></p><p>现在我们采用<strong>基于类的方法来实现用户的登录</strong>，因为基于类可以便于重载和调用。下面是基于类的代码，小伙伴们试着体验一下两者的不同之处吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#  基于类实现用户的登录，它需要继承view</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 不需要判断，直接调用get方法</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    # 不需要判断，直接调用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">        user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">        pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">        # 取值成功返回user对象,失败返回null</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                login(request, user)</span><br><span class="line">            # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                return render(request, &quot;index.html&quot;)</span><br><span class="line">        else:</span><br><span class="line">            # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p>同时在eduline/urls.py文件的路径配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # 基于类的用户登录path配置</span><br><span class="line">path(&apos;login/&apos;, LoginView.as_view(), name=&quot;login&quot;)</span><br></pre></td></tr></table></figure></p><p>你是不是觉得很方便了，不用判断请求的方法类型，直接就可以调用了！不过现在有个疑问，如果用户在提交表单的时候，都不满足我们表单的要求，比方说我们要求密码不得少于5位数，不能为空等，那样我们还需要用刚才的方法去验证么，其实根本就可以不用验证，这就是非法的字符。因此，我们有必要在表单提交时就定义一个可以检查是否需要继续后续操作的验证方法。</p><p>我们继续往下进行：</p><p>我们打开users这个应用，在里面新建forms.py文件,然后在里面输入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户登录表单的验证</span><br><span class="line">class LoginForm(forms.Form):</span><br><span class="line">    username = forms.CharField(required=True)  # 用户名不能为空</span><br><span class="line">    password = forms.CharField(required=True, min_length=5)  # 密码不能为空，而且最小6位数</span><br></pre></td></tr></table></figure></p><p>既然我们写好了表单的验证条件，接下来我们就把它用起来，继续回到我们的users/views.py文件，我们对登录函数做一个修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#  基于类实现用户的登录，它需要继承view</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    # 不需要判断，直接调用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息</span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line">        # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息</span><br><span class="line">        if login_form.is_valid():</span><br><span class="line">            # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">            pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">            # 取值成功返回user对象,失败返回null</span><br><span class="line">            user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">            if user is not None:</span><br><span class="line">                # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                login(request, user)</span><br><span class="line">                # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                return render(request, &quot;login.html&quot;)</span><br><span class="line">            else:</span><br><span class="line">                # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">                return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p>现在我们又有一个疑问，假定你密码输入错误以后，你是不是只需要重新输入密码即可，用户名还是存在的，我们不希望还要去重新输入用户名。因此，我们的错误提示信息需要修改，继续完善我们的views.py文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if user is not None:</span><br><span class="line">               # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">               login(request, user)</span><br><span class="line">               # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">               return render(request, &quot;login.html&quot;)</span><br><span class="line">           else:</span><br><span class="line">               # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回</span><br><span class="line">               return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">       # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息</span><br><span class="line">       else:</span><br><span class="line">           return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;)</span><br></pre></td></tr></table></figure></p><p>就是下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f0922a3d8665dd61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>注意：forms.py文件中的username和password必须和html中的保持一致，因为它是我们从request.POST中得到的（request.POST也是从前端页面获取到的）。</strong></p><h3 id="Debug测试一下"><a href="#Debug测试一下" class="headerlink" title="Debug测试一下"></a>Debug测试一下</h3><p>我们在views.py文件的<code>if login_form.is_valid():</code>处打上一个断点，开启调式模式：<br>我们不输入用户名，密码输ad这2个数，然后回车，页面进入Pycharm，单击一步步调试按钮，可以出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-37ddb4374e4425cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>放大一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-52ed0fcd97d236de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们知道，这个errors其实是一个ErrorDict,我们可以通过这个来获取错误信息的提示，然后把它放在前端页面即可，还记得我们说过如果表单提交验证不通过直接刷新返回到登录页面，就是这段代码起的作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">else:</span><br><span class="line">    return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;)</span><br></pre></td></tr></table></figure></p><p>现在我们在前端登录页面<strong>login.html</strong>配置错误提示信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-19bbd93a187ad8b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>加上错误提示代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group marb20 &#123;% if login_form.errors.username %&#125;errorput&#123;% endif %&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;form-group marb8 &#123;% if login_form.errors.password %&#125;errorput&#123;% endif %&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-8a69021b892bcf7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>仅仅这样还不够，我们需要将forms.py文件里定义的错误信息给显示出来，那需要修改并添加一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;error btns login-form-tips&quot; id=&quot;jsLoginTips&quot;&gt;</span><br><span class="line">                        &#123;% for key,error in login_form.errors.items %&#125;</span><br><span class="line">                            &#123;&#123; error &#125;&#125;</span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                        &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-0a4189a14f305825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们现在运行一下我们的项目：runserver一下，不写任何信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-c9a416899bb5b626.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="cookie和session自动登录"><a href="#cookie和session自动登录" class="headerlink" title="cookie和session自动登录"></a>cookie和session自动登录</h2><h3 id="cookie的用途"><a href="#cookie的用途" class="headerlink" title="cookie的用途"></a>cookie的用途</h3><p>正如你所知道的http请求是一种无状态的请求，也就是说每次请求是独立的。假如用户向服务器发起两次请求，那么这两次请求是没有状态的，服务器不知道这两次请求都是同一个用户发起的。</p><p>所以为了解决这个无状态请求，人们引入了cookie这个概念，这使得每次请求变得有状态起来：<img src="https://upload-images.jianshu.io/upload_images/8964398-b0c66867c3766c51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><strong>记住cookie是不能跨域访问的！</strong><br>我们以chrome浏览器为例，打开百度的首页，并按键盘上的F12（或者ctrl+shift+I），开启监控模式：<img src="https://upload-images.jianshu.io/upload_images/8964398-f12f77c558e25229.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后我们尝试清空一下cookies,重新刷新一下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-7c371503fee8cb09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>cookie又出现了，所以cookie可以把你的用户名和密码保存在浏览器本地。</p><p>不过这样做有个坏处，那就是你的密码和用户名都是缓存在本地的，一旦别人拿到你的电脑，那你的信息将被剽窃，非常不安全。</p><p>那么我们在想有没有一种可以把数据缓存在服务器，然后发给用户的只是类似于钥匙的东西，而且这个钥匙最好是有过期时间，这样人家就算拿到你的电脑，也只是知道类似于钥匙的东西还必须在规定的时间内才能打开，这样一来安全得到了非常好的保证，session就是在满足这些条件下诞生的。</p><h3 id="session的安全护航"><a href="#session的安全护航" class="headerlink" title="session的安全护航"></a>session的安全护航</h3><p>用户在向服务器发起第一次请求后，服务器会给用户随机地分派一个id（可以是用户的user id，也可以一段任意的字符串），我们把它叫做session id。这个session id是服务器采用自己的规则生成，它保存在本地cookie里面。当用户再次发起请求时，这个session id会上传至服务器，服务器接收后会识别它，并返回相关的信息。</p><p>我们登录的session就是这样：<br>1、用户输入用户名 &amp;和密码，点击提交；<br>2、调用 login()命令, 后端程序会根据用户名密码生成session id并保存在数据库中；<br>3、用户登录之后，需要通过这个session id取出相关的基本信息。</p><p>我们打开我们的navicat,去我们的数据库中找到我们Django自带的session表：<img src="https://upload-images.jianshu.io/upload_images/8964398-d30f9f6454a9e296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个表中是登录后才有的，如果你此刻没有登录，请先登录一下我们的后台管理系统：<img src="https://upload-images.jianshu.io/upload_images/8964398-7a75c875620a1e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你还可以清空我们这张表，然后重新登录试试，这里就不一一演示了（结果都是一样）。这个表中包含：session_key（钥匙）, session_data（数据）,expire_date（过期时间）。</p><p>我们运行一下我们的项目，用户先登录，然后我们按键盘上的F12（或者ctrl+shift+I），开启监控模式，查看cookie里面的信息是不是包含session id,而且主要检查数据是不是一样的：<img src="https://upload-images.jianshu.io/upload_images/8964398-aba2ba3c21c9a8cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，和我们刚才数据库中看到的一模一样，不过session_key 在浏览器就叫做session id了，名字不同而已。这主要归功于django自带的session功能：<img src="https://upload-images.jianshu.io/upload_images/8964398-32ba2ef208800b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果你对cookie和session的原理感兴趣，可以浏览这篇文章：<a href="http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">django从请求到返回都经历了什么?</a></p><p>至此，本篇关于解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题的介绍就到此结束了，感谢你的赏阅！</p><p>本篇笔记对应于第十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇笔记开始，我们就正式进入到前端页面的配置了，里面包含的信息很多，主要解决网站首页显示，发送接收验证码，用户注册，登录，密码找回，修改密码等问题。鉴于篇幅可能有点长，所以这里分3篇进行介绍，分别是第十一，十二，十三篇笔记。本篇笔记主要解决网站首页显示和登录页面的配置以及登录方式的自定义这3个问题。</p><p>本篇笔记对应于第十一篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="网站首页显示和登录页面的配置"><a href="#网站首页显示和登录页面的配置" class="headerlink" title="网站首页显示和登录页面的配置"></a>网站首页显示和登录页面的配置</h2><h3 id="放置前端网站首页index-html"><a href="#放置前端网站首页index-html" class="headerlink" title="放置前端网站首页index.html"></a>放置前端网站首页<strong>index.html</strong></h3><p>正如大家平时所看到的那样，一般网站首页都是直接在根目录下显示的，所以我们就要在我们的初始前端资料里面，把我们的<strong>index.html</strong>文件放在templates目录里面，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-423763d358b99931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="新建静态文件夹static"><a href="#新建静态文件夹static" class="headerlink" title="新建静态文件夹static"></a>新建静态文件夹<strong>static</strong></h3><p>在主项目树里面新建静态文件夹<strong>static</strong>，再在里面新建5个文件夹，用于放置css，img，images，js，media等文件。就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-4ae0006cb7b7eba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>前面说过Django的web开发是采用MTV模式的，现在如果我们想在浏览器中显示前端页面，我们只需要配置一下url就可以了。</p><h3 id="前端静态页面的URL的配置"><a href="#前端静态页面的URL的配置" class="headerlink" title="前端静态页面的URL的配置"></a>前端静态页面的URL的配置</h3><p>打开我们的eduline/urls.py文件，修改为如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from django.views.generic import TemplateView</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">    # 用&apos;&apos;指代根目录，TemplateView.as_view可以将template转换为view</span><br><span class="line">    path(&apos;&apos;, TemplateView.as_view(template_name=&apos;index.html&apos;), name=&apos;index&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接下来我们运行一下我们的项目:runserver,直接在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/或者http://127.0.0.1回车一下，出现：![](https://upload-images.jianshu.io/upload_images/8964398-0ba43f22a440a851.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/或者http://127.0.0.1回车一下，出现：![](https://upload-images.jianshu.io/upload_images/8964398-0ba43f22a440a851.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>我们的index页面已经成功加载出来了，但是很丑，因为样式还没有加载出来，我们需要配置一下路径。</p><h3 id="配置静态static文件的路径"><a href="#配置静态static文件的路径" class="headerlink" title="配置静态static文件的路径"></a>配置静态static文件的路径</h3><p>打开我们的eduline/settings.py文件，拉到最底下，添加修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &quot;static&quot;),  </span><br><span class="line"># 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>静态文件路径修改了，所以我们需要在前端页面代码里面对其引用路径都作修改：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-3c2d70b64446c2b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>将所有的<strong>../</strong>,全部替换为<strong>/static/</strong>，你可以使用ctrl+f，先查找出所有再替换也可以的：<img src="https://upload-images.jianshu.io/upload_images/8964398-44a93e401533e4ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-a6623ea8262c48da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着，把我们前端资料里的文件都放在指定的文件夹里面（资料里都有文件夹名，而且都是和你刚才创建的名字一样）</p><p>偷懒的话可以直接复制粘贴相关文件。</p><p>现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-d2a1b75a13d632ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>说明我们的前端网站页面已经成功显示了。（如果出现页面残缺问题，可以使用本篇笔记上传的旧版前端资料。）</p><h2 id="登录页面的配置"><a href="#登录页面的配置" class="headerlink" title="登录页面的配置"></a>登录页面的配置</h2><h3 id="放置前端登录页面login-html"><a href="#放置前端登录页面login-html" class="headerlink" title="放置前端登录页面login.html"></a>放置前端登录页面<strong>login.html</strong></h3><p>在前端资料里面把我们的<strong>login.html</strong>文件放在templates目录里面，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-306e252388da75b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="替换路径"><a href="#替换路径" class="headerlink" title="替换路径"></a>替换路径</h3><p>同样将所有的<strong>../</strong>,全部替换为<strong>/static/</strong>，你可以使用ctrl+f，先查找出所有再替换也可以的，这里就不细说了。</p><h3 id="登录页面的URL的配置"><a href="#登录页面的URL的配置" class="headerlink" title="登录页面的URL的配置"></a>登录页面的URL的配置</h3><p>打开我们的eduline/urls.py文件，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 登录url</span><br><span class="line">path(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot;</span><br></pre></td></tr></table></figure></p><h3 id="取消注释并修改登录路径"><a href="#取消注释并修改登录路径" class="headerlink" title="取消注释并修改登录路径"></a>取消注释并修改登录路径</h3><p>打开我们的<strong>index.html</strong>页面，找到第27,28行，取消注释（删除注释符号），再将里面的<strong>href=”login.html”</strong>修改为：<strong>href=”/login/“</strong>，再找到第30行代码，将一对<code>&lt;div class=&quot;personal&quot;&gt;   &lt;/div&gt;</code>给收起来，并注释掉，因为我们目前还用不到它。就是下面的一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--&lt;div class=&quot;personal&quot;&gt;</span><br><span class="line">                           &lt;dl class=&quot;user fr&quot;&gt;</span><br><span class="line">                               &lt;dd&gt;bobby&lt;img class=&quot;down fr&quot; src=&quot;/static/images/top_down.png&quot;/&gt;&lt;/dd&gt;</span><br><span class="line">                               &lt;dt&gt;&lt;img width=&quot;20&quot; height=&quot;20&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt;</span><br><span class="line">                           &lt;/dl&gt;</span><br><span class="line">                           &lt;div class=&quot;userdetail&quot;&gt;</span><br><span class="line">                           &lt;dl&gt;</span><br><span class="line">                                &lt;dt&gt;&lt;img width=&quot;80&quot; height=&quot;80&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt;</span><br><span class="line">                                &lt;dd&gt;</span><br><span class="line">                                    &lt;h2&gt;django&lt;/h2&gt;</span><br><span class="line">                                    &lt;p&gt;bobby&lt;/p&gt;</span><br><span class="line">                                &lt;/dd&gt;</span><br><span class="line">                               &lt;/dl&gt;</span><br><span class="line">                               &lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">                                &lt;a class=&quot;personcenter fl&quot; href=&quot;usercenter-info.html&quot;&gt;进入个人中心&lt;/a&gt;</span><br><span class="line">                                &lt;a class=&quot;fr&quot; href=&quot;/logout/&quot;&gt;退出&lt;/a&gt;</span><br><span class="line">                               &lt;/div&gt;</span><br><span class="line">                           &lt;/div&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">  --&gt;</span><br></pre></td></tr></table></figure></p><p>现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-366d9a69539727d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后点击登录按钮，跳转到如下地址：<a href="http://127.0.0.1:8000/login/，页面成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-3786426fe6c9e08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/login/，页面成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-3786426fe6c9e08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>恭喜你，我们登录页面也已经正常显示出来了，下面是如何实现登录的交互功能。</p><h2 id="登录页面的交互实现"><a href="#登录页面的交互实现" class="headerlink" title="登录页面的交互实现"></a>登录页面的交互实现</h2><p>Django的MTV模式你还差一个V，也就是view你还没用到过，这里就到了它大显身手的时候了。尽管前面我们已经把网站首页和登录页面在浏览器中显示了，但是那些信息都是固定的，也就是说当初前端人员在设计网页的时候就确定了，我们现在所要做的就是更改它们的信息，使满足自己的信息得到显示。</p><p>接下来我们就通过编写视图函数，来实现这个，不过前提是需要挖坑与填坑操作，这里先不介绍，后面会具体说明。</p><h3 id="视图函数View的创建"><a href="#视图函数View的创建" class="headerlink" title="视图函数View的创建"></a>视图函数View的创建</h3><p>我们打开，apps/users/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 当我们配置的url被这个view处理时，将会自动传入request对象.</span><br><span class="line">def user_login(request):</span><br><span class="line">    # 前端向后端发送的请求方式有两种: get和post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单时为post</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">        pass</span><br><span class="line">    # 获取登录页面时为get</span><br><span class="line">    elif request.method == &quot;GET&quot;:</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开eduline/urls.py文件，将login的登录路径修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from users.views import login</span><br><span class="line"></span><br><span class="line"> # 登录url</span><br><span class="line">    # path(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot;)</span><br><span class="line">    path(&apos;login/&apos;, login, name=&quot;login&quot;)</span><br></pre></td></tr></table></figure></p><p>现在我们准备测试一下，我们获取登录页面时的method是不是为get，在两行返回语句的位置打上断点：<img src="https://upload-images.jianshu.io/upload_images/8964398-2c7f1dd6c69472a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后开启debug模式，待网站首页显示出来以后点击登录按钮，可以看到蓝色行跳到render那一行了，并发现Method就是GET:<img src="https://upload-images.jianshu.io/upload_images/8964398-af9e9c8f1b50c530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><p>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</p><hr><p>至此，我们本篇关于网站首页显示和登录页面的配置以及登录方式的自定义这3个问题的介绍，就到此结束了，感谢你的赏阅。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要完善上篇笔记中遗留的其余3个apps的注册，还有xadmin的全局配置，让你打造一个属于自己的网站后台管理系统。</p><p>本篇笔记对应于第十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="其余3个apps的注册"><a href="#其余3个apps的注册" class="headerlink" title="其余3个apps的注册"></a>其余3个apps的注册</h2><h3 id="courses的注册"><a href="#courses的注册" class="headerlink" title="courses的注册"></a>courses的注册</h3><p>我们打开eduline/apps/courses这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始进行app的注册,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import Course, Lesson, Video, CourseResource</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                    &apos;add_time&apos;, &apos;get_zj_nums&apos;, &apos;go_to&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;,</span><br><span class="line">                     &apos;click_nums&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                   &apos;add_time&apos;]  # 过滤器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LessonAdmin(object):</span><br><span class="line">    list_display = [&apos;course&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;course&apos;, &apos;name&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;course__name&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VideosAdmin(object):</span><br><span class="line">    list_display = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;lesson&apos;, &apos;name&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseResourceAdmin(object):</span><br><span class="line">    list_display = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(Course, CourseAdmin)</span><br><span class="line">xadmin.site.register(Lesson, LessonAdmin)</span><br><span class="line">xadmin.site.register(Video, VideosAdmin)</span><br><span class="line">xadmin.site.register(CourseResource, CourseResourceAdmin)</span><br></pre></td></tr></table></figure></p><p>运行一下你的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-f01e68630a744bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-f01e68630a744bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><h3 id="organization的注册"><a href="#organization的注册" class="headerlink" title="organization的注册"></a>organization的注册</h3><p>我们打开eduline/apps/organization这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始进行app的注册,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import CityDict, CourseOrg, Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CityDictAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseOrgAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TeacherAdmin(object):</span><br><span class="line">    list_display = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(CityDict, CityDictAdmin)</span><br><span class="line">xadmin.site.register(CourseOrg, CourseOrgAdmin)</span><br><span class="line">xadmin.site.register(Teacher, TeacherAdmin)</span><br></pre></td></tr></table></figure></p><p>运行一下你的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-d11e1dfd1f6be110.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-d11e1dfd1f6be110.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><h3 id="operation的注册"><a href="#operation的注册" class="headerlink" title="operation的注册"></a>operation的注册</h3><p>我们打开eduline/apps/operation这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始进行app的注册,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import UserAsk,CourseComments,UserFavorite,UserMessage,UserCourse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAskAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseCommentsAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavoriteAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserMessageAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserCourseAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;,  &apos;course&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;,  &apos;course&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;,  &apos;course&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserAsk, UserAskAdmin)</span><br><span class="line">xadmin.site.register(CourseComments, CourseCommentsAdmin)</span><br><span class="line">xadmin.site.register(UserFavorite, UserFavoriteAdmin)</span><br><span class="line">xadmin.site.register(UserMessage, UserMessageAdmin)</span><br><span class="line">xadmin.site.register(UserCourse, UserCourseAdmin)</span><br></pre></td></tr></table></figure></p><p>运行一下你的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-e162226c8ebcb58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-e162226c8ebcb58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>至此，我们所有的apps都已经注册完了。接下来我们就开始定制属于自己的后台管理系统吧。</p><h2 id="xadmin的全局配置"><a href="#xadmin的全局配置" class="headerlink" title="xadmin的全局配置"></a>xadmin的全局配置</h2><h3 id="开启主题功能"><a href="#开启主题功能" class="headerlink" title="开启主题功能"></a>开启主题功能</h3><p>打开users/adminx.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from xadmin import views</span><br><span class="line"># 创建xadmin的全局管理器并与view进行绑定</span><br><span class="line">class BaseSetting(object):</span><br><span class="line">    enable_themes = True  # 修改主题</span><br><span class="line">    use_bootswatch = True    # 增加主题的可选内容</span><br><span class="line"></span><br><span class="line"># 将全局配置管理与view进行绑定注册</span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br></pre></td></tr></table></figure></p><p>看到没，已经出现更换主题按钮了，你可以自定义喜欢的主题了：<img src="https://upload-images.jianshu.io/upload_images/8964398-449c80187a937964.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="后台管理名称配置"><a href="#后台管理名称配置" class="headerlink" title="后台管理名称配置"></a>后台管理名称配置</h3><p>如图，我们需要修改站点标题，站点尾注，折叠菜单等以下内容：<img src="https://upload-images.jianshu.io/upload_images/8964398-2442e83e5776f4a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-b55cce406b314f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>为了更好地管理这些不变动的信息，我们依旧放在users/adminx.py文件里面。我们打开它，并在其中加入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &apos;慕学后台管理系统&apos;  # 站点标题</span><br><span class="line">    site_footer = &apos;慕海学习网&apos;   # 站点尾注</span><br><span class="line">    menu_style = &apos;accordion&apos;   # 折叠收起菜单</span><br><span class="line"># 将站点标题与站点尾注进行注册:</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的网页，就变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f05446a8d694cbac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不知你发现没有，还有一个问题就是折叠后apps还是显示英文：<img src="https://upload-images.jianshu.io/upload_images/8964398-1a0566f043f7c68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们想变成中文，可以吗？答案是当然可以的！</p><h3 id="配置apps的后台显示"><a href="#配置apps的后台显示" class="headerlink" title="配置apps的后台显示"></a>配置apps的后台显示</h3><p>打开每个app下面的apps.py文件，追加verbose_name信息。我们以users/apps.py为例,修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UsersConfig(AppConfig):</span><br><span class="line">    name = &apos;users&apos;</span><br><span class="line">    verbose_name = &apos;用户信息&apos;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-fa5cd2b75f103c5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其余apps的apps.py文件修改如下：<br><strong>courses/apps.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class CoursesConfig(AppConfig):</span><br><span class="line">    name = &apos;courses&apos;</span><br><span class="line">    verbose_name = &apos;课程管理&apos;</span><br></pre></td></tr></table></figure></p><p><strong>operation/apps.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class OperationConfig(AppConfig):</span><br><span class="line">    name = &apos;operation&apos;</span><br><span class="line">    verbose_name = &apos;用户操作&apos;</span><br></pre></td></tr></table></figure></p><p><strong>organization/apps.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class OrganizationConfig(AppConfig):</span><br><span class="line">    name = &apos;organization&apos;</span><br><span class="line">    verbose_name = &apos;机构管理&apos;</span><br></pre></td></tr></table></figure></p><p>再来刷新一下我们的页面，我们发现页面还是老样子，并没有出现与我们设想的页面，那是因为我们还没有配置信息，我们需要在每个app应用的–init–.py文件里加上引用apps的配置信息，就一行代码：<code>default_app_config = &quot;appname.apps.AppnameConfig&quot; # 注意第二个Appname首字母大写</code>。我们设置如下：<br>以<strong>users/–init–.py:</strong>为例，<strong>记住是箭头2不是箭头1（箭头1是apps这个文件的）！！！</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-89d0a2c0da853850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>添加如下一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;users.apps.UsersConfig&apos;</span><br></pre></td></tr></table></figure></p><p><strong>courses/–init–.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;courses.apps.CoursesConfig&apos;</span><br></pre></td></tr></table></figure></p><p><strong>operation/–init–.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;operation.apps.OperationConfig&apos;</span><br></pre></td></tr></table></figure></p><p><strong>organization/–init–.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;organization.apps.OrganizationConfig&apos;</span><br></pre></td></tr></table></figure></p><p>现在我们刷新一下我们的页面，成功了：<img src="https://upload-images.jianshu.io/upload_images/8964398-8db8f42e19692a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="自定义菜单显示顺序"><a href="#自定义菜单显示顺序" class="headerlink" title="自定义菜单显示顺序"></a>自定义菜单显示顺序</h3><p>上面菜单的显示是根据我们注册的时间来显示的，我们可以自定义我们的菜单显示顺序：在users/adminx.py文件加上以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from users.models import EmailVerifyRecord, Banner, UserProfile</span><br><span class="line">from courses.models import Course, CourseResource, Lesson, Video</span><br><span class="line">from organization.models import CourseOrg, CityDict, Teacher</span><br><span class="line">from operation.models import CourseComments, UserMessage, UserFavorite, UserCourse, UserAsk</span><br><span class="line">from django.contrib.auth.models import Group, Permission</span><br><span class="line">from xadmin.models import Log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &apos;慕学后台管理系统&apos;</span><br><span class="line">    site_footer = &apos;慕海学习网&apos;</span><br><span class="line">    menu_style = &apos;accordion&apos;</span><br><span class="line"></span><br><span class="line">    def get_site_menu(self):</span><br><span class="line">        return (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;课程信息&apos;, &apos;url&apos;: self.get_model_url(Course, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;章节信息&apos;, &apos;url&apos;: self.get_model_url(Lesson, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;视频信息&apos;, &apos;url&apos;: self.get_model_url(Video, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;课程资源&apos;, &apos;url&apos;: self.get_model_url(CourseResource, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;课程评论&apos;, &apos;url&apos;: self.get_model_url(CourseComments, &apos;changelist&apos;)&#125;,</span><br><span class="line">                )&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;机构管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;所在城市&apos;, &apos;url&apos;: self.get_model_url(CityDict, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;机构讲师&apos;, &apos;url&apos;: self.get_model_url(Teacher, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;机构信息&apos;, &apos;url&apos;: self.get_model_url(CourseOrg, &apos;changelist&apos;)&#125;,</span><br><span class="line">                )&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户信息&apos;, &apos;url&apos;: self.get_model_url(UserProfile, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户验证&apos;, &apos;url&apos;: self.get_model_url(EmailVerifyRecord, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户课程&apos;, &apos;url&apos;: self.get_model_url(UserCourse, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户收藏&apos;, &apos;url&apos;: self.get_model_url(UserFavorite, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户消息&apos;, &apos;url&apos;: self.get_model_url(UserMessage, &apos;changelist&apos;)&#125;,</span><br><span class="line">                )&#125;,</span><br><span class="line"></span><br><span class="line">                &#123;&apos;title&apos;: &apos;系统管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户咨询&apos;, &apos;url&apos;: self.get_model_url(UserAsk, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;首页轮播&apos;, &apos;url&apos;: self.get_model_url(Banner, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户分组&apos;, &apos;url&apos;: self.get_model_url(Group, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户权限&apos;, &apos;url&apos;: self.get_model_url(Permission, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;日志记录&apos;, &apos;url&apos;: self.get_model_url(Log, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure></p><p><strong>记住这段代码是和我们之前定义全局配置放在同一个函数里面的</strong><br>注意：是<code>from users.models import EmailVerifyRecord, Banner, UserProfile</code>而不是：<code>from apps.users.models import EmailVerifyRecord, Banner, UserProfile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError: Model class apps.users.models.UserProfile doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS.</span><br></pre></td></tr></table></figure></p><p>也就是说直接from users.models，不用再写上from apps.users.models。</p><p>最后我们运行一下我们的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin,然后回车，就成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-b129d1c498227dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin,然后回车，就成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-b129d1c498227dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>说明一下，这个日志记录就是用来记录我们之前进行过什么操作的文件。</p><p>你可能会问，这些apps的图片都是圆圈，我们可以自定义图标么？答案是当然了！<br>这里我就不介绍了，有兴趣的小伙伴们可以自己设置，这里我开启传送大门：<a href="https://www.cnblogs.com/adc8868/p/7506973.html" target="_blank" rel="noopener">xadmin管理员详情页面布局，导航图标设置</a></p><p>至此，我们自己专属的网站后台就搭建成功了，感谢你的赏阅！下一篇我们就正式进入到前端页面的配置了，主要解决用户注册，登录的问题。</p><p>本篇笔记对应于第十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在前面的笔记中我们进行了需求分析和数据库的设计，本篇笔记主要介绍Django自带的用于后台管理的admin，并在此基础上介绍另一个插件xadmin的使用。</p><p>本篇笔记对应于第九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="django自带的admin介绍"><a href="#django自带的admin介绍" class="headerlink" title="django自带的admin介绍"></a>django自带的admin介绍</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<code>runserver</code>再回车：<img src="https://upload-images.jianshu.io/upload_images/8964398-c332955dd793cd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在浏览器地址栏中输入<strong><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></strong>出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-861580511e2f1b76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>恭喜你，你已经进入到Django admin的后台管理网页了。</p><p>你可能会问，为什么会有这个页面，我可是什么操作也没干啊（一脸无辜）。对的，你确实什么也不用干，因为Django已经帮你做好了。</p><p>打开eduline/settings.py文件，找到第34行代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-2b7c4081875c7329.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，admin它其实也是一个app，不过在我们新建项目时就已经创建好了，不用你去动手，是不是很人性化。</p><p>我们现在再来打开eduline/urls.py文件，找到第19行代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-f278038ce7547ae4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没，admin竟然已经自动在url中进行了配置（整个项目就它一个配置了url，可见重要性不一般），所以你前面访问<strong><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></strong>才会有响应。</p><p>我们回到后台页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-861580511e2f1b76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>有登录按钮，所以我们需要先注册一个账号，Django默认是不会给你创建账号的。</p><h3 id="注册超级管理员"><a href="#注册超级管理员" class="headerlink" title="注册超级管理员"></a>注册超级管理员</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createsuperuser</span><br></pre></td></tr></table></figure></p><p>然后系统会提示你输入以下信息：Username，Email address，Password：<img src="https://upload-images.jianshu.io/upload_images/8964398-318068326946d5a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来进行数据库的生成和迁移操作（因为users应用中多了一个名为NewBee的超级管理员），我们只需要对users 这个应用进行相关操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-001d6cac2dace839.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="登入admin后台"><a href="#登入admin后台" class="headerlink" title="登入admin后台"></a>登入admin后台</h3><p>运行一下我们的项目，在浏览器地址栏输入：<strong><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></strong>，并在登录页面输入刚才注册的账号信息(默认登录方式是用户名 + 密码,后面会教你如何实现用户名或邮箱+密码登录的登录形式)，点击登录，就进入后台了：<img src="https://upload-images.jianshu.io/upload_images/8964398-d28ab8abe20d77e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>全是英文，我们去设置里配置一下：打开eduline/settings.py文件，找到第117行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;en-us&apos;</span><br><span class="line"></span><br><span class="line">TIME_ZONE = &apos;UTC&apos;</span><br></pre></td></tr></table></figure></p><p>我们修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 将语言修改为中文</span><br><span class="line">LANGUAGE_CODE = &apos;zh-hans&apos;</span><br><span class="line"></span><br><span class="line"># 将时区修改为上海</span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line"></span><br><span class="line"># 数据库存储使用时间，True时间会被存为UTC的时间。所以采用False</span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的后台网页：<img src="https://upload-images.jianshu.io/upload_images/8964398-29c76784bdca8b9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>恭喜你，admin被汉化成功了。接下来就是把我们前面定义的数据库字段都显示出来，首先把我们的UserProfile注册进来。</p><h2 id="注册UserProfile"><a href="#注册UserProfile" class="headerlink" title="注册UserProfile"></a>注册UserProfile</h2><p>打开eduline/apps/users/admin.py文件，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line"></span><br><span class="line"># Register your models here.</span><br><span class="line"># 因为处于同一个目录之下，所以可以直接使用.models代替当前目录</span><br><span class="line">from .models import UserProfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写一个管理器，命名规则：Model+Admin</span><br><span class="line">class UserProfileAdmin(admin.ModelAdmin):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将UserProfile注册进我们的admin中, 并为它选择管理器UserProfileAdmin</span><br><span class="line">admin.site.register(UserProfile, UserProfileAdmin)</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的后台网页：<img src="https://upload-images.jianshu.io/upload_images/8964398-cb0704f8904b6d98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Users 是用户所在表的名称：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d566afa1275d6c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击右侧的增加用户信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-a72494f0844da55e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们看到一下信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-151e579951bcdf29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们尝试再次新建一个用户：<strong>NewBai</strong>：<img src="https://upload-images.jianshu.io/upload_images/8964398-1655e4ea2562c4f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>新建成功了，同时注意Django会自动帮我们把密码进行加密，而且不能反解，也就是说单向密码加密。</p><h2 id="xadmin的安装"><a href="#xadmin的安装" class="headerlink" title="xadmin的安装"></a>xadmin的安装</h2><p>还记得前面的一篇笔记吗，我让你新建一个文件夹A，把下载的xadmin文件放在里面，不记得请查阅这篇笔记：<a href="https://www.jianshu.com/p/b40f4a3b02fb" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置</a>（更新一下，那个版本里面有太多的坑需要自己填，这里我就把已经填完坑的版本贴一下，大家在本篇笔记对应的Github上下载包，亲测有用）。<br>现在，我们新建一个名为extra_apps的Python package ,用来存放我们的第三方插件，并将前面下载的xadmin文件（解压之后）移入其中：<img src="https://upload-images.jianshu.io/upload_images/8964398-1dce8025e0ed8949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>同时需要对路径进行配置：打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os, sys</span><br><span class="line"></span><br><span class="line"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))</span><br><span class="line">sys.path.insert(0,os.path.join(BASE_DIR, &apos;extra_apps&apos;))</span><br></pre></td></tr></table></figure></p><p>接下来是xadmin的安装:在确保前面的操作完成以后，我们打开eduline/settings.py文件，找到里面的第35行代码，在后面修改为如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">    &apos;courses&apos;,</span><br><span class="line">    &apos;organization&apos;,</span><br><span class="line">    &apos;operation&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;crispy_forms&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后打开eduline/urls.py文件，把urls中默认的admin修改为xadmin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后进行我们数据库的生成和迁移操作：<code>makemigrations</code>和<code>migrate</code>：<img src="https://upload-images.jianshu.io/upload_images/8964398-38817e4fcb6c32a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你会发现执行第一个命令就报错了，那是因为我们缺少一些库的支持，我们依次按照如下库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br><span class="line">pip install django-crispy-forms</span><br><span class="line">pip install django-formtools==2.1   # 记住一定是2.1的版本，否则会出错</span><br></pre></td></tr></table></figure></p><p>使用的命令为：<strong>pip install package -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></strong><br>之后会安装一大堆库，我们使用pip list命令查看一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-f1bac706138f7baa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>为了便于你查看自己是否缺少某个库，我这里贴一下我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(eduline) F:\Envs\eduline&gt;pip list</span><br><span class="line">Package                          Version</span><br><span class="line">-------------------------------- --------</span><br><span class="line">confusable-homoglyphs            3.1.1</span><br><span class="line">diff-match-patch                 20121119</span><br><span class="line">Django                           2.0.1</span><br><span class="line">django-crispy-forms              1.7.2</span><br><span class="line">django-crispy-forms-registration 0.1.3</span><br><span class="line">django-formtools                 2.1</span><br><span class="line">django-import-export             1.0.1</span><br><span class="line">django-registration              2.4.1</span><br><span class="line">django-reversion                 3.0.0</span><br><span class="line">et-xmlfile                       1.0.1</span><br><span class="line">future                           0.16.0</span><br><span class="line">httplib2                         0.11.3</span><br><span class="line">jdcal                            1.4</span><br><span class="line">mysqlclient                      1.3.13</span><br><span class="line">odfpy                            1.3.6</span><br><span class="line">openpyxl                         2.5.4</span><br><span class="line">Pillow                           5.2.0</span><br><span class="line">pip                              18.0</span><br><span class="line">pytz                             2018.5</span><br><span class="line">PyYAML                           3.13</span><br><span class="line">setuptools                       40.0.0</span><br><span class="line">six                              1.11.0</span><br><span class="line">tablib                           0.12.1</span><br><span class="line">unicodecsv                       0.14.1</span><br><span class="line">wheel                            0.31.1</span><br><span class="line">xlrd                             1.1.0</span><br><span class="line">xlwt                             1.3.0</span><br></pre></td></tr></table></figure></p><p>接下来，我们重新进行数据库的生成和迁移操作：<code>makemigrations</code>和<code>migrate</code>：<img src="https://upload-images.jianshu.io/upload_images/8964398-6fc3cb4df774f5d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt>,<br>看到没有，它也生成了几个数据表，我们打开Navicat，去数据库里看一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-2c2cf86aa427503d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在我们运行一下我们的项目，在浏览器地址中输入<a href="http://127.0.0.1/xadmin,然后看到：![](https://upload-images.jianshu.io/upload_images/8964398-1b7b25d8b012310f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1/xadmin,然后看到：![](https://upload-images.jianshu.io/upload_images/8964398-1b7b25d8b012310f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>恭喜你，xadmin的配置已经完成了，xadmin的页面是不是比admin的页面好看多了。</p><p>Xadmin使用Bootstrap3.0框架精心打造。基于Bootstrap3，Xadmin天生就支持在多种屏幕上无缝浏览，并完全支持Bootstrap主题模板，让您的管理后台也动感、多样起来。，这是它的的<a href="http://sshwsfc.github.io/xadmin/" target="_blank" rel="noopener">官方网站</a>:<img src="https://upload-images.jianshu.io/upload_images/8964398-5e318b09a7544317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可以去看一下它的示例和文档，可能需要翻墙，不过这对你以后的运用确实帮助很大的。</p><h2 id="Xadmin的使用介绍"><a href="#Xadmin的使用介绍" class="headerlink" title="Xadmin的使用介绍"></a>Xadmin的使用介绍</h2><p>正如前面你所知道的，Xadmin是基于Django的admin来开发的，所以Xadmin也继承了许多admin的用法，下面就分别介绍一下它们的使用情况：</p><p>因为我们之前在admin里面已经注册了UserProfile，所以xadmin里面也就有了这个信息，那我们接下来就设置一下我们文件的格式，让系统默认去寻找我们<strong>xadmin</strong>的<strong>adminx.py</strong>文件，而不是去寻找原来<strong>admin的admin.py</strong>文件。</p><h3 id="验证码功能的实现"><a href="#验证码功能的实现" class="headerlink" title="验证码功能的实现"></a>验证码功能的实现</h3><p>我们打开eduline/apps/users这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始验证码功能的实现,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @Time: 2018/3/26 10:05</span><br><span class="line"># @Author: Envse</span><br><span class="line"># @File: adminx.py</span><br><span class="line"></span><br><span class="line"># 导入xadmin，如果出现字体底下出现红色属于正常现象（实际上环境已经配置过）</span><br><span class="line">import xadmin</span><br><span class="line"># 因为处于同一个目录之下，所以可以直接使用.models代替当前目录</span><br><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将EmailVerifyRecord注册进我们的admin中, 并为它选择管理器EmailVerifyRecordAdmin</span><br><span class="line">xadmin.site.register(EmailVerifyRecord, EmailVerifyRecordAdmin)</span><br></pre></td></tr></table></figure></p><p>现在我们重新运行一下我们的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin回车，出现：![](https://upload-images.jianshu.io/upload_images/8964398-96113eee67682a4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin回车，出现：![](https://upload-images.jianshu.io/upload_images/8964398-96113eee67682a4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>你可能会好奇这个是怎样实现的，其实这就是你数据库设计的字段啊：你打开users/models.py文件，看到第30行代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-cebc6d5713e28736.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>Meta信息就是用于后台显示的，其中verbose_name定义的是后台主页面显示字段，verbose_name_plural是verbose_name的复数形式，如果这两者不相等，那么verbose_name_plural就是在verbose_name后面加个s字母而已，所以我们尽量一样，便于管理和查看。</p><p>我们现在尝试添加一个邮箱验证码，点击右侧的增加邮箱验证码按钮，输入相关信息，可以看到添加成功了：<img src="https://upload-images.jianshu.io/upload_images/8964398-3b399581d49ae062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来，我们看一下右侧的显示列，点击一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-960065424572cfb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>里面可以选择显示的内容，我们现在想在刚才的页面同时显示这些全部信息，所以需要配置一下:我们打开users/adminx.py文件，在里面的管理器中设置list_display字段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 配置后台显示的列信息</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]  # 一次显示你想出现的多行数据，</span><br><span class="line"># 这里面的字段都是你在前面数据库中定义的，请保持数据的一致</span><br></pre></td></tr></table></figure></p><p>然后还可以配置过滤器，搜索框等，这里就不一一说明，直接贴上代码了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 配置后台显示的列信息</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;]  # 查询你想要的数据,一般不依据时间进行查询</span><br><span class="line">    list_filter = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]  # 过滤器</span><br></pre></td></tr></table></figure></p><p>之后刷新一下你的网页，成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-c7cd6da15d50eb7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>细心的小伙伴们可能发现，这里竟然可以导出操作，是的，这样变得很方便了：<img src="https://upload-images.jianshu.io/upload_images/8964398-689090eb8c18f58b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你可以根据自己的喜好来导出不同的文件格式，比如xml:<img src="https://upload-images.jianshu.io/upload_images/8964398-d5a13eff7c81f618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="admin-xadmin和其他后台管理系统的区别"><a href="#admin-xadmin和其他后台管理系统的区别" class="headerlink" title="admin, xadmin和其他后台管理系统的区别"></a>admin, xadmin和其他后台管理系统的区别</h3><p>像PHP，JAVA等其他语言，它们是按照一个功能模块来进行一个功能设计的。而admin和 xadmin就不一样了，它们是对于每张表都可以进行增删改查的管理器，因此我们还可以在增删改查的基础上加上我们自己的后台逻辑，完成我们自定义的功能。因此，从某种程度可以说它是不依赖于具体业务的，不管什么系统后台都是由表组成。</p><p>既然这样，我们可以在其余的各个表中，都加上这些个功能。</p><p>打开users/adminx.py文件，我们来实现轮播图的注册，和前面验证码的操作类似，这里就不细说，直接贴上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from .models import Banner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BannerAdmin(object):</span><br><span class="line">    list_display = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;]  # 过滤器</span><br><span class="line"></span><br><span class="line">xadmin.site.register(Banner, BannerAdmin)</span><br></pre></td></tr></table></figure></p><p><strong>再次强调一下：这里面的字段都是你前面在数据库中定义的，请保持数据库字段定义的一致性，不要乱写，否则后面会出很大的BUG！</strong></p><p>刷新一下你的页面，就变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ab24ba5f7ca9963c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了小伙伴们，你现在可以照葫芦画瓢了，尝试着把其余3个apps都注册到后台吧。那些，我们下一篇笔记再介绍，接下来教你一个自定义文件信息的技能。</p><h3 id="自定义文件信息"><a href="#自定义文件信息" class="headerlink" title="自定义文件信息"></a>自定义文件信息</h3><p>打开Pycharm,点击一下主菜单的File,选择下拉的Settings,选择Editor，再选择Code Style，选择文件模板：<img src="https://upload-images.jianshu.io/upload_images/8964398-860e82d7a0f74a1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到5的信息了么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python </span><br><span class="line"># -*- coding:utf-8 -*-  # 编码格式</span><br><span class="line"># @Time: $&#123;DATE&#125; $&#123;TIME&#125;   # 文件生成时间</span><br><span class="line"># @Author: Envse   # 作者</span><br><span class="line"># @File: $&#123;NAME&#125;.py   # 文件名</span><br></pre></td></tr></table></figure></p><p>你可以自定义这些信息，当然还可以根据4的选择不同来添加不同的信息。然后点击apply,最后是ok,这样你每次创建新的py文件以后，这些信息就都会出现在文件的头部了。怎么样，新技能Get了没有？</p><p>至此，关于初识后台管理这一部分就先说这么多，下一篇笔记就完善其余3个apps的注册，还有xadmin的全局配置，打造一个属于自己的网站后台管理系统。</p><p>本篇笔记对应于第九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline，另外xadmin的原始安装包我也上传了，大家可以前往下载，有空的话，可以给项目一个star,感谢你的赏阅。" target="_blank" rel="noopener">https://github.com/licheetools/eduline，另外xadmin的原始安装包我也上传了，大家可以前往下载，有空的话，可以给项目一个star,感谢你的赏阅。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于users应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。</p><p>本篇笔记对应于第八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="3个apps应用的创建"><a href="#3个apps应用的创建" class="headerlink" title="3个apps应用的创建"></a>3个apps应用的创建</h2><h2 id="1、课程版块-course"><a href="#1、课程版块-course" class="headerlink" title="1、课程版块(course)"></a>1、课程版块(course)</h2><h3 id="a、创建courses应用"><a href="#a、创建courses应用" class="headerlink" title="a、创建courses应用"></a>a、创建courses应用</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp courses</span><br></pre></td></tr></table></figure></p><h3 id="b、确定数据库中的数据表数量"><a href="#b、确定数据库中的数据表数量" class="headerlink" title="b、确定数据库中的数据表数量"></a>b、确定数据库中的数据表数量</h3><p>首先，课程本身需要一张表用于保存自身信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-7d972d4e559d35e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>随意点开一门课程，你会发现以下内容：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1c1d58ee2b5bec2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>点击右侧的开始学习，你会进入章节信息详情：<img src="https://upload-images.jianshu.io/upload_images/8964398-7b17b3819c134d8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>每个课程包含多个章节，每个章节下面又包含多个视频和右侧的课程资料。其中：<br>课程和章节是一对多的映射关系；章节和视频也是一对多的映射关系；课程和资料也是一对多的映射关系。所以通过分析，我们需要新建4个表，用于信息的存取：<img src="https://upload-images.jianshu.io/upload_images/8964398-be1c04c80fcf39ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="c、开始数据库字段的定义"><a href="#c、开始数据库字段的定义" class="headerlink" title="c、开始数据库字段的定义"></a>c、开始数据库字段的定义</h3><p>打开我们的courses/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"># 课程信息</span><br><span class="line">class Course(models.Model):</span><br><span class="line">    name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;)</span><br><span class="line">    # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式</span><br><span class="line">    desc = models.CharField(max_length=300, verbose_name=&quot;课程描述&quot;)</span><br><span class="line">    detail = models.TextField(max_length=500, verbose_name=&quot;课程详情&quot;)</span><br><span class="line">    is_banner = models.BooleanField(default=False, verbose_name=&quot;是否轮播&quot;)</span><br><span class="line">    degree = models.CharField(max_length=2, </span><br><span class="line">choices=((&apos;cj&apos;, &apos;初级&apos;), (&apos;zj&apos;, &apos;中级&apos;), (&apos;gj&apos;, &apos;高级&apos;)), verbose_name=&quot;难度等级&quot;)</span><br><span class="line">    # 学习数这里使用分钟数作计量单位，便于后台记录(存储最小单位)和前台转换</span><br><span class="line">    learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;)</span><br><span class="line">    # 学习人数从点击开始学习算起</span><br><span class="line">    students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;)</span><br><span class="line">    # 收藏人数从点击收藏按钮算起</span><br><span class="line">    fav_nums = models.IntegerField(default=0, verbose_name=&quot;收藏人数&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&apos;courses/%Y/%m&apos;, max_length=100, verbose_name=&quot;封面图片&quot;)</span><br><span class="line">    # 点击数从点击页面算起</span><br><span class="line">    click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;)</span><br><span class="line">    category = models.CharField(default=&quot;后端开发&quot;, max_length=20, verbose_name=&quot;课程类别&quot;)</span><br><span class="line">    tag = models.CharField(default=&apos;&apos;, max_length=10, verbose_name=&quot;课程标签&quot;)</span><br><span class="line">    youneeded_know = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;课程须知&quot;)</span><br><span class="line">    teacher_tell = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;老师告诉你&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;课程&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>接着刚才的代码，我们在下面添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 章节信息</span><br><span class="line">class Lesson(models.Model):</span><br><span class="line">    # 前面知道一个课程对应多个章节，所以在章节表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个章节属于哪个课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;章节名&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;章节&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 采用了字符串的格式化方式来同时引用多个数据</span><br><span class="line">        return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的章节》&#123;1&#125;&apos;.format(self.course, self.name)  </span><br><span class="line">        # return self.name也是可以</span><br></pre></td></tr></table></figure></p><p>在上面的外键字<code>course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</code>，这其实就是一个用于告知信息的字段，包含3个参数：Course是指你与哪个对象存在外键关系（记住是表的名称，不是字段的名称）；on_delete=models.CASCADE是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示）</p><p>我们继续接着刚才的代码，我们在下面添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 视频信息</span><br><span class="line">class Video(models.Model):</span><br><span class="line">    # 前面知道一个章节对应多个视频，所以在视频表中将章节设置为外键。</span><br><span class="line">    # 此处的lesson其实就是一个用来告诉我们这个视频属于哪个章节的字段</span><br><span class="line">    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, verbose_name=&quot;章节&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;视频名称&quot;)</span><br><span class="line">    url = models.URLField(max_length=200, default=&apos;&apos;, verbose_name=&quot;访问地址&quot;)</span><br><span class="line">    learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;视频&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;章节的视频》&#123;1&#125;&apos;.format(self.lesson, self.name)   # return self.name也是可以</span><br><span class="line"></span><br><span class="line"># 课程资料信息</span><br><span class="line">class CourseResource(models.Model):</span><br><span class="line">    # 前面知道一个课程对应多个课程资料，所以在课程资料表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个课程资料属于哪个课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;名称&quot;)</span><br><span class="line">    download = models.FileField(max_length=100, upload_to=&apos;course/resource/%Y/%m&apos;, </span><br><span class="line">verbose_name=&quot;资源文件&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;课程资源&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的课程资料》&#123;1&#125;&apos;.format(self.course, self.name)   # return self.name也行</span><br></pre></td></tr></table></figure></p><p>点击左侧的structure，我们可以看到如下的4个函数（数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-b5a2a51fd597f86a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，我们course应用的数据库字段的定义到此告一段落，不过以后可能会有新的字段加入，所以我们就先不进行数据库生成和迁移操作。</p><h2 id="2、授课教师与授课机构板块-organization"><a href="#2、授课教师与授课机构板块-organization" class="headerlink" title="2、授课教师与授课机构板块(organization)"></a>2、授课教师与授课机构板块(organization)</h2><h3 id="a、创建organization应用"><a href="#a、创建organization应用" class="headerlink" title="a、创建organization应用"></a>a、创建organization应用</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp organization</span><br></pre></td></tr></table></figure></p><h3 id="b、确定数据库中的数据表数量-1"><a href="#b、确定数据库中的数据表数量-1" class="headerlink" title="b、确定数据库中的数据表数量"></a>b、确定数据库中的数据表数量</h3><p>顾名思义授课教师与授课机构板块，里面肯定有授课教师和授课机构这2个表吧。然后我们来观察一下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-f7f3bb7307de9aab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没有，里面有一个用于筛选的城市列表，所以这个内容我们也是要单独放在一张表里面的。</p><p>也就是说，我们需要新建3张表：<img src="https://upload-images.jianshu.io/upload_images/8964398-2402b2a2d4535456.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其中，课程是属于课程机构的, 课程机构又有机构类别，城市，授课讲师等字段。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-929f5c58463317ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面则是教师信息表应当具有的一些字段。</p><h3 id="c、开始数据库字段的定义-1"><a href="#c、开始数据库字段的定义-1" class="headerlink" title="c、开始数据库字段的定义"></a>c、开始数据库字段的定义</h3><p>打开我们的organization/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 城市信息</span><br><span class="line">class CityDict(models.Model):</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name=&quot;城市&quot;)</span><br><span class="line">    # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式</span><br><span class="line">    desc = models.CharField(max_length=200, verbose_name=&quot;描述&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;城市&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程机构</span><br><span class="line">class CourseOrg(models.Model):</span><br><span class="line">    name = models.CharField(max_length=50, verbose_name=&quot;机构名称&quot;)</span><br><span class="line">    desc = models.TextField(verbose_name=&quot;机构描述&quot;)</span><br><span class="line">    tag = models.CharField(max_length=10, default=&quot;全国知名&quot;, verbose_name=&quot;机构标签&quot;)</span><br><span class="line">    category = models.CharField(max_length=20, default=&apos;pxjg&apos;, </span><br><span class="line">choices=((&apos;pxjg&apos;, &apos;培训机构&apos;), (&apos;gr&apos;, &apos;个人&apos;), (&apos;gx&apos;, &apos;高校&apos;)), verbose_name=&quot;机构类别&quot;)</span><br><span class="line">    click_nums = models.IntegerField(default=0, verbose_name=&apos;点击数&apos;)</span><br><span class="line">    fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;)</span><br><span class="line">    image = models.ImageField(max_length=50, upload_to=&quot;org/%Y/%m&quot;, verbose_name=&quot;logo&quot;)</span><br><span class="line">    address = models.CharField(max_length=150, verbose_name=&quot;机构地址&quot;)</span><br><span class="line">    # 前面知道一个城市对应多个课程机构，所以在课程机构表中将城市设置为外键。</span><br><span class="line">    # 此处的city其实就是一个用来告诉我们这个课程机构属于哪个城市的字段</span><br><span class="line">    city = models.ForeignKey(CityDict, on_delete=models.CASCADE, verbose_name=&quot;所在城市说明&quot;)</span><br><span class="line">    students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;)</span><br><span class="line">    course_nums = models.IntegerField(default=0, verbose_name=&quot;课程数&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;课程机构&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 教师信息</span><br><span class="line">class Teacher(models.Model):</span><br><span class="line">    # 前面知道一个课程机构对应多个教师，所以在教师信息表中将授课机构设置为外键。</span><br><span class="line">    # 此处的org其实就是一个用来告诉我们这个教师属于哪个课程机构的字段</span><br><span class="line">    org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=&quot;所属教师&quot;)</span><br><span class="line">    name = models.CharField(max_length=50, verbose_name=&quot;教师名&quot;)</span><br><span class="line">    work_years = models.IntegerField(default=0, verbose_name=&quot;工作年限&quot;)</span><br><span class="line">    work_position = models.CharField(max_length=50, verbose_name=&quot;公司职位&quot;)</span><br><span class="line">    work_company = models.CharField(max_length=50, verbose_name=&quot;就职公司&quot;)</span><br><span class="line">    points = models.CharField(max_length=50, verbose_name=&quot;教学特点&quot;)</span><br><span class="line">    click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;)</span><br><span class="line">    fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;)</span><br><span class="line">    age = models.IntegerField(default=18, verbose_name=&apos;年龄&apos;)</span><br><span class="line">    image = models.ImageField(default=&apos;&apos;, upload_to=&apos;teacher/%Y/%m&apos;, </span><br><span class="line">verbose_name=&apos;头像&apos;, max_length=100)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;教师&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name   # 这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><p>点击左侧的structure，我们可以看到如下的3个函数（数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-c6b4e6a6e8ba7ee6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="3、用户操作板块-operation"><a href="#3、用户操作板块-operation" class="headerlink" title="3、用户操作板块(operation)"></a>3、用户操作板块(operation)</h2><h3 id="a、创建operation应用"><a href="#a、创建operation应用" class="headerlink" title="a、创建operation应用"></a>a、创建operation应用</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp operation</span><br></pre></td></tr></table></figure></p><h3 id="b、确定数据库中的数据表数量-2"><a href="#b、确定数据库中的数据表数量-2" class="headerlink" title="b、确定数据库中的数据表数量"></a>b、确定数据库中的数据表数量</h3><p>这个app应用主要用于用户操作信息的记录，主要包括：</p><blockquote><p>1、用户提交我要学习的个人需求记录；<br>2、用户的课程评论信息记录；<br>3、用户用于收藏公开课, 授课讲师, 授课机构以及用户消息提醒的记录；<br>4、用户个人中心里面我的课程说明，用户和课程之间的学习信息记录；<br>5、用户咨询消息的记录等。</p></blockquote><p>如下图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-ef25b5f919654ffd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="c、开始数据库字段的定义-2"><a href="#c、开始数据库字段的定义-2" class="headerlink" title="c、开始数据库字段的定义"></a>c、开始数据库字段的定义</h3><p>打开我们的operation/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">from users.models import UserProfile</span><br><span class="line">from courses.models import Course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户我要学习信息</span><br><span class="line">class UserAsk(models.Model):</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name=&quot;姓名&quot;)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;手机&quot;)</span><br><span class="line">    course_name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户咨询&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name    # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程评论</span><br><span class="line">class CourseComments(models.Model):</span><br><span class="line">    # 前面知道一个用户发表多个课程评论，所以在课程评论表中将用户设置为外键。</span><br><span class="line">    # 此处的user其实就是一个用来告诉我们这个课程评论属于哪个用户的字段</span><br><span class="line">    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;)</span><br><span class="line">    # 前面知道一门课程具有多个课程评论，所以在课程评论表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个课程评论属于哪个课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</span><br><span class="line">    comment = models.CharField(max_length=200, verbose_name=&quot;评论&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;课程评论&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.comment   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户收藏信息</span><br><span class="line">class UserFavorite(models.Model):</span><br><span class="line">    # 前面知道一个用户可以收藏多个内容，所以在用户收藏表中将用户设置为外键。</span><br><span class="line">    # 此处的user其实就是一个用来告诉我们这个用户收藏属于哪个用户的字段</span><br><span class="line">    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;)</span><br><span class="line">    fav_id = models.IntegerField(default=0, verbose_name=&apos;数据Id&apos;)</span><br><span class="line">    fav_type = models.CharField(choices=((&apos;1&apos;, &apos;课程&apos;), (&apos;2&apos;, &apos;课程机构&apos;), (&apos;3&apos;, &apos;讲师&apos;)), default=1, </span><br><span class="line">verbose_name=&apos;收藏类型&apos;,max_length=2)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户收藏&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.user   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户消息信息</span><br><span class="line">class UserMessage(models.Model):</span><br><span class="line">    # 我们的消息有两种:一种是发给全员，另一种则是发给特定某一个用户。</span><br><span class="line">    # 所以如果使用外键，那么每个消息就要对应一个用户，比较难以实现全员消息的通知。</span><br><span class="line">    # 因此我们设置用户id,如果为0就发给所有用户，不为0就是发给特定Id的用户。</span><br><span class="line">    user = models.IntegerField(default=0, verbose_name=&quot;接收用户&quot;)</span><br><span class="line">    message = models.CharField(max_length=500, verbose_name=&apos;消息内容&apos;)</span><br><span class="line">    # 设置消息是否已读，采用布尔类型 BooleanField： False表示未读,True表示已读。</span><br><span class="line">    has_read = models.BooleanField(default=False, verbose_name=&apos;是否已读&apos;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户消息&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.message  # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户课程信息</span><br><span class="line">class UserCourse(models.Model):</span><br><span class="line">    # 前面知道一个用户可以学习多门课程，所以在用户课程表中将用户设置为外键。</span><br><span class="line">    # 此处的user其实就是一个用来告诉我们这个课程属于哪个用户的字段</span><br><span class="line">    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&apos;用户名&apos;)</span><br><span class="line">    # 前面知道一门课程可以有多个课程的信息，所以在用户课程表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个课程信息属于哪门课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&apos;课程&apos;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;学习时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户课程&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">        def __str__(self):</span><br><span class="line">            return self.user  # 这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><p>点击左侧的structure，我们可以看到如下的5个函数（数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-2ede72a271117733.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>至此，我们所有apps都已经创建完成，它们所包含的数据库字段的定义也都完成。</p><h2 id="注册我们的4个apps"><a href="#注册我们的4个apps" class="headerlink" title="注册我们的4个apps"></a>注册我们的4个apps</h2><p>打开eduline/settings.py文件，找到第33行代码，在其中加入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">    &apos;courses&apos;,</span><br><span class="line">    &apos;organization&apos;,</span><br><span class="line">    &apos;operation&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>如图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-97e3db17470ea2d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="数据库生成和迁移操作"><a href="#数据库生成和迁移操作" class="headerlink" title="数据库生成和迁移操作"></a>数据库生成和迁移操作</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemirgration</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure></p><p>上面是对所有apps都进行数据库生成和迁移操作，如果你想对某个app操作，你可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemirgration appname</span><br><span class="line">migrate appname</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c6e04b58eef2e740.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-11c7fca389468d18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>上图分别为makemirgrations和migrate过程中输出的信息。下图是由于我们做的改动导致文件的变动记录：<img src="https://upload-images.jianshu.io/upload_images/8964398-f18b45e53ebbba04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>courses/migrations/0001_initial.py:</strong>这个文件是我们migrations时生成的新initial文件，这是很重要的变动文件，不能随意删除。</p><h3 id="打开Navicat，查看数据表"><a href="#打开Navicat，查看数据表" class="headerlink" title="打开Navicat，查看数据表"></a>打开Navicat，查看数据表</h3><p>我们看到许多自定义的表都已经有了，而且命名规则都是 <strong>app名称 + 我们的类名转变为小写</strong>：<img src="https://upload-images.jianshu.io/upload_images/8964398-af6e309a1d76e254.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在我们打开django_migrations表去查看一下我们的migration记录：<img src="https://upload-images.jianshu.io/upload_images/8964398-be3ab0c7af5b6569.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-77d59afd7f972b55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>0001_inital是初始文件，其他的表明该应用已经在运行了。</p><h2 id="新建管理文件夹"><a href="#新建管理文件夹" class="headerlink" title="新建管理文件夹"></a>新建管理文件夹</h2><p>现在你看我们的目录树结构已经变成了这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-8b15afbe06a960bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所有的应用apps都是直接裸露在树干上，如果有10个，甚至更多100个呢？这样的管理方式就显得很混乱，业务逻辑分离不够明显。这时，我们可以新建一个文件夹，专门用于apps的管理。</p><p>新建一个Python package,名字叫apps，把我们之前的4个apps都拖进去：<br><strong>不要勾选search for references,直接点击确定即可。</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ec7ac7c9faa7b84a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在就变成了这个结构，是不是好看多了：<img src="https://upload-images.jianshu.io/upload_images/8964398-f07d596005d77736.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不过上面那种操作会出问题，系提示找不到那些import的模块：<img src="https://upload-images.jianshu.io/upload_images/8964398-1d9d2e84f3db3cb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>还得我们前面在回顾Django基础知识的时候，也出现过类似的情况，忘了的话可以查看这篇笔记：<a href="https://www.jianshu.com/p/0601eb221f04" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾</a></p><p>这里我们就直接设置文件查找路径了。<br>打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os, sys</span><br><span class="line"></span><br><span class="line"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3563e76364f89cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数，将项目的绝对路径与apps进行拼接，返回一个新的地址,插入第0是希望它首先在apps下面搜索我们的内容。</p><h2 id="测试运行一下项目"><a href="#测试运行一下项目" class="headerlink" title="测试运行一下项目"></a>测试运行一下项目</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<code>runserver</code>再回车：<img src="https://upload-images.jianshu.io/upload_images/8964398-c332955dd793cd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在浏览器地址栏中输入<a href="http://127.0.0.1:8000/或者http://127.0.0.1，出现：![](https://upload-images.jianshu.io/upload_images/8964398-d7faf520cd534d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/或者http://127.0.0.1，出现：![](https://upload-images.jianshu.io/upload_images/8964398-d7faf520cd534d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>恭喜你，我们的Django网页已经跑起来了。</p><p>至此，我们关于在线教育网站项目的app应用的创建和数据库字段的定义就到此结束了，感谢你的赏阅！</p><p>下一篇笔记，我们就开始进行后台的管理和配置了！</p><p>本篇笔记对应于第八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要就是对上篇遗留的2个问题的解决：4个app项目的创建和数据库字段的定义，鉴于篇幅的原因，这里分上下两篇进行介绍。</p><p>本篇笔记对应于第七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="4个app项目的创建"><a href="#4个app项目的创建" class="headerlink" title="4个app项目的创建"></a>4个app项目的创建</h2><h2 id="users-app的创建"><a href="#users-app的创建" class="headerlink" title="users app的创建"></a>users app的创建</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp users</span><br></pre></td></tr></table></figure></p><p>然后在Navicat中打开我们的数据库eduline，会发现生成了很多表，我们打开其中的auth_user这个表：<img src="https://upload-images.jianshu.io/upload_images/8964398-96b5cf3eb016cecd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-1fd4d44168358a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下面我简要说明一下表中个字段的含义：</p><blockquote><p>id代表主键, password是密码, last_login 这是Django用于自动记录用户最后登录时间的字段。<br>is_superuser 表明用户是否是超级用户(后台管理中会用到)，<br>username 表示用户名（该字段不要随便修改），<br>last_name和first_name分别是姓和名，<br>email 表示邮箱,<br>is_staff 表示是否是员工(后台管理中会用到)，<br>is_active 表示用户是否是激活状态,<br>date_joined 表示注册时间。</p></blockquote><p>这其实是满足不了我们的需求的，因为我们的个人中心通常包括：昵称，性别，生日，地址，手机号，邮箱等信息，所以我们要扩展这些字段来满足我们的需求。</p><p>user表的自定义方法官方文档已经给出了，这里开启传送大门<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/" target="_blank" rel="noopener">https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/</a><br>我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。</p><p>打开我们的users/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">from django.contrib.auth.models import AbstractUser  # 导入需要的类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    # 昵称</span><br><span class="line">    nick_name=models.CharField(max_length=50,verbose_name=&apos;昵称&apos;,default=&apos;&apos;)</span><br><span class="line">     # 生日，可以为空</span><br><span class="line">    birday=models.DateTimeField(verbose_name=&apos;生日&apos;,null=True,blank=True)</span><br><span class="line">     # 性别，默认为女</span><br><span class="line">    gender=models.CharField(max_length=6, choices=((&apos;male&apos;,&apos;男&apos;),(&apos;female&apos;,&apos;女&apos;)),default=&apos;female&apos;,verbose_name=&apos;性别&apos;)</span><br><span class="line">    # 地址</span><br><span class="line">    address=models.CharField(max_length=100,default=&apos;&apos;, verbose_name=&apos;地址&apos;)</span><br><span class="line">   # 手机号，可以为空</span><br><span class="line">    mobile=models.CharField(max_length=11,null=True,blank=True, verbose_name=&apos;手机号&apos;)</span><br><span class="line">     # 图片，默认为default.png,upload_to为上传路径，记住图片字段必须有字段最大值</span><br><span class="line">  image=models.ImageField(upload_to=&apos;image/%Y/%m&apos;,default=&apos;image/default.png&apos;,max_length=100,verbose_name=&apos;图片&apos;)</span><br><span class="line">     # meta信息，即后台管理中的名称</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name= &apos;用户信息&apos;</span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line">     # 重载str方法，打印实例会打印username，username为继承自Abstractuser这个类</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br><strong>1、</strong>按住ctrl然后单击我们的AbstractUser，就可以进入到这个类的定义文件：auth/models.py,这也就是我们之前导入的位置：<img src="https://upload-images.jianshu.io/upload_images/8964398-2afc42aee978ce90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，我们之前保留的字段它都有，所以我们只需要继承它就可以了。<br><strong>2、</strong>前面说过CharField必须有max_length, 但实际上Imagefield也是Charfield，所以也要有max_length。<br><strong>3、</strong>因为使用到了Imagefield字段，所以需要用到Pillow这个库，我们可以通过<strong>Pycharm</strong>或者<strong>pip</strong>安装它。</p><h2 id="注册APP和重载AUTH-USER-MODEL"><a href="#注册APP和重载AUTH-USER-MODEL" class="headerlink" title="注册APP和重载AUTH_USER_MODEL"></a>注册APP和重载AUTH_USER_MODEL</h2><h3 id="注册APP"><a href="#注册APP" class="headerlink" title="注册APP"></a>注册APP</h3><p>打开eduline/settings.py文件，找到第30行代码，最底下加上我们的app名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="重载AUTH-USER-MODEL"><a href="#重载AUTH-USER-MODEL" class="headerlink" title="重载AUTH_USER_MODEL"></a>重载AUTH_USER_MODEL</h3><p>打开eduline/settings.py文件，在刚才代码的底下加上重载我们的UserProfile代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">]</span><br><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL=&apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><h3 id="数据库更新"><a href="#数据库更新" class="headerlink" title="数据库更新"></a>数据库更新</h3><p>点击<strong>Tools</strong> 菜单下 <strong>Run manage.py Task</strong>，运行我们的<strong>makemigrations users</strong>和<strong>migrate users</strong>命令。你会发现运行前者没问题，运行后者却出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin.0001_initial is applied before its dependency users.0001_initial on database &apos;default&apos;.</span><br></pre></td></tr></table></figure></p><p>其实这个问题就是你之前已经定义了userProfile并且还设置了重载它的语句，现在又来定义它，它是不会再给你提供那么多的初始表的：<img src="https://upload-images.jianshu.io/upload_images/8964398-b0f62064a092c5cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们需要删除除了auth_user以外的其他表，如果一次删除不了（那是因为表与表之间存在外键联系）就一个个的删除：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d0155cae6f5a6e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在再来点击<strong>Tools</strong> 菜单下 <strong>Run manage.py Task</strong>，按顺序运行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>只运行后面那2个命令是不可以的，会缺少部分表！！！</p><p>看到没，这次没有问题出现了：<img src="https://upload-images.jianshu.io/upload_images/8964398-1ed8fbc0ef20961d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开数据库，看一下我们的表，一共有11个表：<img src="https://upload-images.jianshu.io/upload_images/8964398-fa14c091fd52ea11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开这个自定义表（users_usersprofile）,你会发现我们需要的字段都有了：<img src="https://upload-images.jianshu.io/upload_images/8964398-3c5035b877570d6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="注意一下"><a href="#注意一下" class="headerlink" title="注意一下"></a>注意一下</h2><p>我们以后不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错了。</p><p>至此我们完成了第一个app的配置和其自定义字段的设计！</p><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>看下面这个图：<img src="https://upload-images.jianshu.io/upload_images/8964398-835aba8e7d10d47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们通常会在user中定义userCourse这个字段，用来记录用户学习的课程，它会有两个外键：user和course。所以在用到的时候，我们需要import Courses.models。</p><p>同样，如果用户对于某个课程需要评论，那么我们需要定义CourseComment这个字段，而且它肯定会放在 Courses.models当中。所以在用到的时候，我们又需要import User.models。</p><p>这是只有2个app的情况，当还有更多的情况：3个，4个，5个…apps时，循环调用import会出错导致系统不能正确识别，而且最起码会造成时间上的等待。那么有没有好的方法来解决这个问题呢？答案是有的！可以采用分层设计的思想来解决这个难题。</p><h3 id="分层设计"><a href="#分层设计" class="headerlink" title="分层设计"></a>分层设计</h3><p>在前面的第六篇笔记中我们已经说过，准备新建4个app,其中的3个apps:<br> <strong>(users)用户版块</strong>,<strong>(course)课程版块</strong>,<strong>(organization)授课教师与授课机构板块</strong>, 就是一些常规的信息存储，而第4个<strong>(operation)用户操作板块</strong>就是采用分层设计的思想来设计的，而且我们保证<strong>operation</strong>这个app的优先级高于其他3个，所以可以随时import这些底层的apps。各个apps的层级关系如下图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-566259e9e81f019b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ec0bdec837adaecf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在users这个app中，我们自定义了UserProfile这个表用来覆盖系统默认的user表。这样其实我们这个users应用已经设计完了。不过呢，通过研究我们发现有些功能是非常独立的，我们为了平衡一些app的代码量，可以将它们放在这个users项目里面。</p><blockquote><p>EmailVerifyRecord - 邮箱验证码<br>Banner - 轮播图</p></blockquote><h3 id="邮箱验证码的设计"><a href="#邮箱验证码的设计" class="headerlink" title="邮箱验证码的设计"></a>邮箱验证码的设计</h3><p>验证码分三种类型，分别用于不同的功能：注册；找回密码；修改邮箱，所以在设计验证码类型的时候注意选择的条件，通常验证码包括这些字段：<code>code</code>,<code>email</code>,<code>send_type</code>,<code>send_time</code>。</p><p>我们打开users/models.py文件，接着之前的代码在后面添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class EmailVerifyRecord(models.Model):</span><br><span class="line">    code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;)</span><br><span class="line">    email = models.EmailField(max_length=50, verbose_name=&quot;邮箱&quot;)</span><br><span class="line">    send_type = models.CharField(verbose_name=&quot;验证码类型&quot;, </span><br><span class="line">choices=((&apos;register&apos;, &apos;注册&apos;), (&apos;forget&apos;, &apos;找回密码&apos;), (&apos;update_email&apos;, &apos;修改邮箱&apos;)), max_length=30)</span><br><span class="line"></span><br><span class="line"># 这里的now得去掉(),如果不去掉则会根据编译时间，而不是我们要的实例化时间。</span><br><span class="line">    send_time = models.DateTimeField(verbose_name=&quot;发送时间&quot;, default=datetime.now)   </span><br><span class="line"> </span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;邮箱验证码&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.email   #这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><h3 id="轮播图的设计"><a href="#轮播图的设计" class="headerlink" title="轮播图的设计"></a>轮播图的设计</h3><p>轮播图是一个可以自动切换图片的效果，它包括标题，具体的图片，点击图片后的跳转地址，图片的轮播顺序，添加时间等要素：<code>title</code>,<code>image</code>,<code>url</code>,<code>index</code>,<code>add_time</code>。<br>我们打开users/models.py文件，接着之前的代码在后面添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Banner(models.Model):</span><br><span class="line">    title = models.CharField(max_length=100, verbose_name=&quot;标题&quot;)</span><br><span class="line">    image = models.ImageField(max_length=100, upload_to=&apos;banneer/%Y/&amp;m&apos;,verbose_name=&quot;轮播图&quot;)</span><br><span class="line">    url = models.URLField(max_length=200, verbose_name=&apos;访问地址&apos;)</span><br><span class="line"></span><br><span class="line">    # index的值默认越大越靠后，可以自定义修改index值。</span><br><span class="line">    index = models.IntegerField(default=100, verbose_name=&apos;轮播顺序&apos;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;轮播图&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title  # 这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><p>你可能会问，为什么不把与用户相关的评论，点赞，学习的课程，课程进度等信息也放到这个app中呢？其实是因为那些信息的相关性很大，经常是循环引用，所以我们把那些信息都放到operation这个app中。</p><p>我们把鼠标移至models.py这个文件上，再点击右侧的structure，可以发现我们刚才新创建的3个类（其实就是数据库里的数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-6e0a1d4587bc3505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-36061b35c125ea43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此第一个app应用的数据库字段定义算是完成了，下面大家可以思考一下其他3个应用的数据库字段的定义应该是怎样的，给大家留点时间思考一下，我们下一篇笔记再来介绍！下面介绍一个Python的规范，可以让你的代码更具有可读性和维护性。</p><h2 id="PEP8规范"><a href="#PEP8规范" class="headerlink" title="PEP8规范"></a>PEP8规范</h2><h3 id="（一）-代码的编排"><a href="#（一）-代码的编排" class="headerlink" title="（一） 代码的编排"></a>（一） 代码的编排</h3><p><strong>1、 缩进</strong>。每行需要4个空格的缩进，不要使用Tap键，更不能混合使用Tap键和空格。<br><strong>2 、</strong>每行最大长度79，换行可以使用反斜杠，但最好使用圆括号。换行点要在操作符的后边敲回车。<br><strong>3 、</strong>类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。</p><h3 id="（二-）文档的编排"><a href="#（二-）文档的编排" class="headerlink" title="（二 ）文档的编排"></a>（二 ）文档的编排</h3><p><strong>1、</strong> 模块内容的顺序：模块说明和docstring—import—globals&amp;constants—其他定义。其中import部分，又按标准、第三方和自己编写顺序依次排放，之间空一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line"># 自己定义代码放置处</span><br></pre></td></tr></table></figure></p><p><strong>2 、</strong>不要在一行import多个库，比如import os, sys，虽说没有错误但是并不推荐。<br><strong>3、</strong> 如果采用from xx import xx的方式来引用某个库，可以省略<code>module.</code>，但是可能会出现命名的冲突，所以这时就要采用import xx的方式。</p><h3 id="（三）空格的使用"><a href="#（三）空格的使用" class="headerlink" title="（三）空格的使用"></a>（三）空格的使用</h3><p>总体原则，避免不必要的空格。<br><strong>1、</strong> 各种右括号前不要加空格。<br><strong>2、</strong> 逗号、冒号、分号前不要加空格。<br><strong>3 、</strong>函数的左括号前不要加空格。如function(1)。<br><strong>4 、</strong>序列的左括号前不要加空格。如list[2]。<br><strong>5、</strong>操作符左右各加一个空格，不要为了对齐增加空格。<br><strong>6 、</strong>函数默认参数使用的赋值符左右省略空格。<br><strong>7、</strong>不要将多句语句写在同一行，尽管使用<code>；</code>允许。<br><strong>8、</strong> if/for/while语句中，即使执行语句只有一句，也必须另起一行。</p><h3 id="（四）命名的规范"><a href="#（四）命名的规范" class="headerlink" title="（四）命名的规范"></a>（四）命名的规范</h3><p>总体原则，新编代码必须按下面命名风格进行，现有库的编码尽量保持风格。<br><strong>1 、</strong>尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。<br><strong>2、</strong> 模块命名尽量短小，使用全部小写的方式，可以使用下划线。<br><strong>3、</strong> 包命名尽量短小，使用全部小写的方式，不可以使用下划线。<br><strong>4、</strong> 类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。<br><strong>5、</strong> 异常命名使用CapWords+Error后缀的方式。<br><strong>6 、</strong>全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是<strong>all</strong>机制;二是前缀一个下划线。<br><strong>7 、</strong>函数命名使用全部小写的方式，可以使用下划线。<br><strong>8 、</strong>常量命名使用全部大写的方式，可以使用下划线。<br><strong>9 、</strong>类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。<br><strong>10、</strong>类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。<br><strong>11 、</strong>类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。<br><strong>12 、</strong>为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明<strong>a,访问时，只能通过Foo._Foo</strong>a，避免歧义。如果子类也叫Foo，那就无能为力了。<br><strong>13 、</strong>类的方法第一个参数必须是<strong>self</strong>，而静态方法第一个参数必须是<strong>cls</strong>。</p><h3 id="（五）编码的建议"><a href="#（五）编码的建议" class="headerlink" title="（五）编码的建议"></a>（五）编码的建议</h3><p><strong>1、</strong>编码中考虑到其他python实现的效率等问题，比如运算符‘+’在CPython（Python）中效率很高，都是Jython中却非常低，所以应该采用.join()的方式。<br><strong>2 、</strong>尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。<br><strong>3 、</strong>使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。<br><strong>4 、</strong>异常中不要使用裸露的except，except后跟具体的exceptions。<br><strong>5 、</strong>异常中try的代码尽可能少。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">value = collection[key]</span><br><span class="line">except KeyError:</span><br><span class="line">return key_not_found(key)</span><br><span class="line">else:</span><br><span class="line">return handle_value(value)</span><br></pre></td></tr></table></figure></p><p>要优于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line"># Too broad!</span><br><span class="line">return handle_value(collection[key])</span><br><span class="line">except KeyError:</span><br><span class="line"># Will also catch KeyError raised by handle_value()</span><br><span class="line">return key_not_found(key)</span><br></pre></td></tr></table></figure></p><p><strong>6 、</strong>使用startswith() and endswith()代替切片进行序列前缀或后缀的检查。比如:<br><code>Yes: if foo.startswith(‘bar’):</code>优于<code>No: if foo[:3] == ‘bar’:</code><br><strong>7 、</strong>使用isinstance()比较对象的类型。比如:<br><code>Yes: if isinstance(obj, int):</code>优于<code>No: if type(obj) is type(1):</code><br><strong>8、</strong> 判断序列空或不空，有如下规则:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: if not seq:</span><br><span class="line">if seq:</span><br></pre></td></tr></table></figure></p><p>优于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No: if len(seq)</span><br><span class="line">if not len(seq)</span><br></pre></td></tr></table></figure></p><p><strong>9 、</strong>字符串不要以空格收尾。<br><strong>10、</strong>二进制数据判断使用 if boolvalue的方式。</p><p>如果你想获得更多关于PEP8的信息，可以查阅这篇信息<a href="http://blog.sae.sina.com.cn/archives/4781" target="_blank" rel="noopener">PEP8 Python 编码规范整理</a>或者官方文档<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP8的官方文档</a></p><p>至此，我们第七篇：在线教育网站的数据库字段的定义(上)就到此结束了，感谢你的赏阅。下一篇，我们就完善其余3个apps应用的数据库字段的定义。</p><p>本篇笔记对应于第七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>小伙伴们，今天终于进入了我们在线教育网站的项目开发阶段，这是这个项目的第一篇，主要给大家创建我们的虚拟环境和相关软件的安装（可能部分软件的安装在前面已经介绍了，这里就不再赘述了，必要的时候会开启传送大门。）</p><p>本篇笔记对应于第六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="虚拟环境配置"><a href="#虚拟环境配置" class="headerlink" title="虚拟环境配置"></a>虚拟环境配置</h2><p>首先请大家回顾阅读一下我们之前写的第二篇：<a href="https://www.jianshu.com/p/6b007bc61f5c" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</a>，然后我会给大家演示这个项目的虚拟环境配置，作用就是加深大家对虚拟环境搭建的印象。</p><h3 id="1、创建虚拟环境eduline（名字可以随意取）"><a href="#1、创建虚拟环境eduline（名字可以随意取）" class="headerlink" title="1、创建虚拟环境eduline（名字可以随意取）"></a>1、创建虚拟环境eduline（名字可以随意取）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\YC&gt;F:  # 进入F盘</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Envs  # 进入到Envs这个文件夹（系统默认在C盘，我自定义在F盘）</span><br><span class="line"></span><br><span class="line">F:\Envs&gt;mkvirtualenv eduline   # 创建虚拟环境eduline</span><br><span class="line">Using base prefix &apos;f:\\python\\pystall&apos;</span><br><span class="line">New python executable in F:\Envs\eduline\Scripts\python.exe</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs&gt;   # 表示已经进入到eduline这个虚拟环境中</span><br></pre></td></tr></table></figure><h3 id="2、安装Django2-0-1"><a href="#2、安装Django2-0-1" class="headerlink" title="2、安装Django2.0.1"></a>2、安装Django2.0.1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(eduline) F:\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple     # 采用清华镜像源安装django</span><br><span class="line"></span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting django==2.0.1</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB)</span><br><span class="line">    100% |████████████████████████████████| 7.1MB 2.9MB/s</span><br><span class="line">Collecting pytz (from django==2.0.1)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB)</span><br><span class="line">    100% |████████████████████████████████| 512kB 1.5MB/s</span><br><span class="line">Installing collected packages: pytz, django</span><br><span class="line">Successfully installed django-2.0.1 pytz-2018.5     # 提示已经安装成功了，新版本会自动安装pytz这个库</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs&gt;     # 然后就可以开始pip安装库和包了</span><br></pre></td></tr></table></figure><h3 id="3、创建我们的django项目"><a href="#3、创建我们的django项目" class="headerlink" title="3、创建我们的django项目"></a>3、创建我们的django项目</h3><p>打开Pycharm，新建django项目，各步骤如下（这里演示的是没有虚拟环境的版本，已经有虚拟环境的直接点击<code>Existing interpreter</code>，选择已有的虚拟环境即可）：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-d0c260c9c4be01cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至于各个箭头所填内容的原因，我这里就不再说明了，如果忘记了可以翻看之前的第二篇笔记。最后点击确定按钮即可，进入到如下页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-610fbd6ac3b5fdde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，虚拟环境以及项目的搭建就完成了。</p><h3 id="mysqlclient的安装"><a href="#mysqlclient的安装" class="headerlink" title="mysqlclient的安装"></a>mysqlclient的安装</h3><p>正如你前面所看到的，因为我们后面需要连接数据库，所以数据库驱动mysqlclient的安装是必不可少的，这里就先安装一下。（<a href="https://www.jianshu.com/p/3eba0cbb172f" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发</a>，前面已经介绍过了，所以这里简单演示一下即可）<br><strong>这里就采用网上下载到本地的方式来安装一下：</strong><br><strong>1、</strong>点击下面的蓝色字，即可跳转到下载地址：<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a>，点击这个网站，然后按住Ctrl+F键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。<img src="https://upload-images.jianshu.io/upload_images/8964398-c55482a686d9d4bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！<br><strong>2、</strong>将下载好的mysqlclient放置到虚拟环境eduline里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-68a937bb55e1fcda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>3、</strong>在虚拟环境中安装mysqlclient，如图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\YC&gt;F:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Envs    </span><br><span class="line"></span><br><span class="line">F:\Envs&gt;workon eduline</span><br><span class="line">(eduline) F:\Envs&gt;cd eduline    # 必须进入到你的项目中才能开始安装，否则会出错</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs\eduline&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Processing f:\envs\eduline\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Installing collected packages: mysqlclient</span><br><span class="line">Successfully installed mysqlclient-1.3.13</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs\eduline&gt;</span><br></pre></td></tr></table></figure></p><p><strong>4、</strong>配置settings.py文件<br>打开eduline/eduline/settings.py文件，找到第77行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改为如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;eduline&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;密码&apos;,  </span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5、新建数据库eduline</strong><br>打开Navicat，新建数据库eduline:<img src="https://upload-images.jianshu.io/upload_images/8964398-7d2127abd84ed428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后点击<strong>Tools</strong> 菜单下 <strong>Run manage.py Task</strong>，运行我们的<strong>makemigrations</strong>和<strong>migrate</strong>命令，最后运行一下我们的项目：<strong>runserver</strong>，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/或者（http://127.0.0.1）出现：![](https://upload-images.jianshu.io/upload_images/8964398-dcc125590f7a79d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/或者（http://127.0.0.1）出现：![](https://upload-images.jianshu.io/upload_images/8964398-dcc125590f7a79d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>表明我们的项目初始搭建完成了。</p><h3 id="Xadmin的安装"><a href="#Xadmin的安装" class="headerlink" title="Xadmin的安装"></a>Xadmin的安装</h3><p>尽管Django自带了admin用于后台的管理，但是我们觉得它的可支配性不是很大，所以这里推荐采用Xadmin来对后台进行管理。（还有一个叫做django-suit的插件，它其实只是美化了admin，功能上并没有做过多的拓展，这里开启传送大门，有兴趣的可以了解一下：<a href="http://djangosuit.com/" target="_blank" rel="noopener">django-suit官网</a>）<br>大家可以点击这里下载<a href="https://github.com/liyaopinner/mxonline_resources/tree/master/xadmin" title="xadmin" target="_blank" rel="noopener">xadmin</a>（<strong>下载后的文件放置位置，后面会介绍，这里你先新建一个文件夹A临时存放一下！</strong>）</p><h3 id="DjangoUeditor的安装"><a href="#DjangoUeditor的安装" class="headerlink" title="DjangoUeditor的安装"></a>DjangoUeditor的安装</h3><p>因为后面课程的添加需要富文本的支持，所以需要用到富文本插件，这里依旧开启传送大门：大家可以点击这里下载<a href="https://github.com/liyaopinner/mxonline_resources/tree/master/DjangoUeditor" title="DjangoUeditor" target="_blank" rel="noopener">DjangoUeditor</a>（<strong>下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！</strong>）</p><h3 id="课程的前端初始代码"><a href="#课程的前端初始代码" class="headerlink" title="课程的前端初始代码"></a>课程的前端初始代码</h3><p>因为我们这里主要说的是前端，所以这个在线教育网站的前端页面源代码就直接给大家了，大家自行下载，开启传送大门：<a href="https://github.com/liyaopinner/mxonline_resources/blob/master/%E5%88%9D%E5%A7%8B%E5%89%8D%E7%AB%AF%E6%BA%90%E7%A0%81.rar" title="初始前端源码.rar" target="_blank" rel="noopener">初始前端源码.rar</a>（<strong>下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！</strong>）</p><p>至此，项目开发所需要的额外软件算是准备完全了，接下来则是业务逻辑分析了。</p><h2 id="业务逻辑分析"><a href="#业务逻辑分析" class="headerlink" title="业务逻辑分析"></a>业务逻辑分析</h2><p>其实在第一篇的时候我们就已经介绍完了这个网站的业务逻辑，但是鉴于时间的原因，我这里再次介绍一下，其目的就是让大家更加的熟悉我们的业务逻辑，为接下来数据库的设计做一个铺垫。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。</span><br><span class="line"></span><br><span class="line">点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。</span><br><span class="line"></span><br><span class="line">点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。</span><br><span class="line"></span><br><span class="line">点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。</span><br><span class="line"></span><br><span class="line">点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。</span><br><span class="line"></span><br><span class="line">点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。</span><br><span class="line"></span><br><span class="line">机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。</span><br><span class="line"></span><br><span class="line">点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。</span><br><span class="line"></span><br><span class="line">后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。</span><br><span class="line"></span><br><span class="line">课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。</span><br><span class="line"></span><br><span class="line">课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。</span><br><span class="line"></span><br><span class="line">你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。</span><br><span class="line"></span><br><span class="line">日志记录：它可以记录后台人员的操作情况。</span><br><span class="line"></span><br><span class="line">其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。</span><br></pre></td></tr></table></figure></p><p>所以我们的app一共有4个，用于分别实现不同的功能，具体如下：</p><blockquote><p><strong>(users)用户版块：</strong>负责记录用户的个人信息，轮播图等相关内容,</p></blockquote><hr><blockquote><p><strong>(course)课程版块：</strong>用于记录课程相关的内容,</p></blockquote><hr><blockquote><p><strong>(organization)授课教师与授课机构板块：</strong>用于记录授课讲师，机构相关内容,</p></blockquote><hr><blockquote><p><strong>(operation)用户操作板块：</strong>用于记录用户操作的相关内容。</p></blockquote><hr><p>关于这4个app项目的创建和数据库字段的定义，我们下一篇笔记再介绍。接下来我们介绍如何利用Pycharm来同步更新代码至github，前面那篇介绍了如何利用Pycharm来新建repositories 并把代码上传过去，这次就是介绍如何更新之前上传的代码了。</p><h2 id="利用Pycharm来同步更新代码至github"><a href="#利用Pycharm来同步更新代码至github" class="headerlink" title="利用Pycharm来同步更新代码至github"></a>利用Pycharm来同步更新代码至github</h2><p>其实很简单的，分2个步骤。<br><strong>1、</strong>点击菜单栏下的VCS，下拉找到第三个Commit，点击一下，就会出现下面的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-b1fd9abf5fb959d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>选择完以后，点击下面的commit按钮，至此第一步就完成了，接下来第二步。<br><strong>2、</strong>还是点击菜单栏下的VCS，下拉找到第八个Git，点击一下，下拉找到那个倒数第四个Push按钮，点击一下，就会出现如下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-87a4674b71e46c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>如果你第一步Commit的话，这里就有你上传的Commit信息，我这第一步因为没有提交所以就没有了。然后选择你的提交项目，点击下面的Push按钮，等待几分钟，去你的Github仓库看一下，发现出现了：<img src="https://upload-images.jianshu.io/upload_images/8964398-574212f8e939a0e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>那么恭喜你，你已经Get了这个技能。</p><p>至此本篇关于‘’教育网站开发配置‘’的笔记就到此为止了，下一篇就开始4个app项目的创建和数据库字段的定义的介绍了，感谢你的赏阅。</p><p>本篇笔记对应于第六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（五）：简易留言簿交互实现</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E4%BA%A4%E4%BA%92%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E4%BA%A4%E4%BA%92%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要是简易留言簿的交互实现，笔记中本篇（第五篇）对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第五篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第五篇截止代码。</a></p><p>好了，我们先来看一下我们上篇笔记的最终效果：<img src="https://upload-images.jianshu.io/upload_images/8964398-269aa0238b512f88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="交互实现"><a href="#交互实现" class="headerlink" title="交互实现"></a>交互实现</h2><h3 id="对象关系映射ORM"><a href="#对象关系映射ORM" class="headerlink" title="对象关系映射ORM"></a>对象关系映射ORM</h3><p>通常而言，为了实现我们数据意义上的增删改查，你可能会选择使用原生的数据库查询语句如:<code>select * from database  where id =8;</code>又比如下面一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import MySQLdb  # 导入数据库驱动模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def book_list(request):  # 使用原生sql获取书的列表</span><br><span class="line">    # 创建一个数据库的连接: 指明用户名，数据库名，密码，服务器名</span><br><span class="line">    db = MySQLdb.connect(user = &apos;me&apos;, db=&apos;mydb&apos;, passwd=&apos;secret&apos;, host=&apos;localhost&apos;)</span><br><span class="line">    # 创建一个游标对象执行器</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    # 书写我们需要的sql语句，可以在Navicat中执行</span><br><span class="line">    cursor.execute(&apos;SELECT name FROM books ORDER BY name&apos;)</span><br><span class="line">    # 对于fetchall()的结果做遍历，并将遍历回来的结果当做数组，再取出第0个值name（必须一一对应）。</span><br><span class="line">    names = [row[0] for row in cursor.fetchall()]</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure></p><p>尽管这种方法可以对数据进行操作，但是一旦需要进行操作的数据过多而且不仅仅是查询操作，这种方法就显得很捉襟见肘了。那么有没有一种简便的方法呢？答案是有的！这就用到了我们的ORM了。</p><hr><p>对象关系映射（英语：<strong>(Object Relational Mapping</strong>，简称<strong>ORM</strong>，或<strong>O/RM</strong>，或<strong>O/R mapping</strong>），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换 。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。</p><hr><p>你可以借鉴面向对象编程的思想这么理解，把数据当做对象（事实上在面向对象编程的思想里，一切都是对象，别忘了Python也就是面向对象编程语言），那么它就有方法和属性了。举个例子来说：<code>car</code>，它的属性可以是颜色（color），大小（size），长度（length）等，可以这么表示为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">car.color      car.size       car.length</span><br></pre></td></tr></table></figure></p><p>；它的方法可以是启动（start），运行（run），停车（stop）等,也可以这样表示为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">car.start()         car.run()       car.stop()</span><br></pre></td></tr></table></figure></p><h3 id="创建我们的models-数据库信息"><a href="#创建我们的models-数据库信息" class="headerlink" title="创建我们的models(数据库信息)"></a>创建我们的models(数据库信息)</h3><p>从前面的描述中你就知道了，<strong>models.py</strong>这个文件就是用于数据库的操作，包括连接，访问，数据定义，修改等，接下来我们就开始定义数据，写我们的代码了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1ab081d168c493bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在空白处输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class UserMessage(models.Model):   # 继承于django.db.models.Model</span><br><span class="line"># max_length设置最大长度，verbose_name在后台显示字段会用到，也就是中文显示文本内容</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name=&quot;昵称&quot;)  </span><br><span class="line">    email = models.EmailField(verbose_name=&quot;邮箱&quot;)</span><br><span class="line">    address = models.CharField(max_length=100 ,verbose_name=&quot;联系地址&quot;)</span><br><span class="line">    message = models.CharField(max_length=500, verbose_name=&quot;你的轨迹&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户留言信息&quot;</span><br><span class="line"># class Meta，内嵌于 UserMessage 这个类的定义中，主要是用于后台管理显示中文信息</span><br></pre></td></tr></table></figure></p><p>前面说到，一旦数据发现变动就必须执行我们的<code>makemigrations</code>和<code>migrate</code>操作，我们运行一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-58d9e73e3d0bca55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>为什么会这样呢，怎么一点反应也没有，其实因为你还没有把新创建的apps在setting中注册，所以才会出现这样的情况。</p><h3 id="在settings-py中注册我们新创建的apps"><a href="#在settings-py中注册我们新创建的apps" class="headerlink" title="在settings.py中注册我们新创建的apps"></a>在settings.py中注册我们新创建的apps</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ff97e9b26776f1d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在djangoTest/settings.py 第33行的INSTALLED_APPS:的尾部加上一行代码<code>&#39;liuyan&#39;,</code>如下图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;liuyan&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这时候我们再来重新运行Tools 菜单下 Run manage.py Task然后输入<code>makemigrations</code>或者<code>makemigrations liuyan</code>,因为这里只有一个app所以我就直接<code>makemigrations</code>，多个可以根据自己的需要来选择<code>makemigrations</code>的对象，如下图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-f69dcd7c75cc96b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着运行<code>migrate</code>命令：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-d3e5f82db83e3da1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>提示生成了一些文件信息，我们打开Navicat去看一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-fdafb2be4a5edf82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，我们的数据信息在数据库成功显示了。默认数据表的名称为app名称_类名（转换为小写），自动生成的id作为主键（数据查询必备，这里系统给我们自己添加了）。</p><h3 id="关于Models的一些说明"><a href="#关于Models的一些说明" class="headerlink" title="关于Models的一些说明"></a>关于Models的一些说明</h3><p>前面我们用到了一些字段如CharField，EmailField等，还有一些这里没用到但是今后会用到的字段，我列举了一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">models.TextField    # 文本注意与CharField的区别，范围大小不一样</span><br><span class="line">models.ForeignKey     # 外键</span><br><span class="line">models.DateTimeField  # 时间</span><br><span class="line">models.IntegerField   # 整型</span><br><span class="line">models.IPAddressField # IP地址</span><br><span class="line">models.FileField      # 文件</span><br><span class="line">models.ImageField     # 图片</span><br></pre></td></tr></table></figure></p><p>如果你想看全部的信息可以，将光标放在models上面，按住ctrl+然后单击，进入models/–init–.py文件，之后以同样的操作点击任意一个fields单词，就可以打开fields/–init–.py文件了，在最前面就可以看到所有字段：<img src="https://upload-images.jianshu.io/upload_images/8964398-df00d7c92146e26b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="字段参数的说明"><a href="#字段参数的说明" class="headerlink" title="字段参数的说明"></a>字段参数的说明</h3><p>1、<strong>CharField必须指明默认的最大长度（max_length）</strong>。null=True,blank=True指明字段可以为空,defalut = “ “指定默认值为空。通常我们地址这一栏可以为空，所以修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address = models.CharField(max_length=100 ,null=True,blank=True,verbose_name=&quot;联系地址&quot;)</span><br></pre></td></tr></table></figure></p><p>2、表的id是自动生成的，如果需要自定义主键,那么需要在models.py中添加字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True,max_length=100 ,verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure></p><p>再来<code>makemigrations</code>和<code>migrate</code>一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c0ceb848e07024c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们发现出错了，其实是要求我们需要给object_id添加默认值，那我们默认为空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True,max_length=100,default=&quot;&quot; ,verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure></p><p>重新运行一下，<code>makemigrations</code>和<code>migrate</code>：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-cc5a397027c99836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们现在再次刷新一下Navicat，发现系统默认生成的主键id没了,主键变成了我们自定义的object_id。右键liuyan_usermessage这个表，选择设计表打开：<img src="https://upload-images.jianshu.io/upload_images/8964398-ed0759e2403cabbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Meta的说明"><a href="#Meta的说明" class="headerlink" title="Meta的说明"></a>Meta的说明</h3><p>1、在Meta信息中我们可以指定表的名称，如db_table：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_table = &quot;user_liuyan&quot;</span><br></pre></td></tr></table></figure></p><p>2、可以指定排序的字段，如ordering：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ordering = &apos;object_id&apos;</span><br></pre></td></tr></table></figure></p><p>这是以其升序的，倒序的话只需要这样<code>ordering = &#39;-object_id&#39;</code>即可。<br>3、可以更改后台信息，如verbose_name_plural：<br>verbose_name_plural是verbose_name的复数形式，如果不改则会在其后面加s。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">verbose_name = &quot;用户留言信息&quot;</span><br><span class="line">则verbose_name_plural 会显示 &quot;用户留言信息s&quot;，所以一般这2个的值都是相同的</span><br><span class="line">即</span><br><span class="line">verbose_name =verbose_name_plural=&quot;用户留言信息&quot;</span><br></pre></td></tr></table></figure></p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><p>至此，所有Django的基础知识我们就回顾完了，下一篇正式开始在线教育网站的项目开发！</p><p>笔记中本篇（第五篇）对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第五篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第五篇截止代码。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要是简易留言簿的基础开发，接下来的一篇才是开发的重点，但是这样为了缓冲一下大家，希望大家不要有大大的鸭梨。。。笔记中上篇（第三篇）对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第三篇截止代码。我们从这开始正式进入到简易留言簿的基础开发。（前面的必要工作已经做完，如果没跟上节奏，请回头补上，这里就不细说了。）" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第三篇截止代码。我们从这开始正式进入到简易留言簿的基础开发。（前面的必要工作已经做完，如果没跟上节奏，请回头补上，这里就不细说了。）</a></p><h3 id="页面介绍"><a href="#页面介绍" class="headerlink" title="页面介绍"></a>页面介绍</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-25d5b8c405504cac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个页面就是我们即将开发的简易留言簿，初始页面就是这样，关于这个页面的实现是html和css搭建的，这是前端的部分，有兴趣的小伙伴自己去查找资料学习一下，这里因为只讲后端，就不介绍了哈。</p><p>这里主要是介绍Django从请求到响应的整个完整流程，为我们后面开发在线教育平台打下基础。本篇笔记所要用到的静态html页面请前往Github下载：<strong>start.html</strong></p><h3 id="业务逻辑介绍"><a href="#业务逻辑介绍" class="headerlink" title="业务逻辑介绍"></a>业务逻辑介绍</h3><p>用户填写信息和留言 –&gt; 点击提交 –&gt;数据被存储到数据库（我们可以去数据库查询的到）。</p><h3 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h3><p>1、将下载的<strong>start.html</strong>文件拖到前面创建的templates文件夹里，如下图：<img src="https://upload-images.jianshu.io/upload_images/8964398-e35d79330ec06dca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>2、通过观察我们发现，这个页面里面把所需的css样式都写进去了，不利于我们对其样式的个性化管理，所以我打算新建一个css文件，用于存放css样式表单。</p><p>在static的下面新创建css和js文件夹，可能js文件夹用不上，但是这也是为后面的开发在线教育平台打下基础，你最好也试着创建一下，一般这些文件都是经常用到的。（这里因为功能的原因用不上。）然后在css这个文件夹下面新建一个<strong>style.css</strong>的文件。<img src="https://upload-images.jianshu.io/upload_images/8964398-67c6eddd1dc25f49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、打开<strong>start.html</strong>，点击<code>&lt;style&gt;</code>标签，将样式收起来，然后将其复制到刚才新建的<strong>style.css</strong>这个样式表中。<img src="https://upload-images.jianshu.io/upload_images/8964398-0c398228cdfd192e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在复制的时候把开头和结尾的<code>&lt;style&gt;</code>标签给去掉，并且可以按键盘上的<code>shift + tab</code>键，格式一下代码。就是下面的样子！<img src="https://upload-images.jianshu.io/upload_images/8964398-34033ea199acbfa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、别忘了将你新建的css样式文件引入到我们的html文件里去，否则后面文件的样式可能就加载不出来呀。事实上，我们在html里面已经引入了。<img src="https://upload-images.jianshu.io/upload_images/8964398-e2a9eb007acc04f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="数据库的连接"><a href="#数据库的连接" class="headerlink" title="数据库的连接"></a>数据库的连接</h3><p>5、打开djangoTest这个项目目录下面的settings.py文件，找到下面第80行代码，因为Django自带的数据库是sqlite3，前面说过我们采用的数MySQL数据库，所以需要对其进行修改。<img src="https://upload-images.jianshu.io/upload_images/8964398-136d6211aa93d9e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>也就是说默认的连接是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但我们应当修改成这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;djangoTest&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;密码&apos;,</span><br><span class="line">        &apos;HOST&apos;: &quot;127.0.0.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们中在Navicat中新建的数据库名字与其中的NAME的名称应设置为一致，否则会出错！！<br>6、在Navicat中新建的数据库djangoTest，如图：<img src="https://upload-images.jianshu.io/upload_images/8964398-9e90d1ca46854b9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="安装-mysqlclient和配置seeting文件。"><a href="#安装-mysqlclient和配置seeting文件。" class="headerlink" title="安装 mysqlclient和配置seeting文件。"></a>安装 mysqlclient和配置seeting文件。</h3><p>7、点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：<img src="https://upload-images.jianshu.io/upload_images/8964398-fa13bdd18c9fb7d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。</p><p>还记的在Pycharm里面安装第三方库么？如果不记得请翻看前面的笔记。这里简单说明一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-98ddd19b78cb5f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>点击4中的绿色+号，就可以搜索第三方库，然后点击install即可，是不是很简单，但有时候会出现安装失败的情况，所以最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门，<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住`Ctrl+F`键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。![](https://upload-images.jianshu.io/upload_images/8964398-20977829a37ddad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住`Ctrl+F`键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。![](https://upload-images.jianshu.io/upload_images/8964398-20977829a37ddad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！</p><p>8、在虚拟环境中安装mysqlclient，如图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-4a81975aef14b950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意安装的命令是：<code>pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</code>（后面的是你刚才下载的版本名称，带whl）<br>9、接下来我们再次点击Tools 菜单下 Run manage.py Task，我们会发现刚才的错误不再出现了。<img src="https://upload-images.jianshu.io/upload_images/8964398-f5133e8116479a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="makemigrations和migrate"><a href="#makemigrations和migrate" class="headerlink" title="makemigrations和migrate"></a>makemigrations和migrate</h3><p>10、现在介绍一下我们前面讲到用于数据迁移的两个命令：makemigrations和<br>migrate，下面我们分别运行这两个命令，看有什么大的变化。<br>在调用makemigrations这个命令之后，结果是这样的：<img src="https://upload-images.jianshu.io/upload_images/8964398-df631b352ce0acdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>紧接着，在调用migrate这个命令之后，结果变成这样了：<img src="https://upload-images.jianshu.io/upload_images/8964398-ebbd650db7dab9e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们会发现它生成了好多文件，我们打开Navicat中新建的数据库djangoTest，发现了很多表：<img src="https://upload-images.jianshu.io/upload_images/8964398-dfd4f9fd993bb96b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这些都是Django系统默认的内置数据表，我们在后面会用到它们。<br>11、运行一下我们的项目：runserver，然后到<a href="http://127.0.0.1:8000/来访问看是否运行成功。如果成功，则页面显示It" target="_blank" rel="noopener">http://127.0.0.1:8000/来访问看是否运行成功。如果成功，则页面显示It</a> worked。<img src="https://upload-images.jianshu.io/upload_images/8964398-ee31d60957b16974.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>最后结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-d9ca43e104459032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可能会问，为什么显示的不是留言这个页面，而是原始页面呢？那是因为我们还没有配置app的信息，下面开始配置。</p><h3 id="展示留言页面"><a href="#展示留言页面" class="headerlink" title="展示留言页面"></a>展示留言页面</h3><p>12、将djangoTest/urls.py修改如下:<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f86e1867a6503c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">    path(&apos;start/&apos;, getstart),  # 新增加的一行</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这里新增加path(‘start/‘, getstart),是代表以start为开头的地址。getstart 是这个url相对应连接（映射）的view。我们先去创建一个视图函数，其名字就是getstart。<br>13、在apps/liuyan/views.py添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def getstart(request):</span><br><span class="line">    return render(request, &apos;start.html&apos;)</span><br></pre></td></tr></table></figure></p><p>request 这个参数是django的一个httpRequest对象，关于它的用法你可以按住ctrl + 左键 跟踪到我们的render函数里面。Alt + 左箭头返回原位。<img src="https://upload-images.jianshu.io/upload_images/8964398-98553b0413831e1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>一般来说，render函数，我常用的就是它的2个参数：request和template-name。上图中<strong>start.html</strong>就是我们的原始页面名称。<br>14、回过头，对我们之前的urls.py进行重新配置完善：<img src="https://upload-images.jianshu.io/upload_images/8964398-00e5242fb612f2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>也就是12步中的urls.py，增加一行包的引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from liuyan.views import getstart</span><br></pre></td></tr></table></figure></p><p>变成了这个样子：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-20dcb23398995a1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>15、重新启动运行一下我们的项目：runserver，发现报错了：<img src="https://upload-images.jianshu.io/upload_images/8964398-d81f7ca934da278c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>其实并没有报错，只是因为我们在path中加入了自己的配置’start/‘,它就不会采用默认配置了，所以我们的IP地址应该是：<a href="http://127.0.0.1:8000/start/。你点进去看看：" target="_blank" rel="noopener">http://127.0.0.1:8000/start/。你点进去看看：</a><br><img src="https://upload-images.jianshu.io/upload_images/8964398-d486786dcd9cbc95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在页面出来了但是样式却没有加载成功，也就是说static/css/style.css文件没有找到。那是因为setting.py中静态文件的配置出了问题，第124行代码需要修改。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c2458a00c08634fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>它只说明了目录的名称，并没有指明查找的根路径，所以需要添加下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &apos;static&apos;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>16、我们再次运行一下:runserver。如果你前面没有按ctrl+v停止，那你只需要ctrl+s 即可重新刷新运行。最后运行结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-aeee768b6356cf57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>成功了，这就是今天最基本的页面信息配置了，把页面动态加载出来了。下一篇笔记将给这个动态的留言板加交互特效了。</p><p>不过很多小伙伴说，自己看的是云里雾里，对这个过程不熟悉，自己没有接触过MVC、MVVC等网页设计模式，所以我总结一下这个项目的配置流程。</p><h2 id="项目配置流程图"><a href="#项目配置流程图" class="headerlink" title="项目配置流程图"></a>项目配置流程图</h2><h3 id="刚才的流程顺序"><a href="#刚才的流程顺序" class="headerlink" title="刚才的流程顺序"></a>刚才的流程顺序</h3><p>1、把html文件导入进来；<br>2、通过简单的url配置来访问这个html；<br>3、发现找不到页面，所以我们就设置setting中DIRS路径；<br>4、页面可以正常显示，但css样式不能正常加载，我们设置了STATICFILES_DIRS；<br>。。。这样一步的，我们发现经常遇到错误，其实我们是从倒的顺序来执行的，目的就是让大家能通过很多的错误来加深自己对Django开发流程的熟悉程度。</p><h3 id="正常的开发流程"><a href="#正常的开发流程" class="headerlink" title="正常的开发流程"></a>正常的开发流程</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6dce157937216119.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，这样做的好处就是避免少犯错误。你可以尝试以顺的顺序来创建一个新的项目，试着体会一下这2种开发顺序的感觉。</p><p>后面我们的开发会从migration生成数据表这里开始往下编辑内容。本篇笔记中对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第四篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第四篇截止代码。</a></p><p>至此，简易静态留言簿的基础开发就到这里了，感谢你的赏阅。下一篇将实现留言簿的交互功能。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ADjango%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ADjango%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在前面的第二篇里，我们创建了一个名为djangoTest的项目，现在我们通过利用这个项目制作一个简单的留言簿来对django的基础知识进行一个回顾。<br>笔记中本篇对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第三篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第三篇截止代码。</a></p><h3 id="知识目录"><a href="#知识目录" class="headerlink" title="知识目录"></a>知识目录</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b33bc77f13e0223f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在前面创建Django的时候，你会出现这样的目录结构，但是在运行命令manage.py runserver 8000之后，你会发现变成了下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-4782b67ae8fa6a11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，是不是多了一个<strong>db.sqlite3</strong>文件，这是因为你在运行的时候联接了已经存在的数据库，从而自动生成了一个<strong>sqlite3</strong>文件。</p><p>好，接下来介绍一下该目录树的结构以及各个节点文件的作用（为了更加清楚准确的介绍，我把这个结构树分为了6个部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-6556357b5c187b63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>1、<strong>djangoTest</strong>: 这个<strong>djangoTest</strong>与2中的不一样，这是树的开始，也就是主目录；</p><p>2、djangoTest: 这个djangoTest与1中的不一样，这是项目目录，记住主目录和项目目录名称是一样的，且在创建Django项目的开始时候确定；对于2中的文件介绍如下：</p><blockquote><p>–init–.py: 一个空文件，用于告诉计算机这是一个Python包;<br>settings.py: 用于对项目的全局进行配置的文件（该 Django 项目的设置/配置）；<br>urls.py:  主要的urls配置入口（该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”）;<br>wsgi.py:  是Django启动的必须文件（一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目）；</p></blockquote><p>3、templates：它的作用是放置静态的html文件</p><p>4、db.sqlite3: 用于保存数据，开始没有，必须运行之后才有，且不固定，Django默认是sqlite数据库，但你也可以用MySQL，自然文件类型就发生改变了，但都是数据库文件。</p><p>5、manage.py： 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互（启动Django需要的主要文件，主要的Django命令都通过manage.py来运行)</p><p>6、External Libraries：这是扩展包的入口（外部库存放地址）。</p><p><strong>上面只是project（项目），但是真正来实现各种不同功能的却是各种app（应用）,下面我们来利用pycharm创建app。</strong></p><h3 id="项目与应用"><a href="#项目与应用" class="headerlink" title="项目与应用"></a>项目与应用</h3><p>你可能会有疑惑，我们之前都已经创建了djangoTest这个项目，为什么还要创建各种app应用呢？别急，我来告诉你其中的原因，我们以常用的手机软件<strong>微信</strong>来说明这个道理。你知道微信这个手机软件的名字对吧，其实这个名字就是一个项目，而且你还知道微信可以用来语音聊天，视频聊天，发图片，文字。。。等，这些不同的功能我们就称之为应用。现在明白了吧，不同功能的应用构成了项目。那么问题来了，我们如何利用Pycharm来创建app呢？</p><h3 id="利用Pycharm创建app"><a href="#利用Pycharm创建app" class="headerlink" title="利用Pycharm创建app"></a>利用Pycharm创建app</h3><p>第一步：在 Tools -&gt; Run manage.py Task进入创建app的命令入口；<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c5d96b6dfeb5e080.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ef7bc42eaadce829.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>第二步：在命令入口输入创建命令<strong>startapp appname</strong>,然后回车即可。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-718f27d622a86fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你会发现生产了一个新的应用，而且目录树的结构发生了变化，多了这么一个东西：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a2465e0a7de704d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个红色框里面的都是我们刚才创建liuyan这个app里面的文件，下面继续给大家介绍一下新目录树的结构和节点文件。</p><blockquote><p>1、migrations:它是一个Python包，里面目前只有–init–.py这个用于计算机识别这个包的空文件，这个包是用来存放数据迁移文件的，每次数据的变动，我们都需要更新数据库，否则会出错，更新的命令是makemigrations和migrate而且顺序不能对换！关于这一点，我后面还会继续说明，这里你只需要有一个大概的认识即可;<br>2、admin.py: 用于身份验证；<br>3、apps.py: app信息；<br>4、models.py： 用于数据定义；<br>5、tests.py： 用于app测试；<br>6、views.py： 用于视图的创建。</p></blockquote><h3 id="创建static文件夹"><a href="#创建static文件夹" class="headerlink" title="创建static文件夹"></a>创建static文件夹</h3><p>当然我们的项目肯定不只有html,肯定还有javascript,css，图片等文件，所以我们需要创建一个static文件用于存放静态的文件。将鼠标移至djangoTest这个主目录上，右键new–&gt; python package–&gt;写入名字static回车即可！如图：<img src="https://upload-images.jianshu.io/upload_images/8964398-140217003fbfac6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="创建log文件夹"><a href="#创建log文件夹" class="headerlink" title="创建log文件夹"></a>创建log文件夹</h3><p>当然，我们还需要创建log文件夹，用来存放网站的日志文件，这是必不可少的。</p><h3 id="创建media文件夹"><a href="#创建media文件夹" class="headerlink" title="创建media文件夹"></a>创建media文件夹</h3><p>与此同时，因为是Web应用，就必须有一个用于存放用户上传的图片，视频等资源文件夹。</p><p>至此，web的文件夹都已经创建完成了。</p><h3 id="创建apps文件夹"><a href="#创建apps文件夹" class="headerlink" title="创建apps文件夹"></a>创建apps文件夹</h3><p>但是还有一个问题，正如你所知道的一个项目是由很多个app构成的，我们不可能每个app都直接放在项目根目录下，这样会导致我们的文件夹太多了，不利于管理，所以我们可以新建一个apps文件夹，用于存放各个app，这样就好看多了。然后将我们刚才新建的liuyan这个app拖入到apps这个文件夹里面，会自动生成一个<strong>init</strong>文件。</p><p>不过这样做就是有一个坏处，就是我们在导入包的时候可能会出错误，我们需要每次在导入的时候前面加上<strong>apps.</strong>,这样太麻烦了，<img src="https://upload-images.jianshu.io/upload_images/8964398-6c9ded5baf2ee9aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>但是我有方法可以解决这个问题，往下看：<br>我们可以在apps这个文件夹上面，右键拉到底部，看到Mark Directory as以后单击Sources Root即可，你会发现apps这个文件夹变成了蓝色（前面第一篇有介绍）。<img src="https://upload-images.jianshu.io/upload_images/8964398-f299b3e1a9cc783a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。<img src="https://upload-images.jianshu.io/upload_images/8964398-e7195185d50e3aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-9c3926649345bc41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数来，将项目的绝对路径与apps进行拼接，返回一个新的地址。</p><p>至此，前期准备我们做完了，接下来便是开始敲我们的留言簿代码了。有朋友问我如何利用Pycharm把代码直接分享（上传）到github 仓库，这里我简单介绍一下。</p><h2 id="利用Pycharm把代码直接上传到github-仓库"><a href="#利用Pycharm把代码直接上传到github-仓库" class="headerlink" title="利用Pycharm把代码直接上传到github 仓库"></a>利用Pycharm把代码直接上传到github 仓库</h2><p>在此之前，你的电脑需要安装git和你必须要有一个github账号，在这里我就不详细介绍这些了，直接开启传送大门，点这里。<br><a href="https://blog.csdn.net/p10010/article/details/51336332" target="_blank" rel="noopener">GitHub的注册与使用（详细图解)</a>或者这个 <a href="https://www.cnblogs.com/Amedeo/p/7664224.html" target="_blank" rel="noopener">GitHub账户注册</a>;<a href="https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html" target="_blank" rel="noopener">git的安装和配置</a>。</p><p>接下来的步骤看仔细了，前方高能，请坐好扶稳。<br>1、点击左上角的File,选择Settings，然后选择Version Control，点击出现的GitHub，在出现的页面右上角选择Auth Type,选择password，然后输入你的github账号和密码，再点击下面的Test按钮Test连接是否正常，下面的Clone git repositories using ssh可以勾选一下，最后点击右下角的apply,然后ok一下就可以了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-ba53dd77e88f34d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>2、将鼠标移至左侧的Git，单击一下，然后选择git的路径之后，基本上点击右下角的apply,然后ok一下就可以了。<img src="https://upload-images.jianshu.io/upload_images/8964398-a3a6416adf50255f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>放大一下，每个人的不一样，这是我的git安装地址：<img src="https://upload-images.jianshu.io/upload_images/8964398-59d0ce57b4c3bf50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、点击开始页面顶部的VCS，<img src="https://upload-images.jianshu.io/upload_images/8964398-7fb5142c57f7481e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后再点击出现的倒数第三个import into Version Control，再选择出现的最后一个Share project on github，再点击就出现一个窗口，填写你的项目名称，描述，点击share。弹窗让你选择需要上传的项目文件与commit信息输入之后，项目将会上传至github。登录你的github账号，你就会发现你的项目已经上传成功了。<img src="https://upload-images.jianshu.io/upload_images/8964398-7d93e6db861109b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>至此，关于Django的基本知识就先介绍到这里，下篇我将开始利用代码对留言簿这个小应用进行开发</strong></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（一）：项目介绍</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习慕课网时的一些笔记，希望对即将学习Django的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="Django介绍"><a href="#Django介绍" class="headerlink" title="Django介绍"></a>Django介绍</h3><p>Django是目前Python Web开发中的主流框架，因为它有许多功能强大的第三方插件，你可以很方便的开发出自己的工具包，这使得它具有很强的可扩展性，被许多大型公司使用，如Google，豆瓣，YouTube，知乎，instagram等。</p><h3 id="在线网站介绍"><a href="#在线网站介绍" class="headerlink" title="在线网站介绍"></a>在线网站介绍</h3><p>我们这个网站功能强大，具有完整的个人中心，用户登录，注册以及找回密码等功能。下面分别介绍各个部分的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。</span><br><span class="line"></span><br><span class="line">点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。</span><br><span class="line"></span><br><span class="line">点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。</span><br><span class="line"></span><br><span class="line">点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。</span><br><span class="line"></span><br><span class="line">点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。</span><br><span class="line"></span><br><span class="line">点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。</span><br><span class="line"></span><br><span class="line">机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。</span><br><span class="line"></span><br><span class="line">点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。</span><br><span class="line"></span><br><span class="line">后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。</span><br><span class="line"></span><br><span class="line">课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。</span><br><span class="line"></span><br><span class="line">课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。</span><br><span class="line"></span><br><span class="line">你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。</span><br><span class="line"></span><br><span class="line">日志记录：它可以记录后台人员的操作情况。</span><br><span class="line"></span><br><span class="line">其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。</span><br></pre></td></tr></table></figure></p><h3 id="学完过后"><a href="#学完过后" class="headerlink" title="学完过后"></a>学完过后</h3><p>你不仅对Django的基础知识有了一个比较深刻的印象，还对MTV，MVC模式有了一个更加全面的了解，举一反三，你可以利用它开发各种类型的网站，如电商购物,在线旅游，公司官网，个人博客等其他网站。具体可以点击查看这个<a href="https://www.djangosites.org/" target="_blank" rel="noopener">基于django的网站</a>（可能要翻墙的哈）。</p><h2 id="开发环境介绍"><a href="#开发环境介绍" class="headerlink" title="开发环境介绍"></a>开发环境介绍</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发.</p><h3 id="后台介绍"><a href="#后台介绍" class="headerlink" title="后台介绍"></a>后台介绍</h3><p>采用xadmin进行开发。之前用过django-suit，发现它只是单纯的对admin进行了美化，并没有更高级的功能。鉴于此，我们推荐使用xadmin进行后台管理。它有许多的拓展功能，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xadmin常用插件</span><br><span class="line">自定义xadmin插件</span><br><span class="line">xadmin的富文本编辑</span><br><span class="line">xadmin的excel导入功能。</span><br><span class="line">一些开源的django开发库。</span><br></pre></td></tr></table></figure></p><p>到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。</p><h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><p>1、<strong>[入门]</strong> <a href="http://www.runoob.com/django/django-tutorial.html" target="_blank" rel="noopener">菜鸟Django 教程</a>，非常简短的教程，可以快速让你有一个清楚的认识。<br>2、<strong>[基础]</strong> <a href="https://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="noopener">自强学堂Django</a>，非常不错的教程，可以没事看一看。<br>3、<strong>[基础]</strong> <a href="http://www.liujiangblog.com/course/django/2" target="_blank" rel="noopener">刘江的Django教程</a>，非常适合入门的小白阅读，还有2个例子供你练习。<br>4、<strong>[入门]</strong> <a href="http://dwz.cn/VHRVxWfC" target="_blank" rel="noopener">1元学习《Django零基础到项目实战》</a>，非常不错的基础入门<strong>视频</strong>教程。<br>5、<strong>[基础]</strong><a href="http://edu.51cto.com/course/2787.html" target="_blank" rel="noopener">用Python Django快速做出高大上的BBS论坛网站</a>，这是免费的<strong>视频</strong>教程，大家可以试着去练手。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</title>
      <link href="/2018/04/09/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/09/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python下面结合我的版本给大家一一演示如何安装。</p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><h3 id="我的软件版本"><a href="#我的软件版本" class="headerlink" title="我的软件版本"></a>我的软件版本</h3><blockquote><p>Pycharm 我这里没有升级，采用的是JetBrains PyCharm 2017.3.4 x64</p></blockquote><blockquote><p>Mysql ，这里我采用了比较好用的mysql-5.7.21-winx64</p></blockquote><blockquote><p>Navicat ，这里采用了Navicat Premium ，当然其他如 Navicat for Mysql也可以</p></blockquote><blockquote><p>Python，写文章的时候Python3.7.0刚刚发布，鉴于其他插件还没有进行适配，我采用Python3.6.4这个版本进行开发。</p></blockquote><h3 id="Pycharm-的安装"><a href="#Pycharm-的安装" class="headerlink" title="Pycharm 的安装"></a>Pycharm 的安装</h3><p><strong>1、</strong>软件位置<br>PyCharm2017/64位下载地址：<br>链接：<a href="https://pan.baidu.com/s/1nwhmx2D" target="_blank" rel="noopener">https://pan.baidu.com/s/1nwhmx2D</a><br>密码：pc61<br><strong>2、</strong>右击软件压缩包选择解压到pycharm2017<br><a href="https://storage7.cuntuku.com/2018/03/22/D2OdM.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6bd9455d6585c059.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>3、</strong>在解压文件夹里面找到pycharm-professional-171.3780.47，右击打开。<br><a href="https://storage1.cuntuku.com/2018/03/22/D2Xuy.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-d090d018e228ecbe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>4、</strong>点击Next。<br><a href="https://storage1.cuntuku.com/2018/03/22/DB4xD.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-401daecf0b5be5fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>5、</strong>点击Browse更改安装路径，建议安装到除C盘以外的磁盘，可在D盘或者其它盘创建一个PyCharm 2017文件夹，然后点击Next。<br><a href="https://storage6.cuntuku.com/2018/03/22/D2HTp.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-39f20d1ff12a619f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>6、</strong>64位系统勾选64-bit launcher，32位系统勾选32-bit launcher，然后点击Next。<br><a href="https://storage7.cuntuku.com/2018/03/22/D2eS0.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6e86f6e001886a6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>7、</strong>点击Install。<br><a href="https://storage1.cuntuku.com/2018/03/22/D25Iz.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-e681b6dbb4654373.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>8、</strong>安装中（等待5分钟左右）。<br><a href="https://storage6.cuntuku.com/2018/03/22/DBgvW.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-4d03159b02db1227.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>9、</strong>点击Finish。<br><a href="https://storage6.cuntuku.com/2018/03/22/D2nbl.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6485a9f766504a6b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>10、</strong>找到安装包解压后的PyCharm 2017文件夹，右击打开。<br><a href="https://storage7.cuntuku.com/2018/03/22/DBNg3.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-544e15ae5eeac9a0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>11、</strong>找到lib文件夹，右击打开。<br><a href="https://storage6.cuntuku.com/2018/03/22/DBvVR.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-c32ad54468b4b51b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>12、</strong>选中其中的resource.cn.jar，右击复制。<br><a href="https://storage7.cuntuku.com/2018/03/22/DBC5y.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-73b4f131c1b36a4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>13、</strong>打开安装文件夹PyCharm 2017里的lib文件夹，然后在空白处鼠标右击选择粘贴。<br><a href="https://storage6.cuntuku.com/2018/03/22/D2Gue.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-ec1fdb371f768f9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>14、</strong>在桌面找到JetBrainsPyCharm 2017.1 x64，右击打开。<br><a href="https://storage7.cuntuku.com/2018/03/22/D2ReB.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-7c125f41609a2d9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>15、</strong>点击确定。<br><a href="https://storage1.cuntuku.com/2018/03/22/DBUvT.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-afaa4159c529fd60.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>16、</strong>点击Accept。<br><a href="https://storage1.cuntuku.com/2018/03/22/DB1M6.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-f91ef28ad95f934f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>17、</strong>勾选License server，在License server address：处填入<a href="http://intellij.mandroid.cn/" target="_blank" rel="noopener">http://intellij.mandroid.cn/</a> （或<a href="http://idea.imsxm.com/" target="_blank" rel="noopener">http://idea.imsxm.com/</a> 或<a href="http://idea.iteblog.com/key.php%EF%BC%89%E4%B8%89%E8%80%85%E4%B8%AD%E7%9A%84%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E5%8D%B3%E5%8F%AF%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BBActivate%E3%80%82" target="_blank" rel="noopener">http://idea.iteblog.com/key.php）三者中的任意一个即可，然后点击Activate。</a><br><a href="https://storage6.cuntuku.com/2018/03/22/DBfMC.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-3e289ec77aafd95a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="16"></a> </p><p><strong>18、</strong>点击确定。<br><a href="https://storage7.cuntuku.com/2018/03/22/DB8Yf.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6aba44c894ff9948.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>19、</strong>安装完成。<br><a href="https://storage1.cuntuku.com/2018/03/22/DB9b7.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-251bc702b8cd162e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a><br><strong>这个破解版的验证码可能在今年10月份左右就要过期，你到时候告诉我，我给你找一个新的破解码。</strong></p><h3 id="Mysql的安装"><a href="#Mysql的安装" class="headerlink" title="Mysql的安装"></a>Mysql的安装</h3><p><strong>1、下载压缩包</strong></p><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载地址</a><br><img src="https://upload-images.jianshu.io/upload_images/8964398-5ca6a4d9a1aba8e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、解压到文件夹目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2f4b7ff1541738c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>3、新建txt文件内容如下：</strong>设置mysql客户端默认字符集**</p><p>default-character-set=utf8</p><p><strong>设置3306端口</strong></p><p>port = 3306</p><p><strong>设置mysql的安装目录</strong></p><p>basedir=D:\Program Files\mysql-5.7.21-winx64</p><p><strong>设置mysql数据库的数据的存放目录</strong></p><p>datadir=D:\Program Files\mysql-5.7.21-winx64\data</p><p><strong>允许最大连接数</strong></p><p>max_connections=200</p><p><strong>服务端使用的字符集默认为8比特编码的latin1字符集</strong></p><p>character-set-server=utf8</p><p><strong>创建新表时将使用的默认存储引擎</strong></p><p>default-storage-engine=INNODB</p><p>注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini</p><p><strong>4  添加bin目录到path环境变量</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cd834e29d47e9d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>5 安装 MySQL服务，以管理员身份运行cmd</strong></p><p>执行 mysqld install 命令</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-643f118e3fae68c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>若出现“缺少xxx.dll，请安装微软运行库</p><p><a href="http://www.pc6.com/softview/SoftView_104246.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_104246.html</a></p><p><strong>6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b7a4895d4e32d205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-73b726ce792763b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行 mysqld –initialize-insecure –user=mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1448a95597d04114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data文件夹</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e4735c229dfc43fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data目录内容是否正确</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b6fb91b6926e8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>7  运行MySQL服务</strong></p><p>net start mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f39b42622e911be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关闭MySQL服务的命令是net stop mysql</p><p>8  登陆MySQL</p><p>mysql -u root –p</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-67df9096636696cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有命令：安装服务 mysqld install</p><pre><code>进入bin目录 cd E:\mysql-5.7.21-winx64\bin生成data文件夹 mysqld --initialize-insecure --user=mysql启动服务   net start mysql登录 mysql -u root –p</code></pre><p>修改密码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7142b21a0458a91b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>在忘记root密码的时候，可以这样</strong></p><p><strong>以windows为例：</strong></p><p>1. 关闭正在运行的MySQL服务。</p><p>2. 打开DOS窗口，转到mysql\bin目录。</p><p>3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</p><p>4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</p><p>5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</p><p>6. 连接权限数据库： use mysql; 。</p><p>6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。</p><p>7. 刷新权限（必须步骤）：flush privileges;　。</p><p>8. 退出 quit。</p><p>9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</p><h3 id="Navicat的安装"><a href="#Navicat的安装" class="headerlink" title="Navicat的安装"></a>Navicat的安装</h3><p>步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e93d6a71e62666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0"></p><p>步骤二 在欢迎画面点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b59309f71e5159e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤三 阅读许可协议，接受并点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b3c41f29a829c78c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-be9ca29a49189112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤五 运行其余的步骤。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88d1948d0c99bddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤六 点击“完成”，结束安装进程。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-fd49020988775b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-a359883e5fd81315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV</strong><br>其余版本的可以参考这个<a href="https://www.jianshu.com/p/42a33b0dda9c" target="_blank" rel="noopener">链接</a></p><h3 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h3><p><a href="https://www.python.org/downloads/release/python-364/" target="_blank" rel="noopener">官网传送Python3.6.4版本下载链接</a><br>由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接<a href="https://jingyan.baidu.com/article/3ea51489bebde652e61bbad3.html" target="_blank" rel="noopener">python3.6.3安装教程</a>。</p><h2 id="virtualenv的安装和配置"><a href="#virtualenv的安装和配置" class="headerlink" title="virtualenv的安装和配置"></a>virtualenv的安装和配置</h2><h3 id="使用虚拟环境的好处"><a href="#使用虚拟环境的好处" class="headerlink" title="使用虚拟环境的好处"></a>使用虚拟环境的好处</h3><p>我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹<code>(记住要和Python放在同一目录下)</code>，采用添加环境变量的方法<code>（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path）</code>，我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录<code>(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格</code>，</p><blockquote><p>C:\Users\YC-Jiang&gt;F:<br>F:&gt;cd Python<br>F:\Python&gt;cd pystall<br>F:\Python\pystall&gt;</p></blockquote><p>然后输入：<code>python setup.py install</code>回车，等待几分钟即可。</p><p>最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件<br>–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者<code>Windows徽标+R</code>中输入</p><blockquote><p>pip -—version</p></blockquote><p>小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入<br>python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句）</p><p>如果已经成功<strong>安装 pip</strong>，会提示类似下面的：</p><blockquote><p>pip 1.5.6 from C:\Python35\lib\site-packages\pip-1.5.6-py3.5.egg</p></blockquote><p>pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么<br>每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。</p><p>如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考<br>这个方法为你的 Windows电脑安装pip: <a href="https://taizilongxu.gitbooks.io/stackoverflowabout-python/content/8/README.html" target="_blank" rel="noopener">pip安装问题</a><br><a href="https://jingyan.baidu.com/article/ff42efa9d630e5c19e220207.html" target="_blank" rel="noopener">windows安装pip</a></p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>在终端输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line">virtualenv testvir  # 在当前用户目录(win+r %HOMEPATH%可查看)生成</span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat  # 激活</span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure></p><p>其实这种方法挺麻烦的，这里我推荐一种简单方法，<strong>安装virtualenvwrapper</strong></p><h3 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h3><p>在终端输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p><p>接下来便是创建虚拟环境了，同样采用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv djangoTest  # djangoTest为你新建虚拟环境的名称</span><br></pre></td></tr></table></figure></p><p>它会创建在C:\Users\YC\Envs当前用户目录下的Envs目录。</p><p>你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME<br><img src="https://upload-images.jianshu.io/upload_images/8964398-4f6aefde07e8c27b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>退出激活状态命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><p><strong>知道有哪些虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></p><p><strong>直接进入虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon djangoTest</span><br></pre></td></tr></table></figure></p><p>如果出现这种情况，表示你已经进入到虚拟环境中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Envs\Test\django(djangoTest)</span><br></pre></td></tr></table></figure></p><p>再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。</p><h3 id="使用镜像安装库"><a href="#使用镜像安装库" class="headerlink" title="使用镜像安装库"></a>使用镜像安装库</h3><p>有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">镜像</a>,并简单介绍一下如何使用。正常我们下载Django的命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0.1</span><br></pre></td></tr></table></figure></p><p>(请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>(注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！)</p><h2 id="简单介绍一下各个软件的基本使用"><a href="#简单介绍一下各个软件的基本使用" class="headerlink" title="简单介绍一下各个软件的基本使用"></a>简单介绍一下各个软件的基本使用</h2><h3 id="Pycharm安装第三方库"><a href="#Pycharm安装第三方库" class="headerlink" title="Pycharm安装第三方库"></a>Pycharm安装第三方库</h3><p>File–&gt;Default Settings–&gt;Version Control–&gt;Project InterPreter–&gt;<br>右边绿色的+ –&gt;搜索库名–&gt;install package  ，不懂的童鞋可以点击下面的示例：<a href="http://blog.csdn.net/fx677588/article/details/56830929" target="_blank" rel="noopener">Pycharm安装第三库</a>，Django也是可以利用这样的方式进行安装，但是速度不及使用pip安装的快。</p><h3 id="Pycharm新建Django项目"><a href="#Pycharm新建Django项目" class="headerlink" title="Pycharm新建Django项目"></a>Pycharm新建Django项目</h3><p>首先如果你已经打开了其他项目，你需要File–&gt;Close project，然后和没有项目的步骤一样如下：<br>1、点击出现的Create New Project按钮；<br><img src="https://upload-images.jianshu.io/upload_images/8964398-ce56513f6ac9c901.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1"><br>2、安装过程如下顺序；<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f96afd5efa1e24cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2"><br><strong>顺序解读</strong></p><blockquote><p>1、选择使用的是django项目，即可进入右侧页面；</p></blockquote><blockquote><p>2、Location: F:\Django\untitled ,它表示你创建的Django项目的存放地址，以后各个文件就在这里，我这里是untitled文件夹下，这个名称是默认的，你可以自行修改。</p></blockquote><blockquote><p>3、Project interpreter：表示的是你这个项目的Python解释器，下面7那个则是已经存在的Python解释器，我们推荐自己使用独立的解释器。所以点击3以后，再点击4 ，下拉4你会发现还有一个Conda，但是我们不选这个，选用Virtualenv这个，也就是第一个。</p></blockquote><blockquote><p>4、接下来我们看5这步，此处的Location是指你这个项目虚拟环境存放的位置文件夹，一般情况下，我们都取和项目一样的名称（前提是你前面没有创建虚拟环境，这里Pycharm自动帮你创建了，如果之前已经创建了，那么选择已经存在的虚拟环境即可）。6这一步是具体到你这个项目用的是哪个Python.exe程序，它一般在你虚拟环境下面的Scripts\pyhton.exe这个程序。</p></blockquote><blockquote><p>5、最后7这步你不用考虑，因为我们开发都是采用独立的开发环境，不会用到已经存在的环境，当然特殊情况除外。</p></blockquote><p>然后就出现</p><h2 id="完整过程演示"><a href="#完整过程演示" class="headerlink" title="完整过程演示"></a>完整过程演示</h2><h3 id="1、创建虚拟环境djangoTest"><a href="#1、创建虚拟环境djangoTest" class="headerlink" title="1、创建虚拟环境djangoTest"></a>1、创建虚拟环境djangoTest</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.14393]</span><br><span class="line">(c) 2016 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\YC&gt;F:  # 进入F盘</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Envs   # 进入到Envs这个文件夹</span><br><span class="line"></span><br><span class="line">F:\Envs&gt;mkvirtualenv djangoTest     # 创建虚拟环境djangoTest</span><br><span class="line">Using base prefix &apos;f:\\python\\pystall&apos;</span><br><span class="line">New python executable in F:\Envs\djangoTest\Scripts\python.exe       # 看到没，新的解释器位置</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line"></span><br><span class="line">(djangoTest) F:\Envs&gt;    # 表示已经进入到djangoTest这个虚拟环境中</span><br></pre></td></tr></table></figure><h3 id="2、安装Django2-0-1"><a href="#2、安装Django2-0-1" class="headerlink" title="2、安装Django2.0.1"></a>2、安装Django2.0.1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(djangoTest) F:\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple     # 采用清华镜像源安装django</span><br><span class="line"></span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting django==2.0.1</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB)</span><br><span class="line">    100% |████████████████████████████████| 7.1MB 2.9MB/s</span><br><span class="line">Collecting pytz (from django==2.0.1)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB)</span><br><span class="line">    100% |████████████████████████████████| 512kB 1.5MB/s</span><br><span class="line">Installing collected packages: pytz, django</span><br><span class="line">Successfully installed django-2.0.1 pytz-2018.5     # 提示已经安装成功了，新版本会自动安装pytz这个库</span><br><span class="line"></span><br><span class="line">(djangoTest) F:\Envs&gt;     # 然后就可以开始pip安装库和包了</span><br></pre></td></tr></table></figure><h3 id="3、创建我们的django项目"><a href="#3、创建我们的django项目" class="headerlink" title="3、创建我们的django项目"></a>3、创建我们的django项目</h3><p>打开Pycharm，新建django项目，个步骤如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-997299e8cdc999cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="djangotest.png"><br>最后点击确定按钮即可，进入到如下页面：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f7650c5beb3fc7ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tt.png"><br>放大一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-b33bc77f13e0223f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="qq.png"><br>这里面各个目录和文件的具体意思，下篇文章介绍，这里我就不详细说明了。</p><p>然后单击运行按钮运行一下。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f6b06d87bcb02ab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="uuu.png"><br><img src="https://upload-images.jianshu.io/upload_images/8964398-bfcbef10635b01b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cc.png"><br>出现这个界面以后，在浏览器导航栏中输入<strong><a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a></strong> 然后回车，如果出现下面的界面，表明你的djangoTest项目可以正常使用了！<br><img src="https://upload-images.jianshu.io/upload_images/8964398-be26a5132d9efa11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>在pycharm中按Ctrl+C即可停止运行！</strong></p><p>不知道你注意没有，这个dajngoTest是灰色的，<img src="https://upload-images.jianshu.io/upload_images/8964398-e6290ca087b0abbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们可以右键mark为source Root目录，就变成了蓝色，<img src="https://upload-images.jianshu.io/upload_images/8964398-ec848017b015f7bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样做的好处就是可以避免包的导入问题，我们在import模块时pycharm会根据设置从而智能提示。如果不mark可能会出现很多我们在pycharm中报红色，但是cmd可以运行的情况。<br><strong>至此，关于djangoTest项目的介绍就先到这里。下面介绍navicat基本使用</strong></p><h3 id="navicat基本使用"><a href="#navicat基本使用" class="headerlink" title="navicat基本使用"></a>navicat基本使用</h3><p><strong>1、新建连接</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-7d5453b515d49067.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在出现的下拉菜单里，选择MySQL，其他的类似。<img src="https://upload-images.jianshu.io/upload_images/8964398-cc65ce0e5dd4754e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>连接名和主机名一般写本地地址127.0.0.1或者localhost，端口默认3306，这里用户名和密码我均设置为root，然后点击左边的连接测试，如果出现连接成功的提示框，便点击确定，和这个框的确定。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-9cb79140373159f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>双击这个连接，如果该连接由灰色变为绿色的时候，就可以开始右键它，出现新建数据库，然后如下所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-0b8487bffbf9766f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>数据库名可以随便写，这里我写的是djangoTest这个项目名称，字符集选择图上所示那个，不要选择其他类型，这个很重要！排序规则选择第一个即可，也就是图上所示，这个也很重要，请按照图上要求，否则后期中文编码会出现编码错误。</p><p><strong>2、新建数据表</strong><br>双击数据库testdjango使它变绿，然后选中表，再右键新建表。或使用右侧新建表按钮也可以。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1203407193d01fe7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来就是正常的增加数据了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-bd265ce09fa02706.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>点击右侧上方的查询按钮，再点击下面的新建查询按钮，输入查询语句就可开始查询！<img src="https://upload-images.jianshu.io/upload_images/8964398-2dfebd3ec331f6f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>3、表的复制粘贴与数据库传输以及数据库导入导出</strong><br>Navicat支持我们把不同数据库的表进行复制粘贴操作同时还支持数据传输，你可以点击工具数据传输即可，是不是很简单。</p><p><strong>导入</strong>：右键点击运行SQL文件。<br><strong>导出</strong>：在需要导出的数据库上右键，可以转储SQL文件也可以选择只转存结构或连带数据一起转存。</p><p><strong>至此，关于项目开发环境的搭建就先介绍到这里，下篇我将利用之前建立的djangoTest项目来简单回顾一下django的基础知识</strong></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博主</title>
      <link href="/2017/03/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E4%B8%BB/"/>
      <url>/2017/03/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E4%B8%BB/</url>
      
        <content type="html"><![CDATA[<p>我，一个正在进击的技术控，相信越努力，越自由。<br><br>非常高兴能和大家在这里相遇。这是我的个人博客，搭建的初衷是广交朋友，广学知识。<br><br>那么你肯定觉得我是一个技术大牛（哈哈），其实我只是一个技术控，对那些有趣的技术非常好奇罢了，<br>离真正的大神还差一个”地中海”式的发型。<br><br>目前主要从事前端工作，但是非常喜欢java， python， kotlin等编程语言，所以你如果也有此爱好的话，<br>我们不妨交流一下学习心得。<br><br>今后我会在这个博客上更新一些有趣的技术和分享我学习，工作，生活上的点滴瞬间。<br><br>你不努力一下，你就体会不到被人追赶的滋味.<br><br>生活不只有<strong>Coding</strong>还有诗和远方~~~<br><br>喜欢旅游，看电影，偶尔还玩会游戏（最近在玩王者荣耀，尽管队友坑，但我也坑。。。）<br><br>对了，有一些技术上的问题可以给我发微信消息（事情多，不能立即回复，甚至忘记回复，还请不要生气）。<br><br>我在很多社区都有账号，需要联系我的朋友可以关注并加好友呃……<br></p><p><i class="icon-envelope"></i> 邮箱: <a href="mailto:2810706745@qq.com" target="_blank" rel="noopener">2810706745@qq.com</a><br><i class="icon-comment"></i>  QQ:  2810706745<br><i class="icon-comments"></i> 微信: ZY20160801<br><i class="icon-weibo"></i> 新浪微博: <a href="https://weibo.com/2809144261/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&amp;is_all=1" target="_blank" rel="noopener">点击这里</a><br><i class="icon-github"></i> GitHub: <a href="https://github.com/licheetools" target="_blank" rel="noopener">点击这里</a><br><br></p><blockquote><ul><li style="list-style: none"><input type="checkbox"> <strong>声明</strong>：</li><li style="list-style: none"><input type="checkbox" checked> <strong>1.</strong>本博客文章只是为了个人学习以及在一些技术型社区发表，不做商业使用;</li><li style="list-style: none"><input type="checkbox" checked> <strong>2.</strong>如其中引用到其他文章经典的部分，本人大部分都会加上引用或者在文章底部的参考文献中注明，如果不慎引用了你的文章但是却没有注明的请联系我;</li><li style="list-style: none"><input type="checkbox" checked> <strong>3.</strong>博客内文章欢迎转载，但转载前请联系我，保留出处和作者，不做商业使用，谢谢~~~ </li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> about </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于博主 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你有什么话，想对我说嘛？</title>
      <link href="/2017/03/03/%E4%BD%A0%E6%9C%89%E4%BB%80%E4%B9%88%E8%AF%9D%EF%BC%8C%E6%83%B3%E5%AF%B9%E6%88%91%E8%AF%B4%E5%98%9B%EF%BC%9F/"/>
      <url>/2017/03/03/%E4%BD%A0%E6%9C%89%E4%BB%80%E4%B9%88%E8%AF%9D%EF%BC%8C%E6%83%B3%E5%AF%B9%E6%88%91%E8%AF%B4%E5%98%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> liuyan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 留言板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取</title>
      <link href="/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E7%8C%AB%E9%80%94%E9%B9%B0(tripadvisor)%E6%97%85%E6%B8%B8%E6%99%AF%E7%82%B9%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
      <url>/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E7%8C%AB%E9%80%94%E9%B9%B0(tripadvisor)%E6%97%85%E6%B8%B8%E6%99%AF%E7%82%B9%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>在上一篇中，我们说到某个内容从属于多个分类(即它有多个标签)，应该如何把它所属的全部标签都爬取下来呢？这一期博主就将教你如何实现这一功能。我们以<a href="https://www.tripadvisor.cn/Attractions-g60763-Activities-New_York_City_New_York.html" target="_blank" rel="noopener">猫途鹰</a>这个网站为例，向大家演示一下。</p><h2 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容"></a>爬取内容</h2><p>如下图所示，我们需要爬取该图中所示景点的信息，具体包括：标题，封面图片，分类等信息。</p><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><h3 id="get-方法的使用"><a href="#get-方法的使用" class="headerlink" title="get()方法的使用"></a>get()方法的使用</h3><p>我们在上一篇中，获取标题，地址，单标签的文本信息采用了get_text()方法，但是如果要获取图片呢？我们是不能和之前一样，要采用一种新的方法：get(‘attr’)。这么说你可能有些困惑，举个简单的例子，看下面的代码:<br><code>&lt;a href=http://licheetools.top&gt; share my life with you &lt;/a&gt;</code><br>如果你只想获取网站信息，只需要.get(‘href’)即可。获取图片只需要.get(‘src’)因为图片的格式一般是这样的：<code>&lt;img src=&quot;http://licheetools.top/index.html/first.jpg&quot; alt=&quot;第一张图片&quot;&gt;</code></p><h3 id="stripped-strings的用法"><a href="#stripped-strings的用法" class="headerlink" title="stripped_strings的用法"></a>stripped_strings的用法</h3><p>在这里你可以认为是高级的get_text(),它这个可以同时取出多个文本，待会就采用这个来爬取多个标签。</p><h3 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h3><p>字符串的格式化通常采用{}和:来代替传统的%方式，具体如下：<br><strong>1、使用位置参数</strong><br>从下面的例子可以看出位置参数不受顺序约束，且可以为{},只要format里有相对应的参数值即可,参数索引从0开，传入位置参数列表可用*列表；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'my name is &#123;&#125; ,age &#123;&#125;'</span>.format(<span class="string">'joe'</span>,<span class="number">18</span>)</span><br><span class="line">print(a)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">18</span></span><br><span class="line"></span><br><span class="line">b=<span class="string">'my name is &#123;1&#125; ,age &#123;0&#125;'</span>.format(<span class="number">10</span>,<span class="string">'joe'</span>)</span><br><span class="line">print(b)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">10</span></span><br><span class="line"></span><br><span class="line">c=<span class="string">'my name is &#123;1&#125; ,age &#123;0&#125; &#123;1&#125;'</span>.format(<span class="number">10</span>,<span class="string">'joe'</span>)</span><br><span class="line">print(c)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">10</span> joe</span><br><span class="line"></span><br><span class="line">data=[<span class="string">'joe'</span>,<span class="number">18</span>]</span><br><span class="line">d=<span class="string">'my name is &#123;&#125; ,age &#123;&#125;'</span>.format(*data)</span><br><span class="line">print(d)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p><strong>2、使用关键字参数</strong><br>采用字典当关键字参数传入值，不过关键字参数值要对得上，可以在字典前加**<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="string">'my name is &#123;name&#125;,age is &#123;age&#125;'</span>.format(name=<span class="string">'joe'</span>,age=<span class="number">19</span>)</span><br><span class="line">print(e)</span><br><span class="line">my name <span class="keyword">is</span> joe,age <span class="keyword">is</span> <span class="number">19</span></span><br><span class="line"></span><br><span class="line">data=&#123;<span class="string">'name'</span>:<span class="string">'joe'</span>,<span class="string">'age'</span>:<span class="number">19</span>&#125;</span><br><span class="line">f=<span class="string">'my name is &#123;name&#125;,age is &#123;age&#125;'</span>.format(**data)</span><br><span class="line">print(f)</span><br><span class="line">my name <span class="keyword">is</span> joe,age <span class="keyword">is</span> <span class="number">19</span></span><br></pre></td></tr></table></figure></p><p>其他参数我在这里就不介绍了，你可以看这篇文章<a href="http://www.cnblogs.com/benric/p/4965224.html" target="_blank" rel="noopener">python之字符串格式化(formate)</a></p><h2 id="代码内容"><a href="#代码内容" class="headerlink" title="代码内容"></a>代码内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/user/bin/pytthon</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2017/04/15 20:15</span></span><br><span class="line"><span class="comment"># @Author: lichexo</span></span><br><span class="line"><span class="comment"># @File: test_05.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://www.tripadvisor.cn/Attractions-g60763-Activities-New_York_City_New_York.html'</span></span><br><span class="line">urls=[<span class="string">'https://www.tripadvisor.cn/Attractions-g60763-Activities-oa&#123;&#125;-New_York_City_New_York.html#FILTERED_LIST'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>,<span class="number">1140</span>,<span class="number">30</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_attraction</span><span class="params">(url,data=None)</span>:</span></span><br><span class="line">    web_data = requests.get(url)</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    soup = BeautifulSoup(web_data.text, <span class="string">'lxml'</span>)</span><br><span class="line">    titles = soup.select(<span class="string">'div.listing_title &gt; a[target="_blank"]'</span>)</span><br><span class="line">    images = soup.select(<span class="string">'img[width="180"]'</span>)</span><br><span class="line">    cates = soup.select(<span class="string">'div.tag_line &gt; div'</span>)</span><br><span class="line">    <span class="keyword">for</span> title,image,cate <span class="keyword">in</span> zip(titles,images,cates):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'title'</span>:title.get_text(),</span><br><span class="line">            <span class="string">'image'</span>:image.get(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'cate'</span>:list(cate.stripped_strings),</span><br><span class="line">        &#125;</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line">get_attraction(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> single_url <span class="keyword">in</span> urls:</span><br><span class="line">    get_attraction(single_url)</span><br><span class="line"></span><br><span class="line">print(urls)</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>由于抓取的内容太多，这里只呈现部分信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'曼哈顿天际线'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'大都会艺术博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'艺术博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'中央公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'公园'</span>, <span class="string">','</span>, <span class="string">'景观步行区'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'9/11纪念馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'特色博物馆'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'纪念碑与雕像'</span>, <span class="string">','</span>, <span class="string">'古迹'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'峭石之巅观景台'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'观景台'</span>, <span class="string">','</span>, <span class="string">'瞭望台'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'布鲁克林大桥'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'桥梁'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'圣帕提克大教堂'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'教堂'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'百老汇'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'大中央车站'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'建筑'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'布莱恩公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'公园'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'纽约公共图书馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'特色博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'世贸一号观景台'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'观景台'</span>, <span class="string">','</span>, <span class="string">'建筑'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'史泰登岛渡轮'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'轮渡'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'高线公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景观步行区'</span>, <span class="string">','</span>, <span class="string">'公园'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'帝国大厦'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'建筑'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'观景台'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'自由女神像'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'纪念碑与雕像'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'洛克菲勒中心'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'建筑'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'现代艺术博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'艺术博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'The Oculus'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'无畏海空宇宙博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'剧院'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'阿波罗剧院'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'纪念碑与雕像'</span>, <span class="string">','</span>, <span class="string">'建筑'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'华盛顿广场公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'特色博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'圣保罗教堂'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'剧院'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'圣约翰教堂'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'公园'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'周边'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'河滨公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: []&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'Studio 54'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'教堂'</span>, <span class="string">','</span>, <span class="string">'圣地与宗教景点'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'埃利斯岛'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'圣地与宗教景点'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'切尔西市场'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: []&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'商人之家博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'公园'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'哈德逊河公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: []&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'艾利斯岛移民博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'剧院'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'犹太遗产博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'历史博物馆'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'古迹'</span>]&#125;</span><br><span class="line"></span><br><span class="line">。。。。。。</span><br></pre></td></tr></table></figure></p><h2 id="下期说明"><a href="#下期说明" class="headerlink" title="下期说明"></a>下期说明</h2><p>哈哈，今天总的来说还是比较简单的，容易操作，下期我们准备爬点不一样的东西。。。</p><p>今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。</p>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战系列：（一）58同城-转转商品信息爬取</title>
      <link href="/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%8958%E5%90%8C%E5%9F%8E-%E8%BD%AC%E8%BD%AC%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
      <url>/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%8958%E5%90%8C%E5%9F%8E-%E8%BD%AC%E8%BD%AC%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本系列教程记录了博主的爬虫之路，可谓是有苦又累，有甜有笑，如果你在看过本系列教程之后，对爬虫<br>有独到的见解或者浓厚的兴趣，不妨留言和博主进行交流学习呢，我在这里等你来玩~~~</p><h2 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容"></a>爬取内容</h2><p>如下图所示，我们需要爬取该图中所示商品的信息，具体包括：类目，标题，价格，浏览量，所在区域<br>等信息。<br><img src="https://storage6.cuntuku.com/2018/03/31/DBHP3.png" alt="DBHP3.png"></p><h2 id="代码内容"><a href="#代码内容" class="headerlink" title="代码内容"></a>代码内容</h2><h3 id="字典属性法"><a href="#字典属性法" class="headerlink" title="字典属性法"></a>字典属性法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/user/bin/pytthon</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2017/4/10 15:15</span></span><br><span class="line"><span class="comment"># @Author: lichexo</span></span><br><span class="line"><span class="comment"># @File: zhuanzhuan.py</span></span><br><span class="line"><span class="comment"># @Website：http：//licheetools.top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment">#导入需要的包和模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time   <span class="comment">#用于控制每次爬取的时间间隔</span></span><br><span class="line"></span><br><span class="line">user_agent=<span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) </span></span><br><span class="line"><span class="string">AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'User_Agent'</span>:<span class="string">'user_agent'</span></span><br><span class="line">&#125;</span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_attrition</span><span class="params">(url)</span>:</span>   <span class="comment">#定义函数，便于调用</span></span><br><span class="line">    <span class="comment">#url = 'http://zhuanzhuan.58.com/detail/967678151307198471z.shtml</span></span><br><span class="line">    ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp;metric=null&amp;</span><br><span class="line">    PGTID=<span class="number">0</span>d305a36<span class="number">-0000</span><span class="number">-1792</span>-ee6b<span class="number">-8</span>d43de6b3765&amp;ClickID=<span class="number">7</span><span class="string">'    </span></span><br><span class="line"><span class="string">#此处URL前面的(#)不可删除，否则就出现函数调用错误，因为后面调用的link已经替换此处的url</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    web_data=requests.get(url,headers=headers)  </span></span><br><span class="line"><span class="string">    soup=BeautifulSoup(web_data.text,'</span>lxml<span class="string">')</span></span><br><span class="line"><span class="string">    casses=soup.select('</span><span class="comment">#nav &gt; div &gt; span &gt; a')</span></span><br><span class="line">    titles=soup.select(<span class="string">'div.box_left_top &gt; h1'</span>)</span><br><span class="line">    moneys=soup.select(<span class="string">'div.price_li &gt; span[class="price_now"] &gt; i'</span>)</span><br><span class="line">    addresses=soup.select(<span class="string">'div.palce_li &gt; span &gt; i'</span>)</span><br><span class="line">    <span class="keyword">for</span> cass,title,money,address <span class="keyword">in</span> zip(casses,titles,moneys,addresses):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'cass'</span>:cass.get_text(),   <span class="comment">#文字调用get_text()方法</span></span><br><span class="line">            <span class="string">'title'</span>:title.get_text(),</span><br><span class="line">            <span class="string">'money'</span>:money.get_text(),</span><br><span class="line">            <span class="string">'address'</span>:address.get_text(),</span><br><span class="line">        &#125;</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_item_info</span><span class="params">()</span>:</span></span><br><span class="line">    url=<span class="string">'http://bj.58.com/pbdn/'</span></span><br><span class="line">    web_data=requests.get(url)</span><br><span class="line">    soup=BeautifulSoup(web_data.text,<span class="string">'lxml'</span>)</span><br><span class="line">    href_list=soup.select(<span class="string">'a.t'</span>)</span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">        link=href.get(<span class="string">'href'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'zhuanzhuan'</span> <span class="keyword">in</span> link:   <span class="comment">#除去网页中不需要的精准推广部分</span></span><br><span class="line">            get_attrition(link)</span><br><span class="line"></span><br><span class="line">get_all_item_info()</span><br></pre></td></tr></table></figure><h3 id="列表索引法"><a href="#列表索引法" class="headerlink" title="列表索引法"></a>列表索引法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/user/bin/pytthon</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2017/4/10 15:15</span></span><br><span class="line"><span class="comment"># @Author: lichexo</span></span><br><span class="line"><span class="comment"># @File: zhuanzhuan.py</span></span><br><span class="line"><span class="comment"># @Website：http：//licheetools.top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">user_agent=<span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)</span></span><br><span class="line"><span class="string">AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'User_Agent'</span>:<span class="string">'user_agent'</span></span><br><span class="line">&#125;</span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_item_info</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#url='http://zhuanzhuan.58.com/detail/835458751461588996z.shtml</span></span><br><span class="line">    ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp;</span><br><span class="line">    metric=null&amp;PGTID=<span class="number">0</span>d305a36<span class="number">-0000</span><span class="number">-123</span>c<span class="number">-630</span>d-da6c51789948&amp;ClickID=<span class="number">1</span><span class="string">'</span></span><br><span class="line"><span class="string">    web_data=requests.get(url,headers=headers)</span></span><br><span class="line"><span class="string">    soup=BeautifulSoup(web_data.text,'</span>lxml<span class="string">')</span></span><br><span class="line"><span class="string">    title_list=soup.select('</span>h1.info_titile<span class="string">')</span></span><br><span class="line"><span class="string">    title=title_list[0].text   #该列表有且仅有唯一一个元素，采用get_text()将其取出</span></span><br><span class="line"><span class="string">    price_list=soup.select('</span>span.price_now &gt; i<span class="string">')</span></span><br><span class="line"><span class="string">    price=price_list[0].text</span></span><br><span class="line"><span class="string">    views_list=soup.select('</span>span.look_time<span class="string">')</span></span><br><span class="line"><span class="string">    view=views_list[0].text</span></span><br><span class="line"><span class="string">    area_list=soup.select('</span>div.palce_li &gt; span &gt; i<span class="string">')</span></span><br><span class="line"><span class="string">    area=area_list[0].text</span></span><br><span class="line"><span class="string">    cate_list=soup.select('</span>span.crb_i &gt; a<span class="string">')</span></span><br><span class="line"><span class="string">    cate=cate_list[-1].text.strip()  #使用strip()函数来消除换行和空格的影响</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    data=&#123;</span></span><br><span class="line"><span class="string">        '</span>title<span class="string">':title,</span></span><br><span class="line"><span class="string">        '</span>price<span class="string">':price,</span></span><br><span class="line"><span class="string">        '</span>view<span class="string">':view,</span></span><br><span class="line"><span class="string">        '</span>area<span class="string">':area,</span></span><br><span class="line"><span class="string">        '</span>cate<span class="string">':cate,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    print(data)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_all_item_info():</span></span><br><span class="line"><span class="string">    url='</span>http://bj<span class="number">.58</span>.com/pbdn/<span class="string">'</span></span><br><span class="line"><span class="string">    web_data=requests.get(url,headers=headers)</span></span><br><span class="line"><span class="string">    soup=BeautifulSoup(web_data.text,'</span>lxml<span class="string">')</span></span><br><span class="line"><span class="string">    href_list=soup.select('</span>a.t<span class="string">')</span></span><br><span class="line"><span class="string">    for href in href_list:</span></span><br><span class="line"><span class="string">        link=href.get('</span>hre<span class="string">f')   #获取元素的某个属性采用get()方法来实现</span></span><br><span class="line"><span class="string">        if '</span>zhuanzhuan<span class="string">' in link:</span></span><br><span class="line"><span class="string">            get_item_info(link)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">get_all_item_info()</span></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://storage7.cuntuku.com/2018/03/31/DBe6D.png" alt="DBe6D.png"></p><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><h3 id="soup-select-选择标签问题"><a href="#soup-select-选择标签问题" class="headerlink" title="soup.select ( )选择标签问题"></a>soup.select ( )选择标签问题</h3><p>你只需要在浏览器中鼠标右键点击审查(<code>Ctrl+Shift+I</code>) –&gt; 找到字段的具体代码 –&gt; 右键选择Copy –&gt; Copy selector即可得到你想要的代码字段。为保证你是否正确捕抓到相关信息，你可以鼠标右键点击查看网页源代码(<code>Ctrl+U</code>) –&gt;然后再按<code>Ctrl+F</code>调出搜索框 –&gt; 将你刚才捕抓到的信息进行复制黏贴并回车 –&gt; 看右侧的黄色代码区是否是包括你所需信息的最小高亮区，不是则往上一级父级标签查询。</p><h3 id="get-text-和-get-的使用问题"><a href="#get-text-和-get-的使用问题" class="headerlink" title="get_text 和 get()的使用问题"></a>get_text 和 get()的使用问题</h3><p>get_text()，是返回选择的标签文本，具体可以查看<a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/#get-text" target="_blank" rel="noopener">参考文档</a>;而get(‘’)，这是选择标签中的属性(也就是里面有=符号的左边)，<br>比如在<code>&lt;li&gt;&lt;a class=&quot;rrence intnal&quot; href=&quot;#next-siblings-previous-siblings&quot;&gt;&lt;/li&gt;</code>之中，选择li &gt; a这个标签之后，则可以用get(‘href’)获取其中的链接。</p><h2 id="下期说明"><a href="#下期说明" class="headerlink" title="下期说明"></a>下期说明</h2><p>哈哈，今天的内容是不是很简单，不过你是不是有一个疑问，就是如果某个内容从属于多个分类(即它有多个标签)我们应该如何把它所属的全部标签都爬取下来呢？那么下期博主将教你如何实现这一功能。</p><p><strong>本教程适合有一部分Python基础的同学，小白童鞋很抱歉。。。</strong></p><p>今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。</p>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行者有梦，千里亦趋</title>
      <link href="/2017/03/01/%E8%A1%8C%E8%80%85%E6%9C%89%E6%A2%A6%EF%BC%8C%E5%8D%83%E9%87%8C%E4%BA%A6%E8%B6%8B/"/>
      <url>/2017/03/01/%E8%A1%8C%E8%80%85%E6%9C%89%E6%A2%A6%EF%BC%8C%E5%8D%83%E9%87%8C%E4%BA%A6%E8%B6%8B/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看." />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+5WZuXx8zxhkiVg2F6tfyfr+IdjkVwE9Juh7o1M2s4JA3ForS3y6eOb5ru3OO6yNd5blcQZxK/TKkismXjCx7376JrqYfmyzmRuuGyzAnYI8mhtdlLucsZ3OpapRgCmSgsg7+ce0CfpbXS3PuUoZ6GlUe+G0RYyiUyK+Pi8YDdbN4x/U1t5cbzzkvArbUoCOOZq4sDOgy5QwNOcW0T6TOgWNPyZ51vhXXz69me/2gQgI3aRUVqHlJnEKjvjQwTYWwAsDL9WY7EXZGe+cqZLm/kqSz7H7Vd7IDbFeoaLaXtFqe3Eizhy/HXd8WouYaFWuJ5kYzJ3VOPeItb2yJBo60rQrUEESHWiVaPU/xnVSgJDdKwrVYQ+TbWOhc+5rXoMOwTqQsPGOgmgFeAlkJWsgca5AhY5Q6jDSX1iQkywY6nBdI9spDuxQK72mdo5Zy+3qW399smyrYUIsIauLMMwIEcb/Oj1o2Zg00GOSFMI9RfUY6YgTYmj5NMb3mvXGTf1eOMXXwS5Gxv5KORZVwoVlYqq6EYqw7xy7G0ZTV6IJjlba7gd2VpU+9qm7TCBVJCKz22XQQvrVBXJuhtc1iIOcw8eJaZFCnGKjMW7r4Ey2joAjcppWspCpDqsIsTCU01he08kn2pXSAOhno28FkUWo9m5FN0TGZXiHQR0h9Bji8VlIEqRzLstDylKEAzUEQILDg+I17t1i1eGSJPihUmCtbmKBzyBmz3ePDRl3JDF/iFYWGQKFP+wtZ03N9HbL+4l1WNsiWt8wc4HmkFR1YqFtziwgotTCZl6xttrZxwmrWDopwwLGvTV7MEWGrQkT8Rs0BVh7+iwCnus2fa4AYPFaGO+yjpIL2I0zdI17QZwI1k87Z+USfl/7QiI/hsKw78AJt4VM715KE0rqilet+5fa6teIwAkmt4zr1UXezk+uNP+uVdIgIoZXI4mu7xq5vvGxpt4CPXRyeRJGhozPcO2sXVoLqZDg/y4BSCbU23HPzdLZVpR4TMJlD0U6JZr8nGkuE6hH2k4UGffVi/HQOCnpMvgwbmrY2aPrW59aYIZr7N1oF+t9J8HRUXstkTEnA9xRRDQJGSDx/nlrEaD8tkI3AfLLbvHY+5uHf20X+OajIwX4QA1Phe0G1Xm+NO/YeQX2yEuDEsHPvorW+fiosdpDxc3D9/iKQscv2RuVfLuHk30+z6Sg5P9Qc9if3yOkz6Th2KCJN4QXgdmcTBxaXwJ2c8oOaIkyXporHvPVm3uQXIRucXHPrZidPBS4jVf+0X5OMpqc5fuTPqbZAoGp74VhaRFNCYcyx9YKgOGqNGGWZG3RV3u4Fl1Ou/P0D9T8d2u61tAwFh8gk6YFdEtpOZIGbpZJZuQTymtfhui4DwpvLqMVZBzmB6OVqT0EAOqyxvT2rEQbLAdPo05UMOtos0AAvH/c4+sbQ1ITYQaVwjfPrG/RojhVkvYAM8XALRV0Bxm11xBsfBCSTeYPCoJ+0UAWynv3+AA0KglpHhGxj9B4kePNl1lzwp7ut5Ay7yQwi4l+h0dGNWwLPRHehKjxxyamtY0UnaIwYytJb082yv/qNyLtYXkua/BIq7iEak1RdA1288+pKep6McmvMzzoSnD0o7kFouk6NzSCWnEZRBvlq5I4d7bmk7waYdq+PmzatJFdRyqUOHT/Bng65Dh3HkoQEdQlG1bRP6KYICqccTtxAQFanmNiuvpCFNRDbz5x5BTPW0SPs2yOqjjs7wUVAq7rBcpmnqDFl3AGAWsHeu5dtjmbGat2T6452hhdFMsj2c7r7psJI5qADpikpYWb5PdYv+SNdeL+hkDNtgbAEjlfygN1fmMtfEGErI1mvU4n3HjhHqoMEZ2TEQ2SE84XmXKdSq5X2Q4KoyxSoS3Q8M2FFuAV89PjVDU9oM6bzsWhnMfgVmEOW6N/EwD2M3X+sqM0fVU61RSKWwkYlN6e+bMqPTg5ktkidej0QcI2vagMsk9rqGpZ8FDnGsPCTh4GKSo8xGSCx3uGzU4JkMZsYJEvi2FPJWqzTR2K9wQAuwwyrpOkPaA9gF17mWKZnDk9g3buR/BArQCXQpeAjWG60h8zRYUxYSKHCX0SMgnYfiG440DJxWhwqWuEKFMAEEY30RpL1L0JZ4b2mgSq21tlIskv/PaU48A4ioBRIwT5ReRQRrSOt5qLM7KrOlpC59UEpknI/JYLMYiecK5q5EFzk2Nq+UR/qqrtTZcFH2SKWA7dD1Tknnl3GVc9/7irNmSXZhYFhTauFpAcAVX4xiUeZi2GbBLLoJymzh0h3MjWKR/5/bqdFNg5WW79DQ3XtAeGGD2IAdSasAC7RrblTNPCJkdYRHzqE+JimhyvwORma7ODyRF+sZj0TO7Gooi27sdnQLpcRzDU3QyFOwUxLsbBTnq0tOx7KLPryCgzTWDkKibAtst87/hquM/MfTpU/sHRrVLFfhiXTqG4WoG5qacDqSNcuXSrx/gxmmudAjFYFIAb3il6+d9IQdgAsK7f1wL08c2NVDDgjV5WcDQazKGTYenxEFLeOTbLQ8PXaP5DvpIqGrkcaynILRQ6VfwxhpIhdVipXf5tubEkILw2O5F1mDoMVfnVjwwE8XmuI/jCXAb53ZrrV7oXjE52SnHHcMQOEKt0ZgtXKCixeAQmXMJTUNWgB8WaQa7DZPchmIqqdYcdb9j6WGeo31T5OfJ1xrm7KYSfnTpJV2hypAL60hedSzE2zGIYH/5AmaVZxkxN/SdgFiqLQDx5yclH3ckzz39SMnxjlnHcDLYaf2kPoGNurjgvSVmlWW4QMQ3SrQJ0K10wyGWgU+Z+FJWml2D0OfCZpVDPpnYXAUNfE7S/m7oM3tPqLpBWbpRBIYzkbbgKrh1jwf2yb37qrFqC53Gm3FoYLof/Nres6wgSXg+l6vV3ZeJCqS/J0bMqL5l7PlCZLRyOIK2+lzgkjMxn2XnkPYHapoE5Q2HjiQQnrEC6aVqCWaVZ4sd9oFgs/9Ig5leEg7PPvsmIGR0jOkTDQMEAbA+Nj77kgiH/WnMzVEWAaw2joP5ofBNcD6f9L+xIo8ugkQ2n9S30c+I5ZjS//gliXM6XKNCy10g2HdHplFzaIZQyoY/5czfC0f9P6e0Emtdomc7FotfnSgYGxO1E/7gY8umAJt0d8osQ8ycnJqwTWILunR7dDKYRVh+7kLUqwY9CJUgn/q5TGpMiQs8w6IB5TEkxc99Nq1WIE+jm/+/tihnOhC/sBthdt+jjyMJvIx1AyPPJBI3Btdk8RCYEPoqnhmaR638jaJpqegXdSpxKE60qxWAi2KHIfTB+6CKE3pXP6n+TJcNXxogPEr0eoEaLweumr/wQLcrtT9bwhwRID48GpZrxYVuW+tNXZmlDQQFkK+0CwzH7GHkL6bFyfwI15PfxLtEXLDE0elbwIGLx9E2yGBxO0y9pIYWJAlTULs5BZ0aVgkKw5qdLNAkRvKSn/dmxDkG+tEO8fJVdCnP0WgXTxMEua98u71d/oGLs+92mBmU1rxEPSljPBjOZHjlcFBeikn0zVQhSoxkQxvOXXhbnP69l63zfSVfvtv270c2TEi9gmxfBef6qbGfm0eWhkL4E/iGlY0Nn6hYgQWna28Nfz5//mz0s9rBQETBsGA0/DdO1MbbwF2PbOlfMxoR/6yecI5aHJPdH6Ypz6g8WXtF3tOGwVuABK854SOyn1CU4IwAlZA7p9Z5qIbUWnp0kj5UqiNNyB9muI4IA1tiyI8NJTJ8JOXnfIfq7Kp0Gz9IWzEzxWxBClpf5d/hIbq+ezgJdvpbnQLvoU2RR6rBocDR8f7tR1LqSBWmUfFqTx2girmz1oMJ3t81jSPfOg0huejtP1aZM0gtuypIBGEg3igloLl6Qlhk0YUwIMVAS52okb1nSnJ6vtGIK1fKrOdXaEHzIqpD/omdXG0mm3WLGZ6I1xAGmWpki9qtDDa29HBwnX5AqM2W72XqJrWTE4WyDXUmOed0QLZ7hj2wL3P0zip1vxbF4Dx3o6gZzuIhgIwCpnV2bOmqu7La1l27xd6mtbGlIMQUJG9L8b0GMwEAXdkIOEcEdV9G33qR62vAEEzxzUvdut0znJvyJt9qhMcbEdHu89+IG672p0ferEWqwkJWX6Y4L3fx7b/6cbdL6m7EjPuJvhg5dbQIKywlVwUSqd8Lj907lCdw6BAjNB3FLsD5Mx5gMDgYml+pqKMFr9yYhjkLZ97tLoWtAfssnsruDsou0+I7oNLJeAuRsSRb7aTAhCKgkjCjeSTTySvheQJ+yNGYsu6LEQ8vLblx/04zSO5B77osAdFHqR7C09pXxeBq7vF9xn31xJEHKXF9Lw7Jhp32lDqh4hFYZSIowmvOsd20XPo/mrS5mnpAEs10wLk+efQ6tESQBF+x5hsZ7LgmTtFZOcEBMrqWWZQIsUolQ41nQ4cQPhf8D2LUASfnm8xRr8/2C3j4I7Q55Zu4ZXFh0g7VGK6CmUvm3TFuFx2tlodjhfbmDjUzlhfqUu74Z90wbxBV2S6+acokIX2sJ+pSwnjOBQUkjMxZg43UyB10MgzfwKuKCUIjd62WDduj65QsX385fzIxcT6qzK99WM6J4QtSWMN0tEZa4UJAdd/D/zLSfF5r6CZZyZIiZXmA4JkJJ82lF7KcEKZ1i6SGtpKfx8jSWc96a9QTM+SBQQ8FBX4YPFsYYmEoJOEp2Hxa53tuPkfmaCEJ68eHTl6zbzTdtO3ccEN9A2UKhBd5XMV6xltCj43XHtENEL3LIy1ep/K1UPRPctnknk2zUOBB3rnwHq57MhzY/I0DdLQG9Ya7eZTRY8qnguLOPQxNwFll0s7DnVBrlhm9c8+mXRa3KQykvofSo67PMNivmuFzRsIUnHxBJ3750bauu3z0UfOsoSgATfufsTuuZbUHkKl4csg/d/1ZdJNq2V6vI6uj/hpMxN8oVJI4+WuepGBUDax+5gQ9zK/cUH9U1sre77rPD5LWGWuxxWuLgeX7eSdDFc5baOUVTZnBIUGiivjayVnbHaQlNKAUbDk8IREith5VthB3YjTGupoEhMLJ2WvjwAAw8mj7pXR1NSf/F4VmIejLu7f0Ern9DVidy9yz8PWaNuhRCI2+Y5U1VnIKY/bbTvuyKsjhhJpr+WiHnZc4PxiavHbszJoj1UT97/Cj62em9iu+F/FTIY5rOtIREWF3bfypoXZdFYv+2BTsi2ubIOgH9tlscMtES+IxRTZ05iw0LIuIZIxgknWIfig91Bd0TigydThCc+oNG+xmOMYpzRSGXw6LvxDJrbgyEE145nReSc6b83y6Y4jZh0w1kPQGhT/L+bETtgd4BEmeirLmkUlPacRD6T3Y67gKzf4SoOmx0KyN3rEwLz6C48jzKIHebZ5GTWEAHBCJEimFeNCWx4brHngIlH2RK+d5qnke11yG/C2kxt8Y7w05ymIIxoncgHeVdQVmplndrADzLExpR9lbfGTzKAOFKLKQrxpdIoVj+sYMGPRwiwaxB6eGv3Dy6Vy3hpvtDM1TY0NkGM7DcdaLx1QhIKX9KkA/lCvD7CsLQLF/ka+xkoEokpnqcfL+wnPEJNtRSCN/g93QwgT5uuMWSYM2hOi7hr3KJRqD8GP8LbNdZHaj1TyWEjzwJ8MoMKg9HG0jaOMOHcRuQhg3wxv7CmExHOPW2yEiTvfcc9U+CwnMcmiN6BUdRJ2jallpZBL1abb8H01XIIVdEz33lcqWmI5WqbEfKYpbTHxME9Glgg+k9IVNGoK5beE5labxl2XVSJgGbuTboBPlpBbXn4FPoSs/F7hpqbbOquhGbaq3UIs8ubF5pFigM5jajrXD4uVN0rsRA6Exaij7jqQMKLFzSWjVwqnwbBvpVLPVd092uJjFvVDHFFiUL2MK6GCLlws4c2Itxnp5YNMQcJwgdOluY2wYHvlMmm34TN3zBu7UQ5nU7qywWwWYW7rAWB2ruXbrTqmZy/xZ1SiaH0rjaty0NLBO4PfGdJ+WjoTKoK89nkyJCm/9Kb7mtwLw/oxxYHJPXyhSyBBPQUvu9cTwqy8bnI2yuw+5tcdssqEk7mZRaJu/14HTlM6rYRMlXbsiGF/cAy8/plZl8JJfdbIR71EDzJRhfxA1/LAI/ESfdAPpjmkCNQ/GjJ9dPgakfv8DrWJ56F+2iRcYy6T5cjoi0k9xslLwIAQ4dXO3PWf+iUKDwL+TyrVdySHgQP5hy64McvJc6NHjEarf6OvBixdBJDMJYyNINjUExaQ0nk0JqypP5KL2iObMtjhwkOm56kHKJTpmUd0N6jyxgt6vM3TFBI7yAimLj6wli0YpHz/4SCcYkaXhtJwQLcJNCViWw/YqTt17G+l9eHgBXLe7OqEcocogYTXcOuJAV4BylM7m4O2DVbxEncDJ43TxjaTODnw9QNMZ3Lw0nmJAY8dcDRgJBhR8jlbmMfaF573+kvBlWaMH29FGKdocGE3tVhHYQf81JqnBjVGEy7cUJk4TdILjLkyJRGOkhHhmkE0TUbaFWJuLsDcDt9F10ddGvqjy/yUqMBEjZweygt4fITpqUySaAjf8Z2wUIUC8S7tXbjhWJRpZ6e9zHXSq20VAaapx74xr/QDhLJWJwjIt27dRIfCi8khze0Xo3Iu6/I6PBPFi5nzdMkMYWT2SZXx2t2RZkantknBIE8ePo7q3X8SnqMuv+CNZXubPK+/fxwX85u1srx7rH1vEHhx/IS4/RvZNTKgrYgLJODLw+zEcbXzy+jlJdBShps=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
