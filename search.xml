<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十九）：项目部署上线</title>
      <link href="/2018/09/06/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/"/>
      <url>/2018/09/06/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="jdk的安装"><a href="#jdk的安装" class="headerlink" title="jdk的安装"></a>jdk的安装</h2><p>1、使用<code>rpm -qa|grep jdk</code>命令查看是否存在jdk。</p><p>2、新建develpoer和setup文件夹，具体是/develpoer/setup；</p><p>3、进入到setup文件夹，执行<code>sudo wget https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.rpm?AuthParam=1553169636_b11b9e5be288ddf0358ea33e6f97682e</code>，后面的https则是jdk的rpm地址，具体的点击这里<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk8</a>；注意后面的AuthParam，这个需要我们F12调出开发者模式，然后再次点击下载按钮，在headers里面可以直接寻找。然后对下载完的jdk进行重命名，命令如下：<code>sudo mv jdk-8u201-linux-x64.rpm?AuthParam=1553169636_b11b9e5be288ddf0358ea33e6f97682e jdk-8u201-linux-x64.rpm</code>这样名字就发生了改变，变成<code>jdk-8u201-linux-x64.rpm</code>。<br>4、如果觉得下载速度很慢，你可以使用<code>sudo wget http://learning.happymmall.com/jdk/jdk-7u80-linux-x64.rpm</code>这样我就就不需要进行修改名字了。<br>5、接下来使用下面的命令赋予用户权限：<code>sudo chmod +x jdk-7u80-linux-x64.rpm</code>，或者其他的权限，如777权限。</p><p>6、接下来使用下面的命令进行安装jdk：<code>sudo rpm -ivh jdk-7u80-linux-x64.rpm</code>，这样改jdk就直接被安装在setup这个文件夹里面了。如果出现下面的问题，请接着看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu RPM should not be used directly install RPM packages, use Alien instead!</span><br></pre></td></tr></table></figure></p><p>方法1：</p><ol><li><p>先安装 alien 和 fakeroot 这两个工具，其中前者可以将 rpm 包转换为 deb 包。安装命令为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install alien fakeroot</span><br></pre></td></tr></table></figure></li><li><p>将需要安装的 rpm 包下载备用，假设为 package.rpm</p></li><li><p>使用 alien 将 rpm 包转换为 deb 包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fakeroot alien package.rpm</span><br></pre></td></tr></table></figure></li><li><p>一旦转换成功，我们可以即刻使用以下指令来安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i package.deb</span><br></pre></td></tr></table></figure></li></ol><p>方法:2：<br>1.输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install rpm alien</span><br></pre></td></tr></table></figure></p><p>2..输入以下代码：（过程有点慢，等待一下）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alien -d package.rpm</span><br></pre></td></tr></table></figure></p><p>3..输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i package.deb</span><br></pre></td></tr></table></figure></p><p>详细的点击这里<a href="https://blog.csdn.net/suleil1/article/details/49471723" target="_blank" rel="noopener">bug解决方法</a><br>如下图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ls</span><br><span class="line"> jdk1.8_1.8.0202-1_amd64.deb   jdk-8u202-linux-x64.rpm  &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ sudo dpkg -i jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">Selecting previously unselected package jdk1.8.</span><br><span class="line">(Reading database ... 86516 files and directories currently installed.)</span><br><span class="line">Preparing to unpack jdk1.8_1.8.0202-1_amd64.deb ...</span><br><span class="line">Unpacking jdk1.8 (1.8.0202-1) ...</span><br><span class="line">Setting up jdk1.8 (1.8.0202-1) ...</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$</span><br></pre></td></tr></table></figure></p><p>之后就会将我们的jdk默认安装在/usr/java/jdk1.8.0_202-amd64下面，我们使用ls或者ll就能查看信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64$ ll</span><br><span class="line">total 26016</span><br><span class="line">drwxr-xr-x 8 root root     4096 Mar 21 22:24 ./</span><br><span class="line">drwxr-xr-x 4 root root     4096 Mar 21 22:23 ../</span><br><span class="line">drwxr-xr-x 2 root root     4096 Mar 21 22:24 bin/</span><br><span class="line">-rw-r--r-- 1 root root     3244 Dec 16 04:50 COPYRIGHT</span><br><span class="line">drwxr-xr-x 3 root root     4096 Mar 21 22:24 include/</span><br><span class="line">drwxr-xr-x 4 root root     4096 Mar 21 22:23 .java/</span><br><span class="line">-rw-r--r-- 1 root root  5211154 Dec 12 18:20 javafx-src.zip</span><br><span class="line">drwxr-xr-x 5 root root     4096 Mar 21 22:24 jre/</span><br><span class="line">drwxr-xr-x 5 root root     4096 Mar 21 22:24 lib/</span><br><span class="line">-rw-r--r-- 1 root root       40 Dec 16 04:50 LICENSE</span><br><span class="line">drwxr-xr-x 4 root root     4096 Mar 21 22:24 man/</span><br><span class="line">-rw-r--r-- 1 root root      159 Dec 16 04:50 README.html</span><br><span class="line">-rw-r--r-- 1 root root      424 Dec 16 04:50 release</span><br><span class="line">-rw-r--r-- 1 root root 21105955 Dec 16 04:50 src.zip</span><br><span class="line">-rw-r--r-- 1 root root   112724 Dec 12 18:20 THIRDPARTYLICENSEREADME-JAVAFX.txt</span><br><span class="line">-rw-r--r-- 1 root root   153824 Dec 16 04:50 THIRDPARTYLICENSEREADME.txt</span><br><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64$</span><br></pre></td></tr></table></figure></p><p>7、接下来就是环境变量的设置了，使用下面的命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>在文件的最底部添加下面的代码：（这里面把其他环境也添加了，你可以自己有选择的粘贴）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_202-amd64</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export MAVEN_HOME=/home/ubuntu/java/developer/apache-maven-3.0.5</span><br><span class="line">export NODE_HOME=/usr/local/node-v4.4.7-linux-x64</span><br><span class="line">export RUBY_HOME=/usr/local/ruby</span><br><span class="line">export CATALINA_HOME=/home/ubuntu/java/developer/apache-tomcat-7.0.73</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin:$MAVEN_HOME/bin:$NODE_HOME/bin:/usr/local/bin:$RUBY_HOME/bin</span><br><span class="line"></span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure></p><p>也可以点击这里<a href="http://learning.happymmall.com/env/" target="_blank" rel="noopener">profile</a>，选择profile文件，然后打开即可。</p><p>8、接下来我们激活刚才的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source  /etc/profile</span><br></pre></td></tr></table></figure></p><p>9、使用<code>java -version</code>查看是否安装成功，出现java的版本就说明成功了。如果出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error occurred during initialization of VM</span><br><span class="line">java/lang/NoClassDefFoundError: java/lang/Object</span><br></pre></td></tr></table></figure></p><p>，请参考这篇文章：<a href="https://blog.csdn.net/hanxue_wuhen/article/details/71312947" target="_blank" rel="noopener">解决办法</a>或者这篇文章：<a href="https://blog.51cto.com/53cto/1702607" target="_blank" rel="noopener">办法2</a><br>，当然我这里也直接附上解决办法。因为你的<code>/usr/java/jdk1.8.0_202-amd64/jre/lib</code><br>下面缺少<code>rt.jar</code>；还有<code>/usr/java/jdk1.8.0_202-amd64/lib</code>下面缺少<code>tools.jar</code>。那是因为你编译过度，将jar文件编译为<code>tools.pack</code>和<code>rt.pack</code>，这里我们直接使用反编译工具unpack200即可。分两步进行，首先执行反编译，然后移动文件即可。(当然，你完全可以在对应的目录下反编译，这样就不需要移动文件了。)<br>1、反编译，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unpack200  /usr/java/jdk1.8.0_202-amd64/lib/tools.pack  tools.jar</span><br></pre></td></tr></table></figure></p><p>这样我们的tools.jar就被编译在当前文件夹了。<br>同样执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unpack200  /usr/java/jdk1.8.0_202-amd64/lib/rt.pack  rt.jar</span><br></pre></td></tr></table></figure></p><p>这样我们的rt.jar就被编译在当前文件夹了。<br>2、移动文件, tools.jar就是在/usr/java/jdk1.8.0_202-amd64/lib文件下面，你使用这样的命令就可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/java/jdk1.8.0_202-amd64/lib/tools.jar /usr/java/jdk1.8.0_202-amd64/lib</span><br></pre></td></tr></table></figure></p><p>而rt.jar则是在/usr/java/jdk1.8.0_202-amd64/jre/lib，记得不要搞错！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/java/jdk1.8.0_202-amd64/lib/rt.jar /usr/java/jdk1.8.0_202-amd64/jre/lib</span><br></pre></td></tr></table></figure></p><p>接下来重复第9步，查看是否成功！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64/lib$ java -version</span><br><span class="line">java version &quot;1.8.0_202&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br><span class="line">ubuntu@VM-0-4-ubuntu:/usr/java/jdk1.8.0_202-amd64/lib$</span><br></pre></td></tr></table></figure></p><p>如果有多个版本的java，这个java -version是根据你的环境设置来体现的。至此我们java的安装就结束了。</p><h2 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h2><p>进入developer文件夹，里面输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://learning.happymmall.com/tomcat/apache-tomcat-7.0.73.tar.gz</span><br></pre></td></tr></table></figure></p><p>待下载完毕以后，我们就开始解压它，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf apache-tomcat-7.0.73.tar.gz</span><br></pre></td></tr></table></figure></p><p>查看一下，发现没问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer$ ll</span><br><span class="line">total 8752</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu    4096 Mar 22 10:25 ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu    4096 Mar 21 18:20 ../</span><br><span class="line">drwxr-xr-x 9 root   root      4096 Mar 22 10:25 apache-tomcat-7.0.73/</span><br><span class="line">-rw-r--r-- 1 root   root   8938514 Apr 17  2017 apache-tomcat-7.0.73.tar.gz</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu    4096 Mar 21 22:22 setup/</span><br></pre></td></tr></table></figure></p><p>接下来，我们可以把<code>apache-tomcat-7.0.73.tar.gz</code>移动到setup文件夹下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-tomcat-7.0.73.tar.gz setup/</span><br></pre></td></tr></table></figure></p><p>发现setup里面是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x 2 ubuntu ubuntu      4096 Mar 22 10:28  ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu      4096 Mar 22 10:28  ../</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br><span class="line">-rw-r--r-- 1 root   root       85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br></pre></td></tr></table></figure></p><p>接下来，我们退回到上一层，也就是developer文件夹，然后进入到apache-tomcat-7.0.73这个文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer$ cd apache-tomcat-7.0.73</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73$ ll</span><br><span class="line">total 124</span><br><span class="line">drwxr-xr-x 9 root   root    4096 Mar 22 10:25 ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu  4096 Mar 22 10:28 ../</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Mar 22 10:25 bin/</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Nov  8  2016 conf/</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Mar 22 10:25 lib/</span><br><span class="line">-rw-r--r-- 1 root   root   56846 Nov  8  2016 LICENSE</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Nov  8  2016 logs/</span><br><span class="line">-rw-r--r-- 1 root   root    1239 Nov  8  2016 NOTICE</span><br><span class="line">-rw-r--r-- 1 root   root    8965 Nov  8  2016 RELEASE-NOTES</span><br><span class="line">-rw-r--r-- 1 root   root   16195 Nov  8  2016 RUNNING.txt</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Mar 22 10:25 temp/</span><br><span class="line">drwxr-xr-x 7 root   root    4096 Nov  8  2016 webapps/</span><br><span class="line">drwxr-xr-x 2 root   root    4096 Nov  8  2016 work/</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73$</span><br></pre></td></tr></table></figure></p><p>接下来编辑conf/server.xml文件，使用的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim conf/server.xml</span><br></pre></td></tr></table></figure></p><p>我们编辑它的目的就是修改utf的字符集，我们直接在当前模式（默认情况），输入/8080，然后回车就能找到这个connection（下面的截图是我们在widows下面的配置。）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\tomcat\apache-tomcat-8.5.34\conf\server.xml</span><br></pre></td></tr></table></figure></p><p>{我的路径是这里，你打开它，找到第69-71行代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-727121717de4b380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>添加这一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URIEncoding=&quot;UTF-8&quot;</span><br></pre></td></tr></table></figure></p><p>注意：截图中之所以有是因为我已经配置完了，之前是没有的。}</p><p>你添加这个以后进行保存退出即可。<br>接下来就是开始运行，进入到bin目录，具体的可以参看这些：<br>启动使用：在配置环境的bin目录下使用startup.bat命令；<br>关闭使用：在配置环境的bin目录下使用shutdown.bat命令。<br>这个的配置环境，我们在前面进行了配置，也就是这些：<br>就是<code>${CATALINA_HOME}/bin/startup.bat</code>或者是<code>${CATALINA_HOME}/bin/shutdown.bat</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73/bin$ sudo ./startup.sh</span><br><span class="line">Using CATALINA_BASE:   /home/ubuntu/java/developer/apache-tomcat-7.0.73</span><br><span class="line">Using CATALINA_HOME:   /home/ubuntu/java/developer/apache-tomcat-7.0.73</span><br><span class="line">Using CATALINA_TMPDIR: /home/ubuntu/java/developer/apache-tomcat-7.0.73/temp</span><br><span class="line">Using JRE_HOME:        /usr</span><br><span class="line">Using CLASSPATH:       /home/ubuntu/java/developer/apache-tomcat-7.0.73/bin/bootstrap.jar:/home/ubuntu/java/developer/apache-tomcat-7.0.73/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-tomcat-7.0.73/bin$</span><br></pre></td></tr></table></figure></p><p>出现这个Tomcat started.就说明配置成功，且启动成功了。此时，由于我们的防火墙还没有配置，你用公网IP的8080端口就能访问到我们的tomcat首页了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-acb99d9892a64b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="maven的安装"><a href="#maven的安装" class="headerlink" title="maven的安装"></a>maven的安装</h2><p>我们回到developer文件夹，在里面进行相关操作，在里面输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://learning.happymmall.com/maven/apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>待下载完毕以后，我们就开始解压它，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf apache-maven-3.0.5-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>查看一下，发现没问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer$ ll</span><br><span class="line">total 5052</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu    4096 Mar 22 10:56 ./</span><br><span class="line">drwxrwxr-x 4 ubuntu ubuntu    4096 Mar 21 18:20 ../</span><br><span class="line">drwxr-xr-x 6 root   root      4096 Mar 22 10:56 apache-maven-3.0.5/</span><br><span class="line">-rw-r--r-- 1 root   root   5144659 Apr 17  2017 apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">drwxr-xr-x 9 root   root      4096 Mar 22 10:25 apache-tomcat-7.0.73/</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu    4096 Mar 22 10:28 setup/</span><br></pre></td></tr></table></figure></p><p>接下来，我们可以把<code>apache-maven-3.0.5-bin.tar.gz</code>移动到setup文件夹下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv apache-maven-3.0.5-bin.tar.gz setup/</span><br></pre></td></tr></table></figure></p><p>发现setup里面是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ll</span><br><span class="line">total 341356</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu      4096 Mar 22 10:57  ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu      4096 Mar 22 10:57  ../</span><br><span class="line">-rw-r--r-- 1 root   root     5144659 Apr 17  2017  apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br></pre></td></tr></table></figure></p><p>接下来，我们直接输入<code>mvn -version</code>，看是不是成功出现版本号了，如果没有，请检查环境变量是否设置有误:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/apache-maven-3.0.5$ mvn -version</span><br><span class="line">Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 21:51:28+0800)</span><br><span class="line">Maven home: /home/ubuntu/java/developer/apache-maven-3.0.5</span><br><span class="line">Java version: 1.8.0_202, vendor: Oracle Corporation</span><br><span class="line">Java home: /usr/java/jdk1.8.0_202-amd64/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;4.15.0-29-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure></p><h2 id="vsftpd的安装"><a href="#vsftpd的安装" class="headerlink" title="vsftpd的安装"></a>vsftpd的安装</h2><p>同样我们退回到developer文件夹，我们使用下面的命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure></p><p>如果你使用centOs，则使用<code>sudo yum-y install vsftpd</code>。现在我们需要创建一个文件夹，退回到developer文件夹的上一层，因为我们创建的这个product文件和这个developer的是同级别的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java$ mkdir product</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java$ cd product</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ ll</span><br><span class="line">total 8</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu 4096 Mar 22 11:13 ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu 4096 Mar 22 11:13 ../</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$</span><br></pre></td></tr></table></figure></p><p>接着进入到product文件夹，在里面新建一个ftpfile，然后赋予其可以登录ftpserver，但是没有登录其他的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ mkdir ftpfile</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ sudo useradd ftpuser -d /product/ftpfile -s /sbin/nologin</span><br></pre></td></tr></table></figure></p><p>紧接着赋予其用户组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ sudo chown -R ftpuser.ftpuser ./ftpfile/</span><br></pre></td></tr></table></figure></p><p>查看一下，发现多了一个ftpfile文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ ll</span><br><span class="line">total 12</span><br><span class="line">drwxrwxr-x 3 ubuntu  ubuntu  4096 Mar 22 11:15 ./</span><br><span class="line">drwxrwxr-x 5 ubuntu  ubuntu  4096 Mar 22 11:13 ../</span><br><span class="line">drwxrwxr-x 2 ftpuser ftpuser 4096 Mar 22 11:15 ftpfile/</span><br></pre></td></tr></table></figure></p><p>接下来我们重置ftpuser的登录密码：（我的密码是admin123）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$ sudo passwd ftpuser</span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/product$</span><br></pre></td></tr></table></figure></p><p>接下来进入到/etc/vsftpd文件，如果没有改文件夹，说明那些都是直接在/etc下面，不安全，我们在/etc新建一个vsftpd的文件夹，依次执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/ftpusers /etc/vsftpd</span><br><span class="line">sudo mv /etc/vsftpd.conf /etc/vsftpd</span><br></pre></td></tr></table></figure></p><p>紧接着，进入vsftpd文件夹，在里面执行<code>sudo vim chroot_list</code>，在里面添加<code>ftpuser</code>即可，然后保存退出即可。</p><p>下面修改其安全策略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/selinux/config</span><br></pre></td></tr></table></figure></p><p>确保里面的代码是这样的，没有就进行添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br><span class="line"></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure></p><p>当然你可以使用下面的命令，这个结果和刚才修改config的效果是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setsebool -P ftp_home_dir 1</span><br></pre></td></tr></table></figure></p><p>接下来我们备份一下这个<code>vsftpd.conf</code>，并将线上的进行复制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mv vsftpd.conf vsftpd.conf.bak</span><br><span class="line"></span><br><span class="line">sudo wget http://learning.happymmall.com/vsftpdconfig/vsftpd.conf</span><br></pre></td></tr></table></figure></p><p>查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/etc/vsftpd$ ll</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x   2 root root 4096 Mar 22 12:01 ./</span><br><span class="line">drwxr-xr-x 100 root root 4096 Mar 22 11:34 ../</span><br><span class="line">-rw-r--r--   1 root root    8 Mar 22 11:38 chroot_list</span><br><span class="line">-rw-r--r--   1 root root  132 Mar 22 11:30 ftpusers</span><br><span class="line">-rw-r--r--   1 root root 4786 Apr 17  2017 vsftpd.conf</span><br><span class="line">-rw-r--r--   1 root root 5850 Mar 22 11:32 vsftpd.conf.bak</span><br></pre></td></tr></table></figure></p><p>这样vsftpd我们就安装好了。</p><h2 id="nginx的安装"><a href="#nginx的安装" class="headerlink" title="nginx的安装"></a>nginx的安装</h2><p>因为nginx需要编译，因此我们需要进入到setup这个文件夹，在里面执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget http://learning.happymmall.com/nginx/linux-nginx-1.10.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>nginx的安装需要依赖，因此我们先执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential libtool libpcre3  libpcre3-dev zlib1g-dev openssl</span><br></pre></td></tr></table></figure></p><p>查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ll</span><br><span class="line">total 342252</span><br><span class="line">drwxrwxr-x 2 ubuntu ubuntu      4096 Mar 22 12:05  ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu      4096 Mar 22 10:57  ../</span><br><span class="line">-rw-r--r-- 1 root   root     5144659 Apr 17  2017  apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br><span class="line">-rw-r--r-- 1 root   root       85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br><span class="line">-rw-r--r-- 1 root   root      910812 Apr 17  2017  linux-nginx-1.10.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>接下来进行解压安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf linux-nginx-1.10.2.tar.gz</span><br></pre></td></tr></table></figure></p><p>查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup$ ll</span><br><span class="line">total 342256</span><br><span class="line">drwxrwxr-x 3 ubuntu ubuntu      4096 Mar 22 12:16  ./</span><br><span class="line">drwxrwxr-x 5 ubuntu ubuntu      4096 Mar 22 10:57  ../</span><br><span class="line">-rw-r--r-- 1 root   root     5144659 Apr 17  2017  apache-maven-3.0.5-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root   root     8938514 Apr 17  2017  apache-tomcat-7.0.73.tar.gz</span><br><span class="line">-rw-r--r-- 1 ubuntu ubuntu 156926672 Mar 21 22:22  jdk1.8_1.8.0202-1_amd64.deb</span><br><span class="line">-rw-rw-r-- 1 ubuntu ubuntu 178418154 Mar 21 22:12  jdk-8u202-linux-x64.rpm</span><br><span class="line">-rw-r--r-- 1 root   root       85416 Mar 21 22:20 &apos;jdk-8u202-linux-x64.rpm?AuthParam=1553176185_71b2a824d4d35c4a61c57ccd5f476606&apos;</span><br><span class="line">-rw-r--r-- 1 root   root      910812 Apr 17  2017  linux-nginx-1.10.2.tar.gz</span><br><span class="line">drwxr-xr-x 8   1001   1001      4096 Oct 18  2016  nginx-1.10.2/</span><br></pre></td></tr></table></figure></p><p>进入解压好的nginx-1.10.2目录，查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$ ll</span><br><span class="line">total 700</span><br><span class="line">drwxr-xr-x 8   1001   1001   4096 Oct 18  2016 ./</span><br><span class="line">drwxrwxr-x 3 ubuntu ubuntu   4096 Mar 22 12:16 ../</span><br><span class="line">drwxr-xr-x 6   1001   1001   4096 Mar 22 12:16 auto/</span><br><span class="line">-rw-r--r-- 1   1001   1001 264254 Oct 18  2016 CHANGES</span><br><span class="line">-rw-r--r-- 1   1001   1001 402997 Oct 18  2016 CHANGES.ru</span><br><span class="line">drwxr-xr-x 2   1001   1001   4096 Mar 22 12:16 conf/</span><br><span class="line">-rwxr-xr-x 1   1001   1001   2481 Oct 18  2016 configure*</span><br><span class="line">drwxr-xr-x 4   1001   1001   4096 Mar 22 12:16 contrib/</span><br><span class="line">drwxr-xr-x 2   1001   1001   4096 Mar 22 12:16 html/</span><br><span class="line">-rw-r--r-- 1   1001   1001   1397 Oct 18  2016 LICENSE</span><br><span class="line">drwxr-xr-x 2   1001   1001   4096 Mar 22 12:16 man/</span><br><span class="line">-rw-r--r-- 1   1001   1001     49 Oct 18  2016 README</span><br><span class="line">drwxr-xr-x 9   1001   1001   4096 Mar 22 12:16 src/</span><br><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$</span><br></pre></td></tr></table></figure></p><p>接下来执行下面的命令：(默认编译为当前路径)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./configure</span><br></pre></td></tr></table></figure></p><p>紧接着执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure></p><p>如果运行出现下面的情况，请不要慌：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make[1]: *** [objs/src/core/ngx_murmurhash.o] Error 1</span><br><span class="line">make[1]: Leaving directory &apos;/home/ubuntu/java/developer/setup/nginx-1.10.2&apos;</span><br><span class="line">Makefile:8: recipe for target &apos;build&apos; failed</span><br><span class="line">make: *** [build] Error 2</span><br></pre></td></tr></table></figure></p><p>找到我们<code>nginx-1.10.2/objs/Makefile</code>文件，将里面的-Werror删除掉即可：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-888fadaed2128fe8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>（注意只是删除-Werror，改行其余信息不能动），之后重新运行刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure></p><p>如果最后出现下面的说明，就说明可以了，我们继续往后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make[1]: Leaving directory &apos;/home/ubuntu/java/developer/setup/nginx-1.10.2&apos;</span><br></pre></td></tr></table></figure></p><p>继续执行安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>后面的防火墙配置，我们就专门会说的。接下来配置其详细信息。<br>查看一下它所在的目录：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/java/developer/setup/nginx-1.10.2$ whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/local/nginx /usr/share/nginx /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure></p><p>我们进入到/usr/local/nginx下面，然后进入到conf里面，接着编辑主文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim nginx.conf</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-816e7d0cabc6a3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们往下拉，我们https server的位置添加下面一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include vhost/*.conf;</span><br></pre></td></tr></table></figure></p><p>（截图是我已经配置好的，目的是让大家对此有一个更清醒的认识。）</p><p>紧接着在nginx.conf文件的同级目录下面新建vhost文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir vhost</span><br></pre></td></tr></table></figure></p><p>进入到该文件夹，添加我们反向代理的文件。</p><p>当然你也可以参考这篇文章进行安装：<a href="https://www.cnblogs.com/EasonJim/p/7806879.html" target="_blank" rel="noopener">ubuntu安装nginx</a></p><h2 id="mysql的安装"><a href="#mysql的安装" class="headerlink" title="mysql的安装"></a>mysql的安装</h2><p>首先查看是否安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -qa| grep mysql-server</span><br></pre></td></tr></table></figure></p><p>没有我们就开始安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p><p>这个我们就直接安装在java这个文件夹里面了。<br>然后修改MySQL的字符集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>在mysqld部分添加下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p><p>然后是mysql的启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sysv-rc-conf mysqld on</span><br><span class="line">sudo sysv-rc-conf --list mysqld</span><br></pre></td></tr></table></figure></p><p>注意一下，我们要的是2-5是开的，0和6是关闭的即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:/etc/apt$ sudo sysv-rc-conf --list mysqld</span><br><span class="line">mysqld       2:on       3:on    4:on    5:on</span><br><span class="line">ubuntu@VM-0-4-ubuntu:/etc/apt$</span><br></pre></td></tr></table></figure></p><p>关于MySQL的防火墙的配置，我们在后面也会说明的。<br>接下来我们开始启动mysql，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>如果提示没有sysv-rc-conf，请参看这篇文章：<a href="https://blog.csdn.net/sw1009374593/article/details/84929494" target="_blank" rel="noopener">ubuntu 18 当使用命令sudo apt-get install sysv-rc-conf安装不上时，提示“ E: 无法定位软件包问题</a>.<br>如果重启出现<code>Can &#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock &#39;(2) &quot;;</code>的情况，请注意，我们应该查看这篇文章：<a href="https://blog.csdn.net/hjf161105/article/details/78850658" target="_blank" rel="noopener">解决办法</a>。或者这篇文章：<a href="https://blog.csdn.net/u012150360/article/details/84546192" target="_blank" rel="noopener">办法2</a><br>开始创建数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database `secondhandmarket` default character set utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></p><p>插入新用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into mysql.user(host,user,authentication_string)values(&quot;127.0.0.1&quot;,&quot;envy&quot;,authentication_string(&quot;envy&quot;));</span><br></pre></td></tr></table></figure></p><p>创建数据表，我们首先查看sql的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/java/squirrel/secondhandmarket.sql</span><br></pre></td></tr></table></figure></p><p>然后进入mysql，我们首先使用<code>use secondhandmarket;</code>，接着执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /home/ubuntu/java/squirrel/secondhandmarket.sql</span><br></pre></td></tr></table></figure></p><p>接着查看一下表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">select * from admin\G;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十八）：前台订单获取以及后台管理员订单管理功能开发</title>
      <link href="/2018/09/05/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E8%AE%A2%E5%8D%95%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%8A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/09/05/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E8%AE%A2%E5%8D%95%E8%8E%B7%E5%8F%96%E4%BB%A5%E5%8F%8A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%91%98%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成前台获取订单详情，用户个人中心查看订单以及后台管理员订单管理等功能的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="前台获取订单详情"><a href="#前台获取订单详情" class="headerlink" title="前台获取订单详情"></a>前台获取订单详情</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     * 前台获取订单详情</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;detail.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse detail(HttpSession session,Long orderNo)&#123;</span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line">        //实现我们前台获取订单详情的逻辑</span><br><span class="line">        return iOrderService.getOrderDetail(user.getId(),orderNo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;OrderVo&gt; getOrderDetail(Integer userId, Long orderNo);  //前台获取订单详情</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     * 前台获取订单详情</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;OrderVo&gt; getOrderDetail(Integer userId,Long orderNo)&#123;</span><br><span class="line">        Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">        if(order !=null)&#123;</span><br><span class="line">            List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">            OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">            return ServerResponse.createBySuccess(orderVo);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;没有找到该订单&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们前台获取订单详情功能开发就完成了，接下来我们来开发用户个人中心查看订单这个功能。</p><h2 id="用户个人中心查看订单"><a href="#用户个人中心查看订单" class="headerlink" title="用户个人中心查看订单"></a>用户个人中心查看订单</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 用户个人中心查看订单（需要分页）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse list(HttpSession session,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                           @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们用户个人中心查看订单的逻辑</span><br><span class="line">    return iOrderService.getOrderList(user.getId(),pageNum,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; getOrderList(Integer userId, int pageNum, int pageSize);   //前台用户个人中心查看订单（需要分页）</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * 前台用户个人中心查看订单（需要分页）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; getOrderList(Integer userId,int pageNum,int pageSize)&#123;</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">    List&lt;Order&gt; orderList =orderMapper.selectOrderByUserId(userId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;OrderVo&gt; orderVoList =assembleOrderVoList(orderList,userId);</span><br><span class="line">    PageInfo pageResult =new PageInfo(orderList);</span><br><span class="line">    pageResult.setList(orderVoList);</span><br><span class="line">    return ServerResponse.createBySuccess(pageResult);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">private List&lt;OrderVo&gt; assembleOrderVoList(List&lt;Order&gt; orderList,Integer userId)&#123;</span><br><span class="line">    //将List&lt;Order&gt; 对象转换为List&lt;OrderVo&gt;对象</span><br><span class="line">    List&lt;OrderVo&gt; orderVoList =Lists.newArrayList();</span><br><span class="line">    for(Order order:orderList)&#123;</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =Lists.newArrayList();</span><br><span class="line">        //判断一下是不是管理员，管理员查询时不需要传入参数userId</span><br><span class="line">        if(userId ==null)&#123;</span><br><span class="line">            //todo 管理员查询时不需要传入参数userId</span><br><span class="line">            orderItemList =orderItemMapper.getOrderItemByOrderNo(order.getOrderNo());</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,order.getOrderNo());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">        orderVoList.add(orderVo);</span><br><span class="line">    &#125;</span><br><span class="line">    return orderVoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下，这里我们管理员查询订单的时候是可以不用userId的，因此需要自己去配置一个查询语句：<code>orderItemList =orderItemMapper.getOrderItemByOrderNo(order.getOrderNo());</code>我们打开OrderItemMapper.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;OrderItem&gt; getOrderItemByOrderNo(@Param(value = &quot;orderNo&quot;)Long orderNo);</span><br></pre></td></tr></table></figure></p><p>然后打开OrderItemMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getOrderItemByOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;long&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order_item</span><br><span class="line">  where order_no =#&#123;orderNo&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这样我们前台用户个人中心查看订单的功能就实现了，那么也就意味着我们前台关于订单的功能开发也就完成了。接下来我们需要去完成后台管理员关于订单模块的功能。</p><h2 id="后台管理员查询订单"><a href="#后台管理员查询订单" class="headerlink" title="后台管理员查询订单"></a>后台管理员查询订单</h2><p>首先我们打开controller这个包，在backend这个包里面新建OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.github.pagehelper.PageInfo;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IOrderService;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/order&quot;)</span><br><span class="line">public class OrderManageController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IOrderService iOrderService;</span><br><span class="line"></span><br><span class="line">    /****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员查看订单（需要分页）</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;list.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; orderList(HttpSession session,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                                              @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加查看订单（需要分页）的逻辑</span><br><span class="line">            return iOrderService.manageList(pageNum,pageSize);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; manageList(int pageNum,int pageSize);    //后台管理员查看订单（需要分页）</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员查询订单(不需要userId)</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; manageList(int pageNum,int pageSize)&#123;</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">    List&lt;Order&gt; orderList =orderMapper.selectAllOrder();</span><br><span class="line"></span><br><span class="line">    List&lt;OrderVo&gt; orderVoList =this.assembleOrderVoList(orderList,null);</span><br><span class="line">    PageInfo pageResult =new PageInfo(orderList);</span><br><span class="line">    pageResult.setList(orderVoList);</span><br><span class="line">    return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样后台管理员查询订单的功能就实现了，接下来我们就去实现后台管理员获取订单详情的功能了。</p><h2 id="后台管理员获取订单详情"><a href="#后台管理员获取订单详情" class="headerlink" title="后台管理员获取订单详情"></a>后台管理员获取订单详情</h2><p>首先我们打开OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/****</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员获取订单详情</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;detail.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;OrderVo&gt; orderDetail(HttpSession session, Long orderNo)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就增加获取订单详情的逻辑</span><br><span class="line">        return iOrderService.manageDetail(orderNo);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;OrderVo&gt; manageDetail(Long orderNo);  //后台管理员获取订单详情</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员获取订单详情</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;OrderVo&gt; manageDetail(Long orderNo)&#123;</span><br><span class="line">    Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line">    if(order !=null)&#123;</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByOrderNo(orderNo);</span><br><span class="line">        OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">        return ServerResponse.createBySuccess(orderVo);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样后台管理员获取订单详情的功能就实现了，接下来我们就去实现后台管理员搜索订单的功能。</p><h2 id="后台管理员搜索订单"><a href="#后台管理员搜索订单" class="headerlink" title="后台管理员搜索订单"></a>后台管理员搜索订单</h2><p>首先我们打开OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员搜索订单(有分页)</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;search.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; orderSearch(HttpSession session, Long orderNo,@RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                                               @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加搜索订单的逻辑</span><br><span class="line">            return iOrderService.manageSearch(orderNo,pageNum,pageSize);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; manageSearch(Long orderNo,int pageNum,int pageSize);  //后台管理员搜索订单(有分页)</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员搜索订单(有分页)</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; manageSearch(Long orderNo,int pageNum,int pageSize)&#123;</span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">        Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line"></span><br><span class="line">        if(order !=null)&#123;</span><br><span class="line">            List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByOrderNo(orderNo);</span><br><span class="line">            OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line"></span><br><span class="line">            PageInfo pageResult =new PageInfo(Lists.newArrayList(order));</span><br><span class="line">            pageResult.setList(Lists.newArrayList(orderVo));</span><br><span class="line">            return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这样后台管理员搜索订单的功能就实现了，接下来我们就去实现后台管理员订单发货的功能。</p><h2 id="后台管理员订单发货"><a href="#后台管理员订单发货" class="headerlink" title="后台管理员订单发货"></a>后台管理员订单发货</h2><p>首先我们打开OrderManageController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/****</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员订单发货</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;send_goods.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;String&gt; OrderSendGoods(HttpSession session, Long orderNo)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就增加获取订单发货的逻辑</span><br><span class="line">        return iOrderService.manageSendGoods(orderNo);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; manageSendGoods(Long orderNo);   //后台管理员订单发货</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/****</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员订单发货</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;String&gt; manageSendGoods(Long orderNo)&#123;</span><br><span class="line">    Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line"></span><br><span class="line">    //判断订单状态是否是已支付，然后进行发货</span><br><span class="line">    if(order !=null)&#123;</span><br><span class="line">        if(order.getStatus()==Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">            order.setStatus(Const.OrderStatusEnum.SHIPPED.getCode());  //修改状态为发货</span><br><span class="line">            order.setSendTime(new Date());  //修改发货时间为现在</span><br><span class="line">            orderMapper.updateByPrimaryKeySelective(order);  //更新该订单信息</span><br><span class="line">            return ServerResponse.createBySuccessMassage(&quot;发货成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByErrorMessage(&quot;对不起，该订单并不存在&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样本篇我们关于前台获取订单详情，用户个人中心查看订单以及后台管理员订单管理等功能的开发介绍就到此为止了，接下来是进行各个相关接口的测试。</p><p> 由于测试比较简单，这里直接附上几张测试截图即可，不作过多说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2c3d8f93afb2823a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e2fdca568796a672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那么到此为止，我们所有的功能都开发完毕，后面就是服务器的配置与部署了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十七）：取消订单和获取商品信息功能开发</title>
      <link href="/2018/09/05/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E5%92%8C%E8%8E%B7%E5%8F%96%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/09/05/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E5%8F%96%E6%B6%88%E8%AE%A2%E5%8D%95%E5%92%8C%E8%8E%B7%E5%8F%96%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成前台取消订单和获取购物车中商品信息等功能的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="前台取消订单功能开发"><a href="#前台取消订单功能开发" class="headerlink" title="前台取消订单功能开发"></a>前台取消订单功能开发</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台取消订单（删除订单）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;cancel.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse cancel(HttpSession session,Long orderNo)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台取消订单（删除订单）的逻辑</span><br><span class="line">    return iOrderService.cancel(user.getId(),orderNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; cancel(Integer userId,Long orderNo);   ////前台取消（删除）订单</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 前台取消订单（删除订单）</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;String&gt; cancel(Integer userId,Long orderNo)&#123;</span><br><span class="line">    Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">    if(order ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该用户此订单不存在&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(order.getStatus() ==Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;此订单已付款，无法取消&quot;);//已经付款的订单我们会通过支付宝退款的方式进行解决</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Order updateOrder =new Order();</span><br><span class="line">    updateOrder.setId(order.getId());</span><br><span class="line">    updateOrder.setStatus(Const.OrderStatusEnum.CANCELED.getCode());</span><br><span class="line"></span><br><span class="line">    int rowCount =orderMapper.updateByPrimaryKeySelective(updateOrder);</span><br><span class="line">    if(rowCount&gt;0)&#123;</span><br><span class="line">        return ServerResponse.createBySuccess();</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们前台取消订单功能开发就完成了，接下来我们来开发前台用户查看购物车商品明细这个功能。</p><h2 id="前台用户查看购物车商品明细"><a href="#前台用户查看购物车商品明细" class="headerlink" title="前台用户查看购物车商品明细"></a>前台用户查看购物车商品明细</h2><p>首先我们打开OrderController.java这个文件，里面写入代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台用户查看购物车选中商品明细</span><br><span class="line"> * 这里是购物车中已经选中的商品（假设用户购买了10件，已经付款了5件，还有5件是需要留在购物车里面的，然后通过这个接口去进行商品信息的查看）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;get_order_cart_product.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse getOrderCartProduct(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台用户查看购物车选中商品明细的逻辑</span><br><span class="line">    return iOrderService.getOrderCartProduct(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse getOrderCartProduct(Integer userId);    //前台用户查看购物车选中商品明细</span><br></pre></td></tr></table></figure></p><p>最后我们打开OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">   * 前台用户查看购物车选中商品明细</span><br><span class="line">   * 这里是购物车中已经选中的商品（假设用户购买了10件，已经付款了5件，还有5件是需要留在购物车里面的，然后通过这个接口去进行商品信息的查看）</span><br><span class="line">   * @author lenovo</span><br><span class="line">   * */</span><br><span class="line">  public ServerResponse getOrderCartProduct(Integer userId)&#123;</span><br><span class="line">      //这个是我们需要返回的对象</span><br><span class="line">      OrderProductVo orderProductVo = new OrderProductVo();</span><br><span class="line">      //根据用户id从购物车中获取已经选中的数据（返回结果是Cart类型的list）</span><br><span class="line">      List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId);</span><br><span class="line"></span><br><span class="line">      //通过前面得到的cartList来获得订单明细表（其实就是子订单）</span><br><span class="line">      ServerResponse serverResponse =this.getCartOrderItem(userId,cartList);</span><br><span class="line"></span><br><span class="line">      if(!serverResponse.isSuccess())&#123;</span><br><span class="line">          return serverResponse;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //这里得到的是所有的子订单</span><br><span class="line">      List&lt;OrderItem&gt; orderItemList =(List&lt;OrderItem&gt;)serverResponse.getData();</span><br><span class="line"></span><br><span class="line">      //先创建一个用于存放所有子订单中商品的集合</span><br><span class="line">      List&lt;OrderItemVo&gt; orderItemVoList =Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">      //计算目前已经选中商品的总价</span><br><span class="line">      //将各个子订单进行求和，获取订单总价</span><br><span class="line">      BigDecimal payment = new BigDecimal(&quot;0&quot;);</span><br><span class="line">      for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">          payment =BigDecimalUtil.add(payment.doubleValue(),orderItem.getTotalPrice().doubleValue());</span><br><span class="line">          orderItemVoList.add(assembleOrderItemVo(orderItem));</span><br><span class="line">      &#125;</span><br><span class="line">      orderProductVo.setProductTotalPrice(payment);</span><br><span class="line">      orderProductVo.setOrderItemVoList(orderItemVoList);</span><br><span class="line">      orderProductVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));</span><br><span class="line"></span><br><span class="line">      return ServerResponse.createBySuccess(orderProductVo);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>注意，在这里我们需要新建一个OrderProductVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class OrderProductVo &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;OrderItemVo&gt; orderItemVoList;</span><br><span class="line">    private BigDecimal productTotalPrice;</span><br><span class="line">    private String imageHost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;OrderItemVo&gt; getOrderItemVoList() &#123;</span><br><span class="line">        return orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderItemVoList(List&lt;OrderItemVo&gt; orderItemVoList) &#123;</span><br><span class="line">        this.orderItemVoList = orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getProductTotalPrice() &#123;</span><br><span class="line">        return productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductTotalPrice(BigDecimal productTotalPrice) &#123;</span><br><span class="line">        this.productTotalPrice = productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十六）：前台创建订单功能开发</title>
      <link href="/2018/09/04/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%88%9B%E5%BB%BA%E8%AE%A2%E5%8D%95%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/09/04/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%88%9B%E5%BB%BA%E8%AE%A2%E5%8D%95%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成订单模模块功能的开发，包括前台和后台开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>本模块具体包括前台和后台开发：前台功能包括：创建订单；商品信息；订单列表；订单详情和取消订单这5个部分，而后台功能则包括：订单列表；订单搜索；订单详情和订单发货这4个部分。</p><h2 id="学会技能"><a href="#学会技能" class="headerlink" title="学会技能"></a>学会技能</h2><p>在本模块中，你将会学到避免业务逻辑中横向越权和纵向越权等安全漏洞；设计实用、安全、扩展性强大的常量、枚举类；订单号生成规则、订单严谨性判断；PJO 和 VO 之间的实际操练以及Mybatis的批量插入等知识。</p><h2 id="数据表的设计"><a href="#数据表的设计" class="headerlink" title="数据表的设计"></a>数据表的设计</h2><p>这里我们会使用到两个数据表，因为订单需要和订单信息绑定在一块：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5005acc7eee29980.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="store_order这个数据表（总订单也就是用于最后付款的订单）"></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e5977cd52dad8c63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="store_order_item这个数据表（子订单）"></p><h2 id="前台创建订单"><a href="#前台创建订单" class="headerlink" title="前台创建订单"></a>前台创建订单</h2><p>首先我们打开controller这个包下面的portal包，打开之前的那个OrderController，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台创建订单</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;create.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse create(HttpSession session,Integer shippingId)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台创建订单的逻辑</span><br><span class="line">    return iOrderService.createOrder(user.getId(),shippingId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的IOrderService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse createOrder(Integer userId,Integer shippingId);   //前台创建订单</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的Impl包，我们找到OrderServiceImpl.java文件，里面的新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     * 前台订单功能开发(代码是从下往上读)</span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public ServerResponse createOrder(Integer userId,Integer shippingId)&#123;</span><br><span class="line">        //根据用户id从购物车中获取已经选中的数据（返回结果是Cart类型的list）</span><br><span class="line">        List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId);</span><br><span class="line"></span><br><span class="line">        //计算这个订单的总价</span><br><span class="line">        //1、判断返回值是否成功</span><br><span class="line">        ServerResponse serverResponse =this.getCartOrderItem(userId,cartList);</span><br><span class="line">        if(!serverResponse.isSuccess())&#123;</span><br><span class="line">            return serverResponse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //2、开始计算总价</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =(List&lt;OrderItem&gt;)serverResponse.getData();  //这里得到的是所有的子订单</span><br><span class="line"></span><br><span class="line">        BigDecimal payment =this.getOrderTotalPrice(orderItemList);  //这里得到的是所有的子订单的总价，也就是订单的总价</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //生成订单(将前面的store_order_item表的信息进行汇总，生成store_order表)</span><br><span class="line">        Order order = this.assembleOrder(userId,shippingId,payment);</span><br><span class="line"></span><br><span class="line">        //判断订单是否为空</span><br><span class="line">        if(order==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;生成订单错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断子订单是否为空</span><br><span class="line">        if(CollectionUtils.isEmpty(orderItemList))&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;购物车为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //在前面我们getCartOrderItem这个函数里面，我们就没有对order_no进行配置，现在需要配置了</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            orderItem.setOrderNo(order.getOrderNo());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //mybatis的批量插入(将所有的子订单进行插入,从而生成订单)</span><br><span class="line">        orderItemMapper.batchInsert(orderItemList);</span><br><span class="line"></span><br><span class="line">        //订单生成成功，我们需要减少商品的库存</span><br><span class="line">        this.produceProductStock(orderItemList);</span><br><span class="line"></span><br><span class="line">        //订单生成成功，接着我们需要清空购物车</span><br><span class="line">        this.cleanCart(cartList);</span><br><span class="line"></span><br><span class="line">        //然后需要将数据返回给前端</span><br><span class="line">        OrderVo orderVo =assembleOrderVo(order,orderItemList);</span><br><span class="line">        return ServerResponse.createBySuccess(orderVo);</span><br><span class="line">    &#125;</span><br><span class="line">    //组装新的付款订单，并返回给前端(记得新建3个Vo对象便于后面进行付款订单的组装，这个付款的订单包含订单信息，子订单信息，收货地址信息)</span><br><span class="line">    private OrderVo assembleOrderVo(Order order,List&lt;OrderItem&gt; orderItemList)&#123;</span><br><span class="line">        //下面的信息是订单数据表里面有的信息</span><br><span class="line">        OrderVo orderVo =new OrderVo();</span><br><span class="line">        orderVo.setOrderNo(order.getOrderNo());</span><br><span class="line">        orderVo.setPayment(order.getPayment());</span><br><span class="line">        orderVo.setPaymentType(order.getPaymentType());</span><br><span class="line">        orderVo.setPaymentTypeDesc(Const.PaymentTypeEnum.codeOf(order.getPaymentType()).getValue());</span><br><span class="line"></span><br><span class="line">        orderVo.setPostage(order.getPostage());</span><br><span class="line">        orderVo.setStatus(order.getStatus());</span><br><span class="line">        orderVo.setStatusDesc(Const.OrderStatusEnum.codeOf(order.getStatus()).getValue());</span><br><span class="line"></span><br><span class="line">        orderVo.setShippingId(order.getShippingId());</span><br><span class="line"></span><br><span class="line">        //下面的信息是订单数据表里没有的信息，我们需要从之前的收货地址表中获取(记住此订单不是数据库中的store_order这个表)</span><br><span class="line">        Shipping shipping =shippingMapper.selectByPrimaryKey(order.getShippingId());</span><br><span class="line">        if(shipping !=null)&#123;</span><br><span class="line">            orderVo.setReceiverName(shipping.getReceiverName());  //这里就是说如果新的订单存在，显示它的姓名及信息</span><br><span class="line">            orderVo.setShippingVo(assembleShippingVo(shipping));</span><br><span class="line">        &#125;</span><br><span class="line">        //以下是各种时间的转换</span><br><span class="line">        orderVo.setPaymentTime(DateTimeUtil.dateToStr(order.getPaymentTime()));</span><br><span class="line">        orderVo.setEndTime(DateTimeUtil.dateToStr(order.getEndTime()));</span><br><span class="line">        orderVo.setCreateTime(DateTimeUtil.dateToStr(order.getCreateTime()));</span><br><span class="line">        orderVo.setCloseTime(DateTimeUtil.dateToStr(order.getCloseTime()));</span><br><span class="line"></span><br><span class="line">        orderVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));</span><br><span class="line"></span><br><span class="line">        //下面的信息是订单数据表里没有的信息，我们需要从之前的子订单表中获取(记住此订单不是数据库中的store_order这个表)</span><br><span class="line">        List&lt;OrderItemVo&gt; orderItemVoList =Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            OrderItemVo orderItemVo =assembleOrderItemVo(orderItem);</span><br><span class="line">            orderItemVoList.add(orderItemVo);</span><br><span class="line">        &#125;</span><br><span class="line">        orderVo.setOrderItemVoList(orderItemVoList);</span><br><span class="line">        return orderVo;</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">    private OrderItemVo assembleOrderItemVo(OrderItem orderItem)&#123;</span><br><span class="line">        OrderItemVo orderItemVo =new OrderItemVo();</span><br><span class="line">        orderItemVo.setOrderNo(orderItem.getOrderNo());</span><br><span class="line">        orderItemVo.setProductId(orderItem.getProductId());</span><br><span class="line">        orderItemVo.setProductName(orderItem.getProductName());</span><br><span class="line">        orderItemVo.setProductImage(orderItem.getProductImage());</span><br><span class="line">        orderItemVo .setCurrentUnitPrice(orderItem.getCurrentUnitPrice());</span><br><span class="line">        orderItemVo.setTotalPrice(orderItem.getTotalPrice());</span><br><span class="line">        orderItemVo.setQuantity(orderItem.getQuantity());</span><br><span class="line"></span><br><span class="line">        orderItemVo.setCreateTime(DateTimeUtil.dateToStr(orderItem.getCreateTime()));</span><br><span class="line"></span><br><span class="line">        return orderItemVo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //通过组装成新的收货地址对象，以便后面的生成新的支付订单使用</span><br><span class="line">    private ShippingVo assembleShippingVo(Shipping shipping)&#123;</span><br><span class="line">       ShippingVo shippingVo =new ShippingVo();</span><br><span class="line">       shippingVo.setReceiverAddress(shipping.getReceiverAddress());</span><br><span class="line">       shippingVo.setReceiverCity(shipping.getReceiverCity());</span><br><span class="line">       shippingVo.setReceiverDistrict(shipping.getReceiverDistrict());</span><br><span class="line">       shippingVo.setReceiverMobile(shipping.getReceiverMobile());</span><br><span class="line">       shippingVo.setReceiverPhone(shipping.getReceiverPhone());</span><br><span class="line">       shippingVo.setReceiverName(shipping.getReceiverName());</span><br><span class="line">       shippingVo.setReceiverProvince(shipping.getReceiverProvince());</span><br><span class="line">       shippingVo.setReceiverZip(shipping.getReceiverZip());</span><br><span class="line">       return shippingVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //订单生成成功，接着我们需要清空购物车</span><br><span class="line">    private void cleanCart( List&lt;Cart&gt; cartList)&#123;</span><br><span class="line">        for(Cart cart:cartList)&#123;</span><br><span class="line">            cartMapper.deleteByPrimaryKey(cart.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //订单生成成功，我们需要减少商品的库存</span><br><span class="line">    private void produceProductStock(List&lt;OrderItem&gt; orderItemList)&#123;</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            Product product =productMapper.selectByPrimaryKey(orderItem.getProductId());</span><br><span class="line">            product.setStock(product.getStock()-orderItem.getQuantity());</span><br><span class="line">            productMapper.updateByPrimaryKeySelective(product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //组装订单表（将前面的store_order_item表的信息进行汇总，生成store_order表）</span><br><span class="line">    private Order assembleOrder(Integer userId,Integer shippingId,BigDecimal payment)&#123;</span><br><span class="line">        //这里面有三个参数：userId用户id, shippingId收货地址id, payment订单总价</span><br><span class="line"></span><br><span class="line">        //这个是我们组装成的新的订单</span><br><span class="line">       Order order =new Order();</span><br><span class="line"></span><br><span class="line">        long order_no =this.generateOrderNo();</span><br><span class="line"></span><br><span class="line">        //这里面的字段请依据store_order进行设置</span><br><span class="line">        order.setOrderNo(order_no);</span><br><span class="line">        order.setStatus(Const.OrderStatusEnum.PAID.getCode());</span><br><span class="line">        order.setPostage(0);</span><br><span class="line">        order.setPaymentType(Const.PaymentTypeEnum.ONLINE_PAY.getCode());</span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setShippingId(shippingId);</span><br><span class="line">        order.setPayment(payment);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         //发货时间：send_time</span><br><span class="line">         //交易完成时间：end_time</span><br><span class="line">         //交易关闭时间：close_time</span><br><span class="line">         // 上面的时间目前先不进行，后面会进行配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //将新的订单插入到数据库中</span><br><span class="line">       int rowCount =  orderMapper.insert(order);</span><br><span class="line">       if(rowCount&gt;0)&#123;</span><br><span class="line">           return order;</span><br><span class="line">       &#125;</span><br><span class="line">       return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 订单号order_no的生成</span><br><span class="line">    //订单号的生成是非常重要的，这个设计的好坏关系到以后做分布式，高并发的情况非常有效，这里采用时间戳取余的方式</span><br><span class="line">    private long generateOrderNo()&#123;</span><br><span class="line">        long currentTime =System.currentTimeMillis();</span><br><span class="line">//        return currentTime+currentTime%10;  这种方法是可以的，但是在高并发的时候，可能是同时进行的，因此时间有可能一样,那样我们对orderNum进行唯一索引的时候就会失败</span><br><span class="line">        return currentTime+new Random().nextInt(100);  //加上一个100以内的随机数</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //用于计算订单总价</span><br><span class="line">    private BigDecimal getOrderTotalPrice(List&lt;OrderItem&gt; orderItemList)&#123;</span><br><span class="line">        //将各个子订单进行求和，获取订单总价</span><br><span class="line">        BigDecimal payment =new BigDecimal(&quot;0&quot;);</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">           payment= BigDecimalUtil.add(payment.doubleValue(),orderItem.getTotalPrice().doubleValue());  //这里默认就是0+一个订单</span><br><span class="line">        &#125;</span><br><span class="line">        return payment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //用于返回新的子订单明细（其实就是返回一个store_order_item子订单对象）</span><br><span class="line">    private ServerResponse getCartOrderItem(Integer userId,List&lt;Cart&gt; cartList)&#123;</span><br><span class="line"></span><br><span class="line">        //这个是我们组装成的新的子订单</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        if(CollectionUtils.isEmpty(cartList))&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;购物车为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //校验购物车的数据，包括产品的状态和数量</span><br><span class="line">        for(Cart cartItem:cartList)&#123;</span><br><span class="line">            //校验产品的状态是否是在售状态</span><br><span class="line"></span><br><span class="line">            Product product =productMapper.selectByPrimaryKey(cartItem.getProductId());</span><br><span class="line">            if(Const.ProductStatusEnum.ON_SALE.getCode() != product.getStatus() )&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;产品&quot;+product.getName()+&quot;不是在线售卖状态&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //校验产品的库存</span><br><span class="line">            if(cartItem.getQuantity()&gt;product.getStock())&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;产品&quot;+product.getName()+&quot;库存不足&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            //开始组装成我们的订单对象(除了order_no这个字段需要我们后面设置以外，其余需要我们在这里进行组装也就是order_item表中的信息)</span><br><span class="line">            OrderItem orderItem =new OrderItem();</span><br><span class="line"></span><br><span class="line">            //order_no这个字段需要我们后面设置</span><br><span class="line"></span><br><span class="line">            orderItem.setUserId(userId);</span><br><span class="line">            orderItem.setProductId(product.getId());</span><br><span class="line">            orderItem.setProductName(product.getName());</span><br><span class="line">            orderItem.setProductImage(product.getMainImage());</span><br><span class="line">            orderItem.setCurrentUnitPrice(product.getPrice());</span><br><span class="line">            orderItem.setQuantity(cartItem.getQuantity());</span><br><span class="line">            orderItem.setTotalPrice(BigDecimalUtil.mut(product.getPrice().doubleValue(),cartItem.getQuantity()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            orderItemList.add(orderItem);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createBySuccess(orderItemList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码很多，但是都是为了后面的调用方便而进行了封装。下面分别解释上面代码的含义（记住上面代码你必须是从下往上读，因为我们是随着开发的需要而逐渐增加代码的）<br><strong>1、</strong>首先我们是要创建订单，因此必须根据传入的用户id来去购物车(store_cart)这个数据表中查找相应的购物车对象，其实就是很多种商品，你知道的一个用户可能存在多个购物车商品，因此返回的是一个购物车list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Cart&gt; cartList =cartMapper.selectCheckedCartByUserId(userId);</span><br></pre></td></tr></table></figure></p><p>我们需要打开CartMapper.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Cart&gt; selectCheckedCartByUserId(Integer userId);</span><br></pre></td></tr></table></figure></p><p>然后打开CartMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCheckedCartByUserId&quot; parameterType=&quot;int&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">   select</span><br><span class="line">   &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">   from store_cart</span><br><span class="line">   where user_id =#&#123;userId&#125;</span><br><span class="line">   and checked =1</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>然后就计算刚才那些购物车商品的总价，而这个过程比较复杂，需要创建一个getCartOrderItem函数，用于返回新的子订单明细（其实就是返回一个store_order_item子订单对象），当然在这个函数里面，你需要校验购物车的数据，包括产品的状态和库存数量。<br><strong>3、</strong>通过第二步，我们得到了所有的子订单，现在去定义一个getOrderTotalPrice函数，去计算所有的子订单的总价，也就是订单的总价，具体的代码参看上面。<br><strong>4、</strong>接着我们需要生成订单号，订单号的生成是非常重要的，这个设计的好坏关系到以后做分布式，高并发的情况非常有效，这里采用时间戳+随机函数的方式：新建一个用于生成订单号的generateOrderNo函数，我们的核心就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTime+new Random().nextInt(100);</span><br></pre></td></tr></table></figure></p><p><strong>5、</strong>将第3步中的所有子订单进行合并，生成新的支付订单，你知道的支付订单里面包含用户信息，商品信息以及收货地址。首先我们需要判断判断订单是否为空以及子订单是否为空:我们新建一个assembleOrder函数，用于组装订单表，这里面有三个参数：userId用户id, shippingId收货地址id, payment订单总价。<br>在<code>order.setStatus(Const.OrderStatusEnum.PAID.getCode());</code>和<code>order.setPaymentType(Const.PaymentTypeEnum.ONLINE_PAY.getCode());</code>的时候，我们需要打开Const.java文件，在OrderStatusEnum这个枚举类添加codeOf方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static OrderStatusEnum codeOf(int code)&#123;</span><br><span class="line">      for(OrderStatusEnum orderStatusEnum:values())&#123;</span><br><span class="line">          if(orderStatusEnum.getCode() ==code)&#123;</span><br><span class="line">              return orderStatusEnum;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      throw new RuntimeException(&quot;没有找到对应的枚举&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>以及新建一个枚举类PaymentTypeEnum：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//支付类型（目前暂支持线上支付，后面会进行扩展）</span><br><span class="line">    public enum PaymentTypeEnum&#123;</span><br><span class="line">        ONLINE_PAY(1,&quot;在线支付&quot;)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        private String value;</span><br><span class="line">        private int code;</span><br><span class="line"></span><br><span class="line">        PaymentTypeEnum(int code,String value)&#123;</span><br><span class="line">            this.code =code;</span><br><span class="line">            this.value=value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setValue(String value) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getCode() &#123;</span><br><span class="line">            return code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setCode(int code) &#123;</span><br><span class="line">            this.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public static PaymentTypeEnum codeOf(int code)&#123;</span><br><span class="line">            for(PaymentTypeEnum paymentTypeEnum:values())&#123;</span><br><span class="line">                if(paymentTypeEnum.getCode() ==code)&#123;</span><br><span class="line">                    return paymentTypeEnum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            throw new RuntimeException(&quot;没有找到对应的枚举&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里在注意一下时间字段，我们这里没有进行配置，我们后面会进行配置。</p><p><strong>6、</strong>然后就是将新的订单插入到数据库中。mybatis的批量插入(将所有的子订单进行插入,从而生成订单)，我们需要打开OrderItemMapper.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void batchInsert(@Param(value = &quot;orderItemList&quot;) List&lt;OrderItem&gt; orderItemList);</span><br></pre></td></tr></table></figure></p><p>记住在mybatis里面使用多个参数时，需要使用Param注解。</p><p>紧接着，打开OrderItemMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   &lt;insert id=&quot;batchInsert&quot; parameterType=&quot;list&quot;&gt;</span><br><span class="line">  insert into store_order_item (id, order_no,user_id, product_id,</span><br><span class="line">  product_name, product_image, current_unit_price,</span><br><span class="line">  quantity, total_price, create_time,</span><br><span class="line">  update_time)</span><br><span class="line">  values</span><br><span class="line">  &lt;foreach collection=&quot;orderItemList&quot; index=&quot;index&quot; item=&quot;item&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">    (</span><br><span class="line">    #&#123;item.id&#125;,#&#123;item.orderNo&#125;,#&#123;item.userId&#125;,#&#123;item.productId&#125;,#&#123;item.productName&#125;,#&#123;item.productImage&#125;,#&#123;item.currentUnitPrice&#125;,#&#123;item.quantity&#125;,#&#123;item.totalPrice&#125;,now(),now()</span><br><span class="line">    )</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure></p><p>这里面采用了foreach 进行循环遍历进行插入。<br><strong>6、</strong>订单生成以后，我们需要清空购物车和减少商品的库存。分别去定义cleanCart和produceProductStock这两个函数，去实现相关的逻辑。<br><strong>7、</strong>接下来我们要做的就是将数据以Json形式返回给前端，为了更好的实现这个功能，我们需要新建三个Vo文件，我们打开Vo这个包，新建OrderVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line">import top.store.service.ShippingVo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class OrderVo &#123;</span><br><span class="line"></span><br><span class="line">    private Long orderNo;</span><br><span class="line"></span><br><span class="line">    private BigDecimal payment;</span><br><span class="line"></span><br><span class="line">    private Integer paymentType;</span><br><span class="line"></span><br><span class="line">    private String paymentTypeDesc;</span><br><span class="line"></span><br><span class="line">    private Integer postage;</span><br><span class="line"></span><br><span class="line">    private Integer status;</span><br><span class="line"></span><br><span class="line">    private String statusDesc;</span><br><span class="line"></span><br><span class="line">    //各种时间，都采用String类型</span><br><span class="line"></span><br><span class="line">    private String paymentTime;</span><br><span class="line"></span><br><span class="line">    private String sendTime;</span><br><span class="line"></span><br><span class="line">    private String endTime;</span><br><span class="line"></span><br><span class="line">    private String closeTime;</span><br><span class="line"></span><br><span class="line">    private String createTime;</span><br><span class="line"></span><br><span class="line">    private String updateTime;</span><br><span class="line"></span><br><span class="line">    //子订单的明细（另外新建一个OrderItemVo用于组装需要显示的信息）</span><br><span class="line"></span><br><span class="line">    private List&lt;OrderItemVo&gt; orderItemVoList;</span><br><span class="line"></span><br><span class="line">    private String imageHost;</span><br><span class="line">    private Integer shippingId;</span><br><span class="line">    private String receiverName;</span><br><span class="line"></span><br><span class="line">    //购物车明细（另外新建一个ShippingVo用于组装需要显示的信息）</span><br><span class="line">    private ShippingVo shippingVo;</span><br><span class="line"></span><br><span class="line">    public Long getOrderNo() &#123;</span><br><span class="line">        return orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderNo(Long orderNo) &#123;</span><br><span class="line">        this.orderNo = orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getPayment() &#123;</span><br><span class="line">        return payment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPayment(BigDecimal payment) &#123;</span><br><span class="line">        this.payment = payment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getPaymentType() &#123;</span><br><span class="line">        return paymentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaymentType(Integer paymentType) &#123;</span><br><span class="line">        this.paymentType = paymentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPaymentTypeDesc() &#123;</span><br><span class="line">        return paymentTypeDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaymentTypeDesc(String paymentTypeDesc) &#123;</span><br><span class="line">        this.paymentTypeDesc = paymentTypeDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getPostage() &#123;</span><br><span class="line">        return postage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPostage(Integer postage) &#123;</span><br><span class="line">        this.postage = postage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(Integer status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStatusDesc() &#123;</span><br><span class="line">        return statusDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatusDesc(String statusDesc) &#123;</span><br><span class="line">        this.statusDesc = statusDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPaymentTime() &#123;</span><br><span class="line">        return paymentTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPaymentTime(String paymentTime) &#123;</span><br><span class="line">        this.paymentTime = paymentTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSendTime() &#123;</span><br><span class="line">        return sendTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSendTime(String sendTime) &#123;</span><br><span class="line">        this.sendTime = sendTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEndTime() &#123;</span><br><span class="line">        return endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEndTime(String endTime) &#123;</span><br><span class="line">        this.endTime = endTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCloseTime() &#123;</span><br><span class="line">        return closeTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCloseTime(String closeTime) &#123;</span><br><span class="line">        this.closeTime = closeTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(String createTime) &#123;</span><br><span class="line">        this.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUpdateTime() &#123;</span><br><span class="line">        return updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUpdateTime(String updateTime) &#123;</span><br><span class="line">        this.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;OrderItemVo&gt; getOrderItemVoList() &#123;</span><br><span class="line">        return orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderItemVoList(List&lt;OrderItemVo&gt; orderItemVoList) &#123;</span><br><span class="line">        this.orderItemVoList = orderItemVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getShippingId() &#123;</span><br><span class="line">        return shippingId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setShippingId(Integer shippingId) &#123;</span><br><span class="line">        this.shippingId = shippingId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverName() &#123;</span><br><span class="line">        return receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverName(String receiverName) &#123;</span><br><span class="line">        this.receiverName = receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShippingVo getShippingVo() &#123;</span><br><span class="line">        return shippingVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setShippingVo(ShippingVo shippingVo) &#123;</span><br><span class="line">        this.shippingVo = shippingVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着新建OrderItemVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class OrderItemVo &#123;</span><br><span class="line">    //从store_order_item表里面选择我们将要在订单中显示的字段</span><br><span class="line"></span><br><span class="line">    private Long orderNo;</span><br><span class="line"></span><br><span class="line">    private Integer productId;</span><br><span class="line"></span><br><span class="line">    private String productName;</span><br><span class="line"></span><br><span class="line">    private String productImage;</span><br><span class="line"></span><br><span class="line">    private BigDecimal currentUnitPrice;</span><br><span class="line"></span><br><span class="line">    private Integer quantity;</span><br><span class="line"></span><br><span class="line">    private BigDecimal totalPrice;</span><br><span class="line"></span><br><span class="line">    private String createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Long getOrderNo() &#123;</span><br><span class="line">        return orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOrderNo(Long orderNo) &#123;</span><br><span class="line">        this.orderNo = orderNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductId() &#123;</span><br><span class="line">        return productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductId(Integer productId) &#123;</span><br><span class="line">        this.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductName() &#123;</span><br><span class="line">        return productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductName(String productName) &#123;</span><br><span class="line">        this.productName = productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductImage() &#123;</span><br><span class="line">        return productImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductImage(String productImage) &#123;</span><br><span class="line">        this.productImage = productImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getCurrentUnitPrice() &#123;</span><br><span class="line">        return currentUnitPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCurrentUnitPrice(BigDecimal currentUnitPrice) &#123;</span><br><span class="line">        this.currentUnitPrice = currentUnitPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getQuantity() &#123;</span><br><span class="line">        return quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setQuantity(Integer quantity) &#123;</span><br><span class="line">        this.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getTotalPrice() &#123;</span><br><span class="line">        return totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTotalPrice(BigDecimal totalPrice) &#123;</span><br><span class="line">        this.totalPrice = totalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(String createTime) &#123;</span><br><span class="line">        this.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后新建ShippingVo.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">public class ShippingVo &#123;</span><br><span class="line">    //从store_shipping表里面选择我们将要在订单中显示的字段</span><br><span class="line">    private String receiverName;</span><br><span class="line"></span><br><span class="line">    private String receiverPhone;</span><br><span class="line"></span><br><span class="line">    private String receiverMobile;</span><br><span class="line"></span><br><span class="line">    private String receiverProvince;</span><br><span class="line"></span><br><span class="line">    private String receiverCity;</span><br><span class="line"></span><br><span class="line">    private String receiverDistrict;</span><br><span class="line"></span><br><span class="line">    private String receiverAddress;</span><br><span class="line"></span><br><span class="line">    private String receiverZip;</span><br><span class="line"></span><br><span class="line">    public String getReceiverName() &#123;</span><br><span class="line">        return receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverName(String receiverName) &#123;</span><br><span class="line">        this.receiverName = receiverName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverPhone() &#123;</span><br><span class="line">        return receiverPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverPhone(String receiverPhone) &#123;</span><br><span class="line">        this.receiverPhone = receiverPhone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverMobile() &#123;</span><br><span class="line">        return receiverMobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverMobile(String receiverMobile) &#123;</span><br><span class="line">        this.receiverMobile = receiverMobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverProvince() &#123;</span><br><span class="line">        return receiverProvince;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverProvince(String receiverProvince) &#123;</span><br><span class="line">        this.receiverProvince = receiverProvince;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverCity() &#123;</span><br><span class="line">        return receiverCity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverCity(String receiverCity) &#123;</span><br><span class="line">        this.receiverCity = receiverCity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverDistrict() &#123;</span><br><span class="line">        return receiverDistrict;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverDistrict(String receiverDistrict) &#123;</span><br><span class="line">        this.receiverDistrict = receiverDistrict;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverAddress() &#123;</span><br><span class="line">        return receiverAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverAddress(String receiverAddress) &#123;</span><br><span class="line">        this.receiverAddress = receiverAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getReceiverZip() &#123;</span><br><span class="line">        return receiverZip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setReceiverZip(String receiverZip) &#123;</span><br><span class="line">        this.receiverZip = receiverZip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着我们需要定义三个函数分别用于组装我们在支付订单里面的信息，为什么这么做？那是因为我们的支付订单里面包含的只是订单表，子订单表（订单明细表）和收货地址表中的部分信息，因此我们需要进行抽离封装成一个我们用在支付订单里面的信息。</p><p>这个很好理解，assembleShippingVo函数传入shipping对象进行组装；assembleOrderItemVo函数传入orderItem对象进行组装；assembleOrderVo函数传入order和orderItemList对象进行组装。</p><p>这样最后将组装成的新的支付订单对象返回给前端，就完成了我们创建订单的逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十五）：支付宝支付回调功能开发</title>
      <link href="/2018/09/03/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/09/03/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%9B%9E%E8%B0%83%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇来完成支付宝支付回调的功能，其实这个是非常简单的，但是我专门用一篇笔记来记录主要就是希望自己可以好好的进行完善。</p><h2 id="支付宝支付回调"><a href="#支付宝支付回调" class="headerlink" title="支付宝支付回调"></a>支付宝支付回调</h2><p>打开OrderController.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     * 支付宝回调功能开发</span><br><span class="line">     * @author envy</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;alipay_callback.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public Object alipayCallback(HttpServletRequest request) &#123;</span><br><span class="line">        //利用guava封装的map进行参数存储，记住这个是新的经过下面的代码拼接以后的map</span><br><span class="line">        Map&lt;String,String&gt; params = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       Map requestParams= request.getParameterMap();   //将异步通知中收到的待验证所有参数都存放到map中</span><br><span class="line">        for(Iterator iter=requestParams.keySet().iterator();iter.hasNext();)&#123;</span><br><span class="line">            String name =(String)iter.next();</span><br><span class="line">            String [] values =(String [])requestParams.get(name);</span><br><span class="line"></span><br><span class="line">            String valueStr =&quot;&quot;;</span><br><span class="line">            for(int i=0;i&lt;values.length;i++)&#123;</span><br><span class="line">                //判断值的长度，若为1，则直接返回values[0]，若不是那我们则需要在各个参数值之间添加逗号用于区分</span><br><span class="line">                valueStr =(i==values.length-1)?valueStr+values[i]:valueStr+values[i]+&quot;,&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            //其实这里就是将前面的map进行处理,然后变成我们所需要的params</span><br><span class="line">            params.put(name,valueStr);</span><br><span class="line">        &#125;</span><br><span class="line">       logger.info(&quot;支付宝回调，sign:&#123;&#125;,trade_status:&#123;&#125;,参数:&#123;&#125;&quot;,params.get(&quot;sign&quot;),params.get(&quot;trade_status&quot;),params.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //接下来的代码是非常重要的，因为它需要对我们的回调结果进行验证，并且还要避免重复通知</span><br><span class="line">        params.remove(&quot;sign_type&quot;);</span><br><span class="line"></span><br><span class="line">        //注意这里其余参数的获取是不需要再次构建方法的，你是可以直接通过Configs来获得的</span><br><span class="line">        try &#123;</span><br><span class="line">            boolean alipayRSACheckedV2 = AlipaySignature.rsaCheckV2(params, Configs.getPublicKey(),&quot;utf-8&quot;,Configs.getSignType());</span><br><span class="line"></span><br><span class="line">            if(!alipayRSACheckedV2)&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;非法请求，验证不通过，再恶意请求将报警找网警。&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (AlipayApiException e) &#123;</span><br><span class="line">            logger.error(&quot;支付宝验证回调异常&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //商户需要验证该通知数据中的out_trade_no是否为商户系统中创建的订单号，</span><br><span class="line">        // 并判断total_amount是否确实为该订单的实际金额（即商户订单创建时的金额），</span><br><span class="line">        // 同时需要校验通知中的seller_id（或者seller_email) 是否为out_trade_no这笔单据的对应的操作方</span><br><span class="line">        // （有的时候，一个商户可能有多个seller_id/seller_email），上述有任何一个验证不通过，</span><br><span class="line">        // 则表明本次通知是异常通知，务必忽略。在上述验证通过后商户必须根据支付宝不同类型的业务通知，</span><br><span class="line">        // 正确的进行不同的业务处理，并且过滤重复的通知结果数据。在支付宝的业务通知中，</span><br><span class="line">        // 只有交易通知状态为TRADE_SUCCESS或TRADE_FINISHED时，支付宝才会认定为买家付款成功。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //进行参数验证</span><br><span class="line">        ServerResponse serverResponse =iOrderService.aliCallback(params);</span><br><span class="line">        if(serverResponse.isSuccess())&#123;</span><br><span class="line">            return Const.AlipayCallback.RESPONSE_SUCCESS;</span><br><span class="line">        &#125;</span><br><span class="line">        return Const.AlipayCallback.RESPONSE_FAILED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开OrderServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     *</span><br><span class="line">     * 支付宝回调验证</span><br><span class="line">     *</span><br><span class="line">     * 验证参数 :</span><br><span class="line">     * out_trade_no:商户订单号</span><br><span class="line">     * trade_no:支付宝交易号;</span><br><span class="line">     * trade_status:交易状态</span><br><span class="line">     */</span><br><span class="line">    public ServerResponse aliCallback(Map&lt;String,String&gt; params)&#123;</span><br><span class="line">      Long orderNo = Long.parseLong(params.get(&quot;out_trade_no&quot;));</span><br><span class="line">      String tradeNo =params.get(&quot;trade_no&quot;);</span><br><span class="line">      String tradeStatus =params.get(&quot;trade_status&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      //通过商户订单号来查询订单</span><br><span class="line">        Order order =orderMapper.selectOrderByOrderNo(orderNo);</span><br><span class="line"></span><br><span class="line">        if(order ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;非光明二手交易市场的订单，回调忽略&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断是否进行了重复调用（只有已取消和未支付这两种不会引起重复调用）</span><br><span class="line">        if(order.getStatus()&gt;= Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;支付宝重复调用&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //当没有进行重复调用的时候，我们需要通过判断来设置它的支付状态</span><br><span class="line">        if(Const.AlipayCallback.RESPONSE_SUCCESS.equals(tradeStatus))&#123;</span><br><span class="line">            //设置支付时间，从params里面获取,查看支付宝文档发现它其实是一个gmt_payment和时间工具类里面的配置一样</span><br><span class="line">            order.setPaymentTime(DateTimeUtil.strToDate(params.get(&quot;gmt_payment&quot;)));</span><br><span class="line"></span><br><span class="line">            order.setStatus(Const.OrderStatusEnum.PAID.getCode());</span><br><span class="line">            //更新订单状态</span><br><span class="line">            orderMapper.updateByPrimaryKeySelective(order);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //组装一个payInfo对象</span><br><span class="line">        /***</span><br><span class="line">         *下面这些字段都是payInfo支付信息表里面的字段</span><br><span class="line">         * user_id,  用户id</span><br><span class="line">         * order_no,  商户订单号</span><br><span class="line">         * pay_platform,  支付平台</span><br><span class="line">         * platform_number,  交易号(tradeNo)</span><br><span class="line">         *platform_status, 交易状态（tradeStatus）</span><br><span class="line">         */</span><br><span class="line">        PayInfo payInfo =new PayInfo();</span><br><span class="line">        payInfo.setId(order.getUserId());</span><br><span class="line">        payInfo.setOrderNo(order.getOrderNo());</span><br><span class="line">        payInfo.setPayPlatform(Const.PayPlatformEnum.ALIPAY.getCode());</span><br><span class="line">        payInfo.setPlatformNumber(tradeNo);</span><br><span class="line">        payInfo.setPlatformStatus(tradeStatus);</span><br><span class="line"></span><br><span class="line">        payInfoMapper.insert(payInfo);</span><br><span class="line"></span><br><span class="line">        return ServerResponse.createBySuccess();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>几点说明：</strong><br>1、看到这行<code>Order order =orderMapper.selectOrderByOrderNo(orderNo);</code>代码就说明我们需要去OrderMapper.java文件里面添加一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order selectOrderByOrderNo(Long orderNo);</span><br></pre></td></tr></table></figure></p><p>紧接着我们需要打开OrderMapper.xml文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectOrderByOrderNo&quot; parameterType=&quot;long&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order</span><br><span class="line">  where order_no =#&#123;orderNo&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>在进行是否重复调用的判断时，我们需要去Const里面新增支付状态的枚举类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">//订单状态</span><br><span class="line">   public enum OrderStatusEnum&#123;</span><br><span class="line">       CANCELED(0,&quot;已取消&quot;),</span><br><span class="line">       NO_PAY(10,&quot;未支付&quot;),</span><br><span class="line">       PAID(20,&quot;已付款&quot;),</span><br><span class="line">       SHIPPED(40,&quot;已发货&quot;),</span><br><span class="line">       ORDER_SUCCESS(50,&quot;订单完成&quot;),</span><br><span class="line">       ORDER_CLOSE(60,&quot;订单关闭&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       private String value;</span><br><span class="line">       private int code;</span><br><span class="line"></span><br><span class="line">       OrderStatusEnum(int code,String value)&#123;</span><br><span class="line">           this.code =code;</span><br><span class="line">           this.value=value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public String getValue() &#123;</span><br><span class="line">           return value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setValue(String value) &#123;</span><br><span class="line">           this.value = value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public int getCode() &#123;</span><br><span class="line">           return code;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setCode(int code) &#123;</span><br><span class="line">           this.code = code;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public interface AlipayCallback&#123;</span><br><span class="line">       String TRADE_STATUS_WAIT_BUYER_PAY = &quot;WAIT_BUYER_PAY&quot;;</span><br><span class="line">       String TRADE_STATUS_TRADE_SUCCESS = &quot;TRADE_SUCCESS&quot;;</span><br><span class="line"></span><br><span class="line">       String RESPONSE_SUCCESS = &quot;success&quot;;</span><br><span class="line">       String RESPONSE_FAILED = &quot;failed&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //支付平台（目前暂支持支付宝，后面会进行扩展）</span><br><span class="line">   public enum PayPlatformEnum&#123;</span><br><span class="line">       ALIPAY(1,&quot;支付宝&quot;)</span><br><span class="line">       ;</span><br><span class="line"></span><br><span class="line">       private String value;</span><br><span class="line">       private int code;</span><br><span class="line"></span><br><span class="line">       PayPlatformEnum(int code,String value)&#123;</span><br><span class="line">           this.code =code;</span><br><span class="line">           this.value=value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public String getValue() &#123;</span><br><span class="line">           return value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setValue(String value) &#123;</span><br><span class="line">           this.value = value;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public int getCode() &#123;</span><br><span class="line">           return code;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       public void setCode(int code) &#123;</span><br><span class="line">           this.code = code;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这后面的代码其实就是后面即将会使用到的订单状态和支付平台这个两个枚举类，里面设置了value和code这个两个字段，以及它的有参构造，getter和setter方法。<br><strong>3、</strong>这行代码<code>order.setPaymentTime(DateTimeUtil.strToDate(params.get(&quot;gmt_payment&quot;)));</code>是用来设置支付时间，从params里面获取,查看<a href="https://docs.open.alipay.com/194/103296/" target="_blank" rel="noopener">支付宝文档</a>发现它其实是一gmt_payment和时间工具类里面的配置一样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9e31f32162cb75bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这是我们DateUtil的工具类里面的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//定义一下我们的日期格式</span><br><span class="line">public static final String STANDARD_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br></pre></td></tr></table></figure><p><strong>4、</strong>然后通过我们获取到的信息，我们需要组装成一个payInfo对象，里面的数据都是我们自己设定的，经过了严格的判断。</p><p>最后打开IOrderService.java文件，添加接口抽象方法，以供controller调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse aliCallback(Map&lt;String,String&gt; params);    //支付宝回调验证</span><br></pre></td></tr></table></figure></p><p>关于其他未说明的事情请参看下面的注意事项。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在对支付宝回调结果进行检验的时候，我们可以单击查看支付宝的<a href="https://docs.open.alipay.com/194/103296/" target="_blank" rel="noopener">开发文档</a>，我们拉到底部：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-94b01711bba65f1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>shift+ctrl+T调出类搜索框，搜索<code>alipaysignature</code>，接着alt+数字7（不是F7）查看该类所有方法，因为支付宝现在只提供RSA2(SHA256)密钥这种方法，因此直接查看图中所示方法<code>rsaCheckV2</code>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c028752f4e6d7120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-79feba20353e88cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你发现只去除了sign，并没有移除sign_type，因此我们后面需要自己进行移除。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3f1f7c36b323ab4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后你在支付宝属性配置文件里面看到了<code>,RSA2-&gt;SHA256withRsa</code>因此我们需要查看CheckContent的rsa类型，我们发现<code>rsa256CheckContent</code>这个函数里面的就是采用<code>SIGN_SHA256RSA_ALGORITHMS</code>来进行验证的。还有在前面我们看到了charset这个设置字符集的字段。我们搜索<code>AlipayTradeServiceImpl.java</code>文件，我们发现了图中所示的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-36530458522d3da5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>也就是说如果你不传入charset对应的值，那就默认使用utf-8编码，这个是非常有用的。</p><p>因此，总结一下就是我们后面会调用AlipaySignature的rsaCheckV2方法，而且该方法是含有sign_type参数的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   public static boolean rsaCheckV2(Map&lt;String, String&gt; params, String publicKey,</span><br><span class="line">           String charset,String signType) throws AlipayApiException &#123;</span><br><span class="line">String sign = params.get(&quot;sign&quot;);</span><br><span class="line">String content = getSignCheckContentV2(params);</span><br><span class="line"></span><br><span class="line">return rsaCheck(content, sign, publicKey, charset,signType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意上的publicKey是指图中的这个：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a49ade1e087112ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你填的也就是这个：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0158e87896488d97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><code>com.alipay.demo.trade.config</code>这个包里面就提供了用于获取该zfbinfo.properies里面配置信息的方法：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0e1bab964c450707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在我们需要提供给前端，轮询查询订单的支付状态，我们在二维码扫码支付完成以后，前台会调用我们这个接口，查看是否支付成功了。</p><h2 id="前台轮询查询订单状态"><a href="#前台轮询查询订单状态" class="headerlink" title="前台轮询查询订单状态"></a>前台轮询查询订单状态</h2><p>打开OrderController.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *  前台轮询查询订单状态</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;query_order_pay_status.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;Boolean&gt; queryOrderPayStatus(HttpSession session,Long orderNo) &#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //实现我们前台轮询查询订单状态的逻辑</span><br><span class="line">    ServerResponse serverResponse= iOrderService.queryOrderPayStatus(user.getId(),orderNo);</span><br><span class="line">    if (serverResponse.isSuccess()) &#123;</span><br><span class="line">        return ServerResponse.createBySuccess(true);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccess(false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开OrderServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">   *  前台轮询查询订单状态</span><br><span class="line">   * @author envy</span><br><span class="line">   * */</span><br><span class="line">  public ServerResponse queryOrderPayStatus(Integer userId, Long orderNo)&#123;</span><br><span class="line">      //查询订单是否存在</span><br><span class="line">      Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">      //如果订单不存在的话</span><br><span class="line">      if(order ==null)&#123;</span><br><span class="line">          return ServerResponse.createByErrorMessage(&quot;对不起，该用户没有该订单&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      //存在的话，就判断订单的状态，此时则表明已经支付了</span><br><span class="line">      if(order.getStatus()&gt;= Const.OrderStatusEnum.PAID.getCode())&#123;</span><br><span class="line">          return ServerResponse.createBySuccess();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return ServerResponse.createByError();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>最后打开IOrderService.java文件，添加接口抽象方法，以供controller调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse queryOrderPayStatus(Integer userId, Long orderNo);   //前台轮询查询订单状态</span><br></pre></td></tr></table></figure></p><p>这样我们关于支付宝的3个接口的开发就都完成了，然后就是接口测试了，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了。感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十四）：支付宝支付功能开发</title>
      <link href="/2018/09/02/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/09/02/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前面那些都是一些铺垫，从现在开始我们正式进入到项目的支付宝实战阶段。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们将自己在支付宝里配置的zfbinfo.properties文件复制到resources文件里面，然后将支付宝官方demo中提供的4个含有sdk的jar包复制到图中所示的lib包里面。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b2b0cb663a6e2fef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你也看到了，demo中不止含有那些sdk的包，还有其他的包：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0d73a91645f34dbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里我们就不全部拷贝了，而是通过配置文件，将包的版本信息添加到配置文件里面，然后直接从中央仓库里下载即可，其实开始的pom.xml里面就已经全部包含了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b483368943400ec3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以这一步你其实是可以跳过的。接着打开main包下面的java包，在里面新建一个包<code>com.alipay.demo.trade</code>，然后将demo里面的Main和DemoHbRunner这两个文件复制过去。你会发现所有文件都报红了，那是因为我们前面4个jar包没有进行导入。打开File–&gt;project Structure–&gt;Modules，然后按照图中所示进行操作：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f346903b19e9893e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d6a1634ca5d8b6b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有这个pom.xml的底部的这行代码，还有为什么将之前的jar包都放在lib文件夹下面，那是因为服务器只会到WEB-INF下面的lib文件去找jar包，而不是其他的地方，因此我们只能将其放在lib包下面。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e003bec5125048fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下Main函数，检测一下我们的类和包是否加载正确：（出现支付宝预下单成功的字段就代表成功了，如果没有请参考上一篇笔记进行检查）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-644f3e83cac83c6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了现在正式进入到订单模块的开发，相应表的设计如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4e5cd04ea5b3eef6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付开发"><a href="#支付开发" class="headerlink" title="支付开发"></a>支付开发</h2><p>首先我们打开controller这个包下面的portal包，在里面新建一个OrderController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.portal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IOrderService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @author Envy</span><br><span class="line"> * */</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/order/&quot;)</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IOrderService iOrderService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 支付宝支付功能开发</span><br><span class="line">     * @author envy</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;pay.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse pay(HttpSession session, Long orderNo, HttpServletRequest request)&#123;</span><br><span class="line">        //这里传入三个参数，第一个是需要用户登录，第二个则是传入订单号，第三个则是利用它来获取我们servlet的上下文，拿到我们upload的文件夹，将自动生成的二维码上传到ftp服务器上面</span><br><span class="line">        //然后我们就会返回给前端一个二维码的地址，前端将二维码进行展示，用于用户进行扫码和支付</span><br><span class="line"></span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //从request中获取我们的服务器上图片的地址。</span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;);  //这里的path后面是没有斜线的就是只有upload</span><br><span class="line"></span><br><span class="line">        return iOrderService.pay(orderNo,user.getId(),path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的Impl包，我们新建一个接口的实现类OrderServiceImpl.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.alipay.api.AlipayResponse;</span><br><span class="line">import com.alipay.api.response.AlipayTradePrecreateResponse;</span><br><span class="line">import com.alipay.demo.trade.config.Configs;</span><br><span class="line">import com.alipay.demo.trade.model.ExtendParams;</span><br><span class="line">import com.alipay.demo.trade.model.GoodsDetail;</span><br><span class="line">import com.alipay.demo.trade.model.builder.AlipayTradePrecreateRequestBuilder;</span><br><span class="line">import com.alipay.demo.trade.model.result.AlipayF2FPrecreateResult;</span><br><span class="line">import com.alipay.demo.trade.service.AlipayTradeService;</span><br><span class="line">import com.alipay.demo.trade.service.impl.AlipayTradeServiceImpl;</span><br><span class="line">import com.alipay.demo.trade.utils.ZxingUtils;</span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.OrderItemMapper;</span><br><span class="line">import top.store.dao.OrderMapper;</span><br><span class="line">import top.store.pojo.Order;</span><br><span class="line">import top.store.pojo.OrderItem;</span><br><span class="line">import top.store.service.IOrderService;</span><br><span class="line">import top.store.util.BigDecimalUtil;</span><br><span class="line">import top.store.util.FTPUtil;</span><br><span class="line">import top.store.util.PropertiesUtil;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Envy</span><br><span class="line"> * */</span><br><span class="line">@Service(&quot;iOrderService&quot;)</span><br><span class="line">public class OrderServiceImpl implements IOrderService &#123;</span><br><span class="line">    //输出打印日志</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(OrderServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private OrderItemMapper orderItemMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 支付宝当面付2.0服务</span><br><span class="line">    private static AlipayTradeService tradeService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ServerResponse pay(Long orderNo,Integer userId,String path)&#123;</span><br><span class="line">        Map&lt;String, String&gt; resultMap = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">        //根据用户Id和订单号orderNo来查询订单是否存在，如果不存在</span><br><span class="line">        Order order =orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">        if(order ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;对不起，该用户没有该订单&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        resultMap.put(&quot;orderNo&quot;,String.valueOf(order.getOrderNo()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // (必填) 商户网站订单系统中唯一订单号，64个字符以内，只能包含字母、数字、下划线，</span><br><span class="line">        // 需保证商户系统端不能重复，建议通过数据库sequence生成，</span><br><span class="line">        String outTradeNo = order.getOrderNo().toString();</span><br><span class="line"></span><br><span class="line">        // (必填) 订单标题，粗略描述用户的支付目的。如“xxx品牌xxx门店消费”</span><br><span class="line">        String subject = new StringBuilder().append(&quot;光明二手商城扫码支付，订单号:&quot;).append(outTradeNo).toString();</span><br><span class="line"></span><br><span class="line">        // (必填) 订单总金额，单位为元，不能超过1亿元</span><br><span class="line">        // 如果同时传入了【打折金额】,【不可打折金额】,【订单总金额】三者,则必须满足如下条件:【订单总金额】=【打折金额】+【不可打折金额】</span><br><span class="line">        String totalAmount = order.getPayment().toString();</span><br><span class="line"></span><br><span class="line">        // (必填) 付款条码，用户支付宝钱包手机app点击“付款”产生的付款条码</span><br><span class="line">        String authCode = &quot;用户自己的支付宝付款码&quot;; // 条码示例，286648048691290423</span><br><span class="line">        // (可选，根据需要决定是否使用) 订单可打折金额，可以配合商家平台配置折扣活动，如果订单部分商品参与打折，可以将部分商品总价填写至此字段，默认全部商品可打折</span><br><span class="line">        // 如果该值未传入,但传入了【订单总金额】,【不可打折金额】 则该值默认为【订单总金额】- 【不可打折金额】</span><br><span class="line">        //        String discountableAmount = &quot;1.00&quot;; //</span><br><span class="line"></span><br><span class="line">        // (可选) 订单不可打折金额，可以配合商家平台配置折扣活动，如果酒水不参与打折，则将对应金额填写至此字段</span><br><span class="line">        // 如果该值未传入,但传入了【订单总金额】,【打折金额】,则该值默认为【订单总金额】-【打折金额】</span><br><span class="line">        String undiscountableAmount = &quot;0.0&quot;;</span><br><span class="line"></span><br><span class="line">        // 卖家支付宝账号ID，用于支持一个签约账号下支持打款到不同的收款账号，(打款到sellerId对应的支付宝账号)</span><br><span class="line">        // 如果该字段为空，则默认为与支付宝签约的商户的PID，也就是appid对应的PID</span><br><span class="line">        String sellerId = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        // 订单描述，可以对交易或商品进行一个详细地描述，比如填写&quot;购买商品3件共20.00元&quot;</span><br><span class="line">        String body = new StringBuilder().append(&quot;订单&quot;).append(outTradeNo).append(&quot;购买商品共花&quot;).append(totalAmount).append(&quot;元&quot;).toString();</span><br><span class="line"></span><br><span class="line">        // 商户操作员编号，添加此参数可以为商户操作员做销售统计</span><br><span class="line">        String operatorId = &quot;test_operator_id&quot;;</span><br><span class="line"></span><br><span class="line">        // (必填) 商户门店编号，通过门店号和商家后台可以配置精准到门店的折扣信息，详询支付宝技术支持</span><br><span class="line">        String storeId = &quot;test_store_id&quot;;</span><br><span class="line"></span><br><span class="line">        // 业务扩展参数，目前可添加由支付宝分配的系统商编号(通过setSysServiceProviderId方法)，详情请咨询支付宝技术支持</span><br><span class="line">        String providerId = &quot;2088100200300400500&quot;;</span><br><span class="line">        ExtendParams extendParams = new ExtendParams();</span><br><span class="line">        extendParams.setSysServiceProviderId(providerId);</span><br><span class="line"></span><br><span class="line">        // 支付超时，线下扫码交易定义为5分钟</span><br><span class="line">        String timeoutExpress = &quot;5m&quot;;</span><br><span class="line"></span><br><span class="line">        // 商品明细列表，需填写购买商品详细信息，</span><br><span class="line">        List&lt;GoodsDetail&gt; goodsDetailList = new ArrayList&lt;GoodsDetail&gt;();</span><br><span class="line"></span><br><span class="line">        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">        //这里是自己定义的逻辑，因为上面的goodsDetailList还没有信息，因此我们需要往里面添加信息</span><br><span class="line">        //我们根据orderId和userId来拿到这个orderItemList。然后遍历这个列表，把我们的GoodsDetail给填充上，最后添加到goodsDetailList列表中</span><br><span class="line">        List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo);</span><br><span class="line">        for(OrderItem orderItem:orderItemList)&#123;</span><br><span class="line">            // 创建一个商品信息，参数含义分别为商品id（使用国标）、名称、单价（单位为分）、数量，如果需要添加商品类别，详见GoodsDetail</span><br><span class="line">            GoodsDetail goods = GoodsDetail.newInstance(orderItem.getId().toString(), orderItem.getProductName(),</span><br><span class="line">                    (BigDecimalUtil.mut(orderItem.getCurrentUnitPrice().doubleValue(),new Double(100).doubleValue())).longValue(), orderItem.getQuantity());</span><br><span class="line"></span><br><span class="line">            goodsDetailList.add(goods);</span><br><span class="line">        &#125;</span><br><span class="line">        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 创建扫码支付请求 builder，设置请求参数</span><br><span class="line">        AlipayTradePrecreateRequestBuilder builder = new AlipayTradePrecreateRequestBuilder()</span><br><span class="line">                .setSubject(subject).setTotalAmount(totalAmount).setOutTradeNo(outTradeNo)</span><br><span class="line">                .setUndiscountableAmount(undiscountableAmount).setSellerId(sellerId).setBody(body)</span><br><span class="line">                .setOperatorId(operatorId).setStoreId(storeId).setExtendParams(extendParams)</span><br><span class="line">                .setTimeoutExpress(timeoutExpress)</span><br><span class="line">                .setNotifyUrl(PropertiesUtil.getProperty(PropertiesUtil.getProperty(&quot;alipay.callback.url&quot;)))//支付宝服务器主动通知商户服务器里指定的页面 http 路径,根据需要设置</span><br><span class="line">                .setGoodsDetailList(goodsDetailList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /** 一定要在创建AlipayTradeService之前调用Configs.init()设置默认参数</span><br><span class="line">         *  Configs会读取classpath下的zfbinfo.properties文件配置信息，如果找不到该文件则确认该文件是否在classpath目录</span><br><span class="line">         */</span><br><span class="line">        Configs.init(&quot;zfbinfo.properties&quot;);</span><br><span class="line"></span><br><span class="line">        /** 使用Configs提供的默认参数</span><br><span class="line">         *  AlipayTradeService可以使用单例或者为静态成员对象，不需要反复new</span><br><span class="line">         */</span><br><span class="line">        tradeService = new AlipayTradeServiceImpl.ClientBuilder().build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AlipayF2FPrecreateResult result = tradeService.tradePrecreate(builder);</span><br><span class="line">        switch (result.getTradeStatus()) &#123;</span><br><span class="line">            case SUCCESS:</span><br><span class="line">                logger.info(&quot;支付宝预下单成功: )&quot;);</span><br><span class="line"></span><br><span class="line">                AlipayTradePrecreateResponse response = result.getResponse();</span><br><span class="line">                dumpResponse(response);</span><br><span class="line"></span><br><span class="line">                File folder = new File(path);</span><br><span class="line">                if (!folder.exists()) &#123;</span><br><span class="line">                    folder.setWritable(true);</span><br><span class="line">                    folder.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 需要修改为运行机器上的路径</span><br><span class="line">                // 细节</span><br><span class="line">                String qrPath = String.format(path + &quot;/qr-%s.png&quot;, response.getOutTradeNo());  //这里后面一定要添加/</span><br><span class="line">                String qrFileName = String.format(&quot;qr-%s.png&quot;, response.getOutTradeNo());</span><br><span class="line">                ZxingUtils.getQRCodeImge(response.getQrCode(), 256, qrPath);</span><br><span class="line"></span><br><span class="line">                //目标文件夹</span><br><span class="line">                File targetFile = new File(path, qrFileName);</span><br><span class="line">                try &#123;</span><br><span class="line">                    FTPUtil.uploadFile(Lists.newArrayList(targetFile));</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    logger.error(&quot;上传二维码异常&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(&quot;qrPath:&quot; + qrPath);</span><br><span class="line">                String qrUrl = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;) + targetFile.getName();</span><br><span class="line">                resultMap.put(&quot;qrUrl&quot;, qrUrl);</span><br><span class="line">                return ServerResponse.createBySuccess(resultMap);</span><br><span class="line">            case FAILED:</span><br><span class="line">                logger.error(&quot;支付宝预下单失败!!!&quot;);</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;支付宝预下单失败!!!&quot;);</span><br><span class="line"></span><br><span class="line">            case UNKNOWN:</span><br><span class="line">                logger.error(&quot;系统异常，预下单状态未知!!!&quot;);</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;系统异常，预下单状态未知!!!&quot;);</span><br><span class="line"></span><br><span class="line">            default:</span><br><span class="line">                logger.error(&quot;不支持的交易状态，交易返回异常!!!&quot;);</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;不支持的交易状态，交易返回异常!!!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 简单打印应答</span><br><span class="line">    private void dumpResponse(AlipayResponse response) &#123;</span><br><span class="line">        if (response != null) &#123;</span><br><span class="line">            logger.info(String.format(&quot;code:%s, msg:%s&quot;, response.getCode(), response.getMsg()));</span><br><span class="line">            if (StringUtils.isNotEmpty(response.getSubCode())) &#123;</span><br><span class="line">                logger.info(String.format(&quot;subCode:%s, subMsg:%s&quot;, response.getSubCode(),</span><br><span class="line">                        response.getSubMsg()));</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(&quot;body:&quot; + response.getBody());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面的代码是非常的多，而且都是核心代码，所以我需要进行说明：<br><strong>1、</strong>首先用户支付以后得到的是一个支付订单，订单里面有很多信息，因此我们使用map这个图来进行数据存取，key是订单号，value则是订单值。然后我们需要去数据库里面查询订单是否存在，，所以看到这行代码<code>Order order=orderMapper.selectOrderByUserIdAndOrderNo(userId,orderNo);</code>就说明我们需要打开OrderMapper.java文件，新增sql查询方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">Order selectOrderByUserIdAndOrderNo(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;OrderNo&quot;) Long OrderNo);</span><br></pre></td></tr></table></figure></p><p>接着打开OrderMapper.xml，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectOrderByUserIdAndOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line">  and order_no =#&#123;OrderNo&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>后面的那些代码就是支付宝的当面付生成二维码的核心代码，你打开Main.java文件，找到test_trade_precreate这个方法，大概是第371行代码到文件末尾。大家注意两行<code>///////</code>之间的代码，这里是自己定义的逻辑，因为上面的goodsDetailList还没有信息，因此我们需要往里面添加信息。我们根据orderId和userId来拿到这个orderItemList，然后遍历这个列表，把我们的GoodsDetail给填充上，最后添加到goodsDetailList列表中。</p><p>同样看到这行代码<code>List&lt;OrderItem&gt; orderItemList =orderItemMapper.getOrderItemByUserIdAndOrderNo(userId,orderNo);</code>就说明我们需要打开OrderItemMapper.java文件，新增sql查询方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">List&lt;OrderItem&gt; getOrderItemByUserIdAndOrderNo(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;orderNo&quot;)Long orderNo);</span><br></pre></td></tr></table></figure></p><p>接着打开OrderItemMapper.xml，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getOrderItemByUserIdAndOrderNo&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_order_item</span><br><span class="line">  where order_no =#&#123;orderNo&#125;</span><br><span class="line">  and user_id =#&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>3、</strong>注意这行代码<code>setNotifyUrl(PropertiesUtil.getProperty(PropertiesUtil.getProperty(&quot;alipay.callback.url&quot;)))//支付宝服务器主动通知商户服务器里指定的页面http路径,根据需要设置</code>。针对这个，我们需要打开store.propertise文件，配置这个属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alipay.callback.url=http://store.licheetools.top/order/alipay_callback.do</span><br></pre></td></tr></table></figure></p><p>当然如果前面配置了这个信息，现在就可以不配置了。<br><strong>4、</strong>后面代码的意思生成的二维码如何保存到服务器上，以及存放的位置。这个<code>dumpResponse</code>函数你就可以直接拿来使用了。</p><p>最后别忘记在sevcice包下面新建一个IOrderService接口类，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line"></span><br><span class="line">public interface IOrderService &#123;</span><br><span class="line">    ServerResponse pay(Long orderNo, Integer userId, String path);   //支付宝当面付</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样关于支付宝当面付的功能开发，我们就完成了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十三）：支付宝官方文档简要说明</title>
      <link href="/2018/09/01/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/09/01/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%AE%80%E8%A6%81%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本部分我们来进行支付宝官方文档简要说明，里面有些东西挺难理解的。。。</p><h2 id="沙箱环境"><a href="#沙箱环境" class="headerlink" title="沙箱环境"></a>沙箱环境</h2><p>首先点击这里进行<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=tool" target="_blank" rel="noopener">注册</a>，选择个人开发即可。接着点击<a href="https://docs.open.alipay.com/54/104506/" target="_blank" rel="noopener">这里</a>下载当面付DEMO，这里选择java版。然后可以点击<a href="https://docs.open.alipay.com/54/103419/" target="_blank" rel="noopener">这里</a>参看下载文档。</p><p>然后就直接打开Demo项目，这是一个web项目，需要配置jdk和其他环境，具体如下：打开zfbinfo.properties文件，修改以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">open_api_domain = https://openapi.alipay.com/gateway.do</span><br><span class="line">mcloud_api_domain = http://mcloudmonitor.com/gateway.do</span><br><span class="line">pid = 此处请填写你的PID</span><br><span class="line">appid = 此处请填写你当面付的APPID</span><br></pre></td></tr></table></figure></p><p>分别对应这个<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">沙箱页面</a>的图中所示信息：<br>第一行代码对应2，第二行不用修改，第三行对应1，第四行对应3:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0c244279f110ab44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是RSA私钥、公钥和支付宝公钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># RSA私钥、公钥和支付宝公钥</span><br><span class="line">private_key = 此处请填写你的商户私钥且转PKCS8格式</span><br><span class="line">public_key = 此处请填写你的商户公钥</span><br></pre></td></tr></table></figure></p><p>点击这里下载<a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">生成RSA密钥工具</a>，然后按照要求生成密匙：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cc73a1c96d719aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是SHA256withRsa对应支付宝公钥（其中SHAwithRsa公钥已经废弃）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alipay_public_key=</span><br></pre></td></tr></table></figure></p><p>回到<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">沙箱环境页面</a>，点击出现的图中所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d56db2e5cd902f25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-434334e4b54d7522.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后把刚才上面的public_key复制进去，就会得到支付宝公钥，填到那里即可：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-12aa1bf0ae50c79c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们相关的配置就弄好了，接下来就可以直接去运行main方法了（不要设置tomcat服务器）</p><p>运行结果里面会包含一张二维码链接：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2a583ccf1891e7a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们去百度搜索二维码生成，把链接放进去，就会显示二维码。或者点击这里<a href="https://cli.im/" target="_blank" rel="noopener">草料二维码</a>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-794231b076bc6b1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意</strong>如果出现下面的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read time out</span><br><span class="line">......................</span><br><span class="line">com.alipay.demo.trade.Main test_trade_precreate</span><br><span class="line">严重: 系统异常，预下单状态未知!!!</span><br></pre></td></tr></table></figure></p><p>请查看这篇文章：<a href="https://my.oschina.net/u/3659713/blog/2992158" target="_blank" rel="noopener">支付宝沙箱demo运行出现read timed out的解决办法</a>，因此从这里开始，我java版本变成了<strong>java8</strong>，不再使用java10了，大家一定要注意。</p><p>接着你点击<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=tool" target="_blank" rel="noopener">这里</a>下载沙箱安卓版：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cf308da3125b4668.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=account" target="_blank" rel="noopener">这里</a>获取买家和卖家的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e20142ce3f78b312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记住沙箱APP账号只能是上面的，不能使用自己真实的信息。</p><p>具体的可以参考这篇文章，这篇挺详细的：<a href="https://blog.csdn.net/DuTianTian_csdn/article/details/80777780" target="_blank" rel="noopener">支付宝沙箱环境demo测试</a>和这一篇<a href="http://blog.51cto.com/zero01/2128909" target="_blank" rel="noopener">【Java版】接入支付宝当面付功能-沙箱环境</a></p><p>然后扫描二维码，就能付款了。</p><p>注意在使用java8的时候，需要修改java10的配置：打开File–&gt;Project Structure，然后具体的配置按照图片所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d1869905d8fab536.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b00ccb4206321854.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ef970506705fe2d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-936c4c3d3763d018.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意上面4个地方的配置，一个都不能少，否则就会报错，切记切记。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十二）：支付宝支付功能对接要点介绍</title>
      <link href="/2018/08/31/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E5%AF%B9%E6%8E%A5%E8%A6%81%E7%82%B9%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/08/31/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD%E5%AF%B9%E6%8E%A5%E8%A6%81%E7%82%B9%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本部分我们来完成支付宝支付功能的开发，具体包括支付宝对接，支付回调以及查询支付状态的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>本模块主要介绍支付宝对接，支付回调以及查询支付状态这三个部分。</p><h2 id="学会技能"><a href="#学会技能" class="headerlink" title="学会技能"></a>学会技能</h2><p>在本模块中，你将会学到支付宝对接核心文档，调用支付宝支付功能官方 Demo；解析支付宝 SDK 对接源码；RSA1 和 RSA2 验证签名及加密；避免支付宝重复通知和数据校验；natapp 外网穿透和 Tomcat remote debug以及生成二维码，并持久化到图片服务器等功能。</p><h2 id="数据表的设计"><a href="#数据表的设计" class="headerlink" title="数据表的设计"></a>数据表的设计</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3387e341a1b80242.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付宝支付功能对接要点介绍"><a href="#支付宝支付功能对接要点介绍" class="headerlink" title="支付宝支付功能对接要点介绍"></a>支付宝支付功能对接要点介绍</h2><p>1、一些重要的官方文档<br>2、沙箱调试环境（买家账号测试，商家账号测试）<br>3、支付宝扫码支付主业务流程<br>4、支付宝扫码支付流程<br>5、支付宝扫码支付重要的字段<br>6、支付宝扫码支付重要细节<br>7、支付宝扫码支付对接技巧<br>8、支付宝扫码支付官方 Demo 调试</p><h2 id="沙箱调试环境"><a href="#沙箱调试环境" class="headerlink" title="沙箱调试环境"></a>沙箱调试环境</h2><p>蚂蚁沙箱环境（Beta）：是协助开发者进行接口功能开发及主要功能联调的辅助环境，沙箱环境模拟了开放平台部分产品的主要功能和主要逻辑（参考“沙箱支持产品列表”），为保证沙箱文档，沙箱环境测试数据会进行定期数据清理，Beta 测试阶段每日的 21:00 至次日的 9:00 为维护时间，在此时间内沙箱环境部分功能可能会不可用。</p><p>为保证沙箱稳定，沙箱环境测试数据会进行定期数据清理。Beta测试阶段每周日中午12点至每周一中午12点为维护时间。在此时间内沙箱环境部分功能可能会不可用，敬请谅解。</p><h2 id="支付宝扫码支付主业务流程"><a href="#支付宝扫码支付主业务流程" class="headerlink" title="支付宝扫码支付主业务流程"></a>支付宝扫码支付主业务流程</h2><p>这里的流程其实最主要是指当面付这个模块，你可以点击<a href="https://docs.open.alipay.com/194/105072/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付主业务流程：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-921ba25f7110e1d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>以及条码支付，所谓的条码支付是指：支付宝给到线下传统行业的一种收款方式。商户使用扫码枪等条码识别设备扫描用户支付宝钱包上的条码/二维码，完成收款。用户仅需出示付款码，所有操作由商户端完成。</p><p>你可以点击<a href="https://docs.open.alipay.com/194/105170/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝条码支付流程：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9f3a40283e7c7430.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付宝扫码支付重要的字段"><a href="#支付宝扫码支付重要的字段" class="headerlink" title="支付宝扫码支付重要的字段"></a>支付宝扫码支付重要的字段</h2><p>你可以点击<a href="https://docs.open.alipay.com/194/105170/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付重要的字段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b42b95087e37c19d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有其他的关键字段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-54bec8230875109b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="交易状态说明"><a href="#交易状态说明" class="headerlink" title="交易状态说明"></a>交易状态说明</h3><p>你可以点击<a href="https://docs.open.alipay.com/59/103672" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付交易状态说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-66df13fef4e1da13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="通知触发条件"><a href="#通知触发条件" class="headerlink" title="通知触发条件"></a>通知触发条件</h2><p>你可以点击<a href="https://docs.open.alipay.com/59/103666/" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付通知触发条件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6e327f3f0d48f885.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="支付渠道说明"><a href="#支付渠道说明" class="headerlink" title="支付渠道说明"></a>支付渠道说明</h2><p>你可以点击<a href="https://docs.open.alipay.com/common/103259" target="_blank" rel="noopener">这里</a>或者参看下面的图片来了解支付宝扫码支付渠道说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-134ccf1044058512.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们后面会使用到第二个，支付宝账户，也就是余额。</p><h2 id="支付宝扫码支付的重要细节"><a href="#支付宝扫码支付的重要细节" class="headerlink" title="支付宝扫码支付的重要细节"></a>支付宝扫码支付的重要细节</h2><p>1、主动轮询和回调的区别</p><blockquote><p>我从网上找了一个比较有意思的介绍，你可以看一下：<br>轮询：过10分钟就到女朋友宿舍前面去看她有没有回来、没回来我就再去打游戏。<br>监听：我搬个凳子坐到她宿舍前、直到她回来。<br>回调：在她门口贴个条子：回来后请打电话至011 。</p></blockquote><p>2、避免单边账</p><blockquote><p>所谓“单边账”，即完成取(存)款操作后，银行与用户只有一方账面发生相应变化。</p></blockquote><p>3、同步请求的加签和验证签名</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9eb0f4cfc84eff61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2137c76c44f5720c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、回调的验证（签名、金额、订单号、订单状态、交易状态、商户 id）</p><p>5、过滤掉重复的通知</p><p>6、一定要验证并确保可接受的异步通知是支付宝发出的</p><p>7、回调请求返回</p><blockquote><p>程序执行完后必须打印输出“success”（不包含引号），如果商户反馈给支付宝的字符不是 success 这 7 个字符，支付宝服务器会不断重发通知，直到超过 24 小时 22 分钟，一般情况下，25 小时以内完成 8 次通知。（通知的间隔频率一般是：4m，10m，10m，1h，2h，6h，15h）</p></blockquote><h2 id="支付宝扫码支付对接技巧"><a href="#支付宝扫码支付对接技巧" class="headerlink" title="支付宝扫码支付对接技巧"></a>支付宝扫码支付对接技巧</h2><h3 id="回调的调试方法"><a href="#回调的调试方法" class="headerlink" title="回调的调试方法"></a>回调的调试方法</h3><p>1、路由器设置开放本地到外网（不推荐）</p><p>2、外网远程 debug（保持远端代码版本和本地代码一致，及时关闭开放的debug端口）</p><p>3、内网穿透（ngrok，natapp、花生壳）</p><h3 id="外网远程debug"><a href="#外网远程debug" class="headerlink" title="外网远程debug"></a>外网远程debug</h3><p>1、保持远端代码版本和本地代码版本一致</p><p>2、执行 sudo vim ${tomcat}/bin/catalina.sh 进行编辑</p><p>3、添加如下配置，其中 address 为开放远程 debug 的端口号 CATALINA_OPTS=”-server -Xdebug -Xnoagent -Djava.compile=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005”</p><p>4、把开放远程 debug 的端口加到防火墙配置中</p><p>5、及时关闭开放的 debug 端口</p><p>6、编辑 sudo vim /etc/sysconfig/iptables</p><p>7、添加如下配置 -A INPUT -p tcp -m tcp –dport 5005 -j ACCEPT</p><p>8、:wq 保存退出</p><p>9、重启防火墙 sudo service iptables restart</p><h3 id="内网穿透（ngrok、natapp、花生壳）"><a href="#内网穿透（ngrok、natapp、花生壳）" class="headerlink" title="内网穿透（ngrok、natapp、花生壳）"></a>内网穿透（ngrok、natapp、花生壳）</h3><p>1、登录 <a href="https://natapp.cn" target="_blank" rel="noopener">https://natapp.cn</a></p><p>2、注册账号、可以选择是否购买隧道还是使用免费隧道</p><p>3、设置对外开放的端口</p><p>4、下载对应的客户端，如果是 Linux 或 mac 请执行 sudo chmod a+x 赋予用户、用户组、其他用户执行权限</p><p>5、按照官网操作说明运行程序，加入 authtoken 参数</p><p>6、通过开放的外网域名进行访问测试</p><p>这样本篇关于支付宝支付功能对接要点介绍就到这里了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十一）：收货地址模块开发</title>
      <link href="/2018/08/30/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/30/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%94%B6%E8%B4%A7%E5%9C%B0%E5%9D%80%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来完成收货地址模块功能的开发，具体包括收货地址的增删改查操作，分页列表以及地址详情等功能的开发，里面涉及到的知识点挺多的，需要好好理解。</p><h2 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h2><p>本模块具体包括以下几个功能：添加地址；删除地址；更新地址；地址列表；地址分页和地址详情等。</p><h2 id="学会技能"><a href="#学会技能" class="headerlink" title="学会技能"></a>学会技能</h2><p>在本模块中，你将会学到SpringMVC数据绑定中对象绑定；Mybatis 自动生成主键、配置和使用；如何避免横向越权漏洞的巩固。</p><h2 id="数据表的设计"><a href="#数据表的设计" class="headerlink" title="数据表的设计"></a>数据表的设计</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-97a8dd7b5126731e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="收货地址增加"><a href="#收货地址增加" class="headerlink" title="收货地址增加"></a>收货地址增加</h2><p>首先我们打开controller这个包下面的portal包，在里面新建一个ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.portal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IShippingService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/shipping/&quot;)  //这是我们对整个前台商品功能配置的一个类似于namespace的东西</span><br><span class="line">public class ShippingController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IShippingService iShippingService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的增加</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;add.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse add(HttpSession session, Shipping shipping)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line">        //实现我们前台收货地址增加的逻辑</span><br><span class="line">        return iShippingService.add(user.getId(),shipping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包，新建IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line"></span><br><span class="line">public interface IShippingService &#123;</span><br><span class="line">    ServerResponse add(Integer userId, Shipping shipping);    //前台--收货地址的增加</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开sevcice包下面的Impl包，我们新建一个接口的实现类ShippingServiceImpl.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.google.common.collect.Maps;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.ShippingMapper;</span><br><span class="line">import top.store.pojo.Shipping;</span><br><span class="line">import top.store.service.IShippingService;</span><br><span class="line"></span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iShippingService&quot;)</span><br><span class="line">public class ShippingServiceImpl implements IShippingService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ShippingMapper shippingMapper;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的增加</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse add(Integer userId,Shipping shipping)&#123;</span><br><span class="line">        shipping.setUserId(userId);   //shipping对象中的userId，我们直接从前台登录中的session中获取</span><br><span class="line">        int rowCount =shippingMapper.insert(shipping);   //这样我们刚才获取到的userId就能直接使用了</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            //我们和前端约定，增加后返回shippingId，而且这个key就是shippingId，这样我们就能直接利用map来获取相关信息了</span><br><span class="line">            Map resultMap = Maps.newHashMap();</span><br><span class="line">            resultMap.put(&quot;shippingId&quot;,shipping.getId());</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;创建新地址成功！&quot;,resultMap);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;创建新地址失败&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，我们这里shipping对象中的userId，是直接从前台登录中的session中获取的。我们希望使用map来完成添加收货地址的功能，但是数据库中的<code>shippingMapper.insert(shipping);</code>里面主键id不能立即获取并使用，因此我们需要将主键赋值到自己定义的keyProperty中，这样就能立即获取了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- useGeneratedKeys=&quot;true&quot;把新增加的主键赋值到自己定义的keyProperty（id）中 --&gt;</span><br><span class="line">&lt;insert id=&quot;insert&quot; parameterType=&quot;top.store.pojo.Shipping&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line">  insert into store_shipping (id, user_id, receiver_name, </span><br><span class="line">    receiver_phone, receiver_mobile, receiver_province, </span><br><span class="line">    receiver_city, receiver_district, receiver_address, </span><br><span class="line">    receiver_zip, create_time, update_time</span><br><span class="line">    )</span><br><span class="line">  values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;userId,jdbcType=INTEGER&#125;, #&#123;receiverName,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;receiverPhone,jdbcType=VARCHAR&#125;, #&#123;receiverMobile,jdbcType=VARCHAR&#125;, #&#123;receiverProvince,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;receiverCity,jdbcType=VARCHAR&#125;, #&#123;receiverDistrict,jdbcType=VARCHAR&#125;, #&#123;receiverAddress,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;receiverZip,jdbcType=VARCHAR&#125;, now(), now()</span><br><span class="line">    )</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">&lt;!--useGeneratedKeys 取值范围true|false 默认值是：false。 含义：设置是否使用JDBC的getGenereatedKeys方法获取主键并赋值到keyProperty设置的领域模型属性中。--&gt;</span><br></pre></td></tr></table></figure></p><p>也就是第二行代码变成上面的样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insert&quot; parameterType=&quot;top.store.pojo.Shipping&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址增加的功能就实现了，接下来完成收货地址删除的功能。</p><h2 id="收货地址删除"><a href="#收货地址删除" class="headerlink" title="收货地址删除"></a>收货地址删除</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的删除</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;del.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse del(HttpSession session,Integer shippingId)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址删除的逻辑</span><br><span class="line">    return iShippingService.del(user.getId(),shippingId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的删除</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;String&gt; del(Integer userId,Integer shippingId)&#123;</span><br><span class="line">        //注意这里会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的</span><br><span class="line">//       int rowCount = shippingMapper.deleteByPrimaryKey(shippingId);</span><br><span class="line">        int rowCount = shippingMapper.deleteShippingByUserIdAndShippingId(userId,shippingId);</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;删除收货地址成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;删除收货地址失败&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注意如果你使用<code>int rowCount = shippingMapper.deleteByPrimaryKey(shippingId);</code>就会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">int deleteShippingByUserIdAndShippingId(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;shippingId&quot;) Integer shippingId);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=&quot;deleteShippingByUserIdAndShippingId&quot;  parameterType=&quot;map&quot;&gt;</span><br><span class="line">  delete from store_shipping</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line">  and id =#&#123;shippingId&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; del(Integer userId,Integer shippingId);    //前台--收货地址的删除</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址删除的功能就实现了，接下来完成收货地址修改的功能。</p><h2 id="收货地址修改"><a href="#收货地址修改" class="headerlink" title="收货地址修改"></a>收货地址修改</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的更新</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;update.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse update(HttpSession session,Shipping shipping)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址更新的逻辑</span><br><span class="line">    return iShippingService.update(user.getId(),shipping);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的更新</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse update(Integer userId,Shipping shipping)&#123;</span><br><span class="line">        shipping.setUserId(userId);   //shipping对象中的userId，我们直接从前台登录中的session中获取</span><br><span class="line">        //注意这里会产生横向越权问题，因为这个delete语句里面没有与用户进行绑定，因此是不可以使用的</span><br><span class="line">//        int rowCount =shippingMapper.insert(shipping);   //这样我们刚才获取到的userId就能直接使用了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //自己定义的sql语句方法</span><br><span class="line">        int rowCount =shippingMapper.updateByShipping(shipping);</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            //注意这里不需要将id进行返回给前端，因为前面已经获取到了</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;更新新地址成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;更新新地址失败&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注意如果你使用<code>int rowCount =shippingMapper.insert(shipping);</code>就会产生横向越权问题，因为这个update语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int updateByShipping(Shipping record);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意这里面的userId是不可以更改的，所以一定要从set里面去掉，而且and语句最后的括号一定要去掉--&gt;</span><br><span class="line">&lt;update id=&quot;updateByShipping&quot; parameterType=&quot;top.store.pojo.Shipping&quot;&gt;</span><br><span class="line">  update store_shipping</span><br><span class="line">  set</span><br><span class="line">    receiver_name = #&#123;receiverName,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_phone = #&#123;receiverPhone,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_mobile = #&#123;receiverMobile,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_province = #&#123;receiverProvince,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_city = #&#123;receiverCity,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_district = #&#123;receiverDistrict,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_address = #&#123;receiverAddress,jdbcType=VARCHAR&#125;,</span><br><span class="line">    receiver_zip = #&#123;receiverZip,jdbcType=VARCHAR&#125;,</span><br><span class="line">    create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">    update_time = now()</span><br><span class="line">  where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  and user_id = #&#123;userId,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>看到没有，这里的update语句和里面提供sql语句非常相似，但是记住里面的userId是不可以更改的，所以一定要从set里面去掉，而且and语句最后的括号一定要去掉。关于第一行代码的来源，大家可以自行查看原生的sql语句。</p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse update(Integer userId,Shipping shipping);   //前台--收货地址的更新</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址修改的功能就实现了，接下来完成收货地址查询的功能。</p><h2 id="收货地址查询"><a href="#收货地址查询" class="headerlink" title="收货地址查询"></a>收货地址查询</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的查询</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;select.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;Shipping&gt; select(HttpSession session,Integer shippingId)&#123;   //这里是SpringMVC数据绑定中对象绑定</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址查询的逻辑</span><br><span class="line">    return iShippingService.select(user.getId(),shippingId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     * 前台--收货地址的查询</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;Shipping&gt; select(Integer userId,Integer shippingId)&#123;</span><br><span class="line">        //注意这里会产生横向越权问题，因为这个select语句里面没有与用户进行绑定，因此是不可以使用的</span><br><span class="line">//        int rowCount =shippingMapper.selectByPrimaryKey(shippingId);</span><br><span class="line">        Shipping shipping =shippingMapper.selectByUserIdAndShippingId(userId,shippingId);</span><br><span class="line">        if(shipping == null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无法查询到该地址&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createBySuccess(&quot;该地址查询到了！&quot;,shipping);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>注意如果你使用<code>int rowCount =shippingMapper.selectByPrimaryKey(shippingId);</code>就会产生横向越权问题，因为这个select语句里面没有与用户进行绑定，因此是不可以使用的，你需要自己定义一个查询的方法。打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">Shipping selectByUserIdAndShippingId(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;shippingId&quot;) Integer shippingId);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByUserIdAndShippingId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">        from store_shipping</span><br><span class="line">        where id = #&#123;shippingId&#125;</span><br><span class="line">        and user_id = #&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;Shipping&gt; select(Integer userId,Integer shippingId);   //前台--收货地址的查询</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址查询的功能就实现了，接下来完成收货地址详情分页的功能。</p><h2 id="收货地址详情分页"><a href="#收货地址详情分页" class="headerlink" title="收货地址详情分页"></a>收货地址详情分页</h2><p>老规矩，打开ShippingController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台--收货地址的列表分页</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; list(HttpSession session, @RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum, @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们前台收货地址的列表分页的逻辑</span><br><span class="line">  return iShippingService.list(user.getId(),pageNum,pageSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingServiceImpl.java文件，里面新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * 前台--收货地址的列表分页</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; list(Integer userId,int pageNum,int pageSize)&#123;</span><br><span class="line">    //开始分页</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">    //根据用户id来查询shipping对象</span><br><span class="line">    List&lt;Shipping&gt; shippingList =shippingMapper.selectShippingByUserId(userId);</span><br><span class="line"></span><br><span class="line">    //构造PageInfo对象</span><br><span class="line">    PageInfo pageInfo =new PageInfo(shippingList);</span><br><span class="line"></span><br><span class="line">    //返回PageInfo对象</span><br><span class="line">    return ServerResponse.createBySuccess(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意如看到<code>shippingMapper.selectShippingByUserId(userId);</code>就知道应该打开ShippingMapper.java文件，里面写入一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Shipping&gt; selectShippingByUserId(Integer userId);</span><br></pre></td></tr></table></figure></p><p>接着打开ShippingMapper.xml文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意一个参数使用int或者map都是可以的--&gt;</span><br><span class="line">&lt;select id=&quot;selectShippingByUserId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_shipping</span><br><span class="line">    where user_id =#&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IShippingService.Java文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; list(Integer userId, int pageNum, int pageSize);     //前台--收货地址的列表分页</span><br></pre></td></tr></table></figure></p><p>这样我们收货地址详情分页的功能就实现了，至此所有关于购物车的模块功能就全部实现了。接下来是模块测试，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二十）：购物车商品的状态设置</title>
      <link href="/2018/08/29/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E7%9A%84%E7%8A%B6%E6%80%81%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/08/29/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%95%86%E5%93%81%E7%9A%84%E7%8A%B6%E6%80%81%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇主要介绍如何实现购物车商品的全选，全反选，单选，单反选以及购物车商品数量查询等功能。</p><h2 id="购物车商品的全选"><a href="#购物车商品的全选" class="headerlink" title="购物车商品的全选"></a>购物车商品的全选</h2><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品全选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;select_all.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; selectAll(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品全选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelect(user.getId(),null,Const.Cart.CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品全选或者全反选</span><br><span class="line"> * @author envy</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;CartVo&gt; selectOrUnSelect(Integer userId,Integer productId,Integer checked)&#123;</span><br><span class="line">    cartMapper.checkedOrUncheckedProduct(userId,productId,checked);</span><br><span class="line">    return this.list(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下，之前我们最后返回的都是两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">return ServerResponse.createBySuccess(cartVo);</span><br></pre></td></tr></table></figure></p><p>但是呢，前面我们也说过因为这两行代码已经被list进行封装了，因此现在直接调用list即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return this.list(userId);</span><br></pre></td></tr></table></figure></p><p>看到<code>cartMapper.checkedOrUncheckedProduct(userId,productId,checked);</code>这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">int checkedOrUncheckedProduct(@Param(&quot;userId&quot;) Integer userId,@Param(&quot;productId&quot;)Integer productId,@Param(&quot;checked&quot;) Integer checked);</span><br></pre></td></tr></table></figure></p><p>紧接着去CartMapper.xml文件里面新增sql查询语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注意set多个值时，需要用逗号隔开--&gt;</span><br><span class="line">  &lt;update id=&quot;checkedOrUncheckedProduct&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    update store_cart</span><br><span class="line">    set checked  =#&#123;checked&#125;，</span><br><span class="line">    update_time =now()</span><br><span class="line">    where user_id =#&#123;userId&#125;</span><br><span class="line">&lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">    and product_id = #&#123;productId&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>有人可能要问了，你全选与全反选是不需要商品id的，那在这里写干嘛，的确是不需要，但是我们后面要实现的单选和单反选却是需要的，因此写在这里只是为了后面代码更好的复用。这也就是我们为什么将参数productId设置为null的原因。<br>最后打开ICartService.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; selectOrUnSelectAll(Integer userId,Integer productId,Integer checked);   //前台购物车商品全选或者全反选,或者单选，或者单反选</span><br></pre></td></tr></table></figure></p><p>接下来完成购物车商品的全反选功能，这个和全选相反，你除了需要修改控制器controller里面的代码以外，其余的代码就可以不要修改了。</p><h2 id="购物车商品的全反选"><a href="#购物车商品的全反选" class="headerlink" title="购物车商品的全反选"></a>购物车商品的全反选</h2><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品全反选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;un_select_all.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; unSelectAll(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品全选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelectAll(user.getId(),null,Const.Cart.UN_CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就可以了，是不是超级简单。</p><h2 id="购物车商品的单选"><a href="#购物车商品的单选" class="headerlink" title="购物车商品的单选"></a>购物车商品的单选</h2><p>想起我们前面做的工作了莫，这个依旧很简单，和我们购物车商品的全反选操作一样。打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品单选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;select_one.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; selectOne(HttpSession session,Integer productId)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品单选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelect(user.getId(),productId,Const.Cart.CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说了两次，那么购物车商品的单反选，你也就知道了吧！</p><h2 id="购物车商品的单反选"><a href="#购物车商品的单反选" class="headerlink" title="购物车商品的单反选"></a>购物车商品的单反选</h2><p>打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品单反选</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;un_select_one.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; UnSelectOne(HttpSession session,Integer productId)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品单反选的逻辑</span><br><span class="line">    return iCartService.selectOrUnSelect(user.getId(),productId,Const.Cart.UN_CHECKED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来完成购物车商品数量查询这个功能，这个也还是简单的。</p><h2 id="购物车商品数量查询"><a href="#购物车商品数量查询" class="headerlink" title="购物车商品数量查询"></a>购物车商品数量查询</h2><p>这里的购物车商品数量查询是说，当你查询当前用户的购物车里面的商品数量时,假设一个商品有 8个,那么数量就是 8，我们是不按照商品种类来算，而是按数量算的，这也是目前电商的通用做法。</p><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品数量查询</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;get_cart_product_count.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;Integer&gt; getCartProductCount(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录，那么就返回0</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createBySuccess(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们购物车商品数量查询的逻辑</span><br><span class="line">    return iCartService.getCartProductCount(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台购物车商品数量查询</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;Integer&gt; getCartProductCount(Integer userId)&#123;</span><br><span class="line">    if(userId ==null)&#123;</span><br><span class="line">        return ServerResponse.createBySuccess(0);</span><br><span class="line">    &#125;</span><br><span class="line">    //购物车商品数量查询</span><br><span class="line">    return ServerResponse.createBySuccess(cartMapper.selectCartProductCount(userId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到<code>cartMapper.selectCartProductCount(userId)</code>这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int selectCartProductCount(Integer userId);</span><br></pre></td></tr></table></figure></p><p>然后去CartMapper.xml文件里面新增sql语句：(其中select * as count 是给它起了一个别称)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartProductCount&quot; parameterType=&quot;int&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">  select sum(quantity) as count</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id = #&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>不过这样做有一个问题，就是我们前面返回的是一个int，假设我们这个sql语句最后返回的是0,而你知道Int类型是不能传给0给它的，因此可以将代码代码修改如下，使用<code>IFNULL(sum(quantity),0)</code>，就是说默认就是0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartProductCount&quot; parameterType=&quot;int&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">  select IFNULL(sum(quantity),0) as count</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id = #&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>当然你也可以使用另一种方法，就是修改CartMapper.java文件的返回类型，修改为<code>Integer</code>这一也是可以的。</p><p>然后就是关于购物车模块的接口测试了，很简单，大家可以参看我提供的接口文档自行进行测试，这里就不进行了。</p><p>这样我们本篇关于如何实现购物车商品的全选，全反选，单选，单反选以及购物车商品数量查询等功能的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十九）：购物车更新删除查询商品</title>
      <link href="/2018/08/28/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%9F%A5%E8%AF%A2%E5%95%86%E5%93%81/"/>
      <url>/2018/08/28/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%9B%B4%E6%96%B0%E5%88%A0%E9%99%A4%E6%9F%A5%E8%AF%A2%E5%95%86%E5%93%81/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇主要介绍如何将更新、删除和查询购物车里面的商品功能进行实现。</p><h2 id="更新购物车商品"><a href="#更新购物车商品" class="headerlink" title="更新购物车商品"></a>更新购物车商品</h2><p>其实所谓的更新购物车商品就是更新商品在购物车里面的数量罢了。我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *  前台修改购物车里面的商品（其实就是商品的数量）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;update.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; update(HttpSession session, Integer productId, Integer count)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //实现我们修改购物车里面的商品的逻辑</span><br><span class="line">    return iCartService.update(user.getId(),productId,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台修改购物车里面的商品（其实就是商品的数量）</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;CartVo&gt; update(Integer userId,Integer productId,Integer count)&#123;</span><br><span class="line">    //传入的参数不正确</span><br><span class="line">    if(productId ==null ||count ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //去购物车里面更新相关的信息</span><br><span class="line">    Cart cart  =cartMapper.selectCartByUserIdAndProductId(userId,productId);</span><br><span class="line">    cart.setQuantity(count);</span><br><span class="line">    cartMapper.updateByPrimaryKeySelective(cart);</span><br><span class="line"></span><br><span class="line">    CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">    return ServerResponse.createBySuccess(cartVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后打开ICartService.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; update(Integer userId,Integer productId,Integer count);    //前台修改购物车里面的商品（其实就是商品的数量）</span><br></pre></td></tr></table></figure></p><h2 id="删除购物车商品"><a href="#删除购物车商品" class="headerlink" title="删除购物车商品"></a>删除购物车商品</h2><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *  前台删除购物车里面的商品</span><br><span class="line">    * @author lenovo</span><br><span class="line">    * */</span><br><span class="line">   @RequestMapping(value = &quot;delete_product.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">   @ResponseBody   //自动序列化json功能</span><br><span class="line">   public ServerResponse&lt;CartVo&gt; deleteProduct(HttpSession session, String productIds)&#123;</span><br><span class="line">       //注意这里不需要传递数量，而且可以同时删除多个，因此我们和前端约定使用String类型的productIds同时多个参数以逗号进行分割</span><br><span class="line">       //验证用户是否登录</span><br><span class="line">       User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">       //未登录需要用户强制登录</span><br><span class="line">       if(user ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //实现我们删除购物车里面的商品的逻辑</span><br><span class="line">       return iCartService.deleteProduct(user.getId(),productIds);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *  前台删除购物车里面的商品</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;CartVo&gt; deleteProduct(Integer userId,String productIds)&#123;</span><br><span class="line">        //如果我们自己使用Java提供的方法，我们需要把productIds转成数组，然后再遍历数组添加到集合中</span><br><span class="line">//        String[] productStringList =productIds.split(&quot;,&quot;);</span><br><span class="line">//        List&lt;String&gt; productList =new ArrayList&lt;&gt;();</span><br><span class="line">//        for(String product :productList)&#123;</span><br><span class="line">//          productList.add(product);</span><br><span class="line">//       &#125;</span><br><span class="line"></span><br><span class="line">        //因此，这里我们直接使用guava提供的split方法，直接将其转化为列表，其中on代表以什么为分割线，后面的splitToList就代表转成什么函数</span><br><span class="line">       List&lt;String&gt; productList = Splitter.on(&quot;,&quot;).splitToList(productIds);</span><br><span class="line"></span><br><span class="line">        //判断列表是否是空，如果是空也就是不指定删除什么而去执行删除命令，会报出一个参数非法</span><br><span class="line">        if(CollectionUtils.isEmpty(productList))&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //不为空&lt;也就是我们需要执行删除命令了</span><br><span class="line">        cartMapper.deleteProductByUserIdAndProductIds(userId,productList);</span><br><span class="line"></span><br><span class="line">        CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">        return ServerResponse.createBySuccess(cartVo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里我需要说明几点：<br><strong>1、</strong>我们这里的删除是直接根据商品Id来的，但不是一个Id，我们和前端约定传入String类型的商品id，而且多个id之间通过逗号进行的分割。<br><strong>2、</strong>如果我们自己使用Java提供的方法，我们需要把productIds转成数组，然后再遍历数组添加到列表中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] productStringList =productIds.split(&quot;,&quot;);</span><br><span class="line">List&lt;String&gt; productList =new ArrayList&lt;&gt;();</span><br><span class="line">for(String product :productList)&#123;</span><br><span class="line">productList.add(product);</span><br></pre></td></tr></table></figure></p><p>如果我们直接使用guava提供的split方法，直接将其转化为列表，其中on代表以什么为分割线，后面的splitToList就代表转成什么函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; productList = Splitter.on(&quot;,&quot;).splitToList(productIds);</span><br></pre></td></tr></table></figure></p><p>上面也说了我们后台通过遍历商品id这个列表从而来进行商品的删除操作。<br><strong>3、</strong>看到<code>cartMapper.deleteProductByUserIdAndProductIds(userId,productList);</code>这行代码，我们就知道需要去CartMapper.java文件里面新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">int deleteProductByUserIdAndProductIds(@Param(value = &quot;userId&quot;)Integer userId,@Param(value = &quot;productIdList&quot;)List&lt;String&gt; productIdList);</span><br></pre></td></tr></table></figure></p><p>紧接着去CartMapper.xml文件里面新增sql查询语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--删除是使用delete这个节点--&gt;</span><br><span class="line"> &lt;delete id=&quot;deleteProductByUserIdAndProductIds&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  delete from store_cart</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line">  &lt;if test=&quot;productIdList != null&quot;&gt;</span><br><span class="line">    and product_id in</span><br><span class="line">    &lt;foreach collection=&quot;productIdList&quot; item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">      #&#123;item&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure></p><p>在这段代码里面，因为我们需要判断productIdList不为空，而且product_id在我们遍历的列表里面。遍历我们使用了foreach，其中collection表示你即将要遍历的对象，item表示遍历的返回对象，index表示当前迭代的次数，open表示以什么开始，separator表示分割符，close表示以什么结束。具体的可以参考写这篇文章：<a href="https://www.cnblogs.com/ysq0908/p/4695097.html" target="_blank" rel="noopener">MyBatis的foreach语句详解</a></p><p>最后打开ICartService.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; deleteProduct(Integer userId,String productIds);     //前台删除购物车里面的商品</span><br></pre></td></tr></table></figure></p><h2 id="查询购物车商品"><a href="#查询购物车商品" class="headerlink" title="查询购物车商品"></a>查询购物车商品</h2><p>这个功能很简单，因为我们前面增加，删除和修改最后返回的都是CartVo，为什么呢？因为它们都调用了我们这个查询的方法，因此此功能很简单。</p><p>我们打开CartController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台查询购物车里面的商品</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;CartVo&gt; list(HttpSession session)&#123;</span><br><span class="line">    //验证用户是否登录</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    //未登录需要用户强制登录</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">    //实现我们查询购物车里面商品的逻辑</span><br><span class="line">    return iCartService.list(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CartServiceImpl.java文件，往里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台查询购物车里面的商品</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;CartVo&gt; list(Integer userId)&#123;</span><br><span class="line">    CartVo cartVo =this.getCartVoLimit(userId);</span><br><span class="line">    return ServerResponse.createBySuccess(cartVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后打开ICartService.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;CartVo&gt; list(Integer userId);   //前台查询购物车里面的商品</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于更新、删除和查询购物车里面的商品功能的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十八）：购物车添加商品</title>
      <link href="/2018/08/27/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%B7%BB%E5%8A%A0%E5%95%86%E5%93%81/"/>
      <url>/2018/08/27/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%B7%BB%E5%8A%A0%E5%95%86%E5%93%81/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本章节我们来介绍购物车模块相关功能的开发，具体包括加入商品；更新商品数；查询商品数；移除商品；单选/取消；全选/取消和购物车列表等这几个功能。本篇主要介绍如何将商品加入到购物车，这里面会定义一些可以复用的购物车代码，还有一些功能：如字段校验，数量校验，价格的动态变化等。</p><h2 id="技能掌握"><a href="#技能掌握" class="headerlink" title="技能掌握"></a>技能掌握</h2><p>1、购物车模块的设计思想；<br>2、如何封装一个高复用的购物车核心方法；<br>3、解决浮点型商业运算中丢失精度的问题；</p><p>数据表设计：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-56a5d44e063c7ba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="商品添加到购物车"><a href="#商品添加到购物车" class="headerlink" title="商品添加到购物车"></a>商品添加到购物车</h2><p>首先我们打开controller这个包下面的portal包，在里面新建一个CartController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.portal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.ICartService;</span><br><span class="line">import top.store.vo.CartVo;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/cart/&quot;)  //这是我们对整个前台商品功能配置的一个类似于namespace的东西</span><br><span class="line">public class CartController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ICartService iCartService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台往购物车添加商品</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;add.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;CartVo&gt; add(HttpSession session, Integer productId, Integer count)&#123;</span><br><span class="line">        //验证用户是否登录</span><br><span class="line">        User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        //未登录需要用户强制登录</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),ResponseCode.NEED_LOGIN.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //实现我们购物车添加商品的逻辑</span><br><span class="line">        return iCartService.add(user.getId(),productId,count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开service这个包，在里面新建ICartService接口，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.vo.CartVo;</span><br><span class="line"></span><br><span class="line">public interface ICartService &#123;</span><br><span class="line">    ServerResponse&lt;CartVo&gt; add(Integer userId, Integer productId, Integer count);   //前台购物车添加商品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及在Impl包里面新建一个CartServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line">import org.apache.commons.collections.CollectionUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.CartMapper;</span><br><span class="line">import top.store.dao.ProductMapper;</span><br><span class="line">import top.store.pojo.Cart;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line">import top.store.service.ICartService;</span><br><span class="line">import top.store.util.BigDecimalUtil;</span><br><span class="line">import top.store.util.PropertiesUtil;</span><br><span class="line">import top.store.vo.CartProductVo;</span><br><span class="line">import top.store.vo.CartVo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iCartService&quot;)</span><br><span class="line">public class CartServiceImpl implements ICartService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CartMapper cartMapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 前台往购物车添加商品</span><br><span class="line">     * @author lenovo</span><br><span class="line">     * */</span><br><span class="line">    //注意此处的add里面必须包含userId，因为这个必须是精确到个人进行购物车的商品添加</span><br><span class="line">    public ServerResponse&lt;CartVo&gt; add(Integer userId,Integer productId,Integer count)&#123;</span><br><span class="line">        //传入的参数不正确</span><br><span class="line">        if(productId ==null ||count ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //去购物车里面查询相关的信息</span><br><span class="line">        Cart cart =cartMapper.selectCartByUserIdAndProductId(userId,productId);   //自定义的sql语句</span><br><span class="line">        if(cart ==null)&#123;</span><br><span class="line">            //该产品不在这个购物车里面,因此需要新增一个这个产品的记录</span><br><span class="line">            Cart cartItem =new Cart();</span><br><span class="line">            cartItem.setQuantity(count);  //往购物车里面添加count数量的商品</span><br><span class="line">            cartItem.setChecked(Const.Cart.CHECKED);   //设置该商品被选中状态（放入购物车的产品是自动被选中的）</span><br><span class="line">            cartItem.setProductId(productId);   //设置商品id</span><br><span class="line">            cartItem.setUserId(userId);    //商品属于用户</span><br><span class="line">            cartMapper.insert(cartItem);   //将商品插入到购物车里面</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //说明该商品已经存在于购物车里.</span><br><span class="line">            //商品已存在,我们就要进行数量相加</span><br><span class="line">            count  =cart.getQuantity() +count;</span><br><span class="line">            cart.setQuantity(count);</span><br><span class="line">            cartMapper.updateByPrimaryKeySelective(cart);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //接下来是核心的功能，如数量判断，值校验，购物车里面的商品也有图片，因此需要组装一个“新的”vo对象。</span><br><span class="line">        CartVo cartVo = this.getCartVoLimit(userId);</span><br><span class="line">        return ServerResponse.createBySuccess(cartVo);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建一个用于实现购物车信息的函数</span><br><span class="line">    private CartVo getCartVoLimit(Integer userId)&#123;</span><br><span class="line">        CartVo cartVo =new CartVo();</span><br><span class="line">        List&lt;Cart&gt; cartList =cartMapper.selectCartByUserId(userId);  //自定义的sql语句</span><br><span class="line">        List&lt;CartProductVo&gt; cartProductVoList = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //记住这里一定要使用它的String构造器，否则会出现更大的错误</span><br><span class="line">        BigDecimal cartTotalPrice = new BigDecimal(&quot;0&quot;);</span><br><span class="line"></span><br><span class="line">        if(CollectionUtils.isNotEmpty(cartList))&#123;</span><br><span class="line">            for(Cart cartItem:cartList)&#123;</span><br><span class="line">                CartProductVo cartProductVo =new CartProductVo();</span><br><span class="line">                cartProductVo.setId(cartItem.getId());</span><br><span class="line">                cartProductVo.setUserId(cartItem.getUserId());</span><br><span class="line">                cartProductVo.setProductId(cartItem.getProductId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                //根据购物车里面的商品Id来获取商品的信息</span><br><span class="line">                Product product =productMapper.selectByPrimaryKey(cartItem.getProductId());</span><br><span class="line">                //如果该商品存在的话，我们就使用前面的CartProductVo进行商品的组装(因为CartProductVo本身是一个对象，但是具体需要什么我们需要进行设置)</span><br><span class="line">                if(product != null)&#123;</span><br><span class="line">                    //我们这里之所以不直接从商品对象里获取信息，是因为后面有些是存在于购物车的，有些存在于商品，很容易造成混乱，因此我们这里就使用了一个组装的购物车商品对象，你需要的时候调用它就可以</span><br><span class="line">                    cartProductVo.setProductName(product.getName());</span><br><span class="line">                    cartProductVo.setProductSubtitle(product.getSubtitle());</span><br><span class="line">                    cartProductVo.setProductMainImage(product.getMainImage());</span><br><span class="line">                    cartProductVo.setProductStatus(product.getStatus());</span><br><span class="line">                    cartProductVo.setProductStock(product.getStock());</span><br><span class="line"></span><br><span class="line">                    //判断库存数量</span><br><span class="line">                    int buyLimitCount = 0;</span><br><span class="line">                    if(product.getStock() &gt;= cartItem.getQuantity())&#123;</span><br><span class="line">                        //库存充足的时候，系统会提示LIMIT_NUM_SUCCESS</span><br><span class="line">                        buyLimitCount = cartItem.getQuantity();</span><br><span class="line">                        cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_SUCCESS);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                        //库存不足的时候，系统提示LIMIT_NUM_FAIL</span><br><span class="line">                        buyLimitCount =product.getStock();</span><br><span class="line">                        cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_FAIL);</span><br><span class="line"></span><br><span class="line">                        //自动更新购物车的有效库存</span><br><span class="line">                        Cart cartForQuantity =new Cart();</span><br><span class="line">                        cartForQuantity.setId(cartItem.getId());</span><br><span class="line">                        cartForQuantity.setQuantity(buyLimitCount);</span><br><span class="line">                        cartMapper.updateByPrimaryKeySelective(cartForQuantity);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    //现在更新cartProductVo对象的其他信息</span><br><span class="line">                    cartProductVo.setQuantity(buyLimitCount);</span><br><span class="line">                    //计算该商品的总价，仅仅针对该商品</span><br><span class="line">                    //进行乘法运算:价格*数量，注意这里的单价因为是BigDecimal类型，所以需要转换成double类型，最后再利用工具类的toString调用String构造器</span><br><span class="line">                    //cartProductVo.setProductTotalPrice(BigDecimalUtil.mut(cartProductVo.getProductPrice().doubleValue(),cartProductVo.getQuantity()));  //这样会引发空指针异常</span><br><span class="line">  cartProductVo.setProductTotalPrice(BigDecimalUtil.mut(product.getPrice().doubleValue(),cartProductVo.getQuantity()));</span><br><span class="line">                    cartProductVo.setProductChecked(cartItem.getChecked());   //选中状态使用购物车自带的属性，不用商品自己设置属性</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //如果不判断是否有商品就进行添加购物车操作，会报空指针异常。(其实就是判断购物车是否是处于被选中状态)</span><br><span class="line">                if(cartItem.getChecked()  ==Const.Cart.CHECKED)&#123;</span><br><span class="line">                    //如果已经勾选,就把之前的商品价格添加到整个购物车总价中进行结算</span><br><span class="line">                    //这里面有2个参数，一个是我们在初始化的时候设置的0，另一个就是上面计算出来的ProductTotalPrice，这两个都需要进行double转化</span><br><span class="line">                    cartTotalPrice =BigDecimalUtil.add(cartTotalPrice.doubleValue(),cartProductVo.getProductTotalPrice().doubleValue());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //把我们上面设置的cartProductVo添加到cartProductVoList里面</span><br><span class="line">                cartProductVoList.add(cartProductVo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //把CartProductVo放入到我们的CartVo里面</span><br><span class="line">        cartVo.setCartTotalPrice(cartTotalPrice);</span><br><span class="line">        cartVo.setCartProductVoList(cartProductVoList);</span><br><span class="line">        cartVo.setAllChecked(this.getAllCheckedStatus(userId));</span><br><span class="line">        cartVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));   //这里需要直接从服务器中获取</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return cartVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据用户id来判断购物车是否处于选中状态</span><br><span class="line">    public boolean getAllCheckedStatus (Integer userId)&#123;</span><br><span class="line">        if(userId ==null)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果用户不为空</span><br><span class="line">        //这里sql语句结果之所以没有返回boolean是因为我们去数据库里面一般返回的都是int，所以需要进行二次判断</span><br><span class="line">        return cartMapper.selectCartProductCheckedStatusByUserId(userId) ==0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面那个是我们的核心代码，所以我依旧啰嗦几句：<br><strong>1、</strong>首先判断传入的参数是否正确：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(productId ==null ||count ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>看到<code>Cart cart =cartMapper.selectCartByUserIdAndProductId(userId,productId);   //自定义的sql语句</code>就知道需要去dao层的CartMapper.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis中使用多个参数时，需要使用param注解</span><br><span class="line">Cart selectCartByUserIdAndProductId(@Param(value =&quot;userId&quot; )Integer userId,@Param(value = &quot;productId&quot;) Integer productId);</span><br></pre></td></tr></table></figure></p><p>接着打开mappers包的CartMapper.xml文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartByUserIdAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id=#&#123;userId&#125;</span><br><span class="line">  and  product_id =#&#123;productId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>3、</strong>继续回到CartServiceImpl.java文件，我们发现该产品不在这个购物车里面,因此需要新增一个这个产品的记录，而且商品的选中是自动的，也就是需要设置一个常量。我们能打开common包下面的const文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface Cart&#123;</span><br><span class="line">    int CHECKED = 1;//购物车选中状态</span><br><span class="line">    int UN_CHECKED = 0;//购物车中未选中状态</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4、</strong>接下来是核心的功能，如数量判断，值校验，购物车里面的商品也有图片，因此需要组装一个“新的”vo对象。因此，我们需要在Vo这个包里面，新建两个java类，一个是CartProductVo，它是结合了购物车和商品的对象，因此你可以去购物车和商品对象中选择你所需要的字段，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class CartProductVo &#123;</span><br><span class="line"></span><br><span class="line">    //本vo是结合了购物车和商品的对象，因此你可以去购物车和商品对象中选择你所需要的字段</span><br><span class="line">    private Integer id;  //购物车id</span><br><span class="line">    private Integer userId;</span><br><span class="line">    private Integer productId;</span><br><span class="line">    private Integer quantity;  //购物车中商品的数量</span><br><span class="line">    private String productName;   //商品名称</span><br><span class="line">    private String productSubtitle;   //商品子标题</span><br><span class="line">    private String productMainImage;  //商品主图</span><br><span class="line">    private BigDecimal productPrice;  //商品价格</span><br><span class="line">    private Integer productStatus;   //商品状态</span><br><span class="line">    private BigDecimal productTotalPrice;  //商品总价</span><br><span class="line">    private Integer productStock;   //商品库存</span><br><span class="line">    private Integer productChecked;//商品是否勾选</span><br><span class="line"></span><br><span class="line">    private String limitQuantity;//用于限制数量的一个返回结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getUserId() &#123;</span><br><span class="line">        return userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(Integer userId) &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductId() &#123;</span><br><span class="line">        return productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductId(Integer productId) &#123;</span><br><span class="line">        this.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getQuantity() &#123;</span><br><span class="line">        return quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setQuantity(Integer quantity) &#123;</span><br><span class="line">        this.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductName() &#123;</span><br><span class="line">        return productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductName(String productName) &#123;</span><br><span class="line">        this.productName = productName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductSubtitle() &#123;</span><br><span class="line">        return productSubtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductSubtitle(String productSubtitle) &#123;</span><br><span class="line">        this.productSubtitle = productSubtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getProductMainImage() &#123;</span><br><span class="line">        return productMainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductMainImage(String productMainImage) &#123;</span><br><span class="line">        this.productMainImage = productMainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getProductPrice() &#123;</span><br><span class="line">        return productPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductPrice(BigDecimal productPrice) &#123;</span><br><span class="line">        this.productPrice = productPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductStatus() &#123;</span><br><span class="line">        return productStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductStatus(Integer productStatus) &#123;</span><br><span class="line">        this.productStatus = productStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getProductTotalPrice() &#123;</span><br><span class="line">        return productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductTotalPrice(BigDecimal productTotalPrice) &#123;</span><br><span class="line">        this.productTotalPrice = productTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductStock() &#123;</span><br><span class="line">        return productStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductStock(Integer productStock) &#123;</span><br><span class="line">        this.productStock = productStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getProductChecked() &#123;</span><br><span class="line">        return productChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setProductChecked(Integer productChecked) &#123;</span><br><span class="line">        this.productChecked = productChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getLimitQuantity() &#123;</span><br><span class="line">        return limitQuantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setLimitQuantity(String limitQuantity) &#123;</span><br><span class="line">        this.limitQuantity = limitQuantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另一个文件是CartVo，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class CartVo &#123;</span><br><span class="line">    //购物车Vo对象</span><br><span class="line">    private List&lt;CartProductVo&gt; cartProductVoList;   //商品对象</span><br><span class="line">    private BigDecimal cartTotalPrice;  //购物车所有商品总价</span><br><span class="line">    private boolean allChecked;   //购物车是否处于选中状态</span><br><span class="line">    private String imageHost;  //购物车对象的主图</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;CartProductVo&gt; getCartProductVoList() &#123;</span><br><span class="line">        return cartProductVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCartProductVoList(List&lt;CartProductVo&gt; cartProductVoList) &#123;</span><br><span class="line">        this.cartProductVoList = cartProductVoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getCartTotalPrice() &#123;</span><br><span class="line">        return cartTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCartTotalPrice(BigDecimal cartTotalPrice) &#123;</span><br><span class="line">        this.cartTotalPrice = cartTotalPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isAllChecked() &#123;</span><br><span class="line">        return allChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAllChecked(boolean allChecked) &#123;</span><br><span class="line">        this.allChecked = allChecked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5、</strong>我们继续回到CartServiceImpl.java文件，看到这行代码<code>List&lt;Cart&gt; cartList =cartMapper.selectCartByUserId(userId);  //自定义的sql语句</code>就知道需要去dao层的CartMapper.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Cart&gt; selectCartByUserId(Integer UserId);</span><br></pre></td></tr></table></figure></p><p>接着打开mappers包的CartMapper.xml文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectCartByUserId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_cart</span><br><span class="line">  where user_id =#&#123;userId&#125;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>6、</strong>Java中丢失精度的问题是一个值得注意的问题，因此我们需要进行设置。float和double只能用于科学计算和工程计算，商业运算必须使用BigDecimal。通过查看BigDecimal的String构造器，我们发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">When a &#123;@code double&#125; must be used as a source for a</span><br><span class="line">* &#123;@code BigDecimal&#125;, note that this constructor provides an</span><br><span class="line">* exact conversion; it does not give the same result as</span><br><span class="line">* converting the &#123;@code double&#125; to a &#123;@code String&#125; using the</span><br><span class="line">* &#123;@link Double#toString(double)&#125; method and then using the</span><br><span class="line">* &#123;@link #BigDecimal(String)&#125; constructor.  To get that result,</span><br><span class="line">* use the &#123;@code static&#125; &#123;@link #valueOf(double)&#125; method.</span><br></pre></td></tr></table></figure></p><p>从上面的源码中我们也发现了这一情况，因此需要使用它的String构造器。但是呢，我们的数据库中存放的都是int类型，因此我们需要创建一个用于转换类型的工具类，打开Util这个包，我们在里面新建一个BigDecimalUtil.java的文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class BigDecimalUtil &#123;</span><br><span class="line">    //我们不能使我们的工具类在外部进行实例化，因此将构造方法私有化</span><br><span class="line">    private BigDecimalUtil()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //加法</span><br><span class="line">    public static BigDecimal add(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //减法</span><br><span class="line">    public static BigDecimal sub(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //乘法</span><br><span class="line">    public static BigDecimal mut(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //除法，注意使用四舍五入</span><br><span class="line">    public static BigDecimal div(double a1,double a2)&#123;</span><br><span class="line">        BigDecimal b1 =new BigDecimal(Double.toString(a1));</span><br><span class="line">        BigDecimal b2 =new BigDecimal(Double.toString(a2));</span><br><span class="line">        return b1.divide(b2,2,BigDecimal.ROUND_HALF_UP);  //四舍五入模式，保留2位小数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你可以使用Ctrl+O（字母O）来查看该类的不同类型的构造方法,我们使用下面的构造方法，scale是指你保留的位数，roundingMode是指什么模式：ROUND_HALF_UP是四舍五入模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</span><br></pre></td></tr></table></figure></p><p>具体的可以参看这篇文章：<a href="https://www.cnblogs.com/yingchen/p/5459501.html" target="_blank" rel="noopener">BigDecimal.ROUND_HALF_XXX的各种用法</a><br><strong>7、</strong>我们这里之所以不直接从商品对象里获取信息，是因为后面有些是存在于购物车的，有些存在于商品，很容易造成混乱，因此我们这里就使用了一个组装的购物车商品对象，你需要的时候调用它就可以。<br><strong>8、</strong>在判断库存数量的时候，我们需要注意设置一个常量，用于提示前端最低库存，继续打开common包下面的const文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String LIMIT_NUM_FAIL = &quot;LIMIT_NUM_FAIL&quot;;</span><br><span class="line">String LIMIT_NUM_SUCCESS = &quot;LIMIT_NUM_SUCCESS&quot;;</span><br></pre></td></tr></table></figure></p><p>把之前的购物车状态代码合在一块就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface Cart&#123;</span><br><span class="line">    int CHECKED = 1;//购物车选中状态</span><br><span class="line">    int UN_CHECKED = 0;//购物车中未选中状态</span><br><span class="line"></span><br><span class="line">    String LIMIT_NUM_FAIL = &quot;LIMIT_NUM_FAIL&quot;;</span><br><span class="line">    String LIMIT_NUM_SUCCESS = &quot;LIMIT_NUM_SUCCESS&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>9、</strong>然后就是<code>cartVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;));   //这里需要直接从服务器中获取</code>这个很多注意事项我都在代码里面作了详细的说明。<br><strong>10、</strong>看到这行代码，你同样需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果用户不为空</span><br><span class="line">//这里sql语句结果之所以没有返回boolean是因为我们去数据库里面一般返回的都是int，所以需要进行二次判断</span><br><span class="line">return cartMapper.selectCartProductCheckedStatusByUserId(userId) ==0;</span><br></pre></td></tr></table></figure></p><p>去dao层的CartMapper.java文件，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int selectCartProductCheckedStatusByUserId(Integer userId);</span><br></pre></td></tr></table></figure></p><p>接着打开mappers包的CartMapper.xml文件，里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;select id=&quot;selectCartProductCheckedStatusByUserId&quot; resultType=&quot;int&quot; parameterType=&quot;int&quot;&gt; &lt;!--这里就是说里面有没有选中的就意味着不是全选--&gt;</span><br><span class="line">    SELECT  count(1) from store_cart where checked = 0 and user_id = #&#123;userId&#125;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h3 id="精度测试"><a href="#精度测试" class="headerlink" title="精度测试"></a>精度测试</h3><p>对了，还有前面的精度测试，我们打开test包下面的java包，里面新建一个包<code>top.licheetools.test</code>，名字随意，我这里就是这个样子，然后新建BigDecimalTest.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package top.licheetools.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">//这里因为是专门的测试包，所以不需要使用junit，也不需要加载Spring容器</span><br><span class="line">public class BigDecimalTest &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line">        System.out.println(0.08+0.05);</span><br><span class="line">        System.out.println(2.01-0.58);</span><br><span class="line">        System.out.println(0.08*100);</span><br><span class="line">        System.out.println(6.89/100);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Test</span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        //使用BigDecimal的Integer构造函数</span><br><span class="line">        BigDecimal b1 =new BigDecimal(0.06);</span><br><span class="line">        BigDecimal b2 =new BigDecimal(0.09);</span><br><span class="line">        System.out.println(b1.add(b2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test3()&#123;</span><br><span class="line">        //使用BigDecimal的String构造函数</span><br><span class="line">        BigDecimal b1 =new BigDecimal(&quot;0.06&quot;);</span><br><span class="line">        BigDecimal b2 =new BigDecimal(&quot;0.09&quot;);</span><br><span class="line">        System.out.println(b1.add(b2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果我这里就只附上截图：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-011f1c75b8ca614b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b8be261813fbfae1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-624dce4cccb03d30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们本篇关于如何将商品加入到购物车的介绍就到此为止了，这里因为需要构造一个复用的购物车模型，所以需要很多时间，但是后面功能的实现就能直接借助它了，开发起来还是快速的，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十七）：前台商品列表，搜索，动态排序</title>
      <link href="/2018/08/26/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%EF%BC%8C%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%8A%A8%E6%80%81%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/08/26/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%EF%BC%8C%E6%90%9C%E7%B4%A2%EF%BC%8C%E5%8A%A8%E6%80%81%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在前面的某一篇里面，我们完成了后台商品详情，列表，搜索，动态排序功能的开发。那么本篇我们来介绍前台商品详情，列表，搜索，动态排序功能的开发，这个和那个不一样，希望大家多看几遍，好好理解一下其中的不同。</p><h2 id="前台商品详情获取"><a href="#前台商品详情获取" class="headerlink" title="前台商品详情获取"></a>前台商品详情获取</h2><p>我们打开controller包，在里面的portal包里面新建ProductController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">  * 前台获取商品的详情信息</span><br><span class="line">  * @author lenovo</span><br><span class="line">  * */</span><br><span class="line"> @RequestMapping(value = &quot;detail.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line"> @ResponseBody   //自动序列化json功能</span><br><span class="line"> public ServerResponse&lt;ProductDetailVo&gt; detail(Integer productId)&#123;</span><br><span class="line">     //前台和后台关于商品详情信息的获取是非常相似的，除了前台需要判断商品的状态，如果下线或者删除就返回一个错误或者是不进行返回</span><br><span class="line">     return iProductService.getProductDetail(productId);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *前台获取商品的详情信息</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;ProductDetailVo&gt; getProductDetail(Integer productId)&#123;</span><br><span class="line">    //判断商品是否存在</span><br><span class="line">    if (productId == null) &#123;   //商品id不存在</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">    if (product == null) &#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(product.getStatus() != Const.ProductStatusEnum.ON_SALE.getCode())&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //商品存在,我们现在是进行信息的传递</span><br><span class="line">    ProductDetailVo productDetailVo =assembleProductDetailVo(product);</span><br><span class="line">    return ServerResponse.createBySuccess(productDetailVo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码基本上和我们之前后台获取商品详情的逻辑一样，但是多了一部就是需要判断商品的状态，对于那些不存在或者已经下架的商品我们就不需要显示了，直接返回提示信息。</p><p>看到<code>if(product.getStatus() != Const.ProductStatusEnum.ON_SALE.getCode()){            return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);        }</code>这行代码，说明我们需要新建一个枚举类，打开之前的Comm包下面的Const这个java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public enum ProductStatusEnum&#123;</span><br><span class="line">        ON_SALE(1,&quot;在线&quot;)</span><br><span class="line">        ;</span><br><span class="line">        private String value;</span><br><span class="line">        private int code;</span><br><span class="line"></span><br><span class="line">        ProductStatusEnum(int code,String value)&#123;</span><br><span class="line">            this.code =code;</span><br><span class="line">            this.value=value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getValue() &#123;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getCode() &#123;</span><br><span class="line">            return code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后打开IProductService这个接口，我们把刚才的实现类的接口代码添加进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;ProductDetailVo&gt; getProductDetail(Integer productId);   //前台获取商品的详情信息</span><br></pre></td></tr></table></figure></p><p>这样我们关于前台商品详情获取的功能开发就完成了，接下来就是前台列表的分页，搜索，动态排序功能了。</p><h2 id="前台列表分页，搜索，动态排序实现"><a href="#前台列表分页，搜索，动态排序实现" class="headerlink" title="前台列表分页，搜索，动态排序实现"></a>前台列表分页，搜索，动态排序实现</h2><p>老规矩，我们打开ProductController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 前台获取商品列表并进行分页,搜索，动态排序</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;list.do&quot;)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; list (@RequestParam(value = &quot;keyword&quot; ,required = false) String keyword,</span><br><span class="line">                                      @RequestParam(value = &quot;categoryId&quot; ,required = false)Integer categoryId,</span><br><span class="line">                                      @RequestParam(value = &quot;pageNum&quot; ,defaultValue = &quot;1&quot;)int pageNum,</span><br><span class="line">                                      @RequestParam(value = &quot;pageSize&quot; ,defaultValue = &quot;10&quot;)int pageSize,</span><br><span class="line">                                      @RequestParam(value = &quot;orderBy&quot; ,defaultValue = &quot;&quot;)String orderBy</span><br><span class="line">                                      )&#123;</span><br><span class="line">    return iProductService.getProductByKeywordCategory(keyword,categoryId,pageNum,pageSize,orderBy);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">  * 前台获取商品列表并进行分页,搜索，动态排序</span><br><span class="line">  * @author lenovo</span><br><span class="line">  * */</span><br><span class="line"> public ServerResponse&lt;PageInfo&gt; getProductByKeywordCategory(String keyword,Integer categoryId,int pageNum,int pageSize,String orderBy)&#123;</span><br><span class="line">     //判断一下keyword和categoryId是否为空，如果是的话就显示参数错误</span><br><span class="line">     if(StringUtils.isBlank(keyword)  &amp;&amp; categoryId ==null)&#123;</span><br><span class="line">         return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     List&lt;Integer&gt; categoryIdList = new ArrayList&lt;Integer&gt;();  //这里声明一个list用于保存通过递归得到的它的及其子类id</span><br><span class="line"></span><br><span class="line">     if(categoryId !=null)&#123;</span><br><span class="line">         //通过categoryId来获取category这个对象</span><br><span class="line">         Category category =categoryMapper.selectByPrimaryKey(categoryId);</span><br><span class="line"></span><br><span class="line">         if(category ==null&amp;&amp;StringUtils.isBlank(keyword))&#123;</span><br><span class="line">             //没有该分类,并且还没有关键字,这个时候返回一个空的结果集,不能报错</span><br><span class="line">             //这里的意思就是说假设前端请求categoryId==1,但是我们数据库里面没有1只有2，这就是不匹配而已，并不是错误</span><br><span class="line">             PageHelper.startPage(pageNum,pageSize);</span><br><span class="line">             List&lt;ProductListVo&gt; productListVoList =Lists.newArrayList();</span><br><span class="line">             PageInfo pageInfo =new PageInfo(productListVoList);</span><br><span class="line">             return ServerResponse.createBySuccess(pageInfo);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         //这是通过之前写的递归算法拿到了它的分类以及其子分类</span><br><span class="line">         categoryIdList =iCategoryService.selectCategoryAndChildrenById(category.getId()).getData();   //这里需要去CategoryServiceImpl里面对我们之前写的关于递归查询子节点的函数进行一个修改，添加返回值的类型List&lt;Integer&gt;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     //判断keyword是否为空</span><br><span class="line">     if(StringUtils.isNotBlank(keyword))&#123;</span><br><span class="line">         //将keyword变成%keyword%用于模糊查询操作</span><br><span class="line">         keyword =new StringBuilder().append(&quot;%&quot;).append(keyword).append(&quot;%&quot;).toString();</span><br><span class="line">     &#125;</span><br><span class="line">     PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">     //进行排序处理</span><br><span class="line">     //我们和前端约定弄一个接口去实现orderBy的选择</span><br><span class="line">     //判断orderBy这个字段不为空</span><br><span class="line">     if(StringUtils.isNotBlank(orderBy))&#123;</span><br><span class="line">         //判断前端传的orderBy是否在我们定义的Const集合中</span><br><span class="line">         if(Const.ProductListOrderBy.PRICE_ASC_DESC.contains(orderBy))&#123;</span><br><span class="line">             //因为pageHelper.orderBy里面的参格式是price desc，所以我们需要对集合中的&quot;price_desc&quot;和&quot;price_asc&quot;进行分割</span><br><span class="line">             String[] orderByArray =orderBy.split(&quot;_&quot;);</span><br><span class="line">             PageHelper.orderBy(orderByArray[0]+&quot; &quot;+orderByArray[1]);  //注意一下这里双引号之间有一个空格</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     //进行动态搜索</span><br><span class="line">     //这里注意我们的keyword就是productName</span><br><span class="line"></span><br><span class="line">     //仅仅使用下面的这行代码是不可以的，因为keyword和categoryIdList有可能没有，所以我们需要使用三元运算符进行判断</span><br><span class="line">    // List&lt;Product&gt; productList =productMapper.selectByNameAndCategoryIds(keyword,categoryIdList);</span><br><span class="line">     //将之前的(keyword,categoryIdList)变成(StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList)</span><br><span class="line"></span><br><span class="line">     //使用sql语句获取的结果</span><br><span class="line">     List&lt;Product&gt; productList =productMapper.selectByNameAndCategoryIds(StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList);</span><br><span class="line">     List&lt;ProductListVo&gt; productListVoList =Lists.newArrayList();</span><br><span class="line">     for(Product product:productList)&#123;</span><br><span class="line">         ProductListVo productListVo =assembleProductListVo(product);</span><br><span class="line">         productListVoList.add(productListVo);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     PageInfo pageInfo =new PageInfo(productList);  //注意这里传入的就是通过sql语句获得的列表</span><br><span class="line">     pageInfo.setList(productListVoList);</span><br><span class="line">     return ServerResponse.createBySuccess(pageInfo);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>这段代码是核心代码，对此我有几个注意事项需要说明：<br>1、首先我们这个商品的查询是通过keyword来实现的，采用模糊查询。<br>2、假设前端请求categoryId==1,但是我们数据库里面没有1只有2，这就是不匹配而已，并不是错误所以我们需要进行一个信息提示。<br>3、我们前面参数中的categoryId是用来获取category这个对象，然后利用这个对象来调用递归算法拿到了它的分类以及其子分类组成的列表。<br>4、排序处理的时候，我们打开Const这个类，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface ProductListOrderBy&#123;</span><br><span class="line">    //这里使用set是因为set的contain函数的时间复杂度是O(1),而List的contain函数的时间复杂度则是O(n);</span><br><span class="line">    Set&lt;String&gt; PRICE_ASC_DESC = Sets.newHashSet(&quot;price_desc&quot;,&quot;price_asc&quot;);  //按照价格进行排序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个就是排序的依据，而且不知道你注意到没有，我们这里使用了set是因为set的contains函数的时间复杂度是O(1),而List的contains函数的时间复杂度则是O(n);</p><p>5、因为<code>pageHelper.orderBy</code>里面的参格式是<code>price desc</code>，所以我们需要对集合中的<code>&quot;price_desc&quot;</code>和<code>&quot;price_asc&quot;</code>进行分割，我们知道split函数最后返回的就是一个String类型的数组，最后直接调用它的<code>PageHelper.orderBy(orderByArray[0]+&quot; &quot;+orderByArray[1]);</code>就可以了。<br>6、动态搜索，这里注意我们的keyword就是productName，而且keyword和categoryIdList有可能没有，所以我们需要使用三元运算符进行判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringUtils.isBlank(keyword)?null:keyword,categoryIdList.size()==0?null:categoryIdList</span><br></pre></td></tr></table></figure></p><p>7、注意这里的<code>selectByNameAndCategoryIds</code>函数，所以我们需要ProductMapper.java文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意在mybatis里面，多个参数时需要使用param注解</span><br><span class="line">  List&lt;Product&gt; selectByNameAndCategoryIds(@Param(value = &quot;productName&quot;) String productName,@Param(&quot;categoryIdList&quot;)List&lt;Integer&gt; categoryIdList);</span><br></pre></td></tr></table></figure></p><p>然后记得打开ProductMapper.xml文件，新增sql语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndCategoryIds&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    SELECT</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    where status = 1</span><br><span class="line">    &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">        and name like #&#123;productName&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;categoryIdList != null&quot; &gt;</span><br><span class="line">        and category_id in</span><br><span class="line">        &lt;foreach item=&quot;item&quot; index=&quot;index&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot; collection=&quot;categoryIdList&quot;&gt;</span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>8、<code>categoryIdList=iCategoryService.selectCategoryAndChildrenById(category.getId()).getData();</code>这里需要去CategoryServiceImpl里面对我们之前写的关于递归查询子节点的函数进行一个修改，添加返回值的类型List<integer>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public ServerResponse&lt;List&lt;Integer&gt;&gt; selectCategoryAndChildrenById(Integer categoryId)&#123;</span><br></pre></td></tr></table></figure></integer></p><p>以及iCategoryService.java文件，修改为以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;List&lt;Integer&gt;&gt; selectCategoryAndChildrenById(Integer categoryId);    //后台管理员递归查询本节点及子节点的id并返回列表</span><br></pre></td></tr></table></figure></p><p>最后记得打开IProductService这个接口，我们把刚才的实现类的接口代码添加进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; getProductByKeywordCategory(String keyword,Integer categoryId,int pageNum,int pageSize,String orderBy);   //前台获取商品列表并进行分页,搜索，动态排序</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于前台商品详情，列表，搜索，动态排序功能的开发介绍就到此为止了，接下来是进行各个相关接口的测试。</p><p> 由于测试比较简单，这里直接附上几张测试截图即可，不作过多说明：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d1f1895a54197b8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-72666196f319e983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们本篇关于前台商品详情，列表，搜索，动态排序功能开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十六）：后台文件和富文本图片上传的开发</title>
      <link href="/2018/08/25/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E5%92%8C%E5%AF%8C%E6%96%87%E6%9C%AC%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/25/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E5%92%8C%E5%AF%8C%E6%96%87%E6%9C%AC%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台文件上传和后台富文本图片上传的开发，这里面涉及到的内容比较多，而且还是具有一定的难度，建议大家没事多看几遍，多敲代码。</p><h2 id="后台文件上传"><a href="#后台文件上传" class="headerlink" title="后台文件上传"></a>后台文件上传</h2><p>首先打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *</span><br><span class="line">    * 后台管理员--上传文件到服务器（spring mvc）</span><br><span class="line">    * */</span><br><span class="line">   @RequestMapping(&quot;upload.do&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public ServerResponse upload(HttpSession session, @RequestParam(value = &quot;upload_file&quot;,required = false) MultipartFile file, HttpServletRequest request)&#123;</span><br><span class="line">       //判断一下登录情况</span><br><span class="line">       User user = (User)session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">       if(user == null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录,请登录管理员&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //判断一下是不是管理员身份</span><br><span class="line">       if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line"></span><br><span class="line">           //如果是管理员就进行后台上传文件的逻辑</span><br><span class="line">           String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;);</span><br><span class="line">           String targetFileName = iFileService.upload(file,path);</span><br><span class="line">           String url = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)+targetFileName;   //进行url的拼接以供前端使用</span><br><span class="line"></span><br><span class="line">           Map fileMap = Maps.newHashMap();</span><br><span class="line">           fileMap.put(&quot;uri&quot;,targetFileName);</span><br><span class="line">           fileMap.put(&quot;url&quot;,url);</span><br><span class="line">           return ServerResponse.createBySuccess(fileMap);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>关于这段代码，我需要说明几点：<br>1、参数问题，这里不仅仅需要登录，而且还需要一个文件参数（非必须）和请求参数（必须因为文件上传路径需要从它里面进行获取）。<br>2、<code>String targetFileName = iFileService.upload(file,path);</code>看到这里就说明你需要完成几个事情：首先新建iFileService这个接口，然后再创建一个该接口的实现类。<br>打开service这个包，在里面新建一个IFileService.java的接口，里面的代码如下：(按照我们之前的说明应该是最后进行的，这里考虑到介绍的顺序问题，就这里写吧)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">public interface IFileService &#123;</span><br><span class="line">    String upload(MultipartFile file, String path);   //上传文件到ftp服务器上面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开impl文件，在里面新建FileServiceImpl.java文件来实现我们IFileService这个接口，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import com.google.common.collect.Lists;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.multipart.MultipartFile;</span><br><span class="line">import top.store.service.IFileService;</span><br><span class="line">import top.store.util.FTPUtil;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iFileService&quot;)</span><br><span class="line">public class FileServiceImpl implements IFileService &#123;</span><br><span class="line"></span><br><span class="line">    //添加一个用于目录列表为空的日志</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(FileServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    public  String upload(MultipartFile file,String path)&#123;</span><br><span class="line">        //上传文件的名称</span><br><span class="line">        String fileName =file.getOriginalFilename();</span><br><span class="line">        //扩展名test.jpg，我们要获取jpg</span><br><span class="line">        String fileExtensionName =fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1);</span><br><span class="line"></span><br><span class="line">        //文件上传的名称</span><br><span class="line">        String uploadFileName = UUID.randomUUID().toString()+&quot;.&quot;+fileExtensionName;</span><br><span class="line"></span><br><span class="line">        logger.info(&quot;开始上传文件,上传文件的文件名:&#123;&#125;,上传的路径:&#123;&#125;,新文件名:&#123;&#125;&quot;,fileName,path,uploadFileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        File fileDir = new File(path);</span><br><span class="line">        if(!fileDir.exists())&#123;</span><br><span class="line">            //文件可以设置权限</span><br><span class="line">            fileDir.setWritable(true);</span><br><span class="line">            //创建多个文件</span><br><span class="line">            fileDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        File targetFile = new File(path,uploadFileName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            file.transferTo(targetFile);  //文件已经上传成功了</span><br><span class="line"></span><br><span class="line">            FTPUtil.uploadFile(Lists.newArrayList(targetFile));   //已经上传到ftp服务器上</span><br><span class="line"></span><br><span class="line">            targetFile.delete();  //删除upload下面的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;上传文件异常&quot;,e);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //1:test.jpg 这里就是说明我们前面使用UUID的必要性，否则就很容易造成重复</span><br><span class="line">        //2:test.jpg</span><br><span class="line">        return targetFile.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面这个实现文件上传的类不仅仅用在文件上传，而且后台富文本图片上传也是需要依靠它的。同样这里的<code>FTPUtil.uploadFile(Lists.newArrayList(targetFile));</code>也是需要你注意的，打开util包，在里面新建一个FTPUtil.java的工具类，我们在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class FTPUtil &#123;</span><br><span class="line"></span><br><span class="line">    //添加一个用于目录列表为空的日志</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(FTPUtil.class);</span><br><span class="line"></span><br><span class="line">    //使用我们之前定义的PropertiesUtil这个工具类来获取服务器属性</span><br><span class="line">    private static String ftpIp =PropertiesUtil.getProperty(&quot;ftp.server.ip&quot;);</span><br><span class="line">    private static String ftpUser =PropertiesUtil.getProperty(&quot;ftp.user&quot;);</span><br><span class="line">    private static String ftpPass =PropertiesUtil.getProperty(&quot;ftp.pass&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private String ip;</span><br><span class="line">    private int port;</span><br><span class="line">    private String user;</span><br><span class="line">    private String pwd;</span><br><span class="line">    private FTPClient ftpClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public FTPUtil(String ip,int port,String user,String pwd )&#123;</span><br><span class="line">        this.ip =ip;</span><br><span class="line">        this.port =port;</span><br><span class="line">        this.user=user;</span><br><span class="line">        this.pwd =pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //上传服务器</span><br><span class="line">    public static boolean uploadFile(List&lt;File&gt; fileList) throws IOException &#123;</span><br><span class="line">        FTPUtil ftpUtil = new FTPUtil(ftpIp,21,ftpUser,ftpPass);</span><br><span class="line">        logger.info(&quot;开始连接 ftp 服务器&quot;);</span><br><span class="line">        boolean result = ftpUtil.uploadFile(&quot;img&quot;,fileList);</span><br><span class="line">        logger.info(&quot;开始连接 ftp 服务器,结束上传,上传结果:&#123;&#125;&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private boolean uploadFile(String remotePath,List&lt;File&gt; fileList) throws IOException &#123;</span><br><span class="line">        boolean uploaded = true;</span><br><span class="line">        FileInputStream fis = null;</span><br><span class="line">        //连接 FTP 服务器</span><br><span class="line">        if(connectServer(this.ip,this.port,this.user,this.pwd))&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                ftpClient.changeWorkingDirectory(remotePath);</span><br><span class="line">                ftpClient.setBufferSize(1024);</span><br><span class="line">                ftpClient.setControlEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);  //二进制类型，可以防止乱码</span><br><span class="line">                ftpClient.enterLocalPassiveMode();   //打开本地的被动模式</span><br><span class="line">                for(File fileItem : fileList)&#123;</span><br><span class="line">                    fis = new FileInputStream(fileItem);</span><br><span class="line">                    ftpClient.storeFile(fileItem.getName(),fis);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                logger.error(&quot;上传文件异常&quot;,e);</span><br><span class="line">                uploaded = false;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                fis.close();  //释放连接</span><br><span class="line">                ftpClient.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return uploaded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //连接Ftp服务器</span><br><span class="line">    private boolean connectServer(String ip,int port,String user,String pwd)&#123;</span><br><span class="line"></span><br><span class="line">        boolean isSuccess = false;</span><br><span class="line">        ftpClient = new FTPClient();</span><br><span class="line">        try &#123;</span><br><span class="line">            ftpClient.connect(ip);</span><br><span class="line">            isSuccess = ftpClient.login(user,pwd);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.error(&quot;连接 FTP 服务器异常&quot;,e);</span><br><span class="line">        &#125;</span><br><span class="line">        return isSuccess;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getIp() &#123;</span><br><span class="line">        return ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIp(String ip) &#123;</span><br><span class="line">        this.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getPort() &#123;</span><br><span class="line">        return port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPort(int port) &#123;</span><br><span class="line">        this.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUser() &#123;</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUser(String user) &#123;</span><br><span class="line">        this.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPwd() &#123;</span><br><span class="line">        return pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPwd(String pwd) &#123;</span><br><span class="line">        this.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FTPClient getFtpClient() &#123;</span><br><span class="line">        return ftpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFtpClient(FTPClient ftpClient) &#123;</span><br><span class="line">        this.ftpClient = ftpClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个文件的作用就是获取服务器的属性以及负责连接服务器和上传文件到服务器。</p><p>3、我们继续回到ProductManageController.java文件，在最上面进行IFileService 的注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private IFileService iFileService;</span><br></pre></td></tr></table></figure></p><p>关于文件上传的一些参数的设置，大家可以打开dispatcher-servlet.xml文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文件上传 --&gt;</span><br><span class="line">&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/&gt; &lt;!-- 10m --&gt;</span><br><span class="line">        &lt;property name=&quot;maxInMemorySize&quot; value=&quot;4096&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>上面说了允许文件上传的最大尺寸，默认编码方式以及阈值，低于此值，只保留在内存里，超过此阈值，生成硬盘上的临时文件。</p><p>为了后面进行测试，你可以打开webapp下面的index.jsp文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--springmvc 上传文件--%&gt;</span><br><span class="line">&lt;form name=&quot;form1&quot; action=&quot;/manage/product/upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;upload_file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;springmvc 上传文件&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>这样后台文件上传的实现就介绍完了，接下来就进行后台富文本图片上传的开发。</p><h2 id="后台富文本图片上传的开发"><a href="#后台富文本图片上传的开发" class="headerlink" title="后台富文本图片上传的开发"></a>后台富文本图片上传的开发</h2><p>前面说过，我们这两个功能的接口是一样的，因此那部分代码就可以不用再写了，直接就可以进行使用。但是我们这里使用了simditor，你可以点击这里进行了解：<a href="https://simditor.tower.im/docs/doc-config.html" target="_blank" rel="noopener">simditor</a>，我们这里主要使用json，因此你可以拉到底部看到这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;success&quot;: true/false,</span><br><span class="line">  &quot;msg&quot;: &quot;error message&quot;, # optional</span><br><span class="line">  &quot;file_path&quot;: &quot;[real file path]&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以我们后面图片文件上传之后，返回的格式就是这个样子，这里告诉大家希望大家对此有个提前的认识。我们打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--富文本图片上传文件到服务器</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;richtext_img_upload.do&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Map  richtextImgUpload(HttpSession session, @RequestParam(value = &quot;upload_file&quot;,required = false) MultipartFile file, HttpServletRequest request, HttpServletResponse response)&#123;</span><br><span class="line">    Map resultMap =Maps.newHashMap();</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user = (User)session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user == null)&#123;</span><br><span class="line">        resultMap.put(&quot;success&quot;,false);</span><br><span class="line">        resultMap.put(&quot;msg&quot;,&quot;请登录管理员&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //富文本中对于返回值有自己的要求,我们使用simditor，因此按照simditor的要求进行返回，前面我们也说过了。</span><br><span class="line">    //&#123;</span><br><span class="line">    //     &quot;success&quot;: true/false,</span><br><span class="line">    //     &quot;msg&quot;: &quot;error message&quot;, # optional</span><br><span class="line">    //     &quot;file_path&quot;: &quot;[real file path]&quot;</span><br><span class="line">    //&#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line"></span><br><span class="line">        //如果是管理员就进行后台上传富文本文件的逻辑</span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(&quot;upload&quot;);</span><br><span class="line">        String targetFileName = iFileService.upload(file,path);</span><br><span class="line"></span><br><span class="line">       //判断文件名是否为空，如果为空的话</span><br><span class="line">        if(StringUtils.isBlank(targetFileName))&#123;</span><br><span class="line">            resultMap.put(&quot;success&quot;,false);</span><br><span class="line">            resultMap.put(&quot;msg&quot;,&quot;上传失败&quot;);</span><br><span class="line">            return resultMap;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String url = PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;)+targetFileName;   //进行url的拼接以供前端使用</span><br><span class="line">        resultMap.put(&quot;success&quot;,true);</span><br><span class="line">        resultMap.put(&quot;msg&quot;,&quot;上传成功&quot;);</span><br><span class="line">        resultMap.put(&quot;file_path&quot;,url);</span><br><span class="line">        response.addHeader(&quot;Access-Control-Allow-Headers&quot;,&quot;X-File-Name&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        resultMap.put(&quot;success&quot;,false);</span><br><span class="line">        resultMap.put(&quot;msg&quot;,&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个段代码就是核心代码，所以我需要说明几点：<br>1、为什么我们最后的返回是一个map，因为simditor文档要求最后返回的是一个json而且是以一种键值对的格式进行返回，所以你要莫使用map，当然使用object也是可以的，你可以参考这篇文章：<a href="https://blog.csdn.net/qq_35221138/article/details/81239968" target="_blank" rel="noopener">list、map、对象对应json的格式</a>。</p><p>2、记住我们本项目都是使用了guava提供的map,set,list等，因为它们进行了更深层次的封装。</p><p>3、这里的逻辑就是先判断文件存在与否，不存在就直接返回失败，存在就进行url的拼接以及保存到header里面并及时显示成功之后的信息。这个逻辑还行，能理解。</p><p>同样为了后面进行测试，你可以打开webapp下面的index.jsp文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--富文本图片上传文件--%&gt;</span><br><span class="line">&lt;form name=&quot;form2&quot; action=&quot;/manage/product/richtext_img_upload.do&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;upload_file&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;富文本图片上传文件&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于后台文件上传和后台富文本图片上传开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十五）：后台商品列表动态分页及搜索功能</title>
      <link href="/2018/08/24/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E5%8A%A8%E6%80%81%E5%88%86%E9%A1%B5%E5%8F%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/08/24/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E5%8A%A8%E6%80%81%E5%88%86%E9%A1%B5%E5%8F%8A%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台商品列表动态分页和后台商品搜索功能的开发，这里面会涉及到mybatis-pagehelper的使用。</p><h2 id="商品列表动态分页"><a href="#商品列表动态分页" class="headerlink" title="商品列表动态分页"></a>商品列表动态分页</h2><p>忘了告诉你，你可以按住shift+ctrl+T进行类的搜索，这个功能是非常好用的。好了，我们正式开始介绍后台商品列表动态分页功能的实现。</p><p>首先打开ProductManageController.java文件，在里面新增以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--后台商品列表及动态分页</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;list.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse getList(HttpSession session,@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;) int pageNum, @RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;10&quot;) int pageSize)&#123;</span><br><span class="line"></span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就进行后台商品列表及动态分页的逻辑</span><br><span class="line">        return iProductService.getProductList(pageNum,pageSize);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员--后台商品列表及动态分页</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;PageInfo&gt; getProductList(int pageNum,int pageSize)&#123;</span><br><span class="line">        /***</span><br><span class="line">         * 使用mybatis-pagehelper的三个步骤：</span><br><span class="line">         * 1、startPage--start</span><br><span class="line">         * 2、填充自己的sql查询逻辑</span><br><span class="line">         * 3、pageHelper-收尾</span><br><span class="line">         * */</span><br><span class="line">        //startPage--start</span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">        //填充自己的sql查询逻辑</span><br><span class="line">        List&lt;Product&gt; productList =productMapper.selectList();</span><br><span class="line">        List&lt;ProductListVo&gt; productListVoList = Lists.newArrayList();  //Lists这是guava对list的封装</span><br><span class="line">        for(Product productItem : productList)&#123;</span><br><span class="line">            ProductListVo productListVo = assembleProductListVo(productItem);</span><br><span class="line">            productListVoList.add(productListVo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //pageHelper-收尾</span><br><span class="line">        PageInfo pageResult = new PageInfo(productList);</span><br><span class="line">        pageResult.setList(productListVoList);</span><br><span class="line">        return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //新的商品用于商品列表信息的获取</span><br><span class="line">    private ProductListVo assembleProductListVo(Product product) &#123;</span><br><span class="line">        ProductListVo productListVo = new ProductListVo();</span><br><span class="line">        productListVo.setId(product.getId());</span><br><span class="line">        productListVo.setCategoryId(product.getCategoryId());</span><br><span class="line">        productListVo.setName(product.getName());</span><br><span class="line">        productListVo.setSubtitle(product.getSubtitle());</span><br><span class="line">        productListVo.setMainImage(product.getMainImage());</span><br><span class="line">        productListVo.setPrice(product.getPrice());</span><br><span class="line">        productListVo.setStatus(product.getStatus());</span><br><span class="line">        productListVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;, &quot;http://img.licheetools.top/&quot;));</span><br><span class="line"></span><br><span class="line">        return productListVo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关于这段代码，我需要说明几点事项：<br>1、因为这里我们使用了mybatis-pagehelper这个分页插件，因此有必要了解一下它的官方文档：<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">使用方法</a>，觉得看不懂得可以参看这篇文章：<a href="https://blog.csdn.net/cs_hnu_scw/article/details/80718467" target="_blank" rel="noopener">手把手教你如何玩转插件：分页插件（Pagehelper）</a>。</p><p>2、因为我们后台已经有一个实现商品详情信息的功能了，这里我们只是对其进行分页而已，而且是不需要获取更多的信息，因此有必要新建一个product对象，我们称其为ProductListVo。所以我们就要打开vo这个包，在里面新建一个ProductListVo类，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class ProductListVo &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private Integer categoryId;</span><br><span class="line">    private String name;</span><br><span class="line">    private String subtitle;</span><br><span class="line">    private String mainImage;</span><br><span class="line">    private BigDecimal price;</span><br><span class="line">    private Integer status;</span><br><span class="line">    private String imageHost;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCategoryId() &#123;</span><br><span class="line">        return categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCategoryId(Integer categoryId) &#123;</span><br><span class="line">        this.categoryId = categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSubtitle() &#123;</span><br><span class="line">        return subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubtitle(String subtitle) &#123;</span><br><span class="line">        this.subtitle = subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMainImage() &#123;</span><br><span class="line">        return mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMainImage(String mainImage) &#123;</span><br><span class="line">        this.mainImage = mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(BigDecimal price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(Integer status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也许你也注意到，我们就是选择自己需要的信息然后才进行组装成一个新的product。</p><p>3、我们继续回到ProductServiceImpl.java文件，这后面的那段组装新的Product的代码是不是非常眼熟，对就是和我们之前的商品详情信息组装几乎是一模一样的，但是还依然要注意ImageHost这个字段的获取，你可以照搬前面的代码。</p><p>4、看到<code>List&lt;Product&gt; productList =productMapper.selectList();</code>这段代码，说明我们需要需要去productMapper.java文件里面添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Product&gt; selectList();</span><br></pre></td></tr></table></figure></p><p>然后打开productMapper.xml文件，往里面添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectList&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    order by id asc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>最后打开IProductService.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; getProductList(int pageNum, int pageSize);    //后台管理员--后台商品列表及动态分页</span><br></pre></td></tr></table></figure></p><h2 id="后台商品搜索功能开发"><a href="#后台商品搜索功能开发" class="headerlink" title="后台商品搜索功能开发"></a>后台商品搜索功能开发</h2><p>老规矩，我们首先打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--后台商品搜索功能</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(&quot;search.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse productSearch(HttpSession session,String productName,Integer productId,@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;) int pageNum, @RequestParam(value = &quot;pageSize&quot;,defaultValue = &quot;10&quot;) int pageSize)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就进行后台商品搜索功能开发的逻辑</span><br><span class="line">        return iProductService.productSearch(productName,productId,pageNum,pageSize);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员--后台商品搜索功能(同样也需要分页)</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;PageInfo&gt; productSearch(String productName,Integer productId,int pageNum, int pageSize)&#123;</span><br><span class="line"></span><br><span class="line">    //startPage--start</span><br><span class="line">    PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">    if(StringUtils.isNotBlank(productName))&#123;</span><br><span class="line">        productName = new StringBuilder().append(&quot;%&quot;).append(productName).append(&quot;%&quot;).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //填充自己的sql查询逻辑</span><br><span class="line">    List&lt;Product&gt; productList =productMapper.selectByNameAndProductId(productName,productId);</span><br><span class="line">    List&lt;ProductListVo&gt; productListVoList = Lists.newArrayList();  //Lists这是guava对list的封装</span><br><span class="line">    for(Product productItem : productList)&#123;</span><br><span class="line">        ProductListVo productListVo = assembleProductListVo(productItem);</span><br><span class="line">        productListVoList.add(productListVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //pageHelper-收尾</span><br><span class="line">    PageInfo pageResult = new PageInfo(productList);</span><br><span class="line">    pageResult.setList(productListVoList);</span><br><span class="line">    return ServerResponse.createBySuccess(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于这段代码，我需要说明几点事项：<br>1、<code>productName = new StringBuilder().append(&quot;%&quot;).append(productName).append(&quot;%&quot;).toString();</code>这行代码的意思就是构造一个新的productName对象，就是用于数据库字段的查找，我们知道如果你要进行查找，特别是模糊查找，那么相应的sql语句是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from store_product where name like %productName%；</span><br></pre></td></tr></table></figure></p><p>这里我们为了xml里面书写sql语句的便捷，就在这里进行了转化，此时的<code>productName=%productName%</code>。</p><p>2、%：表示任意0个或多个字，可匹配任意类型和长度的字符；_： 表示任意单个字符，匹配单个任意字符，它常用来限制表达式的字符长度语句。</p><p>3、看到<code>productMapper.selectByNameAndProductId(productName,productId);</code>你应该就知道需要打开dao包的ProductMapper.java这个接口，在里面定义一个查询sql的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Product&gt; selectByNameAndProductId(@Param(value = &quot;productName&quot;) String productName,@Param(value = &quot;productId&quot;) Integer productId);  //注意在mybatis里面，多个参数时需要使用param注解。</span><br></pre></td></tr></table></figure></p><p>然后我们打开ProductMapper.xml文件，在里面新增sql查询语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_product</span><br><span class="line">  where id=#&#123;productId&#125; || name like #&#123;productName&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>这种你觉得可以莫，我觉得不能使用短路或，因为一旦前面id为空，后面就不进行判断了，所以我们需要进行改写：</p><p>下面的如何？使用了if判断条件，但是还是有问题就是假如两个条件都不满足条件，那就会报错，因此这种也是不可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_product</span><br><span class="line">  &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">    where name like #&#123;productName&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">    and id =#&#123;productId&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>再来看看下面这个版本，这个经过使用<code>where 1=1</code>这个条件，的确可以满足要求，但是你不觉得这个太Low了莫？在这里加一个没有任何关系的<code>where 1=1</code>是不是没必要？对，mybatis给我们提供了一个where判断，可以避免这种情况的发生。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">  from store_product</span><br><span class="line">  where 1=1</span><br><span class="line">  &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">    and name like #&#123;productName&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">  &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">    and id =#&#123;productId&#125;</span><br><span class="line">  &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>就是下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">            and name like #&#123;productName&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">            and id =#&#123;productId&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>或者是这样的，都是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByNameAndProductId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">    &lt;include refid=&quot;Base_Column_List&quot;/&gt;</span><br><span class="line">    from store_product</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;productName != null&quot;&gt;</span><br><span class="line">            or name like #&#123;productName&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;productId != null&quot;&gt;</span><br><span class="line">            or id =#&#123;productId&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>也就是说一旦逻辑传到where里面，而且if判断条件成立的情况下，将所有的or或者and替换为where，这样我们就不需要担心后面的where条件是否成立了。</p><p>最后打开IProductService.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;PageInfo&gt; productSearch(String productName,Integer productId,int pageNum, int pageSize);  //后台管理员--后台商品搜索功能(同样也需要分页)</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于后台商品列表动态分页和后台商品搜索功能的开发介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十四）：商品详情信息获取</title>
      <link href="/2018/08/23/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"/>
      <url>/2018/08/23/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台商品详细信息获取的功能，这里面有几个字段的获取比较特殊，需要格外注意。</p><h2 id="获取商品详情"><a href="#获取商品详情" class="headerlink" title="获取商品详情"></a>获取商品详情</h2><p>首先打开ProductManageController.java文件，在里面新增以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员获取商品的详情</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;detail.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse getDetail(HttpSession session, Integer productId)&#123;</span><br><span class="line"></span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加我们获取商品详情的逻辑</span><br><span class="line">            return iProductService.manageGetDetail(productId);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 后台管理员获取商品的详情</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;ProductDetailVo&gt; manageGetDetail(Integer productId) &#123;</span><br><span class="line">    //判断商品是否存在</span><br><span class="line">    if (productId == null) &#123;   //商品id不存在</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Product product = productMapper.selectByPrimaryKey(productId);</span><br><span class="line">    if (product == null) &#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该商品已下架或者删除！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // vo对象--value object</span><br><span class="line">    //pojo --&gt;bo(business object)---&gt;vo(view object)</span><br><span class="line">    //我们这里还是先按照技术结构的演变，使用vo等到后面升级的时候再进行替换</span><br><span class="line"></span><br><span class="line">    //商品存在,我们现在是进行信息的传递</span><br><span class="line">    ProductDetailVo productDetailVo =assembleProductDetailVo(product);</span><br><span class="line">   return ServerResponse.createBySuccess(productDetailVo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们知道现在是要获取商品的详细信息，那么我们可以使用不同的架构来完成，有两种架构可供选择：pojo –&gt;vo对象（value object）和pojo –&gt;bo(business object)—&gt;vo(view object)，考虑到技术的演变，我们这里还是使用vo等到后面升级的时候再进行替换。前面我们进行了商品信息是否存在的判断，现在是有商品，那么如何获取商品呢？</p><p>这里我们写了一个方法，用于获取商品信息(在ProductServiceImpl.java文件里面继续写入以下代码：)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private ProductDetailVo assembleProductDetailVo(Product product) &#123;</span><br><span class="line">    ProductDetailVo productDetailVo = new ProductDetailVo();</span><br><span class="line">    productDetailVo.setId(product.getId());</span><br><span class="line">    productDetailVo.setSubtitle(product.getSubtitle());</span><br><span class="line">    productDetailVo.setPrice(product.getPrice());</span><br><span class="line">    productDetailVo.setMainImage(product.getMainImage());</span><br><span class="line">    productDetailVo.setSubImages(product.getSubImages());</span><br><span class="line">    productDetailVo.setCategoryId(product.getCategoryId());</span><br><span class="line">    productDetailVo.setDetail(product.getDetail());</span><br><span class="line">    productDetailVo.setName(product.getName());</span><br><span class="line">    productDetailVo.setStatus(product.getStatus());</span><br><span class="line">    productDetailVo.setStock(product.getStock());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //imageHost:这个我们需要进行单独的配置，这样便于后面的维护</span><br><span class="line">    productDetailVo.setImageHost(PropertiesUtil.getProperty(&quot;ftp.server.http.prefix&quot;, &quot;http://img.licheetools.top/&quot;));</span><br><span class="line"></span><br><span class="line">    //parentCategoryId</span><br><span class="line">    Category category = categoryMapper.selectByPrimaryKey(product.getId());</span><br><span class="line">    if (category ==null) &#123;</span><br><span class="line">        productDetailVo.setParentCategoryId(0);   //没有父节点就默认该节点为0</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        productDetailVo.setParentCategoryId(category.getParentId());  //存在就赋值给它</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //createTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">    productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));</span><br><span class="line"></span><br><span class="line">    //updateTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">    productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));</span><br><span class="line">    return productDetailVo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>既然我们使用了vo那么我们就要去vo包里面新建一个ProductDetailVo.java，在里面写入以下代码，这个文件里面就是定义一些你需要查询的商品字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">package top.store.vo;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class ProductDetailVo &#123;</span><br><span class="line">    private Integer  id;</span><br><span class="line">    private Integer categoryId;</span><br><span class="line">    private String name;</span><br><span class="line">    private String subtitle;</span><br><span class="line">    private String mainImage;</span><br><span class="line">    private String subImages;</span><br><span class="line">    private String detail;</span><br><span class="line">    private BigDecimal price;</span><br><span class="line">    private Integer stock;</span><br><span class="line">    private Integer status;</span><br><span class="line">    private String createTime;</span><br><span class="line">    private String updateTime;</span><br><span class="line"></span><br><span class="line">    private String imageHost;   //这个是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问</span><br><span class="line">    private Integer parentCategoryId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getCategoryId() &#123;</span><br><span class="line">        return categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCategoryId(Integer categoryId) &#123;</span><br><span class="line">        this.categoryId = categoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSubtitle() &#123;</span><br><span class="line">        return subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubtitle(String subtitle) &#123;</span><br><span class="line">        this.subtitle = subtitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMainImage() &#123;</span><br><span class="line">        return mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMainImage(String mainImage) &#123;</span><br><span class="line">        this.mainImage = mainImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSubImages() &#123;</span><br><span class="line">        return subImages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubImages(String subImages) &#123;</span><br><span class="line">        this.subImages = subImages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDetail() &#123;</span><br><span class="line">        return detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDetail(String detail) &#123;</span><br><span class="line">        this.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BigDecimal getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(BigDecimal price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStock() &#123;</span><br><span class="line">        return stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStock(Integer stock) &#123;</span><br><span class="line">        this.stock = stock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(Integer status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCreateTime() &#123;</span><br><span class="line">        return createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCreateTime(String createTime) &#123;</span><br><span class="line">        this.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUpdateTime() &#123;</span><br><span class="line">        return updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUpdateTime(String updateTime) &#123;</span><br><span class="line">        this.updateTime = updateTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getImageHost() &#123;</span><br><span class="line">        return imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setImageHost(String imageHost) &#123;</span><br><span class="line">        this.imageHost = imageHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getParentCategoryId() &#123;</span><br><span class="line">        return parentCategoryId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setParentCategoryId(Integer parentCategoryId) &#123;</span><br><span class="line">        this.parentCategoryId = parentCategoryId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>里面我们有一个<code>imageHost</code>字段，它是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问。继续回到我们的ProductServiceImpl.java文件，不知道细心的你发现没有，有4个字段的获取我们是使用了特殊的方法。其实也正是因为这个原因，我们并没有直接从product对象里面直接获取信息，因为那样获取的信息有可能不是我们所需要的格式，所以我们这里就重新定义了一个ProductDetailVo类，它的实例对象都是来源于product对象但是又进行了更深层次的处理，因此它就是我们想要的。</p><p>那么这4个特殊字段的获取应该怎么操作呢？接下来一一为你介绍。</p><h3 id="imageHost字段获取"><a href="#imageHost字段获取" class="headerlink" title="imageHost字段获取"></a>imageHost字段获取</h3><p>前面说过因为imageHost是图片服务器的前缀，我们后面通过这个前缀和图片进行拼接从而形成url进行访问，所以肯定会涉及到一些服务器属性的配置，这样我们把与服务器属性相关的利用配置文件来处理，这样一旦服务器发送变动，你只需要修改一下配置文件即可，不需要进行很多代码的修改，无形中提高了代码的可维护性。</p><p>打开util包，在里面新建一个PropertiesUtil.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class PropertiesUtil &#123;</span><br><span class="line"></span><br><span class="line">    //定义日志</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(PropertiesUtil.class);</span><br><span class="line"></span><br><span class="line">    private static Properties properties;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        String fileName =&quot;store.properties&quot;;</span><br><span class="line">        properties =new Properties();</span><br><span class="line">        try &#123;</span><br><span class="line">            properties.load(new InputStreamReader(PropertiesUtil.class.getClassLoader().getResourceAsStream(fileName),&quot;UTF-8&quot;));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            logger.info(&quot;配置文件读取异常&quot;,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //定义方法用于从store.properties文件中读取信息</span><br><span class="line">    public static String getProperty(String key)&#123;</span><br><span class="line">        //可能我们写的property文件存在空格，需要去掉key包含的空格</span><br><span class="line">        String value =properties.getProperty(key.trim());</span><br><span class="line">        if(StringUtils.isBlank(value))&#123;   //注意这里使用isBlank，就算是空格和制表符也是为空</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return value.trim();  //有可能后面的值也存在空值</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //定义方法用于从store.properties文件中读取信息，添加默认参数</span><br><span class="line">    public static String getProperty(String key,String defaultValue)&#123;</span><br><span class="line">        //可能我们写的property文件存在空格，需要去掉key包含的空格</span><br><span class="line">        String value =properties.getProperty(key.trim());</span><br><span class="line">        if(StringUtils.isBlank(value))&#123;   //注意这里使用isBlank，就算是空格和制表符也是为空</span><br><span class="line">            value= defaultValue;</span><br><span class="line">        &#125;</span><br><span class="line">        return value.trim();  //有可能后面的值也存在空值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们这里利用的就是静态代码块，因为它只在类被加载时执行，而且只执行一次。这里我们重载了两个方法，目的就是适应不同的业务需求。同时为了能及时发现问题，我们定义了日志，用于相关信息的输出。</p><h3 id="parentCategoryId字段获取"><a href="#parentCategoryId字段获取" class="headerlink" title="parentCategoryId字段获取"></a>parentCategoryId字段获取</h3><p>因为我们这里是通过商品的Id来获取其详细信息的，这样就可能会存在一个情况就是没有父节点，所以这个字段我们需要格外注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//parentCategoryId</span><br><span class="line">Category category = categoryMapper.selectByPrimaryKey(product.getId());</span><br><span class="line">if (category ==null) &#123;</span><br><span class="line">    productDetailVo.setParentCategoryId(0);   //没有父节点就默认该节点为0</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    productDetailVo.setParentCategoryId(category.getParentId());  //存在就赋值给它</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间字段获取"><a href="#时间字段获取" class="headerlink" title="时间字段获取"></a>时间字段获取</h3><p>在这里我们有两个关于时间的字段：createTime和updateTime，我们知道在mybatis里面时间单位都是毫秒数，这是不利于我们展示的，所以需要进行配置。我们可以自己定义一个专门用于处理时间的工具类。打开util包，在里面新建一个工具类DateTimeUtil，我们知道一般时间处理就两种格式：str-&gt;Date或者是Date-&gt;str。这里我们使用了joda-time这个专门用于处理时间的工具，具体的可以参考这里：<a href="https://blog.csdn.net/backbug/article/details/78646152" target="_blank" rel="noopener">Joda-Time的使用</a>。DateTimeUtil文件写入以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.joda.time.DateTime;</span><br><span class="line">import org.joda.time.format.DateTimeFormat;</span><br><span class="line">import org.joda.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class DateTimeUtil &#123;</span><br><span class="line">    //我们使用joda-time</span><br><span class="line"></span><br><span class="line">    //定义一下我们的日期格式</span><br><span class="line">    public static final String STANDARD_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line"></span><br><span class="line">    //主要完成两种类型的转换</span><br><span class="line">    //str-&gt;Date</span><br><span class="line">    //Date-&gt;str</span><br><span class="line"></span><br><span class="line">    //str-&gt;Date，使用前面定义的默认的日期格式</span><br><span class="line">    public static Date strToDate(String dateTimeStr)&#123;</span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(STANDARD_FORMAT);</span><br><span class="line">        DateTime dateTime = dateTimeFormatter.parseDateTime(dateTimeStr);</span><br><span class="line">        return dateTime.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //str-&gt;Date</span><br><span class="line">    public static Date strToDate(String dateTimeStr,String formatStr)&#123;</span><br><span class="line">        DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(formatStr);</span><br><span class="line">        DateTime dateTime = dateTimeFormatter.parseDateTime(dateTimeStr);</span><br><span class="line">        return dateTime.toDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //Date-&gt;str，使用前面定义的默认的日期格式</span><br><span class="line">    public static String dateToStr(Date date)&#123;</span><br><span class="line">        if(date == null)&#123;</span><br><span class="line">            return StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime dateTime = new DateTime(date);</span><br><span class="line">        return dateTime.toString(STANDARD_FORMAT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //Date-&gt;str</span><br><span class="line">    public static String dateToStr(Date date,String formatStr)&#123;</span><br><span class="line">        if(date == null)&#123;</span><br><span class="line">            return StringUtils.EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line">        DateTime dateTime = new DateTime(date);</span><br><span class="line">        return dateTime.toString(formatStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //测试上面方法有没有问题的方法</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(DateTimeUtil.dateToStr(new Date(),&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line">        System.out.println(DateTimeUtil.strToDate(&quot;2008-08-08 20:08:08&quot;,&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回到ProductServiceImpl.java文件，添加以下代码（实际上前面已经写过了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//createTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">      productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));</span><br><span class="line"></span><br><span class="line">//updateTime在mybatis里面都是毫秒数，不利于我们的展示，我们需要进行配置</span><br><span class="line">       productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));</span><br></pre></td></tr></table></figure><p>最后打开IProductService.java文件，里面写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;ProductDetailVo&gt; manageGetDetail(Integer productId);     //后台管理员获取商品的详情</span><br></pre></td></tr></table></figure><p>这样我们本篇，关于后台商品详细信息获取功能的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十三）：后台商品的增加与更新</title>
      <link href="/2018/08/22/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E5%95%86%E5%93%81%E7%9A%84%E5%A2%9E%E5%8A%A0%E4%B8%8E%E6%9B%B4%E6%96%B0/"/>
      <url>/2018/08/22/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E5%95%86%E5%93%81%E7%9A%84%E5%A2%9E%E5%8A%A0%E4%B8%8E%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍后台商品新增，更新和上下架功能开发。说的比较通俗易懂的话，其实就是后台商品的增删改查一部分功能而已。</p><h3 id="商品模块开发"><a href="#商品模块开发" class="headerlink" title="商品模块开发"></a>商品模块开发</h3><p>商品模块开发分为前台和后台两部分，其中前台包括产品搜索，动态排序列表和商品详情；后台包括：商品列表、商品搜索、图片上传、富文本上传、商品详情、商品上下架、增加商品以及更新商品等。</p><p>在此过程中，你将会学到一下知识：1、FTP 服务器的对接；2、SpringMVC 文件上传；3、流读取 Properties 配置文件；4、抽取 POJO、BO、VO 对象之间的转换关系及解决思路；5、joda-time 快速入门；6、静态块；7、Mybatis-PageHelper 高效准确地分页及动态排序；8、Mybatis 对 List 遍历的实现方法；9、Mybatis 对 where 语句动态拼装的几个版本演变等。</p><h3 id="POJO、BO、VO"><a href="#POJO、BO、VO" class="headerlink" title="POJO、BO、VO"></a>POJO、BO、VO</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b33db7e922a826f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="POJO、VO"><a href="#POJO、VO" class="headerlink" title="POJO、VO"></a>POJO、VO</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3cbb6ef1c69493c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>数据表设计：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4f8d63402964d9e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="后台产品新增"><a href="#后台产品新增" class="headerlink" title="后台产品新增"></a>后台产品新增</h2><p>在controller文件的backend包里面新建一个ProductManageController.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IProductService;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/product&quot;)</span><br><span class="line">public class ProductManageController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IProductService iProductService;</span><br><span class="line"></span><br><span class="line">    /****</span><br><span class="line">     *</span><br><span class="line">     * 后台管理员保存商品</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(&quot;save.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse productSave(HttpSession session, Product product)&#123;</span><br><span class="line"></span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加我们保存商品的逻辑</span><br><span class="line">            return iProductService.saveOrUpdateProduct(product);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个和之前写的关于商品分类的模块其实很类似。接着我们在impl包里面新建一个ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.ProductMapper;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line">import top.store.service.IProductService;</span><br><span class="line"></span><br><span class="line">@Service(&quot;iProductService&quot;)</span><br><span class="line">public class ProductServiceImpl implements IProductService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 后台管理员保存商品</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse saveOrUpdateProduct(Product product)&#123;</span><br><span class="line">        if(product != null)&#123;</span><br><span class="line">            //产品主图的选择</span><br><span class="line">            if(StringUtils.isNoneBlank(product.getSubImages()))&#123;  //存在子图的情况下</span><br><span class="line">                String[] subImageArray = product.getSubImages().split(&quot;,&quot;);</span><br><span class="line">                if(subImageArray.length&gt;0)&#123;</span><br><span class="line">                    product.setMainImage(subImageArray[0]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //如果是更新的话，我们产品的id肯定是存在的，不能为空（与前端进行了约定）</span><br><span class="line">            if(product.getId() != null)&#123;</span><br><span class="line">               int rowCount = productMapper.updateByPrimaryKey(product);   //前端更新肯定是全部商品</span><br><span class="line">                if(rowCount&gt;0)&#123;</span><br><span class="line">                    return ServerResponse.createBySuccessMassage(&quot;更新产品成功&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;更新产品失败&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                //如果是新增的话，产品是没有id的，就要执行插入操作</span><br><span class="line">              int rowCount =  productMapper.insert(product);   //前端更新肯定是全部商品</span><br><span class="line">                if(rowCount&gt;0)&#123;</span><br><span class="line">                    return ServerResponse.createBySuccessMassage(&quot;新增产品成功&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;新增产品失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;保存或更新产品参数不正确&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意几点：</strong><br><strong>1、</strong>我们首先需要判断产品是否存在，存在然后判断产品是否存在子图，如果存在，我们就取第一个子图作为产品的主图进行前台的显示。<br><strong>2、</strong>我们这里把商品的修改和更新的逻辑写在一起了，我们在前端进行了声明：就是如果是进行产品的更新就必须把产品id传进来，然后依据Id来进行判断，否则就是新增产品的操作，这个应该还是比较好理解的.</p><p>接着我们在Service包里面新建一个IProductService.java文件（记住前面是I说明是接口），里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.Product;</span><br><span class="line"></span><br><span class="line">public interface IProductService  &#123;</span><br><span class="line">    ServerResponse saveOrUpdateProduct(Product product);    //后台管理员保存商品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们关于商品的更新和新增操作就完成了，接下来是后台管理员进行商品信息的状态设置。</p><h2 id="上下架功能开发"><a href="#上下架功能开发" class="headerlink" title="上下架功能开发"></a>上下架功能开发</h2><p>首先打开ProductManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *</span><br><span class="line">    * 后台管理员进行商品的上下架状态修改</span><br><span class="line">    * */</span><br><span class="line">   @RequestMapping(&quot;set_sale_status.do&quot;)</span><br><span class="line">   @ResponseBody   //自动序列化json功能</span><br><span class="line">   public ServerResponse setSaleStatus(HttpSession session, Integer productId,Integer status)&#123;</span><br><span class="line"></span><br><span class="line">       //判断一下登录情况</span><br><span class="line">       User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">       if(user ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       //判断一下是不是管理员身份</span><br><span class="line">       if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">           //如果是管理员就增加我们进行商品上下架的逻辑</span><br><span class="line">           return iProductService.setSaleStatus(productId,status);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ProductServiceImpl.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *</span><br><span class="line">    * 后台管理员进行商品的上下架状态修改</span><br><span class="line">    * */</span><br><span class="line">   public ServerResponse&lt;String&gt; setSaleStatus(Integer productId,Integer status)&#123;</span><br><span class="line">       if(productId ==null || status ==null)&#123;</span><br><span class="line">           return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(),ResponseCode.ILLEGAL_ARGUMENT.getDesc());</span><br><span class="line">       &#125;</span><br><span class="line">       Product product =new Product();</span><br><span class="line">       product.setId(productId);</span><br><span class="line">       product.setStatus(status);</span><br><span class="line"></span><br><span class="line">       int rowCount = productMapper.updateByPrimaryKeySelective(product);    //我们这里是仅对状态进行修改，所以只需更新选中的即可</span><br><span class="line">       if(rowCount&gt;0)&#123;</span><br><span class="line">           return ServerResponse.createBySuccessMassage(&quot;修改产品销售状态成功！&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return ServerResponse.createByErrorMessage(&quot;修改产品销售状态失败！&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>最后打开IProductService.java文件，里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; setSaleStatus(Integer productId,Integer status);    //后台管理员进行商品的上下架状态修改</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于后台商品新增，更新和上下架功能开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十二）：分类管理功能开发</title>
      <link href="/2018/08/21/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/21/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们继续来介绍有关分类管理的内容，具体包括：查询节点和递归查找功能开发等。</p><h3 id="查询节点功能开发"><a href="#查询节点功能开发" class="headerlink" title="查询节点功能开发"></a>查询节点功能开发</h3><p>我们打开CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 后台管理员查询品类子节点（平级）</span><br><span class="line">   * */</span><br><span class="line">  @RequestMapping(value = &quot;get_category.do&quot;)</span><br><span class="line">  @ResponseBody   //自动序列化json功能</span><br><span class="line">  public ServerResponse getChildrenParallelCategory(HttpSession session,@RequestParam(value = &quot;categoryId&quot;,defaultValue = &quot;0&quot;) Integer categoryId)&#123;</span><br><span class="line">      //判断一下登录情况</span><br><span class="line">      User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">      if(user ==null)&#123;</span><br><span class="line">          return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //判断一下是不是管理员身份</span><br><span class="line">      if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">          //如果是管理员,我们就查询子节点的category信息，并且不递归，保持平级</span><br><span class="line">          return iCategoryService.getChildrenParallelCategory(categoryId);</span><br><span class="line"></span><br><span class="line">      &#125;else &#123;</span><br><span class="line">          return  ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CategoryServiceImpl.java文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> /****</span><br><span class="line"> *</span><br><span class="line"> *后台管理员查询品类子节点</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;List&lt;Category&gt;&gt; getChildrenParallelCategory(Integer categoryId)&#123;</span><br><span class="line">    List&lt;Category&gt; categoryList = categoryMapper.selectChildrenCategoryByParentId(categoryId);</span><br><span class="line">    if(CollectionUtils.isEmpty(categoryList))&#123;</span><br><span class="line">        loggger.info(&quot;未找到当前分类的子分类&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccess(categoryList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>几点说明：</strong><br><strong>1、</strong>在这里我们自己新定义了方法selectChildrenCategoryByParentId，所以我们要去CategoryMappr.java文件里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Category&gt; selectChildrenCategoryByParentId(Integer parentId);</span><br></pre></td></tr></table></figure></p><p>然后自然就得去CategoryMappr.xml文件里面进行sql语句的建立：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectChildrenCategoryByParentId&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;int&quot;&gt;  </span><br><span class="line">  select</span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">  from store_category</span><br><span class="line">  where parent_id = #&#123;parentId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>关于上面为什么这样写大家可以参看18-23行代码：(本文件)，也就是下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectByPrimaryKey&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;java.lang.Integer&quot; &gt;</span><br><span class="line">  select </span><br><span class="line">  &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">  from store_category</span><br><span class="line">  where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>这里判断列表是否为空，使用了<code>CollectionUtils.isEmpty</code>方法，返回的是boolean类型，注意我们之前判断字符串是否为空使用了<code>StringUtils.isEmpty</code>方法，我们简单看一下上面那个<code>CollectionUtils.isEmpty</code>方法的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isEmpty(Collection coll) &#123;</span><br><span class="line">    return coll == null || coll.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于是否是空和空集合都进行了判断，所以我们就可以不用考虑多种情况了。</p><p>最后打开ICategoryService.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;List&lt;Category&gt;&gt; getChildrenParallelCategory(Integer categoryId);   //后台管理员查询品类子节点（不递归保持平级）</span><br></pre></td></tr></table></figure></p><h2 id="递归查找功能开发"><a href="#递归查找功能开发" class="headerlink" title="递归查找功能开发"></a>递归查找功能开发</h2><p>我们上面那个查询节点功能开发完成的只是对于平级的查询，是不进行递归查询的。<br>接下来我们就来完成递归查找功能的开发，可能会有一些难以理解，但是我尽量以通俗易懂的方式来进行说明。</p><p>我们打开CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 后台管理员查询品类子节点（递归）</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;get_deep_category.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse getCategoryAndDeepChildrenCategory(HttpSession session,@RequestParam(value = &quot;categoryId&quot;,defaultValue = &quot;0&quot;) Integer categoryId)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员,我们就查询当前节点的id和递归查询子节点的id</span><br><span class="line">        return iCategoryService.selectCategoryAndChildrenById(categoryId);</span><br><span class="line"></span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return  ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开CategoryServiceImpl.java文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> /****</span><br><span class="line">     *</span><br><span class="line">     *后台管理员递归查询本节点及子节点的id并返回列表</span><br><span class="line">     */</span><br><span class="line">    public ServerResponse selectCategoryAndChildrenById(Integer categoryId)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> //递归算法，自己调用自己</span><br><span class="line">    private Set&lt;Category&gt; findChildrenCategory(Set&lt;Category&gt; categorySet,Integer categoryId)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们现在来完成递归算法的部分，递归就是自己调用自己，我们上面那个方法（<code>selectCategoryAndChildrenById</code>）就是实现总的要求查询本节点及子节点的id并返回列表。而递归算法的作用就是遍历当前节点，如果有子节点就把子节点当做父节点进行遍历，当父节点没有子节点的时候就进行递归退出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//递归算法，自己调用自己</span><br><span class="line">    private Set&lt;Category&gt; findChildrenCategory(Set&lt;Category&gt; categorySet,Integer categoryId)&#123;</span><br><span class="line">        Category category =categoryMapper.selectByPrimaryKey(categoryId);</span><br><span class="line">        //判断当前节点是否为空，不为空则继续</span><br><span class="line">        if(category != null)&#123;</span><br><span class="line">            categorySet.add(category);  //当前节点不为空就添加到集合里面，从它开始判断后面的子节点</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //查找子节点，递归算法一定要有一个退出的条件（也就是基准条件）这里是没有子节点就退出</span><br><span class="line">        List&lt;Category&gt; categoryList =categoryMapper.selectChildrenCategoryByParentId(categoryId);</span><br><span class="line">        //注意一下，因为我们这里是使用了mybatis，因此就算我们这里的categoryList是空，也不会返回null值，从而不会造成空指针异常</span><br><span class="line">        //对查询到的子节点进行遍历，然后调用前面查询当前节点的方法，其实也就是子节点被当做父节点使用，进行它下面的子节点的查询</span><br><span class="line">        for(Category categoryItem:categoryList)&#123;</span><br><span class="line">            findChildrenCategory(categorySet,categoryItem.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        return categorySet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>里面的注释写的应该比较详细了。对了还有一件事就是我们这里需要保证我们的category里面是没有重复元素的，如何实现没有重复元素呢？集合就可以，所以我们需要把我们category变成具有类似于集合的无重复性功能，你只要重写hashCode和equals方法，为什么重写这两个方法就可以呢？（在pojo里面的Category.java文件里面）这里我就不介绍了，我在另一篇《关于JAVA你必须知道的那些事（七）：输入输出流和集合》里面有过介绍，大家可以去我微信公众号里进行查看。如何快速重写这两个方法呢？在idea里面：code–&gt;generate–&gt;equals() and hashCode()，然后选择id就可以了，我们是通过id来进行判断的;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//重写equals和hashcode方法，目的就是使我们自定义的Category类型也能和集合一样具有消除不重复元素的功能</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object o) &#123;</span><br><span class="line">    if (this == o) return true;</span><br><span class="line">    if (o == null || getClass() != o.getClass()) return false;</span><br><span class="line">    Category category = (Category) o;</span><br><span class="line">    return Objects.equals(id, category.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">    return Objects.hash(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们继续回到CategoryServiceImpl.java文件，修改<code>selectCategoryAndChildrenById</code>方法的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public ServerResponse selectCategoryAndChildrenById(Integer categoryId)&#123;</span><br><span class="line">    Set&lt;Category&gt; categorySet = Sets.newHashSet();   //调用递归算法的时候进行初始化，使用sets这是guava提供的对于set的优化</span><br><span class="line">    findChildrenCategory(categorySet,categoryId);</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; categoryIdList = Lists.newArrayList();</span><br><span class="line">    if(categoryId != null)&#123;</span><br><span class="line">        for(Category categoryItem:categorySet)&#123;</span><br><span class="line">            categoryIdList.add(categoryItem.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccess(categoryIdList);  //返回查到的当前包括子节点的id列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意<code>Sets.newHashSet()</code>和<code>Lists.newArrayList()</code>都是使用了guava提供的类，具体可以参看这里：<a href="http://ifeve.com/google-guava/" target="_blank" rel="noopener">Google Guava官方教程（中文版）</a></p><p>最后打开ICategoryService.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse selectCategoryAndChildrenById(Integer categoryId);    //后台管理员递归查询本节点及子节点的id并返回列表</span><br></pre></td></tr></table></figure></p><p>不知道细心的你发现没有，我们这里关于分类的功能的地方，都没有强制使用提交的方式GET或者POST，因为分类可以允许你带参数，也可以不带参数，所以方法就不要求了。就类似于这样的，理解了么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;get_deep_category.do&quot;,method = RequestMethod.POST)</span><br></pre></td></tr></table></figure></p><p>接下来便是进行相关的商品品类的接口测试，这里就不介绍了，之前介绍过。</p><p>这样我们本篇关于查询节点和递归查找功能开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十一）：添加和更新分类名称</title>
      <link href="/2018/08/20/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%92%8C%E6%9B%B4%E6%96%B0%E5%88%86%E7%B1%BB%E5%90%8D%E7%A7%B0/"/>
      <url>/2018/08/20/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%92%8C%E6%9B%B4%E6%96%B0%E5%88%86%E7%B1%BB%E5%90%8D%E7%A7%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇，我们来介绍如何添加和更新分类的名称。里面的内容很多，希望大家对此有一个提前的认识。</p><h3 id="分类管理模块开发"><a href="#分类管理模块开发" class="headerlink" title="分类管理模块开发"></a>分类管理模块开发</h3><p>我们在分类管理模块开发主要介绍以下内容：获取节点；增加加点；修改名字；获取分类 ID；递归子节点 ID这些功能的实现相对来说比较有意思。在此过程中我们会介绍如何设计及封装无限层级的树状数据结构；递归算法的设计思想；如何处理复杂对象排重以及重写hashcode 和equal时应当注意的事项。</p><h2 id="添加商品分类"><a href="#添加商品分类" class="headerlink" title="添加商品分类"></a>添加商品分类</h2><p>因为商品分类都是在后台进行的，因此都在backend这个包里面。我们打开controller包下面的backend 包，在里面新建CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ResponseCode;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.ICategoryService;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/category&quot;)</span><br><span class="line">public class CategoryManageController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ICategoryService iCategoryService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后台管理员添加商品品类</span><br><span class="line">     * */</span><br><span class="line">    @RequestMapping(value = &quot;add_category.do&quot;)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse addCategory(HttpSession session,String categoryName,@RequestParam(value = &quot;parentId&quot;, defaultValue = &quot;0&quot;) int parentId)&#123;</span><br><span class="line">        //注意一下上面我们需要给parentId一个默认的值0,它是我们分类的根节点，否则就会出错</span><br><span class="line"></span><br><span class="line">        //判断一下登录情况</span><br><span class="line">        User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">        if(user ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断一下是不是管理员身份</span><br><span class="line">        if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">            //如果是管理员就增加我们处理分类的逻辑</span><br><span class="line">            return iCategoryService.addCategory(categoryName,parentId);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着在service里面新建一个ICategoryService.java文件，用于接口的声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line"></span><br><span class="line">public interface ICategoryService &#123;</span><br><span class="line">    ServerResponse addCategory(String categoryName, Integer parentId);  //管理员后台添加商品品类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在impl文件夹下新建CategoryServiceImpl.java文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.CategoryMapper;</span><br><span class="line">import top.store.pojo.Category;</span><br><span class="line">import top.store.service.ICategoryService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service(&quot;iCategoryService&quot;)</span><br><span class="line">public class CategoryServiceImpl implements ICategoryService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CategoryMapper categoryMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 管理员后台添加商品品类</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse addCategory(String categoryName,Integer parentId)&#123;</span><br><span class="line">        //校验一下两者是否为空</span><br><span class="line">        if(parentId ==null || StringUtils.isBlank(categoryName))&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;添加商品品类错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Category category =new Category();  //实例化一个分类对象</span><br><span class="line">        category.setName(categoryName);   //设置分类名</span><br><span class="line">        category.setParentId(parentId);   //设置父类id</span><br><span class="line">        category.setStatus(true);   //设置这个分类是可以使用的状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        int rowCount =categoryMapper.insert(category);</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            return ServerResponse.createBySuccess(&quot;添加商品品类成功！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;添加商品品类失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就完成了我们后台管理员添加商品分类的功能，你可能要问了我们还没在dao层的CategoryMapper里面定义方法呢，那是因为我们这里只是单纯的增删改查，里面已经给我们提供了它的实现，我们直接使用就可以，后面复杂的就可能需要自己定义方法和书写sql语句了。</p><h2 id="商品品类名称修改"><a href="#商品品类名称修改" class="headerlink" title="商品品类名称修改"></a>商品品类名称修改</h2><p>这个和上面的差不多，就是功能实现不同而已。我们打开CategoryManageController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后台管理员更新商品品类名称</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;set_category_name.do&quot;)</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse setCategoryName(HttpSession session,Integer categoryId,String categoryName)&#123;</span><br><span class="line">    //判断一下登录情况</span><br><span class="line">    User user=(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录，请登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //判断一下是不是管理员身份</span><br><span class="line">    if(iUserService.checkAdminRole(user).isSuccess())&#123;</span><br><span class="line">        //如果是管理员就增加我们处理更新分类名称的逻辑</span><br><span class="line">        return iCategoryService.setCategoryName(categoryId,categoryName);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return  ServerResponse.createByErrorMessage(&quot;无权限操作，需要管理员权限&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开ICategoryService.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse setCategoryName(Integer categoryId,String categoryName);   //后台管理员更新商品品类名称</span><br></pre></td></tr></table></figure></p><p>最后打开CategoryServiceImpl.java文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 管理员后台更新商品品类名称</span><br><span class="line">    * */</span><br><span class="line">   public ServerResponse setCategoryName(Integer categoryId,String categoryName)&#123;</span><br><span class="line">       //校验一下两者是否为空</span><br><span class="line">       if(categoryId ==null || StringUtils.isBlank(categoryName))&#123;</span><br><span class="line">           return ServerResponse.createByErrorMessage(&quot;添加商品品类错误&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Category category =new Category();  //实例化一个分类对象</span><br><span class="line">       category.setId(categoryId);  //传入id</span><br><span class="line">       category.setName(categoryName);   //设置新的品类名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       int rowCount =categoryMapper.updateByPrimaryKeySelective(category); //使用有选择性的更新，根据商品的id来进行更新</span><br><span class="line">       if(rowCount &gt;0)&#123;</span><br><span class="line">           return ServerResponse.createBySuccess(&quot;修改商品品类名字成功！&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return ServerResponse.createByErrorMessage(&quot;添加商品品类名字失败！&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这样我们本篇关于如何添加和更新分类的的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（十）：获取用户详细信息的功能开发</title>
      <link href="/2018/08/19/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E7%9A%84%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/19/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E7%9A%84%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上一篇中我们介绍了登录状态下重置密码功能开发，更新用户个人信息功能开发。那么本篇我们就来介绍如何获取用户详细信息的功能开发从而完成所有用户信息功能的开发。里面的内容很多，希望大家对此有一个提前的认识。</p><h2 id="获取用户详细信息的功能开发"><a href="#获取用户详细信息的功能开发" class="headerlink" title="获取用户详细信息的功能开发"></a>获取用户详细信息的功能开发</h2><p>我们的开发顺序是<code>service--&gt;mybatis--&gt;dao</code>，所以再次强调它的重要性！！！<br>打开UserController.java文件，写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 登录状态下的获取用户的详细信息</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = &quot;get_information.do&quot;,method = RequestMethod.POST)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;User&gt; getInformation(HttpSession session)&#123;</span><br><span class="line">    User currentUser =(User)session.getAttribute(Const.CURRENT_USER);   //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了</span><br><span class="line">    if(currentUser ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),&quot;用户未登录需要强制登录，状态status为10&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return iUserService.getInformation(currentUser.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 登录状态下的获取用户的详细信息</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;User&gt; getInformation(Integer userId)&#123;</span><br><span class="line">    User user =userMapper.selectByPrimaryKey(userId);</span><br><span class="line">    if(user ==null)&#123;//根据用户id来获取其详细信息</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该用户不存在&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    user.setPassword(StringUtils.EMPTY);  //将密码这种关键信息设置为空</span><br><span class="line">    return ServerResponse.createBySuccess(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下，我们这里使用了<code>selectByPrimaryKey</code>方法，目的就是根据userId来进行个人信息查询的。当然我们需要在后台提供一个管理员登录的方法，不会允许任何人都可以使用个人信息查询功能，只有管理员才有登录后台的权限。我们在controller 包下面再新建一个名为backend的包（backend顾名思义就是后台模块），然后在backend包下面新建UserManageController.java文件，在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.backend;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/manage/user&quot;)</span><br><span class="line">public class UserManageController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;login.do&quot;,method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;User&gt; login (String username, String password, HttpSession session)&#123;</span><br><span class="line">        ServerResponse&lt;User&gt; response =iUserService.login(username,password);</span><br><span class="line">        if(response.isSuccess())&#123;   //请求成功</span><br><span class="line">            User user = response.getData();</span><br><span class="line">            if(user.getRole() == Const.Role.ROLE_ADMIN)&#123;  //说明登录的是管理员</span><br><span class="line">                session.setAttribute(Const.CURRENT_USER,user);   //把用户添加到session里面</span><br><span class="line">                return response;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;不是管理员，无法登录&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后记得去IUserService.java文件里面添加接口类的声明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;User&gt; getInformation(Integer userId);   //登录状态下的获取用户的详细信息</span><br></pre></td></tr></table></figure></p><p>这样我们登录状态下获取用户个人详细信息的功能就开发完毕了。</p><p>最后记得去打开UserController.java文件，将里面目前为止所有的<code>method = RequestMethod.GET</code>修改为<code>method = RequestMethod.POST</code>，可以按住Ctrl+F调出搜索框，然后直接进行替换就可以了。</p><h3 id="Md5加盐值的问题"><a href="#Md5加盐值的问题" class="headerlink" title="Md5加盐值的问题"></a>Md5加盐值的问题</h3><p>这个问题后面会教大家如何使用，现在大家了解这个网站就行：<a href="https://www.cmd5.com/" target="_blank" rel="noopener">cmd5</a></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>到目前为止，关于个人用户的信息的开发已经完成了，接下来进行模块单元测试。<br>首先确保我们的tomcat的配置没有问题，打开logback.xml文件，具体检查的内容包括：项目日志的File和fileNamePattern的前一部分相同，然后启动我们的tomcat：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f86d082aa8f653ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>正常浏览器会自动打开<code>http://localhost:8080/</code>页面，上面只有Hello World，但是并不影响我们的测试，我们然后打开我们的restlet client进行模块测试，我这里以注册为例进行说明（注意需要打开数据库，实时观察数据的变动）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1bf568fdcb2ed77c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5d186cbafc1b7aa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面的测试过程非常简单，选择post提交方式，根据你在UserController里的mapping设置，补充完整url，然后选择form，输入你在接口类声明的参数，点击提交就能出现结果了（具体的结果根据你参数的填写而有所不同）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bd60ce31d3703ee2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上图是用户板块所有的测试接口，下面则是我们在测试时打印的日志：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-916285f2edec7cbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>通过上面的测试我们发现上面的接口都没有问题。</p><p>至此，我们关于用户的相关功能的实现就全部结束了，接下来我们开始进行商品信息的相关配置，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（九）：更新用户信息功能开发</title>
      <link href="/2018/08/18/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/18/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%9B%B4%E6%96%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上一篇中我们介绍了忘记密码状态下的重置密码的开发（其实也就是未登录状态），那么本篇我们就来介绍登录状态下重置密码功能开发，更新用户个人信息功能开发和获取用户详细信息功能开发从而完成所有用户信息功能的开发。里面的内容很多，希望大家对此有一个提前的认识。</p><h2 id="介绍登录状态下重置密码功能开发"><a href="#介绍登录状态下重置密码功能开发" class="headerlink" title="介绍登录状态下重置密码功能开发"></a>介绍登录状态下重置密码功能开发</h2><p>我们的开发顺序是<code>service--&gt;mybatis--&gt;dao</code>，所以再次强调它的重要性！！！<br>打开UserController.java文件，写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 登录状态下的重置密码</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = &quot;login_reset_password.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;String&gt; loginResetPassword(HttpSession session,String passwordOld,String passwordNew)&#123;</span><br><span class="line">    User user =(User)session.getAttribute(Const.CURRENT_USER);   //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了</span><br><span class="line">    if(user ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;用户未登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return iUserService.loginResetPassword(passwordOld,passwordNew,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前面我们说过应该是接着打开IUserService.java文件，但是那是三者参数一致的情况下，如果参数不一致就不能进行这一步了，所以我们综合觉得还是使用下面的步骤为好：<code>UserController---&gt;UserServiceImpl--&gt;IUserService--&gt;</code>这样就是比较好的开发过程了：<br>接着打开UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 登录状态下的重置密码的接口类</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;String&gt;  loginResetPassword(String passwordOld, String passwordNew,User user)&#123;</span><br><span class="line">    //为防止横向越权，我们要检验一下这个用户的旧密码（通常我们在修改密码这种关键信息的时候需要用户输入原来的密码进行身份确认）</span><br><span class="line">    // 而且我们查询的是一个 count(1)，如果你不指定 id（通过旧密码标识），那么结果必定是true，也就是count&gt;0;</span><br><span class="line">    int resultCount =userMapper.checkPasswordByUserId(MD5Util.MD5EncodeUtf8(passwordOld),user.getId());</span><br><span class="line">        if(resultCount ==0)&#123;//如果resultCount为0说明旧密码错误</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;旧密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        user.setPassword(MD5Util.MD5EncodeUtf8(passwordNew));</span><br><span class="line">        int rowCount =userMapper.updateByPrimaryKeySelective(user) ;  //注意这里使用updateByPrimaryKeySelective是因为我们这里不能使用上面的根据用户名来修改密码，而且最好是选择性的更新，不是全部更新</span><br><span class="line">        if(rowCount&gt;0)&#123;</span><br><span class="line">            return ServerResponse.createBySuccessMassage(&quot;密码修改成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;密码修改失败！&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>这里需要注意几点：</strong><br><strong>1、</strong>updateByPrimaryKeySelective方法，我们没有使用之前定义的updatePasswordByUsername方法是因为我们这里不根据用户名来进行密码的修改；没有使用updateByPrimaryKey方法是因为我们希望我们的更新是有选择性的，不是全部都进行修改；<br><strong>2、</strong><code>String question=userMapper.checkPasswordByUserId(MD5Util.MD5EncodeUtf8(passwordOld),user.getId());</code>看到这行代码大家就知道后面需要干嘛了：<br>打开UserMapper.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br><span class="line">   int checkPasswordByUserId(@Param(&quot;password&quot;)String password,@Param(&quot;userId&quot;)Integer userId);   //注意mybatis传递多个参数时，需要使用param注解</span><br></pre></td></tr></table></figure></p><p>然后去UserMapper.xml里面新增代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;checkPasswordByUserId&quot; resultType=&quot;int&quot; parameterType=&quot;map&quot;&gt;  &lt;!--注意使用多个参数是是需要使用map的--&gt;</span><br><span class="line">    select count(1) from store_user</span><br><span class="line">    where id = #&#123;userId&#125;</span><br><span class="line">    and password = #&#123;password&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>3、</strong>需要注意的一点是这里你不能仅仅只使用password 进行条件查询,因为可能有用户密码是相同的情况，然后受影响的行数必定大于0，后台还以为密码修改通过了呢，其实并没有，所以我们通过用户id和旧密码的条件查询限定，能很好的规避这一问题的发生。</p><p>最后记得打开IUserService.java文件，把我们接口类的声明添加进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; loginResetPassword(String passwordOld, String passwordNew,User user);  //登录状态下的重置密码</span><br></pre></td></tr></table></figure></p><p>这样我们登录状态下重置密码功能开发就完成了，接下来是用户个人信息更新功能的开发。</p><h2 id="用户个人信息更新功能开发"><a href="#用户个人信息更新功能开发" class="headerlink" title="用户个人信息更新功能开发"></a>用户个人信息更新功能开发</h2><p>打开UserController.java文件，写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     * 登录状态下的更新用户个人信息</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;update_information.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;User&gt; updateInformation(HttpSession session,User user)&#123; </span><br><span class="line"> //这里的返回值是User因为我们需要将更新的用户信息添加到session里面，而且传递给前端使用使用session将用户信息进行保存，user重载新的用户数据</span><br><span class="line">        User currentUser =(User)session.getAttribute(Const.CURRENT_USER);   //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了</span><br><span class="line">        if(currentUser ==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;用户未登录&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//代码未写完！！！！</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里我们把后面的一段代码给去掉了，没有写完是因为这里写完的话跳跃性就很大，你难以理解，后面随着介绍会慢慢补充的。<br>接着打开UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">    *</span><br><span class="line">    * 登录状态下的更新用户个人信息的接口类</span><br><span class="line">    */</span><br><span class="line">   public ServerResponse&lt;User&gt; updateInformation(User user)&#123;</span><br><span class="line">       //用户名不可以被更新</span><br><span class="line">       //邮箱也要进行校验，校验新的邮箱是不是已经存在，并且存在的邮箱与我们的新邮箱相等的话，不能是我们当前这个用户的</span><br><span class="line">       int resultCount =userMapper.checkEmailByUserId(user.getEmail(),user.getId());</span><br><span class="line">       if(resultCount&gt;0)&#123;   //说明此时邮箱被他人占用，提醒用户换一个试试</span><br><span class="line">           return ServerResponse.createByErrorMessage(&quot;该邮箱已经被使用，请更换邮箱并再次尝试更新&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       User updateUser =new User();   //创建一个新的更新对象</span><br><span class="line">       updateUser.setId(user.getId());   //更新用户id</span><br><span class="line">       updateUser.setEmail(user.getEmail());   //更新用户邮箱</span><br><span class="line">       updateUser.setPhone(user.getPhone());    //更新用户电话</span><br><span class="line">       updateUser.setQuestion(user.getQuestion());   //更新用户问题</span><br><span class="line">       updateUser.setAnswer(user.getAnswer());   //更新用户答案</span><br><span class="line"></span><br><span class="line">       //注意密码在前面我们专门对其进行了更新，这里就不再需要</span><br><span class="line"></span><br><span class="line">       int rowCount =userMapper.updateByPrimaryKeySelective(updateUser);</span><br><span class="line">       if(rowCount&gt;0)&#123;</span><br><span class="line">           return ServerResponse.createBySuccess(&quot;更新用户信息成功&quot;,updateUser);</span><br><span class="line">       &#125;</span><br><span class="line">       return ServerResponse.createByErrorMessage(&quot;更新用户信息失败&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>这里需要注意几点问题：</strong><br><strong>1、</strong>因为我们是根据用户名来进行登录的，因此用户名是不可以被更新的，必须从登录的用户里面取出来。还有就是在这里我们不进行密码的更新，因为我们之前针对密码已经进行过更新处理了。<br><strong>2、</strong>我们需要对邮箱进行校验，校验新的邮箱是不是已经存在，并且存在的邮箱与我们的新邮箱相等的话，不能是我们当前这个用户的（言外之意就是被人已经占用了这个邮箱）。怕你们不理解，我再说一遍，我们就只要校验新的邮箱是不是被别人注册过了这一情况即可。至于新邮箱不存在那就更好了，没人使用你就可以使用了；新邮箱存在而且就是本用户的，那就说明你没修改邮箱，直接提交就可以了。<br><strong>3、</strong><code>int resultCount =userMapper.checkEmailByUserId(user.getEmail(),user.getId());</code>看到这行代码大家就知道后面需要干嘛了：<br>打开UserMapper.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br><span class="line">   int checkEmailByUserId(@Param(value = &quot;email&quot;)String email,@Param(value = &quot;userId&quot;)Integer userId);   //注意mybatis传递多个参数时，需要使用param注解</span><br></pre></td></tr></table></figure></p><p>然后去UserMapper.xml里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;checkEmailByUserId&quot; resultType=&quot;int&quot; parameterType=&quot;map&quot;&gt;  &lt;!--注意使用多个参数是是需要使用map的，而且邮箱被别人占用--&gt;</span><br><span class="line">    select count(1) from store_user</span><br><span class="line">    where email = #&#123;email&#125;</span><br><span class="line">    and id != #&#123;userId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p><strong>4、</strong>对于rowCount大于0或者等于0的判断成立结果是随着你在UserMapper.xml里面书写的sql语句的不同而发生变化的，不是一成不变的。<br><strong>5、</strong><code>User updateUser =new User();</code> 这里我们新创建了一个更新对象，其中我们是选择的更新了部分信息，你从更新的字段和<code>updateByPrimaryKeySelective</code>方法就能看出来。</p><p>记得打开IUserService.java文件，把我们接口类的声明添加进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;User&gt; updateInformation(User user);   //登录状态下的更新用户个人信息</span><br></pre></td></tr></table></figure></p><p>你以为这就结束了么，按照正常步骤是到此为止了，但是我们前面特意遗留了一段代码，打开UserController.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 登录状态下的更新用户个人信息</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = &quot;update_information.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;User&gt; updateInformation(HttpSession session,User user)&#123;  //这里的返回值是User因为我们需要将更新的用户信息添加到session里面，而且传递给前端使用使用session将用户信息进行保存，user重载新的用户数据</span><br><span class="line">    User currentUser =(User)session.getAttribute(Const.CURRENT_USER);   //注意这里我们已经在session里面拿到了用户的信息，因此后面使用的就是user对象本身了</span><br><span class="line">    if(currentUser ==null)&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;用户未登录&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   //因为传进来的用户信息也就是更新的用户信息里面是没有userId的，所以我们需要将它拿过来，这样可以防止越权问题</span><br><span class="line">   user.setId(currentUser.getId());  //所以id是不可以被更新的，我们是从登录里面获取的</span><br><span class="line">   user.setUsername(currentUser.getUsername());   //记得我们在接口实现类里面说过username是不可以被更新的，因为我们登录会用到它</span><br><span class="line">   ServerResponse&lt;User&gt; response =iUserService.updateInformation(user);</span><br><span class="line">   if(response.isSuccess())&#123;</span><br><span class="line">       session.setAttribute(Const.CURRENT_USER,response.getData());</span><br><span class="line">   &#125;</span><br><span class="line">   return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下：因为传进来的用户信息也就是更新的用户信息里面是没有userId的，所以我们需要将它从登录里面拿过来，这样可以防止越权问题。我们在接口的实现类也说过username是不可以被更新的，因为我们登录会用到它，所以也是采取和userId相同的办法。最后我们需要对更新的状态进行判断，并将新的信息添加到session里面去。</p><p>这样本篇，我们关于登录状态下重置密码功能开发，更新用户个人信息功能开发的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（八）：用户登录信息功能开发</title>
      <link href="/2018/08/17/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/08/17/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们介绍用户登录获取信息，忘记密码，提示问题与答案，重置密码功能开发这四者的实现，里面的内容很多，希望大家对此有一个提前的认识。</p><p>还记得我们上一篇的UserController—&gt;IUserService–&gt;UserServiceImpl模式么，我们继续进行开发，把这个放在这里是让大家更清楚的知道我们的开发流程，不至于晕。</p><h2 id="用户登录获取信息"><a href="#用户登录获取信息" class="headerlink" title="用户登录获取信息"></a>用户登录获取信息</h2><p>打开UserController.java文件，写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 用户登录信息的获取</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;get_user_info.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;User&gt; getUserInfo(HttpSession session)&#123;</span><br><span class="line">    User user =(User) session.getAttribute(Const.CURRENT_USER);</span><br><span class="line">    if(user != null)&#123;</span><br><span class="line">        return ServerResponse.createBySuccess(user);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByErrorMessage(&quot;用户未登录，无法获取当前用户的信息&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们那就完成了用户登录信息的获取操作，你可能会问后面那两个过程哪去了，这里需要说明的是，不涉及到数据库的访问操作就不需要后面两个过程，这一点你需要注意一下。</p><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p>打开UserController.java文件，写入以下代码：<strong>(注意我这里就是直接把这个功能的完整实现代码贴这里了，没有一步一步的写，毕竟太浪费时间了，也没有必要，你们懂我的意思吧)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 忘记密码</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;forget_get_question.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;String&gt; forgetGetQuestion(String username)&#123;</span><br><span class="line">    return iUserService.forgetGetQuestion(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IUserService.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; forgetGetQuestion(String username);   //忘记密码</span><br></pre></td></tr></table></figure></p><p>继续打开UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *忘记密码时的接口类</span><br><span class="line">     * */</span><br><span class="line">    public ServerResponse&lt;String&gt; forgetGetQuestion(String username)&#123;</span><br><span class="line">        //判断用户名是否存在</span><br><span class="line">        ServerResponse validResponse =this.checkValid(username,Const.USERNAME);</span><br><span class="line">        if(validResponse.isSuccess())&#123;  //用户名不存在</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;该用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String question =userMapper.forgetgetQuestionByUsername(username);</span><br><span class="line">        if(StringUtils.isNoneBlank(question))&#123;</span><br><span class="line">            //开始进行校验，如果找回密码的问题不为空，那么</span><br><span class="line">            return ServerResponse.createBySuccess(question);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;找回密码的问题是空的&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>String question =userMapper.forgetgetQuestionByUsername(username);</code>这行代码我需要说明一下。大家都知道我们这个UserMapper(里面的userMapper是它的实例化对象)就是DAO层，它需要提供一个接口(IUserService)和该接口的实现类(UserServiceImpl)用于访问数据库，但是我们获取数据库里面的信息是通过sql语句来实现的，于是UserMapper.xml负责sql语句的执行，UserMapper.java就负责接收查询的结果。因此就知道我们接下来要干嘛了：<br>打开UserMapper.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String forgetgetQuestionByUsername(String username);  //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br></pre></td></tr></table></figure></p><p>然后去UserMapper.xml里面新增代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;select id=&quot;forgetgetQuestionByUsername&quot; resultType=&quot;String&quot; parameterType=&quot;String&quot;&gt;</span><br><span class="line">     select question from store_user</span><br><span class="line">     where username = #&#123;username&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>也就是说实际上我们的开发顺序与上面所说的顺序是相反的，只是为了更好的理解。接下来完成提示问题与答案这个功能。</p><h2 id="提示问题与答案"><a href="#提示问题与答案" class="headerlink" title="提示问题与答案"></a>提示问题与答案</h2><p>打开UserController.java文件，写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">  * 提示问题与答案</span><br><span class="line">  * */</span><br><span class="line"> @RequestMapping(value = &quot;forget_check_answer.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line"> @ResponseBody   //自动序列化json功能</span><br><span class="line"> public ServerResponse&lt;String&gt; checkAnswer(String username,String question,String answer)&#123;</span><br><span class="line">     return iUserService.checkAnswer(username,question,answer);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IUserService.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; checkAnswer(String username,String question,String answer);   //提示问题与答案</span><br></pre></td></tr></table></figure></p><p>继续打开UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> *提示问题与答案时的接口类</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;String&gt; checkAnswer(String username,String question,String answer)&#123;</span><br><span class="line">    int resultCount = userMapper.checkAnswer(username,question,answer);  //根据用户名来检查用户设置的问题与答案是否存在</span><br><span class="line">    if(resultCount &gt;0)&#123;</span><br><span class="line">        //说明提示问题及问题答案是这个用户的，并且是正确的</span><br><span class="line">        String forgetToken = UUID.randomUUID().toString();</span><br><span class="line">        TockenCache.setKey(&quot;token_&quot;+username,forgetToken);</span><br><span class="line">        return ServerResponse.createBySuccess(forgetToken);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createByErrorMessage(&quot;问题的答案错误！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样checkAnswer这个方法需要定义，打开UserMapper.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br><span class="line">  int checkAnswer(@Param(&quot;username&quot;)String username,@Param(&quot;question&quot;)String question,@Param(&quot;answer&quot;)String answer);   //注意mybatis传递多个参数时，需要使用param注解</span><br></pre></td></tr></table></figure></p><p>然后去UserMapper.xml里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;checkAnswer&quot; resultType=&quot;int&quot; parameterType=&quot;map&quot;&gt;  &lt;!--注意使用多个参数是是需要使用map的--&gt;</span><br><span class="line">     select count(1) from store_user</span><br><span class="line">     where username = #&#123;username&#125;</span><br><span class="line">      and question = #&#123;question&#125;</span><br><span class="line">      and answer = #&#123;answer&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>还有因为我们这个提示问题与答案是需要写入cache的，因此我们需要在common包下面新建一个类，里面写入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package top.store.common;</span><br><span class="line"></span><br><span class="line">import com.google.common.cache.CacheBuilder;</span><br><span class="line">import com.google.common.cache.CacheLoader;</span><br><span class="line">import com.google.common.cache.LoadingCache;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class TockenCache &#123;</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(TockenCache.class);</span><br><span class="line"></span><br><span class="line">    //本地缓存</span><br><span class="line">    //这里采用了LRU算法，初始值是1000，最大值是10000，如果超过最大值就会使用LRU算法进行消除，其实就是删除使用频率低的值，它的有效时间为12个小时</span><br><span class="line">    private static LoadingCache&lt;String,String&gt; localCache = CacheBuilder.newBuilder().initialCapacity(1000).maximumSize(10000).expireAfterAccess(12, TimeUnit.HOURS).build(new CacheLoader&lt;String, String&gt;()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String load(String s) throws Exception &#123;</span><br><span class="line">            return &quot;null&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void setKey(String key,String value)&#123;</span><br><span class="line">        localCache.put(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getKey(String key)&#123;</span><br><span class="line">        String value = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            value = localCache.get(key);</span><br><span class="line">            if(&quot;null&quot;.equals(value))&#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            return value;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;localCache get error&quot;,e);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来便是忘记密码中的重置密码的开发了，我们知道这个必须在忘记密码实现以后才能开始。</p><h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h2><p>打开UserController.java文件，写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> *</span><br><span class="line"> * 忘记密码中的重置密码</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = &quot;forget_reset_password.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;String&gt;  forgetResetPassword(String username,String passwordNew, String forgetToken)&#123;</span><br><span class="line">    return iUserService.forgetResetPassword(username,passwordNew,forgetToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开IUserService.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt;  forgetResetPassword(String username,String passwordNew, String forgetToken);  //忘记密码中的重置密码</span><br></pre></td></tr></table></figure></p><p>继续打开UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">     *</span><br><span class="line">     * 忘记密码中的重置密码的接口类</span><br><span class="line">     */</span><br><span class="line">    public ServerResponse&lt;String&gt;  forgetResetPassword(String username,String passwordNew, String forgetToken)&#123;</span><br><span class="line">        //首先进行token的校验</span><br><span class="line">        if(StringUtils.isBlank(forgetToken))&#123;  //如果token是空的话</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;参数错误，token还没有被传递呢&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //这里我们需要校验username，因为forgetToken是通过token_与username进行拼接的，上面是验证了forgetToken不为空，但这并不代表username就不为空</span><br><span class="line">        ServerResponse validResponse =this.checkValid(username,Const.USERNAME);</span><br><span class="line">        if(validResponse.isSuccess())&#123;  //用户名不存在</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;该用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = TockenCache.getKey(TockenCache.TOKEN_PREFIX+username); //可以参看第146行代码</span><br><span class="line">        //对caChe里的token进行校验</span><br><span class="line">        if(StringUtils.isBlank(token))&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;token无效或者过期&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /***</span><br><span class="line">        String a = null;</span><br><span class="line">        if(&quot;abc&quot;.equals(a))&#123;&#125;   //总是错误</span><br><span class="line">        if(a.equals(&quot;abc&quot;))&#123;&#125;   //引发空指针异常</span><br><span class="line">         */</span><br><span class="line">        //这里使用.equals方法，可以避免出现Null值在前的空指针，在后总是错误的问题</span><br><span class="line">        if(StringUtils.equals(forgetToken,token))&#123;</span><br><span class="line">            //修改密码成功，我们需要更新旧的密码了</span><br><span class="line">            String md5Password = MD5Util.MD5EncodeUtf8(passwordNew);</span><br><span class="line">            int rowCount = userMapper.updatePasswordByUsername(username,md5Password);</span><br><span class="line">            if(rowCount&gt;0)&#123;</span><br><span class="line">                return ServerResponse.createBySuccessMassage(&quot;密码修改成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;token错误，请重新获取重置密码的token&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;密码修改失败！&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>这里面有几个注意的事项：</strong><br><strong>1、</strong><code>&quot;token_&quot;</code>这个之前在写提示问题与答案时的接口类时，没有将其设定为一个常量，实际上它是一个常量，为了以后便于调用它，我们将其设定为一个常量：<br>打开TockenCache.java文件，我们新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static final String TOKEN_PREFIX = &quot;token_&quot;; //这里把token_作为一个常量。因为需要多次使用</span><br></pre></td></tr></table></figure></p><p>然后你将checkAnswer方法里面的这行代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ockenCache.setKey(&quot;token_&quot;+username,forgetToken);  //这里没有把token_当做一个全局的常量进行引用</span><br></pre></td></tr></table></figure></p><p>替换为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TockenCache.setKey(TockenCache.TOKEN_PREFIX+username,forgetToken);   // 这里把token_当做一个全局的常量进行引用(在TockenCache.TOKEN_PREFIX里面)</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong><code>StringUtils.equals(forgetToken,token)</code>注意这里我们使用了StringUtils.equals方法，它最大的好处就是可以避免null值在前在后的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static boolean equals(CharSequence cs1, CharSequence cs2) &#123;</span><br><span class="line">       if (cs1 == cs2) &#123;</span><br><span class="line">           return true;</span><br><span class="line">       &#125; else if (cs1 != null &amp;&amp; cs2 != null) &#123;</span><br><span class="line">           if (cs1.length() != cs2.length()) &#123;</span><br><span class="line">               return false;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               return cs1 instanceof String &amp;&amp; cs2 instanceof String ? cs1.equals(cs2) : CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>那么什么是null值在前在后的问题呢？很简单我举个例子你就知道了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = null;</span><br><span class="line">if(&quot;abc&quot;.equals(a))&#123;&#125;   //总是错误</span><br><span class="line">if(a.equals(&quot;abc&quot;))&#123;&#125;   //引发空指针异常</span><br></pre></td></tr></table></figure></p><p>所以这个问题我们就可以不用考虑了。<br><strong>3、</strong><code>int rowCount = userMapper.updatePasswordByUsername(username,md5Password);</code>这行代码中的updatePasswordByUsername方法，老规矩还是需要定义这个方法，打开UserMapper.java文件，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br><span class="line">int updatePasswordByUsername(@Param(&quot;username&quot;)String username,@Param(&quot;passwordNew&quot;)String passwordNew);   //注意mybatis传递多个参数时，需要使用param注解</span><br></pre></td></tr></table></figure></p><p>然后去UserMapper.xml里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updatePasswordByUsername&quot;  parameterType=&quot;map&quot;&gt;  &lt;!--注意使用多个参数是是需要使用map的，而且这里因为是更新操作，因此需要使用update--&gt;</span><br><span class="line">        update store_user</span><br><span class="line">        set password =#&#123;passwordNew&#125;,update_time =now()</span><br><span class="line">        where username = #&#123;username&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>这段代码因为是执行更新操作的，因此需要使用update，而且别忘记使用update_time =now()这个时间戳，否则你不知道具体什么时候修改了密码。</p><p><strong>4、</strong>至于为什么我们每次判断的时候总是看它大于0或者等于0，那是因为我们使用的方法最后我们都是让它返回修改的行数（其实就是受影响的行数），如果为0就说明没有修改，否则就进行了修改，这个应该很好理解的吧。</p><p>这样，我们本篇关于用户登录获取信息，忘记密码，提示问题与答案，重置密码功能开发这四者的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（七）：用户登出，注册，校验功能实现</title>
      <link href="/2018/08/16/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%87%BA%EF%BC%8C%E6%B3%A8%E5%86%8C%EF%BC%8C%E6%A0%A1%E9%AA%8C%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/16/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%87%BA%EF%BC%8C%E6%B3%A8%E5%86%8C%EF%BC%8C%E6%A0%A1%E9%AA%8C%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们介绍用户登出，注册和校验功能这三者的实现。大家反映之前那种方式太难理解，好吧这里我们依旧采取把实现具体功能代码放在一块，一步一步的来的模式。</p><h2 id="用户登出"><a href="#用户登出" class="headerlink" title="用户登出"></a>用户登出</h2><p>打开UserController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">   * 用户退出</span><br><span class="line">   * @author lenovo</span><br><span class="line">   * */</span><br><span class="line">  @RequestMapping(value = &quot;logout.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">  @ResponseBody   //自动序列化json功能</span><br><span class="line">  public ServerResponse&lt;String&gt; logout(HttpSession session)&#123;</span><br><span class="line">      session.removeAttribute(Const.CURRENT_USER);</span><br><span class="line">      return ServerResponse.createBySuccess();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>通过这段代码，我们就完成了用户登出的功能看，接来下是用户的注册功能。</p><h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><p>继续打开UserController.java文件，在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;register.do&quot;,method = RequestMethod.GET)</span><br><span class="line">@ResponseBody</span><br><span class="line">public ServerResponse&lt;String&gt; register(User user)&#123;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开UserMapper.java文件，我们需要对前端用户注册的邮箱是否存在进行校验：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int checkEmail(String email);    //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br></pre></td></tr></table></figure></p><p>这个和我们之前对于用户名的校验很相似，别忘了你这个方法需要去UserMapper.xml里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;checkEmail&quot; resultType=&quot;int&quot; parameterType=&quot;string&quot;&gt;</span><br><span class="line">    select count(1) from store_user</span><br><span class="line">    where email = #&#123;email&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>然后回到我们的UserServiceImpl.java文件，里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 实现注册的接口类</span><br><span class="line">  * */</span><br><span class="line"> public  ServerResponse&lt;String&gt; register(User user)&#123;</span><br><span class="line">     int resultCount = userMapper.checkUsername(user.getUsername());  //检查注册时用户名是否存在</span><br><span class="line">     if(resultCount &gt;0)&#123;</span><br><span class="line">         return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     resultCount = userMapper.checkEmail(user.getEmail());  //检查注册时邮箱是否存在</span><br><span class="line">     if(resultCount &gt;0)&#123;</span><br><span class="line">         return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     user.setRole(Const.Role.ROLE_CUSTOMER);   //该注册用户为一般用户</span><br><span class="line">     //密码加密(定义一个工具类)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们需要定义一个对用户密码进行加密的工具类，在util包里新建一个工具类MD5Util.java，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package top.store.util;</span><br><span class="line"></span><br><span class="line">import java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line">public class MD5Util &#123;</span><br><span class="line">    private static String byteArrayToHexString(byte b[]) &#123;</span><br><span class="line">        StringBuffer resultSb = new StringBuffer();</span><br><span class="line">        for (int i = 0; i &lt; b.length; i++)</span><br><span class="line">            resultSb.append(byteToHexString(b[i]));</span><br><span class="line"></span><br><span class="line">        return resultSb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String byteToHexString(byte b) &#123;</span><br><span class="line">        int n = b;</span><br><span class="line">        if (n &lt; 0)</span><br><span class="line">            n += 256;</span><br><span class="line">        int d1 = n / 16;</span><br><span class="line">        int d2 = n % 16;</span><br><span class="line">        return hexDigits[d1] + hexDigits[d2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回大写 MD5</span><br><span class="line">     *</span><br><span class="line"></span><br><span class="line">     */</span><br><span class="line">    private static String MD5Encode(String origin, String charsetname) &#123;</span><br><span class="line">        String resultString = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            resultString = new String(origin);</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);</span><br><span class="line">            if (charsetname == null || &quot;&quot;.equals(charsetname))</span><br><span class="line">                resultString = byteArrayToHexString(md.digest(resultString.getBytes()));</span><br><span class="line">            else</span><br><span class="line">                resultString = byteArrayToHexString(md.digest(resultString.getBytes(charsetname)));</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultString.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String MD5EncodeUtf8(String origin) &#123;</span><br><span class="line">        return MD5Encode(origin, &quot;utf-8&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static final String hexDigits[] = &#123;&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;,</span><br><span class="line">            &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们继续回到UserServiceImpl.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 实现注册的接口类</span><br><span class="line"> * */</span><br><span class="line">public  ServerResponse&lt;String&gt; register(User user)&#123;</span><br><span class="line">    int resultCount = userMapper.checkUsername(user.getUsername());  //检查注册时用户名是否存在</span><br><span class="line">    if(resultCount &gt;0)&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resultCount = userMapper.checkEmail(user.getEmail());  //检查注册时邮箱是否存在</span><br><span class="line">    if(resultCount &gt;0)&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    user.setRole(Const.Role.ROLE_CUSTOMER);   //该注册用户为一般用户</span><br><span class="line">    //密码加密(定义一个工具类)</span><br><span class="line"></span><br><span class="line">    user.setPassword(MD5Util.MD5EncodeUtf8(user.getPassword()));</span><br><span class="line"></span><br><span class="line">    resultCount =userMapper.insert(user);</span><br><span class="line">    if(resultCount == 0)&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;注册失败&quot;);  //说明可能是数据库错误</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccessMassage(&quot;注册成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这里就有疑问了，你注册时候都对密码进行加密了，你前面登录却还用明文进行比较，对，所以我们现在就要对此进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> //用户名登录MD5</span><br><span class="line">String md5Password = MD5Util.MD5EncodeUtf8(password);</span><br><span class="line">User user =userMapper.selectLogin(username,md5Password);</span><br></pre></td></tr></table></figure></p><p>经过这样修改，我们就可以进行加密后的密码验证了。接下来我们打开IUserService.java文件，把刚才的用于实现注册的接口类放置到里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; register(User user);</span><br></pre></td></tr></table></figure></p><p>这样我们UserController就能使用它了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line">   * 用户注册</span><br><span class="line">   * @author lenovo</span><br><span class="line">   * */</span><br><span class="line">  @RequestMapping(value = &quot;register.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">  @ResponseBody   //自动序列化json功能</span><br><span class="line">  public ServerResponse&lt;String&gt; register(User user)&#123;</span><br><span class="line">      return iUserService.register(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>接下来介绍值校验的功能，因为我们不光只有注册的时候需要校验，而且登录，修改密码，找回密码等也需要进行校验，最主要的就是每次校验的类型还不确定（言外之意就是校验的字段类型根据不同的业务场景进行变换）</p><h2 id="校验功能"><a href="#校验功能" class="headerlink" title="校验功能"></a>校验功能</h2><p>针对上面的情况，我们觉得有必要专门去写一个方法，去应对不同业务场景下面的字段验证问题，首先打开UserController，里面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 用于值验证</span><br><span class="line"> * */</span><br><span class="line">public ServerResponse&lt;String&gt; checkValid(String str,String type)&#123;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后修改IUserService.java文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; checkValid(String str,String type);</span><br></pre></td></tr></table></figure></p><p>接着修改UserServiceImpl文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/****</span><br><span class="line"> *</span><br><span class="line"> * 实现值校验的接口类</span><br><span class="line"> */</span><br><span class="line">public ServerResponse&lt;String&gt;checkValid(String str,String type)&#123;</span><br><span class="line">    if(StringUtils.isNoneBlank(type))&#123;</span><br><span class="line">        //开始校验</span><br><span class="line">        if(Const.USERNAME.equals(type))&#123;</span><br><span class="line">            int resultCount = userMapper.checkUsername(str);  //检查用户名是否存在</span><br><span class="line">            if(resultCount &gt;0)&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(Const.EMAIL.equals(type))&#123;</span><br><span class="line">            int resultCount = userMapper.checkEmail(str);  //检查邮箱是否存在</span><br><span class="line">            if(resultCount &gt;0)&#123;</span><br><span class="line">                return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return ServerResponse.createByErrorMessage(&quot;参数错误&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return ServerResponse.createBySuccessMassage(&quot;校验成功&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好，现在既然有了这个校验方法，那么我们是否就可以对之前写的注册逻辑进行修改呢，答案是必须的，否则我们写这个方法干嘛呢！<br>我们将之前的注册的用户名和邮箱的校验方法进行修改，打开UserServiceImpl.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse validResponse =this.checkValid(user.getUsername(),Const.USERNAME);</span><br><span class="line">if(!validResponse.isSuccess())&#123;   //检查注册时用户名是否存在</span><br><span class="line">    return validResponse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">validResponse =this.checkValid(user.getEmail(),Const.EMAIL);</span><br><span class="line">if(!validResponse.isSuccess())&#123;   //检查注册时邮箱是否存在</span><br><span class="line">    return validResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>贴上最后修改的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 实现注册的接口类</span><br><span class="line">     * */</span><br><span class="line">    public  ServerResponse&lt;String&gt; register(User user)&#123;</span><br><span class="line">//        int resultCount = userMapper.checkUsername(user.getUsername());  //检查注册时用户名是否存在</span><br><span class="line">//        if(resultCount &gt;0)&#123;</span><br><span class="line">//            return ServerResponse.createByErrorMessage(&quot;该用户已存在&quot;);</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line">//        resultCount = userMapper.checkEmail(user.getEmail());  //检查注册时邮箱是否存在</span><br><span class="line">//        if(resultCount &gt;0)&#123;</span><br><span class="line">//            return ServerResponse.createByErrorMessage(&quot;该邮箱已存在&quot;);</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line">        ServerResponse validResponse =this.checkValid(user.getUsername(),Const.USERNAME);</span><br><span class="line">        if(!validResponse.isSuccess())&#123;   //检查注册时用户名是否存在</span><br><span class="line">            return validResponse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        validResponse =this.checkValid(user.getEmail(),Const.EMAIL);</span><br><span class="line">        if(!validResponse.isSuccess())&#123;   //检查注册时邮箱是否存在</span><br><span class="line">            return validResponse;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        user.setRole(Const.Role.ROLE_CUSTOMER);   //该注册用户为一般用户</span><br><span class="line">        //密码加密(定义一个工具类)</span><br><span class="line"></span><br><span class="line">        user.setPassword(MD5Util.MD5EncodeUtf8 (user.getPassword()));</span><br><span class="line"></span><br><span class="line">        int resultCount =userMapper.insert(user);</span><br><span class="line">        if(resultCount == 0)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;注册失败&quot;);  //说明可能是数据库错误</span><br><span class="line">        &#125;</span><br><span class="line">        return ServerResponse.createBySuccessMassage(&quot;注册成功&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后，我们还要回到UserController里面，进行路由的配置和方法的调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/***</span><br><span class="line"> * 用于值验证</span><br><span class="line"> * */</span><br><span class="line">@RequestMapping(value = &quot;check_valid.do&quot;,method = RequestMethod.GET)  //这里就是具体的每个方法的url链接</span><br><span class="line">@ResponseBody   //自动序列化json功能</span><br><span class="line">public ServerResponse&lt;String&gt; checkValid(String str,String type)&#123;</span><br><span class="line">    return iUserService.checkValid(str,type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>不知道你发现没有，我们不同的功能的具体实现代码虽然不一样，但是我们都有一些共同的书写方式（其实就是书写顺序）：UserController—&gt;IUserService–&gt;UserServiceImpl。而且你发现没有三者非常相似，除了访问修饰符的区别，其他的例如返回值类型，方法名，参数列表（包括参数的个数，类型，顺序一模一样），当然方法体肯定不同的啦（我们以register为例）（实际是除了第一个，后面2个是必须相同的，但一般我们都让三者相同）</p><p>这是UserController.java:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public ServerResponse&lt;String&gt; register(User user)&#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这是IUserService.java:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerResponse&lt;String&gt; register(User user);</span><br></pre></td></tr></table></figure></p><p>这是UserServiceImpl.java:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public  ServerResponse&lt;String&gt; register(User user)&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以大家对此有个认识以后，后面写代码心里就有数了。这样，我们本篇关于用户登出，注册，校验功能实现的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（六）：用户登录模块</title>
      <link href="/2018/08/15/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/08/15/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇开始，我们介绍用户模块功能，里面包含的知识点很多，具体有：登录；用户名验证；注册；忘记密码；提交问题答案；重置密码；获取用户信息；更新用户信息；退出登录等。</p><h2 id="学到的技术"><a href="#学到的技术" class="headerlink" title="学到的技术"></a>学到的技术</h2><p>1、理解横向越权、纵向越权安全漏洞；<br>2、MD5 明文加密机增加salt 值；<br>3、Guava 缓存的使用；<br>4、高复用服务响应对象的设计思想及抽象分装；<br>5、Mybatis-plugins的使用技巧<br>6、session 的使用；<br>7、方法局部演进。</p><h3 id="横向越权、纵向越权安全漏洞介绍"><a href="#横向越权、纵向越权安全漏洞介绍" class="headerlink" title="横向越权、纵向越权安全漏洞介绍"></a>横向越权、纵向越权安全漏洞介绍</h3><p>横向越权：攻击者尝试访问与他拥有相同权限的用户的资源<br>纵向越权：低级别攻击者尝试访问高级别用户的资源</p><h3 id="高复用服务响应对象的设计思想及抽象分装"><a href="#高复用服务响应对象的设计思想及抽象分装" class="headerlink" title="高复用服务响应对象的设计思想及抽象分装"></a>高复用服务响应对象的设计思想及抽象分装</h3><p>这里的意思就是说对于一些经常使用到的代码，我们对其进行了封装，以便更好的进行使用。</p><h3 id="用户登录功能实现"><a href="#用户登录功能实现" class="headerlink" title="用户登录功能实现"></a>用户登录功能实现</h3><p>在我们之前定义的controller包下新建一个包，名称为portal（门户的意思就是给前端用的，你也可以取其他的名字，随意），然后在里面创建一个类，取名UserController。</p><p>（<strong>注意一下，这里我就不再按照之前那种写到哪里，代码就粘贴到哪里的方式了，而是直接附上功能较为完整的代码</strong>）</p><p>在UserController.java里面写入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package top.store.controller.portal;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import top.store.common.Const;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> * 用户登录</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/user/&quot;)  //这是我们对整个用户功能配置的一个类似于namespace的东西</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private IUserService iUserService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;login.do&quot;,method = RequestMethod.POST)  //这里就是具体的每个方法的url链接</span><br><span class="line">    @ResponseBody   //自动序列化json功能</span><br><span class="line">    public ServerResponse&lt;User&gt; login(String username, String password, HttpSession session)&#123;</span><br><span class="line">        //service--&gt;mybatis--&gt;dao</span><br><span class="line">        ServerResponse&lt;User&gt; response = iUserService.login(username,password);</span><br><span class="line">        if(response.isSuccess())&#123;</span><br><span class="line">            session.setAttribute(Const.CURRENT_USER,response.getData());</span><br><span class="line">        &#125;</span><br><span class="line">        return response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着在service这个包里面创建一个IUserService的java文件（为什么取这个名字，是为了一眼知道这个是接口）:</p><p>IUserService 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service;</span><br><span class="line"></span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line"></span><br><span class="line">/**@author lenovo</span><br><span class="line"> * */</span><br><span class="line">public interface IUserService &#123;</span><br><span class="line">    ServerResponse&lt;User&gt; login(String username, String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后继续在service这个包里面创建一个包impl（顾名思义这个就是实现接口的类的包，同样名字随意）存放它的实现类，接着在该impl文件下新建UserServiceImpl.java文件，让它去实现我们刚才定义的IUserService接口，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package top.store.service.impl;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import top.store.common.ServerResponse;</span><br><span class="line">import top.store.dao.UserMapper;</span><br><span class="line">import top.store.pojo.User;</span><br><span class="line">import top.store.service.IUserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service(&quot;iUserService&quot;)</span><br><span class="line">public class UserServiceImpl implements IUserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServerResponse&lt;User&gt; login(String username, String password) &#123;   //必须要实现接口的方法，否则该类就变成了一个抽象类</span><br><span class="line">        int resultCount = userMapper.checkUsername(username);  //检查登录时的用户名是否存在</span><br><span class="line">        if(resultCount ==0)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;用户名不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //todo  用户名登录MD5</span><br><span class="line">        User user =userMapper.selectLogin(username,password);</span><br><span class="line">        if(user==null)&#123;</span><br><span class="line">            return ServerResponse.createByErrorMessage(&quot;密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        user.setPassword(StringUtils.EMPTY);</span><br><span class="line">        return ServerResponse.createBySuccess(&quot;登录成功&quot;,user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来为了完成一个通用的响应对象，我们需要在common这个包里面里新建一个类 ServerResponse（顾名思义就是处理响应的类），里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">package top.store.common;</span><br><span class="line"></span><br><span class="line">import org.codehaus.jackson.annotate.JsonIgnore;</span><br><span class="line">import org.codehaus.jackson.map.annotate.JsonSerialize;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">//保证序列化 JSon 的时候，如果是 null 的对象，可以也会消失</span><br><span class="line">@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)   //使用这个的作用就是有的时候返回只有状态而没有其他的data和msg也是可以的，就是Key存在但是value为null</span><br><span class="line">public class ServerResponse&lt;T&gt; implements Serializable &#123;   //使用泛型来声明这个类，代表这个类需要封装的数据的类型，并且我们是使用它来进行序列化的</span><br><span class="line"></span><br><span class="line">    //这里序列化的对象的确定是根据接口来的</span><br><span class="line">    private int status;</span><br><span class="line">    private String msg;</span><br><span class="line">    private T data;  //使用泛型的最大好处就是，我们可以指定泛型的类型，也可以不指定，而且可以结合具体的场景进行使用，但是我们声明的时候就只能使用一种</span><br><span class="line"></span><br><span class="line">    //一般封装的都是设置私有化的构造方法，然后提供一个公共的访问方法就可以，很类似于单例模式的思想</span><br><span class="line">    //下面的这些构造方法适用于不同的业务场景，具体的看情况再使用</span><br><span class="line"></span><br><span class="line">    //适用于只有状态的情况</span><br><span class="line">    private ServerResponse(int status)&#123;</span><br><span class="line">        this.status=status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //适用于有状态和消息的情况</span><br><span class="line">    public ServerResponse(int status, String msg)&#123;</span><br><span class="line">        this.status=status;</span><br><span class="line">        this.msg=msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //适用于有状态和数据的情况</span><br><span class="line">    public ServerResponse(int status, T data)&#123;</span><br><span class="line">        this.status=status;</span><br><span class="line">        this.data=data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //适用于有状态，消息和数据的情况</span><br><span class="line">    private ServerResponse(int status, String msg,T data)&#123;</span><br><span class="line">        this.status=status;</span><br><span class="line">        this.msg=msg;</span><br><span class="line">        this.data=data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据responseCode这个枚举类里面设定的状态码进行状态判断</span><br><span class="line"></span><br><span class="line">    //使之不在 json 序列化结果当中</span><br><span class="line">    @JsonIgnore    //这里添加了json的忽略序列化，就使得它不会出现在json里面</span><br><span class="line">    public boolean isSuccess()&#123;</span><br><span class="line">        return this.status ==ResponseCode.SUCCESS.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据私有字段提供的公共访问方法</span><br><span class="line">    public int getStatus()&#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getMsg()&#123;</span><br><span class="line">        return msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T getData()&#123;</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //根据前面的构造方法来返回成功的代码</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccess()&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccessMassage(String msg)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccess(T data)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createBySuccess(String msg,T data)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.SUCCESS.getCode(),msg,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //根据前面的构造方法来返回失败的代码</span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createByError()&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.ERROR.getCode(),ResponseCode.ERROR.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createByErrorMessage(String errorMessage)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(ResponseCode.ERROR.getCode(),errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static &lt;T&gt; ServerResponse&lt;T&gt; createByErrorCodeMessage(int errorCode,String errorMessage)&#123;</span><br><span class="line">        return new ServerResponse&lt;T&gt;(errorCode,errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了更好的对响应的状态进行判断，我们在common包下面新建一个ResponseCode.java文件（这是一个枚举类），里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package top.store.common;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public enum ResponseCode &#123;  //响应编码的枚举类</span><br><span class="line">    SUCCESS(0,&quot;success&quot;),   //成功</span><br><span class="line">    ERROR(1,&quot;error&quot;),   //失败</span><br><span class="line">    NEED_LOGIN(10,&quot;NEED_LOGIN&quot;),  //需要登录</span><br><span class="line">    ILLEGAL_ARGUMENT(2,&quot;ILLEGAL_ARGUMENT&quot;);   //参数错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private final int code;</span><br><span class="line">    private final String desc;</span><br><span class="line"></span><br><span class="line">    ResponseCode(int code,String desc)&#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getCode()&#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc()&#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着我们在common包里面新建一个Const.java文件，里面存放一些公共的信息，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package top.store.common;</span><br><span class="line"></span><br><span class="line">public class Const &#123;</span><br><span class="line">    public static final String CURRENT_USER = &quot;currentUser&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在前面我们用到了checkUsername这个方法，因此我们需要在UserMapper.xml里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;checkUsername&quot; resultType=&quot;int&quot; parameterType=&quot;string&quot;&gt;</span><br><span class="line">    select count(1) from store_user</span><br><span class="line">    where username = #&#123;username&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">   &lt;select id=&quot;selectLogin&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;map&quot;&gt;</span><br><span class="line">       SELECT</span><br><span class="line">       --     *???//这里最好不要使用*，因为会查到很多你不需要的东西</span><br><span class="line">       &lt;include refid=&quot;Base_Column_List&quot; /&gt;</span><br><span class="line">       from store_user</span><br><span class="line">       where username = #&#123;username&#125;</span><br><span class="line">       and password = #&#123;password&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>注意格式：一般就是里面的id就是下面的方法名称，resultType就是方法的返回类型，parameterType就是里面参数的数据类型。对于多个参数的方法，依旧还是那样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int checkUsername(String username);    //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br><span class="line"></span><br><span class="line"> //这里找不到对应的实现类，所以应该去UserMapper.xml里面进行配置</span><br><span class="line">User selectLogin(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);   //注意mybatis传递多个参数时，需要使用param注解</span><br></pre></td></tr></table></figure></p><p>这样我们的用户登录模块就实现了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（五）：spring、springmvc配置</title>
      <link href="/2018/08/14/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Aspring%E3%80%81springmvc%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/14/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Aspring%E3%80%81springmvc%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们就来介绍spring、springmvc的相关配置，这一篇也是单独罗列出来的，便于今后学习与应用。</p><p>点击这里查看spring-framework的官方网站：<a href="https://spring.io/projects/spring-framework" target="_blank" rel="noopener">spring-framework</a>，然后spring也提供了一些官方的demo，非常经典有<strong><a href="https://github.com/spring-projects/spring-petclinic" target="_blank" rel="noopener">spring-petclinic</a></strong>，<strong><a href="https://github.com/spring-projects/greenhouse" target="_blank" rel="noopener">greenhouse</a></strong>，<strong><a href="https://github.com/spring-projects/spring-mvc-showcase" target="_blank" rel="noopener">spring-mvc-showcase</a></strong>等，大家没事可以去看看。需要注意的是xml的配置文件，我们不可能采取一行一行的敲的方式，最好的方式是从直接从官方拷贝，因为这样可以避免一些包的不兼容问题。</p><p>从我的github上面复制图中所示的文件至图中所示位置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7c7a2a320867ad23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果你是完全按照我的配置来的，那么这些配置文件你可以复制粘贴拿来用了，里面都是一些过滤器，监听器，spring，spring mvc的配置，这里就不详细介绍了。</p><p>值得注意的是，如果出现下面的问题，请按照要求进行修改：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-22f074be18802202.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>解决办法，file–&gt;modules–&gt;图中所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-464c4c45d8cc543f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-969686395b2ea832.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击确定，然后那样的提示就不存在了。</p><h2 id="logback和ftp服务器配置"><a href="#logback和ftp服务器配置" class="headerlink" title="logback和ftp服务器配置"></a>logback和ftp服务器配置</h2><p>接下来继续去我的github上面，复制logback.xml文件至图中所示位置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5d9a0d9108537dcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还是那句话和我保持一致的就不需要对里面的数据进行修改。</p><p>接下来进行ftp服务器的配置，这里你需要修改之前复制的store.properties文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ftp.server.ip=你的FTP服务器ip地址</span><br><span class="line">ftp.user=你的FTP服务器用户名</span><br><span class="line">ftp.pass=你的FTP服务器密码</span><br><span class="line">ftp.server.http.prefix=http://img.licheetools.top/</span><br><span class="line">alipay.callback.url=</span><br><span class="line">password.salt =</span><br></pre></td></tr></table></figure></p><p>关于这一部分，后面会在介绍图片上传的时候再次介绍，大家对此有一个清醒的认识就可以了。</p><h3 id="idea的注入与自动编译配置"><a href="#idea的注入与自动编译配置" class="headerlink" title="idea的注入与自动编译配置"></a>idea的注入与自动编译配置</h3><p>打开idea，file –&gt;settings–搜索compiler–选择出现的make peoject automatically，你勾选一下这个就可以实时进行编译。（目前最新版idea好像没有这个配置了）</p><p>还有一个idea的注入：file –&gt;settings–搜索inspections–按照图示进行操作：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e15f8270768589d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意6步骤是将红色的error，修改为黄色的warning ，最后点击apply和ok即可。</p><h3 id="项目初始化文件的提交"><a href="#项目初始化文件的提交" class="headerlink" title="项目初始化文件的提交"></a>项目初始化文件的提交</h3><p>在idea的terminal下面，依次执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">$  git commit -am &apos;project init commit&apos;</span><br><span class="line"></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure></p><p>最后去你的github上面查看你v0.1的版本代码吧：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6c8ee5adf11c4a90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="两个好用的插件"><a href="#两个好用的插件" class="headerlink" title="两个好用的插件"></a>两个好用的插件</h3><p>接下来介绍两个好用的插件，我这里是chrome浏览器，推荐大家也使用这个。首先点击这里：<a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">拓展中心</a>，然后在里面搜索fe助手，这个工具很强大，自己下载完可以玩一玩：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e83f8d1aae046c94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>另一个好用的插件则是restlet client，同样你下载完可以试试，这个用于测试的，非常好用。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d63dbae92bc356b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，我们本篇文章的介绍就到此为止了，从此下一篇开始，我们就开始进行项目的开发阶段了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（四）：mybatis介绍与使用</title>
      <link href="/2018/08/13/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Amybatis%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/13/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Amybatis%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们介绍mybatis的使用与配置，里面虽说知识点不多，但是我想专门独立出来自成一篇，目的就是方便以后的学习与使用。</p><h2 id="mybatis-generator的介绍"><a href="#mybatis-generator的介绍" class="headerlink" title="mybatis-generator的介绍"></a>mybatis-generator的介绍</h2><p>mybatis-generator会根据我们的数据库自动生成pojo、dao和对应的xml文件。其中pojo里面放的是跟数据库的字段一一对应的对象。dao 层是一个接口，可以供我们 service调用，xml是dao层接口的实现，我们所有的SQL 语句都会写在xml 里面。</p><p>前面我们已经在pom.xml里面加载过mybatis-generator，此时插件需要的 jar 包已经加载进来了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1acfb8704f9b6307.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在我们在main文件夹下面新建 resources 文件夹（用于存放资源），接着在该文件夹里面新建一个generatorConfig.xml 文件，在里面添加代码（由于篇幅问题，请大家去我的github上查看）</p><p>接着在同级目录下创建一个datasource.properties文件，里面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.driverLocation=src/main/tools/mysql-connector-java-5.1.35.jar</span><br><span class="line">db.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"> </span><br><span class="line">#db.url=jdbc:mysql://192.168.08.10:3306/store?characterEncoding=utf-8</span><br><span class="line">db.url=jdbc:mysql://localhost:3306/store?characterEncoding=utf-8</span><br><span class="line">db.username=xxxx</span><br><span class="line">db.password=xxxx</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">db.initialSize = 20</span><br><span class="line">db.maxActive = 50</span><br><span class="line">db.maxIdle = 20</span><br><span class="line">db.minIdle = 10</span><br><span class="line">db.maxWait = 10</span><br><span class="line">db.defaultAutoCommit = true</span><br><span class="line">db.minEvictableIdleTimeMillis = 3600000</span><br></pre></td></tr></table></figure></p><p>还需要在main包下面新建一个tools文件夹，将mysql-connector-java-5.1.35.jar 导入。（这里的mysql-connector-java的版本必须与你在之前pom.xml里面的配置保持相同）当然具体的包，你可以点击这里进行下载：<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java" target="_blank" rel="noopener">mysql-connector-java</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5e05366e87239cae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="mybatis-generator生成数据对象"><a href="#mybatis-generator生成数据对象" class="headerlink" title="mybatis-generator生成数据对象"></a>mybatis-generator生成数据对象</h2><p>首先，点击idea右侧的Maven projects，然后按照图示进行操作：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f1c69a8277fe64a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后记得双击4，如果运行出现下面的图片所示，表明你已经成功了：（如果失败，请检查数据库的用户名和密码是否错误）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-31349ebdab36b4f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>前面说过mybatis-generator会根据我们的数据库自动生成pojo、dao和对应的xml文件。那我们现在就去看一下生成的文件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5a82d882418055af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没有，的确生成了许多文件。</p><h3 id="时间戳的优化"><a href="#时间戳的优化" class="headerlink" title="时间戳的优化"></a>时间戳的优化</h3><p>我们前面说过创建时间（create_time）和更新时间（update_time）是非常好用的时间戳，但是每个数据表都有它，因此如果我们在业务代码里进行处理势必会降低我们的效率。所以我们可以通过数据库提供的函数来自动进行生成：</p><p>我们就以CartMapper.xml为例，来进行修改，打开该文件，找到第33-34行代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-dd6e40b74c3c6ad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>也就是这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bd3ed9eee25ec736.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>以及第78，81，（101，115这两行不需要修改）104，116这四行都进行替换。</p><p>其余7个表的修改都是类似，这里就不再赘述了。</p><h2 id="mybatis-plugin介绍与使用"><a href="#mybatis-plugin介绍与使用" class="headerlink" title="mybatis-plugin介绍与使用"></a>mybatis-plugin介绍与使用</h2><p>首先是mybatis-plugin的安装，在idea里面：file–&gt;settings–&gt;然后在里面输入plugins，接着按照图示进行操作：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ed2da6f1931c8fe2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>搜索mybatis plugin，找到那个销量最高的（图中红箭头所指），点击 install 安装，然后重启 idea即可（这个过程必须有）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-16bd4a133b594ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果重启后发生这种错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot load project: com.intellij.ide.plugins.PluginManager$StartupAbortedException: Fatal error ini</span><br></pre></td></tr></table></figure></p><p>请点击这里：<a href="https://blog.csdn.net/cjh_android/article/details/72793538" target="_blank" rel="noopener">解决办法</a>，建议使用另一个：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4ad9a8eda9098d58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个是国人设计的，这个用起来还不错。（记得安装完后重启idea）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3be34976dd2d5d24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不知你发现没有，左边都有这个绿色的箭头，这个箭头的好处就是能直接定位到对应的xml文件，然后你再次点击就返回原来的地方了。</p><h2 id="mybatis-pagehelper分页插件"><a href="#mybatis-pagehelper分页插件" class="headerlink" title="mybatis-pagehelper分页插件"></a>mybatis-pagehelper分页插件</h2><p>点击这里查看官方文档：<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">pagehelper</a></p><p>其实这里面的配合，我们在pom.xml里面已经有了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis pager --&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.miemiedev&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis-paginator&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.3.18&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;0.9.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>关于这个插件的使用，后面会结合实际的例子进行说明介绍。</p><p>好了，关于mybatis介绍与使用我就先说这么多，后面有需要再介绍。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（三）：项目初始化</title>
      <link href="/2018/08/12/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2018/08/12/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇介绍数据库的初始化，jdk、tomcat、maven的配置及初始化web空白项目，git的初始化以及pom文件配置和项目包结构初始化</p><h3 id="数据库的初始化"><a href="#数据库的初始化" class="headerlink" title="数据库的初始化"></a>数据库的初始化</h3><p>首先新建数据库store:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ef3fc615f33f4e2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后新建一个查询，执行第二篇笔记里面的SQL 语句，就可以创建本项目的数据库表了。如果你觉得麻烦可以去我的github上查找一个名为store.sql的文件，然后创建完数据局以后，点击新建查询，把里面的sql语句全都插入进去，然后点击运行即可：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b3e663af34a594b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="idea的安装"><a href="#idea的安装" class="headerlink" title="idea的安装"></a>idea的安装</h2><p>关于idea的安装我这里就不介绍了，我之前介绍Pycharm的时候就顺带介绍了，你看一下就可以了（说明我这里使用的idea的版本是2018.2.3）：<a href="https://www.jianshu.com/p/f0f88776629f" target="_blank" rel="noopener">手把手教你破解Pycharm2018.2（JetBrains全家桶）</a></p><h2 id="jdk、tomcat、maven配置及初始化web空白项目"><a href="#jdk、tomcat、maven配置及初始化web空白项目" class="headerlink" title="jdk、tomcat、maven配置及初始化web空白项目"></a>jdk、tomcat、maven配置及初始化web空白项目</h2><h3 id="jdk的配置"><a href="#jdk的配置" class="headerlink" title="jdk的配置"></a>jdk的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bb48ad87940e5c91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击上面的新建图片的首页，点击Configure–&gt;Project Defaults–&gt;project Structure:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-48d68789c0fc79ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>按照图上所示进行配置，然后单击ok就好。</p><h3 id="maven的配置"><a href="#maven的配置" class="headerlink" title="maven的配置"></a>maven的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bb48ad87940e5c91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击上面的新建图片的首页，点击Configure–&gt;Settings：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c4f0efb292ebac18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意这里的maven的解压路径，还有如果你的maven都是默认安装，那么你4步骤使用默认的就可以了。按照图上所示进行配置，然后单击ok就好。</p><h3 id="快捷键的配置"><a href="#快捷键的配置" class="headerlink" title="快捷键的配置"></a>快捷键的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bb48ad87940e5c91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击上面的新建图片的首页，点击Configure–&gt;Settings：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0830054c36fe526c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里我之前使用过一段时间的eclipse，所以快捷键就默认使用eclipse的，你可以根据自己的需要进行设置。</p><h2 id="Maven空白项目的创建"><a href="#Maven空白项目的创建" class="headerlink" title="Maven空白项目的创建"></a>Maven空白项目的创建</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-890670696c9cd532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e7c63d433d644892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2ef2466b63fd6fbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-406d05b1bf3edcec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cee85d3fe42cfc33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后一直next就可以了，然后系统会自动创建项目，创建完成如图所示：（第一次使用maven可能会花一点时间，因为maven的中央仓库里面还没有文件，你需要去下载）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-fa17b0fe002ac6b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到上面这张图片说明项目已经搭建完成了。</p><p>接下来便是项目文件和测试文件目录的创建：在 main 文件下面创建一个java文件夹 ，然后按照如下操作：光标移到java文件夹上面，然后右键拉到底部，找到Make Directory AS ，再单击出现的Sources Root即可，会发现该文件变成了蓝色。</p><p>紧接着在src文件下，创建mian文件的测试文件夹，名称为test，然后再在test文件夹下面新建java文件夹 ，然后按照如下操作：光标移到java文件夹上面，然后右键拉到底部，找到Make Directory AS ，再单击出现的Test Sources Root即可，会发现该文件变成了绿色。</p><h3 id="tomcat的配置"><a href="#tomcat的配置" class="headerlink" title="tomcat的配置"></a>tomcat的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c87be57bf23b06d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后选择出现的Edit Configuration，点击左上角的绿色+号，拉到底部选择Tomcat Server，再选择local服务就可以：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7a72d7585da5aaaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5c188cec09c3a2b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>1处的是你的tomcat server服务的名称，这个你自己随意命名可以不和项目名称保持一致，然后就是2,3,4步骤，最后点击apply和ok就可以了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-de3619e19d3d67f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>想知道你上述配置有没有成功呢？你可以点击运行一下，注意这里必须是运行tomcat服务器，不是jsp页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-94fe9c57bfcfb1a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>等项目运行起来后，等20秒左右，idea会自动打开浏览器并出现<code>localhost:8080</code>如果出现下面的页面代表配置成功了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-12afdcf3a219efdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="git的初始化"><a href="#git的初始化" class="headerlink" title="git的初始化"></a>git的初始化</h3><p>这里我使用的是github，当然你可以使用gitee或者其他的代码分享平台。</p><p>关于github的安装，我就不介绍了，你可以参考这篇文章：<a href="https://blog.csdn.net/p10010/article/details/51336332" target="_blank" rel="noopener">GitHub的注册与使用（详细图解）</a></p><p>然后新建一个repository，名称为store，紧接着开始git的初始化：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e6c3f739649019a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在开始进行git的初始化，首先在idea的terminal下面运行<code>touch README.md</code>创建该文件。如果无法执行git命令：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-450425fca5fcea50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那么很抱歉你需要进行相关信息的配置，具体的参考这里：<a href="https://blog.csdn.net/xingxiupaioxue/article/details/76855193" target="_blank" rel="noopener">idea中Terminal终端无法执行GIT命令： touch README.md问题解决</a></p><p>我这里推荐使用第二种方法，不过此后bash已经内嵌到idea里面了，就不再是执行以前的cmd命令了，这一点你需要清楚。接下来重新运行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ touch README.md  #创建一个 README 文件</span><br><span class="line"></span><br><span class="line">$ touch .gitignore   #创建一个忽略配置文件（gitignore前面的.号必须有）</span><br></pre></td></tr></table></figure></p><p>.gitignore文件的作用是把我们的配置文件匹配上的信息进行忽略，不会推送到我们的Git仓库里面去，也不会检测到我们本地的一些变化，（否则的话你每次修改一个字母都会进行自动上传，这是很费时间的事情）</p><p>接下来就是.gitignore文件的配置，我们忽略什么就在里面配置什么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class   #我们编译出来的文件不需要推送</span><br><span class="line"> </span><br><span class="line"># temp file   临时文件</span><br><span class="line">*.log</span><br><span class="line">*.cache</span><br><span class="line">*.diff</span><br><span class="line">*.patch</span><br><span class="line">*.tmp</span><br><span class="line"> </span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"> </span><br><span class="line"># Mobile Tools for Java (J2ME)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"> </span><br><span class="line"># Package Files #包文件不进行推送</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"> </span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line"> </span><br><span class="line">#kdiff3 ignore</span><br><span class="line">*.orig</span><br><span class="line"> </span><br><span class="line">#maven ignore</span><br><span class="line">target/</span><br><span class="line"> </span><br><span class="line">#eclipse ignore</span><br><span class="line">.settings/</span><br><span class="line">.project</span><br><span class="line">.classpatch</span><br><span class="line"> </span><br><span class="line">#idea</span><br><span class="line">.idea/</span><br><span class="line">/idea/</span><br><span class="line">*.ipr</span><br><span class="line">*.iml</span><br><span class="line">*.iws</span><br><span class="line"> </span><br><span class="line"># system ignore  忽略系统文件</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">src/main/resources/store.properties</span><br><span class="line">src/main/resources/datasource.properties</span><br></pre></td></tr></table></figure></p><p>在上面的文件中，我们没有对.jar文件进行忽略，那是因为后面支付宝提供的jar包我们需要提交到git仓库里面。</p><p>接下来执行git的初始化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init  #初始化后会生成一个隐藏的.git文件</span><br></pre></td></tr></table></figure></p><p>继续执行下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status   #可以知道有哪些文件发生了变化</span><br></pre></td></tr></table></figure></p><p>执行下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .  #添加所有文件</span><br></pre></td></tr></table></figure></p><p>接着执行下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure></p><p>你会发现此时之前的那些都new file了 :</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6f752235bf52de7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着执行下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am &apos;first commit init project&apos;</span><br></pre></td></tr></table></figure></p><p>-am代表加注释的意思，操作完此时我们所有文件就提交完了，不过只是提交到本地仓库里，还没有提交到git仓库里面。</p><p>接下来便是把其提交到我们远程的仓库里面了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:licheetools/store.git</span><br></pre></td></tr></table></figure></p><p>@后面是你的github项目的地址。</p><p>紧接着查看一下我们的分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch  #查看一下分支，发现目前我们在master上，我们后面进行修改</span><br></pre></td></tr></table></figure></p><p>现在执行最重要的一步，把项目推送到github仓库上面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></p><p>如果运行出现下面的情况，请不要慌，按照我说的操作继续走：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c512569afce3f81f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>首先拉取一下资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure></p><p>接着就重新执行刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure></p><p>你会发现又出了一个错误：（这可真是命途多舛啊。。。）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-24926ffd1a348050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>（说你的分支太靠后了，没有远程分支线）</p><p>现在只能强制推送了，如何强制呢？可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u -f origin master</span><br></pre></td></tr></table></figure></p><p>现在你发现没有报错了，刷新一下你的github，可以看到你的本地项目已经发送到github上面了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-55e3653e4b91332e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>我们这个项目采用分支开发，主干发布(master)的模式，所以git仓库是必须要有的。</strong></p><p>你可以使用下面的命令查看一下分支情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure></p><p>我们新建一个分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b v0.1 origin/master</span><br></pre></td></tr></table></figure></p><p>(checkout是检查，v0.1是名称，origin/master是当前的分支树节点)<br>你同样可以使用下面的命令查看分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">#运行结果：</span><br><span class="line">#  master</span><br><span class="line">#* v0.1</span><br></pre></td></tr></table></figure></p><p>最后我们使用下面的命令将分支推送到远程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin HEAD -u</span><br></pre></td></tr></table></figure></p><p>就出现：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8e8c3aaf06e7ffd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后去刷新一下github，会发现远程仓库里面已经有了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-df3274be97fcd6a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>是不是觉得很麻烦？其实idea里面已经集成了git，因此你可以不下载git就能连接到github了（但是连接gitee目前还不支持）由于idea和pycharm非常类似，因此我这里就不介绍如何直接使用idea把代码上传到github仓库里面了，有兴趣的同学可以参考我之前的这篇文章：<a href="https://www.jianshu.com/p/3cc5f0fe6168" target="_blank" rel="noopener">利用Pycharm把代码直接上传到github 仓库</a></p><h2 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h2><p>找到图示的pom.xml文件，然后去我的github仓库找到一个名为store.xml的文件，将里面的内容复制替换到pom.xml文件里面：（由于里面的代码很多，这里就不贴出来了，注意一下里面相关包的版本）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-411d9843327c06a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-69e14fd4335723f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>需要注意的是pom.xml文件里面jdk的版本，我用的是10，你们自己注意一下：<br><a href="https://blog.csdn.net/blueboz/article/details/81270242" target="_blank" rel="noopener">Maven 教程：IDEA开发环境中maven 项目配置JDK9，JDK10，JDK11，JDK12..等EA版本的配置方法 系列教程一</a></p><p>左侧就会出现已经安装的包：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2e7caee17db5a3f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="项目包结构初始化"><a href="#项目包结构初始化" class="headerlink" title="项目包结构初始化"></a>项目包结构初始化</h2><p>现在我们需要创建几个包，具体过程我就不详细说明了，直接附上最后的结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9574cc730f7d878e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>简单的说一下各个包的作用：controller，dao，service这三个关系密切：dao在最下层与数据库进行交互，controller是控制层，util是各个工具的存放，vo你可以理解为ViewObject或者ValueObject，正常的这两层就够了，如果是一些比较复杂的项目，还会多一层BusinessObject。pojo是简单的数据库对象，上一层通过VO进行封装，再传递给controller让前端负责展示。我们当然可以在pojo的上层使用bo，然后再在上层使用vo。其实在这里你可以把vo当做一个值对象（ValueObject），然后传递给controller让前端负责展示。common包就是存放我们项目中使用到的常量，或者是公共类等。</p><p>至此，我们本篇关于项目的初始化的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（二）：数据表设计</title>
      <link href="/2018/08/11/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/08/11/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇开始，我们正式开始项目的搭建，首先介绍数据表的设计，具体包括：表结构，表关系，唯一索引，单索引及组合索引，时间戳这几个内容。</p><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>首先我们创建一个数据库store，然后开始创建数据表：<br><strong>1、用户表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_user`;</span><br><span class="line">CREATE TABLE `store_user` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;用户表 id&apos;,</span><br><span class="line">  `username` varchar(50) NOT NULL COMMENT &apos;用户名&apos;,</span><br><span class="line">  `password` varchar(50) NOT NULL COMMENT &apos;用户密码，MD5 加密&apos;,</span><br><span class="line">  `email` varchar(50) DEFAULT NULL,</span><br><span class="line">  `phone` varchar(20) DEFAULT NULL,</span><br><span class="line">  `question` varchar(100) DEFAULT NULL COMMENT &apos;找回密码问题&apos;,</span><br><span class="line">  `answer` varchar(100) DEFAULT NULL COMMENT &apos;找回密码答案&apos;,</span><br><span class="line">  `role` int(4) NOT NULL COMMENT &apos;角色 0-管理员,1-普通用户&apos;,</span><br><span class="line">  `create_time` datetime NOT NULL COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `update_time` datetime NOT NULL COMMENT &apos;最后一次更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `user_name_unique` (`username`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>上面就是构建我们项目的用户表，其中主键 id 自增长，用户名 username （在注册的时候是不允许用户名重复的，并发的时候，我们可以通过锁的机制来解决这种问题。但是如果单纯查询某个用户名是否存在，我们可以采用同步的方法，但是当我们架构变成了一个分布式的时候，这种方法就不可取了。）因此，最好的办法就是通过数据库的唯一索引UNIQUE KEY 然后通过BTREE这种方式将username设置为唯一索引，这样对于username的唯一性就交由mysql来保证了。这样在业务代码处理时就不需要去加一些锁或者同步方法来校验用户名是否存在了。</p><p>然后密码存放的是经MD5加密的值，你通过加密后的字段是看不出原来密码是多少，并且这也是一个非对称加密。<br><strong>2、商品分类表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_category`;</span><br><span class="line">CREATE TABLE `store_category` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;类别 Id&apos;,</span><br><span class="line">  `parent_id` int(11) DEFAULT NULL COMMENT &apos;父类别 id 当 id=0 时说明是根节点,一级类别&apos;,</span><br><span class="line">  `name` varchar(50) DEFAULT NULL COMMENT &apos;类别名称&apos;,</span><br><span class="line">  `status` tinyint(1) DEFAULT &apos;1&apos; COMMENT &apos;类别状态 1-正常,2-已废弃&apos;,</span><br><span class="line">  `sort_order` int(4) DEFAULT NULL COMMENT &apos;排序编号,同类展示顺序,数值相等则自然排序&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=100032 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>通常在设计分类表时要考虑一个场景，保证这个表可以递归，并且这个树状结构为了以后扩展，分类有可能是无限层级扩展的。因此，我们在设计递归的时候一定要有一个结束条件。这里的结束条件就是当parent_id 为 0 则认为递归结束。（比如某些一级类目它的parent_id 就是 0 ，就说明它就是根节点。）<br><strong>3、商品详情表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_product`;</span><br><span class="line">CREATE TABLE `store_product` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;商品 id&apos;,</span><br><span class="line">  `category_id` int(11) NOT NULL COMMENT &apos;分类 id,对应 store_category 表的主键&apos;,</span><br><span class="line">  `name` varchar(100) NOT NULL COMMENT &apos;商品名称&apos;,</span><br><span class="line">  `subtitle` varchar(200) DEFAULT NULL COMMENT &apos;商品副标题&apos;,</span><br><span class="line">  `main_image` varchar(500) DEFAULT NULL COMMENT &apos;产品主图,url 相对地址&apos;,</span><br><span class="line">  `sub_images` text COMMENT &apos;图片地址,json 格式,扩展用&apos;,</span><br><span class="line">  `detail` text COMMENT &apos;商品详情&apos;,</span><br><span class="line">  `price` decimal(20,2) NOT NULL COMMENT &apos;价格,单位-元保留两位小数&apos;,</span><br><span class="line">  `stock` int(11) NOT NULL COMMENT &apos;库存数量&apos;,</span><br><span class="line">  `status` int(6) DEFAULT &apos;1&apos; COMMENT &apos;商品状态.1-在售 2-下架 3-删除&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>注意一下这里的decimal(20,2)，它表示可以存取整数位18，小数位2精度比较高的数。<br><strong>4、购物车表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_cart`;</span><br><span class="line">CREATE TABLE `store_cart` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) NOT NULL,</span><br><span class="line">  `product_id` int(11) DEFAULT NULL COMMENT &apos;商品 id&apos;,</span><br><span class="line">  `quantity` int(11) DEFAULT NULL COMMENT &apos;数量&apos;,</span><br><span class="line">  `checked` int(11) DEFAULT NULL COMMENT &apos;是否选择,1=已勾选,0=未勾选&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `user_id_index` (`user_id`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=146 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>我们这里之所以加一个 user_id索引，是因为我们这个表l里会经常使用 user_id 来进行查询，这样做的话会提高这个表的查询效率。<br><strong>5、支付信息表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_pay_info`;</span><br><span class="line">CREATE TABLE `store_pay_info` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL COMMENT &apos;用户 id&apos;,</span><br><span class="line">  `order_no` bigint(20) DEFAULT NULL COMMENT &apos;订单号&apos;,</span><br><span class="line">  `pay_platform` int(10) DEFAULT NULL COMMENT &apos;支付平台:1-支付宝,2-微信&apos;,</span><br><span class="line">  `platform_number` varchar(200) DEFAULT NULL COMMENT &apos;支付宝支付流水号&apos;,</span><br><span class="line">  `platform_status` varchar(20) DEFAULT NULL COMMENT &apos;支付宝支付状态&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>这个表非常重要，因为里面包含了很多重要信息，我们以后对账，退款，支付查询都会用到这个表。还有就是在我们生成订单并发起支付请求的时候，会生成远程的支付宝订单，而它就存在这个 platform_number 里面，代表远程平台的一个支付流水号。<br><strong>6、订单表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_order`;</span><br><span class="line">CREATE TABLE `store_order` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;订单 id&apos;,</span><br><span class="line">  `order_no` bigint(20) DEFAULT NULL COMMENT &apos;订单号&apos;,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL COMMENT &apos;用户 id&apos;,</span><br><span class="line">  `shipping_id` int(11) DEFAULT NULL,</span><br><span class="line">  `payment` decimal(20,2) DEFAULT NULL COMMENT &apos;实际付款金额,单位是元,保留两位小数&apos;,</span><br><span class="line">  `payment_type` int(4) DEFAULT NULL COMMENT &apos;支付类型,1-在线支付&apos;,</span><br><span class="line">  `postage` int(10) DEFAULT NULL COMMENT &apos;运费,单位是元&apos;,</span><br><span class="line">  `status` int(10) DEFAULT NULL COMMENT &apos;订单状态:0-已取消-10-未付款，20-已付款，40-已发货，50-交易成功，60-交易关闭&apos;,</span><br><span class="line">  `payment_time` datetime DEFAULT NULL COMMENT &apos;支付时间&apos;,</span><br><span class="line">  `send_time` datetime DEFAULT NULL COMMENT &apos;发货时间&apos;,</span><br><span class="line">  `end_time` datetime DEFAULT NULL COMMENT &apos;交易完成时间&apos;,</span><br><span class="line">  `close_time` datetime DEFAULT NULL COMMENT &apos;交易关闭时间&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL COMMENT &apos;创建时间&apos;,</span><br><span class="line">  `update_time` datetime DEFAULT NULL COMMENT &apos;更新时间&apos;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `order_no_index` (`order_no`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=118 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>注意一下，我们需要给订单号添加一个唯一索引，因为我们不能生成多个相同的订单。还有这里的payment是实际的付款金额，你千万不要和产品里面的金额做成联动查询，因为产品里面的金额是随着时间不同而不同，实际付款金额在购买以后就确定了，是不可以修改的。<br><strong>7、订单明细表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_order_item`;</span><br><span class="line">CREATE TABLE `store_order_item` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;订单子表 id&apos;,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL,</span><br><span class="line">  `order_no` bigint(20) DEFAULT NULL,</span><br><span class="line">  `product_id` int(11) DEFAULT NULL COMMENT &apos;商品 id&apos;,</span><br><span class="line">  `product_name` varchar(100) DEFAULT NULL COMMENT &apos;商品名称&apos;,</span><br><span class="line">  `product_image` varchar(500) DEFAULT NULL COMMENT &apos;商品图片地址&apos;,</span><br><span class="line">  `current_unit_price` decimal(20,2) DEFAULT NULL COMMENT &apos;生成订单时的商品单价，单位是元,保留两位小数&apos;,</span><br><span class="line">  `quantity` int(10) DEFAULT NULL COMMENT &apos;商品数量&apos;,</span><br><span class="line">  `total_price` decimal(20,2) DEFAULT NULL COMMENT &apos;商品总价,单位是元,保留两位小数&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `order_no_index` (`order_no`) USING BTREE,</span><br><span class="line">  KEY `order_no_user_id_index` (`user_id`,`order_no`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=135 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>注意一下，这里 product_id不能通过链接product表，来查询name和image 的，因为当我们下单的时候商品名称叫xx，极有可能在查询订单明细的时候就变成了xxxx。所以product_name和produc_image这两个字段的设计是非常有必要的。</p><p><strong>8、收货地址表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS `store_shipping`;</span><br><span class="line">CREATE TABLE `store_shipping` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL COMMENT &apos;用户 id&apos;,</span><br><span class="line">  `receiver_name` varchar(20) DEFAULT NULL COMMENT &apos;收货姓名&apos;,</span><br><span class="line">  `receiver_phone` varchar(20) DEFAULT NULL COMMENT &apos;收货固定电话&apos;,</span><br><span class="line">  `receiver_mobile` varchar(20) DEFAULT NULL COMMENT &apos;收货移动电话&apos;,</span><br><span class="line">  `receiver_province` varchar(20) DEFAULT NULL COMMENT &apos;省份&apos;,</span><br><span class="line">  `receiver_city` varchar(20) DEFAULT NULL COMMENT &apos;城市&apos;,</span><br><span class="line">  `receiver_district` varchar(20) DEFAULT NULL COMMENT &apos;区/县&apos;,</span><br><span class="line">  `receiver_address` varchar(200) DEFAULT NULL COMMENT &apos;详细地址&apos;,</span><br><span class="line">  `receiver_zip` varchar(6) DEFAULT NULL COMMENT &apos;邮编&apos;,</span><br><span class="line">  `create_time` datetime DEFAULT NULL,</span><br><span class="line">  `update_time` datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p><p>这是我们用于收货的地址表，可以这么说是对我们的用户表进行了业务场景的拓展。</p><p>至此，我们能想到的数据表就只有这些，其他的等需要的时候我们再进行添加。</p><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><p>我们先来看一张图：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b3689bdc10126c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>通过该图，我们知道该项目一共有八张表，蓝色的代表该数据表里存在索引，具体的索引如下：</p><p>store_user表的username 是个唯一索引；<br>store_cart表的user_id是个唯一索引；<br>store_order表的order_no是个唯一索引；<br>store_order_item表的order_no是一个唯一索引，而user_id又和order_no组成组合索引。</p><p>接下来，我们按照下单的流程介绍一下数据的流向，这个过程大家必须要知道，否则后面就难以进行了。</p><h3 id="数据流向分析"><a href="#数据流向分析" class="headerlink" title="数据流向分析"></a>数据流向分析</h3><p>首先是注册，注册之后的信息会存到store_user表里面，登录则会读取store_user表中的信息从而进行验证。</p><p>然后搜索商品就用到了分类表和商品表，我们会依据传递的关键字或者分类的id来进行查询。</p><p>如果传入的分类 id 是一个级别比较高的 id，那么我们会对分类表进行递归查询，之后查出来符合这个分类或者关键字的一个product集合（商品详情集合）。</p><p>然后我们将这个商品添加进购物车的时候，就会把商品表中的id和用户表中的id拿过来，存放到购物车表里面，从而生成product_id。</p><p>用户登录的 id 放到 user_id，然后购物车中提交订单就来到了订单确认页，订单确认页里面就要填一些收货地址。</p><p>然后用户提交订单，生成订单，生成订单之后就来到了order（订单表）和 order_item（订单明细表），order 会生成一个订单号，order_item 表和 product 表是一个一对一的关系，order_item 和 order 表是一个多对一的关系（这个很好理解，一个订单里面可以包含多个商品）。</p><p>然后开始对这个订单进行付款，接到支付宝的回调，将信息存到 pay_info 表里面，然后对回调的状态进行判断，如果支付成功会把 order 表的 payment_time 进行写入。</p><p>不知道你发现没有，我们这些表中的外键都是没有用的，为什么不用它呢？因为在以后扩展分表的时候，外键的存在会使其扩展变的非常的麻烦，还有在进行清洗数据时也会很麻烦，因此我们这里就不使用外键。同时你必须要明确的一点就是，适当的冗余对数据库的查询是有一定帮助的。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>我们知道，唯一索引可以保证数据的唯一性，在这里我们就多次使用了它。<br>store_user表中的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNIQUE KEY `user_name_unique` (`username`) USING BTREE</span><br></pre></td></tr></table></figure></p><p>store_order表中的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNIQUE KEY `order_no_index` (`order_no`) USING BTREE</span><br></pre></td></tr></table></figure></p><h3 id="单索引及组合索引"><a href="#单索引及组合索引" class="headerlink" title="单索引及组合索引"></a>单索引及组合索引</h3><p>单索引：<br>store_order_item表中的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `order_no_index` (`order_no`) USING BTREE,</span><br></pre></td></tr></table></figure></p><p>组合索引:<br>store_order_item表中的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEY `order_no_user_id_index` (`user_id`,`order_no`) USING BTREE</span><br></pre></td></tr></table></figure></p><p>这里的user_id和order_no的组合查询就是提高我们的查询速度。</p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>时间戳，又称业务查询问题的后悔药。你可能也发现了这一点，那就是我们所有的表都有create_time（数据创建时间）和 update_time（数据更新时间）这是非常重要的！</p><p>因为有时候我们在查一些业务问题的时候，如果日志没有打印，我们就很难知道事情发生的具体时间。如果我们数据库中连时间戳也没有，那更是无从下手了，一旦这个时候会非常后悔，如果当时打印日志就好了，就能知道这个数据是什么时候变化的，至少在查业务问题的时候有一个时间范围。</p><p>为什么用这两个字段呢？因为 create_time 我们能知道数据创建时间，而 update_time 我们能知道数据更新时间，但是我们不可能保存每次更新时间（这也不是它应该干的事，否则类似的版本控制器干嘛去了？？？），它只会保留最新一次的更新时间。另外这两个字段可以便于我们进行时间的排序或者其他业务分析的时候会用到。值得注意的是，我们存的类型是datetime而不是date，因为我们想要知道具体的时间。</p><p>至此，我们本篇关于表结构，表关系，唯一索引，单索引及组合索引，时间戳这几个内容的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM搭建二手市场交易平台（一）：开发流程与环境搭建</title>
      <link href="/2018/08/10/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/08/10/SSM%E6%90%AD%E5%BB%BA%E4%BA%8C%E6%89%8B%E5%B8%82%E5%9C%BA%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><p><strong>环境搭建：</strong>这里以windows10 64Bit为环境进行环境搭建。具体包括jdk的安装，Tomcat的安装，nginx的安装。<br><strong>数据库及接口的配置：</strong>介绍表的设计思路，接口的设计思路<br><strong>项目初始化：</strong>介绍Spring，Spring MVC，MyBatis的使用<br><strong>用户模块：</strong>介绍个人中心资料修改，商品收藏等<br><strong>分类模块：</strong>介绍如何进行二手商品类目的分类以及插件的使用<br><strong>商品模块：</strong>主要介绍商品的富文本展示<br><strong>购物车模块：</strong>介绍添加商品，更新购物车，查询购物车数量，价格动态显示<br><strong>收货地址模块：</strong>添加地址，删除更新地址，地址详情，地址的列表等<br><strong>支付模块：</strong>介绍支付宝的支付功能，回调功能，查询订单的支付状态，生成支付的二维码<br><strong>订单模块：</strong>分为前台和后台，前台就是创建订单，获取订单的信息，列表的详情页，取消订单；后台负责订单的搜索，订单的详情，订单的发货<br><strong>云服务器模块：</strong>介绍云服务器的配置与项目的打包上线。</p><h3 id="淘宝技术架构"><a href="#淘宝技术架构" class="headerlink" title="淘宝技术架构"></a>淘宝技术架构</h3><p>这里我找了一篇文章，大家可以了解一下：<a href="https://wenku.baidu.com/view/02f1a42e876fb84ae45c3b3567ec102de2bddfec.html" target="_blank" rel="noopener">淘宝技术架构</a></p><p>在之前我们都是采用all in one的方式来进行项目的发布与运行：就是你的Application Server里面包含了Application ，File和DataBase，这样做的好处就是节省开支，但坏处就是很容易造成服务器挂掉。</p><p>然后就各自分开，各自采用不同的服务器：Application Server，File Server，DataBase Server,这种能防止File Server挂掉以后，系统还能运行，但是还是不能满足我们高并发的要求（因为你每次数据请求都必须直接与数据库进行连接，当访问量达到一定数量的时候，数据库响应时间也是很费资源），于是架构又开始升级。</p><p>我们知道80%的数据访问只存在于20%的数据上面，而且我们不希望每次都是从数据库中取出数据，于是我们可以使用缓存。缓存分为很多种，本地缓存和远程缓存。本地缓存称为local cache，远程缓存称为Remote Disteibuted Cache。我从网上找了几张图片，大家可以了解一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-99b422d0b55974b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>演化过程：在Application Server这里添加添加了一个负载均衡调度器，也变成了一个集群。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-57aa6ca597f2bf19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c3bc544458e2425b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>利用负载均衡调度器解决服务器的Session共享的问题，但是也有缺点：假设Application1的服务器重启了，那么它上面所有的sessio就全没了；然后就是我们的负载均衡调度器成了一个有状态的服务器，实现容灾就有麻烦。如果你让每个session都在各个服务器里面有一个备份，这的确能解决这个问题，但是当数量达到一个级别以后，这种方式是很费资源的。那么你又说，为我们可以让browser在提交数据的同时带上cookie，这样就不用担心服务器不能正常识别资源了，但是你想过没有，cookie的长度是有限的而且是有时间限制的，而且还是存放在本地，它的安全性就等不到保证了。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-93263de8115619dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>于是又有人提出了一种新的方式，我们可以专门弄一个session服务器，用于存放session。当你想获取应用的时候，可以从session服务器获取session。但是我们需要注意这个session server是单点的，我们最好把它也做成一个集群。</p><p>现在我们继续回到前面的架构图，我们现在发现数据库是一个瓶颈，我们可以对它进行读写分离：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7a51015a9ddf8e97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们这里的Slave是辅库，Master是主库，我们把所有的读的操作都让Slave辅库来进行，把所有的写的操作都让Master主库负责。这样做的话，把你Application也需要做相应的变化：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ab27db5e1c72732a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f5de04268a0357c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在这个过程中，安全性，数据分析，监控，反作弊等都值得大家去注意；<br>然后随着技术的发展，SOA架构，服务化，消息队列，任务调度，多机房等方向发展。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="jdk的安装"><a href="#jdk的安装" class="headerlink" title="jdk的安装"></a>jdk的安装</h3><p>我这里使用的是jdk10的版本，你可以使用jdk7,8,9，再低的版本就不建议使用了。<br>关于jdk的安装，我这里就不介绍了，直接开启传送大门：<a href="https://www.baidu.com/link?url=8GLQ4FTvZyMgsmkW3g7Iw71d_PfEytmT6IPWwCk4BOjAMP8J-DOwLcxBtkDGx4gNFVJ3KCK18tB_HXubJFTK2FpCCXd0tfdUHP2zs8Uf5Fu&amp;wd=&amp;eqid=f99123ca000091f0000000025c01f8ff" target="_blank" rel="noopener">java的<em>jdk安装</em>(超详细版)</a></p><h3 id="Tomcat的安装"><a href="#Tomcat的安装" class="headerlink" title="Tomcat的安装"></a>Tomcat的安装</h3><p>Tomcat它是一个Web容器，javaEE项目都存放在里面。<br>同样Tomcat的安装，我也是直接开启传送大门，注意一下这里推荐使用Tomcat8系列： <a href="https://www.cnblogs.com/beginner-boy/p/7806680.html" target="_blank" rel="noopener">windows下tomcat的安装配置</a><br>下面简单说一下Tomcat的启动与关闭：<br>启动使用：在配置环境的bin目录下使用startup.bat命令；<br>关闭使用：在配置环境的bin目录下使用shutdown.bat命令。<br>就是<code>${CATALINA_HOME}/bin/startup.bat</code>或者是<code>${CATALINA_HOME}/bin/shutdown.bat</code><br>对了，你还需要配置UTF-8的字符集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\tomcat\apache-tomcat-8.5.34\conf\server.xml</span><br></pre></td></tr></table></figure></p><p>我的路径是这里，你打开它，找到第69-71行代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-727121717de4b380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>添加这一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URIEncoding=&quot;UTF-8&quot;</span><br></pre></td></tr></table></figure></p><p>注意：截图中之所以有是因为我已经配置完了，之前是没有的。</p><h3 id="Maven的安装"><a href="#Maven的安装" class="headerlink" title="Maven的安装"></a>Maven的安装</h3><p>Maven全称是Apache Maven Project–Apache的优秀开源项目，Maven是java项目的构建和管理工具。Maven的用途很大，这里简单说一下：<br>1、用Maven可以方便的创建项目，基于archetype可以创建多种类型的java项目；<br>2、Maven仓库对jar包（artifact）进行统一管理，避免jar文件的重复拷贝和版本冲突；<br>3、团队开发，Maven管理项目的release（正式版本）和snapshot（开发版本）版本，方便多模块（module）项目的各个模块之间的快速集成</p><p>关于Maven的安装，大家可以参考这篇文章：<a href="https://www.cnblogs.com/yyiou/p/7411409.html" target="_blank" rel="noopener">Maven安装教程详解</a><br>不过要说明的是，如果下载速度过慢，建议使用镜像下载：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/" target="_blank" rel="noopener">maven下载</a><br><img src="https://upload-images.jianshu.io/upload_images/8964398-e9aac8d8720134b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>随便点击一个，然后选择binaries这个文件夹，选择以.zip结尾的文件就可以了。<br>然后安装按照文章里面的说明就可以了，最后你可以在dos状态下使用<code>mvn -version</code>来验证安装是否正确：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3137c6fa6817619b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还要注意一下，就是我的Maven项目地址已经发生了改变,由默认的位置变为:<code>F:\Maven\repo</code>，这一点你注意一下。</p><p>下面是一些常用的maven命令：<br>清除命令：mvn clean<br>编译命令： mvn compile<br>打包命令：mvn package<br>跳过单元测试：mvn clean package -Dmaven.test.skip=true</p><h3 id="vsftpd安装"><a href="#vsftpd安装" class="headerlink" title="vsftpd安装"></a>vsftpd安装</h3><p>vsftpd 是“very secure FTP daemon”的缩写，是一个完全免费的、开放源代码的ftp服务器软件,但是它是适用于linux系统，要想在windows上搭建是一件非常麻烦的事。我从网上找了很久，找到了一个小而巧的FTP Server，不需要安装，点击之后输入用户和密码就能使用。</p><p>第一步，从我的gitee上面下载一个名为FTP Server.zip的压缩文件，解压就只有下面2个文件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-dd0edcd0ae9084c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你单击第二个exe，设置账户和密码，以及ftp的路径，然后去浏览器地址栏输入：<br><code>ftp://localhost</code>，就完成了自己FTP Server的搭建。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-81d069900689ebff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是nginx的安装。</p><h3 id="nginx的安装"><a href="#nginx的安装" class="headerlink" title="nginx的安装"></a>nginx的安装</h3><p>nginx是一款轻量级的web服务器，也是一款反向代理服务器；它的功能很强大，这里简单介绍一下：<br>1、可直接支持Rails和PHP的程序；<br>2、可作为HTTP反向代理服务器；<br>3、作为负载均衡服务器；<br>4、作为邮件代理服务器；<br>5、帮助实现前端动静分离；<br>nginx的特点：高稳定，高性能，资源占用少，功能丰富，模块化结构，支持热部署</p><p>具体的安装我这里就不介绍了，大家可以参考这篇文章就行了：<a href="https://www.cnblogs.com/Chiler/p/8027167.html" target="_blank" rel="noopener">Nginx在windows上安装 及 Nginx的配置及优化</a></p><p>安装完以后，打开<code>C:\Windows\System32\drivers\etc\hosts</code>文件，新增一行代码：<br><code>127.0.0.1    store.licheetools.top</code>然后你去浏览器地址栏中输入<code>127.0.0.1</code>，<code>store.licheetools.top</code>，或者<code>localhost</code>就能正常访问到nginx的首页了。（如果访问不了，请关闭之前开启的FTP Server）</p><p>接下来就是相关文件的配置了，首先找到nginx的安装目录下面的conf文件：<code>F:\Maven\nginx-1.14.1\conf</code>，接着我们打开其中的<code>nginx.conf</code>文件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-816e7d0cabc6a3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们往下拉，我们在大概第95行的位置添加下面一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include vhost/*.conf;</span><br></pre></td></tr></table></figure></p><p>截图是我已经配置好的，目的是让大家对此有一个更清醒的认识。</p><p>接着在<code>nginx.conf</code>文件的同级目录下面新建<strong>vhost文件夹</strong>（名字你可以不这样命令，但是必须和前面我们在nginx.conf文件中定义的代码名一样，否则就会出现找不到文件的bug）</p><p>然后在里面新建名为<code>image.licheetools.top.conf</code>的文件，必须与.conf结尾。你可以不命令这个名字，但怕你后面不会正常运行，建议还是按照我的命令进行运行吧。（这里你可以在<code>F:\Maven\envy\img</code>文件夹里面放置一张名为test.jpg的图片，后面测试会用上）</p><p>在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex off;</span><br><span class="line">    server_name image.licheetools.top;   #这个名称必须和文件名一致</span><br><span class="line">    access_log c:/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    #error_page 404 /404.html;</span><br><span class="line">    if ( $query_string ~* &quot;.*[\;&apos;\&lt;\&gt;].*&quot; )&#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /(mmall_fe|mmall_admin_fe)/dist/view/* &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root F:\Maven\envy\img;   #这个就是前面的那个ftp server的路径</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开：<code>C:\Windows\System32\drivers\etc\hosts</code>文件，修改刚才新增的那行代码：<code>127.0.0.1    image.licheetools.top</code>。保存完以后，我们重新打开一个cmd命令，进入到nginx的安装目录。输入<code>nginx.exe -t</code>，如果配置文件没有报错，继续输入<code>nginx.exe -s reload</code>。然后你去浏览器地址栏中输入<code>http://image.licheetools.top\test.jpg</code>就能正常访问到我们在<code>F:\Maven\envy\img</code>下面放置的test.jpg文件了。（如果访问不了，请关闭之前开启的FTP Server）</p><p>上面介绍的是文件转发的测试，接下来我们来测试一下端口的转发。</p><h3 id="端口转发测试"><a href="#端口转发测试" class="headerlink" title="端口转发测试"></a>端口转发测试</h3><p>我们继续在vhost里面新建名为<code>tomcat.licheetools.top.conf</code>的文件，必须与.conf结尾。你可以不命令这个名字，但怕你后面不会正常运行，建议还是按照我的命令进行运行吧。（这里你可以在<code>F:\Maven\envy\img</code>文件夹里面放置一张名为test.jpg的图片，后面测试会用上）</p><p>在里面写入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    autoindex on;</span><br><span class="line">    server_name tomcat.licheetools.top;    #这个名称必须和文件名一致</span><br><span class="line">    access_log c:/access.log combined;</span><br><span class="line">    index index.html index.htm index.jsp index.php;</span><br><span class="line">    #error_page 404 /404.html;</span><br><span class="line">    if ( $query_string ~* &quot;.*[\;&apos;\&lt;\&gt;].*&quot; )&#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        add_header Access-Control-Allow-Origin *;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开：<code>C:\Windows\System32\drivers\etc\hosts</code>文件，继续新增的一行代码：<code>127.0.0.1    tomcat.licheetools.top</code>。保存完以后，我们重新打开一个cmd命令，进入到tomcat安装目录的bin目录，在里面执行<code>startup.bat</code>，来启动我们的tomcat服务器。此时你去浏览器地址栏中输入<code>http://localhost:8080/</code>看是不是出现了tomcat的默认首页。</p><p>紧接着我们另开启一个新的cmd命令行，进入到nginx的安装目录，输入<code>nginx.exe -s reload</code>。</p><p>然后你去浏览器地址栏中输入<code>http://tomcat.licheetools.top</code>就能正常访问到tomcat的默认首页。（如果访问不了，请关闭之前开启的FTP Server）</p><h3 id="mysql的安装"><a href="#mysql的安装" class="headerlink" title="mysql的安装"></a>mysql的安装</h3><p>关于mysql的安装，我在这篇笔记里面有过详细的介绍，这里就不再介绍了。<br><a href="https://www.jianshu.com/p/6b007bc61f5c" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</a></p><p>mysql的登录：在dos状态下使用mysql -uroot -p然后输入密码进行登录。<br>mysql的配置（注意这里所说的配置不光对windows有用，对于linux或者unix也是有用的）<strong>SQL语句结尾的分号必须带上，表示语句结束</strong><br>（1）查看目前mysql的用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from mysql.user;</span><br></pre></td></tr></table></figure></p><p>（2）修改root密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set password for root@localhost=password(&apos;yourpassword&apos;);</span><br><span class="line"></span><br><span class="line">set password for root@127.0.0.1=password(&apos;yourpassword&apos;);</span><br></pre></td></tr></table></figure></p><p>（3）使用exit退出mysql;<br>（4）重新登录mysql输入mysql -u root -p;<br>（5）输入密码登录成功；<br>（6）删除匿名用户，执行下面的命令：<br>查看是否有匿名用户：<code>select user,host from mysql.user;</code><br>删除匿名用户：<code>delete feom mysql.user where user = &#39;&#39;;</code><br>再次查看：<code>select user,host from mysql.user;</code><br>刷新，使上述操作生效：<code>flush privilgges;</code><br>（7）插入mysql新用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into mysql.user(Host,User,Password)values(&quot;localhost&quot;,&quot;yourusername&quot;,password(&quot;yourpassword&quot;));</span><br></pre></td></tr></table></figure></p><p>刷新，使上述操作生效：<code>flush privilgges;</code><br>（8）创建新的数据库(database)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database &apos;databasename&apos; default character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure></p><p>（9）本地用户赋予所有权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on databasename.* to yourname@localhost identified by &apos;yourpassword&apos;;</span><br></pre></td></tr></table></figure></p><p>（10）给账号开通外网所有权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on databasename.* to &apos;yourname&apos;@&apos;%&apos; identified by &apos;yourpassword&apos;;</span><br></pre></td></tr></table></figure></p><p>上面的权限可以根据自己的需要进行适当的修改，举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant  select,insert,update on databasename.* to &apos;yourname&apos;@&apos;192.168.01.01&apos; identified by &apos;yourpassword&apos;;</span><br></pre></td></tr></table></figure></p><p>代表只开通增改查权限给指定的账号，并也指定了ip的地址。<br>刷新，使上述操作生效：<code>flush privilgges;</code><br>（11）查看本地的IP地址：<br>windows系统使用：ipconfig，而linux用户使用ifconfig</p><h3 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h3><p>关于git的安装，这里直接开启传送大门：<a href="https://www.cnblogs.com/wj-1314/p/7993819.html" target="_blank" rel="noopener">Git安装教程（windows）</a><br>下面是一些基础的配置：<br>1、配置用户名（提交时会用到）<br><code>git config --global user.name &quot;envy&quot;</code>(envy是我的用户名)<br>2、配置邮箱（提交时会用到）<br><code>git config --global user.email &quot;envy@licheetools.top&quot;</code>(<a href="mailto:envy@licheetools.top" target="_blank" rel="noopener">envy@licheetools.top</a>是我的邮箱)<br>3、其他的一些配置<br><code>git config --global merge.tools &quot;kdiff3&quot;</code>（注意一下，如果你没安装kdiff3就不需要这一行）<br><code>git config --global core.autocrlf false</code>（设置这个的好处就是不用管不同系统中换行符错乱的问题）<br>4、编码问题：<br><code>git config --global gui.encoding utf-8</code>（避免git gui中的中文乱码）<br><code>git config --global core.quotepath off</code>（避免git status显示的中文文件名乱码）</p><p>在windows上面一般还需要配置一下大小写的问题：<br><code>git config --global core.ignorecase false</code></p><h3 id="git-ssh-key-pair的配置"><a href="#git-ssh-key-pair的配置" class="headerlink" title="git ssh key pair的配置"></a>git ssh key pair的配置</h3><p>1、你可以在linux上或者windows上的Git Bash命令行窗口中输入：<br><code>ssh-keygen -t rsa -C &quot;envy@licheetools.top&quot;</code><br>2、然后一路回车，不要输入任何密码，生成ssh key pair<br>3、ssh-add ~/.ssh/id_rsa<br>4、cat ~/.ssh/id_rsa.pub</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30cbfa05e5ad7113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>5、复制公共钥匙到粘贴板，我这里是使用gitee（你当然可以使用github）<br>6、查看git的版本:<code>git --version</code></p><p>至此，我们关于开发流程与环境搭建的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM框架 </tag>
            
            <tag> JAVA后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（九）：数据库连接利器JDBC介绍</title>
      <link href="/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%88%A9%E5%99%A8JDBC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%88%A9%E5%99%A8JDBC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>jdbc全称java database connectivity.是java程序与数据库连接的一种机制。</p><p>jdbc的过程：<br>1、搭建开发环境<br>2、编写程序，在程序中加载数据库驱动<br>3、建立连接<br>4、创建用于向数据库发送sql语句的Statement对象<br>5、从代表结果集的ResultSet中取出数据<br>6、断开与数据库的链接，并释放相关的资源</p><p>###<br>DriverManager：驱动管理类<br>主要作用：<br>1、注册驱动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.registerDriver(new Driver());   //会导致驱动注册两次</span><br><span class="line">Class.forName(&quot;com.test.jdbc.demo1.JdbcTest1&quot;);   //实际上使用这种方式</span><br></pre></td></tr></table></figure></p><p>2、获得连接<br>Connection getConnection(String url,String username,String password)；<br>url的写法：jdbc:mysql://localhost:3306/jdbc<br>jdbc:协议<br>mysql:子协议<br>localhost:主机号<br>3306:端口号<br>注意如果为本地ip地址，则可以简写为：jdbc:mysql:///jdbc</p><p>###jdbc工具类的书写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line"></span><br><span class="line">//没有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        driverClass = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">        url = &quot;jdbc:mysql://localhost:3306/jdbctest&quot;;</span><br><span class="line">        username = &quot;root&quot;;</span><br><span class="line">        password = &quot;root&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是具有了jdbc.propreties属性的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package com.test.jdbc.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/****</span><br><span class="line"> * JDBC的工具类</span><br><span class="line"> * @author lenovo</span><br><span class="line"> * */</span><br><span class="line">public class JdbcUtils &#123;</span><br><span class="line">    private static final String driverClass;</span><br><span class="line">    private static final String url;</span><br><span class="line">    private static final String username;</span><br><span class="line">    private static final String password;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //有配置文件jdbc.properties时的代码</span><br><span class="line">    static &#123;</span><br><span class="line">        //加载属性文件并解析</span><br><span class="line">        Properties props = new Properties();</span><br><span class="line">        //如何获得属性文件的输入流？</span><br><span class="line">        //通常情况下使用类的加载器的方式进行获取</span><br><span class="line">        InputStream is = JdbcUtils.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            props.load(is);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        driverClass =props.getProperty(&quot;driverClass&quot;);</span><br><span class="line">        url =props.getProperty(&quot;url&quot;);</span><br><span class="line">        username =props.getProperty(&quot;username&quot;);</span><br><span class="line">        password =props.getProperty(&quot;password&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 注册驱动的方法</span><br><span class="line">     **/</span><br><span class="line">    public static void loadDriver() throws ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *</span><br><span class="line">     *获得连接的方法</span><br><span class="line">     * */</span><br><span class="line">    public static Connection getConnection() throws Exception &#123;</span><br><span class="line">        loadDriver();  //这里必须要调用上面的注册驱动方法</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第一种资源方式释放Connection、Statement：适用于增加、删除、修改操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     *第二种资源方式释放Connection、Statement、ResultSet：适用于查询操作</span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line">    public static void ReleaseSource(Connection connection, Statement statement, ResultSet resultSet) &#123;</span><br><span class="line">        if (connection != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            connection = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (statement != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            statement = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (resultSet != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中jdbc.propreties文件里面的代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClass = com.mysql.jdbc.Driver</span><br><span class="line">url = jdbc:mysql://localhost:3306/jdbctest</span><br><span class="line">username = root</span><br><span class="line">password = root</span><br></pre></td></tr></table></figure></p><h3 id="Statement的使用"><a href="#Statement的使用" class="headerlink" title="Statement的使用"></a>Statement的使用</h3><p>它的使用和我们后面所说的preparedStatement的使用有点不相同，而且我们优先后面的那种方式，因为不会产生sql注入的危险。</p><h3 id="preparedStatement的使用"><a href="#preparedStatement的使用" class="headerlink" title="preparedStatement的使用"></a>preparedStatement的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    /***</span><br><span class="line">     * 保存数据到数据库，其实就是插入操作</span><br><span class="line">     * */</span><br><span class="line">    public void demo1() &#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        PreparedStatement preparedStatement = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JdbcUtils.ReleaseSource(connection, preparedStatement);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在增删改查四个操作里面，我们先来简单连接四个过程的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">//保存数据到数据库，其实就是插入操作</span><br><span class="line">            //注册驱动和获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;insert into user values(null,?,?,?)&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;xxx&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;0000&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;boyer&quot;);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据插入成功&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改数据库中的数据</span><br><span class="line">             //注册驱动与获取连接</span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;update user set username =?,password =?,name=? where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setString(1, &quot;eee&quot;);</span><br><span class="line">            preparedStatement.setString(2, &quot;555&quot;);</span><br><span class="line">            preparedStatement.setString(3, &quot;lichee&quot;);</span><br><span class="line">            preparedStatement.setInt(4, 7);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if (i &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;数据修改成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">//删除数据库中的数据</span><br><span class="line">//注册驱动与获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;delete from user where uid =?&quot;;</span><br><span class="line">            //预处理sql</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,6);</span><br><span class="line">            //执行sql语句</span><br><span class="line">            int i = preparedStatement.executeUpdate();</span><br><span class="line">            if(i&gt;0)&#123;</span><br><span class="line">                System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的全部数据</span><br><span class="line">      //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql = &quot;select * from user&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">           //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           while (resultSet.next())&#123;</span><br><span class="line">               System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询数据库中的一条数据</span><br><span class="line"> //注册驱动和获取连接</span><br><span class="line">            connection =JdbcUtils.getConnection();</span><br><span class="line">            //创建sql语句</span><br><span class="line">            String sql =&quot;select * from user where uid =?&quot;;</span><br><span class="line">            //预处理sql语句</span><br><span class="line">            preparedStatement =connection.prepareStatement(sql);</span><br><span class="line">            //设置参数</span><br><span class="line">            preparedStatement.setInt(1,1);</span><br><span class="line">            //执行sql语句</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>也就是说增加，修改，删除都是使用executeUpdate函数，而且返回的是int类型的受影响的行数，然后我们就可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = preparedStatement.executeUpdate();</span><br><span class="line">           if(i&gt;0)&#123;</span><br><span class="line">               System.out.println(&quot;数据删除成功！&quot;);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><p>只有查询使用的是executeQuery函数，而且返回的是resultSet类型的结果集，然后使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet = preparedStatement.executeQuery();</span><br><span class="line">           //判断结果集中的数据</span><br><span class="line">            while (resultSet.next())&#123;</span><br><span class="line">                System.out.println(&quot;uid：&quot;+resultSet.getInt(&quot;uid&quot;)+&quot;\nusername：&quot;+resultSet.getString(&quot;username&quot;)+&quot;\npassword：&quot;+resultSet.getString(&quot;password&quot;)+&quot;\nname：&quot;+resultSet.getString(&quot;name&quot;));</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。</p><p>C3P0连接池</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（八）：反射机制</title>
      <link href="/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/08/05/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来聊一聊Java里面关于反射的那些事吧。</p><h2 id="四大类"><a href="#四大类" class="headerlink" title="四大类"></a>四大类</h2><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>Constructor：关于单个类的构造方法以及对它的访问权限;<br>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>Method：提供关于类或者接口上的单独某个方法的信息。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-013cf6f3c2bf9298.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class：class类的实例表示正在运行的java应用程序中的类和接口；<br>java中java.lang.Class类用于表示一个类的字节码（.class）文件;获取某个class文件对应的Class对象：<br>1、在已知类和对象的情况下：<br>类名.class<br>对象.getClass()  –由Object类提供。<br>2、在未知类的情况下：<br>Class.forName(“包名.类名”)</p><p>Class类代表某个类的字节码，并提供了加载字节码的方法：forName(“包名.类名”)，forName方法用于类字节码到内存中，并封装成一个Class对象。</p><p>我们通过代码来测试一下：首先先新建一个测试类Person：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String sex;</span><br><span class="line"></span><br><span class="line">public Person() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Person(String name,String sex) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">this.sex =sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name=name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String getSex() &#123;</span><br><span class="line">return sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void setSex(String sex) &#123;</span><br><span class="line">this.sex=sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void eat() &#123;</span><br><span class="line">System.out.println(&quot;吃东西......&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;Person [name=&quot; + name + &quot;, sex=&quot; + sex + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再来建一个ReflectTest类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">public class ReflectTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获得Class对象： 1、通过类.class； 2、通过对象.getClass()； 3、通过Class.forName();</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demo1() throws ClassNotFoundException &#123;</span><br><span class="line">// 1、通过类.class；</span><br><span class="line">Class csone = Person.class;</span><br><span class="line"></span><br><span class="line">// 2、通过对象.getClass()；</span><br><span class="line">Person person = new Person();</span><br><span class="line">Class cstwo = person.getClass();</span><br><span class="line"></span><br><span class="line">// 3、通过Class.forName()获取信息（推荐）</span><br><span class="line">Class csthree = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(csthree);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ReflectTest.demo1();</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上三种方法获得的都是类的字节码文件对应的对象在内存中的地址。</p><h3 id="Constructor构造方法"><a href="#Constructor构造方法" class="headerlink" title="Constructor构造方法"></a>Constructor构造方法</h3><p>Constructor：关于单个类的构造方法以及对它的访问权限;<br>我们在前面已经得到了类名，那么就可以调用它的getConstructor()方法来获得它的有参或者无参的构造方法，紧接着你可以利用这个获得的构造方法的newInstance()方法，来达到完成实例化一个对象的目的。</p><p>我们新建一个测试类：ConstructorTest：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line">public class ConstructorTest &#123;</span><br><span class="line">/**</span><br><span class="line"> * 获得无参的构造方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demo2() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得无参的构造方法</span><br><span class="line">Constructor cs = cls.getConstructor(null);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cs.newInstance(null); // 其实这里就相当于Person person =new Person();</span><br><span class="line">person.eat();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void demo3() throws Exception &#123;</span><br><span class="line">Class cls = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">Constructor cso = cls.getConstructor(String.class, String.class);</span><br><span class="line"></span><br><span class="line">Person person = (Person) cso.newInstance(&quot;小白&quot;, &quot;男&quot;);  //这里其实就是相当于Person person =new Person(&quot;小白&quot;,&quot;男&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">ConstructorTest.demo3();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Person [name=小白, sex=男]</span><br></pre></td></tr></table></figure></p><h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>Field：提供有关类或接口的单个字段的信息，以及对它的动态访问权限；<br>我们在前面已经得到了类名，那么就可以得到它的成员变量（包括所有的成员变量和指定的成员变量）。</p><p>如果你想获得所有的（非私有）成员变量，那么你可以调用它的getFields()方法，获得该类所有public属性（包括父类继承的）；</p><p>如果你想获得所有的（含私有）成员变量<strong>getDeclaredFields()</strong>方法，获得该类所有声明的属性（包括私有属性和父类继承的）；</p><p>如果你想获得指定的（非私有）成员变量，那么你可以调用它的getField(String name)方法，获得指定的（非私有）成员变量；</p><p>如果你想获得指定的（含私有）成员变量，那么你可以调用它的<strong>getDeclaredField(String name)</strong>方法，获得指定的（含私有）成员变量;</p><p>设置Field变量是否可以访问，你可以使用field.setAccessible(boolean)，<br>boolean为真则表示可以，反之则不可以。</p><p>Field变量值的读取与设置：<br>field.get(obj);<br>field.set(obj,value);</p><p>我们首先在之前的Person类中添加一个公有的属性（public Sting hobby），然后新建一个测试类:FieldTest:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">public class FieldTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有属性</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public static void publicDemoTest() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定公有属性字段</span><br><span class="line">Field field1 = class1.getField(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">// 给指定的公有属性赋值</span><br><span class="line">Person p = (Person) class1.newInstance();</span><br><span class="line"></span><br><span class="line">//p.hobby =&quot;reading book&quot;;  //通过普通的对象.属性的方法来给对象的属性赋值</span><br><span class="line"></span><br><span class="line">field1.set(p, &quot;reading book&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * 测试私有属性</span><br><span class="line"> * @throws Exception </span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void privateDemoTest() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line"></span><br><span class="line">// 获得指定私有属性字段（注意这里需要注释掉该字段对应的getter和setter方法）</span><br><span class="line">Field field2 = class2.getDeclaredField(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//先实例化一个对象</span><br><span class="line">Person person =(Person)class2.newInstance();</span><br><span class="line"></span><br><span class="line">//给指定的私有属性赋值（操作属性）:</span><br><span class="line">//1、这里必须先要设置是否可以操作</span><br><span class="line">field2.setAccessible(true);</span><br><span class="line">//2、给对应的属性赋值</span><br><span class="line">field2.set(person,&quot;小白&quot;);</span><br><span class="line">//3、获取对应的属性值</span><br><span class="line">Object obj =field2.get(person);</span><br><span class="line"></span><br><span class="line">System.out.println(obj);</span><br><span class="line">System.out.println(&quot;**************************&quot;);</span><br><span class="line">System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">FieldTest.publicDemoTest();</span><br><span class="line">FieldTest.privateDemoTest();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//输出结果</span><br><span class="line">Person [name=null, sex=null, hobby=reading book]</span><br><span class="line">小白</span><br><span class="line">**************************</span><br><span class="line">Person [name=小白, sex=null, hobby=null]</span><br></pre></td></tr></table></figure></p><h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>Method：提供关于类或者接口上的单独某个方法的信息。<br>Method类代表某个类中的一个成员方法<br>Method对象的获得方法：</p><p>如果你想获得所有的（非私有）方法，那么你可以调用它的getMethods()方法；</p><p>如果你想获得所有的（含私有）方法，那么你可以调用它<strong>getDeclaredMethods()</strong>方法；</p><p>如果你想获得指定的（非私有）方法，那么你可以调用它的getMethod()方法；（常用）</p><p>如果你想获得指定的（含私有）方法，那么你可以调用它的<strong>getDeclaredMethod()</strong>方法；（常用）</p><p>得到了方法，那么如何执行方法呢？我们可以通过反射来执行方法：<br>invoke(Object obj,Object….args)</p><p>我们依旧通过测试来完成相关信息的输出，在前面的Person类中新增两个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void run() &#123;</span><br><span class="line">System.out.println(&quot;跑步......&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private String wacthTv(String name) &#123;</span><br><span class="line">return &quot;我在看&quot; + name + &quot;电视节目&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着新建一个测试类MethodTest：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package JavaReflect;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class MethodTest &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试公有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws ClassNotFoundException</span><br><span class="line"> */</span><br><span class="line">public static void demoOne() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class1 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person1 = (Person) class1.newInstance();</span><br><span class="line">// 获得公有方法</span><br><span class="line">Method method = class1.getMethod(&quot;eat&quot;);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person1); // 这里就相当于person.eat()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public static void demoTwo() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class2 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person2 = (Person) class2.newInstance();</span><br><span class="line">// 获得私有方法</span><br><span class="line">Method method = class2.getDeclaredMethod(&quot;run&quot;);</span><br><span class="line">// 设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">// 执行该方法</span><br><span class="line">method.invoke(person2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试私有方法（带参数）</span><br><span class="line"> * </span><br><span class="line"> * @throws Exception</span><br><span class="line"> **/</span><br><span class="line">public static void demoThree() throws Exception &#123;</span><br><span class="line">// 获得类的字节码文件对应的对象</span><br><span class="line">Class class3 = Class.forName(&quot;JavaReflect.Person&quot;);</span><br><span class="line">// 实例化对象</span><br><span class="line">Person person3 = (Person) class3.newInstance();</span><br><span class="line">// 获得带参数的私有方法</span><br><span class="line">Method method = class3.getDeclaredMethod(&quot;wacthTv&quot;, String.class);</span><br><span class="line">//设置私有的访问权限</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">//执行该方法</span><br><span class="line">//method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line"></span><br><span class="line">Object obj =method.invoke(person3, &quot;新闻联播&quot;);</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">MethodTest.demoOne();</span><br><span class="line">MethodTest.demoTwo();</span><br><span class="line">MethodTest.demoThree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出信息</span><br><span class="line">吃东西......</span><br><span class="line">跑步......</span><br><span class="line">我在看新闻联播电视节目</span><br></pre></td></tr></table></figure><p>上面我们测试了3种情况，分别是公有方法，私有方法，以及私有的带参数的方法。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>1、什么是Java的反射机制？<br>Java的反射机制是在运行状态中，对于任意一个类，都能够知道这个类的属性和方法；对于任意一个对象，都能够调用它的任意属性和方法；这种动态获取信息以及动态调用对象方法的功能称之为Java的反射机制。</p><p>2、Java的反射机制的作用？<br>是用来编写一些通用性较高的代码或者框架的时候使用。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（七）：输入输出流和集合</title>
      <link href="/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%92%8C%E9%9B%86%E5%90%88/"/>
      <url>/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81%E5%92%8C%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h3><p>程序通过write（写操作），使字符从河流中依次通过，从而形成了字符流。</p><p>那么什么是流呢？所谓的流就是指一连串流动的字符，它是以先进先出的方式发送信息的通道。</p><p>流分为两种，输出流和输入流：</p><p>输出流一般是屏幕，打印机等，用来输出的设备，而输入流则是键盘或者扫描仪等设备。</p><p>数据源（键盘）将数据放到字符流中，然后程序通过read（读操作）进行读取。</p><p>也就是说文件输入是读，文件输出是写。</p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>File就是文件，它可认为是相关记录或放在一起的数据的集合，在Java中，我们使用java.io.File类对文件迸行操作。可以点击这里查看api文档：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8 api</a></p><p>需要注意的是，Windows中的目录分隔符为反斜杠“\”，而Linux的目录中的分隔符则是斜杠“/”。</p><p>eclipse的快速导包快捷键为ctrl+shift+o。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建File对象的三种方式</span><br><span class="line">File file1 =new File(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);   //方法一</span><br><span class="line"></span><br><span class="line">File file1 =new File(&quot;F:\\JAVA&quot;,&quot;\\javatest\\io\\score.txt&quot;);   //方法二</span><br><span class="line"></span><br><span class="line">File file =new File(&quot;F:\\JAVA&quot;);</span><br><span class="line">File file1 =new File(file ,&quot;\\javatest\\io\\score&quot;);   //方法三</span><br></pre></td></tr></table></figure><p>下面介绍一些常见的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">isDirectory()：判断是否是目录</span><br><span class="line">isFile()：判断是否是文件</span><br><span class="line">exists()：判断是否存在</span><br><span class="line">mkdir()：创建一级目录</span><br><span class="line">mkdirs()：创建多级目录</span><br><span class="line">createNewFile()：创建新的文件</span><br><span class="line">canRead()：是否可读</span><br><span class="line">canWrite()：是否可写</span><br></pre></td></tr></table></figure></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>字节分为两种：字节输入流 InputStream和字节输出流 OutputStream，我从网上找了两张图片，大家可以看一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b1d9716f1c8accc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4b8a6b6b9bcfaa98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="FileInputStream文件输入流"><a href="#FileInputStream文件输入流" class="headerlink" title="FileInputStream文件输入流"></a>FileInputStream文件输入流</h3><p>FileInputStream文件输入流有几个作用：</p><ul><li>1、就是从文件系统中的某个文件中获得输入字节。</li></ul><p>举个简单的例子，复制就是把原来文件的信息进行读取的操作，然后粘贴就是把读取的信息进行写入的操作；</p><ul><li>2、用于读取图像数据之类的原始字节流。</li></ul><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public int read()</td><td style="text-align:center">从输入流中读取一个数据字节</td></tr><tr><td>public int read(byte[] b)</td><td style="text-align:center">从输入流中将最多b.length个字节的数据读入一个byte数组中</td></tr><tr><td>public int read(byte[] b,int off, int len)</td><td style="text-align:center">从输入流中将最多len个字节的数据读入byte数组中</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输入流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：如果int的返回值为-1，则表示已经读到了文件的末尾。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamOne &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files =new  FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">//int n = files.read();  // 只能读取第一个数据字节</span><br><span class="line">//while(n!=-1) &#123;</span><br><span class="line">//System.out.print((char)n);</span><br><span class="line">//n =files.read();</span><br><span class="line">//&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int n =0;</span><br><span class="line">while((n=files.read())!=-1) &#123;</span><br><span class="line">System.out.print((char)n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再来看一个字节数组的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package JavaIO;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class FileDemoInputStreamTwo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">// 创建一个FileInputStream</span><br><span class="line">try &#123;</span><br><span class="line">FileInputStream files = new FileInputStream(&quot;F:\\JAVA\\javatest\\io\\score.txt&quot;);</span><br><span class="line">byte [] b =new byte[100];</span><br><span class="line">files.read(b,0,5); //后面2个是偏移量，0表示从开始读取，而5代表存取的字节的长度</span><br><span class="line">System.out.println(new String(b));</span><br><span class="line">files.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="FileOutputStream文件输出流"><a href="#FileOutputStream文件输出流" class="headerlink" title="FileOutputStream文件输出流"></a>FileOutputStream文件输出流</h2><p>上面我们说完了FileInputStream文件输入流，接下来说文件输出流FileOutputStream：</p><table><thead><tr><th>方法名</th><th style="text-align:center">描述</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td>public void write(int b)</td><td style="text-align:center">将指定字节写入此文件输出流</td></tr><tr><td>public void write(byte[] b)</td><td style="text-align:center">将b.length个字节从指定byte数组写入此文件输出流中</td></tr><tr><td>public void write(byte[] b,int off,int len)</td><td style="text-align:center">将指定byte数组中从偏移量off开始的len个字节写入此文件输出流</td></tr><tr><td>public void close()</td><td style="text-align:center">关闭此文件输出流并释放与此流有关的所有系统资源</td></tr></tbody></table><p>注意：在上面的方法里面都有一个默认参数为append（追加的意思），但是默认为空白（False也就是覆盖的意思），如果你设为True那么就是后面追加，会保留原来的信息。</p><p>上面的方法是不是和前面输入流很相似，是的这就是一个互逆的过程。</p><p>不过还有一个问题就是很容易发生编码错误，所以你会发现字节流其实不是很容易适合做字符相关的操作，适合做二进制数据相关的操作。但是却是非常适合文件的复制，粘贴。</p><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>我们之前的文件读写都是直接从硬盘上读取的，其实这种方式读取非常慢的；而我们现在要说的缓冲流这表明我们可以从内存中进行读取。</p><p>缓冲流包括：缓冲输入流BufferedInputStream和缓冲输出流BufferedOutputStream</p><p>缓冲输入流是不能直接直接读取文件系统中的数据的，它必须要和文件输入流进行结合。</p><p>缓冲区满了，会自动清空；不满则需要强制清空（你可以调用flush或者close方法）。</p><p>有时候我们会比较程序的运行时间，这时候我们可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long startTime =System.currentTimeMillis();  //获取当前的时间-1970年1月1日最后就是运行时间</span><br></pre></td></tr></table></figure></p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>同样字符流也分为两种：字符输入流Reader和字符输出流 Writer</p><p>字节流和字符流它们主要的区别就是应用的场景不一样：<a href="https://blog.csdn.net/cynhafa/article/details/6882061" target="_blank" rel="noopener">java 字节流与字符流的区别</a></p><p>我网上找了2张图片，大家看一下关于字符流相关的信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-73464e734ce3a5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30a69bdd4bdbf1c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="字节字符转换流"><a href="#字节字符转换流" class="headerlink" title="字节字符转换流"></a>字节字符转换流</h2><p>接下我们来谈谈字节字符转换流，顾名思义就是供字节字符转换用的（两者过渡的桥梁）：InputStreamReader和OutputStreamWriter：<br><a href="https://www.cnblogs.com/alsf/p/6778055.html" target="_blank" rel="noopener">掌握OutputStreamWriter和InputStreamReader类的作用</a></p><h2 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h2><p>序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。简单点说就是把java对象转换为字节序列的过程。反序列就是和它相反的过程。</p><p>序列化步骤：<br>1、创建一个类，然后实现Serializable接口；<br>2、创建对象：将对象写入文件；<br>3、从文件读取对象信息<br>这个过程会涉及到两个流：对象输入流ObjectInputStream 和 对象输出流ObjectOutputStream</p><p> <a href="https://www.cnblogs.com/xdp-gacl/p/3777987.html" target="_blank" rel="noopener">Java基础学习总结——Java对象的序列化和反序列化</a></p><p><a href="http://www.importnew.com/17964.html" target="_blank" rel="noopener">Java对象的序列化与反序列化</a></p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>在前面我们好像有介绍过数组（又好像没有，不管了），我们知道数组用于固定长度的数据场景，而集合更适合数据动态变化的场景。</p><p>或者说集合更加适合应用于下列场景:<br>1、无法预测存储数据的数量；<br>2、同时存储具有一对一关系的数据(商品信息&amp;详情或者学生&amp;学号等)；<br>3、需要进行数据的增删；<br>4、数据不允许重复等</p><h3 id="集合框架的体系结构"><a href="#集合框架的体系结构" class="headerlink" title="集合框架的体系结构"></a>集合框架的体系结构</h3><p>集合框架一共分为两类：Collection和Map。其中Collection用于存储类的对象，而Map用于以键值对的形式来存储信息。</p><p>为了更好的理解，我从网上找了一张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-115e000525e874e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Collection这个类下面有3个子接口，分别是List（序列），Queue（队列），Set（集）。其中，List（序列），Queue（队列）中存放的数据必须是有序的，并且是允许重复的；Set（集）存放的数据是无序的，且不允许重复的。每个接口下面又有许多的实现类。List的实例类是ArrayList（可以看做一个长度动态增长的数组）。Queue的实现类是LinkedList（它实现了List和Queue，也就是链表）。Set的实现类是HashSet，也就是哈希集。</p><p>Map这个类可以实现的类有HashMap，也就是哈希表。</p><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><p>List：是元素有序并且可以重复的集合，称为序列或者列表。</p><p>List可以精确控制每个元素的插入位置或删除某个位置的元素。</p><p>List的两个主要实现类是ArrayList和LinkedList。这里我们主要介绍ArrayList类，因为这个类使用比较多。其实ArrayList和数组是比较相似的，只是它的长度可以动态增长，它其实也是内存上一片连续的存储空间进行存储。而LinkedList本身是一个链表，这两个中方法的作用是几乎相同的。</p><p>ArrayList底层是由数组实现的，它的长度是可以动态增长的，用来满足应用程序的需求。如果你要在在列表尾部插入或删除数据，那么使用ArrayList是非常有效的(如果中间插入或者删除会过多挪位，并不适合)。当然它还更适合查找和更新元素，最重要的一点就是ArrayList中的<strong>元素可以为null值</strong>。</p><p>我们即将要将的Collection都是存放于java.util 包中的，所以在使用的时候需要我们自己进行包的导入。</p><p>下面简单介绍List接口中几种常用的方法，以便于大家在用的时候得心用手：</p><p>add()：向列表末尾添加元素；clear()：清空列表中元素；contains()：判断列表中是否包含指定的对象。</p><p>get()：返回此列表中指定位置的元素； indexOf ()：返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。</p><p>isEmpty() ：集合是否为空，空返回true； iterator ()：以正确的顺序返回该列表中的元素的迭代器；remove()：删除该列表中指定位置的元素；size()：返回此列表中的元素数；sort()：对列表进行排序。</p><p>接下来我们来看ArrayList这个类，你会发现它的方法其实和我们List这个接口的方法非常类似。其中<code>ArrayList()</code>是它的无参构造方法：构造一个初始容量为十的空列表；<code>ArrayList(Collection &lt;? extends E&gt; c)</code>是它的有参构造方法，它可以通过已存在的Collection来构造ArrayList。</p><p>记住列表的索引号是从零开始的，这一点很重要，需要特别注意。</p><p>我觉得学语言很多时候就得多看Api文档，这对自己自身能力的提高非常有帮助。</p><h3 id="ArrayList案例分析"><a href="#ArrayList案例分析" class="headerlink" title="ArrayList案例分析"></a>ArrayList案例分析</h3><p>双十一的时候，很多网站都会在其首页发布一些打折的消息，我们现在的任务就是模拟这个场景，要求如下：<br>1、添加和显示信息；<br>2、在指定位置处插入信息；<br>3、删除消息；<br>4、修改消息。<br>条件：编号 id，标题 title，创建人 creator，创建时间 createTime。</p><p>博主是一个重度的Python爱好者，所以这些要求刚写的时候，就已经想到如何用Python中的list去实现相关功能了。所以，如果你也喜欢Python不妨来交流学习。</p><p>好了，有点跑题了，你自己先尝试通过查看api文档的方式，看看自己能否独立实现这些要求，之后再来查看结果吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class Notice &#123;</span><br><span class="line">//公告的添加和显示;在指定位置处插入公告;删除公告;修改公告</span><br><span class="line">// 编号 id;标题 title;创建人 creator;创建时间 createTime</span><br><span class="line"></span><br><span class="line">private int id;</span><br><span class="line">private String title;</span><br><span class="line">private String create;</span><br><span class="line">private Date createTime;</span><br><span class="line"></span><br><span class="line">public Notice() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">public Notice(int id, String title, String create, Date createTime) &#123;</span><br><span class="line">super();</span><br><span class="line">this.id = id;</span><br><span class="line">this.title = title;</span><br><span class="line">this.create = create;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setId(int id) &#123;</span><br><span class="line">this.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getTitle() &#123;</span><br><span class="line">return title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTitle(String title) &#123;</span><br><span class="line">this.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getCreate() &#123;</span><br><span class="line">return create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreate(String create) &#123;</span><br><span class="line">this.create = create;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Date getCreateTime() &#123;</span><br><span class="line">return createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setCreateTime(Date createTime) &#123;</span><br><span class="line">this.createTime = createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看这个类的测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class NoticeTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 创建Notice类的对象，我们先实例化3条信息</span><br><span class="line">Notice notice1 =new Notice(1,&quot;欢迎来到啃饼小白的修炼之旅&quot;,&quot;啃饼小白&quot;,new Date());</span><br><span class="line">Notice notice2 =new Notice(2,&quot;欢迎来到java的世界&quot;,&quot;管理员&quot;,new Date());</span><br><span class="line">Notice notice3 =new Notice(3,&quot;世界那么大，我想出去看看&quot;,&quot;思录者&quot;,new Date());</span><br><span class="line"></span><br><span class="line">// 将消息添加到ArrayList里面</span><br><span class="line">ArrayList noticelist =new ArrayList();</span><br><span class="line">noticelist.add(notice1);  // 默认为末尾添加</span><br><span class="line">noticelist.add(notice2);</span><br><span class="line">noticelist.add(notice3);</span><br><span class="line"></span><br><span class="line">// 消息的显示</span><br><span class="line">System.out.println(&quot;消息的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 在第一条消息后面添加一条消息</span><br><span class="line">Notice notice4 =new Notice(4,&quot;努力与运动兼备&quot;,&quot;拾光小白&quot;,new Date());</span><br><span class="line">noticelist.add(1,notice4);</span><br><span class="line">System.out.println(&quot;添加完消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 删除编号为3的消息：欢迎来到java的世界</span><br><span class="line">//noticelist.remove(2);</span><br><span class="line">noticelist.remove(notice2);</span><br><span class="line">System.out.println(&quot;删除消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;****************************************************&quot;);</span><br><span class="line"></span><br><span class="line">// 修改编号为3的消息：世界那么大，我想出去看看，中的我修改为你</span><br><span class="line">notice3.setTitle(&quot;世界那么大，你想出去看看&quot;);</span><br><span class="line">System.out.println(&quot;修改消息以后的内容为：&quot;);</span><br><span class="line">for(int i=0;i&lt;noticelist.size();i++) &#123;</span><br><span class="line">System.out.println(i+1+&quot;、&quot;+((Notice)(noticelist.get(i))).getTitle());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们来介绍集合中的另一个set。</p><h2 id="set-集"><a href="#set-集" class="headerlink" title="set(集)"></a>set(集)</h2><p>Set是元素无序且不可以重复的集合，被称为集。而我们上面刚介绍的列表则是有序且重复的，这一点要弄清楚。</p><p>set是一个接口，而它的实现类是HashSet（哈希集）。哈希集中的元素是无序且不可以重复的。而且在HashSet中，只允许有一个null元素因此它具有良好的存取和查找性能。</p><p>由于HashSet中的方法和前面介绍的ArrayList中的差不多，因此这里就不再过多的介绍其方法了，而是直接通过一个例子来进行具体方法的使用：</p><p>不过在这之前，我需要告诉你的是hashset里面是没有提供用于元素输出的get()方法，但是呢，它提供了一个iterator()方法，用于对集合元素进行遍历。</p><p>Iterator (迭代器): Iterator接口可以以统一的方式对各种集合元素进行遍历。记住这个Iterator (迭代器)是存在于java.util包里面的。</p><p>迭代器有2个方法：hasNext()和next()。其中hasNext()方法用于检测集合中是否还有下一个元素，这个是遍历的终止条件；而另一个next()方法是用于返回集合中的下一个元素。</p><p>要求：用HashSet存储多个表示颜色的英文单词,并输出。<br>其中单词包括: “blue”,”red”,”black”,”yellow”和”white”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class HashSetDemo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 将英文单词添加到HashSet当中, &quot;blue&quot;,&quot;red&quot;,&quot;black&quot;,&quot;yellow&quot;和&quot;white&quot;</span><br><span class="line">HashSet hset =new HashSet();</span><br><span class="line">hset.add(&quot;red&quot;);</span><br><span class="line">hset.add(&quot;blue&quot;);</span><br><span class="line">hset.add(&quot;black&quot;);</span><br><span class="line">hset.add(&quot;yellow&quot;);</span><br><span class="line">hset.add(&quot;white&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;集合中的元素为：&quot;);</span><br><span class="line">Iterator it =hset.iterator();</span><br><span class="line">// 遍历迭代器并进行输出</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在有一个问题，如果你把一个已经重复的对象插入到集合里面，会发生什么情况呢？答案是不会报错，可以运行，但是你会发现其实你根本插入不进去。是的，集合就是这样。</p><p>我们现在又来举一个例子，这个例子会让你对上面的介绍生产模糊，但这是必要的：</p><p>案例：如何在HashSet中添加自定义类的对象?<br>需求：<br>1、添加和显示宠物猫信息；<br>2、查找某只宠物猫的信息并输出；<br>3、修改宠物猫的信息;删除宠物猫信息</p><p>其中属性为: 名字name；年龄month；品种species<br>方法为: 构造方法；获取和设置属性值的方法；其他方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">public class Cat &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int month;</span><br><span class="line">private String species;</span><br><span class="line">public Cat(String name, int month, String species) &#123;</span><br><span class="line">super();</span><br><span class="line">this.name = name;</span><br><span class="line">this.month = month;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getMonth() &#123;</span><br><span class="line">return month;</span><br><span class="line">&#125;</span><br><span class="line">public void setMonth(int month) &#123;</span><br><span class="line">this.month = month;</span><br><span class="line">&#125;</span><br><span class="line">public String getSpecies() &#123;</span><br><span class="line">return species;</span><br><span class="line">&#125;</span><br><span class="line">public void setSpecies(String species) &#123;</span><br><span class="line">this.species = species;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot; 姓名=&quot; + name + &quot;, 年龄=&quot; + month + &quot;, 品种=&quot; + species + &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以及测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class CatTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 定义宠物猫对象</span><br><span class="line">Cat huahua = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">Cat fanfan = new Cat(&quot;凡凡&quot;, 10, &quot;英国短毛猫&quot;);</span><br><span class="line"></span><br><span class="line">// 将对象添加到hashset中</span><br><span class="line">HashSet hset = new HashSet();</span><br><span class="line">hset.add(huahua);</span><br><span class="line">hset.add(fanfan);</span><br><span class="line"></span><br><span class="line">// 显示宠物猫信息</span><br><span class="line">Iterator it = hset.iterator();</span><br><span class="line"></span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*******************************************&quot;);</span><br><span class="line">// 添加一个与花花属性一模一样的猫</span><br><span class="line">Cat huahua1 = new Cat(&quot;花花&quot;, 12, &quot;中华田园猫&quot;);</span><br><span class="line">hset.add(huahua1);</span><br><span class="line">Iterator its = hset.iterator();</span><br><span class="line">while (its.hasNext()) &#123;</span><br><span class="line">System.out.println(its.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出结果：</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br><span class="line">*******************************************</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=花花, 年龄=12, 品种=中华田园猫</span><br><span class="line"> 姓名=凡凡, 年龄=10, 品种=英国短毛猫</span><br></pre></td></tr></table></figure></p><p>你运行上面的代码，你会发现一个有趣的事，你在集合里面竟然添加了一条和花花一模一样的数据，说好的集合不能添加相同的数据，你仿佛在逗我玩？我被欺骗了，宝宝不开心了。。。。。。</p><p>其实刚才那句话是适合于字符串的，为什么这么说呢，那是因为字符串是系统提供给我们的类，它里面已经将数据重复的规则，也就是这两个对象是否完全一样（属性，方法等）已经定义好了。这个你可以类比到toString方法，你直接输出对象却是对象在内存中的地址，但是你输出字符串却是字符串的值，这其实也就是字符串里面已经重写了自己的toString方法。</p><p>所以呢，如果你也希望自己定义的类也具有相似的功能，那么你需要重写hashCode()和equals()方法。我们知道equals()在字符串中是判断两个对象的值是否相等。在java里面，hashCode是与哈希表有关的，这是数据结构的知识，我这里简单说明一下。</p><p>举个例子，假如你要存储100个数字，如果你使用前面ArrayList或者数组来存储，而不是哈希表的话，在内存中连续的开辟一个空间用来存放数据，这似乎是可以的，但是一旦要是查找你就不行了。假设你要查找的数据在第100个位置，又或者说是不存在的，但你还是得从头开始查找，这样太浪费时间了。</p><p>那么如何利用哈希表来存储上述数据呢？我们可以这样：在内存中开辟3个区域来进行存放，同时为这3个区域进行编号和命名为桶0，桶1，桶2。然后我们制定一些规则用于桶里面数据的存放，而这些规则就是hashCode。假设我们定义的hashCode为n%3也就是利用数对3进行取余，来进行判断。那么桶0，桶1，桶2存放的数据分别是3的倍数，对3取余数加1，对3取余数加2。</p><p>有了这样的存储结构，我们首先是判断这个数是不是在这个桶里，然后是在哪个桶里，然后就去遍历这个桶里的元素。判断元素在哪个桶里，我们使用的是hashCode()方法，而判断桶里哪一个元素是我们要找的，则是使用equals()方法。这种方法真的好快。</p><p>下面是系统生成的equals方法，我觉得很麻烦，那么你自己是可以重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">Cat other = (Cat) obj;</span><br><span class="line">if (month != other.month)</span><br><span class="line">return false;</span><br><span class="line">if (name == null) &#123;</span><br><span class="line">if (other.name != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!name.equals(other.name))</span><br><span class="line">return false;</span><br><span class="line">if (species == null) &#123;</span><br><span class="line">if (other.species != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!species.equals(other.species))</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写后的equals方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if(this==obj) // 判断对象是否相等，相等则返回true，没必要继续比较属性</span><br><span class="line">return true;</span><br><span class="line">if (obj.getClass()==Cat.class) // 判断obj是否是Cat类的对象，是进行强制转换，进行对象属性的比较</span><br><span class="line">&#123;</span><br><span class="line">Cat cat = (Cat)obj;</span><br><span class="line">    return (cat.getName().equals(name))&amp;&amp;(cat.getMonth()==month)&amp;&amp;(cat.getSpecies().equals(species));</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写了这两个方法以后，现在你再来运行我们的测试类，你会发现花花这个重复对象是不能再次添加进去了。</p><p>现在我们想查找花花的信息，我们有多种方式，第一种是通过花花这个对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面查找花花的信息并进行输出</span><br><span class="line">if(hset.contains(huahua)) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(huahua);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;对不起，花花没有找到&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种是通过花花的名字来查找花花的信息并进行输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 在集合里面使用名字来查找花花的信息并进行输出</span><br><span class="line">boolean flag =false;</span><br><span class="line">its = hset.iterator();</span><br><span class="line">Cat cat =null ;</span><br><span class="line">while(its.hasNext()) &#123;  // 判断是否有下一个对象</span><br><span class="line">                cat=(Cat)its.next();    // 输出下一个对象的信息</span><br><span class="line">if(cat.getName().equals(&quot;花花&quot;)) &#123;</span><br><span class="line">flag =true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag) &#123;</span><br><span class="line">System.out.println(&quot;花花找到了&quot;);</span><br><span class="line">System.out.println(cat);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;花花没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说完了hsahset，接下来我们来聊聊map的那些事。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map中的数据是以键值对( key-value )的形式存储的，这个和Python中的dict（字典）<br>很相似。</p><p>key-value以Entry类型的对象实例存在，而MAp.Entry本身也是一个接口；你可以通过key值来快速地查找value的值。</p><p>一个key-value的映射不能包含重复的键（Key的值必须是唯一的），但是Value是可以重复的。每个键最多只能映射到一个值。</p><p>同样这个Map接口中最常用的实现类是HashMap类，我们前面说过HashSet是基于HashMap而实现的。</p><p>HashMap是基于哈希表的Map接口的实现，它允许使用null值和null键（但是只能有一个）</p><p>key值不允许重复，HashMap中的Entry对象是无序排列的。</p><p>Map接口，HashSet 泛型有一个类，Map&lt;&gt;后可以有key的类型以及Value的类型。</p><p>entrySet获取键值对所有的内容，你可以通过get(key)取Value。keySet取出所有key值。HashMap中使用put添加元素，remove根据key值来移除元素。</p><p>HashMap中构造方法，默认容量16，加载因,0.75 ；你可以使用已存在map集合创建HashMap。</p><p>关于这一块，大家还是多看看api文档，多自己动手操作吧。</p><p>需求：完成一个类似字典的功能：<br>1、将单词以及单词的注释存储到HashMap中；<br>2、显示HashMap中的内容；<br>3、查找某个单词的注释并显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class DictionaryDemoTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String,String&gt; animal =new HashMap&lt;String,String&gt;();</span><br><span class="line">System.out.println(&quot;请输入三组单词对应的注释，并存放到HashMap当中：&quot;);</span><br><span class="line">Scanner console =new Scanner(System.in);</span><br><span class="line">int i=0;</span><br><span class="line">while(i&lt;3) &#123;</span><br><span class="line">System.out.println(&quot;请输入key值(单词)：&quot;);</span><br><span class="line">String key =console.next();</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入value值(注释)：&quot;);</span><br><span class="line">String value =console.next();</span><br><span class="line">animal.put(key, value);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印输出value的值（使用迭代器）</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">System.out.println(&quot;使用迭代器输出所有的value的值：&quot;);</span><br><span class="line">Iterator&lt;String&gt; it =animal.values().iterator();</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">System.out.print(it.next()+&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 打印输出key和value的值</span><br><span class="line">// 通过entrySet方法得到key-value</span><br><span class="line">System.out.println(&quot;通过entrySet方法得到key-value：&quot;);</span><br><span class="line">Set&lt;Entry&lt;String,String&gt;&gt; entrySet =animal.entrySet();// 使用增强型for循环进行遍历</span><br><span class="line">for(Entry&lt;String,String&gt; entryset:entrySet) &#123;</span><br><span class="line">System.out.print(entryset.getKey()+&quot;-&quot;);</span><br><span class="line">System.out.println(entryset.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;*************************&quot;);</span><br><span class="line">// 通过单词找到注释并输出</span><br><span class="line">// 使用KeySet方法</span><br><span class="line">System.out.println(&quot;请输入你要查找的key(单词)&quot;);</span><br><span class="line">String keySearch =console.next();</span><br><span class="line">// 1、取得KeySet</span><br><span class="line">Set&lt;String&gt; KeySet =animal.keySet();</span><br><span class="line">//2、遍历KeySet</span><br><span class="line">boolean flag =false;</span><br><span class="line">for(String key:KeySet) &#123;</span><br><span class="line">if(key.equals(keySearch)) &#123;</span><br><span class="line">System.out.println(&quot;找到了&quot;+&quot;键值对为：&quot;+key+&quot;-&quot;+animal.get(key));</span><br><span class="line">flag=true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!flag) &#123;</span><br><span class="line">System.out.println(&quot;对不起，没有找到&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们再来看一个例子：商品信息管理的HashMap实例。</p><p>需求：使用HashMap対商品信息迸行管理：其中key是商品编号, value是商品对象；<br>你需要对HashMap中的商品信息迸行増、刪、改、査操作。</p><p>要求：分析商品信息类:<br>属性：商品编号: id；商品名称: name；商品价格: price<br>方法：构造方法，获取和设置属性值的方法和其他方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">float goodsPrice = console.nextFloat();</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是初始的代码，这个代码尽管能运行，但是实际上运行的问题还是很多的：<br>商品编号不可以重复（后面对前面的信息进行了覆盖）；类型输入错误。接下来我们就对这些进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package JavaCollectionTest;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.InputMismatchException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class GoodsTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner console = new Scanner(System.in);</span><br><span class="line">// 定义HashMap对象</span><br><span class="line">Map&lt;String, Goods&gt; goodsMap = new HashMap&lt;String, Goods&gt;();</span><br><span class="line">System.out.println(&quot;请输入三条商品信息:&quot;);</span><br><span class="line">int i = 0;</span><br><span class="line">while (i &lt; 3) &#123;</span><br><span class="line">System.out.println(&quot;请输入第&quot; + (i + 1) + &quot;条商品信息:&quot;);</span><br><span class="line">System.out.println(&quot;请输入商品的编号:&quot;);</span><br><span class="line">String goodsId = console.next();</span><br><span class="line">// 判断商品编号id是否存在</span><br><span class="line">if(goodsMap.containsKey(goodsId)) &#123;</span><br><span class="line">System.out.println(&quot;该商品编号已经存在，请重新输入&quot;);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;请输入商品的名称:&quot;);</span><br><span class="line">String goodsName = console.next();</span><br><span class="line"></span><br><span class="line">float goodsPrice = 0;</span><br><span class="line">System.out.println(&quot;请输入商品的价格:&quot;);</span><br><span class="line">try &#123;</span><br><span class="line"> goodsPrice = console.nextFloat();</span><br><span class="line">&#125;catch(InputMismatchException e) &#123;</span><br><span class="line">System.out.println(&quot;商品价格的格式不准确，请输入数值型数据&quot;);</span><br><span class="line">console.next();</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将商品信息添加到HashMap当中</span><br><span class="line">Goods goods = new Goods(goodsId, goodsName, goodsPrice);</span><br><span class="line">goodsMap.put(goodsId, goods);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 遍历HashMap并输出商品的信息</span><br><span class="line">System.out.println(&quot;输出商品的全部信息:&quot;);</span><br><span class="line">Iterator&lt;Goods&gt; itGoods = goodsMap.values().iterator();</span><br><span class="line">while(itGoods.hasNext()) &#123;</span><br><span class="line">System.out.println(itGoods.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9916f2753ebb5bf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们通过这张图片，来简单的对集合进行一下总结。</p><p>我们知道Collection这个接口是有3个实现接口的，list，queue和set，而每个接口下面都有其实现的类。</p><p>Arraylist：底层由数组实现，它的元素是有序且可以重复的，它可以动态增长，以满足应用程序的需求。值得注意的是，ArrayList的元素值可以为null。</p><p>HashSet：是Set接口的实现类，它的元素是无序且不可以重复的，不过只允许一个null元素</p><p>HashMap：以键值对存储的数据，里面的键不能重复，但是允许使用null值和null键 。HashMap中的Entry对象(键值对)是无序排列的。</p><p>也就是说上面3个只有第一个是有序的，其它两个都是无序的。</p><p>Iterator (迭代器) ：Iterator接口以统一的方式对各种集合元素进行遍历。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it=set.iterator();</span><br><span class="line"></span><br><span class="line">while(it.hasNext())&#123;  // 判断迭代器下一个是否有内容</span><br><span class="line"> System.out.print(it.next()+&quot;  &quot;);   // 取出存在的数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在String对象比较的是按照ASCII值进行对比的，如果要比较我们自己定义的类呢？就必须重写我们的hashCode()方法和equals方法。如果两者的hashCode不同，那肯定不是一个对象，后面不需要使用equals方法；如果hashCode相同，我们再去调用equals方法，比较对象的其他属性或方法是否相同。</p><p>本来这里应该介绍泛型的，但是考虑到篇幅的原因，下次再介绍。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（六）：包装类和多线程</title>
      <link href="/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/08/04/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>我们知道在Java中，数据类型分为基本数据类型和引用数据类型，而基本数据类型分为8种，分别是：byte,short,int,long,float,double,char,boolean。基本数据类型是没有属性和方法的，因此无法进行对象化交互。</p><p>那么我们如何让它和我们的对象一样，具有属性和方法呢？这里你就要用到包装类了。</p><p>包装类的产生就是为了解决基本数据类型存在的上述问题。通过包装类可以让基本数据类型获取对象一样的特征，拥有属性方法，行使对象一样的权益，从而完成对象化交互。</p><p>包装类与基本数据类型之间的对应关系，见下面的表格：<br>基本数据类型| 对应的包装类| 说明</p><ul><li>| :-: |-:<br>byte|    Byte|原始大写<br>short    |Short|原始大写<br>int    |Integer|变形<br>long|    Long|原始大写<br>float    |Float|原始大写<br>double|    Double|原始大写<br>char    |Character|变形<br>boolean    |Boolean|原始大写<br>注意：只有int 和char其基本数据类型与对应的包装类有一个变形以外，其余的都是其首字母的大写而已。</li></ul><p>所有的包装类都存在于java.lang中，而且都是被final关键字所修饰，也就是说所有的包装类是没有子类的，不可以被继承的。</p><p> 所有的数值型（byte,short,int,long,float,double,）都是继承自Number的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1d47a9ad1455103a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>余下的char 和 boolean是继承Object类的：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1f2a9cbdf0c10741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b10919e52363d087.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="基本数据类型和包装型之间的转换"><a href="#基本数据类型和包装型之间的转换" class="headerlink" title="基本数据类型和包装型之间的转换"></a>基本数据类型和包装型之间的转换</h2><p>基本数据类型—–》包装型（装箱）；<br>包装型—–》基本数据类型（拆箱）；</p><h3 id="装箱"><a href="#装箱" class="headerlink" title="装箱"></a>装箱</h3><p>装箱：把基本数据类型转换成包装类，有自动装箱和手动装箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 自动装箱</span><br><span class="line">int a1 =1;</span><br><span class="line">Integer a2=a1;</span><br><span class="line"></span><br><span class="line">// 手动装箱</span><br><span class="line">Integer a3 =new Integer(a1);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;基本数据类型a1的值是：&quot;+a1);</span><br><span class="line">System.out.println(&quot;Integer类a2的值是：&quot;+a2);</span><br><span class="line">System.out.println(&quot;Integer类a3的值是：&quot;+a3);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">基本数据类型a1的值是：1</span><br><span class="line">Integer类a2的值是：1</span><br><span class="line">Integer类a3的值是：1</span><br></pre></td></tr></table></figure></p><h3 id="拆箱"><a href="#拆箱" class="headerlink" title="拆箱"></a>拆箱</h3><p>拆箱：把包装类转换成基本数据类型，也有自动拆箱和手动拆箱两种，下面分别说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 自动拆箱</span><br><span class="line"></span><br><span class="line">int a4 = a1;</span><br><span class="line"></span><br><span class="line">// 手动拆箱</span><br><span class="line">Integer a5 = a3.intValue();</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">System.out.println(&quot;Interger：&quot; + a1);</span><br><span class="line">System.out.println(&quot;基本数据类型a4是：&quot; + a4);</span><br><span class="line">System.out.println(&quot;手动intValue：&quot; + a5);</span><br><span class="line"></span><br><span class="line">double a6 = a2.doubleValue();</span><br><span class="line">System.out.println(&quot;手动拆箱 double: &quot;+a6);</span><br><span class="line"></span><br><span class="line">//输出结果：</span><br><span class="line">Interger：1</span><br><span class="line">基本数据类型a4是：1</span><br><span class="line">手动intValue：1</span><br><span class="line">手动拆箱 double: 1.0</span><br></pre></td></tr></table></figure></p><h3 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 基本数据类型转换为字符串</span><br><span class="line"></span><br><span class="line">// 将整型转换为字符串</span><br><span class="line">int a1 =9;</span><br><span class="line">String a2 =Integer.toString(a1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">System.out.println(&quot;int类型转换为String类型对象a2的值：&quot;+a2);</span><br><span class="line">System.out.println(&quot;******************************&quot;);</span><br><span class="line"></span><br><span class="line">//字符串转换为基本数据类型</span><br><span class="line">// 1、包装类的parse方法</span><br><span class="line">int a3 =Integer.parseInt(a2);</span><br><span class="line"></span><br><span class="line">//2、包装类的valueOf方法，现将字符串转换为包装类，再通过自动拆箱完成基本数据类型的转换</span><br><span class="line">int a4 =Integer.valueOf(a2);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a3的值：&quot;+a3);</span><br><span class="line">System.out.println(&quot;String类型对象转换为int类型a4的值：&quot;+a4);</span><br></pre></td></tr></table></figure><p>总结一下，你可以通过toString方法将基本数据类型转换为字符串。</p><p>同样可以通过Parse和valueOf将字符串转换为基本数据类型。需要注意的是，valueOf是对Parse的封装。</p><h3 id="包装类的几点说明"><a href="#包装类的几点说明" class="headerlink" title="包装类的几点说明"></a>包装类的几点说明</h3><p>我们前面好像有说过基本数据类型的默认值，这里重新贴一下：</p><table><thead><tr><th>基本数据类型</th><th style="text-align:center">默认值</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td>byte</td><td style="text-align:center">0</td></tr><tr><td>short</td><td style="text-align:center">0</td></tr><tr><td>int</td><td style="text-align:center">0</td></tr><tr><td>long</td><td style="text-align:center">0L</td></tr><tr><td>float</td><td style="text-align:center">0.0f</td></tr><tr><td>double</td><td style="text-align:center">0.0d</td></tr><tr><td>char</td><td style="text-align:center">‘\u0000’</td><td style="text-align:right">\u是指Unicode编码</td></tr><tr><td>boolean</td><td style="text-align:center">false</td></tr></tbody></table><p>那么现在问题来了，我们定义一个Integer类型的对象one ,它的初始值是不是也是0呢?答案不是0,而是null，因为此时Integer和String一样，都是类，其初始值为null。</p><h3 id="包装类的对象信息"><a href="#包装类的对象信息" class="headerlink" title="包装类的对象信息"></a>包装类的对象信息</h3><p>我们先来看一段代码，你先试着猜一下它的运行结果，然后参看输出结果，看看有什么体会：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ChangLiangTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Integer one =new Integer(100);</span><br><span class="line"></span><br><span class="line">Integer two =new Integer(100);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;one==two的结果：&quot;+(one==two));  //1</span><br><span class="line"></span><br><span class="line">Integer three =100;</span><br><span class="line">System.out.println(&quot;three==100的结果：&quot;+(three==100));  //2</span><br><span class="line"></span><br><span class="line">Integer four =100;</span><br><span class="line">System.out.println(&quot;three==four的结果：&quot;+(three==four));  //3</span><br><span class="line"></span><br><span class="line">Integer five =200;</span><br><span class="line">System.out.println(&quot;five==200的结果：&quot;+(five==200));  //4</span><br><span class="line"></span><br><span class="line">Integer six =200;</span><br><span class="line">System.out.println(&quot;five==six的结果：&quot;+(five==six));  //5</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在前面说过，使用new关键词就是直接在内存中开辟一个新的空间，one和two 只是值相等，内存中地址的引用并不相同，因此1输出的结果必然是false。</p><p><code>Integer three =100</code>其实是自动装箱，而后面的<code>three =100</code>其实是自动拆箱，实际上执行的是<code>Integer three =Integer.valueOf(100)</code>，最后比较的则是2个int类型的值是否相等，因此结果必然为true。</p><p>前面说过<code>Integer four =100</code>是自动装箱，但是它实际上执行的是<code>Integer four=nteger.valueOf(100);</code>。而valueOf会自动缓存值（在缓存区或者说对象池里面），也就是说当-128&lt;参数&lt;127的时候，该参数会直接从缓存区获取。因此两者比较的是来自缓存区的同一块地址。显然该结果是true。</p><p>同样<code>Integer five =200</code>是自动装箱，后面<code>five==200</code>自动拆箱，因此这里比较的则是2个int类型的值是否相等。显然该结果是true。</p><p>而最后一个则是因为参数200，它已经超出-128&lt;参数&lt;127这个范围，因此会直接实例化new 一个Integer，所以比较的是两个内存中的对象，显然结果是false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 输出结果：</span><br><span class="line">one==two的结果：false</span><br><span class="line">three==100的结果：true</span><br><span class="line">three==four的结果：true</span><br><span class="line">five==200的结果：true</span><br><span class="line">five==six的结果：false</span><br></pre></td></tr></table></figure><p>也就是说，当参数在-128 到 128之间才能从对象池中进行获取，超出则是不可以的，需要new了。</p><p>在java基本数据类型的包装类中除了 float 和 double都是可以应用对象常量池概念的。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-df9c491910b88071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面那样说你可能还不明白，我举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Double d1 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==100的结果是：&quot;+(d1==100));  //1</span><br><span class="line"></span><br><span class="line">Double d2 =Double.valueOf(100);</span><br><span class="line">System.out.println(&quot;d1==d2的结果是：&quot;+(d1==d2));  //2</span><br></pre></td></tr></table></figure></p><p>1的输出结果为true这是没有任何问题的，但是2的输出结果是false，因为float 和 double是不适用于对象常量池的。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>在说多线程之前，我么先来了解什么是进程？</p><p>进程就是可执行程序并存放在计算机存储器的一个指令序列，它是一个动态执行的过程。</p><p>线程是比进程还要小的运行单位，一个进程包含多个线程，你可以把线程看做一个子程序。</p><p>我们知道程序的运行是靠CPU的，那么在只有一个CPU情况下，如何才能保证程序的正常运行呢？我们可以把CPU的运行时间进行分片，根据时间片来进行任务的轮转执行，但由于时间片的长度太短了，以至于我们认为所有任务都是同时进行的。</p><h3 id="Thread和Runnable接口介绍"><a href="#Thread和Runnable接口介绍" class="headerlink" title="Thread和Runnable接口介绍"></a>Thread和Runnable接口介绍</h3><p>如何进行线程的创建呢？在Java里面，你可以通过创建一个Thread类或者一个Thread子类的对象来创建线程。也可以创建一个实现Runnable接口的类的对象。这两种都是可以的。</p><p>Thread是-个线程类，位于java.lang包下面，你可以去api文档进行查看，这里列举部分构造方法：<br>构造方法    | 说明| 备注</p><ul><li>| :-: | -:<br>Thread()|    创建一个线程对象|<br>Thread(String name)    |创建一个具有指定名称的线程对象|<br>Thread(Runnable target)    |创建一个基于Runnable接口实现类的线程对象|<br>Thread(Runnable target,String name)|    创建一个基于Runnable接口实现类,并且具有指定名称的线程对象。|</li></ul><p>以及Thread类的常用方法：<br>方法    | 说明| 备注</p><ul><li>| :-: | -:<br>public void run()    |线程相关的代码写在该方法中，一般需要重写<br>public void start()    |启动线程的方法<br>public static void sleep(long m)    |线程休眠m毫秒的方法<br>public void join()    |优先执行调用join()方法的线程</li></ul><p>你只需要记住，我们所有线程实现的代码都必须放在run方法里面，自然run方法中的代码被称为线程体。</p><p>还需要注意的是Runnable接口，它只有一个方法run()方法。你只需要记住Runnable是Java中用以实现线程的接口，任何实现线程功能的类都必须实现Runnable接口。</p><p>你可以点击这里查看<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Java8 api</a>，获取更多信息。</p><h3 id="通过Thread类创建线程"><a href="#通过Thread类创建线程" class="headerlink" title="通过Thread类创建线程"></a>通过Thread类创建线程</h3><p>在api里面，我们知道通过Thread类是可以创建线程的。那么我们现在就来通过继承Thread类的方式创建线程类，并重写run()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadTestDemo extends Thread &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">System.out.println(getName()+&quot;该线程正在执行！&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//System.out.println(&quot;主线程1正在执行&quot;);</span><br><span class="line">ThreadTestDemo ttd =new ThreadTestDemo();</span><br><span class="line">//ttd.start();  // 启动线程</span><br><span class="line">ttd.start();   //线程只能启动一次，不能多次启动</span><br><span class="line">//System.out.println(&quot;主线程2正在执行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大家知道除了我们刚才自定义的线程，其实还有一个主线程。现在我们自己来定义两个线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread &#123;</span><br><span class="line">public MyThread(String name) &#123;</span><br><span class="line">super(name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(getName()+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">public class ThreadTestTwo &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">MyThread t1 =new MyThread(&quot;线程1&quot;);</span><br><span class="line">MyThread t2 =new MyThread(&quot;线程2&quot;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个其实和我们上面的例子差别不是很大，只是现在我们定义了两个线程，但是主线程依然存在。运行一下，你会发现你每次的运行结果都是不相同的。对的，无论是线程还是进程，它们的运行顺序都是由系统来调度的，不是由程序员所能决定的（注意这是没有附加方法的情况，后面会说线程间的通信）</p><h3 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h3><p>现在你可能有一个疑问，为什么要实现Runnable接口呢又或者说为什么要实现Runnable接口创建线程呢?</p><p>答案你肯定知道，因为Java是单继承的，不支持多继承。现在问题来了，如果我现在定义的类已经继承了一个类，那么就不能通过继承Thread类来创建线程了？</p><p>又或者说，我不想重写Thread类的其他方法，只想使用run方法，这时候怎么办呢？</p><p>这时候Runnable接口就派上用场了。（前面说过Runnable接口只有一个run方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr2);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个输出结果也是随机的，但都会输出打印20个线程。现在我们对其修改一下，我们看一下，是不是多个线程可以共享同一个变量（言外之意，是不是只能打印输出11个线程，还有主线程）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class TestRunnable implements Runnable&#123;</span><br><span class="line">int i=0;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">for(;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;正在运行&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public class ThreadRunnableTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">TestRunnable tr =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t1 =new Thread(tr);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">//TestRunnable tr2 =new TestRunnable();</span><br><span class="line">//tr.start();  // 前面也说过runnable只有一个run方法，所以它的启动必须依赖于Thread</span><br><span class="line">Thread t2 =new Thread(tr);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#输出结果</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br><span class="line">Thread-0正在运行</span><br><span class="line">Thread-1正在运行</span><br></pre></td></tr></table></figure></p><p>结果是的，所以也就是说线程之间是可以共享成员变量的。</p><h3 id="线程的状态和生命周期"><a href="#线程的状态和生命周期" class="headerlink" title="线程的状态和生命周期"></a>线程的状态和生命周期</h3><p>通常而言，线程是有五个状态的，分别是：</p><p>新建(New)：创建一个Thread或Thread子类的对象时就会进入新建状态。</p><p>可运行(Runnable)： 调用start方法是进入可运行状态（而不是立即执行），就绪状态</p><p>正在运行(Running)： 一个Thread获取了cpu使用权就进入了正在运行状态。记住只有可运行状态才能进入到正在运行状态，其他的不可以。</p><p>阻塞(Blocked): 不再执行，缺少资源。</p><p>终止状态(Dead)：这个就是线程的停止运行了。</p><p>所谓的线程的生命周期，说白了就是这五个过程的相互转换而已，不过有些过程是双向的，有些则是单向的。我找了一张图，便于大家的理解：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d0aaaeef0cd473d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面简单说一下这个图的意思：</p><p>当你创建线程对象以后，该线程就变成了新建(New)状态，如果该线程调用start()方法，那么就变成了可运行(Runnable)状态；如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于可运行(Runnable)状态，如果此时该线程获取到了cpu的使用权，那么该线程就开心的进入到了正在运行(Running)状态；如果该线程调用了yield()方法，或者是时间片用完了，又回到了可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于正在运行(Running)状态，如果此时调用join()，wait()，sleep()或者I/O操作时，均会使该线程进入阻塞(Blocked)状态；如果此时该线程正常执行完毕或者异常终止，又或者调用stop()方法，那么就变成了终止状态(Dead)。</p><p>现在线程处于阻塞(Blocked)状态，如果此时等待执行join()方法的线程执行完毕；或者调用notify()或notifyall()方法；sleep()超时；I/O请求完成时，线程就会进入可运行(Runnable)状态。如果该线程调用stop()方法，那么就变成了终止状态(Dead)。</p><p>需要说明的是，stop方法已经过时了，并不提倡大家去用。</p><p>下面简单介绍几个方法的使用。</p><h3 id="sleep方法的使用"><a href="#sleep方法的使用" class="headerlink" title="sleep方法的使用"></a>sleep方法的使用</h3><p>这个sleep方法是Thread类的一个方法，同时也是一个静态方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void sleep(long millis)</span><br></pre></td></tr></table></figure></p><p>sleep方法的作用是在指定的毫秒数内让正在执行的线程休眠(暂停执行)；其中的参数为休眠时间，单位是毫秒。</p><p>也就是说等休眠时间过了以后，程序才会继续执行。当你需要页面刷新或者计时的时候，这时候sleep就派上用场了。</p><h3 id="join方法的使用"><a href="#join方法的使用" class="headerlink" title="join方法的使用"></a>join方法的使用</h3><p>同样这个join方法也是Thread类的一个方法，但它是一个实例方法，因为有final的修饰，因此这个方法是不能被重写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join()</span><br></pre></td></tr></table></figure></p><p>join方法的作用是等待调用该方法的线程结束后才能执行，是用来抢占资源优先执行的。也就是说如果某个线程调用了这个join方法，那么后面的线程都必须等这个线程运行完成后才能运行。</p><p>同时join方法还有一个带参数的同名方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public final void join(long millis)</span><br></pre></td></tr></table></figure></p><p>带参数的join()方法的作用是等待该线程终止的最长时间为millis，这个参数的单位是毫秒。</p><p>也就是说没有参数的join方法是谁调用了它，它就开始执行，而后面的程序就必须等它执行完毕以后才能继续进行；有参数的join方法就是谁调用了它，在规定的毫秒以内无论你有没有执行完毕，只要时间一过，后面的程序就会开始执行。说白了，这是固定时间等待和永久时间等待而已。</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>现在你有一个想法，就是是否可以通过设置让某个线程优先执行呢?使用前面的join()方法尽管能完成部分要求，但还是想追求更加简单的方法。</p><p>这时候Java为线程类提供了10个优先级，优先级用整数1-10表示，超过该数字范围会抛出异常。</p><p>我们的主线程默认优先级为5，数字越大表示的优先级越高，当然你还可以使用优先级常量来进行优先级的表示：</p><ul><li>MAX_PRIORITY :线程的最高优先级10</li><li>MIN_PRIORITY :线程的最低优先级1</li><li>NORM_PRIORITY :线程的默认优先级5</li></ul><p>我们可以使用下面提供的方法来对优先级进行操作：</p><table><thead><tr><th>方法</th><th style="text-align:center">说明</th><th>备注</th></tr></thead><tbody><tr><td>public int getPriority()</td><td style="text-align:center">获取线程优先级的方法</td></tr><tr><td>public void setPriority(int newPriority)</td><td style="text-align:center">设置线程优先级的方法 </td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class MyThreadTestTwo extends Thread&#123;</span><br><span class="line">private String name;</span><br><span class="line">public MyThreadTestTwo(String name) &#123;</span><br><span class="line">this.name =name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i=0;i&lt;10;i++) &#123;</span><br><span class="line">System.out.println(&quot;线程&quot;+name+&quot;正在运行第&quot;+i+&quot;次&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class ThreadTestFive &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 获取主线程的优先级</span><br><span class="line">int mainPriority =Thread.currentThread().getPriority();</span><br><span class="line">System.out.println(&quot;主线程的优先级为：&quot;+mainPriority);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyThreadTestTwo tt1 =new MyThreadTestTwo(&quot;线程1&quot;);</span><br><span class="line">MyThreadTestTwo tt2 =new MyThreadTestTwo(&quot;线程2&quot;);</span><br><span class="line">tt1.setPriority(10);  //这与下面的代码的作用是一样的</span><br><span class="line">//tt1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">tt2.setPriority(1);</span><br><span class="line">//tt2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line"></span><br><span class="line">tt1.start();</span><br><span class="line">tt2.start();</span><br><span class="line">//System.out.println(&quot;主线程1的优先级为：&quot;+tt1.getPriority());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你多运行上面的代码，你会发现并不是优先级大的线程先启动和执行。线程的执行和启动顺序，除了和优先级大小有关，还与操作系统调度，当前资源等有很大关系，是具有很强的随机性。</p><p><strong>总结一下：</strong></p><ul><li>各个线程是通过竞争CPU时间而获得运行机会的；</li><li>各线程什么时候得到CPU时间，占用多久，都是不可预测的；</li><li>一个正在运行的线程在什么地方被暂停是不确定的。</li></ul><p>也就是说到目前为止，我们还没有更好地办法来进行线程执行顺序的调度。</p><h3 id="银行存取钱业务"><a href="#银行存取钱业务" class="headerlink" title="银行存取钱业务"></a>银行存取钱业务</h3><p>如果按照我们前面所说的线程执行顺序是随机的，而且运行的线程在什么地方被暂停是不确定的话（的确，这是真的情况），那么银行就会出现一个非常有意思的现象：你存钱和取钱的总金额会发生丢失的情况：假设你开始银行账户有2000块钱，你取了100，存进去200，余额是不是2100块，但是有可能你的余额是2000块，你的余额更新失败了。这是我们不想看到的情况，但实际上这种情况是存在的，但是银行通过一些方法，杜绝了这种事情的发送，现在我们就来看看这些方法。</p><p>为了保证在存款或取款的时候，不允许其他线程对帐户余额进行操作，银行会将操作对象进行锁定，也就是同一时刻只允许一个线程进行运行。</p><p>也其实就是使用了synchronized关键字，也就是线程同步。synchronized关键字可以用在：成员方法，静态方法和语句块里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void Test()&#123;&#125;</span><br><span class="line">public static synchronized void Test()&#123;&#125;</span><br><span class="line">synchronized(obj)&#123;......&#125;</span><br></pre></td></tr></table></figure><p>使用关键字synchronized可以确保共享对象在同一时刻只能被一个线程访问，这种机制称为线程同步或者线程互斥。</p><h2 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h2><p>线程间通信的常用方法：</p><ul><li>wait方法：中断方法的执行，使线程等待。</li><li>notify()方法: 唤醒处于等待的某一个线程,使其结束等待</li><li>notifyAll()方法: 唤醒所有处于等待的线程,使它们结束等待</li></ul><p>建议使用notifyAll()，因为假如唤醒的单个线程还是我们刚休眠的生产线程，那么就会继续死锁，所以建议直接所有的等待线程。</p><p><a href="https://www.cnblogs.com/IUbanana/p/7067362.html" target="_blank" rel="noopener">详细介绍Java虚拟机（JVM）</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（五）：异常和字符串</title>
      <link href="/2018/08/03/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/08/03/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>异常是非常重要的，本来打算写完三大特性之后就不再写的，但是呢，我觉得还是把异常，字符串，包装类，集合，多线程，输入输出流给说完吧，这也会让我对这些知识有一个更加清楚的认识。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常:我们也称之为意外或者例外，它本质上就是程序上的错误。那么什么是错误呢？</p><p>错误如果用定义来说，我可能说不清楚。但是在我们编写程序的过程中，错误是会经常发生的，通常会发生在编译期间和运行期间。（这也就是编译型语言和解释型语言的一个非常大的不同，编译型语言会多一个编译过程，所以出错误的概率就相对低很多）</p><p>常见的编译错误包括：括号没有正常的配对; 语句结束后少写了分号;关键字拼写错误，通常这种错误编译器会帮助我们进行检查，但是运行期间的错误，编译器就无能为力了，只能靠程序员自己了。</p><p>常见的运行时错误有：使用空的对象引用调用方法；数组访问时下标越界；算术运算时除数为0；类型转换时无法正常转换等。这些错误在编译时是没有错误提示的，只能靠自己把握了。</p><p>在程序运行过程中，意外发生的情况，背离我们程序本身的意图的表现，都可以理解为异常。</p><h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><p>异常可以理解为一种事件，它的发生会影响正常的程序运行流程。在Java中你可以通过Throwable来进行各种异常信息的描述。</p><p>Throwable是根类，它具有2个子类：Error和Exception。</p><p>Error：程序无法处理的错误，表示运行应用程序中较严重问题。通常是Java虚拟机问题(比如虚拟机错误：VirtualMachineError；内存溢出：OutOfMemoryError；线程死锁 ：ThreadDeath等)；它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p><p>对于设计合理的应用程序来说,即使确实发生了错误,本质上也不应该试图去处理它所引起的异常状况。</p><p>Exception是程序本身可以处理的异常，我们通常所说的异常处理就是处理这种类型的异常。</p><p>Exception又可以分为两大类:：非检查异常(Unchecked Exception)和检查异常(Checked Exception)</p><p>非检查异常：它是编译器不要求强制处置的异常，通常包括：RuntimeException（运行时异常）以及它的子类:：NullPointerException（空指针异常）；ArrayIndexOutOfBoundsException（数组下标越界异常 ）；ArithmeticException（算数异常）和ClassCastException（类型转换异常）等。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bd8351144bfe45ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>java程序在编译阶段是不会去检查上面这些RuntimeException（运行时异常）异常的。</p><p>而检查异常则是编译器要求必须处置的异常，比如: IO异常 IOException; SQL异常 SQLException等。</p><h3 id="异常处理分类"><a href="#异常处理分类" class="headerlink" title="异常处理分类"></a>异常处理分类</h3><p>在Java应用程序中,异常处理机制为: 抛出异常和捕捉异常。异常必须要先被抛出，然后才能被捕获。</p><p>所谓抛出异常，它是指当一个方法当中出现异常，方法会去创建异常对象，并去交付给运行时系统来进行处理。</p><p>异常对象则是异常类型以及异常出现时的程序状态。</p><p>当程序运行时系统捕捉到这个异常，此时会去寻找合适的处理器，如果找到了，就会执行处理器的相关逻辑；如果始终没找到，程序就会终止运行。</p><p>对于运行时异常、错误或可查异常，Java技术所要求的异常处理方式有所不同。</p><p>在Java中规定: 对于可查异常（检查异常(Checked Exception)）必须捕捉或者声明抛出；同时允许忽略不可查的RuntimeException(含子类)和Error(含子类)。</p><p>那么在java中，如何抛出异常和捕获异常呢？可以通过5个关键字来实现:：try catch finally throw throws。</p><p>try：将执行可能会产生异常的代码放在try里面；</p><p>catch：用来捕获异常；</p><p>finally：无论是否发生异常，finally里面的代码总能执行</p><p>try…catch…finally是一组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">          //代码段1</span><br><span class="line">          //产生异常的代码段2</span><br><span class="line">        &#125;catch (异常类型 ex) &#123;</span><br><span class="line">          //对异常进行处理的代码段3</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">          //代码段4</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>try代码块后可接零个或多个catch代码块，但是如果没有catch块，那么必须跟一个finally块。说白了就是try要和catch或finally组合使用，不能单独使用。你知道的，如果没产生异常的代码，你捕获什么？</p><p>如果有多个catch，记住要使用Exception放在最后一个，因为这个里面包含所有的你目前还未发现的异常。多个catch异常捕获的范围要满足自上而下，逐次增大的原则，否则小范围的异常会被大范围的覆盖哦。</p><p>一般情况下，finally里面的代码都会运行，但有时候你想提前停止代码运行，可以使用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.exit(1);</span><br></pre></td></tr></table></figure></p><p>里面的状态码0代表正常退出,非0代表非正常退出（这里用了1代表，终止当前虚拟机的运行，使得程序无条件停止运行）。</p><p>也就是说，如果程序按照正常逻辑执行需要退出时，可以调用System.exit(0)。如果发生异常而退出，比如在catch块使用，那么会调用System.exit(1)。</p><h3 id="return关键字在异常处理中的作用"><a href="#return关键字在异常处理中的作用" class="headerlink" title="return关键字在异常处理中的作用"></a>return关键字在异常处理中的作用</h3><p>我们只需要记住一点：不管前面有多少个return，只要finally中有return，那么最终返回的就是finally中return的返回值。（前面的return则是按照异常捕获的顺序来返回）</p><h3 id="使用throws声明异常类型"><a href="#使用throws声明异常类型" class="headerlink" title="使用throws声明异常类型"></a>使用throws声明异常类型</h3><p><strong>throws：自动抛出异常类型，一次抛出很多个（多个之间用逗号隔开），在方法定义的时候被使用</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws Exception1,Exception2,...,ExceptionN &#123;</span><br><span class="line">    //可能产生异常的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说，如果一个方法可能会出现异常，但没有能力处理这种异常，那么我们就可以在方法声明的时候使用throws来声明抛出异常。</p><p>举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static int test() throws ArithmeticException &#123;  //声明可能会引发的异常，这里只声明异常，不去处理，谁调用谁处理</span><br><span class="line">System.out.println(&quot;====运算开始====&quot;);</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">System.out.print(&quot;请输入第一个数字: &quot;);</span><br><span class="line">int one = scanner.nextInt();</span><br><span class="line">System.out.print(&quot;请输入第二个数字: &quot;);</span><br><span class="line">int two = scanner.nextInt();</span><br><span class="line">System.out.println(&quot;====运算结束====&quot;);</span><br><span class="line">return one / two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们调用的时候来进行异常处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">int result = test();</span><br><span class="line">System.out.println(&quot;one和two的商是：&quot; + result);</span><br><span class="line">&#125; catch (ArithmeticException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(&quot;除数不能为0&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意你可以在throws声明异常的时候，尽量多考虑一些情况，然后可以在调用的时候利用surround with来进行异常的快速生成处理，这里快速生成的异常类型和你在throws抛出的类型一致。</p><p>当然，你完全可以直接抛出Exception，那样调用的时候处理就只需要直接处理Exception这个了。</p><p>还需要注意的一点就是，当throws后面直接跟Exception的时候，编译器会提示你当前方法可能会产生异常，因为Exception这个父类包含了出现检查异常的情况。但是如果你不是Exception，而是前面所列举的非检查异常，那么编译器就不会给你报错的。</p><p>说明白编译器只会对检查异常进行报错处理，但是对于非检查异常是不进行报错处理的。如果非要有一种对于非检查异常类似的报错处理，你可以使用文档注释来达到这个目的，但是报错处理不是编译器完成的，而是程序员自己发现的。</p><h3 id="使用throw手动抛出异常"><a href="#使用throw手动抛出异常" class="headerlink" title="使用throw手动抛出异常"></a>使用throw手动抛出异常</h3><p><strong>throw：手动抛出异常，一次只能抛出一个异常，在方法体内被使用</strong>：<br>throw用来抛出一个异常，如: throw new IOException()；而且throw抛出的只能是可Throwable类或者其子类的实例对象，不能是自己定义的，如: throw new String(“出错啦”)，这种明显就是错误的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void method()&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    //代码段1</span><br><span class="line">  throw new 异常类型();</span><br><span class="line">  &#125; catch(异常类型 e)&#123;</span><br><span class="line">    //对异常进行处理的代码段2</span><br><span class="line">  &#125;</span><br><span class="line">finally&#123;</span><br><span class="line">// 需要执行的代码段3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你还可以，在抛出异常的地方通过throws关键字来标明异常的类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void method() throws 异常类型&#123;</span><br><span class="line">  //代码段1</span><br><span class="line">    throw new 异常类型();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：<br>1、通过try..catch包含throw语句，自己抛出异常，自己处理异常；<br>2.、通过throws在方法声明出抛出异常类型，谁调用谁处理，调用者可以自己处理，也可以继续上抛，此时可以抛出与throw对象相同的类型或者其父类（但是不能是其子类）。</p><p>你可以通过throws声明将要抛出何种类型的异常，并通过throw将产生的异常进行抛出。</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>尽管我们使用Java内置的异常类可以描述在编程时出现的大部分异常情况，但是还是有一些情况我们难以处理，这时候我们可以自定义异常，用来描述特定情况下产生的异常类型。</p><p>所谓自定义异常，说白了就是定义一个类，去继承Throwable类或者它的子类。然后其他的就和我们前面说过的一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class CarTest extends Exception &#123;</span><br><span class="line">public CarTest() &#123;</span><br><span class="line">super(&quot;18岁以下，70岁以上的人不允许报考驾照&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testAge() throws CarTest&#123;</span><br><span class="line">System.out.println(&quot;请输入你的年龄：&quot;);</span><br><span class="line">Scanner input = new Scanner(System.in);</span><br><span class="line">int age = input.nextInt();</span><br><span class="line">if (age &lt; 18 || age &gt; 70) &#123;</span><br><span class="line">throw new CarTest();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;欢迎报考驾校&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testAge();</span><br><span class="line">&#125; catch (CarTeste) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">System.out.println(&quot;驾校前台人员不得办理相关业务&quot;);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;catch(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>这个顾名思义就是一系列的异常，前面捕获到了异常自己不处理而是向后面抛出，从而形成异常链。</p><p>为了更好的说明，我找了一个例子，大家可以看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class TryDemoFive &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testone() throws HotelAgeTest &#123;</span><br><span class="line">throw new HotelAgeTest();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testthree();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，testone手动抛出了一个异常，但是没有处理，而是向后抛出，testtwo虽然进行了处理，但是又抛出了一个新的异常，testthree也是这样，之后最后的main方法里对testthree的异常进行了处理，并且进行了输出。</p><p>所以这段代码的运行结果就是下面的结果，只打印输出了testthree的信息，其他却没有，实际上这就造成了前面异常信息的丢失：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: 我是新产生的异常2</span><br><span class="line">at JavaExceptionTest.TryDemoFive.testthree(TryDemoFive.java:23)</span><br><span class="line">at JavaExceptionTest.TryDemoFive.main(TryDemoFive.java:29)</span><br></pre></td></tr></table></figure></p><p>那么如何解决这种异常的丢失呢？从而让异常链的情况为我们所知呢，你可以在构造方法中添加上一层异常e或者使用initCause(e)就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void testtwo() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testone();</span><br><span class="line">&#125; catch (HotelAgeTest e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">throw new Exception(&quot;我是新产生的异常1&quot;,e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static void testthree() throws Exception &#123;</span><br><span class="line">try &#123;</span><br><span class="line">testtwo();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">//throw new Exception(&quot;我是新产生的异常2&quot;,e);</span><br><span class="line">Exception e1 =new Exception(&quot;我是新产生的异常2&quot;);</span><br><span class="line">e1.initCause(e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>也就是说，异常链将异常发生的原因一个传一个串起来，把底层的异常信息传给上层，这样逐层抛出。</p><h2 id="异常总结"><a href="#异常总结" class="headerlink" title="异常总结"></a>异常总结</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7ec06da956208712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在Java中, 通过Throwable及其子类描述各种不同的异常类型。其中这个Error是我们无法预测的，但是Exception却是我们可以避免的。Exception又分为2类，一个是运行时异常（非检查异常），这种编译器是不会给你报错的，另一种异常是则是编译器强制你去处理的异常。</p><p>几点建议：<br>1、处理运行时异常时,采用逻辑去合理规避同时辅助try-catch处理；<br>2、在多重catch块后面,可以加一个catch(Exception)来处理可能会被遗漏的异常；<br>3、对于不确定的代码,也可以加上try-catch ,处理潜在的异常；<br>4、尽量去处理异常,切忌只是简单的调用printStackTrace()去打印输出；<br>5、具体如何处理异常,要根据不同的业务需求和异常类型去决定；<br>6、尽量添加finally语句块去释放占用的资源，如关闭文件和数据库连接等。</p><p><strong>最后一点：当子类重写父类抛出异常的方法时,声明的异常必须是父类方法所声明异常的同类或子类。</strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>创建字符串的3种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 =&quot;hello world&quot;;</span><br><span class="line">String str2 =new String();</span><br><span class="line">String str3 =new String(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure></p><p>字符串的常用方法及说明：<br>返回类型| 方法| 说明</p><ul><li>| :-: | -:<br>int |  length() |     返回当前字符串的长度<br>int  | indexOf(int ch)     | 查找ch字符在该字符串中第一次出现的位置<br>int |  indexOf(String str)     | 查找str子字符串在该字符串中第一次出现的位置<br>int |  lastIndexOf(int ch)     | 查找ch字符在该字符串中最后一次出现的位置<br>int  | lastIndexOf(String str) |     查找str子字符串在该字符串中最后一次出现的位置<br>String  | substring(int beginIndex) | 获取从beginIndex位置开始到结束的子字符串<br>String  | substring(int beginIndex, int endIndex)     | 获取从beginIndex位置开始到endIndex位置的子字符串<br>String  | trim()     | 返回去除了前后空格的字符串<br>boolean  | equals(Object obj)     | 将该字符串与指定对象比较，返回true或false<br>String  | toLowerCase() |     将字符串转换为小写<br>String  | toUpperCase()     | 将字符串转换为大写<br>char |  charAt(int index) |     获取字符串中指定位置的字符<br>String [] |  split(String regex, int limit)     | 将字符串分割为子字符串，返回字符串数组<br>byte []  | getBytes()     | 将该字符串转换为byte数组</li></ul><h3 id="运算符与equals方法的区别"><a href="#运算符与equals方法的区别" class="headerlink" title="==运算符与equals方法的区别"></a>==运算符与equals方法的区别</h3><p>我们在前面也说过，==运算符比较的是对象在内存中的引用地址，而equals方法的用法就需要分情况了，如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因为这里谈的是字符串，因此可以说equals比较的是字符串的值是否相等。</p><p>内存空间：栈存放的是类的引用，常量池存放的是字符串常量，而堆里存放的则是通过new创建的字符串对象（在这里是这样的，我们这里只谈字符串）</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>String和StringBuilder的区别:：String是不可变的，而StringBuilder则是可变的，因此当频繁操作字符串时，建议使用StringBuilder。</p><p>有人就要问了，不是还有一个StringBuffer么，那这个跟前面的有啥区别么？其实StringBuilder和StringBuffer二者基本上是一样的，但是StringBuffer是线程安全的,，而StringBuilder则不是，因此也正是因为这样，所以StringBuilder性能略高一点。因为字符串处理一般都是单线程，所以我们使用StringBulider就行了。</p><p>StringBuilder常用方法<br>append()：在末尾增加内容；<br>delete()：删除内容；<br>insert()：插入内容；<br>length()：返回字符串长度；<br>replace()：替换内容。<br>这些方法和Python中的容器操作是很相似的，这里就不再举例说明了。</p><p>后面的内容等我有空再更新了，这次就说到这里，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（四）：单例模式和多态</title>
      <link href="/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%A4%9A%E6%80%81/"/>
      <url>/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>好吧，今天一定要把面向对象的最后一个特性：多态，给说完。不过我们先来聊一聊设计模式，因为它很重要。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>官方的解释是，设计模式是：一套被反复使用，多数人知晓的，经过分类编目，代码设计经验的总结。说人话就是：软件开发人员在软件开发过程中面临的一般问题的解决方案。</p><p>常见的设计模式可以参看这张图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2a714e288d048e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们可以对其按照作用来进行分类:：<br>关注对象创建过程的：<strong>创建型模式</strong>；<br>类和对象组合：<strong>结构型模式</strong>；<br>对象之间的通信过程：<strong>行为型模式</strong>；</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8f3d74b6c145ed8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式: 一个类<strong>有且仅有</strong>一个实例,并且自行实例化向整个系统提供，它的目的就是使得类的一个对象成为该类系统中的唯一实例。</p><p>要点：</p><ol><li>某个类只能有一个实例;；</li><li>必须自行创建实例；<ol start="3"><li>必须自行向整个系统提供这个实例；</li></ol></li></ol><p>实现：<br>1、只提供<strong>私有</strong>的构造方法；<br>2、只含有一个该类的<strong>静态私有</strong>对象；<br>3、提供一个<strong>静态</strong>的<strong>公有方法</strong>用于创建、获取静态私有对象。</p><p>对于1的理解：private是访问限制能力最强的修饰符，只能在当前类内被使用。也就是说经过private修饰，该类的对象在类外无法通过new关键字直接实例化，这样可以做到限制类实例化产生；</p><p>对于2的理解：1可以实现有且仅有一个实例，static修饰的静态成员可以满足该类有且仅有一个，所有的对象都共享这一个静态成员；</p><p>对于3的理解：类似于封装，必须向外部系统提供唯一的公有访问方法。</p><p>在java中实现单例模式有2种方式：饿汉式和懒汉式。</p><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）如此看来确实挺饿的；</p><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）如此看来确实挺懒的。</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p><strong>饿汉式</strong>：在类中私有对象创建的过程中立刻进行实例化操作（言外之意，不管你用不用，我先把这个给做了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">// 饿汉式：创建对象实例的时候直接初始化；（空间换时间）</span><br><span class="line"></span><br><span class="line">public class SingletonOne &#123;</span><br><span class="line"></span><br><span class="line">//1、创建类中私有的构造方法</span><br><span class="line">private SingletonOne() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//2、创建该类型的私有静态实例</span><br><span class="line">private static SingletonOne instance = new SingletonOne();</span><br><span class="line"></span><br><span class="line">//3、创建公有的静态方法，返回静态实例对象</span><br><span class="line">public static SingletonOne getinstance() &#123;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleOneTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonOne one =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonOne two =SingletonOne.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one==two);   //输出结果为true</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p><strong>懒汉式</strong>:：对象创建时并不立刻进行实例化操作，而是在静态公有方法中进行实例化操作（言外之意，你不需要我就不做）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line">//懒汉式：创建对象实例的时候并不初始化；（时间换空间）</span><br><span class="line"></span><br><span class="line">public class SingletonTwo &#123;</span><br><span class="line">// 1、创建类中私有的构造方法</span><br><span class="line">private SingletonTwo() &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 2、创建静态的该类实例对象</span><br><span class="line">private static SingletonTwo instance = null;</span><br><span class="line"></span><br><span class="line">// 3、创建公有的静态方法，提供实例对象</span><br><span class="line">public static SingletonTwo getinstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">instance = new SingletonTwo();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的测试代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package SingleExample;</span><br><span class="line"></span><br><span class="line">public class SingleTwoTest &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">SingletonTwo one = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">SingletonTwo two = SingletonTwo.getinstance();</span><br><span class="line"></span><br><span class="line">System.out.println(one == two);   //输出结果为true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="单例模式两种实现总结"><a href="#单例模式两种实现总结" class="headerlink" title="单例模式两种实现总结"></a>单例模式两种实现总结</h3><p>饿汉式在类加载时就创建实例，第一次加载速度快；<br>懒汉式在第一次使用时才进行实例化，第一次加载速度慢；</p><p>饿汉式：空间换时间<br>懒汉式：时间换空间</p><p>饿汉式，类在加载时进行了对象的实例化创建，即使多个进程进行并发操作，访问的实例也是唯一的，饿汉式线程安全。</p><p>懒汉式，第一次使用才会实例化，多个线程并发操作时，由于时间片的切换，可能导致线程风险。</p><p>但是懒汉式的线程危险是可以规避的，通过关键字Synchronized实现线程的锁定，也可以通过静态内部类和枚举保证操作时的线程唯一。</p><h3 id="单例模式优缺点及使用场景"><a href="#单例模式优缺点及使用场景" class="headerlink" title="单例模式优缺点及使用场景"></a>单例模式优缺点及使用场景</h3><p>单例模式的优点：<br>1、在内存中只有一个对象,节省内存空间；<br>2、避免频繁的创建销毁对象, 提高性能；<br>3、避免对共享资源的多重占用。</p><p>单例模式的缺点:<br>1、扩展比较困难；<br>2、如果实例化后的对象长期不利用,系统将默认为垃圾进行回收,造成对象状态丢失。</p><p>使用场景:<br>1、创建对象时占用资源过多,但同时又需要用到该类对象；<br>2、对系统内资源要求统一读写,如读写配置信息；<br>3、当多个实例存在可能引起程序逻辑错误,如号码生成器；</p><p>每一种设计模式都是针对场景，针对某种具体问题的，具体场景应当进行具体分析，选用合适的设计模式。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>终于开始进入多态的世界了，在这里你将全面了解多态的特点及使用。</p><p>多态你可以理解为不同类的对象对同一消息做出不同的响应。</p><p>一般而言，多态分为编译时多态和运行时多态这两种。</p><p>编译时多态：也称设计时多态，它是通过方法重载来实现的，编译器在编译状态可以进行不同行为的区分。</p><p>而运行时多态，则必须要求程序运行时，动态决定调用哪个方法。</p><p>我们通常在Java中的多态指的就是运行时多态。</p><p>实现多态的必要条件: 满足继承；父类引用指向子类对象</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>所谓的向上转型也指隐式转型（自动转型）。说通俗一点就是父类引用指向子类实例，它可以调用子类重写父类的方法以及父类派生的方法，但是无法调用子类特有方法。</p><p>举个例子，假如Dog这个类继承了我们Animal这个类，我们不仅可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dog dog =new Dog();</span><br><span class="line">Animal animal =new Animal();</span><br></pre></td></tr></table></figure></p><p>你还可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal dog2 =new Dog();</span><br></pre></td></tr></table></figure></p><p>这就是将一个子类对象转型为一个父类对象，这个很好理解，对吧。</p><p>接下来我们来说一下，向下转型，顾名思义就是和向上转型相反的操作了，是的，你很聪明。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>向下转型也称强制类型转换。它是子类引用指向父类实例，我们在之前就用过了，还记得我们在重写Object类的equals方法时，就将父类Object强制转换，然后才调用子类特有的方法。</p><p>向下转型并不是可以随便转换的，需要满足一定的转换条件。我们可以通过instanceof这个运算符来判断是否能进行强制类型转换。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ca1a5995341c12b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>通过上面的图片，我们可以很清楚的知道instanceof的作用就是判断左边对象是否是右边这个类的实例，如果是就返true，否则就返回false。</p><p>因此，我们在进行向下转型的时候，可以用instanceof来判断一个对象是否满足某个类的实例特征。满足，我们才进行类型转换，否则强制转换会报错。</p><p>总结一下：<br>向上转型: 父类引用指向子类对象。即小变大。</p><p>向下转型: 子类引用指向父类对象。即大变小。</p><p>需要注意的是：父类中static修饰的方法允许被子类使用，但是不允许被子类重写，所以向上转型之后，只能调用到父类原有的静态方法。如果此时要用子类中的，只能通过向下转型来实现。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法，这样我们的抽象类就派上用场了。</p><p>抽象类可以避免子类设计的随意性，还可以避免父类无意义的实例化。</p><p>你只需知道，修饰抽象类要用abstract这个关键词，抽象类不可以直接被实例化。</p><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>我们前面说过，父类只是规定子类拥有该项能力，但在父类中具体实现它是没有任何意义的，因此该方法应设置为抽象方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract void test();</span><br></pre></td></tr></table></figure></p><p>你记住，抽象方法是不允许有方法体的，也就是不能有花括号。而且此时子类<strong>必须</strong>实现父类的抽象方法，如果你不实现，那么这个类就必须被设置为抽象类（不设置就会报错），然后由继承它的类去具体实现相应的方法。简单来说就是一句话：抽象方法中不允许包含方法体，子类需要重写父类的抽象方法。</p><p>一般抽象类适用于这种情况：1、父类中的实现没有意义；2、提醒子类必须要去自己实现自己的这个方法。</p><p>通常子类变多了之后，你新建一个类只要继承了抽象的父类，IDE会自动提醒你实现父类中的抽象方法的，你不实现就会报错。</p><h3 id="抽象类和抽象方法的使用"><a href="#抽象类和抽象方法的使用" class="headerlink" title="抽象类和抽象方法的使用"></a>抽象类和抽象方法的使用</h3><p>你可以使用abstract关键词来定义抽象类，抽象类不能被直接实例化，你可以通过向上转型完成对象实例，只能被继承。</p><p>abstract关键词定义抽象方法 ，你不需要具体实现也不能具体实现，也就是花括号不能有。</p><p>需要注意的是：抽象类可以没有抽象方法，但包含抽象方法的类一定是抽象类。</p><p>我们前面说过，当一个类继承抽象类，必须实现类中的抽象方法。如果不重写，则必须将该子类也变为抽象类，由其子类来实现，否则会报错。</p><p><strong>注意：static final private 不可以和abstract同时出现</strong>（因为抽象方法是要在子类中进行重写的，而private只能在当前类被访问，final方法不允许被子类重写，static静态不允许被子类重写。）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（三）：继承和访问修饰符</title>
      <link href="/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2018/08/02/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>今天乘着还有一些时间，把上次拖欠的面向对象编程三大特性中遗留的继承和多态给简单说明一下。这一部分还是非常重要的，需要仔细思考。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承：它是一种类与类之间的关系，通过使用已存在的类作为基础来建立新类。其中已存在的类称为父类(或基类); 建立的新类称为子类(或派生类)。简单的就是子类继承父类的非私有属性和方法。</p><p>需要注意的是，新定义的类可以选择继续使用父类的功能或者自己增加新的数据或新的功能，但<strong>不能选择性地继承父类</strong>。（要么继承所有（前提是非私有），要么就不继承）</p><p>只要能满足 “A is a B”的关系就可以形成继承关系，代码中是通过 extends 关键字来实现继承的。</p><p>特别注意：在java中只能继承一个父类(也就是单继承)，而且子类可以访问父类的非私有成员。这个和Python不一样，Python的继承可就灵活了。</p><p>我们知道子类继承了父类之后，可以访问父类的非私有成员；但是父类的私有成员，子类还是无法直接访问。如果我们想访问呢？可以通过父类暴露的公有方法来实现间接访问。</p><p>父类对象不可以访问到子类特有的方法或属性，同时父类不可以访问子类特有成员（那怕是公有的成员）</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>方法重载必须同时满足以下条件: </p><ol><li>同一个类中;；</li><li>方法名相同，参数列表不同(参数顺序、个数、类型)；</li><li>方法返回值、访问修饰符任意；</li><li>与方法的参数名无关。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void printinfo() &#123;</span><br><span class="line">System.out.println(&quot;方法重载1&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public void printinfo(String name) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;方法重载2&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String name, int age) &#123;</span><br><span class="line">return &quot;方法重载3&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(String age, String name) &#123;</span><br><span class="line">return &quot;方法重载4&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public String printinfo(int age, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> // 与方法的参数名无关,加上下面的代码会和上面的 printinfo(int age, String name)造成重复而报错：</span><br><span class="line">public String printinfo(int size, String name) &#123;</span><br><span class="line">return &quot;方法重载5&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>方法重写也必须同时满足以下条件:<br>1、在满足继承关系的子类中；<br>2、方法名相同，参数列表相同(参数顺序、个数、类型)；<br>3、方法返回值相同或者是子类类型（但不允许是Object类型，可以向下兼容，向上是不可以的）；<br>4、访问修饰符的限定范围大于等于父类方法。</p><p>注意：在子类中是可以定义与父类重名的属性的，但这并不说明属性是可以重写的。</p><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>在Java里面一共包含4种访问修饰符，分别是：<br>1、private：私有的；<br>2、默认；<br>3、protected：受保护的；<br>4、public：公共的。</p><p>其中，<strong>private</strong>:只允许在本类范围中进行访问，离开了当前类就不允许访问；</p><p><strong>默认</strong>: 允许在当前类，同包子类/非子类都可调用，跨包子类/非子类都不允许；</p><p><strong>protected</strong>:允许在当前类，同包中的子类/非子类都可以以及跨包子类调用。跨包的非子类不允许调用。</p><p><strong>public</strong>:允许在任意位置访问。</p><p>按照前面的顺序，自上而下，访问范围越来越大；自下而上，限制能力越来越强：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4bd5c8b69ee574fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>（同包包括同包子类与非子类；子类包括同包子类和跨包子类）</p><h2 id="访问修饰符对方法重写的影响"><a href="#访问修饰符对方法重写的影响" class="headerlink" title="访问修饰符对方法重写的影响"></a>访问修饰符对方法重写的影响</h2><p>子类重写父类方法时，访问修饰符是允许改变的，要求是: 子类的访问范围必须大于等于父类的访问范围。也就是说如果父类访问修饰符是public，那么子类的访问修饰符也必须是public，其他的类似。</p><h2 id="继承的初始化顺序"><a href="#继承的初始化顺序" class="headerlink" title="继承的初始化顺序"></a>继承的初始化顺序</h2><p>继承后的初始化顺序如下：</p><p>父类静态成员 -&gt; 子类静态成员 -&gt; 父类对象的构造 -&gt; 子类对象的构造</p><p><strong>一个问题:</strong> 访问修饰符影响成员加载顺序?静态成员优先于静态代码块执行?</p><p>访问修饰符不影响成员加载顺序,跟书写位置有关。如果把静态代码块写在静态变量的前面，那么先执行静态代码块。</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>如果子类继承并重写了父类的方法，那么我们通常调用的就是重写后的子类方法。如果需要调用父类的方法，我们可以使用<code>super.方法</code>来达到这个目的。</p><p>当然也可以使用<code>super.属性</code>来达到访问父类的非私有属性的目的。</p><p><strong>尽管父类的构造方法的访问修饰符是public，但是它却不可以被子类继承和重写的。</strong></p><p>虽然它两个不可以，但是它的存在却是非常必要的，因为子类对象的实例化要依赖于父类对象的构造方法(默认，无参或有参的构造方法)。</p><p>如果子类调用了自己有参的构造方法，而父类定义了有参和无参的构造方法，程序依然是调用父类无参的构造方法。也就是说，我们在子类的构造方法中没有显式标注的情况下，默认调用父类的无参构造方法，因此父类的无参构造方法很重要，一定要写，否则会影响子类的对象实例化。</p><p>如果子类构造方法中既没有显式标注,且父类中没有无参的构造方法,则引发编译错误。</p><p>我们可以使用<code>super(参数)</code>这种形式来调用父类允许被访问的其他构造方法，但是此时super()必须放在子类构造方法有效代码的第一行（必须是子类的构造方法（其他方法不行）的第一行（其他行不行））。</p><p>也就是说父类在实例化的时候会默认调用无参的构造方法（此时你不定义无参的构造方法是可以的），但是如果子类在实例化对象的时候没有显示标志（也就是会默认调用父类无参的构造方法），而此时父类其实是不存在无参的构造方法，所以会引发编译错误。</p><h2 id="this和super的对比"><a href="#this和super的对比" class="headerlink" title="this和super的对比"></a>this和super的对比</h2><p><strong>this:</strong>当前类对象的引用：<br>1、访问当前类的成员方法；<br>2、访问当前类的成员属性；<br>3、访问当前类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>super:</strong>父类对象的引用：<br>1、访问父类的成员方法；<br>2、访问父类的成员属性；<br>3、访问父类的构造方法；<br>4、不能在静态方法中使用；</p><hr><p><strong>注意：在调用构造方法时，this和super不能同时存在（前面说过两者都要求在第一行）。</strong></p><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是所有类的父类，这个其实和Python中差不多，在Python里面也是所有的类都继承于object这个基类。点这直接查看api：<a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">javase8api</a></p><p>一个类没有使用extends关键字明确标识继承关系,则默认继承Object类(包括数组)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class Object is the root of the class hierarchy.</span><br><span class="line">Every class has Object as a superclass. </span><br><span class="line">All objects, including arrays, implement the methods of this class.</span><br></pre></td></tr></table></figure></p><p>Object类存放于java.lang包中，这个包系统默认会为我们直接加载。</p><h3 id="equals用法"><a href="#equals用法" class="headerlink" title="equals用法"></a>equals用法</h3><p>如果子类没有重写Object类的equals方法，那么比较的是两个引用是否指向同一个地址；而String类则重写了Object类的equals方法，所以比较的是字符串的值是否相等。（言外之意，子类可以通过重写equals方法的形式，改变比较的内容）</p><p>因此我们不能这样说equals比较的两个对象的值，或者引用地址，但是我们却可以说”==”比较的却一定是两个对象的引用地址。</p><h3 id="toString用法"><a href="#toString用法" class="headerlink" title="toString用法"></a>toString用法</h3><p>api告诉我们，toString最后返回的是下面这种形式：（包名.类名@内存中的哈希码）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure></p><p>同样的，子类如果没有重写Object类的toString方法，那么则会打印输出其在内存中的哈希码；而String类则重写了Object类的toString方法，所以打印输出其真实值。（言外之意，子类可以通过重写toString方法的形式，改变输出的内容）</p><p>还要说明的一点就是输出<code>对象</code>和<code>对象.toString</code>的效果是一样的，因为直接输出对象的时候其实是调用了对象.toString方法。</p><h2 id="Final关键字"><a href="#Final关键字" class="headerlink" title="Final关键字"></a>Final关键字</h2><p>当我们不希望某些类被继承，某些方法被重写或者某些数据被修改时，可以使用final关键字来实现这个目的。</p><p>如果某个类被final修饰，则表明该类不可以被继承，该类没有子类，public final class/final public class都可以，只要是放在class的前面就可以；</p><p>如果某个方法被final修饰，则表明该方法不可以被重写，但是并不影响子类去继承调用它（final不可以修饰构造方法）。</p><p>如果某个局部变量被final修饰，那么我们可以不用在声明的同时立马进行赋值，但是必须在使用之前进行赋值，一旦赋值就不能被修改；</p><p>（方法内的局部变量的作用范围，从该行开始到所在大括号结束；而类的成员变量的作用范围取决于它前面的访问修饰符）；</p><p>如果某个成员变量被final修饰，我们同样不需要声明的同时进行立马赋值，但是必须在使用之前进行赋值，而且只能在构造方法或者类代码块(构造代码块)中进行赋值，一旦赋值就不能被修改；也就是说类中成员属性的赋值可以有三种方式： 1. 定义是直接初始化； 2. 构造方法; 3. 构造代码块（类代码块）。</p><p><strong>注意: 当具有多个构造方法时，final关键字修饰的成员变量如果选择了在构造方法里面进行赋值，那么就需要在所有的构造方法里面进行赋值，但是不同构造方法是可以赋不同值的</strong></p><h2 id="final对数据类型的影响"><a href="#final对数据类型的影响" class="headerlink" title="final对数据类型的影响"></a>final对数据类型的影响</h2><p>我们知道java 数据类型分为基本数据类型（byte,short,int,long,float,double,char,boolean） 和 引用数据类型(array,String,interface,自定义的类…)</p><p>基本数据类型是可以直接进行赋值的，而引用类型需要实例化该类的对象，然后才能给其对象进行赋值（String这个比较特殊，两种形式都是可以的）</p><p>我们知道基本数据类型在内存中存放的是数据本身，而引用数据类型在内存中存放的则是对象的引用地址。</p><p>下面的例子告诉我们，被final修饰的对象不可以修改它的引用地址，但是属性却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final Test test=new Test(&quot;hello&quot;);</span><br><span class="line">//test=new Test ();</span><br><span class="line">Test.key=&quot;world&quot;;</span><br></pre></td></tr></table></figure></p><p>总结一下就是：基本数据类型的变量其一旦被赋初值，就无法进行修改；而引用类型的变量只是在初始化之后不能再指向另一个对象，但是对象的内容却是可变的。</p><p>因此final可配合static使用，用来修饰方法和变量。通常是用于修饰配置信息等(因为这类信息只需要加载一次，而且后面不需要被修改)。言外之意，使用final修饰可以提高性能，但会降低可扩展性。</p><h3 id="普通代码块，类代码块，构造代码块，静态代码块区别"><a href="#普通代码块，类代码块，构造代码块，静态代码块区别" class="headerlink" title="普通代码块，类代码块，构造代码块，静态代码块区别"></a>普通代码块，类代码块，构造代码块，静态代码块区别</h3><p>代码块都是一对大括号{}所括起来的内容。</p><p>普通代码块就是一对大括号{}所括起来的内容，只存在于类的方法之中；</p><p>类代码块和构造代码块是一个东西，就是直接在类中进行定义的，前面没有static进行修饰。构造代码块在创建对象时被调用，每次创建对象都会被调用，并且构造代码块的执行次序优先于类的构造方法。</p><p>静态代码块前面有static关键字进行修饰，它不能存在于任何方法体内，也不能直接访问实例变量和实例方法，需要通过类的实例对象来访问。</p><p>通常我们new一个对象，JVM要经过这样的初始化顺序：父类静态块&gt;子类静态块&gt;父类属性&gt;父类构造器&gt;子类属性&gt;子类构造器，这一系列的工作会消耗大量的内存和cpu。 </p><p>具体的研究可以参看这里：<a href="https://www.jb51.net/article/129990.htm" target="_blank" rel="noopener">详解java中的四种代码块</a>。</p><h2 id="java中的注解"><a href="#java中的注解" class="headerlink" title="java中的注解"></a>java中的注解</h2><p>注解是JDK1.5版本引入的一个特性, 它可以声明在包、类、属性、方法、局部变量、方法参数等前面，作用就是对这些元素进行说明、注释。</p><h3 id="按照运行机制来分类"><a href="#按照运行机制来分类" class="headerlink" title="按照运行机制来分类"></a>按照运行机制来分类</h3><p>注解按照<strong>运行机制</strong>来进行划分，可以分为3部分:<strong>源码注解，编译时注解，运行时注解。</strong></p><p>源码注解：只在源码.java文件中存在，编译成.class字节码文件就不存在了；</p><p>编译时注解：在源码.java文件和字节码.class文件中都存在；</p><p>运行时注解：在运行阶段还起作用,甚至会影响运行逻辑的注解。（spring框架中的@Autowired依赖注入的这种注解，它实现的就是在程序运行的过程当中自动的将外部传入的信息加载进去,它就是一种可以影响程序运行逻辑的运行时注解。）</p><h3 id="按照来源来分"><a href="#按照来源来分" class="headerlink" title="按照来源来分"></a>按照来源来分</h3><p>注解按照<strong>来源</strong>来进行划分，可以分为3部分:<strong>JDK注解，第三方注解，自定义注解。</strong></p><p>还有一种元注解，它是对注解进行注解的。</p><p>不行了，写着写着字数又超了，快4000字了，面向对象最后一个特性：多态，我还没说呢，下次吧，今天得滚去运动了。。。感谢你的赏阅。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（二）：封装</title>
      <link href="/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B0%81%E8%A3%85/"/>
      <url>/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>时隔近一年，我突然想起来这个文章还没有发完，所以就继续开始写。也不知道自己上次写到哪里了，不管了这里从面向对象的三个特性说起。</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>在这之前，我们先了解什么是对象，已经什么是面向对象？对象：万物皆对象，现实中实际存在的事物都可以看成一个对象。而面向对象就是人在关注对象， 关注事物的信息。那什么是类？类就是模子，通常用于确定对象将会拥有的特征(属性)和行为(方法)。也就是说对象是类的具体存在，而类则是对象的抽象化。苹果是一个类，你手里拿的苹果就是一个实例化的对象。</p><p>刚才说了对象具有属性和方法，那么属性和方法又是什么呢？属性就是对象具有的各种静态特征，通常用来说明对象有什么；而方法就是说明对象具有的各种动态行为，也即对象能做什么。</p><p>假如我有一辆吉普车，它的颜色，价格，型号就是属性；而它能加速，减速，停止就是具有各种方法。</p><p>创建类的一般步骤为：创建类==》实例化对象==》书写具体的逻辑。</p><p>通常我们在书写类的时候，都需要遵循单一职责原则(单一功能原则)，也就是说 一个类应该有且只有一个引起功能变化的原因。如果在一个类当中承担的功能越多，那么它的交融，耦合性就越高，被复用的可能性就越低。特别是因为耦合度高，可能会因为一个职责的变化，引起其他职责的变化，进而影响整个程序的运行，这一点是我们所不想看到的。</p><p>实例化对象的过程可以分为三步：声明对象，实例化对象，将两者进行绑定。其中声明对象是在栈内存中开辟了一块内存空间，但此时还不是一个有效的对象，因为此时对象的空间里是空的。如果此时调用它的属性和方法则会引发错误。而实例化对象则是在堆空间开辟一块空间，它完成了具体对象相关信息的初始化操作。最后通过赋值进行两者绑定。</p><p>也就是声明对象和实例化对象是在内存中的不同空间完成的，通过赋值操作，将两者关联。具体的关联就是将堆中具体对象的内存地址存放在之前在栈中开辟的内存中，从而完成绑定。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法也称为: 构造函数或者构造器，你可以使用构造方法来完成对象初始化相关操作。</p><p>构造方法的调用必须配合new关键字，不能被对象单独调用。注意，<strong>构造方法必须与类同名且没有返回值。</strong></p><p>方法名中的参数列表可有可无，但是只能在对象实例化的时候被调用。</p><p>当没有指定构造方法时，系统会自动添加无参的构造方法；当有指定的构造方法时,无论是有参、无参的构造方法，系统都不会自动添加无参的构造方法，一个类中可以有多个构造方法。</p><p>this: 当前对象的默认引用; this的使用:调用成员属性,解决成员属性和局部变量同名冲突，也可以调用成员方法。</p><p>如果你想调用重载的构造方法，那么只能通过this关键字来使用this()；同时请记住，如果是通过this()来调用构造方法时,它必须放在方法体内第一行。（这个一定注意）</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是将类的某些信息隐藏在类内部, 不允许外部程序直接访问，但是通过该类提供的方法来实现对隐藏信息的操作和访问。也就是说两点：一是隐藏对象的信息，第二留出可以访问的接口（方法）。</p><p>封装的具体步骤：1、将访问修饰符替换为private；2、提供公共的setter和getter方法；3、必须有构造方法（系统会默认调用无参的构造方法）。其中setter方法是可写，getter方法是可读。我们可以在setter方法里面添加自己的业务逻辑，从而实现对值的合理性进行判断。</p><p>因为已经实现了封装，因此我们在实例化对象的时候就不需要再次传入自定义的参数了，否则就没有使我们提供的setter方法生效了。</p><h2 id="包的管理"><a href="#包的管理" class="headerlink" title="包的管理"></a>包的管理</h2><p>为什么要说包的管理呢？因为包的管理太重要了，其实很多坑就是包的命令和管理不规范引起的。</p><p>我们知道文件夹可以进行文件的管理，同一个文件中可以存放多个不同的文件，同名的文件只能存放在不同的文件夹中。</p><p>在Java中我们也是通过包来管理java文件来解决同名文件的冲突问题，Java中一个包里不能存放同名类，但不同包却是可以。</p><p>包的定义必须放在Java源文件的第一行。前面说过，我们在定义类的时候，尽量遵循单一职责原则，同样的道理，在建立包的时候，建议每个包内存储的信息功能应该单一。</p><p>如何实现跨包类的调用？可以采用Import这个关键字，来实现包的导入。需要注意的是<strong>import包名.* 只能访问指定包名下的类，无法访问子包下的类</strong>。</p><p>还有就是包的效率问题，建议采用<code>import包名.类名</code>的方式进行包的导入，这样可以提高加载效率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import net.oschina.Test.*; // 加载包下的所有类</span><br><span class="line">import net.oschina.Test.Java; // 加载指定包下的指定类</span><br></pre></td></tr></table></figure></p><p>注意一下，加载类的顺序跟import导入语句的位置无关:指定的具体包的优先级大于通配符。也就是下面加载会大于上面加载的速率。</p><p>最后说一下关于包管理的几个注意事项：<br>1、必须放在Java源文件中的第一行；<br>2、一个Java源文件中只能有一个package语句；<br>3、包名全部采用英文字母小写的方式；<br>4、包的命名方式为：域名倒序+模块+功能。</p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="static修饰"><a href="#static修饰" class="headerlink" title="static修饰"></a>static修饰</h3><p>static表示静态的。</p><p>如果它修饰成员变量，那么该变量被称为静态成员或类成员，它是这个类所有的。也就是说无论这个类实例化出多少对象，它都会共用同一块内存空间。后面的只会覆盖前面的值。</p><p>如果它修饰属性，那么该属性被称为静态属性。</p><p>如果它修饰方法，那么该方法被称为静态方法。</p><p>如果它修饰初始化块，那么该初始化块被称为静态初始化块。</p><p>但是static是不能修饰类，不能修饰局部变量，不能内部类中修饰初始化块（不可以在内部类定义静态初始化块）。</p><p>静态成员的生命周期很长，在类加载时产生，直到类被销毁时才释放。</p><h3 id="static访问"><a href="#static访问" class="headerlink" title="static访问"></a>static访问</h3><p>普通的成员方法可以直接访问当前对象（该类实例化的对象）的成员属性和方法，也可以直接访问当前对象的静态属性和静态方法</p><p>静态方法或者类方法（前面被static修饰），它不能直接访问同一个类中的非静态成员，因为它缺少隐含的this参数。静态方法只能直接调用同一个类中的静态成员。如果非要访问，只能通过实例化一个对象后，采用对象.成员方法的方式来访问非静态成员。</p><h2 id="初始化块（代码块）"><a href="#初始化块（代码块）" class="headerlink" title="初始化块（代码块）"></a>初始化块（代码块）</h2><h3 id="初始化块的说明"><a href="#初始化块的说明" class="headerlink" title="初始化块的说明"></a>初始化块的说明</h3><p>在Java里面，被{}括起来的代码就称之为代码块（初始化块）。</p><p>当代码块出现在方法里的时候，叫做普通代码块，普通代码块和一般语句的执行顺序是一样的：从上到下，顺序执行，先出现,，先执行。</p><p>当代码块直接在类中定义，与成员方法，属性并列时，我们此时称之为构造代码块。</p><p>记住构造代码块比构造函数优先执行。构造代码块它是在创建对象的时候被调用，优先于构造方法的执行。所以不管构造代码块放在类的其他位置，它都会先于构造函数执行。</p><p>多个构造代码块之间有先后顺序，但都先于构造函数前执行。</p><h3 id="初始化块的执行"><a href="#初始化块的执行" class="headerlink" title="初始化块的执行"></a>初始化块的执行</h3><p>现在考虑一下，静态初始化块，普通初始化块，构造函数这三者的执行顺序？你只要记住静态初始化块静态初始化块只在类初始化时进行加载，而且只执行一次。对于三者，程序的执行优先级：静态初始化块–》初始化块–》构造方法。（这里的初始化块包括构造初始化块（直接在类中声明）和普通的初始化块（在方法中声明）。</p><h3 id="初始化块的范围"><a href="#初始化块的范围" class="headerlink" title="初始化块的范围"></a>初始化块的范围</h3><p>看一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;初始化块的范围&quot;);</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;我是普通代码块2&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这个test方法空间被分成了三部分，所以我们可以利用这个功能来实现变量的命名冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">        int temp =10;</span><br><span class="line">        int temp =12;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上面是不可以的，但是下面却是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       </span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这时两个代码块空间中允许有自己的变量值，不会重名造成冲突。但是不能在方法的全局域位置添加同名变量，因为它会与两个变量都造成重复定义的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">&#123;     int temp =10;</span><br><span class="line"> &#125;;</span><br><span class="line">       int temp =11;</span><br><span class="line"> &#123;    int temp =12;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>因为temp的作用域是从那里到结尾的，会与后面的代码块里面的变量产生命名冲突。</p><p>由于篇幅的问题，继承和多态我下次再说哈，今天就写到这里了，感谢你的赏阅！！！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JAVA你必须知道的那些事（一）：概述</title>
      <link href="/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A6%82%E8%BF%B0/"/>
      <url>/2018/08/01/%E5%85%B3%E4%BA%8EJAVA%E4%BD%A0%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>一、JAVA的主要特性：</p><p>1、 一方面，Java语言的语法与C语言和C++语言非常接近，这使得大多数程序员都很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。</p><p>2、Java是面向对象的，具有类，接口等；</p><p>3、Java是解释型的语言，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。即所谓的“一次编译，永久使用”。</p><p>下面解释一下解释型语言和编译型语言的区别？</p><p>（A）解释型语言：,解释性语言编写的程序不进行预先编译，以文本方式存储程序代码。在发布程序时，看起来省了道编译工序。但是，在运行程序的时候，解释性语言必须先解释再运行。</p><p>（B）编译型语言：程序在执行之前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果就行了。程序执行效率高，依赖编译器，跨平台性差些。如C、C++、Delphi等。</p><p>二、JAVA的开发工具（JDK），工具及运行环境（JRE）</p><p>（1）Java主要分为三大体系：</p><p>JavaSE(J2SE)(Java2 Platform Standard Edition，java平台标准版)</p><p>JavaEE(J2EE)(Java 2 Platform,EnterpriseEdition，java平台企业版)</p><p>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)</p><p>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字”2”：J2EE更名为Java EE,J2SE更名为Java SE，J2ME更名为Java ME。</p><p>说明：</p><p>Standard Edition(标准版) J2SE 包含那些构成Java语言核心的类</p><p>比如：数据库连接、接口定义、输入/输出、网络编程</p><p>Enterprise Edition(企业版) J2EE 包含J2SE 中的类，并且还包含用于开发企业级应用的类。比如：EJB、servlet、JSP、XML、事务控制</p><p>Micro Edition(微缩版) J2ME 包含J2SE中一部分类，用于消费类电子产品的软件开发。比如：呼机、智能卡、手机、PDA、机顶盒</p><p>他们的范围是：J2SE包含于J2EE中，J2ME包含了J2SE的核心类，但新添加了一些专有类，应用场合，API的覆盖范围各不相同。</p><p>上面的每个版本都分别对应不同的JDK（java development kit），可以根据应用不同下载不同的JDK安装。对于初学者，先学习Java SE，有了一定基础之后，可以考虑深入学习Java EE，或者转战Android也行。</p><p>（2）JDK中包含了java开发需要的各种类和接口，以及运行java程序所需要的环境JRE，若是只想在各种系统平台上运行java程序而不进行开发，则可以直接下载JRE包即可。有些系统是自带JRE的，但不包括windows，因此要想在windows上运行java程序，需要在系统上安装JRE。</p><p>（3）JRE中包含了JVM（Java虚拟机）：它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。</p><p>2、工具</p><p>Java开发需要一些较好的开发工具，比较好的一个IDE就是Eclipse；eclipse、idea等IDE有自己的编译器而不是用JDKbin目录中自带的，所以在安装时你会发现他们只要求你选中jre路径就ok了；而且用eclipse的话不需要设置系统环境变量，它会自动找到安装的JRE地址。</p><p>3、开发环境</p><p>Java可以下windows和linux等系统下进行开发，这里仅介绍在windows下开发需要设置的环境参数，在安相应版本JDK之后，进行变量设置。</p><p>变量设置</p><p>变量名：JAVA_HOME</p><p>变量值：C:\ProgramFiles\Java\jdk1.7.0</p><p>//这里是你JDK的安装路径，可以更换</p><p>变量名：CLASSPATH</p><p>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;//记得前面有个”.”</p><p>变量名：Path</p><p>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p><p>1、”开始”-&gt;;”运行”，键入”cmd”；</p><p>2、键入命令”java -version”，”java”，”javac”几个命令，出现相关画面，说明环境变量配置成功；</p><p>三、Java基础语法</p><p>1、基本语法规则</p><p>编写Java程序时，应注意以下几点：</p><p>大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。</p><p>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</p><p>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p><p>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。</p><p>主方法入口：所有的Java 程序由public static void main(Stringargs)方法开始执行。</p><p>另外：java中没有头文件，它是以import的方法从外面导入.class文件的； java中的main函数是包含在一个类中的，与C++是不一样的，在C++中没有定义类也是一个程序。</p><p>2、源文件声明规则</p><p>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p><p>一个源文件中只能有一个public类</p><p>一个源文件可以有多个非public类</p><p>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</p><p>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</p><p>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</p><p>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</p><p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p><p>3、Java包：</p><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。（即包中包含很多种类的类和接口）</p><p>当编译一个.java文件（即一个编译单元）时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。如果你真的想学习java你可以来这个群前面是四九一，中间是八九七后面是一五八这里有技术大牛亲自指导帮助你 还有免费的直播课程学。因此在编译少量.java文件之后，会得到大量的.class文件。每一个.java文件编译以后都会有一个public类，以及任意数量的非public类。因此每个.java文件都是一个构件，如果希望许许多多的这样的构件从属于同一个群组，就可以在每一个.java文件中使用关键字package。而这个群组就是一个类库。</p><p>如果使用package语句，它必须是.java文件中除注释以外的第一句程序代码。</p><p>4、权限修饰符</p><p>Java中有四种权限修饰符，这些修饰符控制对类，类的成员方法，类的成员变量的访问；其作用范围如下：</p><p>public：所有的类都可以访问。</p><p>private：只有在同一个类中才可以访问。</p><p>protected：同一个类中、同一个包中、子类中都可以访问，其他包不可以。</p><p>包类型的，即默认类型同一个类中、同一个包中可以访问到，其他包和子类不可以。</p><p>5、数据类型</p><p>byte: Java数据类型和c/c++基本类似，但Java中有byte类型，表示8位2进制的整数，相当于c/c++中的char.</p><p>常量：Java中常量用final表示，相当于const，final中的值是可以改变的；</p><p>-包装类: 在开发过程中，有时候需要使用对象，而不是内置数据类型，因此java为每个内置数据类型提供了对应的包装类所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类Number的子类，对于字符也有相应的Character类。每个类具有相应的函数。</p><p>数组：java数组是对象，与c++不同，语法上与c++类似，java数组具有一个属性length可以获取数组的长度。（数组a，a.length为数组长度），Array类具有一些函数可以对数组进运算。</p><p>6、Java高级特性和接口</p><p>Java中类继承只允许一个父类，当需要进行多个继承时，需要使用接口。接口类似于类，定义时用interface替代类定义中的class，但里面的方法只有定义没有实现。接口文件的文件名必须与接口名相同。继承接口的关键字为implement，与类的继承extends相似，可以进行多继承。接口继承必须实现接口中的所有方法。</p><p>接口是规范，规定某个实现类里必须有那些方法，只要事先定义好接口，当大家一起合作的时候就不用特别麻烦的交互，而是每个人写好自己的接口实现类，最后拼接到一起就可以了比如数据库连接类，接口规定好有哪些方法、方法的功能，然后每个数据库厂商根据接口去实现具体的类，达到统一的目的，要不每个数据库厂商自己实现一套，那么你编程的时候就要根据不同驱动使用不同的方法，造成不必要的麻烦。</p><p>2、Java中的抽象类</p><p>只声明方法的存在而不具体实现的类，抽象类不能实例化（不能创建相应对象）定义方式：在class前加上abstract，ex：</p><p>abstractclass 类名{ ;;;}抽象类中定义的没有实际意义的，必须在子类重写的方法为抽象方法，定义时前面加abstract：abstract type name(agrs)。</p><p>一般方法定义与在正常类中定义一样。</p><p>关于如何创建类和其他知识我将在后续文章陆续介绍，谢谢大家！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十六）：项目部署上线（Centos版）</title>
      <link href="/2018/06/30/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%EF%BC%88Centos%E7%89%88%EF%BC%89/"/>
      <url>/2018/06/30/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF%EF%BC%88Centos%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们将介绍如何把我们的微电影视频网站部署上线。</p><h2 id="安装LNMP环境"><a href="#安装LNMP环境" class="headerlink" title="安装LNMP环境"></a>安装LNMP环境</h2><p>首先我们需要在云服务器上安装LNMP，所谓的LNMP是指：Centos,Nginx,Mysql和Python：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8a2a45e6955f15cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>我们需要的配置：</strong><br>服务器系统：Centos7<br>数据库: Mysql<br>编程语言: Python3.6<br>队列缓存: Redis<br>web反向代理: Nginx<br>依赖环境: flask ，mysql-connector-python ，wtform ，sqlachemy ，redis<br><strong>整个部署流程：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-681f2b6ddc507495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="一些常用的Centos命令"><a href="#一些常用的Centos命令" class="headerlink" title="一些常用的Centos命令"></a>一些常用的Centos命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip  # 查看服务器配置</span><br><span class="line"></span><br><span class="line">cat /etc/redhat-release  # 查看内存剩余</span><br><span class="line"></span><br><span class="line">free -m   # 查看硬盘剩余</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="1、安装python3-6的依赖包"><a href="#1、安装python3-6的依赖包" class="headerlink" title="1、安装python3.6的依赖包"></a>1、安装python3.6的依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel</span><br><span class="line">sqllite-devel</span><br></pre></td></tr></table></figure><h3 id="2、下载并解压Python3-6-4"><a href="#2、下载并解压Python3-6-4" class="headerlink" title="2、下载并解压Python3.6.4"></a>2、下载并解压Python3.6.4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf python-3.6.4.tgz</span><br><span class="line">cd python-3.6.4/</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line"></span><br><span class="line">yum -y install gcc gcc-c++</span><br><span class="line"></span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure><h3 id="3、采用软连接配置Python"><a href="#3、采用软连接配置Python" class="headerlink" title="3、采用软连接配置Python"></a>3、采用软连接配置Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line"></span><br><span class="line">mv python python.backup</span><br><span class="line"></span><br><span class="line"># 创建软连接</span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python</span><br><span class="line">ln -s /usr/local/bin/python3.6 /usr/bin/python3</span><br><span class="line"></span><br><span class="line">cd /usr/bin/</span><br><span class="line">ls yum*</span><br><span class="line">vim yum</span><br></pre></td></tr></table></figure><p>修改第一行尾python2:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d83a9c0da46eac23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yum-config-manager</span><br></pre></td></tr></table></figure></p><p>修改第一行尾python2：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e49564c4aae6f218.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>。。。。。。<br>运行下面所有的命令，把它们第一行尾的python都改成Python2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim yum-debug-restore</span><br><span class="line">vim yum-group-manager</span><br><span class="line">vim yum-build-dep</span><br><span class="line">vim yum-debug-dump</span><br><span class="line">vim yumdownloader</span><br><span class="line">vim /usr/libexec/urlgrabber-ext-down</span><br></pre></td></tr></table></figure></p><p>然后输入Python发现就是Python3.6.4的版本了。</p><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>直接利用命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mariadb-server  # 安装MySQL服务</span><br><span class="line"></span><br><span class="line">systemctl start mariadb.service  # 启动服务</span><br><span class="line"></span><br><span class="line">enable mariadb.service  # 设置开机自启</span><br></pre></td></tr></table></figure></p><p>然后修改密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot password &quot;root&quot;</span><br><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure></p><p>接下来更改MySQL的字符集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">character--set-server=utf8   # 更改字符集</span><br></pre></td></tr></table></figure></p><p>然后重启服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb.service</span><br></pre></td></tr></table></figure></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>拷贝Nginx到我们的服务器上面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp nginx.tar.gz root@192.168.x.x:/root/</span><br></pre></td></tr></table></figure></p><p>然后安装它的依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ openssl-devel pcre-devel httpd-tools</span><br></pre></td></tr></table></figure></p><p>接下来进行解压安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf nginx.tar.gz</span><br><span class="line">cd nginx/</span><br><span class="line"></span><br><span class="line">useradd nginx</span><br><span class="line">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_mp4_module --with-http_flv_moudle</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install  # 安装和编译</span><br><span class="line"></span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/sbin/</span><br></pre></td></tr></table></figure></p><p>最后启动我们的nginx服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br><span class="line">netstat -anptu | grep nginx</span><br></pre></td></tr></table></figure></p><h2 id="部署微电影视频网站"><a href="#部署微电影视频网站" class="headerlink" title="部署微电影视频网站"></a>部署微电影视频网站</h2><p>部署的整个流程就是这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-873fe3b45af67590.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="1、引入Manager"><a href="#1、引入Manager" class="headerlink" title="1、引入Manager"></a>1、引入Manager</h3><p>首先安装Flask-Script，然后在manage.py中导入Manager：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from app import app</span><br><span class="line">from flask_script import Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">manage = Manager(app)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><h3 id="2、修改服务器端口"><a href="#2、修改服务器端口" class="headerlink" title="2、修改服务器端口"></a>2、修改服务器端口</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-02c8bb4b7a0f99fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>端口需要和服务器保持一致，同时关闭调试模式。</p><h3 id="3、拷贝依赖文件到服务器"><a href="#3、拷贝依赖文件到服务器" class="headerlink" title="3、拷贝依赖文件到服务器"></a>3、拷贝依赖文件到服务器</h3><p>首先导出项目依赖的各种包req.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp req.txt movie.sql root@192.168.xx/root/</span><br></pre></td></tr></table></figure></p><p>当然如果你不熟悉，那你可以使用xshell来上传文件。</p><h3 id="4、新建虚拟环境"><a href="#4、新建虚拟环境" class="headerlink" title="4、新建虚拟环境"></a>4、新建虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --python=python3 movie</span><br></pre></td></tr></table></figure><h3 id="5、安装依赖的包"><a href="#5、安装依赖的包" class="headerlink" title="5、安装依赖的包"></a>5、安装依赖的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r req.txt</span><br></pre></td></tr></table></figure><p>如果安装太慢就可以使用豆瓣源进行加速：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com -r  req.txt</span><br></pre></td></tr></table></figure></p><h3 id="6、创建数据库并导入数据"><a href="#6、创建数据库并导入数据" class="headerlink" title="6、创建数据库并导入数据"></a>6、创建数据库并导入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database movie;</span><br><span class="line">use movie;</span><br><span class="line">source /root/movie.sql;</span><br></pre></td></tr></table></figure><h3 id="7、将项目拷贝到nginx的html目录"><a href="#7、将项目拷贝到nginx的html目录" class="headerlink" title="7、将项目拷贝到nginx的html目录"></a>7、将项目拷贝到nginx的html目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r movie /usr/local/nginx/html   或者  cp -r movie /usr/share/nginx/html</span><br></pre></td></tr></table></figure><h3 id="8、查看nginx的目录"><a href="#8、查看nginx的目录" class="headerlink" title="8、查看nginx的目录"></a>8、查看nginx的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp nginx.conf /usr/local/nginx/conf/</span><br><span class="line"></span><br><span class="line">ubuntu: cp nginx.conf /etc/nginx/conf.d</span><br></pre></td></tr></table></figure><h3 id="9、运行项目"><a href="#9、运行项目" class="headerlink" title="9、运行项目"></a>9、运行项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/html/movie_project</span><br><span class="line"></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>然后开启四个进程，修改端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup python manage.py runserver -h 192.168.x.x -p admin</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-85539797185ec8d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="10、上传nginx的配置文件"><a href="#10、上传nginx的配置文件" class="headerlink" title="10、上传nginx的配置文件"></a>10、上传nginx的配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 262180;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line">    sendfile on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=addr:5m;</span><br><span class="line">    upstream movie &#123;</span><br><span class="line">        server 127.0.0.1:5001;</span><br><span class="line">        server 127.0.0.1:5002;</span><br><span class="line">        server 127.0.0.1:5003;</span><br><span class="line">        server 127.0.0.1:5004;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name movie.licheetools.top;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root html;</span><br><span class="line">            index index.html index.htm;</span><br><span class="line">            proxy_pass http://movie;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.flv$ &#123;</span><br><span class="line">            flv;</span><br><span class="line">            limit_conn addr 4;</span><br><span class="line">            limit_rate 1024k;</span><br><span class="line">            rewrite ^/static/uploads/(.+?).flv$ /movie/app/static/uploads/$1.flv permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ \.mp4$ &#123;</span><br><span class="line">            mp4;</span><br><span class="line">            limit_conn addr 4;   # 同时允许在线观看4个页面</span><br><span class="line">            limit_rate 1024k;   # 最高下载速度1M/s</span><br><span class="line">            rewrite ^/static/uploads/(.+?).mp4$ /movie/app/static/uploads/$1.mp4 permanent;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、刷新Nginx"><a href="#11、刷新Nginx" class="headerlink" title="11、刷新Nginx"></a>11、刷新Nginx</h3><p>最后我们使用<code>nginx -s reload</code>来刷新我们的Nginx,然后你就可以在浏览器输入你的域名就可以访问你的微电影视频网站了。</p><p>至此，微电影视频网站项目我们就完成了开发，回顾这一路，坎坷确实很多，但是我们还是坚持了下来，最后项目成功上线，这其中的喜悦之情真是难以言表啊。</p><p>最后欢迎大家加我好友或者关注微信公众号，进行交流，我们一起进步！</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十五）：实现电影弹幕</title>
      <link href="/2018/06/27/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%BD%B1%E5%BC%B9%E5%B9%95/"/>
      <url>/2018/06/27/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E7%94%B5%E5%BD%B1%E5%BC%B9%E5%B9%95/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十四）：前台后续开发</title>
      <link href="/2018/06/25/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%90%8E%E7%BB%AD%E5%BC%80%E5%8F%91/"/>
      <url>/2018/06/25/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E5%90%8E%E7%BB%AD%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们将完成前台的后续开发，需要实现上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十四篇。</a></p><h2 id="上映预告"><a href="#上映预告" class="headerlink" title="上映预告"></a>上映预告</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Preview<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、修改动画视图"><a href="#1、修改动画视图" class="headerlink" title="1、修改动画视图"></a>1、修改动画视图</h3><p>打开views.py文件，我们修改一下动画视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from app.models import  Preview</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 动画</span><br><span class="line">@home.route(&apos;/animation/&apos;)</span><br><span class="line">def animation():</span><br><span class="line">    data = Preview.query.all()</span><br><span class="line">    return render_template(&quot;home/animation.html&quot;, data=data)</span><br></pre></td></tr></table></figure></p><h3 id="2、配置animation页面"><a href="#2、配置animation页面" class="headerlink" title="2、配置animation页面"></a>2、配置animation页面</h3><p>我们修改一下我们的animation.html页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ca2af6a2c58974df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="标签筛选和电影分页"><a href="#标签筛选和电影分页" class="headerlink" title="标签筛选和电影分页"></a>标签筛选和电影分页</h2><p>标签就是这里：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d67cba4ad755fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Tag ，Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、编写视图函数"><a href="#1、编写视图函数" class="headerlink" title="1、编写视图函数"></a>1、编写视图函数</h3><p>打开views.py文件，我们修改index函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    tags = Tag.query.all()</span><br><span class="line">    movtag = request.args.get(&quot;movtag&quot;, 0)    # 获取电影标签</span><br><span class="line">    star = request.args.get(&quot;star&quot;, 0)  # 获取电影星级</span><br><span class="line">    ontime = request.args.get(&quot;ontime&quot;, 0)  # 获取上映时间</span><br><span class="line">    playnum = request.args.get(&quot;playnum&quot;, 0)  # 获取播放数量</span><br><span class="line">    commnum = request.args.get(&quot;commnum&quot;, 0)  # 获取评论数量</span><br><span class="line">    return render_template(&quot;home/index.html&quot;, tags=tags)</span><br></pre></td></tr></table></figure></p><h3 id="2、进行标签和星级遍历"><a href="#2、进行标签和星级遍历" class="headerlink" title="2、进行标签和星级遍历"></a>2、进行标签和星级遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for v in tags %&#125;</span><br><span class="line">&lt;a  class=&quot;label label-info&quot;&gt;&lt;span</span><br><span class="line">class=&quot;glyphicon glyphicon-tag&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v.name &#125;&#125;&lt;/a&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% for v in range(1,6) %&#125;</span><br><span class="line">&lt;a class=&quot;label label-warning&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-star&quot;&gt;&lt;/span&gt;&amp;nbsp;&#123;&#123; v &#125;&#125;&lt;/a&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="3、构建参数字典"><a href="#3、构建参数字典" class="headerlink" title="3、构建参数字典"></a>3、构建参数字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p = dict(</span><br><span class="line">       movtag=movtag,</span><br><span class="line">       star=star,</span><br><span class="line">       ontime=ontime,</span><br><span class="line">       playnum=playnum,</span><br><span class="line">       commnum=commnum</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><p>这是为了后面的筛选用，记得把p传进去！</p><h3 id="4、配置筛选"><a href="#4、配置筛选" class="headerlink" title="4、配置筛选"></a>4、配置筛选</h3><p>我们对电影标签进行筛选，采用这种方式进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; v.id &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;...&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>也就是说除了当前所选之外，其余的我们都是采用获取字典属性的方法来获得相关属性。</p><p><strong>电影星级：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; v &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><strong>上映时间：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=1&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;  .......最近&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">                          </span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=2&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot;  ......更早&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用ontime的值1-2分别代表最近，更早。</p><p><strong>播放数量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=1&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从高到低&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=2&amp;commnum=&#123;&#123; p[&apos;commnum&apos;] &#125;&#125;&quot; ......从低到高&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用playnum的值1-2分别代表从高到低，从低到高。</p><p><strong>评论数量：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=1&quot;......从高到低&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;?movtag=&#123;&#123; p[&apos;movtag&apos;] &#125;&#125;&amp;star=&#123;&#123; p[&apos;star&apos;] &#125;&#125;&amp;ontime=&#123;&#123; p[&apos;ontime&apos;] &#125;&#125;&amp;playnum=&#123;&#123; p[&apos;playnum&apos;] &#125;&#125;&amp;commnum=2&quot; ......从低到高&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>我们这里用commnum的值1-2分别代表从高到低，从低到高。</p><h3 id="5、修改视图函数"><a href="#5、修改视图函数" class="headerlink" title="5、修改视图函数"></a>5、修改视图函数</h3><p>我们打开views.py文件，继续完善我们的index视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Movie</span><br><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&quot;/&lt;int:page&gt;/&quot;, methods=[&quot;GET&quot;])</span><br><span class="line">@home.route(&quot;/&quot;, methods=[&quot;GET&quot;])</span><br><span class="line">def index(page=None):</span><br><span class="line">    tags = Tag.query.all()</span><br><span class="line">    page_data = Movie.query</span><br><span class="line"></span><br><span class="line">    movtag = request.args.get(&quot;movtag&quot;, 0)    # 获取电影标签</span><br><span class="line">    if int(movtag) != 0:</span><br><span class="line">        page_data = page_data.filter_by(tag_id=int(movtag))</span><br><span class="line"></span><br><span class="line">    star = request.args.get(&quot;star&quot;, 0)  # 获取电影星级</span><br><span class="line">    if int(star) != 0:</span><br><span class="line">        page_data = page_data.filter_by(star=int(star))</span><br><span class="line"></span><br><span class="line">    ontime = request.args.get(&quot;ontime&quot;, 0)  # 获取上映时间</span><br><span class="line">    if int(ontime) != 0:</span><br><span class="line">        if int(ontime) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.addtime.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.addtime.asc()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    playnum = request.args.get(&quot;playnum&quot;, 0)  # 获取播放数量</span><br><span class="line">    if int(playnum) != 0:</span><br><span class="line">        if int(playnum) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.playnum.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.playnum.asc()</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    commnum = request.args.get(&quot;commnum&quot;, 0)  # 获取评论数量</span><br><span class="line">    if int(commnum) != 0:</span><br><span class="line">        if int(commnum) == 1:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.commentnum.desc()</span><br><span class="line">            )</span><br><span class="line">        else:</span><br><span class="line">            page_data = page_data.order_by(</span><br><span class="line">                Movie.commentnum.asc()</span><br><span class="line">            )</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = page_data.paginate(page=page, per_page=12)</span><br><span class="line"></span><br><span class="line">    p = dict(</span><br><span class="line">        movtag=movtag,</span><br><span class="line">        star=star,</span><br><span class="line">        ontime=ontime,</span><br><span class="line">        playnum=playnum,</span><br><span class="line">        commnum=commnum</span><br><span class="line">    )</span><br><span class="line">    return render_template(&quot;home/index.html&quot;, tags=tags, p=p, page_data=page_data)</span><br></pre></td></tr></table></figure></p><h3 id="6、进行列表显示和分页配置"><a href="#6、进行列表显示和分页配置" class="headerlink" title="6、进行列表显示和分页配置"></a>6、进行列表显示和分页配置</h3><p>打开搜索框，输入<code>home.index</code>，我们在这些后面添加<code>page=1</code>,一共5个地方：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2c2dfad9bc78db1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果少了运行就会报下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.index&apos;. Did you forget to specify values [&apos;page&apos;]?</span><br></pre></td></tr></table></figure></p><p>分页的配置就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.index&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别放错位置哈：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3df1ea20b07b26ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影搜索和电影分页"><a href="#电影搜索和电影分页" class="headerlink" title="电影搜索和电影分页"></a>电影搜索和电影分页</h2><h3 id="使用到的内容-2"><a href="#使用到的内容-2" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、书写搜索视图函数"><a href="#1、书写搜索视图函数" class="headerlink" title="1、书写搜索视图函数"></a>1、书写搜索视图函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 搜索页面</span><br><span class="line">@home.route(&apos;/search/&lt;int:page&gt;/&apos;)</span><br><span class="line">def search(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    key = request.args.get(&apos;key&apos;, &apos;&apos;)</span><br><span class="line">    movie_count = Movie.query.filter(</span><br><span class="line">        Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;)   # ilike可以进行模糊查询</span><br><span class="line">    ).count()</span><br><span class="line">    page_data = Movie.query.filter(</span><br><span class="line">        Movie.title.ilike(&apos;%&apos; + key + &apos;%&apos;)</span><br><span class="line">    ).order_by(</span><br><span class="line">        Movie.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/search.html&quot;, key=key, movie_count=movie_count, page_data=page_data)</span><br></pre></td></tr></table></figure><h3 id="2、修改home和layout页面"><a href="#2、修改home和layout页面" class="headerlink" title="2、修改home和layout页面"></a>2、修改home和layout页面</h3><p>为搜索电影加<code>id=&quot;key_movie&quot;</code>,与此同时为搜索添加<code>id=&quot;do_search&quot;</code>，还要删除搜索的链接href:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-462f7ed5b1a041e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后采用Jquery来控制搜索按钮，在JavaScript里面添加这段Jquery代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#do_search&quot;).click(function () &#123;</span><br><span class="line">            var key = $(&quot;#key_movie&quot;).val();</span><br><span class="line">            location.href = &quot;&#123;&#123; url_for(&apos;home.search&apos;, page=1) &#125;&#125;?key=&quot; + key;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p>这段Jquery代码的意思是说，当点击class=”do_search”的搜索框时，就会去查询电影里面含有key的电影，并返回到search搜索结果列表页面。</p><p>注意这些操作都需要在home和layout页面进行，2个都要进行配置！！！</p><p>然后就是分页了，就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.search&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别放错位置哈!!!</p><h2 id="电影详情和电影播放"><a href="#电影详情和电影播放" class="headerlink" title="电影详情和电影播放"></a>电影详情和电影播放</h2><h3 id="使用到的内容-3"><a href="#使用到的内容-3" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型： Movie<br>表单: 无<br>请求方法: GET<br>访问控制: 无</p><h3 id="1、编写播放视图"><a href="#1、编写播放视图" class="headerlink" title="1、编写播放视图"></a>1、编写播放视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;)</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie)</span><br></pre></td></tr></table></figure><h3 id="2、添加电影id"><a href="#2、添加电影id" class="headerlink" title="2、添加电影id"></a>2、添加电影id</h3><p>打开搜索框，输入<code>home.play</code>，我们在这些后面添加<code>id=v.id</code>,一共3个地方：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3a2fc55b0f338d18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="3、修改播放页面显示"><a href="#3、修改播放页面显示" class="headerlink" title="3、修改播放页面显示"></a>3、修改播放页面显示</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a4305b064c530fb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意一下星级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for val in range(1,movie.star+1) %&#125;</span><br><span class="line"> &lt;span class=&quot;glyphicon glyphicon-star&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% for val in range(1,5-movie.star) %&#125;</span><br><span class="line"> &lt;span class=&quot;glyphicon glyphicon-star-empty&quot; style=&quot;color:#FFD119&quot;&gt;&lt;/span&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>还有底下的配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-84f01901a1fe2c13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影评论和电影统计"><a href="#电影评论和电影统计" class="headerlink" title="电影评论和电影统计"></a>电影评论和电影统计</h2><h3 id="使用到的内容-4"><a href="#使用到的内容-4" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie User Comment<br>表单: CommentForm<br>请求方法: GET ,POST<br>访问控制: 需要登入</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 添加评论</span><br><span class="line">class CommentForm(FlaskForm):</span><br><span class="line">    content = TextAreaField(</span><br><span class="line">        label=&quot;内容&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入内容！&quot;),</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;内容&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;id&quot;: &quot;input_content&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;提交评论&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;btn-sub&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="2、判断登入和是否显示评论框"><a href="#2、判断登入和是否显示评论框" class="headerlink" title="2、判断登入和是否显示评论框"></a>2、判断登入和是否显示评论框</h3><p>打开play.html页面，我们修改成这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cc0e688e108dafbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意，是”user”，不是user，这个一定要注意哈！！！</strong></p><h3 id="3、准备页面渲染字段"><a href="#3、准备页面渲染字段" class="headerlink" title="3、准备页面渲染字段"></a>3、准备页面渲染字段</h3><p>打开home/views.py文件，我们修改play函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import CommentForm</span><br><span class="line"></span><br><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="4、前台页面传值显示以及操作信息提示"><a href="#4、前台页面传值显示以及操作信息提示" class="headerlink" title="4、前台页面传值显示以及操作信息提示"></a>4、前台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改play.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-303c94cb88c9009d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、继续完善我们的播放视图"><a href="#5、继续完善我们的播放视图" class="headerlink" title="5、继续完善我们的播放视图"></a>5、继续完善我们的播放视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Comment</span><br><span class="line"></span><br><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line">    movie.playnum = movie.playnum + 1</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        comment = Comment(</span><br><span class="line">            content=data[&quot;content&quot;],    # 左侧字段与数据库Comment字段保持一致</span><br><span class="line">            movie_id=movie.id,</span><br><span class="line">            user_id=session[&quot;user_id&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(comment)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加评论成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.play&quot;, id=movie.id))</span><br><span class="line">        movie.commentnum = movie.commentnum+1</span><br><span class="line">    db.session.add(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form)</span><br></pre></td></tr></table></figure><p>然后你就可以去play.html页面添加我们的评论了！</p><h2 id="评论分页及显示"><a href="#评论分页及显示" class="headerlink" title="评论分页及显示"></a>评论分页及显示</h2><p>我们继续修改我们的播放视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&lt;int:id&gt;/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def play(id=None, page=None):</span><br><span class="line">    movie = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id,</span><br><span class="line">        Movie.id == int(id)</span><br><span class="line">    ).first_or_404()</span><br><span class="line"></span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == movie.id,</span><br><span class="line">        User.id == Comment.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line"></span><br><span class="line">    movie.playnum = movie.playnum + 1</span><br><span class="line">    form = CommentForm()</span><br><span class="line">    if &quot;user&quot; in session and form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        comment = Comment(</span><br><span class="line">            content=data[&quot;content&quot;],    # 左侧字段与数据库Comment字段保持一致</span><br><span class="line">            movie_id=movie.id,</span><br><span class="line">            user_id=session[&quot;user_id&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(comment)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        movie.commentnum = movie.commentnum + 1</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加评论成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.play&quot;, id=movie.id, page=1))</span><br><span class="line">        movie.commentnum = movie.commentnum+1</span><br><span class="line">    db.session.add(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return render_template(&quot;home/play.html&quot;, movie=movie, form=form, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后就是在index.html 和search.html页面添加<code>page=1</code>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6569936e610fe2a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2a9a946f4a9c73a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是评论的遍历了，打开play.html页面，我们做如下修改：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0e52ecb5fa575076.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>别忘记了评论数量的统计显示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7b0f9bd9da9b9f0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的项目，发现评论出现了，但是有些却是html片段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-24a7e582d2cd0a7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>、<br>那是因为为了保证页面的安全，都默认不允许直接显示html页面，我们可以和Django一样，管道符号加safe:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; v.content|safe &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>然后就是分页了：就2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.play&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行发现报了下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">werkzeug.routing.BuildError: Could not build url for endpoint &apos;home.play&apos; with values [&apos;page&apos;]. Did you forget to specify values [&apos;id&apos;]?</span><br></pre></td></tr></table></figure></p><p>因为这个页面是比较特殊的，我们需要做一下配置：在ui文件夹下面新建comment_page.html，把home_page.html的页面信息全部拷贝进去，然后添加id参数，以及在第几页添加id=id:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-94c2a1ff9d16a6f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在修改我们play.html的分页配置：开头变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>下面也需要修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.play&quot;, movie.id) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>就是这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f4a6d7e6bc4b21c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新一下，看一下分页功能是否已经实现了呢！！！还记得我们之前在个人中心没有对个人评论进行配置吗，现在我们就可以配置了！</p><h2 id="个人中心评论配置"><a href="#个人中心评论配置" class="headerlink" title="个人中心评论配置"></a>个人中心评论配置</h2><p>首先需要修改我们的评论视图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 评论记录</span><br><span class="line">@home.route(&apos;/comments/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def comments(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == Comment.movie_id,</span><br><span class="line">        User.id == session[&quot;user_id&quot;]</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line"></span><br><span class="line">    return render_template(&quot;home/comments.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后就是打开comments.html页面，我们直接复制paly.html页面那里面关于评论的那部分：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-81742fb3c8a4b8fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页了，还是2步：首先复制这个置于文件开头：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/comment_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.comments&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，看看个人中心的评论记录是否都已经显示了呢！！！</p><h2 id="电影收藏"><a href="#电影收藏" class="headerlink" title="电影收藏"></a>电影收藏</h2><h3 id="使用到的内容-5"><a href="#使用到的内容-5" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie User Moviecol<br>表单: 无<br>请求方法: GET<br>访问控制: 需要登录</p><h3 id="1、新定义一个添加收藏函数："><a href="#1、新定义一个添加收藏函数：" class="headerlink" title="1、新定义一个添加收藏函数："></a>1、新定义一个添加收藏函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/add/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def moviecol_add():</span><br><span class="line">    mid = request.args.get(&quot;mid&quot;, &quot;&quot;)</span><br><span class="line">    uid = request.args.get(&quot;uid&quot;, &quot;&quot;)</span><br><span class="line">    moviecol = MovieCol.query.filter_by(</span><br><span class="line">        user_id=int(uid),</span><br><span class="line">        movie_id=int(mid),</span><br><span class="line">    ).count()</span><br><span class="line">    if moviecol == 1:</span><br><span class="line">        data = dict(ok=0)</span><br><span class="line">    if moviecol == 0:</span><br><span class="line">        moviecol = MovieCol(</span><br><span class="line">            user_id=int(uid),</span><br><span class="line">            movie_id=int(mid),</span><br><span class="line">        )</span><br><span class="line">        db.session.add(moviecol)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        data = dict(ok=1)</span><br><span class="line">    import json</span><br><span class="line">    return json.dumps(data)</span><br></pre></td></tr></table></figure><h3 id="2、采用ajax进行收藏的提示"><a href="#2、采用ajax进行收藏的提示" class="headerlink" title="2、采用ajax进行收藏的提示"></a>2、采用ajax进行收藏的提示</h3><p>打开play.html页面，我们新定义一个Script，编写我们的ajax代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#btn-col&quot;).click(function () &#123;</span><br><span class="line">                var mid = &#123;&#123; movie.id &#125;&#125;;</span><br><span class="line">                var uid = &#123;&#123; session[&apos;user_id&apos;] &#125;&#125;;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: &quot;&#123;&#123; url_for(&apos;home.moviecol_add&apos;) &#125;&#125;&quot;,</span><br><span class="line">                    type: &quot;GET&quot;,</span><br><span class="line">                    data: &quot;mid=&quot; + mid + &quot;&amp;uid=&quot; + uid,</span><br><span class="line">                    dataType: &quot;json&quot;,</span><br><span class="line">                    success: function (res) &#123;</span><br><span class="line">                        if (res.ok == 1) &#123;</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).empty();</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).append(&quot;收藏成功！&quot;);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).empty();</span><br><span class="line">                            $(&quot;#show_col_msg&quot;).append(&quot;已经收藏！&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3、添加页面收藏提示"><a href="#3、添加页面收藏提示" class="headerlink" title="3、添加页面收藏提示"></a>3、添加页面收藏提示</h3><p>继续在我们的play.html页面配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-19bd8bd918f12406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就可以去测试我们的电影收藏功能是否已经实现了呢，接下来就是会员中心收藏电影的一个显示了，这个和我们的评论记录的显示几乎一样，所以我快点配置。</p><h2 id="个人中心电影收藏显示"><a href="#个人中心电影收藏显示" class="headerlink" title="个人中心电影收藏显示"></a>个人中心电影收藏显示</h2><p>首先我们需要在menu.html页面配置收藏电影的page=1:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-29c4a2f24f637f56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着去完善我们的收藏电影moviecol，我们可以借鉴之前的会员登入日志的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def moviecol(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = MovieCol.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        User.id == session[&quot;user_id&quot;],</span><br><span class="line">        Movie.id == MovieCol.movie_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        MovieCol.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/moviecol.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开moviecol.html页面，我们进行收藏电影的显示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ce33205e82727ab9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可能会遗漏<code>page=1</code>和<code>id=v.movie_id</code>，但是页面运行时会提示你的，这个按照提示进行即可。</p><p>然后就是分页了：还是2步：首先复制这个置于文件开头（可以借鉴我们loginlog.html的配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>接着复制下面的替换静态分页效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;home.moviecol&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，看看个人中心收藏的电影是否都已经显示了呢！！！</p><p>至此，本篇关于上映预告，标签筛选，电影搜索，电影播放，评论显示和收藏电影等功能的介绍就到此为止了。也就是说我们整个项目的开发就全部完成了，后面就是代码的优化和电影弹幕的实现了，我们下一篇介绍了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十四篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十三）：前台会员管理</title>
      <link href="/2018/06/20/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/20/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E5%8F%B0%E4%BC%9A%E5%91%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇笔记开始，我们将介绍前台的配置，也就是说现在你所有关于后台的页面都是可以关闭的，只需保留manage.py和moleds.py即可，好了话不多说，我们开始本篇的学习吧！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十三篇。</a></p><h2 id="前台会员管理"><a href="#前台会员管理" class="headerlink" title="前台会员管理"></a>前台会员管理</h2><p>前台会员管理主要包括会员注册，会员登录，会员退出，修改会员资料（包括会员密码），会员登录日志等5个功能，下面分别介绍。</p><h2 id="会员注册"><a href="#会员注册" class="headerlink" title="会员注册"></a>会员注册</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: RegisterForm<br>请求方法: GET ,POST<br>访问控制: 无</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开home/forms.py，我们定义Form字段，注意因为是会员注册，所以对应的html页面就是register.html，而且我们在forms.py里面定义的字段必须与register.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问register.html页面，这样明显多了！），可以复制修改后台的代码验证字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @Time: 2018/8/29 21:17</span><br><span class="line"># @Author: Envse</span><br><span class="line"># @File: forms.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from flask_wtf import FlaskForm</span><br><span class="line">from wtforms import StringField, PasswordField, SubmitField, FileField, TextAreaField, SelectField, SelectMultipleField</span><br><span class="line">from wtforms.validators import DataRequired, ValidationError, EqualTo, Email, Regexp</span><br><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 前台会员注册</span><br><span class="line">class RegisterForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;昵称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;昵称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;昵称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入昵称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    email = StringField(</span><br><span class="line">        label=&quot;邮箱&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;邮箱不能为空！&quot;),</span><br><span class="line">            Email(&quot;邮箱格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;邮箱&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入邮箱!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    phone = StringField(</span><br><span class="line">        label=&quot;手机号码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;手机号码不能为空！&quot;),</span><br><span class="line">            Regexp(&quot;1[3458]\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;手机号码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,     # 注意这个和后端页面的区别，不要拷贝错误</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入手机号码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    repwd = PasswordField(</span><br><span class="line">        label=&quot;确认密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;确认密码不能为空！&quot;),</span><br><span class="line">            EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;确认密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入确认密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;注册&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-lg btn-success btn-block&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    def validate_name(self, field):</span><br><span class="line">        name = field.data</span><br><span class="line">        user = User.query.filter_by(name=name).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该昵称已经存在！&quot;)</span><br><span class="line"></span><br><span class="line">    def validate_email(self, field):</span><br><span class="line">        email = field.data</span><br><span class="line">        user = User.query.filter_by(email=email).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该邮箱已经存在！&quot;)</span><br><span class="line"></span><br><span class="line">    def validate_phone(self, field):</span><br><span class="line">        phone = field.data</span><br><span class="line">        user = User.query.filter_by(phone=phone).count()</span><br><span class="line">        if user == 1:</span><br><span class="line">            raise ValidationError(&quot;该手机号已经存在！&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开home/views.py文件，我们修改register函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import RegisterForm</span><br><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;)</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">    return render_template(&quot;home/register.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改register.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5c87c2be772ecced.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加<code></code>，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开register.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的phone需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.phone.errors %&#125;</span><br><span class="line"> &lt;div class=&quot;col-md-12&quot; id=&quot;error_phone&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改会员注册函数"><a href="#5、修改会员注册函数" class="headerlink" title="5、修改会员注册函数"></a>5、修改会员注册函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from app.models import User</span><br><span class="line">from werkzeug.security import generate_password_hash</span><br><span class="line">import uuid</span><br><span class="line">from app import db</span><br><span class="line">from flask import flash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            email=data[&quot;email&quot;],</span><br><span class="line">            phone=data[&quot;phone&quot;],</span><br><span class="line">            pwd=generate_password_hash(data[&quot;pwd&quot;]),</span><br><span class="line">            uuid=uuid.uuid4().hex</span><br><span class="line">        )</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;恭喜你注册成功，赶紧登录吧！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.login&quot;))</span><br><span class="line">    return render_template(&quot;home/register.html&quot;, form=form)</span><br></pre></td></tr></table></figure><h3 id="6、数据库字段验证"><a href="#6、数据库字段验证" class="headerlink" title="6、数据库字段验证"></a>6、数据库字段验证</h3><p>打开models.py文件，我们在User函数里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def check_pwd(self, pwd):</span><br><span class="line">       from werkzeug.security import check_password_hash</span><br><span class="line">       return check_password_hash(self.pwd, pwd)</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，就可以去首页注册我们的会员了！</p><h2 id="会员登录"><a href="#会员登录" class="headerlink" title="会员登录"></a>会员登录</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: LoginForm<br>请求方法: GET ,POST<br>访问控制: 无</p><h3 id="1、添加表单验证字段-1"><a href="#1、添加表单验证字段-1" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开home/forms.py，我们定义Form验证字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 前台会员登录</span><br><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;账号&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;账号不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;账号&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入账号!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;登录&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-lg btn-primary btn-block&quot;,   #注意这里最好是primary，不要用success</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-1"><a href="#2、准备页面渲染字段-1" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改login函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import LoginForm</span><br><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data=form.data</span><br><span class="line">    return render_template(&quot;home/login.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示-1"><a href="#3、后台页面传值显示以及操作信息提示-1" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照后台的那些页面的配置来修改login.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-74b5485f4e8f597a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示-1"><a href="#4、后台页面错误信息提示-1" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开login.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改登录函数"><a href="#5、修改登录函数" class="headerlink" title="5、修改登录函数:"></a>5、修改登录函数:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data=form.data</span><br><span class="line">        user = User.query.filter_by(name=data[&quot;name&quot;]).first()</span><br><span class="line">        if not user.check_pwd(data[&quot;pwd&quot;]):</span><br><span class="line">            flash(&quot;密码错误！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.login&quot;))</span><br><span class="line">        session[&quot;user&quot;] = user.name</span><br><span class="line">        session[&quot;user_id&quot;] = user.id</span><br><span class="line">        userlog = UserLog(</span><br><span class="line">            user_id=user.id,</span><br><span class="line">            ip=request.remote_addr</span><br><span class="line">        )</span><br><span class="line">        db.session.add(userlog)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line">    return render_template(&quot;home/login.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去首页登录我们的网站了！</p><h3 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h3><p>现在有这样的问题，就是假如我们的账号不存在（这种情况也是有的，你长时间没登录忘记账号和密码了，然后就随便输入），这时候就很容易出现下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if not user.check_pwd(data[&quot;pwd&quot;]):</span><br><span class="line">AttributeError: &apos;NoneType&apos; object has no attribute &apos;check_pwd&apos;</span><br></pre></td></tr></table></figure></p><p>所以我们可以添加账号的验证（没有必要进行密码的验证，因为账号都不存在，哪来的密码呢，哈哈哈哈哈哈哈哈），可以仿照之前的注册在loginForm中定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def validate_name(self, field):</span><br><span class="line">      name = field.data</span><br><span class="line">      user = User.query.filter_by(name=name).count()</span><br><span class="line">      if user == 0:</span><br><span class="line">          raise ValidationError(&quot;该账号不存在！&quot;)</span><br></pre></td></tr></table></figure></p><h2 id="会员登出"><a href="#会员登出" class="headerlink" title="会员登出"></a>会员登出</h2><p>会员登出相比其他是非常简单的，只需要把session里面的<code>user</code>和<code>user_id</code>删除即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 登出</span><br><span class="line">@home.route(&apos;/logout/&apos;)</span><br><span class="line">def logout():</span><br><span class="line">    session.pop(&quot;user&quot;, None)   # 重定向到前台的登录页面</span><br><span class="line">    session.pop(&quot;user_id&quot;, None)</span><br><span class="line">    return redirect(url_for(&apos;home.login&apos;))</span><br></pre></td></tr></table></figure></p><p>既然登出了，就不能查看登入之后的信息了，我们可以采用登入装饰器来控制访问,可以复制我们之前在admin里面配置的那个就可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登录装饰器</span><br><span class="line">def user_login_req(f):</span><br><span class="line">    @wraps(f)</span><br><span class="line">    def decorated_function(*args, **kwargs):</span><br><span class="line">        if &quot;user&quot; not in session:</span><br><span class="line">            return redirect(url_for(&quot;home.login&quot;, next=request.url))</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line">    return decorated_function</span><br></pre></td></tr></table></figure></p><p>然后就要在这些页面添加控制访问的权限了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7635eadc2b52254a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是会员中心资料的修改了！</p><h2 id="会员中心资料修改"><a href="#会员中心资料修改" class="headerlink" title="会员中心资料修改"></a>会员中心资料修改</h2><h3 id="使用到的内容-2"><a href="#使用到的内容-2" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: UserdetailForm<br>请求方法: GET ,POST<br>访问控制: @user_login_req</p><h3 id="1、添加表单验证字段-2"><a href="#1、添加表单验证字段-2" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"># 修改个人资料</span><br><span class="line">class UserdetailForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;昵称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;昵称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;昵称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入昵称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    email = StringField(</span><br><span class="line">        label=&quot;邮箱&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;邮箱不能为空！&quot;),</span><br><span class="line">            Email(&quot;邮箱格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;邮箱&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入邮箱!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    phone = StringField(</span><br><span class="line">        label=&quot;手机号码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;手机号码不能为空！&quot;),</span><br><span class="line">            Regexp(&quot;1[3458]\\d&#123;9&#125;&quot;, message=&quot;手机格式不正确！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;手机号码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control input-lg&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入手机号码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    face = FileField(</span><br><span class="line">        label=&quot;头像&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传头像！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;头像&quot;,</span><br><span class="line">    )</span><br><span class="line">    info = TextAreaField(</span><br><span class="line">        label=&quot;简介&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;简介不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;简介&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;rows=&quot;: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;保存修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="2、准备页面渲染字段-2"><a href="#2、准备页面渲染字段-2" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改user函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import UserdetailForm</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">import os</span><br><span class="line">import datetime</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># 会员中心</span><br><span class="line">@home.route(&apos;/user/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def user():</span><br><span class="line">    form = UserdetailForm()</span><br><span class="line">    user = User.query.get(int(session[&quot;user_id&quot;]))</span><br><span class="line">    form.face.validators = []</span><br><span class="line">    if request.method == &quot;GET&quot;:    # 给它们赋初始值</span><br><span class="line">        form.name.data = user.name</span><br><span class="line">        form.email.data = user.email</span><br><span class="line">        form.phone.data = user.phone</span><br><span class="line">        form.info.data = user.info</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        if form.face.data != &quot;&quot;:   # 没有修改时不能报错</span><br><span class="line">            file_face = secure_filename(form.face.data.filename)</span><br><span class="line">            if not os.path.exists(app.config[&quot;FC_DIR&quot;]):</span><br><span class="line">                os.makedirs(app.config[&quot;FC_DIR&quot;])</span><br><span class="line">                os.chmod(app.config[&quot;FC_DIR&quot;])</span><br><span class="line">            user.face = change_filename(file_face)</span><br><span class="line">            form.face.data.save(app.config[&quot;FC_DIR&quot;] + user.face)</span><br><span class="line"></span><br><span class="line">        name_count = User.query.filter_by(name=data[&quot;name&quot;]).count()</span><br><span class="line">        if data[&quot;name&quot;] != user.name and name_count == 1:</span><br><span class="line">            flash(&quot;该昵称已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        email_count = User.query.filter_by(email=data[&quot;email&quot;]).count()</span><br><span class="line">        if data[&quot;email&quot;] != user.email and email_count == 1:</span><br><span class="line">            flash(&quot;该邮箱已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        phone_count = User.query.filter_by(phone=data[&quot;phone&quot;]).count()</span><br><span class="line">        if data[&quot;phone&quot;] != user.phone and phone_count == 1:</span><br><span class="line">            flash(&quot;该手机已经存在!&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line"></span><br><span class="line">        user.name = data[&quot;name&quot;]</span><br><span class="line">        user.email = data[&quot;email&quot;]</span><br><span class="line">        user.phone = data[&quot;phone&quot;]</span><br><span class="line">        user.info = data[&quot;info&quot;]</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改成功!&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.user&quot;))</span><br><span class="line">    return render_template(&quot;home/user.html&quot;, form=form, user=user)</span><br></pre></td></tr></table></figure></p><h3 id="3、在初始的–init–-py文件里面，新增我们的图片存储地址："><a href="#3、在初始的–init–-py文件里面，新增我们的图片存储地址：" class="headerlink" title="3、在初始的–init–.py文件里面，新增我们的图片存储地址："></a>3、在初始的–init–.py文件里面，新增我们的图片存储地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[&quot;FC_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/users/&quot;)</span><br></pre></td></tr></table></figure><h3 id="4、后台页面传值显示以及操作信息提示"><a href="#4、后台页面传值显示以及操作信息提示" class="headerlink" title="4、后台页面传值显示以及操作信息提示"></a>4、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改user.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-63816b59b410b291.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法以及图片上传类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="5、前台页面错误信息提示"><a href="#5、前台页面错误信息提示" class="headerlink" title="5、前台页面错误信息提示"></a>5、前台页面错误信息提示</h3><p>打开user.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6、设置头像默认值"><a href="#6、设置头像默认值" class="headerlink" title="6、设置头像默认值"></a>6、设置头像默认值</h3><p>打开user.html页面，我们给用户头像一个初始值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4271674f3246f5ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的manage.py文件，就可以去后台修改个人中心的信息了！</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><h3 id="使用到的内容-3"><a href="#使用到的内容-3" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: PwdForm<br>请求方法: GET ,POST<br>访问控制: @user_login_req</p><h3 id="1、添加表单验证字段-3"><a href="#1、添加表单验证字段-3" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>这个表单验证字段和我们后台定义的修改密码是一模一样的，所以我们完全可以复制粘贴之前的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码</span><br><span class="line">class PwdForm(FlaskForm):</span><br><span class="line">    old_pwd = PasswordField(</span><br><span class="line">        label=&quot;旧密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;旧密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;旧密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入旧密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    new_pwd = PasswordField(</span><br><span class="line">        label=&quot;新密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;新密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;新密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入新密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改密码&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-success&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-3"><a href="#2、准备页面渲染字段-3" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改pwd函数（这个和我们后台修改密码一样，复制修改一下即可）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from app.home.forms import PwdForm</span><br><span class="line"></span><br><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def pwd():</span><br><span class="line">    form = PwdForm()</span><br><span class="line">    if form.validate_on_submit():  # 表单验证，没有这个则无法进行错误信息提示</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User.query.filter_by(name=session[&quot;user&quot;]).first()</span><br><span class="line">        user.pwd = generate_password_hash(data[&quot;new_pwd&quot;])</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.logout&quot;))</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、前台页面传值显示以及操作信息提示"><a href="#3、前台页面传值显示以及操作信息提示" class="headerlink" title="3、前台页面传值显示以及操作信息提示"></a>3、前台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改pwd.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6d4c88923e8760b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、前台页面错误信息提示"><a href="#4、前台页面错误信息提示" class="headerlink" title="4、前台页面错误信息提示"></a>4、前台页面错误信息提示</h3><p>打开pwd.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改一下密码函数"><a href="#5、修改一下密码函数" class="headerlink" title="5、修改一下密码函数"></a>5、修改一下密码函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def pwd():</span><br><span class="line">    form = PwdForm()</span><br><span class="line">    if form.validate_on_submit():  # 表单验证，没有这个则无法进行错误信息提示</span><br><span class="line">        data = form.data</span><br><span class="line">        user = User.query.filter_by(name=session[&quot;user&quot;]).first()</span><br><span class="line">        if not user.check_pwd(data[&quot;old_pwd&quot;]):</span><br><span class="line">            flash(&quot;旧密码错误！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&apos;home.pwd&apos;))</span><br><span class="line">        if data[&quot;old_pwd&quot;] == data[&quot;new_pwd&quot;]:</span><br><span class="line">            flash(&quot;新旧密码不能一样！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&apos;home.pwd&apos;))</span><br><span class="line">        user.pwd = generate_password_hash(data[&quot;new_pwd&quot;])</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改密码成功，请重新登录！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;home.logout&quot;))</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去个人中心修改密码了！鉴于评论现在配置过早，我们现在暂且不配置，转向对登入日志的配置！</p><h2 id="登入日志"><a href="#登入日志" class="headerlink" title="登入日志"></a>登入日志</h2><h3 id="使用到的内容-4"><a href="#使用到的内容-4" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: 无<br>请求方法: GET<br>访问控制: @user_login_req</p><h3 id="1、编写登入日志函数"><a href="#1、编写登入日志函数" class="headerlink" title="1、编写登入日志函数"></a>1、编写登入日志函数</h3><p>这个是完全可以参考我们之前在后台对会员登录日志列表的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 登入日志</span><br><span class="line">@home.route(&apos;/loginlog/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@user_login_req</span><br><span class="line">def loginlog(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = UserLog.query.filter_by(</span><br><span class="line">        user_id=int(session[&quot;user_id&quot;])</span><br><span class="line">    ).order_by(</span><br><span class="line">        UserLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;home/loginlog.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><h3 id="2、遍历所要信息"><a href="#2、遍历所要信息" class="headerlink" title="2、遍历所要信息"></a>2、遍历所要信息</h3><p>打开loginlog.html页面，我们进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &#123;% for v in page_data.items %&#125;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.id &#125;&#125;&lt;/td&gt;</span><br><span class="line"> &lt;td&gt;&#123;&#123; v.addtime &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.ip &#125;&#125;&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、添加列表页"><a href="#3、添加列表页" class="headerlink" title="3、添加列表页"></a>3、添加列表页</h3><p>记得之前说过，凡是需要列表显示的都要有列表页page=1,打开menu.html，我们添加page=1即可！</p><h3 id="4、分页显示"><a href="#4、分页显示" class="headerlink" title="4、分页显示"></a>4、分页显示</h3><p>我们在ui文件夹下面新建一个名为home_page.html的页面，将之前的admin_page.html的代码拷贝进去，然后我们修改一下我们所指示的地方，增加nav标签，和修改class属性：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4a341c9fa9ac81cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着就是开头的引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/home_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>以及后面的替换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-footer clearfix&quot;&gt;</span><br><span class="line">         &#123;&#123; pg.page(page_data, &quot;home.loginlog&quot;) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-782b2917fe6eab04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>鉴于篇幅过长，后面的内容我们下一篇再介绍！</p><p>至此，本篇关于前台会员管理的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十三篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十二）：角色和管理员管理</title>
      <link href="/2018/06/18/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A7%92%E8%89%B2%E5%92%8C%E7%AE%A1%E7%90%86%E5%91%98%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/18/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%A7%92%E8%89%B2%E5%92%8C%E7%AE%A1%E7%90%86%E5%91%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍角色管理，管理员管理以及访问权限控制这是三个功能。角色管理，管理员管理这个和前面介绍的标签，电影，预告管理也是差不多的，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十二篇。</a></p><h2 id="角色管理"><a href="#角色管理" class="headerlink" title="角色管理"></a>角色管理</h2><p>角色管理和上面的权限管理是非常相似的，所以有些操作就是复制粘贴和套用了！</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Role<br>表单: RoleForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是role_add.html，而且我们在forms.py里面定义的字段必须与role_add.html里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问role_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from wtforms import  SelectMultipleField</span><br><span class="line">from app.models import  Auth</span><br><span class="line"></span><br><span class="line"># 添加角色</span><br><span class="line">class RoleFrom(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;角色名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;角色名称不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;角色名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入角色名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    auths = SelectMultipleField(</span><br><span class="line">        label=&quot;权限列表&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限列表不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        coerce=int,</span><br><span class="line">        choices=[(v.id, v.name) for v in Auth.query.all()],   # 数据动态填充选择，采用列表生成式</span><br><span class="line">        description=&quot;权限列表&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_url&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请选择角色列表！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改role_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import RoleForm</span><br><span class="line">from app.models import Role</span><br><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_add():</span><br><span class="line">    form = RoleForm()</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的auth_add.html来修改role_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c605f28e6785368e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加<code></code>，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开role_add.html页面，我们同样可以仿照auth_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改角色添加函数"><a href="#5、修改角色添加函数" class="headerlink" title="5、修改角色添加函数"></a>5、修改角色添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加角色</span><br><span class="line">@admin.route(&apos;/role/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_add():</span><br><span class="line">    form = RoleFrom()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        role = Role(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            auths=&apos;,&apos;.join(map(str, data[&quot;auths&quot;]))  # 采用高阶函数map来生成一个迭代器，然后用&apos;&apos;.join()来序列为一个字符串对象</span><br><span class="line">        )</span><br><span class="line">        db.session.add(role)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加角色成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的角色了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-20062bca3874a5f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查询一下数据库，发现这样的信息就说明权限添加成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from role;</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">| id | name        | auths | addtime             |</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">|  1 | 超级管理员 | NULL  | 2018-08-17 16:11:06 |</span><br><span class="line">|  2 | 管理员      | 1235  | 2018-08-12 16:24:18 |</span><br><span class="line">|  3 | 管理员1     | 12    | 2018-08-12 16:24:26 |</span><br><span class="line">|  4 | 管理员2     | 123   | 2018-08-12 16:24:33 |</span><br><span class="line">+----+-------------+-------+---------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="角色列表的配置"><a href="#角色列表的配置" class="headerlink" title="角色列表的配置"></a>角色列表的配置</h2><p>打开我们的views.py文件，我们参考之前的权限列表的配置，对角色列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 角色列表</span><br><span class="line">@admin.route(&apos;/role/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line"># 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Role.query.order_by(</span><br><span class="line">        Role.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/role_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-960ebdc861a7de76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开role_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1023529d0a72b63e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个<ul class="pagination pagination-sm no-margin pull-right"> ……. </ul>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.role_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于角色列表的介绍就到此为止了！接下来是角色的删除！</p><h2 id="角色的删除"><a href="#角色的删除" class="headerlink" title="角色的删除"></a>角色的删除</h2><p>打开views.py文件，我们新定义role_del函数：（仿照权限删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 角色删除</span><br><span class="line">@admin.route(&apos;/role/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_del(id=None):</span><br><span class="line">    role = Role.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(role)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;角色删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.role_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开role_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的auth_list.html页面的那一部分）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e6c118ad75dd807f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>提示：有小伙伴们问我为啥需要添加这个操作成功的信息提示，那是因为我们的删除操作是在我们当前的列表页面进行的，所以自然我们的页面操作提示信息就应该放在列表页！！！</p><p>最后别忘了在role_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看角色删除功能是否已经实现了呢，接下来进行角色的编辑功能的实现！</p><h2 id="角色的编辑"><a href="#角色的编辑" class="headerlink" title="角色的编辑"></a>角色的编辑</h2><p>打开views.py文件，我们在角色列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 角色编辑</span><br><span class="line">@admin.route(&apos;/role/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def role_edit(id=None):</span><br><span class="line">    form = RoleForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    role = Role.query.get_or_404(id)</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.auths.data = list(map(int, role.auths.split(&quot;,&quot;)))  # form.auths.data为整形数组，而role.auths为一个可变字符串</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        role.auths = &apos;,&apos;.join(map(str, data[&quot;auths&quot;]))</span><br><span class="line">        role.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(role)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改角色成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.role_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/role_edit.html&quot;, form=form, role=role)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建role_edit.html页面，将role_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bf9cec2c94067680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记住那个<code></code>是无法直接给它付初始值的，我们采用GET方法来请求！</p><p>然后在role_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.role_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！</p><h2 id="错误修正"><a href="#错误修正" class="headerlink" title="错误修正"></a>错误修正</h2><p>近期有小伙伴反映页面跳转到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/admin/role/edit/&lt;int:id&gt;</span><br></pre></td></tr></table></figure></p><p>就出下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builtins.AttributeError</span><br><span class="line">AttributeError: &apos;NoneType&apos; object has no attribute &apos;split&apos;</span><br></pre></td></tr></table></figure></p><p>然后我通过单点测试，发现原来这个<code>form.auths.data</code>是个空值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b9364156861e25b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>但是呢，这个choices却不是，它是一个list，里面又有tuple。我们可以考虑取出每个tuple的第一个元素，它是Int类型，然后构造一个新的int类型的list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(lambda x: x[0], form.auths.choices))</span><br></pre></td></tr></table></figure></p><p>而且我们知道，我们这个role.auths它其实是一个varchar类型，所以我们也可以把它变为一个int类型的list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(int, auths.split(&quot;,&quot;)))</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-274036b39fe2dde8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(lambda x: x[0], form.auths.choices))==list(map(int, auths.split(&quot;,&quot;)))</span><br></pre></td></tr></table></figure></p><p>把之前的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form.auths.data = list(map(int, role.auths.split(&quot;,&quot;)))  # form.auths.data为整形数组，而role.auths为一个可变字符串</span><br></pre></td></tr></table></figure></p><p>替换掉！！！<strong>记住我们不可以修改超级管理员的角色名称和权限，因为超级管理员权力最大，如果某个权限连它都没有的话，那就没有人有了！！！</strong></p><h2 id="管理员管理"><a href="#管理员管理" class="headerlink" title="管理员管理"></a>管理员管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Admin<br>表单: AdminForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段-1"><a href="#1、添加表单验证字段-1" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是<code>admin_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>admin_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问admin_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">from app.models import Role</span><br><span class="line">from wtforms.validators import  EqualTo  # EqualTo 用于比对两次密码是否一致！ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">class AdminForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;管理员名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员名称不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员名称!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=&quot;管理员密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员密码不能为空！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    repwd = PasswordField(</span><br><span class="line">        label=&quot;管理员重复密码&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;管理员重复密码不能为空！&quot;),</span><br><span class="line">            EqualTo(&apos;pwd&apos;, message=&quot;两次密码不一致！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;管理员重复密码&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入管理员重复密码!&quot;,</span><br><span class="line">            # &quot;required&quot;: &quot;required&quot;   # 注释此处显示forms报错errors信息</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    role_id = SelectField(</span><br><span class="line">        label=&quot;所属角色&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择所属角色！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 所属角色是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用下拉选择的方式进行所属角色的选择</span><br><span class="line">        choices=[(v.id, v.name) for v in Role.query.all()],</span><br><span class="line">        description=&quot;所属角色&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary btn-block btn-flat&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段-1"><a href="#2、准备页面渲染字段-1" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改admin_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import AdminForm</span><br><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">@admin.route(&apos;/admin/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def admin_add():</span><br><span class="line">    form = AdminForm()</span><br><span class="line">    from werkzeug.security import generate_password_hash</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        admin = Admin(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            pwd=generate_password_hash(data[&quot;pwd&quot;]),</span><br><span class="line">            role_id=data[&quot;role_id&quot;],</span><br><span class="line">            is_super=1  # 普通管理员为1</span><br><span class="line">        )</span><br><span class="line">        db.session.add(admin)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加管理员成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/admin_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示-1"><a href="#3、后台页面传值显示以及操作信息提示-1" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的role_add.html来修改admin_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-23be1cbfd089a80f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示-1"><a href="#4、后台页面错误信息提示-1" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开admin_add.html页面，我们同样可以仿照admin_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的管理员了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-99c0799429059300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="管理员列表的配置"><a href="#管理员列表的配置" class="headerlink" title="管理员列表的配置"></a>管理员列表的配置</h2><p>打开我们的views.py文件，我们参考之前的角色列表的配置，对管理员列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 管理员列表</span><br><span class="line">@admin.route(&apos;/admin/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def admin_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = Admin.query.join(</span><br><span class="line">        Role</span><br><span class="line">    ).filter(</span><br><span class="line">        Role.id == Admin.role_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Admin.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/admin_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a3a49afa5d3a5f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开admin_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8c1ac9bf0116a248.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开admin_list.html,删除那个<code>&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;</code>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.admin_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>错误提示：</strong>最近有小伙伴告诉我，一点击管理员列表就会出现这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinja2.exceptions.UndefinedError: &apos;app.models.Admin object&apos; has no attribute &apos;role&apos;</span><br></pre></td></tr></table></figure></p><p>那么你需要检查我们的models.py文件，查看我们的Role函数里面是否有这个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admins = db.relationship(&quot;Admin&quot;, backref=&apos;role&apos;)  # 管理员外键关系关联</span><br></pre></td></tr></table></figure></p><p>如果没有请添加，这样就应该不会出错了！</p><p>至此，关于管理员列表的介绍就到此为止了，下面介绍访问权限控制的配置！</p><h2 id="访问权限控制的配置"><a href="#访问权限控制的配置" class="headerlink" title="访问权限控制的配置"></a>访问权限控制的配置</h2><p>打开views.py文件，我们新定义一个访问权限控制装饰器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from flask import abort</span><br><span class="line"></span><br><span class="line"># 访问权限控制装饰器</span><br><span class="line">def admin_auth(f):</span><br><span class="line">    @wraps(f)</span><br><span class="line">    def decorated_function(*args, **kwargs):</span><br><span class="line">        admin = Admin.query.join(</span><br><span class="line">            Role</span><br><span class="line">        ).filter(</span><br><span class="line">            Role.id == Admin.role_id,</span><br><span class="line">            Admin.id == session[&quot;admin_id&quot;]</span><br><span class="line">        ).first()</span><br><span class="line">        auths = admin.role.auths</span><br><span class="line">        auths = list(map(int, auths.split(&quot;,&quot;)))</span><br><span class="line">        auth_list = Auth.query.all()</span><br><span class="line">        urls = [v.url for v in auth_list for val in auths if val == v.id]</span><br><span class="line">        rule = request.url_rule</span><br><span class="line">        if str(rule) not in urls:</span><br><span class="line">            abort(404)</span><br><span class="line">        return f(*args, **kwargs)</span><br><span class="line">    return decorated_function</span><br></pre></td></tr></table></figure></p><p>接下来给除了登录和后台首页以外所有的函数都加上访问权限控制装饰器，然后运行manage.py测试一下我们的项目是否可以使用。</p><p>不过这样在代码里面添加访问权限控制器挺累的，等有时间准备做一个后台权限分配页面，这样可视化操作就比较人性化了。</p><p>至此，本篇关于角色管理，管理员管理以及访问权限控制的介绍就到此为止了。也就是说所有后台的管理配置都介绍完了，下一篇我们就开始进行前台页面的配置，感谢你的赏阅。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十二篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十一）：日志管理和权限管理</title>
      <link href="/2018/06/16/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/16/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍日志管理和权限管理，其中日志管理包括操作日志列表，管理员登录日志列表，会员登录日志列表，这个和前面介绍的标签，电影，预告管理也是差不多，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十一篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十一篇。</a></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h2 id="操作日志列表"><a href="#操作日志列表" class="headerlink" title="操作日志列表"></a>操作日志列表</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Oplog ，Userlog ，Adminlog<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET<br>访问控制: @admin_login_req</p><h3 id="上下文应用处理器"><a href="#上下文应用处理器" class="headerlink" title="上下文应用处理器"></a>上下文应用处理器</h3><p>这里我们需要引入上下文应用处理器的概念，它是可以封装全局变量并把全局变量展现到模板里面，我们前面在个人中心里面没有对操作时间进行配置，因为操作时间就是需要用到上下文处理器。我们打开views.py文件，新定义下面的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"># 上下文处理器</span><br><span class="line">@admin.context_processor</span><br><span class="line">def tpl_extra():</span><br><span class="line">    data = dict(</span><br><span class="line">        online_time=datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    )</span><br><span class="line">    return data</span><br></pre></td></tr></table></figure></p><p>接着用我们这里定义的<code>online_time</code>，去填充我们的admin.html页面里面的操作时间：<img src="https://upload-images.jianshu.io/upload_images/8964398-029b0b3cc86f65d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新一下我们的页面，发现操作时间就可以正常显示了。</p><p>注意一下，<code>import datetime</code>和<code>from datetime import datetime</code>是不同的，你可以点击这里<a href="https://stackoverflow.com/questions/15707532/python-import-datetime-v-s-from-datetime-import-datetime" target="_blank" rel="noopener">区别</a>！</p><h3 id="记录增删改查操作"><a href="#记录增删改查操作" class="headerlink" title="记录增删改查操作"></a>记录增删改查操作</h3><p>打开views.py文件，我们需要把登录时用户的id一块记录下来，修改登录函数：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5a6df71f73a890bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session[&quot;admin_id&quot;] = admin.id</span><br><span class="line">session.pop(&quot;admin_id&quot;, None)</span><br></pre></td></tr></table></figure></p><p>然后继续完善我们的视views.py,我们这里以添加标签为例，进行操作的记录演示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from app.models import OpLog, UserLog, AdminLog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oplog = OpLog(</span><br><span class="line">            admin_id=session[&quot;admin_id&quot;],</span><br><span class="line">            ip=request.remote_addr,</span><br><span class="line">            reason=&quot;添加标签%s&quot; % data[&quot;name&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(oplog)</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-bf55301e3ac72ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>flask中获取ip地址使用<code>request.remote_addr</code>，可以点击这里了解一下：<br><a href="https://www.jb51.net/article/62608.htm" target="_blank" rel="noopener">python使用Flask框架获取用户IP地址的方法</a></p><p>接下来你可以去添加几个标签，然后查询一下数据库，看是不是有了相应的记录！</p><p>然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。</p><h3 id="操作日志页面显示"><a href="#操作日志页面显示" class="headerlink" title="操作日志页面显示"></a>操作日志页面显示</h3><p>打开views.py文件，我们修改日志列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 操作日志列表</span><br><span class="line">@admin.route(&apos;/oploglist/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def oplog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = OpLog.query.join(</span><br><span class="line">        Admin</span><br><span class="line">    ).filter(</span><br><span class="line">        Admin.id == OpLog.admin_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        OpLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/oplog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开oplog_list.html页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d4a97be5ef585b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.oplog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加<code>page=1</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.oplog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 操作日志列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于操作日志列表的介绍就到此为止了！接下来是管理员登录日志列表！</p><h2 id="管理员登录日志列表"><a href="#管理员登录日志列表" class="headerlink" title="管理员登录日志列表"></a>管理员登录日志列表</h2><p>管理员登录日志列表是处理与管理员登录有关的列表，自然而的我们就要修改我们的登录函数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adminlog = AdminLog(</span><br><span class="line">          admin_id=session[&quot;admin_id&quot;],</span><br><span class="line">          ip=request.remote_addr,</span><br><span class="line">      )</span><br><span class="line">      db.session.add(adminlog)</span><br><span class="line">      db.session.commit()</span><br></pre></td></tr></table></figure></p><p>接下来你可以重新登录或退出，然后查询一下数据库，看是不是有了相应的记录！</p><p>然后发现数据库里面有了日志，但是我们还需要把它们给显示出来。</p><h2 id="管理员登录日志页面显示"><a href="#管理员登录日志页面显示" class="headerlink" title="管理员登录日志页面显示"></a>管理员登录日志页面显示</h2><p>打开views.py文件，我们修改管理员登录日志列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 管理员登录日志列表</span><br><span class="line">@admin.route(&apos;/adminloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def adminloginlog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = AdminLog.query.join(</span><br><span class="line">        Admin</span><br><span class="line">    ).filter(</span><br><span class="line">        Admin.id == AdminLog.admin_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        AdminLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/adminloginlog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开adminloginlog_list.html页面，开始for循环的遍历：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-b3095c52611fe0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.adminloginlog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加page=1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.adminloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line"> &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 管理员登录日志列表</span><br><span class="line">  &lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于管理员登录日志列表的介绍就到此为止了！接下来是会员登录日志列表！</p><h2 id="会员登录日志列表"><a href="#会员登录日志列表" class="headerlink" title="会员登录日志列表"></a>会员登录日志列表</h2><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入cmd，然后输入mysql -uroot -proot后回车，接着use movie; 然后查询一下userlog的信息：select * from userlog;接着复制粘贴下面的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into userlog(user_id,ip,addtime) values(1,&quot;192.188.8.1&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(2,&quot;192.188.8.2&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(3,&quot;192.188.8.3&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(4,&quot;192.188.8.4&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(5,&quot;192.188.8.5&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(6,&quot;192.188.8.6&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(7,&quot;192.188.8.7&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.8&quot;,now());</span><br><span class="line">insert into userlog(user_id,ip,addtime) values(8,&quot;192.188.8.9&quot;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：select * from userlog;，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userlog;</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">| id | user_id | ip          | addtime             |</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">|  1 |       1 | 192.188.8.1 | 2018-08-11 18:24:37 |</span><br><span class="line">|  2 |       2 | 192.188.8.2 | 2018-08-11 18:24:38 |</span><br><span class="line">|  3 |       3 | 192.188.8.3 | 2018-08-11 18:24:38 |</span><br><span class="line">|  4 |       4 | 192.188.8.4 | 2018-08-11 18:24:38 |</span><br><span class="line">|  5 |       5 | 192.188.8.5 | 2018-08-11 18:24:38 |</span><br><span class="line">|  6 |       6 | 192.188.8.6 | 2018-08-11 18:24:38 |</span><br><span class="line">|  7 |       7 | 192.188.8.7 | 2018-08-11 18:24:38 |</span><br><span class="line">|  8 |       8 | 192.188.8.8 | 2018-08-11 18:24:38 |</span><br><span class="line">|  9 |       8 | 192.188.8.9 | 2018-08-11 18:24:38 |</span><br><span class="line">+----+---------+-------------+---------------------+</span><br><span class="line">9 rows in set (0.19 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开views.py文件，我们修改会员登录日志列表函数（仿照之前的管理员登录列表）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员登录日志列表</span><br><span class="line">@admin.route(&apos;/userloginlog/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def userloginlog_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = UserLog.query.join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        User.id == UserLog.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        UserLog.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/userloginlog_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后打开userloginlog_list.html页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-8ba362fd48f9b40d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，做了很多遍了：删除html页面的分页代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.userloginlog_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最后别忘了去grid.html页面，添加page=1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &lt;a href=&quot;&#123;&#123; url_for(&apos;admin.userloginlog_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">     &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员登录日志列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>至此，关于会员登录日志列表的介绍就到此为止了，接下来便是权限管理的介绍了！</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Auth<br>表单: AuthForm<br>请求方法: GET，POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是权限管理模块，所以对应的html页面就是<code>auth_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>auth_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问auth_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 添加权限</span><br><span class="line">class AuthForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;权限名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限名称不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;权限名称&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入权限名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    url = StringField(</span><br><span class="line">        label=&quot;权限地址&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;权限地址不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;权限地址&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_url&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入权限地址！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;修改&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>auth_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import AuthForm</span><br><span class="line">from app.models import Auth</span><br><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_add():</span><br><span class="line">    form = AuthForm()</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的movie_add.html来修改auth_add.html:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-41778f12a04c0ded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在submit的上面添加，还有form提交的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; &gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开auth_add.html页面，我们同样可以仿照movie_add.html来进行修改：（里面的title需要按照我们数据库里字段的要求进行修改）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、修改权限添加函数"><a href="#5、修改权限添加函数" class="headerlink" title="5、修改权限添加函数"></a>5、修改权限添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_add():</span><br><span class="line">    form = AuthForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        auth = Auth(</span><br><span class="line">            name=data[&quot;name&quot;],</span><br><span class="line">            url=data[&quot;url&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(auth)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加权限成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的权限了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a4cb7d4b5e150f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查询一下数据库，发现这样的信息就说明权限添加成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from auth;</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">| id | name               | url                         | addtime             |</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">|  1 | 添加标签权限       | /admin/tag/add              | 2018-08-12 14:42:30 |</span><br><span class="line">|  2 | 编辑标签权限       | /admin/tag/edit/&lt;int:id&gt;/   | 2018-08-12 14:44:07 |</span><br><span class="line">|  3 | 标签列表权限       | /admin/tag/list/&lt;int:page&gt;/ | 2018-08-12 14:45:00 |</span><br><span class="line">|  5 | 删除标签权限       | /admin/tag/del/&lt;int:id&gt;/    | 2018-08-12 14:46:02 |</span><br><span class="line">+----+--------------------+-----------------------------+---------------------+</span><br><span class="line">4 rows in set (0.10 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="权限列表的配置"><a href="#权限列表的配置" class="headerlink" title="权限列表的配置"></a>权限列表的配置</h2><p>打开我们的views.py文件，我们参考之前的标签列表的配置，对权限列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 权限列表</span><br><span class="line">@admin.route(&apos;/auth/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1  </span><br><span class="line"># 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Auth.query.order_by(</span><br><span class="line">        Auth.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=2)</span><br><span class="line">    return render_template(&quot;admin/auth_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-71f352efceaa7db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开auth_list.html页面，进行for循环的填充：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-316e41d427f5cc1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开auth_list.html,删除那个<code>&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt; ....... &lt;/ul&gt;</code>标签里的内容，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.auth_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于权限列表的介绍就到此为止了！接下来是权限的删除！</p><h2 id="权限的删除"><a href="#权限的删除" class="headerlink" title="权限的删除"></a>权限的删除</h2><p>打开views.py文件，我们新定义auth_del函数：（仿照会员删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 权限删除</span><br><span class="line">@admin.route(&apos;/auth/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_del(id=None):</span><br><span class="line">    auth = Auth.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(auth)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;权限删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.auth_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开auth_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-06a8c82facc2bc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后别忘了在auth_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看权限删除功能是否已经实现了呢，接下来进行权限的编辑功能的实现！</p><h2 id="权限的编辑"><a href="#权限的编辑" class="headerlink" title="权限的编辑"></a>权限的编辑</h2><p>打开views.py文件，我们在权限列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 权限编辑</span><br><span class="line">@admin.route(&apos;/auth/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def auth_edit(id=None):</span><br><span class="line">    form = AuthForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    auth = Auth.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        auth.url = data[&quot;url&quot;]</span><br><span class="line">        auth.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(auth)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改权限成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.auth_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/auth_edit.html&quot;, form=form, auth=auth)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建auth_edit.html页面，将auth_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且给那些需要编辑的字段赋初值：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d4f685a7f371142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后在auth_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.auth_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，看看关于权限这一功能我们的项目是不是都能使用了！</p><p>至此，本篇关于日志管理和权限管理的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第十一篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第十一篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（十）：收藏管理和密码修改</title>
      <link href="/2018/06/14/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E6%94%B6%E8%97%8F%E7%AE%A1%E7%90%86%E5%92%8C%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
      <url>/2018/06/14/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E6%94%B6%E8%97%8F%E7%AE%A1%E7%90%86%E5%92%8C%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（九）：会员和评论管理</title>
      <link href="/2018/06/13/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%BC%9A%E5%91%98%E5%92%8C%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/13/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E4%BC%9A%E5%91%98%E5%92%8C%E8%AF%84%E8%AE%BA%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍会员和评论管理，这个和前面介绍的标签，电影，预告管理差不多，所以我就加快速度，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第九篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第九篇。</a></p><h2 id="会员管理"><a href="#会员管理" class="headerlink" title="会员管理"></a>会员管理</h2><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：User<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="插入一些数据"><a href="#插入一些数据" class="headerlink" title="插入一些数据"></a>插入一些数据</h3><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入<code>cmd</code>，然后输入<code>mysql -uroot -proot</code>后回车，接着<code>use movie;</code> 然后查询一下user的信息：<code>select * from user;</code>接着复制粘贴下面的代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 会员列表</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;红&apos;,&apos;1001&apos;,&apos;1001@128.com&apos;,&apos;18888888881&apos;,&apos;红&apos;,&apos;01.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe0&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;蓝&apos;,&apos;1002&apos;,&apos;1002@128.com&apos;,&apos;18888888882&apos;,&apos;蓝&apos;,&apos;02.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe1&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;绿&apos;,&apos;1003&apos;,&apos;1003@128.com&apos;,&apos;18888888883&apos;,&apos;绿&apos;,&apos;03.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe2&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;白&apos;,&apos;1004&apos;,&apos;1004@128.com&apos;,&apos;18888888884&apos;,&apos;白&apos;,&apos;04.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe3&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;紫&apos;,&apos;1005&apos;,&apos;1005@128.com&apos;,&apos;18888888885&apos;,&apos;紫&apos;,&apos;05.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe4&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;黄&apos;,&apos;1006&apos;,&apos;1006@128.com&apos;,&apos;18888888886&apos;,&apos;黄&apos;,&apos;06.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe5&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;青&apos;,&apos;1007&apos;,&apos;1007@128.com&apos;,&apos;18888888887&apos;,&apos;青&apos;,&apos;07.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe6&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;橙&apos;,&apos;1008&apos;,&apos;1008@128.com&apos;,&apos;18888888888&apos;,&apos;橙&apos;,&apos;08.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe7&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;赤&apos;,&apos;1009&apos;,&apos;1009@128.com&apos;,&apos;18888888889&apos;,&apos;赤&apos;,&apos;09.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe8&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;靛&apos;,&apos;1010&apos;,&apos;1010@128.com&apos;,&apos;18888888891&apos;,&apos;靛&apos;,&apos;10.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394fe9&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;米&apos;,&apos;1011&apos;,&apos;1011@128.com&apos;,&apos;18888888892&apos;,&apos;米&apos;,&apos;11.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff0&apos;,now());</span><br><span class="line">insert into user(name,pwd,email,phone,info,face,uuid,addtime) values(&apos;栗&apos;,&apos;1012&apos;,&apos;1012@128.com&apos;,&apos;18888888893&apos;,&apos;栗&apos;,&apos;12.png&apos;,&apos;d32a72bdac524478b7e4f6dfc8394ff1&apos;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：<code>select * from user;</code>，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">| id | name | pwd  | email        | phone       | info | face   | addtime             | uuid                             |</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">|  1 | 红   | 1001 | 1001@128.com | 18888888881 | 红   | 01.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe0 |</span><br><span class="line">|  2 | 蓝   | 1002 | 1002@128.com | 18888888882 | 蓝   | 02.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe1 |</span><br><span class="line">|  3 | 绿   | 1003 | 1003@128.com | 18888888883 | 绿   | 03.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe2 |</span><br><span class="line">|  4 | 白   | 1004 | 1004@128.com | 18888888884 | 白   | 04.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe3 |</span><br><span class="line">|  5 | 紫   | 1005 | 1005@128.com | 18888888885 | 紫   | 05.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe4 |</span><br><span class="line">|  6 | 黄   | 1006 | 1006@128.com | 18888888886 | 黄   | 06.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe5 |</span><br><span class="line">|  7 | 青   | 1007 | 1007@128.com | 18888888887 | 青   | 07.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe6 |</span><br><span class="line">|  8 | 橙   | 1008 | 1008@128.com | 18888888888 | 橙   | 08.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe7 |</span><br><span class="line">|  9 | 赤   | 1009 | 1009@128.com | 18888888889 | 赤   | 09.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe8 |</span><br><span class="line">| 10 | 靛   | 1010 | 1010@128.com | 18888888891 | 靛   | 10.png | 2018-08-10 19:18:05 | d32a72bdac524478b7e4f6dfc8394fe9 |</span><br><span class="line">| 11 | 米   | 1011 | 1011@128.com | 18888888892 | 米   | 11.png | 2018-08-10 19:18:06 | d32a72bdac524478b7e4f6dfc8394ff0 |</span><br><span class="line">| 12 | 栗   | 1012 | 1012@128.com | 18888888893 | 栗   | 12.png | 2018-08-10 19:18:10 | d32a72bdac524478b7e4f6dfc8394ff1 |</span><br><span class="line">+----+------+------+--------------+-------------+------+--------+---------------------+----------------------------------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>当然你打开navicat在查询框里执行这段代码也是可以的，然后把图片都拷贝到uploads/users文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-abb9fe87fad88d72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="会员列表分页"><a href="#会员列表分页" class="headerlink" title="会员列表分页"></a>会员列表分页</h3><p>打开views.py文件，我们修改会员列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from app.models import User</span><br><span class="line"></span><br><span class="line"># 会员列表</span><br><span class="line">@admin.route(&apos;/user/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = User.query.order_by(</span><br><span class="line">        User.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/user_list.html&quot;, page_data=page_data)</span><br><span class="line">    return render_template(&quot;admin/user_list.html&quot;)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.user_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 会员列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开user_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-d66829c3d775b6dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开user_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.user_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于会员列表的介绍就到此为止了！接下来是会员的查看！</p><h3 id="会员的查看"><a href="#会员的查看" class="headerlink" title="会员的查看"></a>会员的查看</h3><p>打开views.py文件，我们修改user_view函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看会员</span><br><span class="line">@admin.route(&apos;/user/view/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_view(id=None):</span><br><span class="line">    user = User.query.get_or_404(int(id))</span><br><span class="line">    return render_template(&quot;admin/user_view.html&quot;, user=user)</span><br></pre></td></tr></table></figure></p><p>接着打开user_view.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-cacbe8b2e137541e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们的查看功能就完成了，接下来是实现删除会员的操作了！</p><h2 id="会员的删除"><a href="#会员的删除" class="headerlink" title="会员的删除"></a>会员的删除</h2><p>首先打开user_list.html页面，我们进行删除的跳转链接配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;label label-danger&quot; href=&quot;&#123;&#123; url_for(&apos;admin.user_del&apos;, id =v.id) &#125;&#125;&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>接着就是打开views.py文件，定义我们的会员删除函数，我们可以仿照之前的电影删除或者是预告删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员删除</span><br><span class="line">@admin.route(&apos;/user/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def user_del(id=None):</span><br><span class="line">    user = User.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;会员删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.user_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开user_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-9411846ce2a29b04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后去测试一下我们的项目，看一看关于会员列表的相关功能是否都已经实现了呢！</p><h2 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h2><h3 id="使用到的内容-1"><a href="#使用到的内容-1" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Comment<br>表单: 无 （这个不涉及到表单的提交）<br>请求方法: GET （不涉及到信息的提交）<br>访问控制: @admin_login_req</p><h3 id="插入一些数据-1"><a href="#插入一些数据-1" class="headerlink" title="插入一些数据"></a>插入一些数据</h3><p>为了后续开发的必要，我们来在数据库里，插入一些数据：在终端输入<code>cmd</code>，然后输入<code>mysql -uroot -proot</code>后回车，接着<code>use movie;</code> 然后查询一下comment的信息：<code>select * from comment;</code>接着复制粘贴下面的代码:（记住电影id要和你之前定义的电影id一样，因为是外键关联，当然也包括会员Id）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,1,&quot;好看&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,2,&quot;不错&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,3,&quot;经典&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,4,&quot;给力&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,5,&quot;精彩&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,6,&quot;无聊&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(5,7,&quot;乏味&quot;,now());</span><br><span class="line">insert into comment(movie_id,user_id,content,addtime) values(1,8,&quot;难看&quot;,now());</span><br></pre></td></tr></table></figure></p><p>之后回车，然后再次查询一下我们的数据库：select * from comment;，看是不是这样的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from comment;</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">| id | content | movie_id | user_id | addtime             |</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">|  1 | 好看    |        1 |       1 | 2018-08-10 20:18:16 |</span><br><span class="line">|  2 | 不错    |        1 |       2 | 2018-08-10 20:18:16 |</span><br><span class="line">|  3 | 经典    |        5 |       3 | 2018-08-10 20:18:16 |</span><br><span class="line">|  4 | 给力    |        5 |       4 | 2018-08-10 20:18:16 |</span><br><span class="line">|  5 | 精彩    |        5 |       5 | 2018-08-10 20:18:16 |</span><br><span class="line">|  6 | 无聊    |        1 |       6 | 2018-08-10 20:18:16 |</span><br><span class="line">|  7 | 乏味    |        5 |       7 | 2018-08-10 20:18:16 |</span><br><span class="line">|  8 | 难看    |        1 |       8 | 2018-08-10 20:18:18 |</span><br><span class="line">+----+---------+----------+---------+---------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>接着打开views.py文件，我们修改评论列表函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">@admin.route(&apos;/comment/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def comment_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">        # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Comment.query.join(</span><br><span class="line">        Movie</span><br><span class="line">    ).join(</span><br><span class="line">        User</span><br><span class="line">    ).filter(</span><br><span class="line">        Movie.id == Comment.movie_id,</span><br><span class="line">        User.id == Comment.user_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Comment.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/comment_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">           &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 评论列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开comment_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba50a35983497c8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开comment_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.comment_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于评论列表的介绍就到此为止了！接下来是评论的删除！</p><h2 id="评论的删除"><a href="#评论的删除" class="headerlink" title="评论的删除"></a>评论的删除</h2><p>打开views.py文件，我们新定义comment_del函数：（仿照会员删除的函数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 删除评论</span><br><span class="line">@admin.route(&apos;/comment/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def comment_del(id=None):</span><br><span class="line">    comment = Comment.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(comment)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;评论删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.comment_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>然后打开comment_list.html页面，我们添加删除成功的flash提示（同样可以复制我们的preview_list.html页面的那一部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-1f20a5232b4b4802.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后别忘了在comment_list.html页面添加删除跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.comment_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger pull-right&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后去测试一下我们的项目，看一看关于评论列表的相关功能是否都已经实现了呢！</p><p>至此本篇关于会员和评论管理的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第九篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第九篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（八）：预告管理</title>
      <link href="/2018/06/12/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E9%A2%84%E5%91%8A%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/12/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E9%A2%84%E5%91%8A%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍预告管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第八篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第八篇。</a></p><h2 id="预告管理"><a href="#预告管理" class="headerlink" title="预告管理"></a>预告管理</h2><p>包括添加预告和预告列表这两个模块，下面我们先介绍添加预告这个功能的实现。</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Preview<br>表单: PreviewForm<br>请求方法: GET ,POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是预告添加模块，所以对应的html页面就是<code>preview_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>preview_add.html</code>里面的保持一致！（如果觉得不是很容易看出来，可以运行项目，直接访问preview_add.html页面，这样明显多了！）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 添加预告</span><br><span class="line">class PreviewForm(FlaskForm):</span><br><span class="line">    title = StringField(</span><br><span class="line">        label=&quot;预告标题&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;预告标题不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;预告标题&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_title&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入预告标题！！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    logo = FileField(</span><br><span class="line">        label=&quot;预告封面&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传预告封面！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;预告封面&quot;,</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>preview_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import PreviewForm</span><br><span class="line">from app.models import Preview</span><br><span class="line"></span><br><span class="line"># 上映预告列表</span><br><span class="line">@admin.route(&apos;/preview/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示以及操作信息提示"><a href="#3、后台页面传值显示以及操作信息提示" class="headerlink" title="3、后台页面传值显示以及操作信息提示"></a>3、后台页面传值显示以及操作信息提示</h3><p>可以仿照前面的movie_add.html来修改preview_add.html:<img src="https://upload-images.jianshu.io/upload_images/8964398-6385c8afabe9f97b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在submit的上面添加<code></code>，还有form提交的方法以及上传文件类别：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开preview_add.html页面，我们同样可以仿照movie_add.html来进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5、为视图函数添加方法"><a href="#5、为视图函数添加方法" class="headerlink" title="5、为视图函数添加方法"></a>5、为视图函数添加方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告添加</span><br><span class="line">@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;)</span><br></pre></td></tr></table></figure><h3 id="6、修改预告添加函数"><a href="#6、修改预告添加函数" class="headerlink" title="6、修改预告添加函数"></a>6、修改预告添加函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告添加</span><br><span class="line">@admin.route(&apos;/preview/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_add():</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line">        logo = change_filename(file_logo)</span><br><span class="line">        # 把他们进行保存到文件夹下面</span><br><span class="line">        form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo)</span><br><span class="line">        # 之后的url和logo就是我们修改之后的地址</span><br><span class="line">        preview = Preview(</span><br><span class="line">            title=data[&quot;title&quot;],</span><br><span class="line">            logo=logo,</span><br><span class="line">        )</span><br><span class="line">        db.session.add(preview)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加预告成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.preview_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/preview_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><p>然后运行一下我们的manage.py文件，就可以去后台添加我们的上映预告了。</p><h2 id="预告列表的配置"><a href="#预告列表的配置" class="headerlink" title="预告列表的配置"></a>预告列表的配置</h2><p>打开我们的views.py文件，我们参考之前的电影列表的配置，对预告列表进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告列表</span><br><span class="line">@admin.route(&apos;/preview/list/&lt;int:page&gt;/&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Preview.query.order_by(</span><br><span class="line">        Preview.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/preview_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去我们的grid.html页面添加page参数（page=1），记住所以的列表都要有一个初始页，也就是说肯定有一个页面去显示，就算没有数据也要有页面，否则就是404嘛，这既然不是404，就得有个页面，空的页面也是可以的：<img src="https://upload-images.jianshu.io/upload_images/8964398-ac09258658426227.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们打开preview_list.html页面，进行for循环的填充：<img src="https://upload-images.jianshu.io/upload_images/8964398-fcd390e38d4cc118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着就是分页功能了，我们参考之前在电影列表页面的配置，打开preview_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.preview_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py发现图片太大了，我们可以限制一下它的大小：<img src="https://upload-images.jianshu.io/upload_images/8964398-fb3879ea085971f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，这样就好多了：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba1d33e6ffbefc57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，关于预告列表的介绍就到此为止了！接下来是预告的删除和编辑！</p><h2 id="预告的删除"><a href="#预告的删除" class="headerlink" title="预告的删除"></a>预告的删除</h2><p>打开views.py文件，我们在预告列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 预告删除</span><br><span class="line">@admin.route(&apos;/preview/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_del(id=None):</span><br><span class="line">    preview = Preview.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(preview)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;预告删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.preview_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开preview_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">   &lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">  &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box-body table-responsive no-padding&quot;&gt;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开preview_list.html页面，修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="预告的编辑"><a href="#预告的编辑" class="headerlink" title="预告的编辑"></a>预告的编辑</h2><p>打开views.py文件，我们在预告列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 上映预告编辑</span><br><span class="line">@admin.route(&apos;/preview/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def preview_edit(id):</span><br><span class="line">    form = PreviewForm()</span><br><span class="line">    form.logo.validators = []  # 如果封面为空，我们就不需要修改</span><br><span class="line">    preview = Preview.query.get_or_404(int(id))</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.title.data = preview.title   # 给title赋初始值</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        if form.logo.data != &quot;&quot;:</span><br><span class="line">            file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">            preview.logo = change_filename(file_logo)</span><br><span class="line">            form.logo.data.save(app.config[&quot;UP_DIR&quot;] + preview.logo)</span><br><span class="line">        preview.title = data[&quot;title&quot;]</span><br><span class="line">        db.session.add(preview)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改预告成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&apos;admin.preview_edit&apos;, id=id))</span><br><span class="line">    return render_template(&quot;admin/preview_edit.html&quot;, form=form, preview=preview)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建preview_edit.html页面，将preview_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑。并且将其中的图片地址替换为我们当前预告的图片地址（赋初值）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;uploads/&apos;+preview.logo) &#125;&#125;&quot; style=&quot;margin-top:5px;&quot; class=&quot;img-responsive&quot;alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>然后在preview_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.preview_edit&apos;, id =v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>刷新一下，我们的项目关于预告这一功能是不是都能使用了！</p><p>至此，我们关于预告的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第八篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第八篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（七）：电影管理</title>
      <link href="/2018/06/11/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%94%B5%E5%BD%B1%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/11/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%94%B5%E5%BD%B1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们介绍电影管理，这个和前面介绍的标签管理差不多，话不多说，开始学习吧。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第七篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第七篇。</a></p><h2 id="电影管理"><a href="#电影管理" class="headerlink" title="电影管理"></a>电影管理</h2><p>包括添加电影和电影列表这两个模块，下面我们先介绍添加电影这个功能的实现。</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Movie<br>表单: MovieForm<br>请求方法: GET POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是标签添加模块，所以对应的html页面就是<code>movie_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>movie_add.html</code>里面的保持一致！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">from wtforms import FileField, TextAreaField, SelectField</span><br><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加电影</span><br><span class="line">class MovieForm(FlaskForm):</span><br><span class="line">    title= StringField(</span><br><span class="line">        label=&quot;片名&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;片名不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;片名&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_title&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入片名！！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    url = FileField(</span><br><span class="line">        label=&quot;文件&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传文件！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;文件&quot;,</span><br><span class="line">    )</span><br><span class="line">    info = TextAreaField(</span><br><span class="line">        label=&quot;简介&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;简介不能为空&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;简介&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;rows=&quot;: 10,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    logo = FileField(</span><br><span class="line">        label=&quot;封面&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请上传封面！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;封面&quot;,</span><br><span class="line">    )</span><br><span class="line">    star = SelectField(</span><br><span class="line">        label=&quot;星级&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择星级！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 星级是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用下拉选择的方式进行星级的选择</span><br><span class="line">        choices=[(1, &quot;1星级&quot;), (2, &quot;2星级&quot;), (3, &quot;3星级&quot;), (4, &quot;4星级&quot;), (5, &quot;5星级&quot;)],</span><br><span class="line">        description=&quot;星级&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    tag_id = SelectField(</span><br><span class="line">        label=&quot;所属标签&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请选择标签！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        # 标签id也是整数型</span><br><span class="line">        coerce=int,</span><br><span class="line">        # 采用列表递归式来取出所有的标签</span><br><span class="line">        choices=[(v.id, v.name)for v in Tag.query.all()],</span><br><span class="line">        description=&quot;标签&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    area = StringField(</span><br><span class="line">        label=&quot;上映地区&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入地区！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;地区&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_area&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入地区！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    length = StringField(</span><br><span class="line">        label=&quot;电影片长&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入片长！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;片长&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_length&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入片长！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    release_time = StringField(</span><br><span class="line">        label=&quot;上映时间&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入上映时间！&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;上映时间&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_release_time&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入上映时间！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &apos;编辑&apos;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>movie_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import MovieForm</span><br><span class="line">from app.models import Movie</span><br><span class="line"></span><br><span class="line"># 电影添加</span><br><span class="line">@admin.route(&apos;/movie/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_add():</span><br><span class="line">    form = MovieForm()</span><br><span class="line">    return render_template(&quot;admin/movie_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示"><a href="#3、后台页面传值显示" class="headerlink" title="3、后台页面传值显示"></a>3、后台页面传值显示</h3><p>修改<code>movie_add.html</code>:<img src="https://upload-images.jianshu.io/upload_images/8964398-1df230c892fb53a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在submit的上面添加<code></code>，还有form提交的方法以及上传文件类别：<br>···<br>  <form role="form" method="post" enctype="multipart/form-data"><br>···</form></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开movie_tag.html页面，我们进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.title.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d5274e79c71a8219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、文件上传"><a href="#5、文件上传" class="headerlink" title="5、文件上传"></a>5、文件上传</h3><p>打开app/–init–.py文件，我们现在上传文件代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">app.config[&quot;UP_DIR&quot;] = os.path.join(os.path.abspath(os.path.dirname(__file__)), &quot;static/uploads/&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="6、定义修改文件名称函数"><a href="#6、定义修改文件名称函数" class="headerlink" title="6、定义修改文件名称函数"></a>6、定义修改文件名称函数</h3><p>在views.py文件新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from app import db, app</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">import os</span><br><span class="line">import uuid</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改文件名称</span><br><span class="line">def change_filename(filename):</span><br><span class="line">    fileinfo = os.path.splitext(filename)</span><br><span class="line">    filename = datetime.now().strftime(&quot;%Y%m%d%H%M%S&quot;) + str(uuid.uuid4().hex) + fileinfo[-1]  # 文件后缀</span><br><span class="line">    return filename</span><br></pre></td></tr></table></figure></p><h3 id="7、修改添加电影函数"><a href="#7、修改添加电影函数" class="headerlink" title="7、修改添加电影函数"></a>7、修改添加电影函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 电影添加</span><br><span class="line">@admin.route(&apos;/movie/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_add():</span><br><span class="line">    form = MovieForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        file_url = secure_filename(form.url.data.filename)</span><br><span class="line">        file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line">        url = change_filename(file_url)</span><br><span class="line">        logo = change_filename(file_logo)</span><br><span class="line">        # 把他们进行保存到文件夹下面</span><br><span class="line">        form.url.data.save(app.config[&quot;UP_DIR&quot;] + url)</span><br><span class="line">        form.logo.data.save(app.config[&quot;UP_DIR&quot;] + logo)</span><br><span class="line">        # 之后的url和logo就是我们修改之后的地址</span><br><span class="line">        movie = Movie(</span><br><span class="line">            title=data[&quot;title&quot;],</span><br><span class="line">            url=url,</span><br><span class="line">            info=data[&quot;info&quot;],</span><br><span class="line">            logo=logo,</span><br><span class="line">            star=data[&quot;star&quot;],</span><br><span class="line">            playnum=0,</span><br><span class="line">            commentnum=0,</span><br><span class="line">            tag_id=data[&quot;tag_id&quot;],</span><br><span class="line">            area=data[&apos;area&apos;],</span><br><span class="line">            release_time=data[&quot;release_time&quot;],</span><br><span class="line">            length=data[&quot;length&quot;],</span><br><span class="line">        )</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/movie_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure><h3 id="8、添加电影成功消息闪现"><a href="#8、添加电影成功消息闪现" class="headerlink" title="8、添加电影成功消息闪现"></a>8、添加电影成功消息闪现</h3><p>打开movie_add.html页面，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-b78bb6d46fa669bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的manage.py发现报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">builtins.TypeError</span><br><span class="line">TypeError: an integer is required (got type str)</span><br></pre></td></tr></table></figure></p><p>那是因为我们的星级和所属标签是Int类型，我们需要转换一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">star= int(data[&quot;star&quot;]),</span><br><span class="line">tag_id=int(data[&quot;tag_id&quot;]),</span><br></pre></td></tr></table></figure></p><p>接着重新运行一下我们的manage.py文件，发现电影添加没有任何问题。</p><p>至此，我们添加电影的功能就介绍完了，下面介绍电影管理列表的配置！</p><h2 id="电影管理列表的配置"><a href="#电影管理列表的配置" class="headerlink" title="电影管理列表的配置"></a>电影管理列表的配置</h2><p>电影管理列表的配置其实和我们之前配置的标签列表非常相似，所以我们介绍就快一点，打开admin/views.py文件，修改movie_list函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 电影列表</span><br><span class="line">@admin.route(&apos;/movie/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    # 查询的时候关联标签，采用join来加进去,多表关联用filter,过滤用filter_by</span><br><span class="line">    page_data = Movie.query.join(Tag).filter(</span><br><span class="line">        Tag.id == Movie.tag_id</span><br><span class="line">    ).order_by(</span><br><span class="line">        Movie.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=10)</span><br><span class="line">    return render_template(&quot;admin/movie_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>接着去修改grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">       &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 电影列表</span><br><span class="line"> &lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开movie_list.htm页面，开始for循环的遍历：<img src="https://upload-images.jianshu.io/upload_images/8964398-da3301c9cce86c9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是分页功能了，我们参考之前在标签列表页面的配置，打开movie_list.html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>去掉上面一段代码，我们在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.movie_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于电影列表的介绍就到此为止了！接下来是电影的删除和编辑！</p><h2 id="电影的删除"><a href="#电影的删除" class="headerlink" title="电影的删除"></a>电影的删除</h2><p>打开views.py文件，我们在电影列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 电影删除</span><br><span class="line">@admin.route(&apos;/movie/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_del(id=None):</span><br><span class="line">    movie = Movie.query.get_or_404(int(id))</span><br><span class="line">    db.session.delete(movie)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;电影删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.movie_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开movie_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<img src="https://upload-images.jianshu.io/upload_images/8964398-0e45aebb89f51752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="电影的编辑"><a href="#电影的编辑" class="headerlink" title="电影的编辑"></a>电影的编辑</h2><p>打开views.py文件，我们在电影列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    movie = Movie.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建movie_edit.html页面，将movie_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为修改，为form.title增加初值(value=movie.title):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.title(value=movie.title)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>别忘了还有form.url，form.info，form.star，form.tag_id，form.area，form.release_time和form.length：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &#123;&#123; form.url(value=movie.url) &#125;&#125;</span><br><span class="line"></span><br><span class="line"> &#123;&#123; form.info(value=movie.info) &#125;&#125;</span><br><span class="line"></span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><p><strong>注意form.logo的初值和其他不一样</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&apos;static&apos;,filename=&apos;uploads/&apos;+ movie.logo) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>就是这里：<img src="https://upload-images.jianshu.io/upload_images/8964398-ff3912dea133b403.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有js里面的也需要修改：<img src="https://upload-images.jianshu.io/upload_images/8964398-3d6ae2fe8d10c1c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还要在movie_list里面修改页面的跳转：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.movie_edit&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，发现封面图片不显示：<img src="https://upload-images.jianshu.io/upload_images/8964398-d855382199c17182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>将图片里的data-src修改为src:<img src="https://upload-images.jianshu.io/upload_images/8964398-b91ffc40180b7349.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新发现info，tag_id，star还是不行，我们需要重新配置这三个字段的初始值,去掉之前在movie_edit里面赋予的初始值(就是只有这种，不带初值)，我们直接在views.py文件里配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    movie = Movie.query.get_or_404(id)</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.info.data = movie.info</span><br><span class="line">        form.tag_id.data = movie.tag_id</span><br><span class="line">        form.star.data = movie.star</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>之后就是对修改的部分进行提交之后的保存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">movie.title = data[&quot;title&quot;]</span><br><span class="line">movie.info = data[&quot;info&quot;]</span><br><span class="line">movie.star = data[&quot;star&quot;]</span><br><span class="line">movie.tag_id = data[&quot;tag_id&quot;]</span><br><span class="line">movie.length = data[&quot;length&quot;]</span><br><span class="line">movie.area = data[&quot;area&quot;]</span><br><span class="line">movie.release_time = data[&quot;release_time&quot;]</span><br><span class="line">db.session.add(movie)</span><br><span class="line">db.session.commit()</span><br><span class="line">flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br></pre></td></tr></table></figure></p><p>不过这还有一个问题，那就是片名的唯一性，我们不可能有同名的电影（现实里面是有的，但做不到完全一样，至少在演员，导演，剧情，上映时间肯定有一个不一样，但这里我们只限定片名不一样即可！）</p><h3 id="片名的唯一性"><a href="#片名的唯一性" class="headerlink" title="片名的唯一性"></a>片名的唯一性</h3><p>打开views.py文件，我们修改电影编辑函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"># 电影编辑</span><br><span class="line">@admin.route(&apos;/movie/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def movie_edit(id=None):</span><br><span class="line">    form = MovieForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    form.url.validators = []    # 因为是编辑，所以首先必须是非空才需要验证</span><br><span class="line">    form.logo.validators = []</span><br><span class="line">    movie = Movie.query.get_or_404(int(id))</span><br><span class="line">    if request.method == &quot;GET&quot;:</span><br><span class="line">        form.info.data = movie.info</span><br><span class="line">        form.tag_id.data = movie.tag_id</span><br><span class="line">        form.star.data = movie.star</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        movie_count = Movie.query.filter_by(title=data[&quot;title&quot;]).count()</span><br><span class="line">        # 电影去重，唯一性</span><br><span class="line">        if movie.title != data[&quot;title&quot;] and movie_count == 1:</span><br><span class="line">            flash(&quot;该影片已经存在了！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;admin.movie_edit&quot;, id=id))</span><br><span class="line">        # 如果文件夹不存在，那么就创建一个文件夹</span><br><span class="line">        if not os.path.exists(app.config[&quot;UP_DIR&quot;]):  # 如果文件夹不存在</span><br><span class="line">            os.makedirs(app.config[&quot;UP_DIR&quot;])  # 新建对应的文件夹</span><br><span class="line">            os.chmod(app.config[&quot;UP_DIR&quot;], &quot;rw&quot;)  # 给文件夹赋予读写的权限</span><br><span class="line"></span><br><span class="line">        # 如果视频文件修改了，就进行替换</span><br><span class="line">        if form.url.data.filename != &quot;&quot;:</span><br><span class="line">            file_url = secure_filename(form.url.data.filename)</span><br><span class="line">            movie.url = change_filename(file_url)</span><br><span class="line">            form.url.data.save(app.config[&quot;UP_DIR&quot;] + movie.url)</span><br><span class="line"></span><br><span class="line">        # 如果图片文件修改了，就进行替换</span><br><span class="line">        if form.logo.data.filename != &quot;&quot;:</span><br><span class="line">            file_logo = secure_filename(form.logo.data.filename)</span><br><span class="line">            movie.logo = change_filename(file_logo)</span><br><span class="line">            form.logo.data.save(app.config[&quot;UP_DIR&quot;] + movie.logo)</span><br><span class="line"></span><br><span class="line">        movie.title = data[&quot;title&quot;]</span><br><span class="line">        movie.info = data[&quot;info&quot;]</span><br><span class="line">        movie.star = data[&quot;star&quot;]</span><br><span class="line">        movie.tag_id = data[&quot;tag_id&quot;]</span><br><span class="line">        movie.length = data[&quot;length&quot;]</span><br><span class="line">        movie.area = data[&quot;area&quot;]</span><br><span class="line">        movie.release_time = data[&quot;release_time&quot;]</span><br><span class="line">        db.session.add(movie)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改电影成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.movie_edit&quot;, id=movie.id))</span><br><span class="line">    return render_template(&quot;admin/movie_edit.html&quot;, form=form, movie=movie)</span><br></pre></td></tr></table></figure></p><p>接下来去movie_edit.html页面添加操作信息提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">   &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">          &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;err&quot;]) %&#125;</span><br><span class="line"> &lt;div class=&quot;alert alert-danger alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-ban&quot;&gt;&lt;/i&gt; 操作失败&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下我们的后台，发现关于电影这一功能是不是都能使用了！</p><p>至此，我们关于电影管理的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第七篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第七篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（六）：标签管理</title>
      <link href="/2018/06/09/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/"/>
      <url>/2018/06/09/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%A0%87%E7%AD%BE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们继续介绍后台页面逻辑的开发（所有的内容都是在后台admin下面，不与前台home有关系），今天分享的是关于标签的介绍，内容比较难懂，请多熟悉一下。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第六篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第六篇。</a></p><h2 id="标签管理的配置"><a href="#标签管理的配置" class="headerlink" title="标签管理的配置"></a>标签管理的配置</h2><p>后面所有的后台功能的配置几乎都是这样，像电影管理，预告管理，会员管理。。。<br>所以我这里介绍详细一点，后面的可能就没这么详细了，好了话不多说，我们开始介绍！</p><h3 id="使用到的内容"><a href="#使用到的内容" class="headerlink" title="使用到的内容"></a>使用到的内容</h3><p>我们将使用到的内容有：<br>模型：Tag<br>表单: TagForm<br>请求方法: GET POST<br>访问控制: @admin_login_req</p><h3 id="1、添加表单验证字段"><a href="#1、添加表单验证字段" class="headerlink" title="1、添加表单验证字段"></a>1、添加表单验证字段</h3><p>打开forms.py，我们定义Form字段，注意因为是标签添加模块，所以对应的html页面就是<code>tag_add.html</code>，而且我们在forms.py里面定义的字段必须与<code>tag_add.html</code>里面的保持一致！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 添加标签</span><br><span class="line">class TagForm(FlaskForm):</span><br><span class="line">    name = StringField(</span><br><span class="line">        label=&quot;名称&quot;,</span><br><span class="line">        validators=[</span><br><span class="line">            DataRequired(&quot;请输入标签&quot;)</span><br><span class="line">        ],</span><br><span class="line">        description=&quot;标签&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;form-control&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;input_name&quot;,</span><br><span class="line">            &quot;placeholder&quot;: &quot;请输入标签名称！&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    submit = SubmitField(</span><br><span class="line">        &quot;添加&quot;,</span><br><span class="line">        render_kw=&#123;</span><br><span class="line">            &quot;class&quot;: &quot;btn btn-primary&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h3 id="2、准备页面渲染字段"><a href="#2、准备页面渲染字段" class="headerlink" title="2、准备页面渲染字段"></a>2、准备页面渲染字段</h3><p>打开admin/views.py文件，我们修改<code>tag_add</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app.admin.forms import TagForm</span><br><span class="line">from app.models import Tag</span><br><span class="line"></span><br><span class="line"># 标签编辑</span><br><span class="line">@admin.route(&apos;/tag/add&apos;)</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_add():</span><br><span class="line">    form = TagForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    return render_template(&quot;admin/tag_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="3、后台页面传值显示"><a href="#3、后台页面传值显示" class="headerlink" title="3、后台页面传值显示"></a>3、后台页面传值显示</h3><p>修改<code>tag_add.html</code>:<img src="https://upload-images.jianshu.io/upload_images/8964398-194356115caf95e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="4、后台页面错误信息提示"><a href="#4、后台页面错误信息提示" class="headerlink" title="4、后台页面错误信息提示"></a>4、后台页面错误信息提示</h3><p>打开tag_tag.html页面，我们进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for err in form.name.errors %&#125;</span><br><span class="line">&lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;p style=&quot;color:red&quot;&gt;&#123;&#123; err &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-cde6ef1259bb0157.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="5、修改提交方法"><a href="#5、修改提交方法" class="headerlink" title="5、修改提交方法"></a>5、修改提交方法</h3><p>打开tag_tag.html页面，我们进行修改：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9dfbf4cc4cc63623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着我们回到views.py文件，修改add_tag函数的提交方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 标签编辑</span><br><span class="line">@admin.route(&apos;/tag/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br></pre></td></tr></table></figure></p><h3 id="6、标签去除重名"><a href="#6、标签去除重名" class="headerlink" title="6、标签去除重名"></a>6、标签去除重名</h3><p>打开views.py文件，我们继续修改tag_add函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 标签编辑</span><br><span class="line">@admin.route(&apos;/tag/add&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_add():</span><br><span class="line">    form = TagForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        tag = Tag.query.filter_by(name=data[&quot;name&quot;]).count()</span><br><span class="line">        # 标签去重</span><br><span class="line">        if tag == 1:</span><br><span class="line">            flash(&quot;该标签已经存在了！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;admin.tag_add&quot;))</span><br><span class="line">        tag = Tag(</span><br><span class="line">            name=data[&quot;name&quot;]</span><br><span class="line">        )</span><br><span class="line">        db.session.add(tag)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;添加标签成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.tag_add&quot;))</span><br><span class="line">    return render_template(&quot;admin/tag_add.html&quot;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="7、添加成功或者失败提示"><a href="#7、添加成功或者失败提示" class="headerlink" title="7、添加成功或者失败提示"></a>7、添加成功或者失败提示</h3><p>打开static/admin/index.html页面，我们用浏览器打开，点击UI element/General，就出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-e9a0cbe184c1387a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>或者点击这里<a href="https://adminlte.io/" target="_blank" rel="noopener">admin LE2</a>，先下载文件，然后点击查看也可以！接着我们按键盘上的F12开启开发者工具，然后定位绿色的成功框，复制它的html源代码到我们的tag_agg.html页面，然后修改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">  &lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line">        添加标签成功！</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>觉得格式不好看，可以ctal+alt+L进行代码的格式化。然后进行for循环遍历，就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-bde4aa4c1d7937cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>因为已经for循环了，所以需要把里面的 <strong>添加标签成功！</strong>修改为！<br>那么失败呢？也是类似的操作（用红色的框的代码），这里就只附上代码了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for msg in get_flashed_messages("err") %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger alert-dismissible"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>×</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon fa fa-ban"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 操作失败<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>运行一下manage.py，然后添加一个标签，发现出了问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-ad6fa066a9b6a432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这是因为我们的get_flashed_messages用错了，可以点击这里查看官方文档：<a href="http://docs.jinkan.org/docs/flask/patterns/flashing.html" target="_blank" rel="noopener">过滤闪现消息</a><br>修改为这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get_flashed_messages(category_filter=[&quot;ok&quot;])</span><br><span class="line"></span><br><span class="line">get_flashed_messages(category_filter=[&quot;err&quot;])</span><br></pre></td></tr></table></figure></p><p>现在添加就没有问题了！</p><p>至此，我们关于标签的添加就介绍完了，下面就是标签的动态显示了！</p><h2 id="标签列表的配置"><a href="#标签列表的配置" class="headerlink" title="标签列表的配置"></a>标签列表的配置</h2><p>打开admin/views.py文件，修改tag_list函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 标签列表</span><br><span class="line">@admin.route(&apos;/tag/list/&lt;int:page&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_list(page=None):</span><br><span class="line">    if page is None:</span><br><span class="line">        page = 1</span><br><span class="line">    page_data = Tag.query.order_by(</span><br><span class="line">        Tag.addtime.desc()</span><br><span class="line">    ).paginate(page=page, per_page=1)</span><br><span class="line">    return render_template(&quot;admin/tag_list.html&quot;, page_data=page_data)</span><br></pre></td></tr></table></figure></p><p>然后tag_list.htm页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for v in page_data.items %&#125;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;&#123;&#123; v.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">td&gt;&#123;&#123; v.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; v.addtime &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;a class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br><span class="line">&amp;nbsp;</span><br><span class="line">&lt;a class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line"> &lt;/tr&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开grid.html页面，修改gird中标签列表的url，为其添加参数page =1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_list&apos;, page=1) &#125;&#125;&quot;&gt;</span><br><span class="line">         &lt;i class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 标签列表</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h2 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h2><p>点击这里，获取api<a href="http://www.pythondoc.com/flask-sqlalchemy/api.html#id4" target="_blank" rel="noopener">实用工具</a>，我们采用了macro的语法，我们在static文件夹下面新建一个ui的文件，然后在里面创建admin_page.html文件：<img src="https://upload-images.jianshu.io/upload_images/8964398-5b9027a160859caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后复制这段代码到里面去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro page(data,url) -%&#125;</span><br><span class="line">    &#123;% if data %&#125;</span><br><span class="line">        &lt;ul class=&quot;pagination pagination-sm no-margin pull-right&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=1) &#125;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &#123;% if data.has_prev %&#125;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.prev_num) &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                &lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% for v in data.iter_pages() %&#125;</span><br><span class="line">                &#123;% if v %&#125;</span><br><span class="line">                    &#123;% if v == data.page %&#125;</span><br><span class="line">                        &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;&#123;&#123; v &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                    &#123;% else %&#125;</span><br><span class="line">                        &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=v) &#125;&#125;&quot;&gt;&#123;&#123; v &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            &#123;% if data.has_next %&#125;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.next_num) &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                &lt;li class=&quot;disabled&quot;&gt;&lt;a href=&quot;#&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(url,page=data.pages) &#125;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;%- endmacro %&#125;</span><br></pre></td></tr></table></figure></p><p>然后去掉tag_list.html里面的图中所示的那段代码：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-13cd9dbcb7227a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>并且在开头导入刚才的admin_page.html文件，然后开始调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &quot;ui/admin_page.html&quot; as pg %&#125;</span><br></pre></td></tr></table></figure></p><p>将下面的代码填充你刚才删除的那段的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; pg.page(page_data, &quot;admin.tag_list&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>至此，关于标签列表的介绍就到此为止了！接下来是标签的删除和编辑！</p><h2 id="标签的删除"><a href="#标签的删除" class="headerlink" title="标签的删除"></a>标签的删除</h2><p>首先点击这里，获取官方文档<a href="http://www.pythondoc.com/flask-sqlalchemy/queries.html" target="_blank" rel="noopener">flask-sqlalchemy删除</a>,了解一下，我们现在开始编辑代码：打开views.py文件，我们在标签列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 标签删除</span><br><span class="line">@admin.route(&apos;/tag/del/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_del(id=None):</span><br><span class="line">    tag = Tag.query.filter_by(id=id).first_or_404()</span><br><span class="line">    db.session.delete(tag)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    flash(&quot;标签删除成功！&quot;, &quot;ok&quot;)</span><br><span class="line">    return redirect(url_for(&quot;admin.tag_list&quot;, page=1))</span><br></pre></td></tr></table></figure></p><p>接着打开tag_list.html页面，我们复制提示成功的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &#123;% for msg in get_flashed_messages(category_filter=[&quot;ok&quot;]) %&#125;</span><br><span class="line">&lt;div class=&quot;alert alert-success alert-dismissible&quot;&gt;</span><br><span class="line"> &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;h4&gt;&lt;i class=&quot;icon fa fa-check&quot;&gt;&lt;/i&gt; 操作成功&lt;/h4&gt;</span><br><span class="line"> &#123;&#123; msg &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>放在这个位置：<img src="https://upload-images.jianshu.io/upload_images/8964398-451a1e8bfee46c51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后修改删除的跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_del&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-danger&quot;&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>然后就可以测试你的项目了！</p><h2 id="标签的编辑"><a href="#标签的编辑" class="headerlink" title="标签的编辑"></a>标签的编辑</h2><p>打开views.py文件，我们在标签列表的下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 编辑标签</span><br><span class="line">@admin.route(&apos;/tag/edit/&lt;int:id&gt;&apos;, methods=[&quot;GET&quot;, &quot;POST&quot;])</span><br><span class="line">@admin_login_req</span><br><span class="line">def tag_edit(id=None):</span><br><span class="line">    form = TagForm()   # 实例化一个TagForm，然后将form传递到前端页面去。</span><br><span class="line">    tag = Tag.query.get_or_404(id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        data = form.data</span><br><span class="line">        tag_count = Tag.query.filter_by(name=data[&quot;name&quot;]).count()</span><br><span class="line">        # 标签去重</span><br><span class="line">        if tag.name != data[&quot;name&quot;] and tag_count == 1:</span><br><span class="line">            flash(&quot;该标签已经存在了！&quot;, &quot;err&quot;)</span><br><span class="line">            return redirect(url_for(&quot;admin.tag_edit&quot;, id=id))</span><br><span class="line">        tag.name = data[&quot;name&quot;]</span><br><span class="line">        db.session.add(tag)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&quot;修改标签成功！&quot;, &quot;ok&quot;)</span><br><span class="line">        return redirect(url_for(&quot;admin.tag_edit&quot;, id=id))</span><br><span class="line">    return render_template(&quot;admin/tag_edit.html&quot;, form=form, tag=tag)</span><br></pre></td></tr></table></figure></p><p>接着在admin下面新建tag_edit.html页面，将tag_add.html页面全部添加进去，然后开始修改:将所有的添加字段改为编辑，为form.name增加属性(value=tag.name)，还要在form提交时添加action:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=&quot;form&quot; method=&quot;post&quot; action=&quot;&#123;&#123; url_for(&apos;admin.tag_edit&apos;, id=tag.id) &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>然后在tag_list里面修改页面的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;admin.tag_edit&apos;, id=v.id) &#125;&#125;&quot; class=&quot;label label-success&quot;&gt;编辑&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>以及标签的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=&quot;id&quot; value=&quot;&#123;&#123; tag.id &#125;&#125;&quot; type=&quot;hidden&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-8e13098af79daaa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，我们的项目关于标签这一功能是不是都能使用了！</p><p>至此，我们关于标签的介绍就到此为止了，感谢你的赏阅！！！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第六篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第六篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（五）：访问控制器</title>
      <link href="/2018/06/06/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>/2018/06/06/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（四）：后台页面搭建</title>
      <link href="/2018/06/04/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/06/04/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来学习Flask网站后台页面的搭建，因此我们本篇内容均在admin目录下面进行，所有与home相关的页面此刻都可以关闭了。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第四篇。</a></p><h2 id="管理员登录页面搭建"><a href="#管理员登录页面搭建" class="headerlink" title="管理员登录页面搭建"></a>管理员登录页面搭建</h2><p>打开我们的app/admin/views.py文件，我们在里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import render_template, redirect, url_for</span><br><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@admin.route(&apos;/login/&apos;)</span><br><span class="line">def login():</span><br><span class="line">    return render_template(&quot;admin/login.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登出</span><br><span class="line">@admin.route(&apos;/logout/&apos;)</span><br><span class="line">def logout():</span><br><span class="line">    return redirect(url_for(&apos;admin.login&apos;))</span><br></pre></td></tr></table></figure></p><p>接下来就是在templates/admin文件夹下面新建对应的html文件（但是我们这里因为logout只是重定向到我们的login页面，因此只需要创建一个login.html即可），然后我们打开新建的login文件，复制3-admin/login.html的内容，并对静态文件和url跳转做一下配置，很简单，这里就不一一演示了。</p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="评论管理页面搭建"><a href="#评论管理页面搭建" class="headerlink" title="评论管理页面搭建"></a>评论管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 评论列表</span><br><span class="line">@admin.route(&apos;/comment/list&apos;)</span><br><span class="line">def comment_list():</span><br><span class="line">    return render_template(&quot;admin/comment_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-6和g-6-1，注意此处没有g-6-2!然后打开comment_list.html页面，对评论进行for循环，并修改页面的静态文件路径:<img src="https://upload-images.jianshu.io/upload_images/8964398-f4c6c081e73240be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="收藏管理页面搭建"><a href="#收藏管理页面搭建" class="headerlink" title="收藏管理页面搭建"></a>收藏管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 电影收藏</span><br><span class="line">@admin.route(&apos;/moviecol/list&apos;)</span><br><span class="line">def moviecol_list():</span><br><span class="line">    return render_template(&quot;admin/moviecol_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-7和g-7-1，注意此处没有g-7-2!然后打开moviecol_list.html页面，对收藏进行for循环：<img src="https://upload-images.jianshu.io/upload_images/8964398-5a9d51c159e4f586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="日志管理页面搭建"><a href="#日志管理页面搭建" class="headerlink" title="日志管理页面搭建"></a>日志管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 操作日志列表</span><br><span class="line">@admin.route(&apos;/oplog/list&apos;)</span><br><span class="line">def oplog_list():</span><br><span class="line">    return render_template(&quot;admin/oplog_list.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理员登录日志列表</span><br><span class="line">@admin.route(&apos;/adminloginlog/list&apos;)</span><br><span class="line">def adminloginlog_list():</span><br><span class="line">    return render_template(&quot;admin/adminloginlog_list.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 会员登录日志列表</span><br><span class="line">@admin.route(&apos;/userloginlog/list&apos;)</span><br><span class="line">def userloginlog_list():</span><br><span class="line">    return render_template(&quot;admin/userloginlog_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-8和g-8-1，g-8-2，g-8-3!然后打开3个html页面，对管理员，会员进行for循环遍历即可，这里就不多说了。</p><h2 id="权限管理页面搭建"><a href="#权限管理页面搭建" class="headerlink" title="权限管理页面搭建"></a>权限管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加权限</span><br><span class="line">@admin.route(&apos;/auth/add&apos;)</span><br><span class="line">def auth_add():</span><br><span class="line">    return render_template(&quot;admin/auth_add.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 权限列表</span><br><span class="line">@admin.route(&apos;/auth/list&apos;)</span><br><span class="line">def auth_list():</span><br><span class="line">    return render_template(&quot;admin/auth_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-9和g-9-1，g-9-2!然后打开auth_list.html页面，对权限进行for循环遍历即可，这里就不多说了。</p><h2 id="角色管理页面搭建"><a href="#角色管理页面搭建" class="headerlink" title="角色管理页面搭建"></a>角色管理页面搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 添加角色</span><br><span class="line">@admin.route(&apos;/role/add&apos;)</span><br><span class="line">def role_add():</span><br><span class="line">    return render_template(&quot;admin/role_add.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 角色列表</span><br><span class="line">@admin.route(&apos;/role/list&apos;)</span><br><span class="line">def role_list():</span><br><span class="line">    return render_template(&quot;admin/role_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-10和g-10-1，g-10-2!然后打开role_list.html页面，对角色进行for循环遍历即可，这里就不多说了。需要特别注意的是role_add.html页面有自己单独的css，需要你block一下。</p><h2 id="管理员管理页面的搭建"><a href="#管理员管理页面的搭建" class="headerlink" title="管理员管理页面的搭建"></a>管理员管理页面的搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加管理员</span><br><span class="line">@admin.route(&apos;/admin/add&apos;)</span><br><span class="line">def admin_add():</span><br><span class="line">    return render_template(&quot;admin/admin_add.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理员列表</span><br><span class="line">@admin.route(&apos;/admin/list&apos;)</span><br><span class="line">def admin_list():</span><br><span class="line">    return render_template(&quot;admin/admin_list.html&quot;)</span><br></pre></td></tr></table></figure><p>在admin下新建对应的html文件，修改grid.html的页面跳转以及g-11和g-11-1，g-11-2!然后打开admin_list.html页面，对管理员进行for循环遍历即可，这里就不多说了。</p><p>至此，我们本篇关于后台页面搭建的介绍就到此为止了，感谢你的赏阅！下一篇，我们将正式进入到后台页面逻辑的开发了，希望你紧跟我的步伐，一步步敲下去，最后一个属于自己的微电影网站就会出现，那时的你心里乐开了花，我们期待着那样的一个你！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第四篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第四篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（三）：前端首页搭建</title>
      <link href="/2018/06/03/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%A6%96%E9%A1%B5%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/06/03/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%89%8D%E7%AB%AF%E9%A6%96%E9%A1%B5%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记，我们来学习Flask网站前端首页面的搭建，这其实和Django搭建网页很类似，大家好好体会一下。</p><p>获取更多教程，请点击注册啃饼网:<a href="http://www.licheetools.top/" target="_blank" rel="noopener">http://www.licheetools.top</a></p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第三篇。</a></p><h2 id="前台布局搭建"><a href="#前台布局搭建" class="headerlink" title="前台布局搭建"></a>前台布局搭建</h2><p>第一步将所有static文件都放进指定的位置：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-dae3b19af76a8a35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后在templates/home文件夹下面新建一个home.html文件，将tpl/2-movie/nav.html文件内容全部拷贝到我们刚才新建的home.html页面里面，然后修改我们静态文件的目录，可以按照下面的图片要求进行：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8020177352e06aac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>1、静态文件的引入</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&apos;static&apos;,filename=&apos;文件路径&apos;)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2、定义路由</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&apos;模块名.视图名&apos;,变量=参数)&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3、定义数据块</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%block 数据块名称%&#125; .....&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 原来代码为 &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/base/css/bootstrap.min.css&quot;&gt;</span><br><span class="line"># 现在代码为   &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap.min.css&apos;) &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><p>其余所有的js, jpg,css均按照这样的要求进行，这里就不再一一提示了，直接附上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    &lt;link rel=&quot;shortcut icon&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/images/logo.png&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap.min.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/bootstrap-movie.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/css/animate.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/images/logo.png&apos;) &#125;&#125;&quot; style=&quot;height:30px;&quot;&gt;&amp;nbsp;微电影</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/jquery.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/bootstrap.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/jquery.singlePageNav.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;base/js/wow.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;lazyload/jquery.lazyload.min.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>接着在图示位置进行挖坑填坑操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top:76px&quot;&gt;</span><br><span class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开home模块的视图处理器（home/views.py）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from . import home</span><br><span class="line">from flask import render_template</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@home.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;home/index.html&quot;)i</span><br></pre></td></tr></table></figure></p><p>你发现没有此刻我们在templates/home文件夹下面是没有index.html文件的，我们需要去创建一个index.html文件，在里面输入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block %&#125;</span><br><span class="line">&lt;h1&gt;helloworld&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，在浏览器地址栏中输入<a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a> 出现了错误：<img src="https://upload-images.jianshu.io/upload_images/8964398-b9c6375a97a1fd18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>错误提示我们block缺少一个名字，那我们就修改一下index.html文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;Helo,World!&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后再次刷新一下我们的页面，发现还是出了问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-5b8c84d06ee45c38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>错误提示我们没有找到home.html页面，那是因为我们的路径出了问题，我们继续修改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;Helo,World!&lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接着我们再次刷新一下，页面正常显示了：<img src="https://upload-images.jianshu.io/upload_images/8964398-372c157c1cf0ceb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="会员登录页面搭建"><a href="#会员登录页面搭建" class="headerlink" title="会员登录页面搭建"></a>会员登录页面搭建</h2><p>打开app/home/views.py文件，新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import  redirect, url_for</span><br><span class="line"></span><br><span class="line"># 登入</span><br><span class="line">@home.route(&apos;/login/&apos;)</span><br><span class="line">def login():</span><br><span class="line">    return render_template(&quot;home/login.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登出</span><br><span class="line">@home.route(&apos;/logout/&apos;)</span><br><span class="line">def logout():</span><br><span class="line">    return redirect(url_for(&apos;home.login&apos;))</span><br></pre></td></tr></table></figure></p><p>然后在templates/home下面新建login.html文件，往里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;home/home.html&apos; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;panel panel-primary&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">                    &lt;h3 class=&quot;panel-title&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-log-in&quot;&gt;&lt;/span&gt;&amp;nbsp;会员登录&lt;/h3&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">                    &lt;form role=&quot;form&quot;&gt;</span><br><span class="line">                        &lt;fieldset&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_contact&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;账号&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_contact&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;用户名/邮箱/手机号码&quot; name=&quot;contact&quot; type=&quot;text&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_contact&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_password&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;密码&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_password&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;密码&quot; name=&quot;password&quot; type=&quot;password&quot; value=&quot;&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_password&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;a href=&quot;user.html&quot; class=&quot;btn btn-lg btn-success btn-block&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">                        &lt;/fieldset&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>（这段代码来自tpl/2-movie/login.html里面<div class="container" style="margin-top:120px"> 内容</div>的内容部分）<br>然后打开home/home.html文件，修改我们的url跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-089318013909fb7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="会员注册"><a href="#会员注册" class="headerlink" title="会员注册"></a>会员注册</h2><p>打开app/home/views.py文件，新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 会员注册</span><br><span class="line">@home.route(&apos;/register/&apos;)</span><br><span class="line">def register():</span><br><span class="line">    return render_template(&quot;home/register.html&quot;)</span><br></pre></td></tr></table></figure></p><p>然后在templates/home下面新建register.html文件，往里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;home/home.html&apos; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-md-4 col-md-offset-4&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;panel panel-success&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">                    &lt;h3 class=&quot;panel-title&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-plus&quot;&gt;&lt;/span&gt;&amp;nbsp;会员注册&lt;/h3&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">                    &lt;form role=&quot;form&quot;&gt;</span><br><span class="line">                        &lt;fieldset&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_name&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;昵称&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_name&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;昵称&quot; name=&quot;name&quot; type=&quot;text&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_name&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_email&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-envelope&quot;&gt;&lt;/span&gt;&amp;nbsp;邮箱&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_email&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;邮箱&quot; name=&quot;email&quot; type=&quot;email&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_email&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_phone&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-phone&quot;&gt;&lt;/span&gt;&amp;nbsp;手机&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_phone&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;手机&quot; name=&quot;phone&quot; type=&quot;text&quot; autofocus&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_phone&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_password&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;密码&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_password&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;密码&quot; name=&quot;password&quot; type=&quot;password&quot; value=&quot;&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_password&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                                &lt;label for=&quot;input_repassword&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;确认密码&lt;/label&gt;</span><br><span class="line">                                &lt;input id=&quot;input_repassword&quot; class=&quot;form-control input-lg&quot; placeholder=&quot;确认密码&quot; name=&quot;repassword&quot; type=&quot;password&quot; value=&quot;&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;col-md-12&quot; id=&quot;error_repassword&quot;&gt;&lt;/div&gt;</span><br><span class="line">                            &lt;a href=&quot;user.html&quot; class=&quot;btn btn-lg btn-success btn-block&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">                        &lt;/fieldset&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>（这段代码来自tpl/2-movie/register.html里面<div class="container" style="margin-top:120px"> 内容</div>的内容部分）<br>然后打开home/home.html文件，修改我们的url跳转链接：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-94beca17cc1bf19c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="会员中心页面搭建"><a href="#会员中心页面搭建" class="headerlink" title="会员中心页面搭建"></a>会员中心页面搭建</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-002ed5a8c1dd298a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>由于前面已经有过2个页面搭建的例子，所以这里我们先定义完所以的路由，再在home文件夹里面新建对应的html文件！打开app/home/views.py文件，新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 会员中心</span><br><span class="line">@home.route(&apos;/user/&apos;)</span><br><span class="line">def user():</span><br><span class="line">    return render_template(&quot;home/user.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 修改密码</span><br><span class="line">@home.route(&apos;/pwd/&apos;)</span><br><span class="line">def pwd():</span><br><span class="line">    return render_template(&quot;home/pwd.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 评论记录</span><br><span class="line">@home.route(&apos;/comments/&apos;)</span><br><span class="line">def comments():</span><br><span class="line">    return render_template(&quot;home/comments.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登入日志</span><br><span class="line">@home.route(&apos;/loginlog/&apos;)</span><br><span class="line">def loginlog():</span><br><span class="line">    return render_template(&quot;home/loginlog.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 收藏电影</span><br><span class="line">@home.route(&apos;/moviecol/&apos;)</span><br><span class="line">def moviecol():</span><br><span class="line">    return render_template(&quot;home/moviecol.html&quot;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-598c077d1cd48507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来定义会员中心菜单栏页面,在home文件夹里面，新建menu.html文件，里面写入从tpl/2-movie/user.html页面中<div class="col-md-3"> </div>的部分,并且修改一下url的跳转问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;col-md-3&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.user&apos;) &#125;&#125;&quot; class=&quot;list-group-item active&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;会员中心</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.pwd&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;修改密码</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.comments&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/span&gt;&amp;nbsp;评论记录</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.loginlog&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/span&gt;&amp;nbsp;登录日志</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;home.moviecol&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt;&amp;nbsp;收藏电影</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="user-html书写"><a href="#user-html书写" class="headerlink" title="user.html书写"></a>user.html书写</h3><p>现在开始书写我们的user.html文件，我们复制tpl/2-movie/user.html页面中<div class="col-md-9"> </div>的部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">     ......</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的manage.py文件，发现我们的个人中心页面出来了，但是菜单栏没有出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-1ee8f36699393cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们需要include我们之前定义的menu.html页面,修改我们的user.html文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">     ......</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>再刷新一下我们的页面试试，发现菜单栏已经可以正常显示了：<img src="https://upload-images.jianshu.io/upload_images/8964398-7f124d87f57f0653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来将home/home.html里面的style进行合并，再进行挖坑填坑操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">       .navbar-brand &gt; img &#123;</span><br><span class="line">           display: inline;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       .media &#123;</span><br><span class="line">           padding: 3px;</span><br><span class="line">           border: 1px solid #ccc</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">   &#123;% block css %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接着打开home/user.html页面，对原来页面的css样式进行挖坑填坑操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="pwd-html的书写"><a href="#pwd-html的书写" class="headerlink" title="pwd.html的书写"></a>pwd.html的书写</h3><p>现在开始书写我们的pwd.html文件，我们复制tpl/2-movie/pwd.html页面中<div class="col-md-9"> </div>的部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand&gt;img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9&#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line">        .media&#123;</span><br><span class="line">            padding:3px;</span><br><span class="line">            border:1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">     ......</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现我们还没有判断选中状态，我们给menu.html的类加上一个ID，然后采用jQuery来进行判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;col-md-3&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">        &lt;a id =&quot;m-1&quot; href=&quot;&#123;&#123; url_for(&apos;home.user&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-user&quot;&gt;&lt;/span&gt;&amp;nbsp;会员中心</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-2&quot; href=&quot;&#123;&#123; url_for(&apos;home.pwd&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-lock&quot;&gt;&lt;/span&gt;&amp;nbsp;修改密码</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-3&quot; href=&quot;&#123;&#123; url_for(&apos;home.comments&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-comment&quot;&gt;&lt;/span&gt;&amp;nbsp;评论记录</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-4&quot; href=&quot;&#123;&#123; url_for(&apos;home.loginlog&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/span&gt;&amp;nbsp;登录日志</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a id =&quot;m-5&quot; href=&quot;&#123;&#123; url_for(&apos;home.moviecol&apos;) &#125;&#125;&quot; class=&quot;list-group-item&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-heart&quot;&gt;&lt;/span&gt;&amp;nbsp;收藏电影</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>打开home.html页面，在底部新增js的挖坑填坑代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开user.html页面，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-1&quot;).addClass(&quot;active&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>我们顺便在pwd.html页面也加上类似的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-2&quot;).addClass(&quot;active&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="comments-html的书写"><a href="#comments-html的书写" class="headerlink" title="comments.html的书写"></a>comments.html的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-3&quot;).addClass(&quot;active&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="loginlog-html的书写"><a href="#loginlog-html的书写" class="headerlink" title="loginlog.html的书写"></a>loginlog.html的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-4&quot;).addClass(&quot;active&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="moviecol-html的书写"><a href="#moviecol-html的书写" class="headerlink" title="moviecol.html的书写"></a>moviecol.html的书写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;home/home.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block css %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .navbar-brand &gt; img &#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .col-lg-1, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-md-1, .col-md-10, .col-md-11, .col-md-12, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-sm-1, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-xs-1, .col-xs-10, .col-xs-11, .col-xs-12, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9 &#123;</span><br><span class="line">            padding-right: 3px;</span><br><span class="line">            padding-left: 3px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .media &#123;</span><br><span class="line">            padding: 3px;</span><br><span class="line">            border: 1px solid #ccc</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% include &quot;home/menu.html&quot; %&#125;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block js %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(&quot;#m-5&quot;).addClass(&quot;active&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>现在再来运行我们的manage.py文件，我们在浏览器地址栏里面输入<a href="http://127.0.0.1:5000/user/，然后回车，然后点击左侧的菜单栏，发现页面显示没有问题。最后来完善一下url的跳转，我们打开home/home.html页面，修改如下：![](https://upload-images.jianshu.io/upload_images/8964398-26906216cdd4d18c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:5000/user/，然后回车，然后点击左侧的菜单栏，发现页面显示没有问题。最后来完善一下url的跳转，我们打开home/home.html页面，修改如下：![](https://upload-images.jianshu.io/upload_images/8964398-26906216cdd4d18c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><h2 id="电影列表页面搭建"><a href="#电影列表页面搭建" class="headerlink" title="电影列表页面搭建"></a>电影列表页面搭建</h2><p>继续在我们的home/views.py文件里面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 首页</span><br><span class="line">@home.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;home/index.html&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 动画</span><br><span class="line">@home.route(&apos;/animation/&apos;)</span><br><span class="line">def animation():</span><br><span class="line">    return render_template(&quot;home/animation.html&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>注意：因为在前面我们已经创建了一个index函数，所以我们需要把它们去掉，或者重写一个</strong><br>做完这些自然就是在templates/home文件夹下面新建对应的index.html和animation.html页面。考虑到首页的独立性，我们也在templates/home文件夹下面新建一个layout.html页面，并同时将home/home.html文件里面的代码都拷贝进去，并且修改一下home/home.html，将内容部分进行挖坑填坑操作：<img src="https://upload-images.jianshu.io/upload_images/8964398-3b7f9d948e2d2dab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在回到我们的templates/home/index.html页面，其block content部分来自我们的tpl/2-movie/index.html的热门电影和电影列表部分：<img src="https://upload-images.jianshu.io/upload_images/8964398-200ae6ee92d3d589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>紧接着将我们templates/home/index.html页面的电影列表展开和收起，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-53c522e00a5640ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们只留下前四个col-md-3，其余的col-md-3就都删除！</p><p>然后将tpl/1-index-animation/animation.html的代码复制到home/animation.html里面，接着在static文件下新建anim文件，把与animation有关的js,css,main-banner都复制进去，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ad27ee276d2ed454.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后我们回到templates/animation.html页面，修改我们的静态样式加载地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/css/style.css&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/main_banner/big0020150102211033.jpg&apos;) &#125;&#125;&quot; alt=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;anmi/js/jquery.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>接着回到我们的home/index.html页面，我们进行animation的跳转链接配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe class=&quot;wow fadeIn&quot; width=&quot;100%&quot; height=&quot;375px&quot; frameborder=0 scrolling=no src=&quot;&#123;&#123; url_for(&apos;home.animation&apos;) &#125;&#125;&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>还有对我们的列表进行for循环的读取：<img src="https://upload-images.jianshu.io/upload_images/8964398-5223402d8b9e7f33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>最后运行一下我们的manage.py文件，发现样式和页面都正常显示了：<img src="https://upload-images.jianshu.io/upload_images/8964398-32d77efc9c937a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="电影搜索页面搭建"><a href="#电影搜索页面搭建" class="headerlink" title="电影搜索页面搭建"></a>电影搜索页面搭建</h2><p>老规矩，在home/views.py文件下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 搜索页面</span><br><span class="line">@home.route(&apos;/search/&apos;)</span><br><span class="line">def search():</span><br><span class="line">    return render_template(&quot;home/search.html&quot;)</span><br></pre></td></tr></table></figure></p><p>自然你就需要在templates/home文件夹下面新建一个search.html页面。<br>打开home/search.html页面，我们新建以下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-62efe6da6b989438.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后展开和收起页面，利用for循环进行填充：<img src="https://upload-images.jianshu.io/upload_images/8964398-73fb0d7bc7eba951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是search相关的url跳转的配置，home.html和layout.html页面都需要配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;a class=&quot;btn btn-default&quot; href=&quot;&#123;&#123; url_for(&apos;home.search&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;&amp;nbsp;搜索&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a class=&quot;btn btn-default&quot; href=&quot;&#123;&#123; url_for(&apos;home.search&apos;) &#125;&#125;&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;&amp;nbsp;搜索&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h2 id="电影详情页面搭建"><a href="#电影详情页面搭建" class="headerlink" title="电影详情页面搭建"></a>电影详情页面搭建</h2><p>老规矩，在home/views.py文件下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 详情页面</span><br><span class="line">@home.route(&apos;/play/&apos;)</span><br><span class="line">def play():</span><br><span class="line">    return render_template(&quot;home/play.html&quot;)</span><br></pre></td></tr></table></figure></p><p>自然你就需要在templates/home文件夹下面新建一个play.html页面。</p><p>打开home/play.html页面，我们新建以下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-9187382ceb34be89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后对所以的静态文件进行访问配置，由于太多，这里就不一一说明了。</p><p>接下来对home/home.html页面所以的url进行跳转配置，还有搜索中的电影播放与收藏中的电影播放页面的跳转，这个很多，需要耐心一个个去查找，修改。<br>还有收藏页面的for循环：<img src="https://upload-images.jianshu.io/upload_images/8964398-6025357cb78a59fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>之后运行一下manage.py文件，发现页面跳转没有问题。</p><h2 id="404页面的搭建"><a href="#404页面的搭建" class="headerlink" title="404页面的搭建"></a>404页面的搭建</h2><p>因为404页面是一个全局页面，所以我们需要在初始化文件里面写入，而不是在home这个应用里面(app/–init–.py文件)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from flask import Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">from app.home import home as home_blueprint</span><br><span class="line">from app.admin import admin as admin_blueprint</span><br><span class="line"></span><br><span class="line">app.register_blueprint(home_blueprint)</span><br><span class="line">app.register_blueprint(admin_blueprint, url_prefix=&quot;/admin&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 404页面</span><br><span class="line">@app.errorhandler(404)</span><br><span class="line">def page_not_found(error):</span><br><span class="line">    return render_template(&quot;home/404.html&quot;), 404</span><br></pre></td></tr></table></figure></p><p>自然你就需要在templates/home文件夹下面新建一个404.html页面。</p><p>然后把4-404.html页面的代码都拷贝进去，并修改页面的跳转和静态文件的加载样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;消失在宇宙星空中的404页面&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/404.css&apos;) &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 代码 开始 --&gt;</span><br><span class="line">&lt;div class=&quot;fullScreen&quot; id=&quot;fullScreen&quot;&gt;</span><br><span class="line">    &lt;img class=&quot;rotating&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/spaceman.svg&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;pagenotfound-text&quot;&gt;</span><br><span class="line">        &lt;h1&gt;迷失在太空中！&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;home.index&apos;) &#125;&#125;&quot;&gt;返回首页&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;canvas id=&quot;canvas2d&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;404/spaceman.svg&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 代码 结束 --&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>然后刷新一下我们的页面，发现404页面可以正常显示出来。</p><p>至此，我们本篇关于前端首页搭建的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第三篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第三篇。</a></p><p>获取更多教程，请点击注册啃饼网:<a href="http://www.licheetools.top/" target="_blank" rel="noopener">http://www.licheetools.top</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（二）：项目优化与模型设计</title>
      <link href="/2018/06/02/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E4%B8%8E%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/06/02/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BC%98%E5%8C%96%E4%B8%8E%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇笔记开始，我们正式进入flask的编程世界，话不多说，我们先来创建我们的第一个flask程序，然后进行项目的优化以及模型设计。</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第二篇。</a></p><h2 id="第一个flask程序"><a href="#第一个flask程序" class="headerlink" title="第一个flask程序"></a>第一个flask程序</h2><p>打开pycharm按照图示创建flask项目：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d2d7672689c3204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击确定之后就成了这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-ba3d5106f1613a2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你会发现上面2个文件static和templates竟然都是空的，也就说只有movie.py文件才有，而且只有寥寥的7行代码。我给你看一下Django创建项目之后的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-0893770248378d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，flask的确是轻巧，巧到刚开始只有2个空文件和一个7行代码的py文件。而纵观Django，刚开始就有那些看不懂的而且代码挺多的py文件，所以还是那句话，学好flask需要花费一定的时间。我们继续回到flask页面：点击上面的运行按钮，提示你在浏览器输入：<strong><a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a></strong>，flask的默认端口号为5000，Django的端口号为8000，要注意区别！你会发现页面只有Hello World!这个单词而已！！！</p><h2 id="项目优化与模型设计"><a href="#项目优化与模型设计" class="headerlink" title="项目优化与模型设计"></a>项目优化与模型设计</h2><p>我们这个微电影网站包括：<strong>前台模块（home）</strong>和<strong>后台模块（admin）</strong>。</p><hr><p>其中前台模块（home）包括：<br>数据模型：models.py<br>表单处理： home/forms.py<br>模板目录： templates/home<br>静态目录：static</p><hr><hr><p>而后台模块（admin）也同样包括：<br>数据模型：models.py<br>表单处理： admin/forms.py<br>模板目录： templates/admin<br>静态目录：static</p><hr><p>数据模型是共用的，而表单提交和模板都是独立的，下面看一下前后台的目录分析：<img src="https://upload-images.jianshu.io/upload_images/8964398-85bf8a274a91a3aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>按照上述图片所示，新建文件树：<img src="https://upload-images.jianshu.io/upload_images/8964398-0d897c91449e30e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="使用flask的蓝图-Blueprint-来规划项目的结构"><a href="#使用flask的蓝图-Blueprint-来规划项目的结构" class="headerlink" title="使用flask的蓝图(Blueprint)来规划项目的结构"></a>使用flask的蓝图(Blueprint)来规划项目的结构</h2><p><strong>1、什么是蓝图？</strong><br>它是一个应用中或跨应用制作应用组件和支持通用的模式。<br><strong>2、蓝图的作用？</strong><br>将不同的功能模块化；构建大型应用；优化项目结构；增强可读性，易于维护。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-662b6cdacebaaea3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下面我们将对上面的3个目录进行分开介绍,由于前后台的目录结构很类似，这里我以app/admin为例进行说明，大家跟紧我的节奏即可。<br><strong>1、定义蓝图(app/admin/–init–.py)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Blueprint</span><br><span class="line">admin = Blueprint(&quot;admin&quot;, __name__)</span><br><span class="line">import app.admin.views</span><br></pre></td></tr></table></figure></p><p><strong>2、注册蓝图(app/–init–.py)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">from app.admin import admin as admin_blueprint</span><br><span class="line"></span><br><span class="line">app.register_blueprint(admin_blueprint, url_prefix=&quot;/admin&quot;)</span><br></pre></td></tr></table></figure></p><p><strong>3、调用蓝图(app/admin/views.py)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from . import admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@admin.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;&lt;h1 style=&apos;color:blue&apos;&gt;This is admin&lt;/h1&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>而在<strong>app/home</strong>里面同样是这样的：<br>1、定义蓝图(app/home/–init–.py)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask import Blueprint</span><br><span class="line">home = Blueprint(&quot;home&quot;, __name__)</span><br><span class="line">import app.home.views</span><br></pre></td></tr></table></figure></p><p>2、注册蓝图(app/–init–.py)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">from app.home import admin as home_blueprint</span><br><span class="line"></span><br><span class="line">app.register_blueprint(home_blueprint) # 这里url可以不写</span><br></pre></td></tr></table></figure></p><p>3、调用蓝图(app/home/views.py)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from . import admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@home.route(&quot;/&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;&lt;h1 style=&apos;color:red&apos;&gt;This is home&lt;/h1&gt;&quot;</span><br></pre></td></tr></table></figure></p><p>在完成上述代码之后，最后一步书写manage.py文件，开始启动app。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from app import app</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>在浏览器地址栏中输入：<a href="http://127.0.0.1:5000，则显示红色的This" target="_blank" rel="noopener">http://127.0.0.1:5000，则显示红色的This</a> is home；而输入<a href="http://127.0.0.1:5000/admin/，则显示蓝色的This" target="_blank" rel="noopener">http://127.0.0.1:5000/admin/，则显示蓝色的This</a> is admin.</p><h2 id="会员及会员登录日志数据模型设计"><a href="#会员及会员登录日志数据模型设计" class="headerlink" title="会员及会员登录日志数据模型设计"></a>会员及会员登录日志数据模型设计</h2><p><strong>1、安装数据库连接依赖包</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>关于sqlalchmey的介绍，请关注我的另外一个专题《Python3操作三大数据库》这里面就会有详细的介绍，这里我就不细说了，你只要记住它是一个企业级的ORM对象关系映射框架就够了。<br><strong>2、定义mysql数据库连接：</strong><br>打开models.py文件，我们新建下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = from flask import Flask </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URL&apos;] = &quot;mysql://账号:密码@ip地址/movie&quot;</span><br><span class="line">app.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] =True</span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></p><p>大家可以点击<a href="http://www.pythondoc.com/flask-sqlalchemy/config.html" target="_blank" rel="noopener">flask-sqlalchemy</a>,来了解更多的信息。</p><p><strong>3、定义会员数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-0fad1292449dca50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>继续在models.py文件里添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 定义会员数据模型</span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &quot;user&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 昵称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 密码</span><br><span class="line">    email = db.Column(db.String(100), unique=True)  # 邮箱</span><br><span class="line">    phone = db.Column(db.String(11), unique=True)  # 电话号码</span><br><span class="line">    info = db.Column(db.Text)  # 个性简介</span><br><span class="line">    face = db.Column(db.String(255), unique=True)  # 头像</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    uuid = db.Column(db.String(255), unique=True)  # 唯一标志符</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;User %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><p>大家对此内容不了解可以点击<a href="http://www.pythondoc.com/flask-sqlalchemy/models.html" target="_blank" rel="noopener">声明模型</a>。</p><p><strong>4、会员登录日志数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-98f8e8190195f606.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 会员登录日志</span><br><span class="line">class UserLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;userlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属会员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;UserLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure><p>注意由于此处采用了外键，所以需要在User函数里面新增关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userlogs = db.relationship(&apos;userlog&apos;, backref=&apos;user&apos;)  # 会员日志外键关系</span><br></pre></td></tr></table></figure></p><p>注意到没有，这里和Django中字段的定义是不一样的，Django不需要在关系外键里面增加外键关系，但是Flask却是必须的，要注意这一点。</p><p>总结一下，models.py文件的代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql://root:root@127.0.0.5/movie&quot;</span><br><span class="line">app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = True</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义会员数据模型</span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &quot;user&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 昵称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 密码</span><br><span class="line">    email = db.Column(db.String(100), unique=True)  # 邮箱</span><br><span class="line">    phone = db.Column(db.String(11), unique=True)  # 电话号码</span><br><span class="line">    info = db.Column(db.Text)  # 个性简介</span><br><span class="line">    face = db.Column(db.String(255), unique=True)  # 头像</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    uuid = db.Column(db.String(255), unique=True)  # 唯一标志符</span><br><span class="line">    userlogs = db.relationship(&apos;UserLog&apos;, backref=&apos;user&apos;)  # 会员日志外键关系</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;User %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 会员登录日志</span><br><span class="line">class UserLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;userlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属会员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;UserLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure></p><p><strong>5、标签数据模型设计</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-9b874434e937c01f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义标签数据模型</span><br><span class="line">class Tag(db.Model):</span><br><span class="line">    __tablename__ = &quot;tag&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)   # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)   # 标题</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    movies = db.relationship(&apos;Movie&apos;, backref=&apos;tag&apos;)  # 电影外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Tag %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><p><strong>其中，relationship(‘Movie’, backref=’tag’)里面，Movie为所关联的类名，backref为当前的表名！</strong><br><strong>6、电影数据模型设计</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-752eb4e4e587edc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 定义电影数据模型</span><br><span class="line">class Movie(db.Model):</span><br><span class="line">    __tablename__ = &quot;movie&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    info = db.Column(db.Text)  # 电影简介</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    star = db.Column(db.SmallInteger)  # 星级</span><br><span class="line">    playnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    commentnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    tag_id = db.Column(db.Integer, db.ForeignKey(&apos;tag.id&apos;))  # 所属标签</span><br><span class="line">    area = db.Column(db.String(255))  # 地区</span><br><span class="line">    release_time = db.Column(db.Date)  # 发布时间</span><br><span class="line">    length = db.Column(db.String(100))  # 电影长度</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Movie %r&gt;&apos; % self.title</span><br></pre></td></tr></table></figure></p><p><strong>7、上映预告数据模型设计</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f9f93220526613b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义上映预告数据模型</span><br><span class="line">class Preview(db.Model):</span><br><span class="line">    __tablename__ = &quot;preview&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Preview %r&gt;&apos; % self.title</span><br></pre></td></tr></table></figure></p><h2 id="评论及收藏电影数据模型设计"><a href="#评论及收藏电影数据模型设计" class="headerlink" title="评论及收藏电影数据模型设计"></a>评论及收藏电影数据模型设计</h2><p><strong>1、定义评论数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-2bec6a0adb9a3499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 定义评论数据模型</span><br><span class="line">class Comment(db.Model):</span><br><span class="line">    __tablename__ = &quot;comment&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    content = db.Column(db.Text)  # 评论内容</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Comment %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure></p><p><strong>2、定义收藏电影数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-24c7ce9398651ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义收藏电影数据模型</span><br><span class="line">class MovieCol(db.Model):</span><br><span class="line">    __tablename__ = &quot;moviecol&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 最近登录时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;MovieCol %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure></p><h2 id="权限及角色数据模型设计"><a href="#权限及角色数据模型设计" class="headerlink" title="权限及角色数据模型设计"></a>权限及角色数据模型设计</h2><p><strong>1、定义权限数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-07fca41473877c97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义权限数据模型</span><br><span class="line">class Auth(db.Model):</span><br><span class="line">    __tablename__ = &quot;auth&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Auth %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><p><strong>2、定义角色数据模型：</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-8495eb4b3bbcc0c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义角色数据模型</span><br><span class="line">class Role(db.Model):</span><br><span class="line">    __tablename__ = &quot;role&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    auths = db.Column(db.String(600)) # 权限列表</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Role %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure></p><h2 id="管理员、管理员登陆日志、操作日志数据模型设计"><a href="#管理员、管理员登陆日志、操作日志数据模型设计" class="headerlink" title="管理员、管理员登陆日志、操作日志数据模型设计"></a>管理员、管理员登陆日志、操作日志数据模型设计</h2><p><strong>1、定义管理员数据模型</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-153c1932df6e1a87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 定义管理员数据模型</span><br><span class="line">class Admin(db.Model):</span><br><span class="line">    __tablename__ = &quot;admin&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 管理员名称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 管理员密码</span><br><span class="line">    is_super = db.Column(db.SmallInteger)  # 是否为超级管理员，0为超级管理员</span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;role.id&apos;))  # 所属角色</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Admin %r&gt;&apos; % self.name</span><br></pre></td></tr></table></figure><p><strong>2、定义管理员登陆日志数据模型</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-c489aed4b919dd45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义管理员登陆日志数据模型</span><br><span class="line">class AdminLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;adminlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;AdminLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure><p><strong>3、定义操作日志数据模型</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-86c8d73b321c88f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 定义操作日志数据模型</span><br><span class="line">class OpLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;oplog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    reason = db.Column(db.String(600))  # 操作原因</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;OpLog %r&gt;&apos; % self.id</span><br></pre></td></tr></table></figure><p>考虑到部分关系只有全部字段定义完成以后才能开始，所以这里贴一下models.py的全部代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @Time: 2018/3/29 21:20</span><br><span class="line"># @Author: Envse</span><br><span class="line"># @File: models.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql://账号:密码@ip地址/movie&quot;</span><br><span class="line">app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = True</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义会员数据模型</span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &quot;user&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 昵称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 密码</span><br><span class="line">    email = db.Column(db.String(100), unique=True)  # 邮箱</span><br><span class="line">    phone = db.Column(db.String(11), unique=True)  # 电话号码</span><br><span class="line">    info = db.Column(db.Text)  # 个性简介</span><br><span class="line">    face = db.Column(db.String(255), unique=True)  # 头像</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    uuid = db.Column(db.String(255), unique=True)  # 唯一标志符</span><br><span class="line">    userlogs = db.relationship(&apos;UserLog&apos;, backref=&apos;user&apos;)  # 会员日志外键关系</span><br><span class="line">    comments = db.relationship(&apos;Comment&apos;, backref=&apos;user&apos;)  # 评论外键关系关联</span><br><span class="line">    moviecols = db.relationship(&apos;MovieCol&apos;, backref=&apos;user&apos;)  # 电影收藏外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;User %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义会员登录日志模型</span><br><span class="line">class UserLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;userlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属会员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;UserLog %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义标签数据模型</span><br><span class="line">class Tag(db.Model):</span><br><span class="line">    __tablename__ = &quot;tag&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)   # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)   # 标题</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    movies = db.relationship(&apos;Movie&apos;, backref=&apos;tag&apos;)  # 电影外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Tag %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义电影数据模型</span><br><span class="line">class Movie(db.Model):</span><br><span class="line">    __tablename__ = &quot;movie&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    info = db.Column(db.Text)  # 电影简介</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    star = db.Column(db.SmallInteger)  # 星级</span><br><span class="line">    playnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    commentnum = db.Column(db.BigInteger)  # 电影播放量</span><br><span class="line">    tag_id = db.Column(db.Integer, db.ForeignKey(&apos;tag.id&apos;))  # 所属标签</span><br><span class="line">    area = db.Column(db.String(255))  # 地区</span><br><span class="line">    release_time = db.Column(db.Date)  # 发布时间</span><br><span class="line">    length = db.Column(db.String(100))  # 电影长度</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    comments = db.relationship(&apos;Comment&apos;, backref=&apos;movie&apos;)  # 电影评论外键关联</span><br><span class="line">    movieclos = db.relationship(&apos;MovieCol&apos;, backref=&apos;movie&apos;)  # 电影收藏外键关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Movie %r&gt;&apos; % self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义上映预告数据模型</span><br><span class="line">class Preview(db.Model):</span><br><span class="line">    __tablename__ = &quot;preview&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    title = db.Column(db.String(255), unique=True)  # 电影标题</span><br><span class="line">    logo = db.Column(db.String(255), unique=True)  # 电影封面</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Preview %r&gt;&apos; % self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义评论数据模型</span><br><span class="line">class Comment(db.Model):</span><br><span class="line">    __tablename__ = &quot;comment&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    content = db.Column(db.Text)  # 评论内容</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Comment %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义收藏电影数据模型</span><br><span class="line">class MovieCol(db.Model):</span><br><span class="line">    __tablename__ = &quot;moviecol&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    movie_id = db.Column(db.Integer, db.ForeignKey(&apos;movie.id&apos;))  # 所属电影</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(&apos;user.id&apos;))  # 所属用户</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 最近登录时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;MovieCol %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义权限数据模型</span><br><span class="line">class Auth(db.Model):</span><br><span class="line">    __tablename__ = &quot;auth&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    url = db.Column(db.String(255), unique=True)  # 电影地址</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Auth %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义角色数据模型</span><br><span class="line">class Role(db.Model):</span><br><span class="line">    __tablename__ = &quot;role&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 名称</span><br><span class="line">    auths = db.Column(db.String(600)) # 权限列表</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Role %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义管理员数据模型</span><br><span class="line">class Admin(db.Model):</span><br><span class="line">    __tablename__ = &quot;admin&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    name = db.Column(db.String(100), unique=True)  # 管理员名称</span><br><span class="line">    pwd = db.Column(db.String(100))  # 管理员密码</span><br><span class="line">    is_super = db.Column(db.SmallInteger)  # 是否为超级管理员，0为超级管理员</span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;role.id&apos;))  # 所属角色</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line">    adminlogs = db.relationship(&apos;AdminLog&apos;, backref=&apos;admin&apos;)  # 管理员登录日志外键关系关联</span><br><span class="line">    oplogs = db.relationship(&apos;OpLog&apos;, backref=&apos;admin&apos;)  # 管理员操作日志外键关系关联</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;Admin %r&gt;&apos; % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义管理员登陆日志数据模型</span><br><span class="line">class AdminLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;adminlog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;AdminLog %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义操作日志数据模型</span><br><span class="line">class OpLog(db.Model):</span><br><span class="line">    __tablename__ = &quot;oplog&quot;</span><br><span class="line">    id = db.Column(db.Integer, primary_key=True)  # 编号</span><br><span class="line">    admin_id = db.Column(db.Integer, db.ForeignKey(&apos;admin.id&apos;))  # 所属管理员</span><br><span class="line">    ip = db.Column(db.String(100))  # 登录IP</span><br><span class="line">    reason = db.Column(db.String(600))  # 操作原因</span><br><span class="line">    addtime = db.Column(db.DateTime, index=True, default=datetime.utcnow)  # 添加时间</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;OpLog %r&gt;&apos; % self.id</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    db.create_all()  # 开始创建数据表</span><br></pre></td></tr></table></figure></p><h2 id="结合mysql数据库来生成数据表"><a href="#结合mysql数据库来生成数据表" class="headerlink" title="结合mysql数据库来生成数据表"></a>结合mysql数据库来生成数据表</h2><p><strong>1、进入到虚拟环境后，安装pymysql</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p><strong>2、导入pymysql并加以使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;mysql+pymysql://账号:密码@ip地址/movie&quot;</span><br></pre></td></tr></table></figure></p><p><strong>3、运行models.py文件</strong><br>运行models.py文件之后，你会发现出现字符编码的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\Envs\movie\lib\site-packages\pymysql\cursors.py:170: Warning: (1366, &quot;Incorrect string value: &apos;\\xD6\\xD0\\xB9\\xFA\\xB1\\xEA...&apos; for column &apos;VARIABLE_VALUE&apos; at row 481&quot;)</span><br></pre></td></tr></table></figure></p><p>因为windows系统默认使用的是GBK字符集，而我们在windows系统上使用的数据库默认也是GBK字符集，尽管我们在创建数据库的时候已经把字符集设定为utf8，但还是有问题，说明还是系统字符集影响到了我们项目的运行。但是数据库定义没问题，你输入中文是没有问题的这是mysql5.7的一个Bug，你可以忽略这个问题。</p><p>博主通过各方努力终于找到了解决问题的办法：<a href="https://www.jianshu.com/p/9bf524d49a3f" target="_blank" rel="noopener">Flask利用pymysql出现Warning：1366的解决办法</a></p><p><strong>4、打开movie数据库</strong><br>打开数据库，你会发现新生成了许多数据表，这与我们在models.py文件里定义的一模一样。<img src="https://upload-images.jianshu.io/upload_images/8964398-e98f39eb4fd86a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此本篇关于项目优化与模型设计的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应上传的仓库为:<a href="https://github.com/licheetools/movie对应第二篇。" target="_blank" rel="noopener">https://github.com/licheetools/movie对应第二篇。</a></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Flask搭建微电影视频网站（一）：项目介绍</title>
      <link href="/2018/06/01/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/06/01/%E5%88%A9%E7%94%A8Flask%E6%90%AD%E5%BB%BA%E5%BE%AE%E7%94%B5%E5%BD%B1%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嘿，小伙伴们好久不见。在上一套教程里，我们利用了Python的Django框架搭建了一个在线教育网站，这次我们尝试接触Python web开发的另一个框架：Flask。我们同样尝试利用它来搭建一个网站，这次我们是搭建一个在线的微电影视频网站。通过对比，我们来学着在比较中提升自己。同样在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="Flask介绍"><a href="#Flask介绍" class="headerlink" title="Flask介绍"></a>Flask介绍</h3><p>Flask是一个用 Python 编写的轻量级 Web 应用框架。其 WSGI工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。Flask使用 BSD 授权。Flask也被称为 “microframework” ，因为它使用简单的核心，用 extension 增加其他功能。Flask没有默认使用的数据库、窗体验证工具。所以与Django相比，它没有很多系统自带的功能就显得非常轻巧，但是另一方面就意味着你必须自己动手去实现一些看似非常简单的功能，从这点来说Flask比Django需要花费更多的时间来学习。</p><p>目前Django一般都是适合一些访问量较小的，规模不大的网站，真正那些访问量大的网站管理人员会采用Flask进行编辑，例如果壳网，知乎网，豆瓣网：<img src="https://upload-images.jianshu.io/upload_images/8964398-aab9a50a3563db0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Flask与Django，Tornado对比"><a href="#Flask与Django，Tornado对比" class="headerlink" title="Flask与Django，Tornado对比"></a>Flask与Django，Tornado对比</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e41c9769759182e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="网站介绍"><a href="#网站介绍" class="headerlink" title="网站介绍"></a>网站介绍</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0a579bfebd1f162e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>前台包括：首页-电影筛选-电影列表- 播放详情-评论-收藏-搜索-注册-登录-会员中心（修改会员资料，查看评论记录，登录日志，收藏电影）</p><p>后台包括：电影标签-电影管理-电影预告-网站会员-评论-收藏-日志-权限管理-角色-管理员等。</p><p><strong>总体设计框架</strong>为：<img src="https://upload-images.jianshu.io/upload_images/8964398-9b34dcd28fe5617b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>开发环境</strong>为：<img src="https://upload-images.jianshu.io/upload_images/8964398-c99f9c86bbbabeba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Flask丰富的扩展插件"><a href="#Flask丰富的扩展插件" class="headerlink" title="Flask丰富的扩展插件"></a>Flask丰富的扩展插件</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-45b8643c9ac34946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-64a802a077c70272.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="你能学到的知识"><a href="#你能学到的知识" class="headerlink" title="你能学到的知识"></a>你能学到的知识</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-194ee6626f79d9a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6eaa07744ca9cdaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-377a6ffc4f75e628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>以及视频技术：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-ba54db0092786239.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="环境搭建与工具"><a href="#环境搭建与工具" class="headerlink" title="环境搭建与工具"></a>环境搭建与工具</h2><p>网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发，具体涉及到的软件我们接下来为你介绍。</p><h3 id="Pycharm的安装"><a href="#Pycharm的安装" class="headerlink" title="Pycharm的安装"></a>Pycharm的安装</h3><p>我在前面有一篇文章介绍了Pycharm的详细安装，这里就不赘述了，开启传送大门：<a href="https://www.jianshu.com/p/3c5a0457c643" target="_blank" rel="noopener">Python Web技术开发软件安装</a></p><h3 id="虚拟环境vritualenv的安装"><a href="#虚拟环境vritualenv的安装" class="headerlink" title="虚拟环境vritualenv的安装"></a>虚拟环境vritualenv的安装</h3><p>同样virtualenv的安装我之前也有3篇文章进行过介绍，为了便于学习，我这里直接复制过来了！</p><h3 id="1、安装pip"><a href="#1、安装pip" class="headerlink" title="1、安装pip"></a>1、安装pip</h3><p>我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹<code>(记住要和Python放在同一目录下)</code>，采用添加环境变量的方法<code>（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path）</code>，我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录<code>(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格</code>，</p><blockquote><p>C:\Users\YC-Jiang&gt;F:<br>F:&gt;cd Python<br>F:\Python&gt;cd pystall<br>F:\Python\pystall&gt;</p></blockquote><p>然后输入：<code>python setup.py install</code>回车，等待几分钟即可。</p><p>最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件<br>–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者<code>Windows徽标+R</code>中输入</p><blockquote><p>pip -—version</p></blockquote><p>小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入<br>python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句）</p><p>如果已经成功<strong>安装 pip</strong>，会提示类似下面的：</p><blockquote><p>pip 1.5.6 from C:\Python35\lib\site-packages\pip-1.5.6-py3.5.egg</p></blockquote><p>pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么<br>每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。</p><p>如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考<br>这个方法为你的 Windows电脑安装pip: <a href="https://taizilongxu.gitbooks.io/stackoverflowabout-python/content/8/README.html" target="_blank" rel="noopener">pip安装问题</a></p><h3 id="2、安装virtualenv"><a href="#2、安装virtualenv" class="headerlink" title="2、安装virtualenv"></a>2、安装virtualenv</h3><p>在终端输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line">virtualenv testvir  # 在当前用户目录(win+r %HOMEPATH%可查看)生成</span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat  # 激活</span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure><p>其实这种方法挺麻烦的，这里我推荐一种简单方法，<strong>安装virtualenvwrapper</strong></p><h3 id="3、安装virtualenvwrapper"><a href="#3、安装virtualenvwrapper" class="headerlink" title="3、安装virtualenvwrapper"></a>3、安装virtualenvwrapper</h3><p>在终端输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>接下来便是创建虚拟环境了，同样采用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv movie  # movie 为你新建虚拟环境的名称</span><br></pre></td></tr></table></figure><p>它会创建在C:\Users\YC\Envs当前用户目录下的Envs目录。</p><p>你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-036cc39d39c4a23f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>退出激活状态命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><strong>知道有哪些虚拟环境命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><p><strong>直接进入虚拟环境命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon movie</span><br></pre></td></tr></table></figure><p>如果出现这种情况，表示你已经进入到虚拟环境中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F:\Envs\movie</span><br></pre></td></tr></table></figure><p>再次说明，出现前面的(movie)就代表进入了虚拟环境，之后就可以进行包和库的安装了。输入pip list查看一下现在已经安装的包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(movie) F:\Envs\movie&gt;pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        18.0</span><br><span class="line">setuptools 40.2.0</span><br><span class="line">wheel      0.31.1</span><br><span class="line"></span><br><span class="line">(movie) F:\Envs\movie&gt;</span><br></pre></td></tr></table></figure></p><p>接下来是进行Flask的安装，这个其实和Django的安装很类似，只不过多了一个安装前和安装后的环境检测而已.</p><h3 id="Flask的安装"><a href="#Flask的安装" class="headerlink" title="Flask的安装"></a>Flask的安装</h3><hr><p>安装前检测：pip freeze<br>安装flask： pip install flask -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>安装后检测：pip freeze</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(movie) F:\Envs\movie&gt;pip list</span><br><span class="line">Package      Version</span><br><span class="line">------------ -------</span><br><span class="line">click        6.7</span><br><span class="line">Flask        1.0.2</span><br><span class="line">itsdangerous 0.24</span><br><span class="line">Jinja2       2.10</span><br><span class="line">MarkupSafe   1.0</span><br><span class="line">pip          18.0</span><br><span class="line">setuptools   40.2.0</span><br><span class="line">Werkzeug     0.14.1</span><br><span class="line">wheel        0.31.1</span><br><span class="line"></span><br><span class="line">(movie) F:\Envs\movie&gt;</span><br></pre></td></tr></table></figure><p>至此本篇关于项目的介绍以及开发环境的搭建就到此为止，感谢你的赏阅！</p><h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><p><strong>1、</strong><a href="http://www.pythondoc.com/flask-mega-tutorial/" target="_blank" rel="noopener">欢迎进入Flask大型教程项目！</a>一个不错的Flask介绍网站。<br><strong>2、</strong><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">Flask文档介绍</a>，挺官方的一个技术文档。<br><strong>3、</strong><a href="https://www.yiibai.com/flask/" target="_blank" rel="noopener">Flask教程</a>，一个受欢迎的技术网站。<br><strong>4、<a href="https://study.163.com/course/introduction.htm?courseId=1004091002" target="_blank" rel="noopener">Python Flask系列（1）——基础</a></strong>,网易云课堂的<strong>免费视频</strong>，教你如何入门Flask。</p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask建站 </tag>
            
            <tag> Pytohn后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（十一）：商品类别数据显示（下）</title>
      <link href="/2018/05/15/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/05/15/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看。" />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看。</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（十）：商品类别数据显示（上）</title>
      <link href="/2018/05/03/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/05/03/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E7%B1%BB%E5%88%AB%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们来介绍如何把我们的商品类别数据进行显示，由于涉及的知识较多，会分成2篇进行说明。</p><h2 id="商品的分类"><a href="#商品的分类" class="headerlink" title="商品的分类"></a>商品的分类</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5919ff3da8e45111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-13f796433757ebea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们前面说过，这里面配置了2个组件，其实就和我们两个目录相关联。一个是全部数据的接口，用于首页的全部商品分类：一级-二级-三级就是上面的那样；另一个就是获取某一大类的二级分类以及对应的商品数量，就是下面的图片：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0ccf04239cbd93cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>当商品被大类进行过滤时，我们需要设置过滤的条件，如价格区间，以及按照价格，销量的排序，还有商品页面的分页功能。</p><p>通过vue提供的工具，我们可以很容易的知道组件的结构：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-6d6633628551ed5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在产品列表中是一堆的<code>router link</code>，你点击它会跳转到详情页，这个详情页其实就是vue 的router路由：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-34a82b7a57dcf39e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了，分析到这里我们现在开始进行开发。打开goods\views.py文件，我们新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from .serializers import  CategorySerializer</span><br><span class="line"></span><br><span class="line">class CategoryViewset(mixins.ListModelMixin, viewsets.GenericViewSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    list:</span><br><span class="line">        商品分类列表数据</span><br><span class="line">    retrieve:</span><br><span class="line">        获取商品分类详情</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = GoodsCategory.objects.filter(category_type=1)</span><br><span class="line">    serializer_class = CategorySerializer</span><br></pre></td></tr></table></figure></p><p><strong>注意一下，我们因为是进行商品类别数据的显示，但是数量不是很多，所以不需要进行分页处理。同时因为后面需要生成文档，所以我们需要规范化我们的注释语言。</strong>当然我们还需要进行序列化，打开goods\serializers.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from goods.models import GoodsCategory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsCategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure></p><p>接着打开urls.py文件，我们配置路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import CategoryViewset</span><br><span class="line"></span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet, base_name=&apos;goods&apos;)  # 这里前面加r可以进行转义</span><br><span class="line"></span><br><span class="line"># 配置categorys的url</span><br><span class="line">router.register(r&apos;categorys&apos;, CategoryViewset, base_name=&apos;categorys&apos;)  # 这里前面加r可以进行转义</span><br></pre></td></tr></table></figure></p><p>这里的register有三要素：(prefix, viewset, base_name)，各个参数含义如下：<br>prefix ：该视图集的路由前缀；<br>viewset： 视图集；<br>base_name ：路由名称的前缀；<br>详细的可以点击这里了解一下：<a href="https://blog.csdn.net/weixin_40226313/article/details/80842832" target="_blank" rel="noopener">DRF路由Routers</a>。然后浏览器地址栏访问一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/categorys/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-90f590a97831740e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们发现这里没有出现我们想要的嵌套显示，也就是一类显示下面的二类，二类显示下面的三类，我们修改serializers.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class CategorySerializer3(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品三级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer2(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品二级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sub_cat = CategorySerializer3(many=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品一级类别序列化</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sub_cat = CategorySerializer2(many=True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br></pre></td></tr></table></figure></p><p>这里我们用到了<code>sub_cat</code>，因为我们在model里面将自身的继承关系进行了命名：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f36b6fa63e268f07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就可以通过一级分类(parents)得到二级分类（直接调用一级对象的sub_cat),此时就得到了二级对象的数据，但是对于此时得到的二级对象数据，我们依然可以对其进行序列化然后作为父本去获取三级分类对象的数据。</p><p>然后运行我们的项目，发现出了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AttributeError at /categories/</span><br><span class="line">Got AttributeError when attempting to get a value for field `sub_cat` on serializer `CategorySerializer2`.he serializer field might be named incorrectly and not match any attribute or key on the `RelatedManager` instance.Original exception text was: &apos;RelatedManager&apos; object has no attribute &apos;sub_cat&apos;.</span><br></pre></td></tr></table></figure></p><p>那么你需要检查是否缺少<strong>many = True</strong>这个参数，然后运行就没问题了。</p><p>我们思考这么一个问题， 我们现在获取的是所有的category，但是如何获取具体某一类别下面的信息呢。举个例子，我们点击生鲜食品这一栏，那么左侧出现的应该就是生鲜食品这一栏下面对应的具体信息，而不是依然得全部信息。</p><p>打开goods\views.py文件，我们可以多继承另外一个函数<code>mixins.RetrieveModelMixin</code>就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class CategoryViewset(mixins.ListModelMixin, mixins.RetrieveModelMixin, viewsets.GenericViewSet):</span><br></pre></td></tr></table></figure></p><p>在前面的文章里面我们获取某个具体的数据，是不是都在后面添加了id。假设我们这里需要获取书店里面的某本书（假设该书店只有不到100本书），我们通过get加id的方式就能直接获取取来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /book/10：获取编号为10的那本书</span><br></pre></td></tr></table></figure></p><p><strong>注意这样方式是严格按照restful api 的规范来进行配置的</strong>。按照这样的逻辑，我们需要哪个商品的信息，就要传入对应的id，没错就是这样（这是在线教育网站的一个path的配置）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 密码重置url</span><br><span class="line">    re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>但是强大的drf已经通过刚才那个函数给我们这样配置了，我们只需刚才那一步即可，都不需要在url里面进行相应的配置,只要我们继承了<code>mixins.RetrieveModelMixin</code>就可以直接通过id来进行具体数据的获取了，是不是很赞。运行你的项目，然后在浏览器地址栏输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/categorys/1/</span><br></pre></td></tr></table></figure></p><p>回车，进行访问吧，可以看到此时返回的是一个字典。</p><h2 id="Vue展示商品分类的数据"><a href="#Vue展示商品分类的数据" class="headerlink" title="Vue展示商品分类的数据"></a>Vue展示商品分类的数据</h2><p>现在我们准备将category的数据和vue进行联调，不过在此之前我们我们需要解决跨域访问的问题。跨域问题在前后端分离的项目中是非常常见的，你不用大惊小怪。我们现在查看一下这个category是如何将数据映射进来的：<code>F:\cnpmtest\online-store\src\views\head\head.vue</code>文件里面，可以看到里面的getMenu函数调用了getCategory函数，那么问题来了getCatgory函数到底在哪里呢：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-be80e233790c059b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在这里<code>import { getHotSearch, getCategory ,deleteShopCart } from  &#39;../../api/api&#39;</code>看到文里面的导入说明了么，这个文件对应我的位置在<code>F:\cnpmtest\online-store\src\api\api.js</code>，我们打开看一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d0bdd89352df75f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到里面的getCategory 函数了么，这种写法是ES6的写法，可以点击这里了解一下：<a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">ECMAScript 6 入门</a>。ES6中的箭头函数params =&gt;传递一个params，如果params中有id那么，通过axios获取接口，并返回指定的具体信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.get(`$&#123;host&#125;/categorys/`+params.id+&apos;/&apos;);</span><br></pre></td></tr></table></figure></p><p>如果没有id就返回全部的信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return axios.get(`$&#123;host&#125;/categorys/`, params);</span><br></pre></td></tr></table></figure></p><p>其中这里面的${host}是我们获取信息的域名，也就是bobby老师的网站：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let host = &apos;http://shop.projectsedu.com&apos;;  # 线上环境</span><br></pre></td></tr></table></figure></p><p>这个函数是一个公共的函数，export是导出数据： <a href="https://www.cnblogs.com/dupd/p/5951311.html" target="_blank" rel="noopener">ES6模块的import和export用法总结</a>。这样就解决了获取详情信息或通用性问题。那么问题来了，我们如何来调试接口呢？可以注意到，我们在很多地方都用到了host，而我们调试只是一个接口一个调试，该如何解决呢？办法就是新建一个自己的<code>local_host</code>，然后用这个来进行替换，调试谁就替换谁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let local_host = &apos;http://127.0.0.1:8000&apos;</span><br></pre></td></tr></table></figure></p><p>我们现在因为是调试category，所以需要替换它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//获取商品类别信息</span><br><span class="line">export const getCategory = params =&gt; &#123;</span><br><span class="line">  if(&apos;id&apos; in params)&#123;</span><br><span class="line">    return axios.get(`$&#123;local_host&#125;/categorys/`+params.id+&apos;/&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">    return axios.get(`$&#123;local_host&#125;/categorys/`, params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后启动我们的前端项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>发现出了这样的错误：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5c6fffbc1b2ad38d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load resource: net::ERR_CONNECTION_REFUSED</span><br></pre></td></tr></table></figure></p><p>说明我们的本地vueshop项目没有启动，我们运行我们的项目，然后发现还是有问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-aac22dc8bdf70523.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这条信息告诉不允许跨域访问，因为我们跨了端口访问，一个是8080，一个是8000，所以才会出错，解决的办法很多。前端的npm也是可以完成跨域访问的，一般是通过proxy代理来完成的。不过这里我们主要说明如何利用服务器来完成跨域访问的。</p><h3 id="服务器跨域访问"><a href="#服务器跨域访问" class="headerlink" title="服务器跨域访问"></a>服务器跨域访问</h3><p>在GitHub上面搜索<code>django-cors-headers</code>，然后按照要求进行配置：<code>Django app for handling the server headers required for Cross-Origin Resource Sharing (CORS)</code>。<br>1、安装django-cors-headers（记得是在虚拟环境下面进行安装）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>2、注册进入apps(settings.py文件):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    &apos;corsheaders&apos;,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>3、配置MIDDLEWARE(settings.py文件，最好放在第一个位置)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &apos;corsheaders.middleware.CorsMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>4、添加参数并设置为true以及白名单的配置（settings.py文件）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = True</span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    &apos;127.0.0.1:3000&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>然后刷新一下，发现数据就出来了，那么这个数据是如何出来的呢？继续回看我们的head.vue文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getMenu()&#123;//获取菜单</span><br><span class="line">          getCategory(&#123;</span><br><span class="line">            params:&#123;&#125;</span><br><span class="line">          &#125;).then((response)=&gt; &#123;</span><br><span class="line">                    console.log(response)</span><br><span class="line">                    this.allMenuLabel = response.data</span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(function (error) &#123;</span><br><span class="line">                  console.log(error);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></p><p>看到没有，这里将response.data赋值给了<code>allMenuLabel</code>，我们在nodepad++里面搜索一下，看这个<code>allMenuLabel</code>，看它在哪个地方：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li class=&quot;first&quot; v-for=&quot;(item,index) in allMenuLabel&quot; @mouseover=&quot;overChildrenmenu(index)&quot; @mouseout=&quot;outChildrenmenu(index)&quot;&gt;</span><br><span class="line">                              &lt;h3 style=&quot;background:url(../images/1449088788518670880.png) 20px center no-repeat;&quot;&gt;</span><br><span class="line">                                &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt; &lt;/h3&gt;</span><br></pre></td></tr></table></figure></p><p>发现我们后面使用v-for对它的数据进行了遍历，而且这里有一个<code>router-link</code>，它是指向前端的vue_router路由，并不是我们后台的路径，这点要注意一下。其实我们这里就已经把数据的显示和路由交给了前端，后端只需要提供数据就可以了，我们的任务就已经完成了。</p><p>现在又有一个问题，为什么我们前面的导航栏没有数据呢:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2b86d30a857873d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们在后台管理的时候默认没有设置为允许导航，我们可以去后台添加几个导航栏试试.</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8cd751e1f08fe167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-57c15e350de1f2e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>刷新一下，然后发现导航栏就出现了我们想要的数据。其实我们在前面对这个是否显示导航栏也进行了配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-for=&quot;(item,index) in allMenuLabel&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;div v-if=&quot;item.is_tab&quot;&gt;</span><br><span class="line">   &lt;router-link :to=&quot;&apos;/app/home/list/&apos;+item.id&quot; &gt;&#123;&#123;item.name&#125;&#125;&lt;/router-link&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"> &lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>至此，我们本篇关于商品类别数据进行显示上篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（九）：商品列表页的配置（下）</title>
      <link href="/2018/05/02/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2018/05/02/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们完成商品列表页面的剩余配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="drf中的request和response说明"><a href="#drf中的request和response说明" class="headerlink" title="drf中的request和response说明"></a>drf中的request和response说明</h2><h3 id="drf中的request"><a href="#drf中的request" class="headerlink" title="drf中的request"></a>drf中的request</h3><p>我们知道drf对于django的request和response进行了一层封装，所以我们使用起来会更加方便。<br><code>REST framework&#39;s Request class extends the standard HttpRequest, adding support for REST framework&#39;s flexible request parsing and request authentication.</code>这句话的意思是说：drf在标准的HttpRequest上进行了扩展，增加了对rest框架的灵活请求解析和请求认证的支持。</p><p>下面简要说明一下：request。我们可以点击这里<a href="https://www.django-rest-framework.org/api-guide/requests/" target="_blank" rel="noopener">drf中的request</a>。<br> <a href="https://www.django-rest-framework.org/api-guide/requests/#data" target="_blank" rel="noopener">.data</a>：<br> data ,返回用户获取的信息（包括所有的解析内容，文件和非文件），而且不仅能解析通过post方法过来的信息，其他的方法如put ，patch也能进行解析。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#query_params" target="_blank" rel="noopener">.query_params</a>：<br>query_params,里面有通过get请求传递过来的参数，自己可以配置。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#parsers" target="_blank" rel="noopener">.parsers</a>：<br>parsers，因为用户提交过来的数据有很多种类型，所以它就是负责接收各种信息，并提供各种解析器进行解析。</p><p><a href="https://www.django-rest-framework.org/api-guide/requests/#authentication" target="_blank" rel="noopener">Authentication</a>包括：<a href="https://www.django-rest-framework.org/api-guide/requests/#user" target="_blank" rel="noopener">.user</a>和<a href="https://www.django-rest-framework.org/api-guide/requests/#auth" target="_blank" rel="noopener">.auth</a><br>.use就是说只有通过验证才能获取到当前的用户，而这个.auth返回一些额外的验证信息。</p><h3 id="drf中的response"><a href="#drf中的response" class="headerlink" title="drf中的response"></a>drf中的response</h3><p> <a href="https://www.django-rest-framework.org/api-guide/responses/#responses" target="_blank" rel="noopener">Responses</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b664746855c5e23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>response就是根据你发起的请求然后返回响应，对于我们爬虫人员来说最熟悉不过的了，所以我就不细说了。这些就是英文文档的内容，全都有，你点上面那些蓝色的<strong>xx</strong>就知道了，我就不一句句翻译了，可能我翻译的还没你理解的印象深刻呢。</p><h2 id="drf过滤器"><a href="#drf过滤器" class="headerlink" title="drf过滤器"></a>drf过滤器</h2><p>我们打开goods\views.py文件，开始书写代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有c或者java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        query_set = Goods.objects.all()</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            query_set = query_set.filter(shop_price__gt=price_min)</span><br><span class="line">        return query_set</span><br></pre></td></tr></table></figure></p><p>不过运行项目，在浏览器地址栏输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/%EF%BC%9Fprice_min=100</span><br></pre></td></tr></table></figure></p><p>，发现会错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> assert queryset is not None, &apos;`base_name` argument not specified, and could &apos; \</span><br><span class="line">AssertionError: `base_name` argument not specified, and could not automatically determine the name from the viewset, as it does not have a `.queryset` attribute.</span><br></pre></td></tr></table></figure></p><p>提示我们缺少一个queryset属性，我们尝试修改一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    query_set = Goods.objects.all()</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            self.query_set = Goods.objects.filter(shop_price__gt=int(price_min))</span><br><span class="line">        return self.query_set</span><br></pre></td></tr></table></figure></p><p>运行还是会报同样的错误。找了很久才发现，原来是query_set 这个名字错了，需要修改为queryset:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        price_min = self.request.query_params.get(&apos;price_min&apos;, 0)</span><br><span class="line">        if price_min:</span><br><span class="line">            self.queryset = Goods.objects.filter(shop_price__gt=int(price_min))</span><br><span class="line">        return self.queryset</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，在浏览器地址栏输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/?page=1&amp;price_min=100</span><br></pre></td></tr></table></figure></p><p>回车发现，问题解决了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d001e1c807a61785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你有没有觉得这种过滤很麻烦，既要获取参数，又要判断参数是否存在，存在之后又要进行int类型转化。有没有简单的方法呢，答案是有的：<a href="https://www.django-rest-framework.org/api-guide/filtering/#filtering" target="_blank" rel="noopener">Filtering</a>。这个drf提供的filter是非常强大的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c0b323c74a42f364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#djangofilterbackend" target="_blank" rel="noopener">DjangoFilterBackend</a>：传统的Django过滤器，类似于xadmin的后台管理器。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#searchfilter" target="_blank" rel="noopener">SearchFilter</a>：通过搜索关键词进行过滤。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a>：通过某个顺序来进行过滤。</p><p><a href="https://www.django-rest-framework.org/api-guide/filtering/#djangoobjectpermissionsfilter" target="_blank" rel="noopener">DjangoObjectPermissionsFilter</a>：通过权限进行过滤。</p><p>前面三种是比较常见的过滤，它们可以实现列表页面的普通字段精确过滤，搜索过滤，以及排序等功能，下面分别进行介绍。</p><h3 id="DjangoFilterBackend"><a href="#DjangoFilterBackend" class="headerlink" title="DjangoFilterBackend"></a>DjangoFilterBackend</h3><p>1、安装<code>django-filter</code>（前面已经安装过了）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure></p><p>2、注册进入app<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;django_filters&apos;,</span><br></pre></td></tr></table></figure></p><p>3、添加设置（默认设置好了，不用管）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &apos;DEFAULT_FILTER_BACKENDS&apos;: (&apos;django_filters.rest_framework.DjangoFilterBackend&apos;,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、开始使用,打开goods\vieews.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django_filters.rest_framework import DjangoFilterBackend</span><br></pre></td></tr></table></figure></p><p>5、删除原来定义的过滤方法：<code>def get_queryset(self)</code>代码全部去掉。<br>6、仿照官方案例进行代码书写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # good_viewset是实例化对象，这里的queryset是属性 ，使用good_viewset.queryset就可以进行访问</span><br><span class="line">    # 而下面的get_queryset是方法，需要使用使用good_viewset.get_queryset()才能进行访问,要么通过属性，要么通过方法，二选一即可</span><br><span class="line">    # 有java经验的童鞋很好理解这个问题。</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    filter_backends = (DjangoFilterBackend,)</span><br><span class="line">    filter_fields = (&apos;name&apos;, &apos;shop_price&apos;)</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们项目，发现页面多了一个过滤器按钮，我们可以进行过滤：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5085aae67da6835b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-aa5147ea18a50359.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们测试一下，价格输入123，名称不输入,然后回车，发现浏览器地址栏变成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/?name=&amp;shop_price=123</span><br></pre></td></tr></table></figure></p><p><strong>注意一下，过滤和搜索是不一样的，过滤是精确的，字段必须保持一模一样，但是搜索却不是。</strong></p><p>但是我们如果想要模糊查询，而且价格在某个区间里面，这该怎么办呢？</p><h2 id="区间搜索和模糊查询"><a href="#区间搜索和模糊查询" class="headerlink" title="区间搜索和模糊查询"></a>区间搜索和模糊查询</h2><p>点击这里查看<a href="https://django-filter.readthedocs.io/en/master/" target="_blank" rel="noopener">django-filter</a>，注意一下，这个django-filter不仅可以用在drf上面，还可以用于Django上面，它允许我们自定义filter类。</p><p>我们在goods app下面新建一个filters.py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: filters.py</span><br><span class="line"># @time: 2018/10/4 17:47</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django_filters import rest_framework as filters</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsFilter(filters.FilterSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品的过滤类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    price_min = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;gte&apos;)      # 指定字段及字段的行为，我们这里指定shop_price的区间</span><br><span class="line">    price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&apos;lte&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [&apos;price_min&apos;, &apos;price_max&apos;]</span><br></pre></td></tr></table></figure></p><p>接着回到我们的views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from goods.filters import GoodsFilter</span><br><span class="line"></span><br><span class="line"> filter_backends = (DjangoFilterBackend,)  # # DjangoFilterBackend 过滤器</span><br><span class="line"> # filter_fields = (&apos;name&apos;, &apos;shop_price&apos;)   # 设置我们需要过滤的字段 </span><br><span class="line"> filter_class = GoodsFilter   # filter_class 等于我们自定义的类</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，发现出了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">super().__init__(**kwargs)</span><br><span class="line">TypeError: __init__() got an unexpected keyword argument &apos;name&apos;</span><br></pre></td></tr></table></figure></p><p>解决办法，修改 <code>price_max = filters.NumberFilter(name=&quot;shop_price&quot;, lookup_expr=&#39;lte&#39;)</code>里面的<code>name</code>字段为<code>field_name</code>即可。</p><p>刷新一下就成了这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-44886e282c1114bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意一下，这里如果出现过滤器没有确定按钮的话，检查一下看你有没有继承错误，应该继承的是<code>from django_filters import rest_framework as filters</code>这个语句。</p><p>还有出现了这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: &lt;class &apos;goods.models.Goods&apos;&gt; QuerySet.</span><br><span class="line">  paginator = self.django_paginator_class(queryset, page_size)</span><br></pre></td></tr></table></figure></p><p>因为对于无序的数据，分页器生成的分页数据可能不一致，才导致这种情况，解决办法（打开goods\views.py文件，修改一下queryset代码）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryset = Goods.objects.all().order_by(&apos;add_time&apos;)</span><br></pre></td></tr></table></figure></p><p>然后问题就解决了。接下来完成我们的迷糊查询（搜索）。采用Django QuerySetAPI来完成我们的要求，这里推荐自强学堂的一篇文章<a href="https://code.ziqiangxuetang.com/django/django-queryset-api.html" target="_blank" rel="noopener">Django QuerySetAPI</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = filters.CharFilter(field_name=&quot;name&quot;, lookup_expr=&quot;icontains&quot;)  # 模糊查询: 名称中包含某字符，且字符不区分大小写,不加lookup_expr=&quot;icontains&quot;则是等值匹配</span><br><span class="line"></span><br><span class="line">class Meta:</span><br><span class="line">    model = Goods</span><br><span class="line">    fields = [&apos;price_min&apos;, &apos;price_max&apos;, &apos;name&apos;]</span><br></pre></td></tr></table></figure></p><p>接下来我们进行搜索的配置，在这之前去掉前面的模糊查询代码，两行哈，就上面的。</p><h2 id="SearchFilter"><a href="#SearchFilter" class="headerlink" title="SearchFilter"></a>SearchFilter</h2><p>点击这里查看官方文档：<a href="https://www.django-rest-framework.org/api-guide/filtering/#searchfilter" target="_blank" rel="noopener">SearchFilter</a>，我们仿照官方的实例来测试一下：（打开goods\views.py文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import filters</span><br><span class="line"></span><br><span class="line">  filter_backends = (DjangoFilterBackend, filters.SearchFilter)   # DjangoFilterBackend,以及SearchFilter过滤器（SearchFilter）</span><br><span class="line">  search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;)</span><br></pre></td></tr></table></figure></p><p>然后运行一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eb445f4ff8d72e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面多了一个搜索框，<code>DjangoFilterBackend</code>和<code>SearchFilter</code>可以分开使用，也可以合起来使用，想让谁显示就配置谁，也可以同时显示。</p><p>如果出现下面的错误,说明你的filter导错了，我们这里要用到的是<code>from rest_framework import filters</code>而不是<code>from django_filters import filters</code>注意一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter)</span><br><span class="line">AttributeError: module &apos;django_filters.rest_framework.filters&apos; has no attribute &apos;SearchFilter&apos;</span><br></pre></td></tr></table></figure></p><p>然后搜索还支持多种过滤方式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d82f808707fbcf03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;name&apos;, &apos;goods_brief&apos;, &apos;goods_desc&apos;)</span><br></pre></td></tr></table></figure><p>需要说明的一点是，这三个字段不是统一的，也就是说可以单独使用。例如对name进行等值搜索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;=name&apos;)</span><br></pre></td></tr></table></figure></p><p>去掉其他的字段，返回结果为0个。而我们在里面加一个字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (&apos;=name&apos;, &apos;goods_brief&apos;)</span><br></pre></td></tr></table></figure></p><p>返回结果就不是了，而是有一个。如果你把第三个字段都加上，发现全部结果了，因为他们里面只要满足一个条件就能返回。也就是说是或的关系，而不是与的关系，这一点要注意一下。同时我们这里不进行全文的搜索，因为一般模糊查询最好是使用elasticSearch来做，那样更方便。接下来是OrderingFilter排序了。</p><h2 id="OrderingFilter"><a href="#OrderingFilter" class="headerlink" title="OrderingFilter"></a>OrderingFilter</h2><p>老规矩还是先看官方文档：<a href="https://www.django-rest-framework.org/api-guide/filtering/#orderingfilter" target="_blank" rel="noopener">OrderingFilter</a>，然后按照官方的例子来测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># DjangoFilterBackend,,SearchFilter,OrderingFilter</span><br><span class="line">filter_backends = (DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter)</span><br><span class="line">ordering_fields = (&apos;sold_num&apos;, &apos;add_time&apos;)</span><br></pre></td></tr></table></figure></p><p>我们按照商品的销量，添加时间进行排序，分正排序与负排序：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b4493ed9f5882265.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样我们通过简单的几行代码，完成了商品列表页的分页，过滤，搜索，排序功能。</p><p>至此，我们本篇关于商品列表页面的配置下篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（八）：商品列表页的配置（中）</title>
      <link href="/2018/05/01/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
      <url>/2018/05/01/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们继续进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="基于类来配置商品列表页"><a href="#基于类来配置商品列表页" class="headerlink" title="基于类来配置商品列表页"></a>基于类来配置商品列表页</h2><p>现在我们不使用那个APIView，而是使用更上层的view：<code>GenericAPIView</code><a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/#using-mixins" target="_blank" rel="noopener">Using mixins</a>，这样写起来更加简单。使用Using mixins 和 GenericAPIView，其中GenericAPIView是在APIView的基础上进行了更深层次的封装，里面加入了一些东西如分页用的pagination_class，过滤用的filter_backends等。</p><p>我们看到官方给我们提供的文档代码是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from snippets.models import Snippet</span><br><span class="line">from snippets.serializers import SnippetSerializer</span><br><span class="line">from rest_framework import mixins</span><br><span class="line">from rest_framework import generics</span><br><span class="line"></span><br><span class="line">class SnippetList(mixins.ListModelMixin,</span><br><span class="line">                  mixins.CreateModelMixin,</span><br><span class="line">                  generics.GenericAPIView):</span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>所以，我们按照这个代码来修改我们的goods\views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line">from rest_framework import mixins</span><br><span class="line">from rest_framework import generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(mixins.ListModelMixin, generics.GenericAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()[:10]</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>我们通过get方法最后返回的是一个list函数，我们看一下list函数到底是干嘛的，我们可以看到在mixin.py文件里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6566bfa836c6aad5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>它其实已经可以实现分页和序列化的功能了。</p><p>现在我们尝试把get方法注释掉，运行一下项目，发现出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;detail&quot;: &quot;方法 “GET” 不被允许。&quot;</span><br></pre></td></tr></table></figure></p><p>所以说，不论是何种view，我们都需要去重写它的get或者post等http请求的方法（drf默认是不会接收任何方法请求的）</p><p>这样是不是很简单，几行代码就解决了问题。那么我要是告诉你还有比这更简单的方法，都不用你去写get或者post等http请求，是不是觉得太方便了呢。</p><p>我们查看Pycharm左边的源码：<code>F:\Envs\vueshop\Lib\site-packages\rest_framework\generics.py</code>:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2402453503feb539.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击那个<code>ListAPIView</code>，有没有发现右侧的代码和我们刚才写的一模一样，所以我们可以直接继承这个<code>ListAPIView</code>，就不用写那些多余的代码了。注意到没有，右边的函数都直接继承了两个：<code>mixins.XXXXModelMixin, GenericAPIView</code>，这个和我们前面代码所继承的一模一样（<code>mixins.ListModelMixin, generics.GenericAPIView</code>这里直接在generics.py文件里使用，所以不加generics），所以直接使用<br><code>ListAPIView</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.generics import ListAPIView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(ListAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()[:10]</span><br><span class="line">    serializer_class = GoodsSerializer</span><br></pre></td></tr></table></figure><p>简单说一下几个常用的APIView：ListAPIview (用于获取列表)，CreateAPiView (用于创建一条信息)，RetrieveAPIView(用于获取某一条信息)。具体可以点击这里进行查看：<a href="https://www.cnblogs.com/yangxiaoling/p/6914880.html" target="_blank" rel="noopener">API Guide(四)之Generic views</a></p><p>现在又有问题，一般的列表页都是需要分页的，你不可能一下子把所有的信息都给展示出来,我们有简单的方法，只需要通过在setting里面配置一个参数就能完成我们的分页功能。我们所有关于rest-framework的配置都是在<code>F:\Envs\vueshop\Lib\site-packages\rest_framework\settings.py</code>里面的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-77b283c5c240d09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>可以看到，drf默认是不提供分页的，需要我们自己来写，我们打开vueshop\settings.py文件，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &apos;DEFAULT_PAGINATION_CLASS&apos;: &apos;rest_framework.pagination.LimitOffsetPagination&apos;,</span><br><span class="line">    &apos;PAGE_SIZE&apos;: 10,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这些功能都是刚才提到的<code>GenericAPIView</code>来实现的。我们发现运行之后都直接给图片把域名都给加上了，可以直接进行访问了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2fb3d6901c7b116e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还可以自定义pagination的样式： <a href="https://www.django-rest-framework.org/api-guide/pagination/#setting-the-pagination-style" target="_blank" rel="noopener">Setting the pagination style</a><br>我们继续在views.py里面进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.pagination import PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsPagination(PageNumberPagination):</span><br><span class="line">    page_size = 10   # 默认每页个数</span><br><span class="line">    page_size_query_param = &apos;page_size&apos;  # 可以自定义每页的个数</span><br><span class="line">    page_query_param = &quot;p&quot;</span><br><span class="line">    max_page_size = 100  # 默认每页最大个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(generics.ListAPIView):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure></p><p>注意这里在<code>GoodsListView</code>里面必须添加<code>pagination_class</code>字段，因为在<code>GenericAPIView</code>里面有这个参数，还字段调用了这个<code>DEFAULT_PAGINATION_CLASS</code>，也就意味着有了这个你就要把刚才在settings.py里面配置的那个<code>DEFAULT_PAGINATION_CLASS</code>给注释掉，否则就会出错哈：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0443de0023fcb94f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行结果如下(第几页，每页多少个都是可以自定义的，你不定义就用默认的)：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-30d3d400539a3ee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="Viewsets和router完成商品列表页"><a href="#Viewsets和router完成商品列表页" class="headerlink" title="Viewsets和router完成商品列表页"></a>Viewsets和router完成商品列表页</h2><p>现在我们来说一个比GenericAPIView还要更深层次的东西：Viewsets，这个不是某个具体的View，他包函5个view：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-706bfbdca1ee3aad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们现在将使用它的GenericViewSet，看到没有它不仅封装了我们的GenericAPIView，还添加了一个ViewSetMixin：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-df201f1205830bb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们来看一下这个ViewSetMixin里面包含了什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a5646d36b4e02fa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>里面有4个方法，第一个就是路由函数的配置。</p><p>我们知道我们刚才在GoodsListView里面继承的是这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListView(generics.ListAPIView):</span><br></pre></td></tr></table></figure></p><p>我们点开ListAPIView，发现ListAPIView其实继承了mixins.ListModelMixin和GenericAPIView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class ListAPIView(mixins.ListModelMixin,</span><br><span class="line">                  GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>而如果我们只这样写，发现GenericViewSet其实继承的是ViewSetMixin和generics.GenericAPIView，是不是少了一个，对把mixins.ListModelMixin给丢了，所以我们需要补上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListView(viewsets.GenericViewSet):</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br></pre></td></tr></table></figure><p>现在我们看这个： <a href="https://www.django-rest-framework.org/api-guide/viewsets/#viewsets" target="_blank" rel="noopener">ViewSets</a>，尝试将ViewSets和Routers来进行配套使用。为了更好地知道我们这里是使用了viewset，因此我们将GoodsListView进行改名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):    # 注意这里不需要mixins.CreateModelMixin,因为我们数据在数据库里面已经添加了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    queryset = Goods.objects.all()</span><br><span class="line">    serializer_class = GoodsSerializer</span><br><span class="line">    pagination_class = GoodsPagination</span><br></pre></td></tr></table></figure></p><p>接下来去我们的urls.py文件里面配置我们的url:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListViewSet</span><br><span class="line"></span><br><span class="line">goods_list = GoodsListViewSet.as_view(&#123;</span><br><span class="line">    &apos;get&apos;: &apos;list&apos;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>我们可以直接将get请求绑定到list上面，类似于前面看到的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get(self, request, *args, **kwargs):</span><br><span class="line">    return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>既然这样弄好了，我们之前的url映射就要修改了（我们不再需要添加as_view()了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 商品列表页</span><br><span class="line">path(&apos;goods/&apos;, goods_list, name=&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></p><p>其实还有更简单的呢，我们可以看到官方文档里面有介绍这个<code>DefaultRouter</code>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d60fb33bc336e167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意由于官方是1.x的文档，所以2.0的drf配置可能url就有些不同，但是没关系，我这个我经过了测试，没有问题。我们继续修改urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet)  # 这里前面加r可以进行转义</span><br></pre></td></tr></table></figure></p><p>然后去掉之前对于goods的配置，在urlpatterns中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 对于goods的router path路径</span><br><span class="line">  re_path(&apos;^&apos;, include(router.urls)),</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，发现么有任何问题。</p><p>看到这里大家就可能会懵圈，其实我也是，因为我们不知道什么时候用GenericViewSet, GenericAPIView ，APIView  和 View。懵圈就是对的，我们接下来就是说明这些东西的层次结构，以后你就不会晕了。</p><h2 id="GenericViewSet，-GenericAPIView，APIView-和View的使用"><a href="#GenericViewSet，-GenericAPIView，APIView-和View的使用" class="headerlink" title="GenericViewSet， GenericAPIView，APIView 和View的使用"></a>GenericViewSet， GenericAPIView，APIView 和View的使用</h2><p>现在我们来理清一下这些view之间的关系，还有mixins.ListModelMixin以及这些关系如何来进行组合使用，这样我们就清楚什么时候使用什么了。看这里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GenericViewSet(viewset) -drf</span><br><span class="line">    GenericAPIView      -drf</span><br><span class="line">        APIView         -drf</span><br><span class="line">            View        -django</span><br></pre></td></tr></table></figure></p><p>层级关系有了（越往上就是对底层的一次封装）也就是说下面有的功能上面一定都有，而上面有的功能下面却不一定有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">class APIView(View):</span><br></pre></td></tr></table></figure></p><p>但还是不清楚各个view的区别（这里是指功能view），我们需要借助mixin来进行理解了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b1b89805fd9ba0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面可以看到mixin一共有5种类型，各个view 之间的差异其实就是通过这个mixin来实现的。这就好比英语中的时态一样，都是完成时，却又不同（前面那个层级关系就类似说明了，过去时，现在时，将来时的区别（实际上又没有，里面的意思你肯定懂））：</p><hr><p>过去完成时，现在完成时，将来完成时，过去将来完成时</p><hr><p>有点跑题，不懂的点这里看一下，毕竟英语还是挺重要的：<a href="https://baijiahao.baidu.com/s?id=1592289962651390333&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">现在完成时+过去完成时+将来完成时+过去将来完成时</a>。我们来看这5个mixin，我们以其中的ListModelMixin为例，来进行说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class ListModelMixin(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List a queryset.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def list(self, request, *args, **kwargs):</span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        if page is not None:</span><br><span class="line">            serializer = self.get_serializer(page, many=True)</span><br><span class="line">            return self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=True)</span><br><span class="line">        return Response(serializer.data)</span><br></pre></td></tr></table></figure></p><p>我们看到这个<code>ListModelMixin</code>继承的是最高类object（祖宗类），这个没什么说的。关键是这里的list方法，它将get 和 list进行了连接，里面实现了过滤，分页和序列化的功能。</p><p>其他的Mixin：<br>CreateModelMixin ：创建数据会用到；<br>RetrieveModelMixin：获取具体的信息，序列化；<br>UpdateModelMixin：更新全部还是部分的信息；<br>DestroyModelMixin：用来连接delete操作，并在操作的时候设置返回状态如200，204等。<br>上面这些功能都是由<code>mixin</code>来完成的，<code>GenericAPIView</code>并没有做，所以要实现相应的功能就必须通过两者结合来达到。那现在的问题就是这个<code>GenericAPIView</code>到底做了什么事情，不可能绑定这么一个没有的东西吧。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0b1eaab2f0b14899.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><code>GenericAPIView</code>有好多种，我们以<code>ListAPIView</code>为例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class ListAPIView(mixins.ListModelMixin, GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>点击右边的<code>GenericAPIView</code>，我们可以看到它是继承了<code>views.APIView</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Base class for all other generic views.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # You&apos;ll need to either set these attributes,</span><br><span class="line">    # or override `get_queryset()`/`get_serializer_class()`.</span><br><span class="line">    # If you are overriding a view method, it is important that you call</span><br><span class="line">    # `get_queryset()` instead of accessing the `queryset` property directly,</span><br><span class="line">    # as `queryset` will get evaluated only once, and those results are cached</span><br><span class="line">    # for all subsequent requests.</span><br><span class="line">    queryset = None</span><br><span class="line">    serializer_class = None</span><br><span class="line"></span><br><span class="line">    # If you want to use object lookups other than pk, set &apos;lookup_field&apos;.</span><br><span class="line">    # For more complex lookup requirements override `get_object()`.</span><br><span class="line">    lookup_field = &apos;pk&apos;</span><br><span class="line">    lookup_url_kwarg = None</span><br><span class="line"></span><br><span class="line">    # The filter backend classes to use for queryset filtering</span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line">    # The style to use for queryset pagination.</span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>看到上面的注释没有：<code>Base class for all other generic views</code>：所有通用（一般）视图的基类。里面还有两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># The filter backend classes to use for queryset filtering</span><br><span class="line">filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line"># The style to use for queryset pagination.</span><br><span class="line">pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>看到了，为什么我们可以过滤，可以分页？原因就在这里。我们再点击右边的APIView，看看这里面是什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e95f74b4583e1057.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这就是一些基本的功能，我们前面的<code>GenericAPIView</code>就已经封装具有了这些，一些没有的功能就在更深的view上面。这就好比你一年级会+，-运算，二年级你除了会+，-还会了*，/运算；到了后面，你不仅会前面的还会乘方，开方。。。。运算。</p><p>现在我们谈一下马上用到的<code>RetrieveAPIView</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>这个注释<code>Concrete view for retrieving a model instance.</code>的意思是：取到一个模型实例化的具体视图。然后将get方法与retrieve方法进行绑定，就能利用到retrieve的方法了，而不仅仅只是get数据了。而且通过浏览器发送过来的请求只有http协议中规定的几种，我们这里就不只有那些了。我们点<code>retrieve</code>进去，看看这个函数实现了什么功能。它自动帮我们跳到了RetrieveModelMixin这个类，而里面有一个<code>retrieve</code>函数。这个类的作用就是获取一个模型的实例而且是通过<code>retrieve</code>函数来完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveModelMixin(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Retrieve a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def retrieve(self, request, *args, **kwargs):</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        return Response(serializer.data)</span><br></pre></td></tr></table></figure><p>所以这其实就是<code>mixins.RetrieveModelMixin</code>和<code>GenericAPIView</code>的一次组合，实际上你通过那个RetrieveAPIView的继承关系就能看出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin, GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>那么按照这种组合我们是否可以自己组合自己想要的类呢？答案是可以的，但是别忘了把get 方法和 retrieve方法进行绑定，也就是说光有下面是不可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>正确的应该是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class RetrieveAPIView(mixins.RetrieveModelMixin,</span><br><span class="line">                      GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for retrieving a model instance.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.retrieve(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>所以一般情况我们都会优先考虑那些已经组合好的APIView，只有在满足不了需求的情况下，我们才进行组合，记得将http请求方法（不一定是get）与mixin方法进行绑定哈:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b1a3b176a4188c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们往上走，说完了<code>GenericAPIView</code>，现在来说一下<code>GenericViewSet(viewset)</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GenericViewSet(viewset) -drf</span><br><span class="line">    GenericAPIView      -drf</span><br><span class="line">        APIView         -drf</span><br><span class="line">            View        -django</span><br></pre></td></tr></table></figure></p><p>这个viewset有什么好处呢？我们知道这个viewset有5种：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d8db077e5e58398c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>它们也都继承了GenericAPIView，并都与唯一的ViewSetMixin进行了组合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GenericViewSet(ViewSetMixin, generics.GenericAPIView):</span><br></pre></td></tr></table></figure></p><p>我们看一下这个<code>ViewSetMixin</code>它里面是什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4f43f5c4ea8596da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个<code>ViewSetMixin</code>将具体的每个modelmixin(例如:(mixins.DestroyModelMixin，mixins.UpdateModelMixin)进行了功能合并，形成了唯一的一个<code>ViewSetMixin</code>。</p><p>在讲<code>GenericAPIView</code>的时候我们说过，当你自定义APIView的时候需要将http请求方法与mixin方法进行绑定。那么上面说过这个唯一的<code>ViewSetMixin</code>既然是进行了功能合并，那我们就不需要进行方法绑定了。<strong>注意我这里是说不需要进行方法的绑定，但没说不需要其他的绑定关系。</strong></p><p>url的配置还是需要配置的，我们打开那个viewsets.py文件（实际上我们上通过点击这个GenericViewSet来直接进入该文件的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GoodsListViewSet(viewsets.GenericViewSet, mixins.ListModelMixin):</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e97c6fc89718e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这其实就是url的配置，它重写了as_view方法，接受参数，并传递到对应的method 与action进行绑定。所以我们在urls.py文件里面，就要修改了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goods_list = GoodsListViewSet.as_view(&#123;</span><br><span class="line">    &apos;get&apos;: &apos;list&apos;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(&apos;goods/&apos;, goods_list ,name=&quot;goods-list&quot;),  # 这里就不需要as_view()了</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这样尽管很简单，但是drf还是给我们提供了一个更简单的Routers：<a href="https://www.django-rest-framework.org/tutorial/6-viewsets-and-routers/#using-routers" target="_blank" rel="noopener">Using Routers</a></p><p>我们可以使用这个进行默认的绑定，这个其实和generic中的差不多，怎么用呢？直接在urls.py文件里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListViewSet</span><br><span class="line"></span><br><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line"># 配置goods的url</span><br><span class="line">router.register(r&apos;goods&apos;, GoodsListViewSet)  # 这里前面加r可以进行转义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">   # 对于goods的router path路径</span><br><span class="line">   re_path(&apos;^&apos;, include(router.urls)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>是不是很简单。<code>ViewSetMixin</code>除了不需要进行方法绑定，还有其他的好处：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efc04ca2f8909702.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>比如依赖于具体的request请求方法，来给视图绑定动作。这个操作在后面的开发中进行动态的serializer时具有非常大的好处，非常方便。</p><p>最后奉上一张图片，让你对此有更直观的认识：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5d185b88b06f7ffa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>大家可以点击这里，了解更多关于drf的知识：<a href="https://github.com/leilux/Django-REST-Framework-Tutorial_zh-CN" target="_blank" rel="noopener">drf翻译的教程</a></p><p>至此，我们本篇关于商品列表页面的配置中篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（七）：商品列表页的配置（上）</title>
      <link href="/2018/04/22/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2018/04/22/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8%E9%A1%B5%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始进行商品列表页面的配置，里面包含的知识比较多，所以分成3篇文章进行介绍。</p><h2 id="基于类来配置商品列表页"><a href="#基于类来配置商品列表页" class="headerlink" title="基于类来配置商品列表页"></a>基于类来配置商品列表页</h2><p>在教育网站那个项目里面，我们介绍了基于视图（FBV）和基于类（CBV）来实现用户登录的功能：<a href="https://www.cnblogs.com/yuhy/p/8414340.html" target="_blank" rel="noopener">Django~FBV和CBV</a></p><p><strong>基于视图（FBV）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 基于视图函数的实现用户的登录</span><br><span class="line"># 当我们配置的url被这个view处理时，将会自动传入request对象.</span><br><span class="line">def user_login(request):</span><br><span class="line">   # 前端向后端发送的请求方式有两种: get和post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单时为post</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">       # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">        user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">     pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">       # 取值成功返回user对象,失败返回null</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。</span><br><span class="line">            login(request, user)</span><br><span class="line">            # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">            return render(request, &apos;index.html&apos;)</span><br><span class="line">        else:</span><br><span class="line">            # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">    # 获取登录页面时为get</span><br><span class="line">    elif request.method == &quot;GET&quot;:</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">       # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>基于类（CBV）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#  基于类实现用户的登录，它需要继承view</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    # 不需要判断，直接调用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息</span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line">        # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息</span><br><span class="line">        if login_form.is_valid():</span><br><span class="line">            # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">            pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">            # 取值成功返回user对象,失败返回null</span><br><span class="line">            user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">            if user is not None:</span><br><span class="line">                if user.is_active:</span><br><span class="line">                    # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                    login(request, user)</span><br><span class="line">                    # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                    return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br><span class="line">                else:</span><br><span class="line">                    return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;)</span><br><span class="line">            else:</span><br><span class="line">                # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回</span><br><span class="line">                return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">        # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;)</span><br></pre></td></tr></table></figure></p><p>为了实现我们的面向对象思想，我们更加喜欢后者来进行开发。</p><p>1、首先我们先进行url的配置，在vueshop\urls.py文件里面，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from goods.view_base import GoodsListView</span><br><span class="line"></span><br><span class="line"># 商品列表页</span><br><span class="line">   path(&apos;goods/&apos;, GoodsListView.as_view(), name=&quot;goods-list&quot;),</span><br></pre></td></tr></table></figure></p><p>先暂且这样，因为我们还没有配置视图函数，所以会出现红色的错误提示，先不用管。<br>2、我们在apps\goods中新建一个view_base.py文件，来实现一个仅仅只通过Django实现的json返回，这让我们更加了解Django的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: view_base.py</span><br><span class="line"># @time: 2018/10/3 14:46</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line">        for good in goods:</span><br><span class="line">            json_dict = &#123;&#125;</span><br><span class="line">            json_dict[&quot;name&quot;] = good.name</span><br><span class="line">            json_dict[&quot;category&quot;] = good.category.name</span><br><span class="line">            json_dict[&quot;market_price&quot;] = good.market_price</span><br><span class="line">            json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.http import HttpResponse</span><br><span class="line">        return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure><p>然后我们运行一下项目，在浏览器地址栏中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/goods/</span><br></pre></td></tr></table></figure></p><p>会发现全是一堆乱码，所以我们利用Chrome的童鞋可以在应用商店里下载<strong>json viewer</strong>：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4eb3d6af1a9b34b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击安装，最后刷新一下我们的项目，发现页面就好看多了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2664a5dd01b4da3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样就把我们当前的信息都给展示出来了，但是你肯定想这么简单的操作，我们还用什么restful framework呢？其实这是因为当我们的项目很多时，我们不可能还按照这种方式一一用属性的方法来取出来，这劳动量太大了。还有就是有些属性是通过这种方式是无法取出来的，你可以试试<code>json_dict[&quot;add_time&quot;] = good.add_time</code>这个你运行肯定会出错，因为这个不是一个jsonserializer对象。</p><p>现在我们来利用Django自带的<code>model_to_dict</code>来给刚才的代码进行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: view_base.py</span><br><span class="line"># @time: 2018/10/3 14:46</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line">        # for good in goods:</span><br><span class="line">        #     json_dict = &#123;&#125;</span><br><span class="line">        #     json_dict[&quot;name&quot;] = good.name</span><br><span class="line">        #     json_dict[&quot;category&quot;] = good.category.name</span><br><span class="line">        #     json_dict[&quot;market_price&quot;] = good.market_price</span><br><span class="line">        #     json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.forms.models import model_to_dict</span><br><span class="line">        for good in goods:</span><br><span class="line">            json_dict = model_to_dict(good)</span><br><span class="line">            json_list.append(json_dict)</span><br><span class="line"></span><br><span class="line">        from django.http import HttpResponse</span><br><span class="line">        return HttpResponse(json.dumps(json_list), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>运行一下我们的项目，发现大部分都能序列化，但还是有些字段不可以：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-fd9ca9edca887056.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这时候Django自带的一个专门用于序列化的字段<code>serializers</code>派上用场了，我们修改代码如下（有了这个连model_to_dict都不需要了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        通过Django的view实现商品的列表页</span><br><span class="line">        :param request:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        json_list = []</span><br><span class="line">        goods = Goods.objects.all()[0:10]</span><br><span class="line"></span><br><span class="line">        from django.core import serializers</span><br><span class="line">        json_data = serializers(&quot;json&quot;, goods)</span><br><span class="line">        json_data = json.loads(json_data)</span><br><span class="line">        from django.http import HttpResponse, JsonResponse</span><br><span class="line">        return HttpResponse((json_data), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>如果运行后出现这种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Requested setting UEDITOR_SETTINGS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() be</span><br></pre></td></tr></table></figure></p><p>请参考这篇文章：<a href="https://blog.csdn.net/u011013781/article/details/52155761" target="_blank" rel="noopener">PyCharm开发django配置过程遇到问题（转）</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5447159288c0db40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f02af4190660f417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行项目，又出现这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise AppRegistryNotReady(&quot;Apps aren&apos;t loaded yet.&quot;)</span><br><span class="line">django.core.exceptions.AppRegistryNotReady: Apps aren&apos;t loaded yet.</span><br></pre></td></tr></table></figure></p><p>这个很简单，是运行vueshop这个项目，不是view_base.py文件！！！运行vueshop这个项目，发现又出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> json_data = serializers(&quot;json&quot;, goods)</span><br><span class="line">TypeError: &apos;module&apos; object is not callable</span><br></pre></td></tr></table></figure></p><p>说明这是一个moudle我们不能直接调用它，而应该在调用的时候写清楚具体调用哪一个方法！修改<code>json_data = serializers(&quot;json&quot;, goods)</code>为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> from django.core.serializers import serialize</span><br><span class="line">        json_data = serialize(&quot;json&quot;, goods)</span><br><span class="line">或者</span><br><span class="line"> from django.core import serializers</span><br><span class="line">        json_data = serializers.serialize(&quot;json&quot;, goods)</span><br></pre></td></tr></table></figure></p><p>然后运行一下vueshop项目，发现是一些没有规则的文字：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0dd47ef169154fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们没有把这些dict类型的数据转成str字符串，所以修改返回代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return HttpResponse((json.dumps(json_data)), content_type=&quot;application/json&quot;)</span><br></pre></td></tr></table></figure></p><p>当然你可以以直接使用JsonResponse，把鼠标移到JsonResponse按住Ctrl，单击左键，就可以看到源码了，看到没有这其实是对上面做了一次更深的封装：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-28a583d3fd8ef128.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以我们也可以这样修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return JsonResponse(json_data, safe=False)</span><br></pre></td></tr></table></figure></p><p>记住这里的safe=False一定要添加，否则会出错：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bdce0f10363fa753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意json.dumps()和json.loads()是相反的操作，前者用于将dict类型的数据转成str字符串，后者用于将str类型的数据转成dict类型。</strong>不清楚的童鞋可以阅读这篇文章：<a href="https://blog.csdn.net/mr_evanchen/article/details/77879967" target="_blank" rel="noopener">【Python】Json模块dumps、loads、dump、load函数介绍</a>。了解更多Django序列化的知识可以阅读这篇文章： <a href="https://www.cnblogs.com/zknublx/p/6061822.html" target="_blank" rel="noopener">Serialize—-序列化django对象</a>或者这篇<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143192607210600a668b5112e4a979dd20e4661cc9c97000" target="_blank" rel="noopener">序列化介绍</a>。</p><p>看到这里你还是有疑问，前面说不能序列化所以用drf(Django Restful Framework的简称，以后都是这么说明)。可是现在Django通过其提供的序列化函数已经很好的解决了这个问题，那我们为什么还要用drf呢？</p><p>1、前面说过images这个字段保存的是图片的一个相对路径，我们需要在前面加上’media’。（如果通过PC端就可以不用，因为我们前面配置了media_root，但是通过app,pad就需要用户自己添加，这是不可能的，所以需要用到drf，它可以帮我们添加这个media前缀）</p><p>2、我们这里字段序列化方式被固定了，一旦需要重组就非常的麻烦，drf就不一样了。</p><p>3、drf可以生成文档，还可以进行输入检测等。</p><h2 id="采用drf完成商品列表页面的配置"><a href="#采用drf完成商品列表页面的配置" class="headerlink" title="采用drf完成商品列表页面的配置"></a>采用drf完成商品列表页面的配置</h2><p>首先通过浏览drf的官方网站，我们需要安装一些依赖包：</p><ul><li><a href="https://pypi.org/project/coreapi/" target="_blank" rel="noopener">coreapi</a> (1.32.0+) - Schema generation support.</li><li><a href="https://pypi.org/project/Markdown/" target="_blank" rel="noopener">Markdown</a> (2.1.0+) - Markdown support for the browsable API.</li><li><a href="https://pypi.org/project/django-filter/" target="_blank" rel="noopener">django-filter</a> (1.0.1+) - Filtering support.</li><li><a href="https://github.com/maraujop/django-crispy-forms" target="_blank" rel="noopener">django-crispy-forms</a> - Improved HTML display for filtering.</li><li><a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="noopener">django-guardian</a> (1.1.1+) - Object level permissions support.<br>我们发现其他都有，现在只需要安装<code>coreapi</code>(文档会用到)和<code>django-guardian</code>。使用下面的命令进行安装:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xx -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></li></ul><p>如果你在安装coreapi的过程中出现了utf-8的decode编码错误，那么你就要修改你的虚拟环境的编码格式了（一般来说使用pip18的版本都不会有这个错误，其他版本可能会有），具体操作如下：打开你虚拟环境下面的–init–.py文件（我的路径为F:\Envs\vueshop\Lib\site-packages\pip\compat）大约75行的位置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-64d9ecadd2ee2cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>将里面的utf_8修改为gbk。然后再进行安装，不过需要先卸载之前安过的版本资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall coreapi MarkupSafe</span><br></pre></td></tr></table></figure></p><p>然后在运行我们的安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install coreapi -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>接下来引入我们的api文档，打开vueshop\urls.py文件，我们新增两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.documentation import include_docs_urls</span><br><span class="line"></span><br><span class="line"> # 自动化的文档,低版本的Django记得把docs/$后面的$去掉（我这采用的是Django2.0.1）</span><br><span class="line">   path(&apos;docs/&apos;, include_docs_urls(title=&apos;慕海生鲜网文档&apos;))</span><br></pre></td></tr></table></figure></p><p>然后运行我们的项目，看看是不是没有错误发生。现在我们需要按照<a href="http://www.django-rest-framework.org/#" target="_blank" rel="noopener">官方文档</a>的说明去settings.py文件里面注册我们的<code>rest_framework</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    &apos;rest_framework&apos;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>还有路由的配置：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2dd75a6c994ab9e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>只不过这是Django1.x系列的路由配置，在Django2.x里面我们这样配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Django rest_framework的路由配置</span><br><span class="line">  path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;))</span><br></pre></td></tr></table></figure></p><p>然后我们按照官方快速使用的例子来创建一个api: <a href="https://www.django-rest-framework.org/tutorial/3-class-based-views/#rewriting-our-api-using-class-based-views" target="_blank" rel="noopener">Rewriting our API using class-based views</a></p><p>我们直接复制上面的代码进入我们goods\views.py文件里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List all snippets, or create a new snippet.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, format=None):</span><br><span class="line">        goods = Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer = GoodsSerializer(goods, many=True)  # 因为返回的是列表，所以我们需要指定many为True</span><br><span class="line">        return Response(goods_serializer.data)</span><br></pre></td></tr></table></figure></p><p>说明一下，<code>from .models import Goods</code>表示当前的目录下的models文件，这样取不容易出现因为重名而导致的失败。<code>SnippetSerializer</code>是可以自定义序列化的类。在前面的教育网站里面我们说过了modelform 和form，特别是modelform，它可以将字段直接转成html代码。同样的在drf里面，serializer是用来取代form开发的，也就是说我们不使用form来进行后面的开发了(实际上是没有用于让用户表单提交的功能)，直接用serializer。而且它的功能都不一样了，serializer是用来对json进行序列化的。具体参考这个系列的文章：<a href="https://www.imooc.com/article/20443?block_id=tuijian_wz" target="_blank" rel="noopener">Django rest framework之Serializers笔记（一）</a></p><p>类似于之前对form的操作，我们先来在goods app下面新建一个文件<code>serializers.py</code>:<br>然后按照官方快速使用的例子来创建一个Serializer class：<a href="https://www.django-rest-framework.org/tutorial/1-serialization/#creating-a-serializer-class" target="_blank" rel="noopener">Creating a Serializer class</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: serializers.py.py</span><br><span class="line"># @time: 2018/10/3 20:09</span><br><span class="line"># 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField(required=True, max_length=100)</span><br><span class="line">    click_num = serializers.IntegerField(default=0)</span><br></pre></td></tr></table></figure></p><p>然后修改urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from goods.views import GoodsListView</span><br></pre></td></tr></table></figure></p><p>注意将之前的<code>from goods.view_base import GoodsListView</code>给删除掉，否则就有两个地址了。</p><p>现在运行我们的项目，发现出了问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f1d3f645091de553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个问题有两种解决方法，一种是注销后台xadmin，另一种则是修改UserProfile的返回值，将<code>name</code>修改为<code>username</code>，因为你在定义的时候是允许该字段为空的，所以会返回<code>non-string</code>，修改为<code>username</code>就不会了，因为该字段来自AbstractUser类，该类<code>username</code>是不允许为空的：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ba7e0e27d3d4d6d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-be3b3883b5f5f337.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后重新运行我们的项目，出现正常画面了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2061d3ec9e5ab80c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>用浏览器请求drf默认会帮你渲染成网页的格式，这是已经api接口样式了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-990cbd763deaa927.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可以点击右上角的GET，选择json就是之前看到的那种：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-35a4d7569490034d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>选择api就是下面这种，这也是默认的样式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2061d3ec9e5ab80c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击旁边的option就会出现接口的描述：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-37ad1cb0e6c8c6c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f7044ea7916a6710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个接口的描述我们可以自己定义，上面就是那个<code>description</code>。它不仅能解析get信息，你通过post提交的数据也能进行解析。render和parse对于我们爬虫人员而言非常熟悉，分别代表渲染和解析。值得注意的是，因为我们这里是序列化Goods，因此我们serializers的字段要和goods app models.py里面的字段保持一致，这个和Django form里面对于form和model的要求也是一样的。</p><p>我们尝试添加一个不一样的字段<code>goods_front_image</code>，看看返回什么：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-69e331ae203d4140.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你知道的我们在数据库里面并没有添加media这个前缀，但是drf却给我们自动添加了，这是为什么呢？那是因为我们在setting.py里面配置了<code>MEDIA_URL</code>，所以drf根据这个就会自动添前缀。</p><p>我们可以对drf进行登入，登出操作，那是因为我们在urls.py里面配置了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Django rest_framework的路由配置</span><br><span class="line">  path(&apos;api-auth/&apos;, include(&apos;rest_framework.urls&apos;))</span><br></pre></td></tr></table></figure></p><p>既然这个<code>serializers</code>类似于<code>form</code>，那么我们是否可以进行类似的保存到数据库的操作呢？答案是可以的。所以我们开始按照官方文档来进行配置：打开goods\views.py文件，修改为以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from .serializers import GoodsSerializer</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from .models import Goods</span><br><span class="line">from rest_framework import status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsListView(APIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List all snippets, or create a new snippet.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, format=None):</span><br><span class="line">        goods = Goods.objects.all()[:10]</span><br><span class="line">        goods_serializer = GoodsSerializer(goods, many=True)  # 因为返回的是列表，所以我们需要指定many为True</span><br><span class="line">        return Response(goods_serializer.data)</span><br><span class="line"></span><br><span class="line">    def post(self, request, format=None):   # 这里的request不再是Django的request，而是对其进行了更深的封装</span><br><span class="line">        serializer = GoodsSerializer(data=request.data)</span><br><span class="line">        if serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            return Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure></p><p>是不是觉得上面的代码很眼熟？是的这个serializer 和form实在是太像了，连验证都差不多一样。有了drf之后，不需要对用户的请求方法method进行判断，我们直接使用<code>data=request.data</code>就可以取出数据，然后放到data里面，是不是很方便呢。然后调用serializer的save方法对数据进行保存。</p><p>接下来就是完善我们的goods\serializers.py文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># /user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @author: Envse</span><br><span class="line"># @file: serializers.py.py</span><br><span class="line"># @time: 2018/10/3 20:09</span><br><span class="line"># 这个serializers的作用是序列化json对象，与Django的form差不多，只不过用途不同</span><br><span class="line"></span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.Serializer):</span><br><span class="line">    name = serializers.CharField(required=True, max_length=100)</span><br><span class="line">    click_num = serializers.IntegerField(default=0)</span><br><span class="line">    goods_front_image = serializers.ImageField()</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        Create and return a new `Snippet` instance, given the validated data.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return Goods.objects.create(**validated_data)</span><br></pre></td></tr></table></figure></p><p>这里调用serializer的create方法，用于把需要验证的字段创建一个验证对象。</p><p>说到这里你可能会问，Django的form为了避免我们重复的书写验证字段所以提供了一个Modelform。那么这里的serializer也是需要验证的，那么它是否也提供了一个类似于Modelform的Modelserializer呢？答案是有的！<a href="https://www.django-rest-framework.org/tutorial/1-serialization/#using-modelserializers" target="_blank" rel="noopener">Using ModelSerializers</a>这里就有介绍。</p><p>我们修改serilalizers.py文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure><p>注意一下，此处的外键（category）会被序列化为id，如果我们想要获取这个外键的全部信息并在此处进行显示呢，那该怎么办？我们可以通过嵌套的方式来实现这个功能，重新修改serilalizers.py文件为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from goods.models import Goods, GoodsCategory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = GoodsCategory</span><br><span class="line">        fields = &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsSerializer(serializers.ModelSerializer):</span><br><span class="line">    category = CategorySerializer()</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        model = Goods</span><br><span class="line">        # fields = (&apos;category&apos;, &apos;goods_sn&apos;, &apos;name&apos;, &apos;click_num&apos;, &apos;sold_num&apos;, &apos;market_price&apos;) # 取出部分字段</span><br><span class="line">        fields = &quot;__all__&quot;  # 取出所有的字段</span><br></pre></td></tr></table></figure></p><p>然后刷新一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ee5de22ef370ea86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你看，所有的信息都被显示出来了。</p><p>至此，我们本篇关于商品列表页面的配置上篇的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（六）：restful api以及Vue的结构介绍</title>
      <link href="/2018/04/20/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Arestful-api%E4%BB%A5%E5%8F%8AVue%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/20/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9Arestful-api%E4%BB%A5%E5%8F%8AVue%E7%9A%84%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始介绍restful api以及Vue的结构。</p><h2 id="为什么要前后端分离"><a href="#为什么要前后端分离" class="headerlink" title="为什么要前后端分离"></a>为什么要前后端分离</h2><p><strong>1、pc,app,pad多端适应</strong><br>随着技术的发展，我们所开发的网站不仅仅是适配于PC端了，更需要进行多个服务端的匹配，目前来说后端模板渲染的方式非常适合pc端，但是对于app，pad端却是不友好的。</p><p><strong>2、SPA开发模式开始流行</strong><br>所谓的SPA开发模式，其实就是单页面应用。单页Web应用（single page web application，SPA），就是只有一张Web页面的应用，是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。现在最流行的方式就是前后端分离，由前端提供页面，后端提供接口。</p><p><strong>3、前后端开发的职责分不清</strong><br>正如我们在前面说过，其实Django的模板到底由谁来写？谁来拆分这都是值得大家头疼的事。我上次我下载了几百套的织梦cms模板，想用Django来搭建网站，发现里面嵌入了太多的php，java ，Ajax。。。代码，ajax，java代码还能理解一点，但是php我就不会了，所以这个问题就显得特别重要。</p><p><strong>4、开发效率问题，前后端互相等待</strong><br>前后端分离的坏处就是对方及时看不到项目的进展，很容易出现你等我，我等他的尴尬刚 局面。</p><p><strong>5、前端一直配合着后端，能力受限</strong><br>就拿Django来说吧，后端觉得某个字段起的名字有问题，想要修改就必须及时通知前端人员，这样前端一直配合着后端，要求高水平的能力。</p><p><strong>6、后台开发语言和模板高度耦合，导致开发语言依赖严重</strong><br>其实很多开发语言都有属于自己的Web框架，Python就有Django，Flask，Tornado，而在java Web里面就有Spring，Struts，Hibernate。这些开发语言和模板高度耦合，使得你如果不会Python语法就不会使用Django，不会Java就不会Spring。</p><p>但是前后端尽管很流弊，但也有缺点。</p><h2 id="前后端分离缺点"><a href="#前后端分离缺点" class="headerlink" title="前后端分离缺点"></a>前后端分离缺点</h2><ul><li>前后端学习的门槛增加，后端使用if else来显示数据的语法其实完全可以交给前端</li><li>数据依赖导致文档重要性增加，如果没有文档，那么前端人员不知道后端的业务逻辑</li><li>前端工作量加大（大部分数据显示的工作都由他来负责）</li><li>seo的难度加大，爬虫请求不到数据（有些是ajax请求，爬虫只会爬到静态html代码）</li><li>后端开发模式迁移增加成本</li></ul><h2 id="restful-api的介绍"><a href="#restful-api的介绍" class="headerlink" title="restful api的介绍"></a>restful api的介绍</h2><p>restful api 目前是前后端分离的最佳实践(它只是一套标准，建议性质的，类似于PEP8的规范，你可以不遵循它，但是为了更好的开发与他人交流最好还是遵循它)</p><h2 id="restful-api的特点"><a href="#restful-api的特点" class="headerlink" title="restful api的特点"></a>restful api的特点</h2><p>1、轻量，直接通过http，不需要额外的协议，通过post/get/put/delete进行操作；’<br>2、面向资源，一目了然，具有自解释性。<br>看看这篇面向资源的架构文章：<a href="https://blog.csdn.net/u012068294/article/details/78519058" target="_blank" rel="noopener">面向资源的架构</a>。资源是名词，post/get/put/delete等是动词，那么如何关联呢？这就是restful了。推荐两篇文章：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a>，这篇写的比较久，注重于概念，但是比较容易理解。<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">RESTful API 设计指南</a>，这篇注重于实践，非常详细。</p><h2 id="Vue的介绍"><a href="#Vue的介绍" class="headerlink" title="Vue的介绍"></a>Vue的介绍</h2><h3 id="Vue基本概念"><a href="#Vue基本概念" class="headerlink" title="Vue基本概念"></a>Vue基本概念</h3><p>1、前端工程化： <a href="https://www.cnblogs.com/fsyz/p/8274727.html" target="_blank" rel="noopener">浅谈什么是前端工程化</a><br>2、数据双向绑定：<a href="https://blog.csdn.net/zhang5207892/article/details/78389121" target="_blank" rel="noopener">怎么理解vue的数据双向绑定</a><br>3、组件化开发：<a href="https://blog.csdn.net/lican_2017/article/details/79365573" target="_blank" rel="noopener">什么叫组件化开发</a></p><p>MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。当然这些事 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。说白了就是:数据驱动view，view又改变数据。</p><p>数据双向绑定，你可以点击<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC" target="_blank" rel="noopener">表单输入绑定</a>，体会一下它的用途，都不需要你另写js代码来进行实现。</p><h3 id="Vue开发中的几个概念"><a href="#Vue开发中的几个概念" class="headerlink" title="Vue开发中的几个概念"></a>Vue开发中的几个概念</h3><p><strong>1、webpack</strong><br>它只是一个js工具，用于es6到es5代码转换，记住是vue不能被浏览器识别的，浏览器只能识别老三样：HTML，CSS，JAVASCRIPT。所以webpack就是把我们的代码转换成这种浏览器可以识别的代码。你可以打开我们的项目，F12查看源码，发现里面的东西很少，那是因为我们的代码都在这个js文件里面了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-853feabd911b0fae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、Vue全家桶（vue，vuex，vue_router，axios）</strong><br>vue（框架），vuex（组件通讯），vue_router（单页面的路由），axios（Vue里面类似于ajax。因为是前端框架肯定需要发送ajax请求，但是我们不推荐直接来操作dom而是通过jQuery来进行操作。不过如果我们只需要一个函数，但也需要把整个JQuery包导入，而我们又只用ajax.。鉴于此，官方推荐我们使用axios，这个就不需要了，用到就导入那个）</p><p><strong>3、ES6, babel</strong><br>Es6语法是将来的趋势，但是目前浏览器还都只是ES5，所以需要用babel将Es6转换为Es5。</p><h2 id="vue项目的目录结构"><a href="#vue项目的目录结构" class="headerlink" title="vue项目的目录结构"></a>vue项目的目录结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5fbdf75e77ee8663.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Mock数据（Mock.js生成随机数据,拦截Ajax 请求 ，前后端分离，让前端攻城师独立于后端进行开发：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">mock.js官网</a>）;node_modules这个就是我们利用node.js启动必备的文件；src则是一些资源包。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-514b00e332b667c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>api：我们请求网络的api，所有组件的api都是在这里进行配置的；<br>axios：我们在里面配置了全局拦截；<br>components：这个是一些基础组件；<br>router ：路由；<br>static：全局的静态文件；<br>store：一些Js文件；<br>style：一些css样式表单；<br>views：所有的组件；</p><p>接下来我们就看一下所有的组件：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-771f78d9369f1260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>差不多就是这些：导航栏组件；轮播图组件；新品组件；分页组件；个人中心组件；结算组。。。如果想在浏览器里面快速知道页面是由哪些vue的组件构成的，可以下载安装官方的插件:<strong>vuejs devtools</strong>，具体安装方法在这里：<a href="https://www.cnblogs.com/alice-fee/p/8038367.html" target="_blank" rel="noopener">谷歌浏览器chrome的vuejs devtools 插件的安装</a>。</p><p>至此，我们本篇关于restful api以及Vue结构的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（五）：xadmin后台管理配置及资源导入</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Axadmin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9Axadmin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇我们将开始介绍xadmin的后台管理系统以及项目资源的导入。</p><h2 id="新建adminx-py文件"><a href="#新建adminx-py文件" class="headerlink" title="新建adminx.py文件"></a>新建adminx.py文件</h2><p>在各个app下面新建adminx.py文件，我们开始进行配置。</p><h3 id="在goods下面的adminx-py代码内容"><a href="#在goods下面的adminx-py代码内容" class="headerlink" title="在goods下面的adminx.py代码内容"></a>在goods下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import Goods, GoodsCategory, GoodsImage, GoodsCategoryBrand, Banner, HotSearchWords</span><br><span class="line">from .models import IndexAd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsAdmin(object):</span><br><span class="line">    list_display = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                    &quot;shop_price&quot;, &quot;goods_brief&quot;, &quot;goods_desc&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;]</span><br><span class="line">    search_fields = [&apos;name&apos;, ]</span><br><span class="line">    list_editable = [&quot;is_hot&quot;, ]</span><br><span class="line">    list_filter = [&quot;name&quot;, &quot;click_num&quot;, &quot;sold_num&quot;, &quot;fav_num&quot;, &quot;goods_num&quot;, &quot;market_price&quot;,</span><br><span class="line">                   &quot;shop_price&quot;, &quot;is_new&quot;, &quot;is_hot&quot;, &quot;add_time&quot;, &quot;category__name&quot;]</span><br><span class="line">    style_fields = &#123;&quot;goods_desc&quot;: &quot;ueditor&quot;&#125;</span><br><span class="line"></span><br><span class="line">    class GoodsImagesInline(object):</span><br><span class="line">        model = GoodsImage</span><br><span class="line">        exclude = [&quot;add_time&quot;]</span><br><span class="line">        extra = 1</span><br><span class="line">        style = &apos;tab&apos;</span><br><span class="line"></span><br><span class="line">    inlines = [GoodsImagesInline]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsCategoryAdmin(object):</span><br><span class="line">    list_display = [&quot;name&quot;, &quot;category_type&quot;, &quot;parent_category&quot;, &quot;add_time&quot;]</span><br><span class="line">    list_filter = [&quot;category_type&quot;, &quot;parent_category&quot;, &quot;name&quot;]</span><br><span class="line">    search_fields = [&apos;name&apos;, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GoodsBrandAdmin(object):</span><br><span class="line">    list_display = [&quot;category&quot;, &quot;image&quot;, &quot;name&quot;, &quot;desc&quot;]</span><br><span class="line"></span><br><span class="line">    def get_context(self):</span><br><span class="line">        context = super(GoodsBrandAdmin, self).get_context()</span><br><span class="line">        if &apos;form&apos; in context:</span><br><span class="line">            context[&apos;form&apos;].fields[&apos;category&apos;].queryset = GoodsCategory.objects.filter(category_type=1)</span><br><span class="line">        return context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BannerGoodsAdmin(object):</span><br><span class="line">    list_display = [&quot;goods&quot;, &quot;image&quot;, &quot;index&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HotSearchAdmin(object):</span><br><span class="line">    list_display = [&quot;keywords&quot;, &quot;index&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class IndexAdAdmin(object):</span><br><span class="line">    list_display = [&quot;category&quot;, &quot;goods&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(Goods, GoodsAdmin)</span><br><span class="line">xadmin.site.register(GoodsCategory, GoodsCategoryAdmin)</span><br><span class="line">xadmin.site.register(Banner, BannerGoodsAdmin)</span><br><span class="line">xadmin.site.register(GoodsCategoryBrand, GoodsBrandAdmin)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(HotSearchWords, HotSearchAdmin)</span><br><span class="line">xadmin.site.register(IndexAd, IndexAdAdmin)</span><br></pre></td></tr></table></figure><h3 id="在trade下面的adminx-py代码内容"><a href="#在trade下面的adminx-py代码内容" class="headerlink" title="在trade下面的adminx.py代码内容"></a>在trade下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import ShoppingCart, OrderInfo, OrderGoods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShoppingCartAdmin(object):</span><br><span class="line">    list_display = [&quot;user&quot;, &quot;goods&quot;, &quot;nums&quot;, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class OrderInfoAdmin(object):</span><br><span class="line">    list_display = [&quot;user&quot;, &quot;order_sn&quot;,  &quot;trade_no&quot;, &quot;pay_status&quot;, &quot;post_script&quot;, &quot;order_mount&quot;,</span><br><span class="line">                    &quot;order_mount&quot;, &quot;pay_time&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line">    class OrderGoodsInline(object):</span><br><span class="line">        model = OrderGoods</span><br><span class="line">        exclude = [&apos;add_time&apos;, ]</span><br><span class="line">        extra = 1</span><br><span class="line">        style = &apos;tab&apos;</span><br><span class="line"></span><br><span class="line">    inlines = [OrderGoodsInline, ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(ShoppingCart, ShoppingCartAdmin)</span><br><span class="line">xadmin.site.register(OrderInfo, OrderInfoAdmin)</span><br></pre></td></tr></table></figure><h3 id="在users下面的adminx-py代码内容"><a href="#在users下面的adminx-py代码内容" class="headerlink" title="在users下面的adminx.py代码内容"></a>在users下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from xadmin import views</span><br><span class="line">from .models import VerifyCode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BaseSetting(object):</span><br><span class="line">    enable_themes = True</span><br><span class="line">    use_bootswatch = True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &quot;慕海生鲜后台&quot;</span><br><span class="line">    site_footer = &quot;vueshop&quot;</span><br><span class="line">    # menu_style = &quot;accordion&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VerifyCodeAdmin(object):</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;mobile&apos;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(VerifyCode, VerifyCodeAdmin)</span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure><h3 id="在user-operation下面的adminx-py代码内容"><a href="#在user-operation下面的adminx-py代码内容" class="headerlink" title="在user_operation下面的adminx.py代码内容"></a>在user_operation下面的adminx.py代码内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from .models import UserFav, UserLeavingMessage, UserAddress</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;goods&apos;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserLeavingMessageAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;message_type&apos;, &quot;message&quot;, &quot;add_time&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAddressAdmin(object):</span><br><span class="line">    list_display = [&quot;signer_name&quot;, &quot;signer_mobile&quot;, &quot;district&quot;, &quot;address&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserFav, UserFavAdmin)</span><br><span class="line">xadmin.site.register(UserAddress, UserAddressAdmin)</span><br><span class="line">xadmin.site.register(UserLeavingMessage, UserLeavingMessageAdmin)</span><br></pre></td></tr></table></figure><p>然后安装依赖库<code>xlwt</code>和<code>xlsxwriter</code>这两个库（用于后面数据的excel导出）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xlwt xlsxwriter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后运行我们的makemigrations和migrate，生成我们xadmin的一些数据表。</p><p>接下来创建超级管理员：<code>createsuperuser</code>然后输入用户名，邮箱，密码回车即可。</p><p>然后运行我们的项目，在浏览器地址栏中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/xadmin</span><br></pre></td></tr></table></figure></p><p>用刚才的账号和密码进行登录，登录成功就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-064a36d313f60a6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后你可以对其进行汉化和自定义配置，可以参考这些文章：<br><a href="https://www.jianshu.com/p/f92c7d5897aa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</a>和<a href="https://www.jianshu.com/p/586aea424287" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置</a>以及<a href="https://www.jianshu.com/p/b0a9a82adb5f" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发</a>这三篇文章。</p><p>记得配置富文本的路径，打开vueshop\urls.py文件，我们新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import include</span><br><span class="line"></span><br><span class="line">path(&apos;ueditor/&apos;, include(&apos;DjangoUeditor.urls&apos;)),</span><br></pre></td></tr></table></figure></p><p>最后我的配置截图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efa679a18cb7995a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="资源的导入"><a href="#资源的导入" class="headerlink" title="资源的导入"></a>资源的导入</h2><p>在media下面新建三个文件夹：banner，goods，message，分别与下图中的path对应：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2529bb9c4e277fd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>只需新建banner文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-772aed2fe73c9b2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建brands文件夹，再在里面新建images文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2db954d0cac201a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建goods文件夹，再在里面新建images文件夹，</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9be84396fe2bbb58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>新建message文件夹，再在里面新建images文件夹。</p><p>有人要问建这么多文件夹干嘛，其实我们这是模拟了后台数据库的添加数据操作，如果你觉得太累了，可以不这么干，直接在后台添加数据，实际上比我们这还累。。。</p><p>接着在db_tools文件夹下面新建一个data的文件夹，在里面导入2个文件：<code>category_data.py</code>和<code>product_data.py</code>。然后直接在db_tools文件夹下面新建两个文件夹：<code>import_category_data.py</code>和<code>import_goods_data.py</code>。</p><p>接下来我们给<code>import_category_data.py</code>文件写入代码(独立使用django的model)，其作用就是把数据直接保存到数据库里面。然后给’import_goods_data.py’文件写入代码(独立使用django的model)其作用也是把数据直接保存到数据库里面。<strong>由于版权问题，这里就不贴出代码了</strong>。</p><p>运行完发现缺少图片上传地址：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eb9250ccfd28712a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所以我们需要在settings.py里面进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置上传文件，图片访问路径</span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</span><br></pre></td></tr></table></figure></p><p>还没完，我们需要进行url的配置，打开vueshop\urls.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.views.static import serve</span><br><span class="line">from django.urls import re_path</span><br><span class="line">from vueshop.settings import MEDIA_ROOT</span><br><span class="line"></span><br><span class="line"># 配置文件上传的访问处理url</span><br><span class="line">   re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><p>然后运行一下我们的项目，发现图片已经成功显示了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-dbf10b0216770394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此我们本篇关于xadmin的后台管理系统以及项目资源导入的相关介绍就到此为止了，感谢你的赏阅！下一篇我们开始介绍restful api 相关的知识。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（四）：数据库字段的定义(下)</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于user应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。<strong>因为我们这个项目是前后端分离的，所以一些数据库字段的名称请不要随意修改，否则就会出现运行错误！</strong></p><h2 id="goods-app的配置"><a href="#goods-app的配置" class="headerlink" title="goods app的配置"></a>goods app的配置</h2><p>前面说过全部商品分类里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-98927403f686963c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>记得在教育网站中，我们的从属关系是通过外键来完成的。如果按照那样的思维，我们这里因为有三个相关的表，是否意味我们必须要建三个model，然后每个model之间利用从属的外键关系串起来，而且我们这样我们的目录就是写死的，只能是三级目录，但是我们如果要去做一个四级，五级，甚至无限级别的分类即可扩展目录时，这工作量是不是太大了呢？而且几乎是不可能完成的任务，我们考虑有没有其他方法呢？答案是有的。我们可以使用一张数据表来完成这样的任务，就是根据级别进行前台显示。</p><p>打开我们的goods/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class GoodsCategory(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品级别分类</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    CATEGORY_TYPE = (</span><br><span class="line">        (1, &quot;一级类目&quot;),</span><br><span class="line">        (2, &quot;二级类目&quot;),</span><br><span class="line">        (3, &quot;三级类目&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别名&quot;, help_text=&quot;类别名&quot;)</span><br><span class="line">    code = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;类别code&quot;, help_text=&quot;类别code&quot;)</span><br><span class="line">    desc = models.TextField(default=&quot;&quot;, verbose_name=&quot;类别描述&quot;, help_text=&quot;类别描述&quot;)</span><br><span class="line">    category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name=&quot;类目级别&quot;, help_text=&quot;类目级别&quot;)     # 设置目录树的级别</span><br><span class="line">    parent_category = models.ForeignKey(&quot;self&quot;, null=True, blank=True, verbose_name=&quot;父类目级别&quot;, help_text=&quot;父目录&quot;,</span><br><span class="line">                                        related_name=&quot;sub_cat&quot;)</span><br><span class="line">    is_tab = models.BooleanField(default=False, verbose_name=&quot;是否导航&quot;, help_text=&quot;是否导航&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;商品类别&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p><strong>注意一下：</strong> help_text: 在后面生成接口测试文档时会用到，而related_name: 进行查询的时候会用到，这里那个self参数就是自己跟自己进行外键关联，因为目录有的时候就是这样。</p><p>不知道你注意没有，在上面一行的导航栏在左侧都会有一个比较醒目的图片，这里展示了它的部分品牌商标：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b44e6f558506c121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里我们需要重新定义一个数据表，用于存放这个，接着刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class GoodsCategoryBrand(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    导航栏左侧品牌图片</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, related_name=&apos;brands&apos;, null=True, blank=True, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    name = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;品牌名&quot;, help_text=&quot;品牌名&quot;)</span><br><span class="line">    desc = models.TextField(max_length=200, default=&quot;&quot;, verbose_name=&quot;品牌描述&quot;, help_text=&quot;品牌描述&quot;)</span><br><span class="line">    image = models.ImageField(max_length=200, upload_to=&quot;brands/images&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;品牌信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        db_table = &quot;goods_goodsbrand&quot;</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>然后就是商品信息了，不过在此之前，我们需要把在线教育网站用到的<strong>DjangoUeditor</strong>和<strong>xadmin</strong>拷贝进我们的extra_app里面，然后还要把这些都注册到我们的setting里面去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">    &apos;goods&apos;,</span><br><span class="line">    &apos;trade&apos;,</span><br><span class="line">    &apos;user_operation&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>现在开始书写商品的信息代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from extra_apps.DjangoUeditor.models import UEditorField</span><br><span class="line"></span><br><span class="line">class Goods(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    goods_sn = models.CharField(max_length=50, default=&quot;&quot;, verbose_name=&quot;商品唯一编号&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;商品名&quot;)</span><br><span class="line">    click_num = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;)</span><br><span class="line">    sold_num = models.IntegerField(default=0, verbose_name=&quot;商品销售量&quot;)</span><br><span class="line">    fav_num = models.IntegerField(default=0, verbose_name=&quot;收藏数&quot;)</span><br><span class="line">    goods_num = models.IntegerField(default=0, verbose_name=&quot;库存数&quot;)</span><br><span class="line">    market_price = models.FloatField(default=0, verbose_name=&quot;市场价格&quot;)</span><br><span class="line">    shop_price = models.FloatField(default=0, verbose_name=&quot;本店价格&quot;)</span><br><span class="line">    goods_brief = models.TextField(max_length=500, verbose_name=&quot;商品简短描述&quot;)</span><br><span class="line">    goods_desc = UEditorField(verbose_name=&quot;内容&quot;, imagePath=&quot;goods/images/&quot;, width=1000, height=300,</span><br><span class="line">                              filePath=&quot;goods/files/&quot;, default=&apos;&apos;)</span><br><span class="line">    ship_free = models.BooleanField(default=True, verbose_name=&quot;是否承担运费&quot;)</span><br><span class="line">    goods_front_image = models.ImageField(upload_to=&quot;goods/images/&quot;, null=True, blank=True, verbose_name=&quot;封面图&quot;)</span><br><span class="line">    is_new = models.BooleanField(default=False, verbose_name=&quot;是否新品&quot;)</span><br><span class="line">    is_hot = models.BooleanField(default=False, verbose_name=&quot;是否热销&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;商品信息&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>前面也说过商品详情那块有轮播图，这个我们可以直接在商品信息这个表里面添加一个字段，当然也可以另建一个专门的表，后面这种似乎管理起来更加的方便。所以我们继续书写代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class GoodsImage(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品详情页面轮播图</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, related_name=&quot;images&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&quot;&quot;, verbose_name=&quot;图片&quot;, null=True, blank=True)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;商品轮播图&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><p>在首页我们看见也有一些轮播图，而这些轮播图是大图，和在商品详情页看到的不一样，所以我们需要单独创建一张表，用于管理它。继续刚才的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Banner(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    商品首页轮播图（大图）</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&apos;banner&apos;, verbose_name=&quot;轮播图片&quot;)</span><br><span class="line">    index = models.IntegerField(default=0, verbose_name=&quot;轮播顺序&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;首页轮播图&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><p>不知道你注意没有，在搜索栏的下面有一行提示语（热搜榜），这个我们也要单独进行管理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class HotSearchWords(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    搜索框下面的热搜榜</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    keywords = models.CharField(default=&quot;&quot;, max_length=20, verbose_name=&quot;热搜词&quot;)</span><br><span class="line">    index = models.IntegerField(default=0, verbose_name=&quot;排序&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;热搜词&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.keywords</span><br></pre></td></tr></table></figure></p><p>还有首页一个商品类别广告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class IndexAd(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   首页商品类别广告</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    category = models.ForeignKey(GoodsCategory, on_delete=models.CASCADE, related_name=&apos;category&apos;, verbose_name=&quot;商品类目&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, on_delete=models.CASCADE, related_name=&apos;goods&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;首页商品类别广告&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.goods.name</span><br></pre></td></tr></table></figure></p><h2 id="trade-app的配置"><a href="#trade-app的配置" class="headerlink" title="trade app的配置"></a>trade app的配置</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8884c4ea499deec6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在进行配置之前要说明几点：<strong>1、在一个订单里面，同一条商品信息，不会出现多条记录，而是以数量来进行统计。（图上的信息就是错误的，我说了，如果是在不同的订单里面却是可以的）；2、一旦购物车点击结算就会清空购物车，会以订单详情来展示商品信息。</strong>你在淘宝或者其他电商平台进行购物的时候，其实这些你就无意中知道了，但是从来没有说出来，现在看到这里是不是觉得就是这样的呢。</p><p>现在我们开始进行购物车这个数据表的配置，打开trade/models.py文件，我们知道这个表肯定会与我们User表有关联（不要问我为什么，因为东西是不可能自己飞到购物车里面去的），我们在教育网站里面是采用这样来进行User信息的导入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from users.models import UserProfile</span><br><span class="line"></span><br><span class="line">User = UserProfile()</span><br></pre></td></tr></table></figure></p><p>这样做的前提是你已经知道这个UserProfile放那个位置了，假如别人不知道呢，那该怎么办，这时候我们就要查看源码了。还记得我们之前在settings.py里面在INSTALLED_APPS的下面新增的一行代码么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL = &apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><p>这才是我们这个UserProfile的注册位置，我们真正调用的目录在这里。那么如何调用呢？使用下面的命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line">User = get_user_model()</span><br></pre></td></tr></table></figure></p><p>我们把光标放在get_user_model，按住Ctrl然后点击鼠标左键，直接进入get_user_model的源代码函数，我们发现其实这个函数才是直接调用了这个<code>AUTH_USER_MODEL</code>.<br><img src="https://upload-images.jianshu.io/upload_images/8964398-930c2329b4c1c129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>开始写我们购物车的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">User = get_user_model()</span><br><span class="line">from goods.models import Goods</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ShoppingCart(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    购物车</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    nums = models.IntegerField(default=0, verbose_name=&quot;购买数量&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;购物车&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (&quot;user&quot;, &quot;goods&quot;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;%s(%d)&quot;.format(self.goods.name, self.nums)</span><br></pre></td></tr></table></figure></p><p>接下来是订单的创建，我们知道订单有不同的状态，像创建交易，成功，待支付等，所以需要有选择的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class OrderInfo(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    ORDER_STATUS = (</span><br><span class="line">        (&quot;TRADE_SUCCESS&quot;, &quot;成功&quot;),</span><br><span class="line">        (&quot;TRADE_CLOSED&quot;, &quot;超时关闭&quot;),</span><br><span class="line">        (&quot;WAIT_BUYER_PAY&quot;, &quot;交易创建&quot;),</span><br><span class="line">        (&quot;TRADE_FINISHED&quot;, &quot;交易结束&quot;),</span><br><span class="line">        (&quot;paying&quot;, &quot;待支付&quot;),</span><br><span class="line">    )</span><br><span class="line">    PAY_TYPE = (</span><br><span class="line">        (&quot;alipay&quot;, &quot;支付宝&quot;),</span><br><span class="line">        (&quot;wechat&quot;, &quot;微信&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    order_sn = models.CharField(max_length=30, null=True, blank=True, unique=True, verbose_name=&quot;订单号&quot;)   # 订单号唯一</span><br><span class="line">    nonce_str = models.CharField(max_length=50, null=True, blank=True, unique=True, verbose_name=&quot;随机加密串&quot;)   # 微信支付可能会用到</span><br><span class="line">    trade_no = models.CharField(max_length=100, unique=True, null=True, blank=True, verbose_name=&quot;交易号&quot;)   # 交易号也是唯一的，用于支付宝与本系统进行关联</span><br><span class="line">    pay_status = models.CharField(choices=ORDER_STATUS, default=&quot;paying&quot;, max_length=30, verbose_name=&quot;订单状态&quot;)</span><br><span class="line">    pay_type = models.CharField(choices=PAY_TYPE, default=&quot;alipay&quot;, max_length=10, verbose_name=&quot;支付类型&quot;)</span><br><span class="line">    post_script = models.CharField(max_length=200, verbose_name=&quot;订单留言&quot;)</span><br><span class="line">    order_mount = models.FloatField(default=0.0, verbose_name=&quot;订单金额&quot;)</span><br><span class="line">    pay_time = models.DateTimeField(null=True, blank=True, verbose_name=&quot;支付时间&quot;)</span><br><span class="line"></span><br><span class="line">    # 订单上面用户的基本信息</span><br><span class="line">    address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;收货地址&quot;)</span><br><span class="line">    signer_name = models.CharField(max_length=20, default=&quot;&quot;, verbose_name=&quot;签收人&quot;)</span><br><span class="line">    singer_mobile = models.CharField(max_length=11, verbose_name=&quot;联系电话&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;订单信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.order_sn)</span><br></pre></td></tr></table></figure></p><p>接下来就是为订单里面的商品单独创建一个数据表了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class OrderGoods(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    订单的商品详情</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    order = models.ForeignKey(OrderInfo, verbose_name=&quot;订单信息&quot;, related_name=&quot;goods&quot;)    # 一个订单里面可以有多个商品信息</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;)</span><br><span class="line">    goods_num = models.IntegerField(default=0, verbose_name=&quot;商品数量&quot;)</span><br><span class="line"></span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;订单内的商品&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.order.order_sn)</span><br></pre></td></tr></table></figure></p><h3 id="user-operation-app的配置"><a href="#user-operation-app的配置" class="headerlink" title="user_operation app的配置"></a>user_operation app的配置</h3><p>现在我们进行用户操作这个app的配置，具体包括：商品收藏，添加收货信息，用户留言等。打开user_operation\modles.py文件，我们新建以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"></span><br><span class="line">from goods.models import Goods</span><br><span class="line"># Create your models here.</span><br><span class="line">User = get_user_model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFav(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户收藏</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    goods = models.ForeignKey(Goods, verbose_name=&quot;商品&quot;, help_text=&quot;商品id&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户收藏&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        unique_together = (&quot;user&quot;, &quot;goods&quot;)</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.user.username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserLeavingMessage(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户留言</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    MESSAGE_CHOICES = (</span><br><span class="line">        (1, &quot;留言&quot;),</span><br><span class="line">        (2, &quot;投诉&quot;),</span><br><span class="line">        (3, &quot;询问&quot;),</span><br><span class="line">        (4, &quot;售后&quot;),</span><br><span class="line">        (5, &quot;求购&quot;)</span><br><span class="line">    )</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    message_type = models.IntegerField(default=1, choices=MESSAGE_CHOICES, verbose_name=&quot;留言类型&quot;,</span><br><span class="line">                                      help_text=&quot;留言类型: 1(留言),2(投诉),3(询问),4(售后),5(求购)&quot;)    # 这里不要新建一个为type的字段，这是Python内置的函数</span><br><span class="line">    subject = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;主题&quot;)</span><br><span class="line">    message = models.TextField(default=&quot;&quot;, verbose_name=&quot;留言内容&quot;, help_text=&quot;留言内容&quot;)</span><br><span class="line">    file = models.FileField(upload_to=&quot;message/images/&quot;, verbose_name=&quot;上传的文件&quot;, help_text=&quot;上传的文件&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户留言&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.subject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAddress(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户收货地址</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    user = models.ForeignKey(User, verbose_name=&quot;用户&quot;)</span><br><span class="line">    province = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;省份&quot;)</span><br><span class="line">    city = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;城市&quot;)</span><br><span class="line">    district = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;区域&quot;)</span><br><span class="line">    address = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;详细地址&quot;)</span><br><span class="line">    signer_name = models.CharField(max_length=100, default=&quot;&quot;, verbose_name=&quot;签收人&quot;)</span><br><span class="line">    signer_mobile = models.CharField(max_length=11, default=&quot;&quot;, verbose_name=&quot;电话&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;收货地址&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.address</span><br></pre></td></tr></table></figure></p><p>这样到目前为止，我们的models都设计完了，没有考虑到的我们将在后续的开发中进行添加。接下来我们说一下migrations原理及表的生成。</p><h2 id="migrations原理及表的生成"><a href="#migrations原理及表的生成" class="headerlink" title="migrations原理及表的生成"></a>migrations原理及表的生成</h2><p>在这之前，请确保我们把app都添加到了setting.py里面，注意名字不要写错了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-26eab3e72af7ceb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们运行run manage.py Task出现了下面的错误：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-16115a394adbb57b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那是因为我们的users app注册了两个，所以说不唯一：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-109189113e8ea0dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们按照Django自带的那种方式修改我们的app的引入方式：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-adbe360d082307b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>实际上每个项目都有这个，我们修改settings.py的引入方式如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;goods.apps.GoodsConfig&apos;,</span><br><span class="line">    &apos;trade.apps.TradeConfig&apos;,</span><br><span class="line">    &apos;user_operation.apps.UserOperationConfig&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>接着我们再来运行我们的run manage.py Task，发现出现了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> from future.utils import iteritems</span><br><span class="line">ModuleNotFoundError: No module named &apos;future&apos;</span><br></pre></td></tr></table></figure></p><p>说明我们缺少future这个库，我们使用下面的命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install future -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后再来运行我们的run manage.py Task，发现又出现了这样的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> related_name=&quot;sub_cat&quot;)</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos;</span><br></pre></td></tr></table></figure></p><p>相信看过前面那个教育网站的童鞋都知道，这个问题出现的原因：缺少级联删除on_delete。<code>on_delete=models.CASCADE</code>是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示） 具体可以阅读这篇文章：<a href="https://www.jianshu.com/p/bfc17faf1ace" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)</a>。<br>就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name=&quot;用户&quot;)</span><br></pre></td></tr></table></figure></p><p>在所有ForeignKey的4个app里面，都添加<code>on_delete=models.CASCADE</code>这个字段。有点多，大家需要慢慢添加，也有简单的方法，开启全局搜索，然后替换也可以。</p><p>接着再来运行我们的run manage.py Task，发现又出现了这样的错误（真是命途多舛。。。）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from crispy_forms.utils import TEMPLATE_PACK</span><br><span class="line">ModuleNotFoundError: No module named &apos;crispy_forms&apos;</span><br></pre></td></tr></table></figure></p><p>又是缺少这个包，我们安装一下，不知道你想起来没，在教育网站我们也遇到过类似的问题，你可以阅读一下：<a href="https://www.jianshu.com/p/f92c7d5897aa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</a><br>解决办法如下：打开settings.py文件，找到里面的INSTALLED_APPS，在后面修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users.apps.UsersConfig&apos;,</span><br><span class="line">    &apos;goods.apps.GoodsConfig&apos;,</span><br><span class="line">    &apos;trade.apps.TradeConfig&apos;,</span><br><span class="line">    &apos;user_operation.apps.UserOperationConfig&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;DjangoUeditor&apos;,</span><br><span class="line">    &apos;crispy_forms&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后依次按照如下库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br><span class="line">pip install django-formtools==2.1   # 记住一定是2.1的版本，否则会出错</span><br></pre></td></tr></table></figure><p>使用的命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>之后会安装一大堆库，我们使用<strong>pip list</strong>命令查看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs\vueshop&gt;pip list</span><br><span class="line">Package              Version</span><br><span class="line">-------------------- --------</span><br><span class="line">diff-match-patch     20121119</span><br><span class="line">Django               2.0.1</span><br><span class="line">django-crispy-forms  1.7.2</span><br><span class="line">django-filter        2.0.0</span><br><span class="line">django-formtools     2.1</span><br><span class="line">django-import-export 1.1.0</span><br><span class="line">djangorestframework  3.8.2</span><br><span class="line">et-xmlfile           1.0.1</span><br><span class="line">future               0.16.0</span><br><span class="line">httplib2             0.11.3</span><br><span class="line">jdcal                1.4</span><br><span class="line">Markdown             3.0.1</span><br><span class="line">mysqlclient          1.3.13</span><br><span class="line">odfpy                1.3.6</span><br><span class="line">openpyxl             2.5.8</span><br><span class="line">Pillow               5.3.0</span><br><span class="line">pip                  18.0</span><br><span class="line">pytz                 2018.5</span><br><span class="line">PyYAML               3.13</span><br><span class="line">setuptools           40.4.3</span><br><span class="line">six                  1.11.0</span><br><span class="line">tablib               0.12.1</span><br><span class="line">unicodecsv           0.14.1</span><br><span class="line">wheel                0.32.0</span><br><span class="line">xlrd                 1.1.0</span><br><span class="line">xlwt                 1.3.0</span><br></pre></td></tr></table></figure></p><p>我上面贴了我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）。</p><p>然后再来运行我们的run manage.py Task，发现又出现了这样的错误（是不是很绝望，哈哈哈哈~~~）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;INSTALLED_APPS.&quot; % (module, name)</span><br><span class="line">RuntimeError: Model class django.contrib.admin.models.LogEntry doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS.</span><br></pre></td></tr></table></figure></p><p>看了上面那篇文章，你是不是发现缺少admin了，对因为我们开头没有启用admin，如果你开头启用了就没有这个错误,你只需要在INSTALLED_APPS 里面添加admin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>接着再来运行我们的run manage.py Task，发现终于运行正常，没有错误了。我们不妨在这里把xadmin给导入进来吧，反正后面会用到。打开vueshop/urls.py文件，把urls中默认的admin修改为xadmin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后进行我们数据库的生成和迁移操作，运行：makemigrations和migrate命令。</p><h3 id="makemigrations和migrate介绍"><a href="#makemigrations和migrate介绍" class="headerlink" title="makemigrations和migrate介绍"></a>makemigrations和migrate介绍</h3><p>我们知道数据库的生成和迁移操作有两个命令：<code>makemigrations</code>和<code>migrate</code>。其中<code>makemigrations</code>的作用是生成数据库变动的Py脚本，也就是Python文件，会自动存放在各个app下面默认生成的<code>migrations</code>文件夹里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-780978b5565c1a65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们随意打开一个app下面生成的Py脚本，看到里面其实是后面<code>migrate</code>命令将要执行的代码，我们运行<code>migrate appname</code>其实就是在对应的app 下面的migrations文件夹下面查找上面的py脚本，然后运行它，从而达到新建数据表的目的。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-51a004aaf0121581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不信的话，你现在在manage.py Task下面运行<code>migrate</code>，然后发现这个和我们刚才分析的一模一样：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a2dcbcec2240084e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有的migrations操作都会被记录到<code>django_migrations</code>这个表里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b16529934918697c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不过这里面有几个坑：<br>1、我们一旦数据库有变动就要使用上述两个命令，否则就会出错；2、我们修改数据库字段不要直接在Navicat里面修改，我们需要通过修改源代码，然后重新运行上述两个命令即可；3、每次数据库的变动都会有记录在<code>django_migrations</code>这个表里面进行追加，运行上述两个命令系统会默认运行这个表里面更新的代码。</p><p>至此我们关于数据库字段的设计的介绍就到此为止了，感谢你的赏阅，下一篇我们将介绍xadmin的后台管理配置。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（三）：数据库字段的定义(上)</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们来学习如何安装各种依赖库以及数据库字段的设计，其中数据库字段的定义我们分两篇进行。</p><h2 id="新建虚拟环境"><a href="#新建虚拟环境" class="headerlink" title="新建虚拟环境"></a>新建虚拟环境</h2><p>关于虚拟环境的搭建，前面已经讲得很清楚，这里就直接开始安装了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv vueshop</span><br></pre></td></tr></table></figure></p><p>这样就在<code>F:Envs</code>下面新建了一个名为vueshop的虚拟环境，而且是Python3.6的版本。然后使用<code>pip list</code>查看一下当前的安装列表，如果出现pip的版本是9.x，我们建议你升级一下pip的版本。可以使用<code>pip install --upgrade pip</code>，如果安装不了建议把pip下载到本地，然后进入你的pip里面，执行<code>python setup.py install</code>命令即可。然后再次运行pip list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) C:\Users\lenovo&gt;pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        18.0</span><br><span class="line">setuptools 39.0.1</span><br><span class="line">wheel      0.30.0</span><br><span class="line"></span><br><span class="line">(vueshop) C:\Users\lenovo&gt;</span><br></pre></td></tr></table></figure></p><h3 id="安装django-和-django-rest-framework"><a href="#安装django-和-django-rest-framework" class="headerlink" title="安装django 和 django rest framework"></a>安装django 和 django rest framework</h3><p>点击这里查看<a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">django rest framework官网</a>，我们看到已经支持Django2.0了，所以我们就安装2.0的版本：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d70081c3c064d36d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>使用下面的命令安装djangorestframework:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure></p><p>如果在安装过程中出现这种情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrying (Retry(total=4, connect=None, read=None, redirect=None)) </span><br><span class="line">after connection broken</span><br><span class="line">by &apos;ConnectTimeoutError(&lt;pip._vendor.requests.packages.urllib3.connection.</span><br><span class="line">VerifiedHTTPSConnection object at 0x10b058850&gt;, </span><br><span class="line">&apos;Connection to pypi.python.org timed out. (connect timeout=15)&apos;)&apos;:</span><br></pre></td></tr></table></figure></p><p>说明你采用了默认的pypi源(国外的pypi源)，这个很容易出现这种连接超时的问题，所以应当采用国内的镜像源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework -i http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure></p><p>如果还有问题，请阅读我的另一篇文章《使用默认pypi源出现连接超时的解决办法》一文，寻求解决的办法。</p><p>然后使用<code>pip list</code>查看，发现里面没有Django,我们需要自己安装Django，注意要指定Django的版本，因为博主在写这套教程的时候，Django2.1已经发布了，你不指定Django的版本就默认安装了最新版的Django2.1，而djangorestframework目前暂不支持Django2.1。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs&gt;pip list</span><br><span class="line">Package             Version</span><br><span class="line">------------------- -------</span><br><span class="line">djangorestframework 3.8.2</span><br><span class="line">pip                 18.0</span><br><span class="line">setuptools          40.4.3</span><br><span class="line">wheel               0.32.0</span><br><span class="line"></span><br><span class="line">(vueshop) F:\Envs&gt;</span><br></pre></td></tr></table></figure></p><p>我们使用下面的命令进行安装Django2.0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0.1 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后安装markdown，django-filter：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown       # Markdown support for the browsable API.</span><br><span class="line">pip install django-filter  # Filtering support</span><br></pre></td></tr></table></figure></p><p>如果安装不了，请使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line"></span><br><span class="line">pip install django-filter -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><p>然后查看list:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs&gt;pip list</span><br><span class="line">Package             Version</span><br><span class="line">------------------- -------</span><br><span class="line">Django              2.0.1</span><br><span class="line">django-filter       2.0.0</span><br><span class="line">djangorestframework 3.8.2</span><br><span class="line">Markdown            3.0.1</span><br><span class="line">pip                 18.0</span><br><span class="line">pytz                2018.5</span><br><span class="line">setuptools          40.4.3</span><br><span class="line">wheel               0.32.0</span><br></pre></td></tr></table></figure></p><p>好了，现在我们开始新建Django项目了，记得在用Pycharm新建Django项目的时候，必须要在之前安装Django，否则就新建不了Django项目。</p><h2 id="新建Django项目"><a href="#新建Django项目" class="headerlink" title="新建Django项目"></a>新建Django项目</h2><h3 id="已有虚拟环境"><a href="#已有虚拟环境" class="headerlink" title="已有虚拟环境"></a>已有虚拟环境</h3><p>因为我们之前已经在<code>F:Envs</code>下面创建了一个名为vueshop的虚拟环境，所以这里就选用<code>Existing interpreter</code>即可，不要选用上面那个<strong>New environment</strong>。那个2是项目的存放路径，那个<strong>interpreter</strong>也就是3，用虚拟环境下面的Scripts\python.exe。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9842030d1626ec60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="没有虚拟环境"><a href="#没有虚拟环境" class="headerlink" title="没有虚拟环境"></a>没有虚拟环境</h3><p>在你没有创建自己的虚拟环境的时候，你才使用上面的那个<code>New environment</code>，也要说明一下，那个2是项目的存放路径，3是你利用Pycharm新建的虚拟环境的路径，4则是你使用哪个Python来创建你的虚拟环境（就是说你在这个虚拟环境里面的Python版本将会和这个一模一样，其实就是安装了指定Python版本的虚拟环境而已。）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1399888fc8766697.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这两种情况，小白很容易搞混淆，所以需要特别注意。点击确定，就成了这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-49bed352d52dc521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关于上面Django项目的介绍我这里不说了，大家去阅读我的另外一个专题：<strong>《零基础使用Django2.0.1打造在线教育网站》</strong>，下面就是你的虚拟环境。我们后面会查看源码，所以虚拟环境里面的包比较重要：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3aa02165e1ad4e36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的项目，发现没有问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9f3b752f5b4ececc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>我们不使用默认的sqlite数据库，采用MySQL数据库，打开settings.py文件，找到第77行代码：将：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;vueshop&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;xxxx&apos;,  # 密码可以随意设置，我使用xxxx</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意一下这里的storage_engine必须是InnoDB。尽管mysql的数据库引擎有InnoDB 和Myisam这两种，但是后面用到的第三方登录，它所支持的库只支持innodb ，否则在使用migration时，会出错。关于这两种数据库引擎，大家可以看这篇文章：<a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="noopener">MySQL存储引擎－－MyISAM与InnoDB区别</a>。</p><h3 id="新建数据库vueshop"><a href="#新建数据库vueshop" class="headerlink" title="新建数据库vueshop"></a>新建数据库vueshop</h3><p>打开Navicat，新建数据库vueshop:</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-da4f4885247e7cdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="安装-mysqlclient和配置seeting文件"><a href="#安装-mysqlclient和配置seeting文件" class="headerlink" title="安装 mysqlclient和配置seeting文件"></a>安装 mysqlclient和配置seeting文件</h3><p>点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module.</span><br><span class="line">Did you install mysqlclient?</span><br></pre></td></tr></table></figure></p><p>上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。</p><p>你可以在Pycharm里面进行安装，但这种很容易出错。最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">mysql-python</a>，点击这个网站，然后按住<code>Ctrl+F</code>键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5feb1fccdd1cf004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！<br>然后把mysqlclient放在我们的虚拟环境下面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-589b580e1d9e8ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在虚拟环境中安装mysqlclient，如图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(vueshop) F:\Envs\vueshop&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Processing f:\envs\vueshop\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Installing collected packages: mysqlclient</span><br><span class="line">Successfully installed mysqlclient-1.3.13</span><br><span class="line"></span><br><span class="line">(vueshop) F:\Envs\vueshop&gt;</span><br></pre></td></tr></table></figure></p><p>注意需要进入到vueshop这个目录下进行安装，安装的命令是：<code>pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</code>（后面的是你刚才下载的版本名称，带whl）。</p><p>接下来我们再次运行项目，发现出了一个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> super(Connection, self).__init__(*args, **kwargs2)</span><br><span class="line">django.db.utils.OperationalError: (1193, &quot;Unknown system variable &apos;storage_engine&apos;&quot;)</span><br></pre></td></tr></table></figure></p><p>看样子是我们的数据库引擎变量名配置出了问题，我们修改一下，把：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET storage_engine=INNODB&apos;&#125;,</span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;OPTIONS&apos;: &#123;&apos;init_command&apos;: &apos;SET default_storage_engine=INNODB;&apos;&#125;,</span><br></pre></td></tr></table></figure></p><p>再次运行，发现正常了。</p><p>接下来安装用于图片处理的库：<code>pillow</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></p><h3 id="新建包和文件夹"><a href="#新建包和文件夹" class="headerlink" title="新建包和文件夹"></a>新建包和文件夹</h3><p>新建两个python package，分别命名为apps和extra_apps。然后新建两个directory,分别命名为media和db_tools。注意一下包和文件夹的区别，包可以折叠，里面含有–init–.py文件，而文件夹不可以折叠，里面啥也没有。最后将两个python package:apps和extra_apps给Mark为source root。（前面教育网站有介绍操作）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88771b8df7cfb1e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。在settings.py文件里面，我们新增路径代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">sys.path.insert(0, BASE_DIR)</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;extra_apps&apos;))</span><br></pre></td></tr></table></figure></p><p>然后运行发现没有问题，接下来进行数据库字段的定义。</p><h2 id="数据库字段的定义"><a href="#数据库字段的定义" class="headerlink" title="数据库字段的定义"></a>数据库字段的定义</h2><p>首先进行需求分析从而设计数据字段，我们发现里面有一个导航栏，左边是商品全部信息，后面则是商品的部分信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b5ae9e3ea149c7d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那个全部商品分类，里面又分几个小类，小类又可以分类，所以说这是一个三级导航栏。右边上面则是搜索框，网站主体部分则是商品的缩略图，最底下是排序和分页。<br>进入商品详情页，就能看到商品的详细信息，商品轮播图，原价，促销价格，以及富文本显示的信息。最右边则是热卖商品的信息，这个非常详细，可以看到详情信息。</p><p>现在就是数据库字段的设计了，我们采用归类的思想，肯定有一个商品信息，一个交易信息，一个用户信息，以及一个用于记录用户操作的信息。（教育网站里面有说过，避免引用的死循环）不过这种没有一个明确的分类，一般是根据程序员自己的经验来划分的。</p><p>所以我们的app一共有4个，用于分别实现不同的功能，具体如下：</p><blockquote><p>(user)用户版块：负责记录用户的个人信息相关的内容,</p></blockquote><blockquote><p>(goods)商品版块：用于记录商品信息相关的内容,</p></blockquote><blockquote><p>(trade)交易板块：用于记录交易相关的内容,</p></blockquote><blockquote><p>(user_operation)用户操作板块：用于记录用户操作的相关的内容。</p></blockquote><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中依次输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">startapp user</span><br><span class="line">startapp goods</span><br><span class="line">startapp trade</span><br><span class="line">startapp user_operation</span><br></pre></td></tr></table></figure></p><p>然后拖到app这个包里面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9a637b993764fee6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了，现在开始进行各个app的models.py的配置了。记住一般都是先进行用户（user）这个app的配置。</p><h3 id="user-app的配置"><a href="#user-app的配置" class="headerlink" title="user app的配置"></a>user app的配置</h3><p>在前面的一篇文章里面：<a href="https://www.jianshu.com/p/460724e1c668" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)</a>，说过user自带的用户表是无法满足我们的需求，我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。</p><p>打开我们的user/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    name = models.CharField(max_length=30, null=True, blank=True, verbose_name=&quot;姓名&quot;)</span><br><span class="line">    birthday = models.DateField(verbose_name=&apos;生日&apos;, null=True, blank=True)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;)</span><br><span class="line">    gender = models.CharField(max_length=6, choices=((&apos;male&apos;, &apos;男&apos;), (&apos;female&apos;, &apos;女&apos;)), default=&apos;female&apos;, verbose_name=&apos;性别&apos;)</span><br><span class="line">    email = models.CharField(max_length=100, null=True, blank=True, verbose_name=&quot;邮箱&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户信息&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VerifyCode(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    短信验证码</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;电话&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;短信验证码&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.code</span><br></pre></td></tr></table></figure></p><p>记住：CharField必须有max_length！！！<br>这里还没完，就是我们这里定义的<code>UserProfile</code>其实并没有覆盖掉原本的<code>User</code>表，所以我们需要重载AUTH_USER_MODEL，打开settings.py,在<strong>INSTALLED_APPS</strong>的下面我们新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL = &apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><h3 id="注意一下"><a href="#注意一下" class="headerlink" title="注意一下"></a>注意一下</h3><p>我们不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错。</p><p>至此我们完成了第一个app的配置及其自定义字段的设计！</p><p>至此，本篇关于如何安装各种依赖库以及部分数据库字段的设计的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（二）：环境搭建</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。<strong>注意我们是在windows的开发环境下进行开发。</strong>网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python，vue，在前面的笔记中我都有介绍过前4个的安装，但是考虑到小白，所以我就直接复制过来，只是对部分内容进行修改（pycharm升级版）。</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="Pycharm的安装"><a href="#Pycharm的安装" class="headerlink" title="Pycharm的安装"></a>Pycharm的安装</h3><p>之前那几个专题用的Pycharm版本是2017，现在我在微信公众号里重新介绍了如何破解安装最新版的pycharm2018,这里放个链接：搜索微信公众号:  啃饼思录，或者扫描上面关于博主介绍里面的二维码即可获取。当然这里我也会把里面的破解地址粘贴过来的：<a href="https://mp.weixin.qq.com/s/z-WoBxzasQGAqC5hqempnQ" target="_blank" rel="noopener">手把手教你破解Pycharm2018.2（JetBrains全家桶）</a>。</p><p>当然如果你还是比较喜欢Pycharm2017,那你可以点击这里进行安装：<a href="https://www.jianshu.com/p/6b007bc61f5c" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</a></p><h3 id="Mysql的安装"><a href="#Mysql的安装" class="headerlink" title="Mysql的安装"></a>Mysql的安装</h3><p><strong>1、下载压缩包</strong><br><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载地址</a></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5ca6a4d9a1aba8e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、解压到文件夹目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2f4b7ff1541738c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>3、新建txt文件内容如下：</strong><br><strong>设置mysql客户端默认字符集</strong></p><p>default-character-set=utf8</p><p><strong>设置3306端口</strong></p><p>port = 3306</p><p><strong>设置mysql的安装目录</strong></p><p>basedir=D:\Program Files\mysql-5.7.21-winx64</p><p><strong>设置mysql数据库的数据的存放目录</strong></p><p>datadir=D:\Program Files\mysql-5.7.21-winx64\data</p><p><strong>允许最大连接数</strong></p><p>max_connections=200</p><p><strong>服务端使用的字符集默认为8比特编码的latin1字符集</strong></p><p>character-set-server=utf8</p><p><strong>创建新表时将使用的默认存储引擎</strong></p><p>default-storage-engine=INNODB</p><p>注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini</p><p><strong>4  添加bin目录到path环境变量</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cd834e29d47e9d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>5 安装 MySQL服务，以管理员身份运行cmd</strong></p><p>执行 mysqld install 命令</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-643f118e3fae68c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>若出现“缺少xxx.dll，请安装微软运行库</p><p><a href="http://www.pc6.com/softview/SoftView_104246.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_104246.html</a></p><p><strong>6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b7a4895d4e32d205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-73b726ce792763b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行 mysqld –initialize-insecure –user=mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1448a95597d04114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data文件夹</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e4735c229dfc43fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data目录内容是否正确</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b6fb91b6926e8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>7  运行MySQL服务</strong></p><p>net start mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f39b42622e911be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关闭MySQL服务的命令是net stop mysql</p><p>8  登陆MySQL</p><p>mysql -u root –p</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-67df9096636696cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有命令：安装服务 mysqld install</p><pre><code>进入bin目录 cd E:\mysql-5.7.21-winx64\bin生成data文件夹 mysqld --initialize-insecure --user=mysql启动服务   net start mysql登录 mysql -u root –p</code></pre><p>修改密码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7142b21a0458a91b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>在忘记root密码的时候，可以这样</strong></p><p><strong>以windows为例：</strong></p><p>1. 关闭正在运行的MySQL服务。</p><p>2. 打开DOS窗口，转到mysql\bin目录。</p><p>3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</p><p>4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</p><p>5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</p><p>6. 连接权限数据库： use mysql; 。</p><p>6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。</p><p>7. 刷新权限（必须步骤）：flush privileges;　。</p><p>8. 退出 quit。</p><p>9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</p><h3 id="Navicat的安装"><a href="#Navicat的安装" class="headerlink" title="Navicat的安装"></a>Navicat的安装</h3><p>步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e93d6a71e62666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤二 在欢迎画面点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b59309f71e5159e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤三 阅读许可协议，接受并点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b3c41f29a829c78c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-be9ca29a49189112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤五 运行其余的步骤。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88d1948d0c99bddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤六 点击“完成”，结束安装进程。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-fd49020988775b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-a359883e5fd81315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV</strong><br>其余版本的可以参考这个<a href="https://www.jianshu.com/p/42a33b0dda9c" target="_blank" rel="noopener">链接</a></p><h3 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h3><p><a href="https://www.python.org/downloads/release/python-364/" target="_blank" rel="noopener">官网传送Python3.6.4版本下载链接</a><br>由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接<a href="https://jingyan.baidu.com/article/3ea51489bebde652e61bbad3.html" target="_blank" rel="noopener">python3.6.3安装教程</a>。</p><h2 id="virtualenv的安装和配置"><a href="#virtualenv的安装和配置" class="headerlink" title="virtualenv的安装和配置"></a>virtualenv的安装和配置</h2><h3 id="使用虚拟环境的好处"><a href="#使用虚拟环境的好处" class="headerlink" title="使用虚拟环境的好处"></a>使用虚拟环境的好处</h3><p>我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹<code>(记住要和Python放在同一目录下)</code>，采用添加环境变量的方法<code>（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path）</code>，我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录<code>(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格</code>，</p><blockquote><p>C:\Users\Kbthinking&gt;F:<br>F:&gt;cd Python<br>F:\Python&gt;cd pystall<br>F:\Python\pystall&gt;</p></blockquote><p>然后输入：<code>python setup.py install</code>回车，等待几分钟即可。</p><p>最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件<br>–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者<code>Windows徽标+R</code>中输入</p><blockquote><p>pip -—version</p></blockquote><p>小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入<br>python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句）</p><p>如果已经成功<strong>安装 pip</strong>，会提示类似下面的：</p><blockquote><p>pip 1.5.6 from C:\Python35\lib\site-packages\pip-1.5.6-py3.5.egg</p></blockquote><p>pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么<br>每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。</p><p>如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考<br>这个方法为你的 Windows电脑安装pip: <a href="https://taizilongxu.gitbooks.io/stackoverflowabout-python/content/8/README.html" target="_blank" rel="noopener">pip安装问题</a><br><a href="https://jingyan.baidu.com/article/ff42efa9d630e5c19e220207.html" target="_blank" rel="noopener">windows安装pip</a></p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>在终端输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line">virtualenv testvir  # 在当前用户目录(win+r %HOMEPATH%可查看)生成</span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat  # 激活</span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure></p><p>其实这种方法挺麻烦的，这里我推荐一种简单方法，<strong>安装virtualenvwrapper</strong></p><h3 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h3><p>在终端输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p><p>接下来便是创建虚拟环境了，同样采用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv djangoTest  # djangoTest为你新建虚拟环境的名称</span><br></pre></td></tr></table></figure></p><p>它会创建在C:\Users\YC\Envs当前用户目录下的Envs目录。</p><p>你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME<br><img src="https://upload-images.jianshu.io/upload_images/8964398-4f6aefde07e8c27b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>退出激活状态命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><p><strong>知道有哪些虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></p><p><strong>直接进入虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon djangoTest</span><br></pre></td></tr></table></figure></p><p>如果出现这种情况，表示你已经进入到虚拟环境中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Envs\Test\django(djangoTest)</span><br></pre></td></tr></table></figure></p><p>再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。</p><h3 id="使用镜像安装库"><a href="#使用镜像安装库" class="headerlink" title="使用镜像安装库"></a>使用镜像安装库</h3><p>有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">镜像</a>,并简单介绍一下如何使用。正常我们下载Django的命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.1.0</span><br></pre></td></tr></table></figure></p><p>(请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.1.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>(注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！)</p><h2 id="Vue开发环境的搭建"><a href="#Vue开发环境的搭建" class="headerlink" title="Vue开发环境的搭建"></a>Vue开发环境的搭建</h2><h3 id="1、webstorm的安装"><a href="#1、webstorm的安装" class="headerlink" title="1、webstorm的安装"></a>1、webstorm的安装</h3><p>当然webstorm只是一个IDE，你可以安装其他类似的IDE，例如sublime Text3，VSCode，Notepad++等，这里就不详细说明了，直接开启传送大门：<br><a href="https://blog.csdn.net/u011781521/article/details/53558979" target="_blank" rel="noopener">WebStorm安装与使用</a>这里没有提供破解方法，你可以点击这里进行破解(方法类似):<a href="https://mp.weixin.qq.com/s/z-WoBxzasQGAqC5hqempnQ" target="_blank" rel="noopener">手把手教你破解JetBrains全家桶</a>。sublime Text3安装：<a href="https://blog.csdn.net/weixin_38091374/article/details/78652778" target="_blank" rel="noopener">sublime Text3安装到破解详解</a>。VSCode安装：<a href="https://jingyan.baidu.com/article/642c9d3430c2ec644a46f7d6.html" target="_blank" rel="noopener">VSCode安装</a>。Notepad++安装：<a href="https://jingyan.baidu.com/article/154b463109921828cb8f4151.html" target="_blank" rel="noopener">notepad++安装教程</a></p><h3 id="2、node-js的安装"><a href="#2、node-js的安装" class="headerlink" title="2、node.js的安装"></a>2、node.js的安装</h3><p>同样node.js的安装，我们直接开启传送大门：<a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html" target="_blank" rel="noopener">Node.js安装及环境配置之Windows篇</a>，安装完成以后记得使用下面的命令确认是否安装成功：<code>node --version</code>，如果出现版本号就表明安装成功了，实际上一些常用的软件都可以用这种方式来检测是否安装成功：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f923c1f6eb5e2e39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来是cnpm的安装了，这个对于后端人员可能不太熟悉，但是前端人员确是非常了解，可以点击这里进行了解一下：<a href="https://www.jianshu.com/p/f581cf9360a2" target="_blank" rel="noopener">如何使用NPM？CNPM又是什么？</a></p><h3 id="3、cnpm的安装"><a href="#3、cnpm的安装" class="headerlink" title="3、cnpm的安装"></a>3、cnpm的安装</h3><p>点击这里<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>，然后安装提示进行安装即可，非常简单，就一步而已：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>当然为防止我们没有安装正确，我们使用<code>cnpm -v</code>来进行检测一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f8a4fa9c9af05752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>出现上面的情况，表明你已经安装成功了，当然你还可以自定义配置，点击这里：<a href="https://www.cnblogs.com/yominhi/p/7039795.html" target="_blank" rel="noopener">安装npm及cnpm(Windows)</a></p><p>现在进入我们的online-store，我们在英文输入法状态下按住shift键，同时点击鼠标左键，在出现的命令栏中选择<strong>在此处打开命令栏窗口</strong>，然后直接使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><p>如果出现下面的情况，我们选择以管理员身份运行：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f65462018d1f1f4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果还是出现这样的问题，就有可能是环境的问题，建议安装这里的教程重新安装和配置一下环境变量（安装最新版的node.js）：<a href="https://www.cnblogs.com/yominhi/p/7039795.html" target="_blank" rel="noopener">安装npm及cnpm(Windows)</a></p><p>现在重新安装配置以后，我们win+x选择以管理员身份运行cmd，然后到online-store文件夹下面重新运行一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><p>发现就是这样了，安装成功：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-4388a66688085fc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>发现运行成功了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-38e7d93e7008c639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f6e71406f21d7070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后打开浏览器，在地址栏中输入：<code>http://localhost:8080/</code>就能看到我们的项目了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ec33932aed2beab0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>注意一下，下面没有是正常情况，不是你静态资源没有加载出来，而是bobby老师的服务器停了，导致api接入不了：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bdf4807ef4ec3c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error occurred while trying to proxy request /favicon.ico from localhost:8080 to http://shop.projectsedu.com:8001 (ETIMEDOUT) (https://nodejs.org/api/errors.html#errors_common_system_errors)</span><br></pre></td></tr></table></figure></p><p>不相信的话，你可以在浏览器地址栏中输入：<code>http://shop.projectsedu.com:8001</code>，你会发现访问不了！当然你可以修改这个api.js文件，换成其他的地址就能访问了。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-91614cb429eca361.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，本篇关于项目环境搭建的介绍就到此为止了，感谢你的赏阅！！！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>采用Vue+Django Restful framework构建生鲜电商项目（一）：项目介绍</title>
      <link href="/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/18/%E9%87%87%E7%94%A8Vue-Django-Restful-framework%E6%9E%84%E5%BB%BA%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习Vue+Django Restful framework构建生鲜电商项目时的一些笔记，希望对即将学习Django和Vue的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="必备技术"><a href="#必备技术" class="headerlink" title="必备技术"></a>必备技术</h3><p><strong>1、Vue + Django Rest Framework 前后端分离技术</strong><br><strong>2、restful api 开发流程</strong><br><strong>3、Django Rest Framework 的功能实现和核心源码分析</strong><br><strong>4、Sentry 完成线上系统的错误日志的监控和告警</strong><br><strong>5、第三方登录和支付宝支付的集成</strong><br><strong>6、本地调试远程服务器代码的技巧</strong></p><h3 id="系统构成"><a href="#系统构成" class="headerlink" title="系统构成"></a>系统构成</h3><p><strong>1、vue前端项目</strong><br><strong>2、django rest framework 系统实现前台功能</strong><br><strong>3、xadmin后台管理系统</strong></p><h3 id="Vue介绍部分"><a href="#Vue介绍部分" class="headerlink" title="Vue介绍部分"></a>Vue介绍部分</h3><p><strong>1、API 接口</strong><br><strong>2、Vue 组件 与api的交互</strong><br><strong>3、vue的项目组织结构分析</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f0cfa648c5a3fb5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Django rest framework 专注于 restful API的开发，所以下面我们来介绍Django Rest Framework这方面的技术。</p><h2 id="Django-Rest-Framework技术"><a href="#Django-Rest-Framework技术" class="headerlink" title="Django Rest Framework技术"></a>Django Rest Framework技术</h2><h3 id="A、通用view实现-rest-api接口"><a href="#A、通用view实现-rest-api接口" class="headerlink" title="A、通用view实现 rest api接口"></a>A、通用view实现 rest api接口</h3><p><strong>1、ApiView方式实现api</strong><br><strong>2、GenericView方式实现api接口</strong><br><strong>3、Viewset和router方式实现api接口和url配置</strong><br><strong>4、Django_filter、SearchFilter、 OrderFilter 、分页</strong><br><strong>5、通用mixins</strong></p><h3 id="B、权限和认证"><a href="#B、权限和认证" class="headerlink" title="B、权限和认证"></a>B、权限和认证</h3><p><strong>1、Authentication用户认证设置</strong><br><strong>2、动态设置permission、authentication</strong><br><strong>3、Validators实现字段验证</strong></p><h3 id="C、序列化和表单验证"><a href="#C、序列化和表单验证" class="headerlink" title="C、序列化和表单验证"></a>C、序列化和表单验证</h3><p><strong>1、Serializer</strong><br><strong>2、ModelSerializer</strong><br><strong>3、动态设置Serializer</strong></p><h3 id="D、支付登录注册"><a href="#D、支付登录注册" class="headerlink" title="D、支付登录注册"></a>D、支付登录注册</h3><p><strong>1、json web token 实现登录</strong><br><strong>2、手机注册</strong><br><strong>3、支付宝支付</strong><br><strong>4、第三方登录</strong></p><h3 id="E、进阶开发"><a href="#E、进阶开发" class="headerlink" title="E、进阶开发"></a>E、进阶开发</h3><p><strong>1、django rest framework 部分核心源码解读</strong><br><strong>2、文档自动化管理</strong><br><strong>3、django rest framework的缓存</strong><br><strong>4、Throttling 对用户和ip进行限速</strong></p><h2 id="开发中常见的问题"><a href="#开发中常见的问题" class="headerlink" title="开发中常见的问题"></a>开发中常见的问题</h2><p><strong>1、本地系统不能重现的bug</strong></p><p><strong>2、api接口出错不能及时的发现或难以找到错误栈</strong></p><p><strong>3、api文档管理问题：html 或者markdown的文本交互技术</strong></p><p><strong>4、大量的url配置造成url配置越来越多难以维护</strong></p><p><strong>5、接口不及时去更新文档，对方不知道如何去测试接口，但写文档会花费大量的时间去维护</strong></p><p><strong>6、为了防止爬虫，我们需要针对api的访问频率进行限制，比如一分钟，一小时，或者一天用户的访问频率限制问题</strong></p><p><strong>7、某些页面将数据放入缓存，加速某些api的访问速度（商品分类的数据一般变动比较小，所以可以放入缓存中）</strong></p><h2 id="开发中常见问题的解决办法"><a href="#开发中常见问题的解决办法" class="headerlink" title="开发中常见问题的解决办法"></a>开发中常见问题的解决办法</h2><p><strong>1、通过介绍pycharm 的远程服务器代码调试技巧让大家不仅可以调试支付，第三方登录，还可以远程服务器代码来重现服务器上的bug</strong></p><p><strong>2、通过docker 搭建 sentry 来体验错误日志监控系统，让我们不仅可以得到线上的错误栈还能及时在发生系统错误时收到邮件通知</strong></p><p><strong>3、通过django rest framework 的文档自动化管理以及url的注册管理功能会让我们省去写文档的时间</strong></p><p><strong>4、django rest framework 的文档管理功能不仅可以让我们省去写文档的时间，还能直接在文档里面测试接口，自动生成js接口代码，shell测试代码和python测试代码</strong></p><p><strong>5、django rest framework 提供的throttle 对于api进行访问频率的限制</strong></p><p><strong>6、引入第三方框架来设置某些api的缓存</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a6fe7e1ed4775d62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Django进阶知识点"><a href="#Django进阶知识点" class="headerlink" title="Django进阶知识点"></a>Django进阶知识点</h3><p><strong>1、Django mirgrations原理</strong><br><strong>2、Django 信号量</strong><br><strong>3、Django从请求到响应的完整过程</strong><br><strong>4、独立使用Django的Model</strong></p><h3 id="Vue知识点"><a href="#Vue知识点" class="headerlink" title="Vue知识点"></a>Vue知识点</h3><p><strong>1、Vue技术选型分析</strong><br><strong>2、API后端数据填充到Vue组件模板</strong><br><strong>3、Vue代码结构分析</strong></p><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p>1、开发环境的搭建<br>2、设计数据库以及导入原始数据<br>3、restful api基础以及vue项目结构介绍<br>4、商品列表页功能<br>5、商品类别功能<br>6、手机注册和用户登录<br>7、商品详情页和收藏功能<br>8、个人中心功能<br>9、购物车、订单和支付宝支付功能<br>10、首页，商品相关数量，缓存，访问限速功能<br>11、第三方登录(微博 、QQ、 微信)<br>12、sentry系统错误日志监控</p><h2 id="技术要求"><a href="#技术要求" class="headerlink" title="技术要求"></a>技术要求</h2><p>由于这里主要是介绍Django的restful framework，所以我们就不介绍Django的基础知识了，大家可以去订阅我的另一个专题<strong>《零基础使用Django2.0.1打造在线教育网站》</strong>，通过这个专题的学习，你就会对Django的基础知识有一个比较深刻的认识。然后再来学习本套笔记吧。当然Python的基础语法还是要有的，对于小白我觉得还是不要一上来就接触这些比较深奥的技术。除此之外呢，你最好还有一些Vue和MySQL的基础知识。关于Vue这块，我准备下个月出一套实战教程，而MySQL呢，我已经出了2个专题<strong>《SQL数据库学习笔记》</strong>，<strong>《Python3操作三大数据库》</strong>，哪天有时间我继续更新一下（原谅我记忆力比较差。。。）。</p><h2 id="系统功能"><a href="#系统功能" class="headerlink" title="系统功能"></a>系统功能</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d8f774afb753530c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c9c0f193cd490d6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面是我们项目的一个运行截图，这里面包含的内容很多，例如：搜索关键词，第三方登录，支付宝结算，商品收藏……..这里就不一一说明了。看到这里，是不是有点想快速学习的念头呢？那么话不多说，上车吧，走你~~~</p><p><strong>特别说明：由于版权的问题，我这个项目的全部代码不会上传到github上了，如果你需要代码请到慕课网购买该课程。</strong></p><p>到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。</p><h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><p>1、<strong>[入门]</strong> <a href="http://www.runoob.com/django/django-tutorial.html" target="_blank" rel="noopener">菜鸟Django 教程</a>，非常简短的教程，可以快速让你有一个清楚的认识。<br>2、<strong>[基础]</strong> <a href="https://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="noopener">自强学堂Django</a>，非常不错的教程，可以没事看一看。<br>3、<strong>[基础]</strong> <a href="http://www.liujiangblog.com/course/django/2" target="_blank" rel="noopener">刘江的Django教程</a>，非常适合入门的小白阅读，还有2个例子供你练习。<br>4、<strong>[入门]</strong> <a href="http://dwz.cn/VHRVxWfC" target="_blank" rel="noopener">1元学习《Django零基础到项目实战》</a>，非常不错的基础入门<strong>视频</strong>教程。<br>5、<strong>[基础]</strong><a href="http://edu.51cto.com/course/2787.html" target="_blank" rel="noopener">用Python Django快速做出高大上的BBS论坛网站</a>，这是免费的<strong>视频</strong>教程，大家可以试着去练手。<br>6、<strong>[进阶]</strong><a href="https://www.jianshu.com/c/559ad89c808a" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站</a>，本人一套关于Django学习的实战笔记。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
            <tag> Vue前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（提示）：错误贴</title>
      <link href="/2018/04/16/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E6%8F%90%E7%A4%BA%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E8%B4%B4/"/>
      <url>/2018/04/16/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E6%8F%90%E7%A4%BA%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近有小伙伴们私聊我说出现了很多问题，这里特开一个帖子专门用于错误的指导与交流。首先是说注册和激活有问题，我对此进行了测试，发现没有问题，小伙伴们出现这种问题可能是代码粘贴时的位置出现了错误，请各位小伙伴们自己对比一下代码，注意是否对齐（部分代码进行了完善），这里贴一下代码。</p><h2 id="注册代码"><a href="#注册代码" class="headerlink" title="注册代码"></a>注册代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户注册的函数</span><br><span class="line">class RegisterView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        register_form = RegisterForm()</span><br><span class="line">        return render(request, &quot;register.html&quot;, &#123;&apos;register_form&apos;: register_form&#125;)</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息</span><br><span class="line">        register_form = RegisterForm(request.POST)</span><br><span class="line">        if register_form.is_valid():</span><br><span class="line">            user_name = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">            if UserProfile.objects.filter(email=user_name):</span><br><span class="line">                # register_form回填信息必须有，msg是信息提示</span><br><span class="line">                return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;)</span><br><span class="line"></span><br><span class="line">            # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line">            # 实例化一个user_profile对象，存入前端页面获取的值</span><br><span class="line">            user_profile = UserProfile()</span><br><span class="line">            user_profile.username = user_name</span><br><span class="line">            user_profile.email = user_name</span><br><span class="line"></span><br><span class="line">            # 默认激活状态为False，也就是未激活</span><br><span class="line">            user_profile.is_active = False</span><br><span class="line"></span><br><span class="line">            # 对password进行加密并保存</span><br><span class="line">            user_profile.password = make_password(pass_word)</span><br><span class="line">            user_profile.save()</span><br><span class="line">            send_register_eamil(user_name, &apos;register&apos;)</span><br><span class="line">            return render(request, &quot;login.html&quot;, )</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;register.html&quot;, &#123;&quot;register_form&quot;: register_form&#125;)</span><br></pre></td></tr></table></figure><h2 id="激活代码"><a href="#激活代码" class="headerlink" title="激活代码"></a>激活代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户激活操作的函数</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        # 如果不为空也就是有用户</span><br><span class="line">        active_form = ActiveForm(request.GET)  </span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                user = UserProfile.objects.get(email=email)</span><br><span class="line">                user.is_active = True</span><br><span class="line">                user.save()</span><br><span class="line">                # 激活成功跳转到登录页面</span><br><span class="line">                return render(request, &quot;login.html&quot;, )</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;register.html&quot;, &#123;&quot;msg&quot;: &quot;您的激活链接无效&quot;, &quot;active_form&quot;: active_form&#125;)</span><br></pre></td></tr></table></figure><p>其次是突然所有图片显示不了，我调试发现可能是你上传图片的命名格式出了问题，所以我们的访问地址也要配置：两种形式都可以，不过呢建议大家使用第一种，因为第一种是匹配任意位数，第二种则是贪婪匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 第一种</span><br><span class="line"># 配置文件上传的访问处理url</span><br><span class="line">    re_path(&apos;media/(?P&lt;path&gt;\d+)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;)</span><br><span class="line"># 第二种</span><br><span class="line"># 配置文件上传的访问处理url</span><br><span class="line">    re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><p>还有因为我这个是Python3+Django2.0，如果你在部署的时候没有新建虚拟环境，那么你就很容易造成Python版本的使用混乱，而Ubuntu自带的Python版本是2.0系列，因此最好是使用虚拟环境来避免这个错误！</p><p>目前为止就是这几个问题出的错比较多，如果你发现了其他问题，可以在文章底部留言和我交流～～～</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十七）：项目部署上线</title>
      <link href="/2018/04/15/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/"/>
      <url>/2018/04/15/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍如何把我们的django项目部署到服务器上，里面涉及到的东西很多，特别是小白第一次接触可能不清楚，但是没关系，你跟着我的节奏走就可以。注意本文是部署Python3.6.4和Django2.0.1与bobby老师讲的大体上差不多，只是部分命令不一样。注意我已经把win10里面的eduline文件放到deepin的桌面上了。（推荐使用U盘导入文件，否则VMware导入本地文件很麻烦。）使用Centos的朋友请点击这里： <a href="http://www.projectsedu.com/2017/08/15/centos7-%E4%B8%8B%E9%80%9A%E8%BF%87nginx-uwsgi%E9%83%A8%E7%BD%B2django%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">centos7 下通过nginx+uwsgi部署django应用</a></p><h2 id="nginx-uwsgi"><a href="#nginx-uwsgi" class="headerlink" title="nginx + uwsgi"></a>nginx + uwsgi</h2><p>首先在win10上面利用虚拟机安装Ubantu系统，这里我个人推荐使用国产deepin操作系统。不会安装的请点击这里：<a href="https://blog.csdn.net/liberalliushahe/article/details/78950967" target="_blank" rel="noopener">VmWare安装深度deepin操作系统</a></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>1、使用命令，安装nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f8329e38265381a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>2、使用下面的命令查看是否启动nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b76c9a9a0ce060be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、使用下面的命令查看本地ip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3b3e490574f22b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>4、本地输入获取到的ip到浏览器访问一下（服务器用公网IP）：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-753a5edb1611252b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>1、使用命令，安装数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-82b5c367b1501ec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>出现下面的图片：<img src="https://upload-images.jianshu.io/upload_images/8964398-ebfa8a9350fbdd84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>输入root,按上下箭头进行选择，回车进行确定！<br>2、使用下面的命令查看是否启动mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep mysql</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-52b4b58466bf9c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、使用下面的命令进入数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>查看数据库命令：<strong>show databases;</strong>，退出数据库命令：<strong>exit</strong></p><p>4、在终端中输入<strong>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</strong><br>修改其中bind-address =127.0.0.1为bind-address =0.0.0.0，注意这样会暴露端口，我们这里仅仅是为了让win10进行连接。所以真正部署的时候，尽量127.0.0.1，不要修改。（在vim中修改文件使用键盘上的<strong>i</strong>键进入，然后进行修改。修改完成以后，按键盘上的Esc键退出插入模式，再按<strong>shift+:</strong>，输入<strong>wq</strong>进行保存。仅仅输入<strong>q!</strong>是退出，而<strong>wq</strong>是保存并退出。）<br><img src="https://upload-images.jianshu.io/upload_images/8964398-e391cfccbd91b4a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>5、使用下面的命令重启数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart  # 重启数据库</span><br><span class="line"></span><br><span class="line">ifconfig # 查看ip</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-efdca1a29846cb97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>6、打开win10上面的Navicat，将获取到的ip地址新建数据库，然后测试一下:发现链接不允许（（服务器用公网IP））。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c4e5a58db1b4db43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>7、在终端中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 192.168.118.128 -u root -p</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3760fea0e9666bc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>发现还是有问题。这时我们要修改数据库访问权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p  # 进入数据库</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-58018b2ec92381db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后<strong>exit</strong>退出数据库。<br>8、重新链接测试一下，发现可以正常连接了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-bed81033a52dca85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>9，新建数据库：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-67b8793e741c68e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>10、使用下面的命令安装pip3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-bf95acf4ab9906bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>11、使用下面的命令安装virtualenv:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualenv</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a41556acb3a294a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>12、使用下面的命令安装virtualenvwrapper:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualenvwrapper</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d3bd6357e2b15594.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>13、修改配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/share/virtualenvwrapper/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>14、新建虚拟环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workon #测试一下</span><br><span class="line"></span><br><span class="line">mkvirtualenv eduline</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ba9c270e3edb2296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>15、win10导出requirements.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></p><p>16、虚拟机deepin安装requirements.txt（虚拟环境使用pip而不是pip3而且需要把requirements.txt放到虚拟环境里面）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-0aacdad41528c4a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>17、如果遇到安装不了的软件或者第三方库，可以使用下面的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install Django==2.0.1</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-79989d2314ddf33c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>18、出现这种情况，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5af89a0dc0d9c2e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-2b081ebedddd5524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>19、如果第三方库安装太慢，可以使用豆瓣源加速：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i https://pypi.douban.com/simple pillow==4.10.1</span><br></pre></td></tr></table></figure></p><p>20、查看已经安装的包使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 list</span><br></pre></td></tr></table></figure></p><h2 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装uwsgi</h2><p>1、使用下面的命令进行安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install uwsgi</span><br></pre></td></tr></table></figure></p><p>如果安装不了，请先运行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpython3.x-dev  #x对应你Python3.x</span><br></pre></td></tr></table></figure></p><p>然后在重新运行一下上面的安装命令。<br>2、运行一下wsgi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --module eduline.wsgi</span><br></pre></td></tr></table></figure></p><p>3、启动本地服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-883e8326bc5c1b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>4、重新设置监听窗口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8fb3ae233871021c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>5、数据库迁移：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-73c67160cabfc26b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>6、使用你本地的ip地址进行访问，页面出现，没有问题。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-9410fb4ca141fa2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>7、配置nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">新建uc_nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># the upstream component nginx needs to connect to</span><br><span class="line">upstream django &#123;</span><br><span class="line"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span><br><span class="line">server 127.0.0.1:8000; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line"># configuration of the server</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"># the port your site will be served on</span><br><span class="line">listen      80;</span><br><span class="line"># the domain name it will serve for</span><br><span class="line">server_name 你的ip地址 ; # substitute your machine&apos;s IP address or FQDN</span><br><span class="line">charset     utf-8;</span><br><span class="line"></span><br><span class="line"># max upload size</span><br><span class="line">client_max_body_size 75M;   # adjust to taste</span><br><span class="line"></span><br><span class="line"># Django media</span><br><span class="line">location /media  &#123;</span><br><span class="line">    alias 你的目录/eduline/media;  # 指向django的media目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /static &#123;</span><br><span class="line">    alias 你的目录/eduline/static; # 指向django的static目录</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Finally, send all non-media requests to the Django server.</span><br><span class="line">location / &#123;</span><br><span class="line">    uwsgi_pass  django;</span><br><span class="line">    include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9f0e1a8c4ea5efb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>8、将该配置文件加入到nginx的启动配置文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s 你的目录/eduline/conf/nginx/uc_nginx.conf /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c4adb04e49328aa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>9、拉取所有需要的static file 到同一个目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在django的setting文件中，添加下面一行内容：</span><br><span class="line"></span><br><span class="line">    STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)</span><br></pre></td></tr></table></figure></p><p>10、运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure></p><p>11、通过配置文件启动uwsgi：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">新建uwsgi.ini 配置文件， 内容如下：</span><br><span class="line"></span><br><span class="line">    # mysite_uwsgi.ini file</span><br><span class="line">    [uwsgi]</span><br><span class="line"></span><br><span class="line">    # Django-related settings</span><br><span class="line">    # the base directory (full path)</span><br><span class="line">    chdir           = /home/licheetools/eduline</span><br><span class="line">    # Django&apos;s wsgi file</span><br><span class="line">    module          = eduline.wsgi</span><br><span class="line">    # the virtualenv (full path)</span><br><span class="line"></span><br><span class="line">    # process-related settings</span><br><span class="line">    # master</span><br><span class="line">    master          = true</span><br><span class="line">    # maximum number of worker processes</span><br><span class="line">    processes       = 10</span><br><span class="line">    # the socket (use the full path to be safe</span><br><span class="line">    socket          = 127.0.0.1:8000</span><br><span class="line">    # ... with appropriate permissions - may be needed</span><br><span class="line">    # chmod-socket    = 664</span><br><span class="line">    # clear environment on exit</span><br><span class="line">    vacuum          = true</span><br><span class="line">    virtualenv = /home/licheetools/.virtualenvs/mxonline</span><br><span class="line"></span><br><span class="line">    logto = /tmp/mylog.log</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">    chdir： 表示需要操作的目录，也就是项目的目录</span><br><span class="line">    module： wsgi文件的路径</span><br><span class="line">    processes： 进程数</span><br><span class="line">    virtualenv：虚拟环境的目录</span><br></pre></td></tr></table></figure></p><p>检查虚拟环境是否有问题：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-9cfbfd1786c09bba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workon eduline</span><br><span class="line"></span><br><span class="line">uwsgi -i 你的目录/eduline/conf/uwsgi.ini</span><br></pre></td></tr></table></figure></p><p>如果在conf目录下，只需使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi -i uwsgi.ini</span><br></pre></td></tr></table></figure></p><p>最后一步，在浏览器地址里面输入你的ip就可以访问到我们的项目了。</p><p>至此，我们Django项目就成功的部署到服务器上面了。回顾这个项目，收获很多，但是坑也很多，坚持到最后才会感受成功的喜悦！</p><ul><li>参考文章：<br>[-] <a href="https://www.jianshu.com/p/12e0814e6b56" target="_blank" rel="noopener">Django部署的正确打开方式 v2.0</a><br>[-] <a href="https://www.jianshu.com/p/d6f9138fab7b" target="_blank" rel="noopener">Django快速部署简约版 v3.0</a><br>[-] nginx一些常用命令：查看nginx进程命令<code>ps -ef | grep  nginx</code>和<code>pkill -9 nginx</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十六）：xadmin的进阶开发</title>
      <link href="/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9Axadmin%E7%9A%84%E8%BF%9B%E9%98%B6%E5%BC%80%E5%8F%91/"/>
      <url>/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9Axadmin%E7%9A%84%E8%BF%9B%E9%98%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍xadmin的进阶开发，具体包括自定义icon，默认排序，字段只读，字段隐藏，搜索框，inlines，一张表分两个model来进行管理添加数据，直接列表页编辑，列表页显示章节数，显示自定义的html代码，列表页定时刷新，字段联动功能，xadmin源码目录简说，xadmin集成富文本等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><p>##<br>首先需要把我们在前面当Debug=False时，修改的以下代码全部删除掉：</p><hr><p>为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</span><br></pre></td></tr></table></figure></p><p>同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># STATICFILES_DIRS = [</span><br><span class="line">#     os.path.join(BASE_DIR, &quot;static&quot;),  # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾</span><br><span class="line"># ]</span><br></pre></td></tr></table></figure></p><p>打开eduline/urls.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from eduline.settings import  STATIC_ROOT</span><br><span class="line"></span><br><span class="line"> # 配置静态文件上传的访问处理url</span><br><span class="line">    re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><hr><p>恢复到Debug=True时的状态。<br>然后进入到我们的xadmin后台，开始xadmin的进阶开发。</p><h2 id="自定义icon"><a href="#自定义icon" class="headerlink" title="自定义icon"></a>自定义icon</h2><p>所谓icon其实就是你的功能小图标：<img src="https://upload-images.jianshu.io/upload_images/8964398-92b1bf9ba9bfc799.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们以修改邮箱验证码为例，打开users/adminx.py文件，在EmailVerifyRecordAdmin函数新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model_icon = &apos;fa fa-user&apos;</span><br></pre></td></tr></table></figure></p><p>其实这个样式就是对应于<a href="http://fontawesome.io" target="_blank" rel="noopener">font awesome</a>里面的图标，你可以下载新的源代码对你的目录下的css和fonts文件夹进行替换：<img src="https://upload-images.jianshu.io/upload_images/8964398-932aabecbc41f2b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后刷新一下就出现自己想要的样式icon了。</p><h2 id="默认排序，字段只读，字段隐藏"><a href="#默认排序，字段只读，字段隐藏" class="headerlink" title="默认排序，字段只读，字段隐藏"></a>默认排序，字段只读，字段隐藏</h2><p>我们以课程为例，来介绍这3个小功能。打开couses/adminx.py文件，在CourseAdmin中加入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 默认排序：以点击数排序</span><br><span class="line">ordering = [&apos;-click_nums&apos;]</span><br><span class="line"></span><br><span class="line"># 字段只读：点击数只允许读取</span><br><span class="line">readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]</span><br><span class="line"></span><br><span class="line"># 字段隐藏：收藏数隐藏显示</span><br><span class="line">exclude = [&apos;fav_nums&apos;]</span><br><span class="line"></span><br><span class="line"># 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏</span><br></pre></td></tr></table></figure></p><h2 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h2><p>当课程很多时，我们不能以下拉菜单的形式来查找我们的课程，我们需要有搜索框。你已经知道，课程它有一个外键是课程机构，因此我们需要到课程机构里面进行搜索框的配置。打开organization/adminx.py文件，在CourseOrgAdmin函数里面添加一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 搜索框，当课程数据量过大时，有课程指向它，会以ajax方式加载</span><br><span class="line">    relfield_style = &apos;fk-ajax&apos;</span><br></pre></td></tr></table></figure></p><h2 id="inlines添加数据"><a href="#inlines添加数据" class="headerlink" title="inlines添加数据"></a>inlines添加数据</h2><p>在这之前，我们新增课程的时候是不能同时新增课程章节信息的，需要跳到另一个页面，这是很麻烦的。所以我们考虑采用inlines来添加数据从而完成在一个页面直接完成章节信息的添加。</p><p>打开couses/adminx.py文件，在最顶部新定义一个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 课程直接添加章节</span><br><span class="line">class LessonInline(object):</span><br><span class="line">    model = Lesson</span><br><span class="line">    extra = 0</span><br><span class="line"></span><br><span class="line"># 同时在CourseAdmin中，新增一行代码</span><br><span class="line"># 课程直接添加章节</span><br><span class="line">    inlines = [LessonInline] # 数组，支持多个</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的后台，发现章节信息在课程页面底部出现了：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-7853d767568af92e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>同时也支持多个添加，比方再添加一个课程资源：<img src="https://upload-images.jianshu.io/upload_images/8964398-983c07e8c018bc3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="一张表分两个model来进行管理"><a href="#一张表分两个model来进行管理" class="headerlink" title="一张表分两个model来进行管理"></a>一张表分两个model来进行管理</h2><p>录播课程与非轮播课程可以分开管理，但是最好是在一张表里显示。打开courses/models.py文件，在course函数下面新增代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class BannerCourse(Course):  # 注意是继承Course而不是object这个最高类</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;轮播课程&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        proxy = True  # 很重要，否则会生成另外一张表，这样设置具有model的功能，但不会生成表</span><br></pre></td></tr></table></figure></p><p>然后打开courses/adminx.py文件，修改之前的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">from .models import  BannerCourse</span><br><span class="line"></span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                    &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;,</span><br><span class="line">                     &apos;click_nums&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                   &apos;add_time&apos;]  # 过滤器</span><br><span class="line">    # # 默认排序：以点击数排序</span><br><span class="line">    # ordering = [&apos;-click_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段只读：点击数只允许读取</span><br><span class="line">    # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段隐藏：收藏数隐藏显示</span><br><span class="line">    # exclude = [&apos;fav_nums&apos;]</span><br><span class="line">    # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏</span><br><span class="line"></span><br><span class="line">    # 课程直接添加章节,课程资源</span><br><span class="line">    inlines = [LessonInline, CourseResourceInline]</span><br><span class="line"></span><br><span class="line">    # 过滤列表中的数据</span><br><span class="line">    def queryset(self):</span><br><span class="line">        qs = super(CourseAdmin, self).queryset()</span><br><span class="line">        qs = qs.filter(is_banner=False)</span><br><span class="line">        return qs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BannerCourseAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                    &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;,</span><br><span class="line">                     &apos;click_nums&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                   &apos;add_time&apos;]  # 过滤器</span><br><span class="line">    # # 默认排序：以点击数排序</span><br><span class="line">    # ordering = [&apos;-click_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段只读：点击数只允许读取</span><br><span class="line">    # readonly_fields = [&apos;click_nums&apos;, &apos;fav_nums&apos;]</span><br><span class="line">    #</span><br><span class="line">    # # 字段隐藏：收藏数隐藏显示</span><br><span class="line">    # exclude = [&apos;fav_nums&apos;]</span><br><span class="line">    # # 注意字段只读和字段隐藏是冲突的，不允许设置一个字段只读同时隐藏</span><br><span class="line"></span><br><span class="line">    # 课程直接添加章节,课程资源</span><br><span class="line">    inlines = [LessonInline, CourseResourceInline]</span><br><span class="line"></span><br><span class="line">    # 过滤列表中的数据</span><br><span class="line">    def queryset(self):</span><br><span class="line">        qs = super(BannerCourseAdmin, self).queryset()</span><br><span class="line">        qs = qs.filter(is_banner=True)</span><br><span class="line">        return qs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(BannerCourse, BannerCourseAdmin)</span><br></pre></td></tr></table></figure></p><p>然后刷新一下后台页面，发现有2个课程管理：<img src="https://upload-images.jianshu.io/upload_images/8964398-8c1e1a7fa2630ad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们还是要配置一下：打开users/adminx.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from courses.models import BannerCourse</span><br><span class="line"></span><br><span class="line">&#123;&apos;title&apos;: &apos;轮播课程&apos;, &apos;url&apos;: self.get_model_url(BannerCourse, &apos;changelist&apos;)&#125;,</span><br></pre></td></tr></table></figure></p><p>并修改之前的course的verbose_name为普通课程。<br>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-1781beebab497148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>刷新一下我们的后台页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-a9148c37f09f2090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="直接列表页编辑"><a href="#直接列表页编辑" class="headerlink" title="直接列表页编辑"></a>直接列表页编辑</h2><p>在courses/adminx.py文件的CourseAdmin函数，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接列表页编辑</span><br><span class="line">   list_editable = [&apos;degree&apos;, &apos;desc&apos;, ]</span><br></pre></td></tr></table></figure></p><h2 id="列表页显示章节数"><a href="#列表页显示章节数" class="headerlink" title="列表页显示章节数"></a>列表页显示章节数</h2><p>在courses/adminx.py文件的CourseAdmin和BannerCourseAdmin函数的list_display中，新增显示字段<code>get_zj_nums</code>，刷新后台发现是黑色的英文，我们需要修改，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_zj_nums.short_description = &quot;章节数&quot;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-d01f3694a94d7d1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="显示自定义的html代码"><a href="#显示自定义的html代码" class="headerlink" title="显示自定义的html代码"></a>显示自定义的html代码</h2><p>在刚才的页面下面新增以下代码：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def go_to(self):</span><br><span class="line">        from django.utils.safestring import mark_safe</span><br><span class="line">        # 如果不使用mark_safe，系统则会对其进行转义</span><br><span class="line">        return mark_safe(&quot;&lt;a href=&apos;http://blog.licheetools.top&apos;&gt;跳转&lt;/&gt;&quot;)</span><br><span class="line">    go_to.short_description = &quot;跳转&quot;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-e52c998057f7f32d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="列表页定时刷新"><a href="#列表页定时刷新" class="headerlink" title="列表页定时刷新"></a>列表页定时刷新</h2><p>打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh_times = [3,5]  # 列表页定时刷新3s或者5s</span><br></pre></td></tr></table></figure></p><h2 id="字段联动功能"><a href="#字段联动功能" class="headerlink" title="字段联动功能"></a>字段联动功能</h2><p>打开courses/adminx.py文件，在之前的CourseAdmin函数里面，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 字段联动</span><br><span class="line">    def save_models(self):</span><br><span class="line">        # 在保存课程的时候,统计课程机构的课程数</span><br><span class="line">        obj = self.new_obj</span><br><span class="line">        # 新增课程还没有保存，统计的课程数就会少一个</span><br><span class="line">        obj.save()</span><br><span class="line">        # 必须确定存在</span><br><span class="line">        if obj.course_org is not None:</span><br><span class="line">            # obj实际是一个course对象</span><br><span class="line">            course_org = obj.course_org</span><br><span class="line">            course_org.course_nums = Course.objects.filter(course_org=course_org).count()</span><br><span class="line">            course_org.save()</span><br></pre></td></tr></table></figure></p><h2 id="xadmin源码目录简说"><a href="#xadmin源码目录简说" class="headerlink" title="xadmin源码目录简说"></a>xadmin源码目录简说</h2><p><img src="https://upload-images.jianshu.io/upload_images/8964398-8a5ca28f1ab83af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><ul><li>locale  对应语言包</li><li>migrations 是数据表的记录</li><li>plugins 每一个后台页面都是一个plugin插件</li><li>static 静态文件夹，里面有js,css</li><li>template 这是xadmin自己使用的html文件</li><li>templatetags  这是tag模板<br>总而言之，xadmin它是对Django admin的封装和进阶开发，正所谓青出于蓝而胜于蓝就是这个理。</li></ul><h2 id="xadmin集成富文本"><a href="#xadmin集成富文本" class="headerlink" title="xadmin集成富文本"></a>xadmin集成富文本</h2><p>首先点击<a href="https://xadmin.readthedocs.io/en/docs-chinese/make_plugin.html" target="_blank" rel="noopener">Xadmin 插件制作</a>，我们学着官网的介绍，自己尝试做一个插件:富文本编辑器。<br>点击<a href="https://github.com/zhangfisher/DjangoUeditor" target="_blank" rel="noopener">DjangoUeditor</a>，获取<strong>DjangoUeditor</strong>的安装包，然后按照帮助文档或者下面的要求安装DjangoUeditor。</p><h3 id="1、安装方法-注意需要转到eduline这个虚拟环境下面才能安装"><a href="#1、安装方法-注意需要转到eduline这个虚拟环境下面才能安装" class="headerlink" title="1、安装方法(注意需要转到eduline这个虚拟环境下面才能安装)"></a>1、安装方法(注意需要转到eduline这个虚拟环境下面才能安装)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法一：将github整个源码包下载回家，在命令行运行：</span><br><span class="line">python setup.py install</span><br><span class="line">* 方法二：使用pip工具在命令行运行(推荐)：</span><br><span class="line">    pip install DjangoUeditor</span><br></pre></td></tr></table></figure><h3 id="2、在Django中安装DjangoUeditor"><a href="#2、在Django中安装DjangoUeditor" class="headerlink" title="2、在Django中安装DjangoUeditor"></a>2、在Django中安装DjangoUeditor</h3><p>在INSTALL_APPS里面增加DjangoUeditor app，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eduline/settings.py文件:</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = ( #........ &apos;DjangoUeditor&apos;, )</span><br></pre></td></tr></table></figure></p><h3 id="3、配置urls"><a href="#3、配置urls" class="headerlink" title="3、配置urls"></a>3、配置urls</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eduline/urls.py文件:</span><br><span class="line"></span><br><span class="line"> # 富文本相关path配置</span><br><span class="line">    path(&quot;ueditor/&quot;, include(&apos;DjangoUeditor.urls&apos;)),</span><br></pre></td></tr></table></figure><h3 id="4、在models中的使用"><a href="#4、在models中的使用" class="headerlink" title="4、在models中的使用"></a>4、在models中的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">courses/models.py文件：</span><br><span class="line"></span><br><span class="line">from DjangoUeditor.models import UEditorField</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Course(models.Model):</span><br><span class="line">    detail = UEditorField(verbose_name=&apos;课程详情&apos;, width=600, height=300, imagePath=&quot;courses/ueditor/&quot;,</span><br><span class="line">                                         filePath=&quot;courses/ueditor/&quot;, default=&apos;&apos;)</span><br></pre></td></tr></table></figure><h3 id="5、书写代码"><a href="#5、书写代码" class="headerlink" title="5、书写代码"></a>5、书写代码</h3><p>在xadmin的plugins文件夹下面，新增一个<strong>ueditor.py</strong>文件，在里面新增：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line">from xadmin.views import BaseAdminPlugin, CreateAdminView, ModelFormAdminView, UpdateAdminView</span><br><span class="line">from DjangoUeditor.models import UEditorField</span><br><span class="line">from DjangoUeditor.widgets import UEditorWidget</span><br><span class="line">from django.conf import settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class XadminUEditorWidget(UEditorWidget):</span><br><span class="line">    def __init__(self,**kwargs):</span><br><span class="line">        self.ueditor_options=kwargs</span><br><span class="line">        self.Media.js = None</span><br><span class="line">        super(XadminUEditorWidget,self).__init__(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UeditorPlugin(BaseAdminPlugin):</span><br><span class="line">    def get_field_style(self, attrs, db_field, style, **kwargs):</span><br><span class="line">        if style == &apos;ueditor&apos;:</span><br><span class="line">            if isinstance(db_field, UEditorField):</span><br><span class="line">                widget = db_field.formfield().widget</span><br><span class="line">                param = &#123;&#125;</span><br><span class="line">                param.update(widget.ueditor_settings)</span><br><span class="line">                param.update(widget.attrs)</span><br><span class="line">                return &#123;&apos;widget&apos;: XadminUEditorWidget(**param)&#125;</span><br><span class="line">        return attrs</span><br><span class="line"></span><br><span class="line">    # 在我们生成的页面中放入自己的js文件</span><br><span class="line">    def block_extrahead(self, context, nodes):</span><br><span class="line">        js = &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.config.js&quot;)         #自己的静态目录</span><br><span class="line">        js += &apos;&lt;script type=&quot;text/javascript&quot; src=&quot;%s&quot;&gt;&lt;/script&gt;&apos; % (settings.STATIC_URL + &quot;ueditor/ueditor.all.min.js&quot;)   #自己的静态目录</span><br><span class="line">        nodes.append(js)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> # 新增页面</span><br><span class="line"></span><br><span class="line">xadmin.site.register_plugin(UeditorPlugin, UpdateAdminView)</span><br><span class="line"># 修改页面</span><br><span class="line"></span><br><span class="line">xadmin.site.register_plugin(UeditorPlugin, CreateAdminView)</span><br></pre></td></tr></table></figure></p><h3 id="6、字段显示样式"><a href="#6、字段显示样式" class="headerlink" title="6、字段显示样式"></a>6、字段显示样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">courses/adminx.py文件：</span><br><span class="line"></span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    # 字段显示样式</span><br><span class="line">    style_fields = &#123;&quot;detail&quot;: &quot;ueditor&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="7、注册进入plugins"><a href="#7、注册进入plugins" class="headerlink" title="7、注册进入plugins"></a>7、注册进入plugins</h3><p>找到plugins文件夹下的<strong>init</strong>.py文件，在PLUGINS中写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PLUGINS= (&apos;ueditor&apos;,）</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-9f83eb8f6ee980af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行一下我们的项目，登录到xadmin后台查看一下，富文本出来:<img src="https://upload-images.jianshu.io/upload_images/8964398-34540482f02c3dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着在前端刷新一下页面，如果没有出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-e930ce38bb41ca76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>那可能是你的course-detail.html页面中设置的有问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-2429c372ce0499cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>弄好以后，页面还是现实元原始的html代码，这是不允许的，所以我们需要进一步配置：在course-detail.html页面中，关闭转义功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% autoescape off %&#125;</span><br><span class="line">&#123;&#123; course.detail &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure></p><p>现在重新刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-1e6adefb522ae068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，本篇关于xadmin进阶开发的介绍就到此为止了，感谢你的赏阅！</p><p>本篇笔记对应于第二十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十五）：常见的网络攻防</title>
      <link href="/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/"/>
      <url>/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍常见的网络攻击与防护，具体包括<strong>SQL注入攻击及防护</strong>，<strong>XSS攻击及防护</strong>以及<strong>CSRF攻击及防护</strong>，下面我们依次介绍一下。</p><h2 id="SQL注入攻击及防护"><a href="#SQL注入攻击及防护" class="headerlink" title="SQL注入攻击及防护"></a>SQL注入攻击及防护</h2><p>首先我们来了解一下什么是SQL注入？</p><hr><p>所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。具体来说，它是利用现有应用程序，将（恶意的）SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。比如先前的很多影视网站泄露VIP会员密码大多就是通过WEB表单递交查询字符暴出的，这类表单特别容易受到SQL注入式攻击。</p><hr><p>SQL注入的危害:<img src="https://upload-images.jianshu.io/upload_images/8964398-c92bdfe10eead09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下面我们通过一段代码了解一下SQL注入的过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># users/views.py文件：</span><br><span class="line">class LoginUnsafeView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        user_name = request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">        pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        import MySQLdb</span><br><span class="line">        conn = MySQLdb.connect(host=&apos;127.0.0.1&apos;, user=&apos;root&apos;, passwd=&apos;root&apos;, db=&apos;mxonline&apos;, charset=&apos;utf8&apos;)</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        sql_select = &quot;select * from users_userprofile where email=&apos;&#123;0&#125;&apos; and password=&apos;&#123;1&#125;&apos;&quot;.format(user_name, pass_word)</span><br><span class="line"></span><br><span class="line">        result = cursor.execute(sql_select)</span><br><span class="line">        for row in cursor.fetchall():</span><br><span class="line">            # 查询到用户</span><br><span class="line">            pass</span><br><span class="line">        print &apos;hello&apos;</span><br><span class="line"></span><br><span class="line"># eduline/urls.py文件:</span><br><span class="line">from users.views import LoginUnsafeView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;login/&apos;, LoginUnsafeView.as_view(), name=&apos;login&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这里竟然把sql语句写到这里，所以我们可以在参数中加入sql语句，使之拼接字符串从而为真被系统识别通过，盗取用户信息。但是在Django自带了orm,可以对这个进行验证，从而保证系统的安全。</p><p>因此建议大家都采用orm这种形式，不要使用原生的sql语句。</p><h2 id="XSS攻击及防护"><a href="#XSS攻击及防护" class="headerlink" title="XSS攻击及防护"></a>XSS攻击及防护</h2><p>首先我们来了解一下什么是XSS攻击？</p><hr><p>XSS跨站脚本攻击(Cross Site Scripting)，是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</p><hr><p>XSS攻击的危害：<img src="https://upload-images.jianshu.io/upload_images/8964398-894015e332ff45f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>攻击流程为：<img src="https://upload-images.jianshu.io/upload_images/8964398-81f36ada8c56a0ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>举个例子来说：<img src="https://upload-images.jianshu.io/upload_images/8964398-57e094ffd349369a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>当你输入iPhone6时，这个字符就会被显示到页面中：<img src="https://upload-images.jianshu.io/upload_images/8964398-0b9a77caa2802acf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>之后，黑客就会修改js代码:<img src="https://upload-images.jianshu.io/upload_images/8964398-1a311f7919d49e6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后就拿到了你的登录cookie就可以进入你的账户进行肆意掠夺你的money了。</p><p>这也就是为什么你觉得自己明明进入的是官方网站，怎么账号（经常就是QQ号）被盗了的缘故，所以不要随意点开陌生人发的链接。</p><p>XSS防护：<img src="https://upload-images.jianshu.io/upload_images/8964398-9eb097c927cdedea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="CSRF攻击及防护"><a href="#CSRF攻击及防护" class="headerlink" title="CSRF攻击及防护"></a>CSRF攻击及防护</h2><p>首先我们来了解一下什么是CSRF攻击？</p><hr><p>CSRF（Cross-site request forgery）跨站请求伪造，是通过伪装来自受信任用户的请求来利用受信任的网站。</p><hr><p>CSRF攻击的危害：<img src="https://upload-images.jianshu.io/upload_images/8964398-16f8fa9e56d4bcc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>攻击流程为：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a8a790c83270e4c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你看，这就是伪装：用户开始访问了A，之后访问了B，而B是要求用户访问A的。用户以为这是跳转到A的链接，以为很官方，殊不知就是这种官方泄露了自己的信息。<br>原因在于用户每次向A请求时，都会带上session id，这样就很容易出问题。</p><hr><p>CSRF防护：提交form表单必须添加crsf token，进行crsf token验证，而攻击网站是无法生成crsf token的。还有一点，但凡涉及到敏感信息的网站，你登录进去就要及时登出，这样可以避免很多问题的发生。</p><p>至此，本篇关于常见网络攻击与防护的介绍就到此为止了，感谢你的赏阅！</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十四）：全局页面配置</title>
      <link href="/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%85%A8%E5%B1%80%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/14/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E5%85%A8%E5%B1%80%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍全局页面的配置，具体包括首页登出实现，点击数加1，收藏数配置，小喇叭消息已读配置，首页的开发以及404和500页面的配置等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="首页登出实现"><a href="#首页登出实现" class="headerlink" title="首页登出实现"></a>首页登出实现</h2><p>现在我们来完善我们首页的系统登出功能，这个没有页码，你登出后只需要跳转到首页即可，所以我们只需要写一个view就能完成这个操作。</p><p>老规矩先配置path:打开eduline/urls.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import LogoutView</span><br><span class="line"></span><br><span class="line"># 登出url</span><br><span class="line">    path(&apos;logout/&apos;, LogoutView.as_view(), name=&quot;logout&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/view.py文件，在login的函数下面新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import reverse</span><br><span class="line">from django.contrib.auth import  logout</span><br><span class="line">from django.http import HttpResponseRedirect</span><br><span class="line"># 用于实现用户首页登出的函数</span><br><span class="line">class LogoutView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 采用Django自带的logout函数来完成我们登出的功能</span><br><span class="line">        logout(request)</span><br><span class="line">        # 不采用之前的render，而是采用重定向返回到首页</span><br><span class="line">        return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br></pre></td></tr></table></figure></p><p>接下来在base.html页面进行跳转链接的配置：<img src="https://upload-images.jianshu.io/upload_images/8964398-5bf36e7468e14c1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>别忘了还有其余2个base页面跳转的配置，很简单，这里就不介绍了。</p><h2 id="点击数加1"><a href="#点击数加1" class="headerlink" title="点击数加1"></a>点击数加1</h2><p><strong>1、</strong>为课程数加1：打开courses/view.py文件，找到CourseInfoView函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course.students += 1</span><br><span class="line">course.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-c412e17103908022.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>2、</strong>为讲师数加1：打开organization/view.py文件，找到TeacherDetailView函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">teacher.click_nums += 1</span><br><span class="line">teacher.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ae343a373282953d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>3、</strong>为机构数加1：打开organization/view.py文件，找到OrgHomeView函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course_org.click_nums += 1</span><br><span class="line">course_org.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-7a7af7f6a70f7583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="404和500页面的配置"><a href="#404和500页面的配置" class="headerlink" title="404和500页面的配置"></a>404和500页面的配置</h2><p>老规矩，从前端资料里面拷贝我们的404和500页面到templates文件夹并修改文件里面的静态文件地址。打开eduline/urls.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 全局404页面配置</span><br><span class="line">handler404 = &apos;users.views.page_not_found&apos;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-6e7a929f8dc33672.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 404页面对应的处理函数</span><br><span class="line">def page_not_found(request):</span><br><span class="line">    from django.shortcuts import render_to_response</span><br><span class="line">    response = render_to_response(&quot;404.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    # 设置response的状态码</span><br><span class="line">    response.status_code = 404</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure></p><p>接着运行我们的项目，随意输入一个地址，发现页面并没有出来，那是因为在eduline/settings.py文件里面：DEBUG = True，所以我们需要修改它为False，还有下面的允许访问IP地址，否则404页面也是出不来的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = False</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br></pre></td></tr></table></figure></p><p>这样重新运行一下我们的项目，发现页面有了，但是样子却没加载出来，这是为什么呢？</p><p>因为DEBUG为True时，系统会自动前往STATICFILES_DIRS下寻找文件的。所以我们开始一般都会选择True，便于错误信息的显示。</p><p>但是一旦DEBUG为False时，情况就不一样了，Django就不会代管你的静态文件了，而事实上一般静态文件都是通过第三方http服务器来代理转发。（如常见的服务器Nignx 和 Apache都会自动代理这些静态文件）</p><p>为了解决上述问题，我们这样做：打开eduline/settings.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</span><br></pre></td></tr></table></figure></p><p>同时将里面的STATICFILES_DIRS给注释掉(这一步很重要，否则系统还是去找这个文件，事实上是找不到的，所以还是图片加载不出来)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># STATICFILES_DIRS = [</span><br><span class="line">#     os.path.join(BASE_DIR, &quot;static&quot;),  # 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾</span><br><span class="line"># ]</span><br></pre></td></tr></table></figure></p><p>打开eduline/urls.py文件，新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from eduline.settings import  STATIC_ROOT</span><br><span class="line"></span><br><span class="line"> # 配置静态文件上传的访问处理url</span><br><span class="line">    re_path(&apos;static/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: STATIC_ROOT&#125;),</span><br></pre></td></tr></table></figure></p><p>现在重新运行我们的项目，看看404是不是出来了。</p><p>500的页面的配置和这个一模一样（注意函数名为page_error），这里就不再赘述了。</p><p>至此，本篇关于全局页面配置的介绍就到此为止了，感谢你的赏阅。</p><p>本篇笔记对应于第二十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十三）：个人信息相关页面配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍个人信息相关页面的配置，具体包括我的课程，我的收藏，我的消息等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="我的课程"><a href="#我的课程" class="headerlink" title="我的课程"></a>我的课程</h2><p>老规矩，让我们的usercenter_mycourse继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-319545ed446c02a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import  MyCourseView</span><br><span class="line"></span><br><span class="line">  # 用户个人中心我的课程url</span><br><span class="line">    path(&quot;mycourse/&quot;, MyCourseView.as_view(), name=&quot;mycourse&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 用户个人中心我的课程函数</span><br><span class="line">class MyCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;usercenter-mycourse.html&quot; ,&#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-base.html</strong>页面设置我们的跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-fea4ba32f0dac566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后运行我们的项目，就可以点击我的课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-1403db83732b6b0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来就是课程的动态填充了，自己先尝试一下在MyCourseView这个函数里面写一下业务逻辑代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 用户个人中心我的课程函数</span><br><span class="line">class MyCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user)</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;usercenter-mycourse.html&quot;, &#123;</span><br><span class="line">            &quot;user_courses&quot;: user_courses,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>usercenter-mycourse.html</strong>页面,配置动态加载：<img src="https://upload-images.jianshu.io/upload_images/8964398-690999f130e7741b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着刷新我们的页面，就可以看到我的课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-8ed9625ffed880d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="我的收藏"><a href="#我的收藏" class="headerlink" title="我的收藏"></a>我的收藏</h2><h3 id="收藏授课机构"><a href="#收藏授课机构" class="headerlink" title="收藏授课机构"></a>收藏授课机构</h3><p>这里面有3个页面，我们一个个的来弄，先弄usercenter_fav_org页面。老规矩，让我们的usercenter_fav_org继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-7ac2c83c300b9bed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyFavOrgView</span><br><span class="line"></span><br><span class="line"> # 我收藏的课程机构url</span><br><span class="line">    path(&quot;myfav/org/&quot;, MyFavOrgView.as_view(), name=&quot;myfav_org&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from operation.models import UserFavorite</span><br><span class="line">from organization.models import CourseOrg</span><br><span class="line"></span><br><span class="line"># 我收藏的课程机构函数</span><br><span class="line">class MyFavOrgView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        org_list = []</span><br><span class="line">        fav_orgs = UserFavorite.objects.filter(user=request.user, fav_type=2)</span><br><span class="line">        for fav_org in fav_orgs:</span><br><span class="line">            org_id = fav_org.fav_id</span><br><span class="line">            org = CourseOrg.objects.get(id=org_id)</span><br><span class="line">            org_list.append(org)</span><br><span class="line">        return render(request, &quot;usercenter-fav-org.html&quot;, &#123;</span><br><span class="line">            &quot;org_list&quot;: org_list,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-base.html</strong>页面设置我们的跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-f491da32873f0fd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行我们的项目，就可以点击我的课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-8bc723c7812e746c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后打开<strong>usercenter-fav_org.html</strong>页面,配置动态加载：<img src="https://upload-images.jianshu.io/upload_images/8964398-c0077878adcca225.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着刷新我们的页面，就可以看到我收藏的课程机构了：<img src="https://upload-images.jianshu.io/upload_images/8964398-57d6b623c40770e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="收藏课程机构"><a href="#收藏课程机构" class="headerlink" title="收藏课程机构"></a>收藏课程机构</h3><h3 id="收藏授课讲师"><a href="#收藏授课讲师" class="headerlink" title="收藏授课讲师"></a>收藏授课讲师</h3><p>我们现在来弄usercenter_fav_teacher页面。老规矩，让我们的usercenter_fav_teacher继承我们的usercenter_base.html页面：</p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyFavTeacherView</span><br><span class="line"></span><br><span class="line"> # 我收藏的授课讲师url</span><br><span class="line">    path(&quot;myfav/teacher/&quot;, MyFavTeacherView.as_view(), name=&quot;myfav_teacher&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from organization.models import Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 我收藏的授课讲师函数</span><br><span class="line">class MyFavTeacherView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        teacher_list = []</span><br><span class="line">        fav_teachers = UserFavorite.objects.filter(user=request.user, fav_type=3)</span><br><span class="line">        for fav_teacher in fav_teachers:</span><br><span class="line">            teacher_id = fav_teacher.fav_id</span><br><span class="line">            teacher = Teacher.objects.get(id=teacher_id)</span><br><span class="line">            teacher_list.append(teacher)</span><br><span class="line">        return render(request, &quot;usercenter-fav-teacher.html&quot;, &#123;</span><br><span class="line">            &quot;teacher_list&quot;: teacher_list,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-fav_teacher.html</strong>页面设置我们的跳转链接和配置动态加载：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-e79821fb038474dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-fd0520030670b0d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开oganization/models.py文件，在Teacher函数新增用于获取课程数的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get_course_nums(self):</span><br><span class="line">       return self.course_set.all().count()</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-d3fc266ea3d5247d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还有记得去<strong>usercenter-fav_org.html</strong>页面设置我们的跳转链接，否则就跳不到机构讲师页面了：<img src="https://upload-images.jianshu.io/upload_images/8964398-5067fc86c1dbd38e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行我们的项目，就可以看到我收藏的授课讲师了：<img src="https://upload-images.jianshu.io/upload_images/8964398-903f59c9b2b1e1ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="收藏公开课程"><a href="#收藏公开课程" class="headerlink" title="收藏公开课程"></a>收藏公开课程</h3><p>我们现在来弄usercenter_fav_course页面。老规矩，让我们的usercenter_fav_course继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-5b4e12c94254a513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyFavCourseView</span><br><span class="line"></span><br><span class="line"> # 我收藏的公开课程url</span><br><span class="line">    path(&quot;myfav/course/&quot;, MyFavCourseView.as_view(), name=&quot;myfav_course&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from courses.models import Course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 我收藏的公开课程函数</span><br><span class="line">class MyFavCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        course_list = []</span><br><span class="line">        fav_courses = UserFavorite.objects.filter(user=request.user, fav_type=1)</span><br><span class="line">        for fav_course in fav_courses:</span><br><span class="line">            course_id = fav_course.fav_id</span><br><span class="line">            course = Course.objects.get(id=course_id)</span><br><span class="line">            course_list.append(course)</span><br><span class="line">        return render(request, &quot;usercenter-fav-course.html&quot;, &#123;</span><br><span class="line">            &quot;course_list&quot;: course_list,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后去<strong>usercenter-fav_course.html</strong>页面设置我们的跳转链接和配置动态加载：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-8b6bdac4aa269267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意：双箭头指示的url跳转需要在fav_xx.html这3个页面进行修改从而可以3个页面切换自如。</strong></p><p>然后运行我们的项目，就可以看到我收藏的公开课程了：<img src="https://upload-images.jianshu.io/upload_images/8964398-d9d51e4dbc703943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不过右边的取消收藏，也就是删除还没实现：<img src="https://upload-images.jianshu.io/upload_images/8964398-348fb86dc24fff7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们需要在3个fav_xx.html页面修改传递的id即可：<img src="https://upload-images.jianshu.io/upload_images/8964398-264a1b8e489390c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-00d90cdac7286015.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-8450c8f41248d69b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后打开我们的<strong>usercenter_base.html</strong>页面，找到这3段代码，这就是实现删除的js代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-57f3013db82f4a52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意一下，这段代码里面需要放csrf_token,否则会出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(&apos;.jsDeleteFav_course&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">        var _this = $(this),</span><br><span class="line">            favid = _this.attr(&apos;data-favid&apos;);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">                cache: false,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url: &quot;/org/add_fav/&quot;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    fav_type: 1,</span><br><span class="line">                    fav_id: favid,</span><br><span class="line">                    csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos;</span><br><span class="line">                &#125;,</span><br><span class="line">                async: true,</span><br><span class="line">                success: function(data) &#123;</span><br><span class="line">                    Dml.fun.winReload();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(&apos;.jsDeleteFav_teacher&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">            var _this = $(this),</span><br><span class="line">                favid = _this.attr(&apos;data-favid&apos;);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                    cache: false,</span><br><span class="line">                    type: &quot;POST&quot;,</span><br><span class="line">                    url: &quot;/org/add_fav/&quot;,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        fav_type: 3,</span><br><span class="line">                        fav_id: favid,</span><br><span class="line">                        csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    async: true,</span><br><span class="line">                    success: function(data) &#123;</span><br><span class="line">                        Dml.fun.winReload();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $(&apos;.jsDeleteFav_org&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">            var _this = $(this),</span><br><span class="line">                favid = _this.attr(&apos;data-favid&apos;);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                    cache: false,</span><br><span class="line">                    type: &quot;POST&quot;,</span><br><span class="line">                    url: &quot;/org/add_fav/&quot;,</span><br><span class="line">                    data: &#123;</span><br><span class="line">                        fav_type: 2,</span><br><span class="line">                        fav_id: favid,</span><br><span class="line">                        csrfmiddlewaretoken: &apos;&#123;&#123; csrf_token &#125;&#125;&apos;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    async: true,</span><br><span class="line">                    success: function(data) &#123;</span><br><span class="line">                        Dml.fun.winReload();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>至此，我的收藏3个相关页面就实现了，下面我们来配置我的消息页面。</p><h2 id="我的消息"><a href="#我的消息" class="headerlink" title="我的消息"></a>我的消息</h2><p>老规矩，让我们的usercenter_message.html继承我们的usercenter_base.html页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-c1a8ea6926df13d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后就是先配置path，打开users/urls.py文件，新增以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import MyMessageView</span><br><span class="line"></span><br><span class="line"> # 我的消息url</span><br><span class="line">    path(&quot;mymessage/&quot;, MyMessageView.as_view(), name=&quot;mymessage&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开users/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line">from operation.models import UserMessage</span><br><span class="line"></span><br><span class="line"># 我的消息函数</span><br><span class="line">class MyMessageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;next&apos;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 取出所有的信息</span><br><span class="line">        all_messages = UserMessage.objects.filter(user=request.user.id)</span><br><span class="line">        # 对消息进行分页,尝试获取前端get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数则默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从all_courses中取出来，每页显示9个</span><br><span class="line">        p = Paginator(all_messages, 9, request=request)</span><br><span class="line"></span><br><span class="line">        messages = p.page(page)</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;usercenter-message.html&quot;, &#123;</span><br><span class="line">            &quot;messages&quot;: messages,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开usercenter_base.html页面，我们修改页面跳转链接：<img src="https://upload-images.jianshu.io/upload_images/8964398-03108323f89b120e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开usercenter_message.html页面，我们修改页面信息如下：<img src="https://upload-images.jianshu.io/upload_images/8964398-cedb4561ed5b90e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ebe8b2eb3ea23ce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开users/views.py文件，找到我们之前的注册函数，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 写入欢迎注册的信息</span><br><span class="line">            user_message = UserMessage()</span><br><span class="line">            user_message.user = user_profile.id</span><br><span class="line">            user_message.message = &quot;欢迎注册慕海学习网！&quot;</span><br><span class="line">            user_message.save()</span><br></pre></td></tr></table></figure></p><p>也就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-036e494c114106aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来打开xadmin后台，我们对应id给其加几条信息，然后刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-e0e03faa89ef718e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>不知道你是否注意到我们页面顶部的小喇叭，这就是未读消息的提示，所以我们需要统计一下未读消息的数量。打开users/model.py文件，在UserProfile函数里面新增用于获取用户的未读消息的数量的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_unread_nums(self):</span><br><span class="line">       # 获取用户的未读消息的数量</span><br><span class="line">       from operation.models import UserMessage</span><br><span class="line">       return UserMessage.objects.filter(user=self.id).count()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-364da62a888407b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开base.html页面，找到并修改信息为图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-9f51412562fe059a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>突然刷新一下我们的页面，回到首页，看到有2条信息未读：<img src="https://upload-images.jianshu.io/upload_images/8964398-fce57b8a1501c063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后点击进入个人中心，发现消息没有了，又回到首页，发现有出现了。这是因为我们的消息页面还没配置完，我们需要全部页面配置。</p><p>Ctrl+shift+F调出全局搜索，在里面选择.html文件，然后搜索<strong>MsgNum</strong>，全部修改成那个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-b192344ec510a149.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，本篇关于个人信息相关页面的配置介绍就到此结束，感谢你的赏阅。</p><p>本篇笔记对应于第二十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十二）：个人资料及搜索配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8F%8A%E6%90%9C%E7%B4%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E8%B5%84%E6%96%99%E5%8F%8A%E6%90%9C%E7%B4%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍用户个人资料页面的配置，具体包括全局导航栏配置，全局搜索功能开发，个人中心资料展示，修改密码和头像以及页面表单提交等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="全局导航栏配置"><a href="#全局导航栏配置" class="headerlink" title="全局导航栏配置"></a>全局导航栏配置</h2><p>首先修改<strong>index.html</strong>页面，让它也继承我们的<strong>base.html</strong>页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d879ab42bacbb20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开<strong>base.html</strong>.html页面，我们做一下页面的链接跳转：<img src="https://upload-images.jianshu.io/upload_images/8964398-bf7fbb1257fc3a1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">&lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li &gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li &gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;</span><br><span class="line">公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li &gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;active&quot; &gt;&lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>这样跳转链接算是弄好了，但是我们暂时还不知道根据什么来判断当前页面已经被选中，所以我们需要仿照之前在课程机构里面的那样，增加一个current_nav用于指明当前页面的代号然后就可以根据某值是否相等来判断页面是否选中的状态了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># organizaton/views.py里面</span><br><span class="line">class TeacherListView(View):</span><br><span class="line"></span><br><span class="line">current_nav = &quot;teacher&quot;</span><br><span class="line"></span><br><span class="line"> return render(request, &quot;teachers-list.html&quot;, &#123;</span><br><span class="line">            &quot;current_nav&quot;: current_nav,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"># base.html页面里面</span><br><span class="line">&lt;li &#123;% if current_nav == &apos;teacher&apos; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>上述方法的确可以使用，但是有一个问题，就是为了满足前端页面的显示，你在后端每个涉及到的view里面都必须有current view，这是不是太麻烦了？这只是一级导航栏少而且没有二三级导航栏的情况下才可以，多了完全是不可以的。你看一下淘宝的页面导航栏：<img src="https://upload-images.jianshu.io/upload_images/8964398-c856c8e370990f12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那么问题来了，又什么好方法可以解决这个问题吗？答案是有的！</p><p>我们可以根据request.path中的前几位来判断当前处于何种页面，从而选中何种状态。你可能会糊涂，别急我举个例子给你说明一下：<br><code>http://127.0.0.1:8000/</code> 你肯定知道访问的是根目录；  <code>http://127.0.0.1:8000/course/detail/2</code>你肯定也知道访问的是课程相关的页面；<br><code>http://127.0.0.1:8000/org/teacher/detail</code>你肯定也知道访问的是讲师相关的页面；<br>鉴于此，我们就是采用这种方式来判断选中状态的。打开<strong>base.html</strong>.html页面，修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li &#123;% if request.path == &quot;/&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">                                &lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">&lt;li &#123;% if request.path|slice:&quot;7&quot; == &quot;/course&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;</span><br><span class="line">公开课&lt;img class=&quot;hot&quot; src=&quot;&#123;% static &apos;images/nav_hot.png&apos; %&#125;&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li &#123;% if request.path|slice:&quot;12&quot; == &quot;/org/teacher&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125;&gt;</span><br><span class="line">&lt;a href=&quot;&#123;% url &apos;org:teacher_list&apos; %&#125;&quot;&gt;授课教师&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li &#123;% if request.path|slice:&quot;9&quot; == &quot;/org/list&quot; %&#125;class=&quot;active&quot;&#123;% endif %&#125; &gt;</span><br><span class="line">                                &lt;a href=&quot;&#123;% url &apos;org:org_list&apos; %&#125;&quot;&gt;授课机构&lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>其中request.path是指访问的全路径地址，if request.path|slice:”12” == “/org/teacher”是指除了域名以外(此处域名为127.0.0.1)，从1-12位的地址等于/org/teacher即访问地址为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/org/teacher</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-868248e983868a27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行一下我们的项目，发现是随着我们点哪个，哪个页面就是被选中状态。</p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="页面表单提交"><a href="#页面表单提交" class="headerlink" title="页面表单提交"></a>页面表单提交</h2><p>打开users/forms.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 用户信息修改表单提交</span><br><span class="line">class UserInfoForm(forms.ModelForm):</span><br><span class="line">    # 除了继承现有的字段还可以新增字段</span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserProfile</span><br><span class="line">        # 自定义需要验证的字段，注意与数据库中字段应保持一致</span><br><span class="line">        fields = [&quot;nick_name&quot;, &quot;birday&quot;, &quot;gender&quot;, &quot;address&quot;, &quot;mobile&quot;]</span><br></pre></td></tr></table></figure></p><p>然后打开我们的users/views.py文件，找到我们之前定义的userinfoview这个函数，我们新增它的post方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from .forms import UserInfoForm</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line"> def post(self, request):</span><br><span class="line">        user_info_form = UserInfoForm(request.POST, instance=request.user)</span><br><span class="line">        if user_info_form.is_valid():</span><br><span class="line">            user_info_form.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(json.dumps(user_info_form.errors), content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure></p><p>然后尝试提交一下你刚才修改过的表单，发现提交没有问题。</p><p>至此，本篇关于用户个人资料页面及搜索框的配置就到此为止，感谢你的赏阅。</p><p>本篇笔记对应于第二十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a>。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十一）：讲师相关页面配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%B2%E5%B8%88%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E8%AE%B2%E5%B8%88%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍讲师相关页面的配置，具体包括讲师列表页，讲师详情页等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十一篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h2 id="讲师详情页配置"><a href="#讲师详情页配置" class="headerlink" title="讲师详情页配置"></a>讲师详情页配置</h2><p>打开<strong>teacher-detail.html</strong>页面，修改<strong>teacher_detail.html</strong>页面，保留部分信息，其余删除，<code>   <section></section></code>里面  <section>是原来<strong>teacher_detail.html</strong>保留下来的一部分：<img src="https://upload-images.jianshu.io/upload_images/8964398-3c16b2f2f691d505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></section></p><p>接着打开organization/urls.py文件，新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 讲师详情页url</span><br><span class="line">    re_path(&apos;teacher/detail/(?P&lt;teacher_id&gt;\d+)/&apos;, TeacherDetailView.as_view(), name=&quot;teacher_detail&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开organization/views.py文件，新增代码（这里面的代码用途前面已经说过，这里不再细说）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 讲师详情页</span><br><span class="line">class TeacherDetailView(View):</span><br><span class="line">    def get(self, request, teacher_id):</span><br><span class="line">        # 取出当前id的讲师信息</span><br><span class="line">        teacher = Teacher.objects.get(id=int(teacher_id))</span><br><span class="line">        # 前面的teacher是数据库里面的字段，后一个则是上面取到的teacher</span><br><span class="line">        all_courses = Course.objects.filter(teacher=teacher)</span><br><span class="line"></span><br><span class="line">        has_fav_teacher = False</span><br><span class="line">        if UserFavorite.objects.filter(user=request.user, fav_type=3, fav_id=teacher.id):</span><br><span class="line">            has_fav_teacher = True</span><br><span class="line">        has_fav_org = False</span><br><span class="line">        if UserFavorite.objects.filter(user=request.user, fav_type=2, fav_id=teacher.org.id):</span><br><span class="line">            has_fav_org = True</span><br><span class="line"></span><br><span class="line">        # 讲师排行榜</span><br><span class="line">        sorted_teacher = Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;teacher-detail.html&quot;, &#123;</span><br><span class="line">            &quot;teacher&quot;: teacher,</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">            &quot;sorted_teacher&quot;: sorted_teacher,</span><br><span class="line">            &quot;has_fav_teacher&quot;: has_fav_teacher,</span><br><span class="line">            &quot;has_fav_org&quot;: has_fav_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开我们的<strong>teacher-detail.html</strong>页面，进行数据的动态加载以及页面的跳转，这里就不附上代码的，大家自己去和我github上的页面源代码进行对比（先尝试自己修改，之后可以看一下）。</p><p>还有页面中左右两侧的收藏功能，这里我直接附上js代码(不懂位置的可以去查看github上的页面源代码)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_js %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//收藏分享</span><br><span class="line">function add_fav(current_elem, fav_id, fav_type)&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        cache: false,</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        url:&quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;,</span><br><span class="line">        data:&#123;&apos;fav_id&apos;:fav_id, &apos;fav_type&apos;:fav_type&#125;,</span><br><span class="line">        async: true,</span><br><span class="line">        beforeSend:function(xhr, settings)&#123;</span><br><span class="line">            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">            if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                    window.location.href=&quot;/login/?next=&#123;&#123; request.path &#125;&#125;&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(data.msg)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                current_elem.text(data.msg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; teacher.id &#125;&#125;, 3);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; teacher.org.id &#125;&#125;, 2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    window._bd_share_config = &#123;</span><br><span class="line">        &quot;common&quot;:&#123;&quot;bdSnsKey&quot;:&#123;&#125;,&quot;bdText&quot;:&quot;&quot;,&quot;bdMini&quot;:&quot;1&quot;,&quot;bdMiniList&quot;:[&quot;mshare&quot;,&quot;qzone&quot;,&quot;tsina&quot;,&quot;weixin&quot;,&quot;sqq&quot;],&quot;bdPic&quot;:&quot;&quot;,&quot;bdStyle&quot;:&quot;0&quot;,&quot;bdSize&quot;:&quot;16&quot;&#125;,</span><br><span class="line">        share : [</span><br><span class="line">                   &#123;</span><br><span class="line">&quot;info&quot; : &quot;share_&#123;&#123; teacher.id &#125;&#125;&quot;,</span><br><span class="line">&quot;bdSize&quot; : 16,</span><br><span class="line">                       &quot;bdText&quot;:&quot;授课教师-&#123;&#123; teacher.name &#125;&#125;-慕海学习网&quot;,</span><br><span class="line">                       &quot;bdDesc&quot;: &quot;我在#慕海学习网#发现了老师“&#123;&#123; teacher.name &#125;&#125;”，对我们学习很有帮助，一起来看看吧&quot;,</span><br><span class="line">                        &quot;bdUrl&quot;: &apos;http://eduline.licheetools.top&#123;% url &apos;org:teacher_detail&apos; teacher.id %&#125;&apos;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">//以下为js加载部分</span><br><span class="line">with(document)0[(getElementsByTagName(&apos;head&apos;)[0]||body).appendChild(createElement(&apos;script&apos;)).src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?cdnversion=&apos;+~(-new Date()/36e5)];</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>顺便大家可以把之前<strong>teacher_list.html</strong>中的页面跳转弄一下（可以配置的尽量先配置）。</p><p>至此，我们本篇关于讲师详情页面的介绍就到此为止，感谢你的赏阅。</p><p>本篇笔记对应于第二十一篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二十）：课程相关页面配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E7%9B%B8%E5%85%B3%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍课程相关页面的配置，具体包括课程章节信息，章节视频信息，课程评论页面，相关课程推荐，课程播放页面等功能，下面我们依次介绍一下。</p><p>本篇笔记对应于第二十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="课程章节信息配置"><a href="#课程章节信息配置" class="headerlink" title="课程章节信息配置"></a>课程章节信息配置</h2><p>老规矩，把前端资料里面的<strong>course-video.html</strong>和<strong>course-comment.html</strong>页面拷贝到我们的templates文件夹里面，接着修改<strong>course-video.html</strong>页面，保留部分信息，其余删除，<code>   <div id="main"></div></code>里面  <div id="main">是原来<strong>course-video.html</strong>保留下来的一部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;公开课视频信息 - 慕海学习网&#123;% endblock %&#125;</span><br><span class="line">&#123;% block custom_bread %&#125;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">        &lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">            &lt;ul  class=&quot;crumbs&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; course.id %&#125;&quot;&gt;课程详情&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;章节信息&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block custom_css %&#125;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/base.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/common-less.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/learn-less.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/aui.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/mooc.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;% static &apos;css/muke/course/common-less.css&apos; %&#125;&quot;/&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125; </span><br><span class="line">  &lt;div id=&quot;main&quot;&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></div></p><p>就是这个样子（这里面的静态文件路径和url的跳转我都做好了，你按照图示进行修改即可）：<img src="https://upload-images.jianshu.io/upload_images/8964398-b3bbdc7483045d07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开course/urls.py文件，新增以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import CourseInfoView</span><br><span class="line"></span><br><span class="line"># 课程章节信息页url</span><br><span class="line">    re_path(&apos;info/(?P&lt;course_id&gt;.*)/&apos;, CourseInfoView.as_view(), name=&quot;course_info&quot;),</span><br></pre></td></tr></table></figure></p><p>接着打开course/views.py文件，新增以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息</span><br><span class="line">class CourseInfoView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>现在打开<strong>course-detail.html</strong>页面，ctrl+F搜索“开始学习”，配置跳转路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;buy btn&quot;&gt;&lt;a style=&quot;color: white&quot; href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;开始学习&lt;/a&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ad64e748fdee38c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后运行项目，点击课程详情页面的开始学习就进入到课程章节信息页面了：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-4cf94752664cffe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在在后台为指定某一门课添加课程章节信息，便于我们后面的测试：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-637118139c1ad452.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="章节视频信息配置"><a href="#章节视频信息配置" class="headerlink" title="章节视频信息配置"></a>章节视频信息配置</h2><p>接下来获取课程的章节：打开courses/models.py文件，在Course函数里面，新定义函数def get_course_lesson用于获取课程的章节：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_course_lesson(self):</span><br><span class="line">    # 获取课程所有章节</span><br><span class="line">    return self.lesson_set.all()</span><br></pre></td></tr></table></figure></p><p>在lesson函数里面，新定义函数def get_lesson_video用于获取章节的视频信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_lesson_video(self):</span><br><span class="line">    # 获取章节视频信息</span><br><span class="line">    return self.video_set.all()</span><br></pre></td></tr></table></figure></p><p>现在打开<strong>course-video.html</strong>页面，配置数据的动态显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for lesson in course.get_course_lesson %&#125;</span><br><span class="line">                        &lt;div class=&quot;chapter chapter-active&quot; &gt;</span><br><span class="line">                        &lt;h3&gt;</span><br><span class="line">                            &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt;</span><br><span class="line">                        &lt;/h3&gt;</span><br><span class="line">                        &lt;ul class=&quot;video&quot;&gt;</span><br><span class="line">                           &#123;% for video in lesson.get_lesson_video %&#125;</span><br><span class="line">                               &lt;li&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;)</span><br><span class="line">                                    &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                           &#123;% endfor %&#125;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-9903f3e0721c6d48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>前面说过，你可以选择不定义函数，自己调用它的queryset方法，那么只需修改<strong>course-video.html</strong>页面，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for lesson in course.lesson_set.get_queryset%&#125;</span><br><span class="line">                        &lt;div class=&quot;chapter chapter-active&quot; &gt;</span><br><span class="line">                        &lt;h3&gt;</span><br><span class="line">                            &lt;strong&gt;&lt;i class=&quot;state-expand&quot;&gt;&lt;/i&gt;&#123;&#123; lesson.name &#125;&#125;&lt;/strong&gt;</span><br><span class="line">                        &lt;/h3&gt;</span><br><span class="line">                        &lt;ul class=&quot;video&quot;&gt;</span><br><span class="line">                           &#123;% for video in lesson.video_set.get_queryset %&#125;</span><br><span class="line">                               &lt;li&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&apos;/video/3662&apos; class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;)</span><br><span class="line">                                    &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                           &#123;% endfor %&#125;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-b2ca42a985cc7581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="资源下载功能"><a href="#资源下载功能" class="headerlink" title="资源下载功能"></a>资源下载功能</h3><p>第一步，前往xadmin后台为某一门课添加课程资源，第二步打开courses/views.py文件，修改视图函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from .models import  CourseResource</span><br><span class="line"></span><br><span class="line">all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-828abb0a7594fc23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在打开<strong>course-video.html</strong>页面，配置资源下载的动态显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for resources in all_resources %&#125;</span><br><span class="line">                               &lt;li&gt;</span><br><span class="line">                                &lt;span &gt;&lt;i class=&quot;aui-iconfont aui-icon-file&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&#123;&#123; resources.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                &lt;a href=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; resources.download &#125;&#125;&quot; class=&quot;downcode&quot; target=&quot;_blank&quot; download=&quot;&quot; data-id=&quot;274&quot; title=&quot;&quot;&gt;下载&lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                           &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-dc8cd235382f971f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新页面，发现显示没有问题。<br>接下在<strong>course-video.html</strong>页面完成课程信息的修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;static-item &quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.get_degree_display &#125;&#125;&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;meta&quot;&gt;难度&lt;/span&gt;</span><br><span class="line">                    &lt;em&gt;&lt;/em&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;static-item static-time&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.learn_times &#125;&#125;分钟&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;meta&quot;&gt;时长&lt;/span&gt;</span><br><span class="line">                    &lt;em&gt;&lt;/em&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;static-item&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;meta-value&quot;&gt;&lt;strong&gt;&#123;&#123; course.students &#125;&#125;人&lt;/strong&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;meta&quot;&gt;学习人数&lt;/span&gt;</span><br><span class="line">                    &lt;em&gt;&lt;/em&gt;</span><br><span class="line">                &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>在配置讲师提示的时候，发现讲师和课程之间没有建立外键连接，所以在courses/models.py文件的Course函数，新增讲师字段 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from organization.models import Teacher</span><br><span class="line"></span><br><span class="line">teacher = models.ForeignKey(Teacher, on_delete=models.CASCADE, verbose_name=&quot;讲师&quot;, null=True, blank=True)</span><br></pre></td></tr></table></figure></p><p><strong>记得数据库的变动需要两部曲：makemigrations和migrate</strong>。</p><p>然后前往xadmin后台为这门课添加一个讲师。</p><p>然后修改<strong>course-video.html</strong>页面,修改信息成图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-77d8a08af9fe0a35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新页面，发现显示没有问题。</p><h2 id="课程评论页面配置"><a href="#课程评论页面配置" class="headerlink" title="课程评论页面配置"></a>课程评论页面配置</h2><p>打开courses/urls.py文件，配置课程评论页面的url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import CourseCommentView</span><br><span class="line"></span><br><span class="line"> # 课程评论页面url</span><br><span class="line">    re_path(&apos;comment/(?P&lt;course_id&gt;.*)/&apos;, CourseCommentView.as_view(), name=&quot;course_comment&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开courses/views.py文件，新定义课程评论页面函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from operation.models import CourseComments</span><br><span class="line"></span><br><span class="line"># 课程评论页面</span><br><span class="line">class CourseCommentView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        all_comments = CourseComments.objects.all()</span><br><span class="line">        return render(request, &quot;course-comment.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;all_comments&quot;: all_comments,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开<strong>course-comment.html</strong>页面,修改跳转代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a class=&quot;ui-tabs-active active&quot; id=&quot;learnOn&quot;  href=&quot;&#123;% url &apos;courses:course_info&apos; course.id %&#125;&quot;&gt;&lt;span&gt;章节&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a id=&quot;commentOn&quot; class=&quot;&quot; href=&quot;&#123;% url &apos;course:course_comment&apos; course.id %&#125;&quot;&gt;&lt;span&gt;评论&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>course-comment.html</strong>页面，修改课程信息，资料下载，讲师提示等（和前面在video页面配置的一模一样，这里不再介绍）：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1682fe0d4362ab4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ed0e8d429601f13c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-40151fefe9eba970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来打开courses/views.py文件，新定义用于用户增加课程评论的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 用户增加课程评论</span><br><span class="line">class AddCommentView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        if not request.user.is_authenticated:</span><br><span class="line">            # 未登录时页面提示未登录，并跳转到登录页面</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        course_id = request.POST.get(&quot;course_id&quot;, 0)</span><br><span class="line">        comments = request.POST.get(&quot;comments&quot;, &apos;&apos;)</span><br><span class="line">        if course_id &gt;0 and comments:</span><br><span class="line">            course_comments = CourseComments()</span><br><span class="line">            # get方法只能取出一条数据，如果有多条则抛出异常而且没有数据也抛异常</span><br><span class="line">            # filter方法可以取一个列表出来（可以遍历的queryset），没有数据返回空的queryset，是不会抛异常的</span><br><span class="line">            course = Course.objects.get(id=int(course_id))</span><br><span class="line">            course_comments.course = course</span><br><span class="line">            course_comments.comment = comments   # 前面comment为数据库中定义字段，要保持一致，否则数据存入不数据库</span><br><span class="line">            course_comments.user = request.user</span><br><span class="line">            course_comments.save()</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;评论成功&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&apos;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;评论失败&quot;&#125;&apos;, content_type=&apos;application/json&apos;)</span><br></pre></td></tr></table></figure></p><p>现在回到courses/urls.py文件，我们来配置访问的url:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import  AddCommentView</span><br><span class="line"></span><br><span class="line">    # 用户增加课程评论页面url,注意此处为普通的url因为在post中，我们已经有了参数</span><br><span class="line">    path(&apos;add_comment/&apos;, AddCommentView.as_view(), name=&quot;add_comment&quot;),</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>course-comment.html</strong>页面，在页面底部增加js代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_js %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    //添加评论</span><br><span class="line">    $(&apos;#js-pl-submit&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">        var comments = $(&quot;#js-pl-textarea&quot;).val()</span><br><span class="line">        if(comments == &quot;&quot;)&#123;</span><br><span class="line">            alert(&quot;评论不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            cache: false,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            url:&quot;&#123;% url &apos;course:add_comment&apos; %&#125;&quot;,</span><br><span class="line">            data:&#123;&apos;course_id&apos;:&#123;&#123; course.id &#125;&#125;, &apos;comments&apos;:comments&#125;,</span><br><span class="line">            async: true,</span><br><span class="line">            beforeSend:function(xhr, settings)&#123;</span><br><span class="line">                xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">                if(data.status == &apos;fail&apos;)&#123;</span><br><span class="line">                    if(data.msg == &apos;用户未登录&apos;)&#123;</span><br><span class="line">                        window.location.href=&quot;&#123;% url &apos;login&apos; %&#125;&quot;;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;else if(data.status == &apos;success&apos;)&#123;</span><br><span class="line">                    window.location.reload();//刷新当前页面.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>继续在该页面修改如下代码，使页面评论可以动态加载出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for user_comments in all_comments %&#125;</span><br><span class="line">                                  &lt;li class=&quot;post-row&quot;&gt;</span><br><span class="line">                                &lt;div class=&quot;media&quot;&gt;</span><br><span class="line">                                    &lt;span target=&quot;_blank&quot;&gt;&lt;img src=&apos;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; user_comments.user.image &#125;&#125;&apos; width=&apos;40&apos; height=&apos;40&apos; /&gt;&lt;/span&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                                &lt;div class=&quot;bd&quot;&gt;</span><br><span class="line">                                    &lt;div class=&quot;tit&quot;&gt;</span><br><span class="line">                                        &lt;span target=&quot;_blank&quot;&gt;&#123;&#123; user_comments.user.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;p class=&quot;cnt&quot;&gt;&#123;&#123; user_comments.user.comment &#125;&#125;&lt;/p&gt;</span><br><span class="line">                                    &lt;div class=&quot;footer clearfix&quot;&gt;</span><br><span class="line">                                        &lt;span title=&quot;创建时间&quot; class=&quot;l timeago&quot;&gt;&#123;&#123; user_comments.add_time &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                             &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后你可以在图示位置打上断点，开启debug模式：<img src="https://upload-images.jianshu.io/upload_images/8964398-6b4c20d53f176ce4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f20cba60de8ea866.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>发现没有问题，我们可以去掉断点，自己再增加一条，页面是不是已经自动更新了你的评论内容。</p><h2 id="相关课程推荐配置"><a href="#相关课程推荐配置" class="headerlink" title="相关课程推荐配置"></a>相关课程推荐配置</h2><p>打开courses/views.py文件，找到CourseInfoView这个函数，修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息</span><br><span class="line">class CourseInfoView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line"></span><br><span class="line">        # 取出所有选过这门课的学生</span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        # 取出所有选过这门课的学生的id,采用递归表达式形式</span><br><span class="line">        user_ids = [user_course.user.id for user_course in user_courses]</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程</span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式</span><br><span class="line">        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]</span><br><span class="line">        # 取出学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5]</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p><strong>注意：双下划线代表代表传进来的是一个可以遍历的list。</strong><br>接着就是在前端页面配置动态加载信息了（记得course-video.html和course_comment.html这两个页面都需要配置，一模一样）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;other-list&quot;&gt;</span><br><span class="line">                                   &#123;% for relate_course in relate_courses %&#125;</span><br><span class="line">                                       &lt;li class=&quot;curr&quot;&gt;</span><br><span class="line">                                           &lt;a href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                                               &lt;img src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot;</span><br><span class="line">                                                    alt=&quot;&#123;&#123; relate_course.name &#125;&#125;&quot;&gt;</span><br><span class="line">                                               &lt;span class=&quot;name autowrap&quot;&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                                           &lt;/a&gt;</span><br><span class="line">                                       &lt;/li&gt;</span><br><span class="line">                                   &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">                               &lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-d51a2ca76b7ca285.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新一下我们的页面，发现没有问题！</p><p>不过还有一个问题，那就是用户如果没有登录，那是不能让他进入课程章节这个页面的，因此需要判断一下。这里因为使用的是方法型编程所以可以使用装饰器loginrequired来进行判断。</p><p>在utils文件夹下面，新建一个名为mixin_utils.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.decorators import login_required</span><br><span class="line">from django.utils.decorators import method_decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LoginRequiredMixin(object):</span><br><span class="line"></span><br><span class="line">    @method_decorator(login_required(login_url=&apos;/login/&apos;))</span><br><span class="line">    def dispatch(self, request, *args, **kwargs):</span><br><span class="line">        return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs)</span><br></pre></td></tr></table></figure></p><p>接着打开courses/views.py文件，在里面修改CourseInfoView和CourseCommentView，修改后如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from utils.mixin_utils import LoginRequiredMixin</span><br><span class="line"></span><br><span class="line"># 课程章节信息</span><br><span class="line">class CourseInfoView(LoginRequiredMixin, View):</span><br><span class="line">     login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;redirect_to&apos;</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line"></span><br><span class="line">        # 查询用户是否已经开始学习了该课程，如果没有则开始学习</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user, course=course)</span><br><span class="line">        if not user_courses:</span><br><span class="line">            user_course = UserCourse(user=request.user, course=course)</span><br><span class="line">            course.students += 1</span><br><span class="line">            course.save()</span><br><span class="line">            user_course.save()</span><br><span class="line"></span><br><span class="line">        # 取出所有选过这门课的学生</span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        # 取出所有选过这门课的学生的id,采用递归表达式形式</span><br><span class="line">        user_ids = [user_course.user.id for user_course in user_courses]</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程</span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式</span><br><span class="line">        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]</span><br><span class="line">        # 取出学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5]</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程评论页面</span><br><span class="line">class CourseCommentView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;redirect_to&apos; </span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        all_comments = CourseComments.objects.all()</span><br><span class="line">        return render(request, &quot;course-comment.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;all_comments&quot;: all_comments,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>刷新一下页面，点几个课程试试看，发现都在该同学还学过哪些课里推荐了。</p><h2 id="课程播放页面配置"><a href="#课程播放页面配置" class="headerlink" title="课程播放页面配置"></a>课程播放页面配置</h2><p>老规矩，把前端资料里面的<strong>course-play.html</strong>拷贝到我们的templates文件夹里面，然后替换继承base页面，这里就不细说了，直接贴图：<img src="https://upload-images.jianshu.io/upload_images/8964398-77d8993a8440498c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>打开courses/urls.py文件，新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from .views import  VideoPlayView</span><br><span class="line"></span><br><span class="line"># 视频播放页面url</span><br><span class="line">re_path(&apos;video/(?P&lt;video_id&gt;.*)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),</span><br><span class="line">或者 re_path(&apos;video/(?P&lt;video_id&gt;\d+)/&apos;, VideoPlayView.as_view(), name=&quot;video_play&quot;),都是可以的</span><br></pre></td></tr></table></figure></p><p>接着打开courses/views.py文件，新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from .models import  Video</span><br><span class="line"></span><br><span class="line"># 视频播放页面</span><br><span class="line">class VideoPlayView(LoginRequiredMixin, View):</span><br><span class="line">    login_url = &apos;/login/&apos;</span><br><span class="line">    redirect_field_name = &apos;redirect_to&apos;</span><br><span class="line">    </span><br><span class="line">    def get(self, request, video_id):</span><br><span class="line">        video = Video.objects.get(id=int(video_id))</span><br><span class="line">        course = video.lesson.course</span><br><span class="line">        all_resources = CourseResource.objects.filter(course=course)</span><br><span class="line">        # 查询用户是否已经开始学习了该课程，如果没有则开始学习</span><br><span class="line">        user_courses = UserCourse.objects.filter(user=request.user, course=course)</span><br><span class="line">        if not user_courses:</span><br><span class="line">            user_course = UserCourse(user=request.user, course=course)</span><br><span class="line">            course.students += 1</span><br><span class="line">            course.save()</span><br><span class="line">            user_course.save()</span><br><span class="line"></span><br><span class="line">        # 取出所有选过这门课的学生</span><br><span class="line">        user_courses = UserCourse.objects.filter(course=course)</span><br><span class="line">        # 取出所有选过这门课的学生的id,采用递归表达式形式</span><br><span class="line">        user_ids = [user_course.user.id for user_course in user_courses]</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程</span><br><span class="line">        all_user_courses = UserCourse.objects.filter(user_id__in=user_ids)</span><br><span class="line">        # 取出刚才那些学生选过的所有的课程的id,同样采用递归表达式形式</span><br><span class="line">        course_ids = [all_user_course.course_id for all_user_course in all_user_courses]</span><br><span class="line">        # 取出学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses = Course.objects.filter(id__in=course_ids).order_by(&quot;-click_nums&quot;)[:5]</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;course-play.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">            &quot;video&quot;: video,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>上面的代码和之前在课程章节信息里面定义的几乎一模一样，只是course的来源不一样。</p><p>接着打开<strong>course-video.html</strong>文件，配置跳转链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for video in lesson.get_lesson_video %&#125;</span><br><span class="line">                                    &lt;li&gt;</span><br><span class="line">                                        &lt;a target=&quot;_blank&quot; href=&apos;&#123;% url &apos;course:video_play&apos; video.id %&#125;&apos;</span><br><span class="line">                                           class=&quot;J-media-item studyvideo&quot;&gt;&#123;&#123; video.name &#125;&#125;(&#123;&#123; video.learn_times &#125;&#125;)</span><br><span class="line">                                            &lt;i class=&quot;study-state&quot;&gt;&lt;/i&gt;</span><br><span class="line">                                        &lt;/a&gt;</span><br><span class="line">                                    &lt;/li&gt;</span><br><span class="line">                                &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>然后打开<strong>course-video.html</strong>文件，配置视频链接，记住由于我们这边是<strong>type=’video/mp4’</strong>所以后台所添加的视频必须是<strong>.mp4</strong>结尾，否则会出错。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-e04e8316b3d9ac6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>刷新一下，发现页面跳转没有问题，显示也没有问题。</p><p>大家可以把自己的视频上传到七牛云，然后把生成的外键添加到后台即可,这里不详细介绍，直接开启传送大门：<a href="https://jingyan.baidu.com/article/335530da81510219cb41c3ce.html" target="_blank" rel="noopener">七牛云存储如何上传视频文件</a></p><p>至此，本篇关于课程相关页面的配置介绍就到此结束，感谢你的赏阅。</p><p>本篇笔记对应于第二十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十九）：课程详情页配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9A%E8%AF%BE%E7%A8%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍课程详情页面的配置，这个页面和我们之前配置的页面差别不是很大，可以借鉴前面的配置。</p><p>本篇笔记对应于第十九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>小伙伴们可能会问了，这篇笔记还没开始写怎么就开始总结了呢？是的，尽管没写但是我觉得非常有必要在这里总结一下，特别是对之前讲的信息的总结。后面随着开发进度的加快，一些东西我就不会详细介绍了，因为都是非常类似的操作。</p><p>我们现在可以理解MTV的模式就应该是这样子的：<strong>新建数据库字段(models)–&gt;配置访问路径(urls) –&gt;新建视图函数(views) –&gt; 页面信息动态加载(templates)</strong>，所以后面的操作就是这个过程，大家在学习的时候对此要有一个清醒的认识。</p><p>话不多说，我们正式进入今天的学习内容，走你。</p><h2 id="课程列表页配置"><a href="#课程列表页配置" class="headerlink" title="课程列表页配置"></a>课程列表页配置</h2><p>老规矩，把前端资料里面的course-list.html页面拷贝到我们的templates文件夹里面，接着配置url,在eduline/urls.py文件新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 课程相关应用path配置</span><br><span class="line">path(&quot;course/&quot;, include(&apos;courses.urls&apos;, namespace=&quot;course&quot;)),</span><br></pre></td></tr></table></figure></p><p>然后打开courses应用，在里面新建urls.py文件并在里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path, include, re_path</span><br><span class="line">from .views import CourseListView</span><br><span class="line"></span><br><span class="line">app_name = &quot;courses&quot;</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;list/&apos;, CourseListView.as_view(), name=&apos;course_list&apos;),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>现在打开courses/views.py文件，我们添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line"># Create your views here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>运行一下我们的项目，在浏览器地址栏输入：<a href="http://127.0.0.1:8000/course/list/然后回车出现：![](https://upload-images.jianshu.io/upload_images/8964398-76c1aaf58130dc4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/course/list/然后回车出现：![](https://upload-images.jianshu.io/upload_images/8964398-76c1aaf58130dc4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>可以发现访问没有问题，但是样式并没有加载出来。我们仔细观察course_list.html页面之后发现它和之前的org_list.html页面一样是具有共同的头部和尾部，因此我们可以继承base.html页面。</p><p>在course_list.html里面删除所有代码，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;公开课列表 - 慕海学习网&#123;% endblock %&#125;</span><br><span class="line">&#123;% block custom_bread %&#125;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">        &lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">            &lt;ul  class=&quot;crumbs&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;公开课&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;section&gt;   &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-819c847fba1ca896.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后是回到我们的courses/views.py文件，我们修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line"># Create your views here.</span><br><span class="line">from .models import Course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_courses = Course.objects.all()</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>回到course_list.html页面，修改代码为图示信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-856b9001b703c465.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="分页功能配置"><a href="#分页功能配置" class="headerlink" title="分页功能配置"></a>分页功能配置</h3><p>直接仿照我们当时在org_list.html的配置，拷贝如下代码至courses/views.py文件里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"># 对课程进行分页,尝试获取前端get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数则默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从all_courses中取出来，每页显示9个</span><br><span class="line">        p = Paginator(all_courses, 9, request=request)</span><br><span class="line"></span><br><span class="line">        courses = p.page(page)</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着打开course_list.html文件，修改代码为图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-41ef01a0822b5c92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在html中注意此刻不再是all_courses，前面说过此时的all_courses已经不是一个queryset对象，而是一个purepage对象，所以应该用all_courses.object_list。</p><p>还有复制org_list的页面分页代码，并将all_orgs修改为all_courses,就是这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;pageturn&quot;&gt;</span><br><span class="line">                           &lt;ul class=&quot;pagelist&quot;&gt;</span><br><span class="line">                               &#123;% if all_courses.has_previous %&#125;</span><br><span class="line">                                   &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">                                   &lt;/li&gt;</span><br><span class="line">                               &#123;% endif %&#125;</span><br><span class="line">                               &#123;% for page in all_courses.pages %&#125;</span><br><span class="line">                                   &#123;% if page %&#125;</span><br><span class="line">                                       &#123;% ifequal page all_courses.number %&#125;</span><br><span class="line">                                           &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                       &#123;% else %&#125;</span><br><span class="line">                                           &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                       &#123;% endifequal %&#125;</span><br><span class="line">                                   &#123;% else %&#125;</span><br><span class="line">                                       &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                   &#123;% endif %&#125;</span><br><span class="line">                               &#123;% endfor %&#125;</span><br><span class="line">                               &#123;% if all_courses.has_next %&#125;</span><br><span class="line">                                   &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_courses.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                               &#123;% endif %&#125;</span><br><span class="line">                           &lt;/ul&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="排序功能的配置"><a href="#排序功能的配置" class="headerlink" title="排序功能的配置"></a>排序功能的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3a27f994033a89dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>和前面在org_list页面的配置一模一样，我们复制粘贴并修改一下那些代码，放到courses/views.py文件里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">all_courses = Course.objects.all().order_by(&quot;-add_time&quot;) # 默认是按添加顺序反着排序</span><br><span class="line"># 最热门和参与人数排名</span><br><span class="line">        # 最热门hot根据点击数来判断</span><br><span class="line">        # 参与人数是根据学习人数来判断</span><br><span class="line">        sort = request.GET.get(&apos;sort&apos;, &apos;&apos;)</span><br><span class="line">        if sort:</span><br><span class="line">            if sort == &quot;students&quot;:</span><br><span class="line">                all_courses = all_courses.order_by(&quot;-students&quot;)</span><br><span class="line">            elif sort == &quot;hot&quot;:</span><br><span class="line">                all_courses = all_courses.order_by(&quot;-click_nums&quot;)</span><br><span class="line"></span><br><span class="line">return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;sort&quot;: sort,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>现在打开course_list.html文件，我们将上述功能和选中状态进行配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;tab_header&quot;&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% ifequal sort &apos;&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=&quot;&gt;最新 &lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% ifequal sort &apos;hot&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=hot&quot;&gt;最热门&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% ifequal sort &apos;students&apos; %&#125;active&#123;% endifequal %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&quot;&gt;参与人数&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f262bff947c23249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="热门课程推荐"><a href="#热门课程推荐" class="headerlink" title="热门课程推荐"></a>热门课程推荐</h3><p>打开courses/views.py文件，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 热门课程推荐</span><br><span class="line">      hot_courses = Course.objects.all().order_by(&quot;-students&quot;)[:3]</span><br><span class="line">     return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">          &quot;hot_courses&quot;: hot_courses,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开course_list.html文件，将热门课程推荐进行动态加载：<img src="https://upload-images.jianshu.io/upload_images/8964398-16c821012b786c25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>运行一下我们的项目，在浏览器地址栏输入<a href="http://127.0.0.1:8000/course/list/回车，发现课程难度显示有问题：![](https://upload-images.jianshu.io/upload_images/8964398-81c3e7a2a4f9840d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/course/list/回车，发现课程难度显示有问题：![](https://upload-images.jianshu.io/upload_images/8964398-81c3e7a2a4f9840d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>我们需要修改<strong>{ hot_course.degree }}</strong>为 <strong>{ hot_course.get_degree_display }}</strong>，这个字段的意思是说得到degree的字段显示，并不是得到它本身，事实上它本身为英文。（专门针对choices的显示）</p><p>现在刷新一下我们的页面，难度等级正常显示了，没有问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-3563d809a51410cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此课程列表页的介绍到此结束，下面我们介绍课程详情页面。</p><h2 id="课程详情页配置"><a href="#课程详情页配置" class="headerlink" title="课程详情页配置"></a>课程详情页配置</h2><p>老规矩，把前端资料里面的course-detail.html页面拷贝到我们的templates文件夹里面，正常情况下我们应该配置url，但是鉴于此处的course-detail.html页面会继承我们之前的course-list.html页面，所以我们就先把course-detail.html页面给配置完，然后才开始url的配置。</p><p>打开course-detail.html页面，删除所有代码，新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line">&#123;% load staticfiles %&#125;</span><br><span class="line">&#123;% block title %&#125;课程详情页 - 慕海学习网&#123;% endblock %&#125;</span><br><span class="line">&#123;% block custom_bread %&#125;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">        &lt;div class=&quot;wp&quot;&gt;</span><br><span class="line">            &lt;ul  class=&quot;crumbs&quot;&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;index&apos; %&#125;&quot;&gt;首页&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;&lt;a href=&quot;&#123;% url &apos;course:course_list&apos; %&#125;&quot;&gt;公开课程&lt;/a&gt;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&#123;&#123; course.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">    &lt;section&gt;   &lt;!--这里面的 &lt;section&gt; 就是课程信息，是通过观测来的--&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>接着配置url,打开courses/urls.py文件并在里面新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import CourseDetailView</span><br><span class="line"></span><br><span class="line"> # 课程机构首页url</span><br><span class="line">    re_path(&apos;detail/(?P&lt;course_id&gt;.*)/&apos;, CourseDetailView.as_view(), name=&quot;course_detail&quot;),</span><br></pre></td></tr></table></figure></p><p>现在书写我们的视图函数，打开courses/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 课程详情页</span><br><span class="line">class CourseDetailView(View):</span><br><span class="line">    def get(self, request，course_id):  # 所有re_path在请求参数的时候必须带上id</span><br><span class="line">        return render(request, &quot;course-detail.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>然后配置页面的跳转链接，我们希望可以从课程列表页面跳转进来，所以打开course_list.html页面，将图中信息修改为所示信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-d3cb90079c018b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来修改我们的view(courses/views.py文件)，准备页面信息的动态加载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 课程详情页</span><br><span class="line">class CourseDetailView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">#注意一下此处的id是数据库表默认为我们添加的</span><br><span class="line">        course = Course.objects.get(id=int(course_id))</span><br><span class="line">        return render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开course_detail.html页面，使我们的数据得到动态加载并显示出来。</p><p>注意章节数和学习用户的获取方式：在courses/modles.py文件里面的Course类里面定义一个get-zj-nums方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    # 获取课程章节数</span><br><span class="line">    return self.lesson_set.all().count()</span><br></pre></td></tr></table></figure></p><p>还有学习用户的获取方式：我们之前在operation中专门定义了一个类UserCourse用于对用户学习作记录的。既然存在了这个类（数据库生成和迁移操作之后是一张表），那我们就可以采用获取学习章节数的方式来获取它。</p><p>同样在courses/modles.py文件里面的Course类里面定义一个get-learn-users方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_learn_users(self):</span><br><span class="line">   # 获取学习用户数，此处不用统计，我们只取出5个即可</span><br><span class="line">   return self.usercourse_set.all()[:5]</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-78d2c52750ccce9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在打开course_detail.html页面，将信息修改为图示那样：<img src="https://upload-images.jianshu.io/upload_images/8964398-453027970bd19369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后去xadmin后台新增用户课程，记得把刚才展示的课程加里面去，便于我们观察是否成功显示：<img src="https://upload-images.jianshu.io/upload_images/8964398-59e6907f4239f8f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>还有一个问题，就是你现在点进这个页面，那么相应课程的点击数应该加1，所以在我们的view(courses/views.py文件),新增以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程点击数增加</span><br><span class="line">        course.click_nums += 1</span><br><span class="line">        course.save()</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-84f93695989d106f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="授课机构的配置"><a href="#授课机构的配置" class="headerlink" title="授课机构的配置"></a>授课机构的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cf1706b499a872c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意教师数的获取方式：<br>注意章节数和学习用户的获取方式：在organization/modles.py文件里面的CourseOrg类里面定义一个get_teacher_nums方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_teacher_nums(self):</span><br><span class="line"># 获取教师数</span><br><span class="line">return self.teacher_set.all().count()</span><br></pre></td></tr></table></figure></p><p>然后html页面调用，采用如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; course.course_org.get_teacher_nums &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>当然如果你不想自定义函数，那也是可以的，你仅仅只需要在前端页面采用如下代码即可,是不是更简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; course.course_org.teacher_set.count &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们完成右侧下面的相关课程推荐模块。</p><h3 id="相关课程推荐"><a href="#相关课程推荐" class="headerlink" title="相关课程推荐"></a>相关课程推荐</h3><p>这个就是相关课程推荐的页面，我们接下来就是完成这个功能：<img src="https://upload-images.jianshu.io/upload_images/8964398-aa0c51f45bf52346.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开courses/views.py文件，在CourseDetailView函数里面新增用于实现相关课程推荐功能的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 相关课程推荐</span><br><span class="line">        # 此处为course而不是Course,我们是用前面取出的课程</span><br><span class="line">        tag = course.tag</span><br><span class="line">        if tag:</span><br><span class="line">#  这里必须从1开始不然会推荐自己，也就是索引0</span><br><span class="line">            relate_courses = Course.objects.filter(tag=tag)[1:2]</span><br><span class="line">        else:</span><br><span class="line">            relate_courses = []</span><br><span class="line"> return render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-2816b3f02ea99fd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着在<strong>course-detail.html</strong>页面修改页面展示信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for relate_course in relate_courses %&#125;</span><br><span class="line">                        &lt;dl&gt;</span><br><span class="line">                            &lt;dt&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt;</span><br><span class="line">                                    &lt;img width=&quot;240&quot; height=&quot;220&quot; class=&quot;scrollLoading&quot;</span><br><span class="line">                                         src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; relate_course.image &#125;&#125;&quot;/&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/dt&gt;</span><br><span class="line">                            &lt;dd&gt;</span><br><span class="line">                                &lt;a target=&quot;_blank&quot; href=&quot;&#123;% url &apos;course:course_detail&apos; relate_course.id %&#125;&quot;&gt;</span><br><span class="line">                                    &lt;h2&gt;&#123;&#123; relate_course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt;</span><br><span class="line">                                &lt;span class=&quot;fl&quot;&gt;学习时长：&lt;i class=&quot;key&quot;&gt;&#123;&#123; relate_course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">                            &lt;/dd&gt;</span><br><span class="line">                        &lt;/dl&gt;</span><br><span class="line">                    &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-857f3b208b3ee826.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后去xadmin后台或者数据库中将几个课程的tag修改为同一个，然后再运行一下我们的项目，就出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-9ba5b0ab315442bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在还差页面中的收藏和开始学习这两个功能的配置了，开始学习我们在下一篇介绍。</p><h3 id="实现收藏功能"><a href="#实现收藏功能" class="headerlink" title="实现收藏功能"></a>实现收藏功能</h3><p>我们之前在课程机构里面配置过收藏的功能，如果不熟悉的小伙伴们可以回顾一下第十八篇：<br><a href="https://www.jianshu.com/p/e99b55f970fa" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置</a>，这里我就快速介绍一下：<br>首先在<strong>course-detail.html</strong>页面底部添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_js %&#125;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        //收藏分享</span><br><span class="line">        function add_fav(current_elem, fav_id, fav_type) &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                cache: false,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url: &quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;,</span><br><span class="line">                data: &#123;&apos;fav_id&apos;: fav_id, &apos;fav_type&apos;: fav_type&#125;,</span><br><span class="line">                async: true,</span><br><span class="line">                beforeSend: function (xhr, settings) &#123;</span><br><span class="line">                    xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">                &#125;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                    if (data.status == &apos;fail&apos;) &#123;</span><br><span class="line">                        if (data.msg == &apos;用户未登录&apos;) &#123;</span><br><span class="line">                            window.location.href = &quot;&#123;% url &apos;login&apos; %&#125;?next=&#123;&#123; request.path &#125;&#125;&quot;;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            alert(data.msg)</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125; else if (data.status == &apos;success&apos;) &#123;</span><br><span class="line">                        current_elem.text(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $(&apos;#jsLeftBtn&apos;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">            add_fav($(this), &#123;&#123; course.id &#125;&#125;, 1);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(&apos;#jsRightBtn&apos;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">            add_fav($(this), &#123;&#123; course.course_org.id &#125;&#125;, 2);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>然后再打开course/views.py文件，补充 CourseDetailView函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from operation.models import UserFavorite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 是否收藏课程，默认为否</span><br><span class="line">        has_fav_course = False</span><br><span class="line">        has_fav_org = False</span><br><span class="line"></span><br><span class="line">        # 用户必须已登录我们才判断，否则不需要</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course.id, fav_type=1):</span><br><span class="line">                has_fav_course = True</span><br><span class="line">            if UserFavorite.objects.filter(user=request.user, fav_id=course.course_org.id, fav_type=2):</span><br><span class="line">                has_fav_org = True</span><br><span class="line"></span><br><span class="line">return render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">            &quot;has_fav_course&quot;: has_fav_course,</span><br><span class="line">            &quot;has_fav_org&quot;: has_fav_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-bfa8c9b7ed4cf354.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着打开<strong>course-detail.html</strong>页面，修改收藏的显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;btn colectgroupbtn&quot;  id=&quot;jsLeftBtn&quot;&gt;</span><br><span class="line">                                  &#123;% if has_fav_course %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;btn  notlogin</span><br><span class="line">     &quot;data-favid=&quot;14&quot; id=&quot;jsRightBtn&quot;&gt;</span><br><span class="line">                         &#123;% if has_fav_org %&#125;已收藏&#123;% else %&#125;收藏&#123;% endif %&#125;</span><br><span class="line">                    &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>运行一下项目，两个都点击试试：<img src="https://upload-images.jianshu.io/upload_images/8964398-04d2b3d3d57d49cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-eae934bc45c24dec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>数据库已经有了，点击就没有了。</p><p><strong>备注</strong></p><ul><li>如果出现上面两个收藏按钮点击没反应的情况，大家可以先尝试用浏览器f12（博主用的是chrome浏览器）看一下浏览器有没有post请求发出去以及参数和url的配置是否出错。如果还是有问题，那么回到<strong>base.html</strong>页面，将<code></code>的位置由开头放置到底部：<br><strong>原来：</strong><img src="https://upload-images.jianshu.io/upload_images/8964398-ab4b7a01e5ef1491.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>现在：</strong><img src="https://upload-images.jianshu.io/upload_images/8964398-097f26d54b3a663d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></li></ul><p>知道为什么会出现这种情况么？那是因为jQuery 入口函数与 JavaScript 入口函数是有区别的：jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。而JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行的。这里是js还未加载完就去执行，所以才出现的问题，放在底部就没问题了。</p><p>至此本篇关于课程详情页面的配置介绍就到此结束了，感谢你的赏阅。</p><p>本篇笔记对应于第十九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十八）：机构详情页配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E6%9C%BA%E6%9E%84%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E6%9C%BA%E6%9E%84%E8%AF%A6%E6%83%85%E9%A1%B5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍机构详情页面的配置，主要包括四个部分：<strong>机构首页</strong>、<strong>机构课程</strong>、<strong>机构介绍</strong>和<strong>机构讲师</strong>，以及用户收藏的介绍下面我将逐一介绍说明。</p><p>本篇笔记对应于第十八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="机构首页"><a href="#机构首页" class="headerlink" title="机构首页"></a>机构首页</h2><p>打开浏览器，在地址栏输入:<a href="http://127.0.0.1:8000/xadmin，往里面新增10门课程和10位讲师信息:![](https://upload-images.jianshu.io/upload_images/8964398-ebb88cd33034ae62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，往里面新增10门课程和10位讲师信息:![](https://upload-images.jianshu.io/upload_images/8964398-ebb88cd33034ae62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>新增课程信息的时候发现课程没有所属课程机构，这是不行的，因为我们后面还有机构课程这个模块，如果课程与课程机构之间没有外键来链接的话就无法实现相应的功能。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c0555ee873ffdb6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们需要在courses/models.py文件中，新增外键连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from organization.models import CourseOrg</span><br><span class="line"></span><br><span class="line">course_org = models.ForeignKey(CourseOrg,  on_delete=models.CASCADE, verbose_name=&quot;课程机构&quot;, null=True, blank=True)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f759d1eec4a19081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记住我们需要在外键里面增加要求<code>null=True, blank=True</code>,你可能会问，为什么之前的外键不用呢？那是因为之前没有课程数据，可是现在里面已经有了一门课程（之前添加的），如果不加这个要求，系统会提示之前的那门课的外键怎么办。所以为了避免这个问题，我们就加上这个要求。</p><p>接下来进行数据库的生成和迁移操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigration courses</span><br><span class="line">migrate courses</span><br></pre></td></tr></table></figure></p><p>就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cfd71a293b34e855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后继续在xadmin后台新增课程信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-87379e62e21bc5ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>完成以后，现在将前端资料里面与org相关的四个页面拷贝到我们的templates文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-681f1f04e43608d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来，通过观察新建<strong>org_base.html</strong>页面,将org_homepage页面全部复制过去，然后修改block：<img src="https://upload-images.jianshu.io/upload_images/8964398-05919e257f29cab4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f09d11205729edf0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来就是三部曲了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、页面第三行加上&#123;% load staticfiles %&#125;</span><br><span class="line">2、修改全部类型文件的static相对路径</span><br><span class="line">3、修改其中已经设置好的url，配置跳转链接</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-062098d1b9f8819a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-d85afd6d84402791.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在仿照之前的Base继承，清空org_homepage页面，往里面新增图示代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-11245ee6d412ddbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后删除<strong>org_base.html</strong>页面中的<code>`和`</code>之间的代码，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-828c07e042b1df4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来打开我们的organization/views.py文件，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 机构首页</span><br><span class="line">class OrgHomeView(View):</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id来获取课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id=int(org_id))</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有课程，我们取3个</span><br><span class="line">        all_courses = course_org.course_set.all()[:3]</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有讲师，我们取1个</span><br><span class="line">        all_teachers = course_org.teacher_set.all()[:1]</span><br><span class="line"></span><br><span class="line">        render(request, &quot;org-detail-homepage.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">            &quot;all_teachers&quot;: all_teachers,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后配置我们的path,打开organization/urls.py文件，在底部新增如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from .views import OrgHomeView</span><br><span class="line"></span><br><span class="line"># 课程机构首页url,此处不是普通的url是因为我们必须知道是哪个机构的首页</span><br><span class="line">re_path(&apos;home/(?P&lt;org_id&gt;.*)/&apos;, OrgHomeView.as_view(), name=&quot;org_home&quot;),</span><br></pre></td></tr></table></figure></p><p>接着打开org_homepage页面，删除多余的课程，采用for循环来遍历数据库中的课程信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-4446b37a4a48131f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>顺便修改其中的课程信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for course in all_courses %&#125;</span><br><span class="line">                 &lt;div class=&quot;module1_5 box&quot;&gt;</span><br><span class="line">&lt;a href=&quot;course-detail.html&quot;&gt;&lt;img width=&quot;214&quot; src=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course.image &#125;&#125;&quot;/&gt;&lt;/a&gt;</span><br><span class="line">                &lt;div class=&quot;des&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;course-detail.html&quot;&gt;&lt;h2&gt;&#123;&#123; course.name &#125;&#125;&lt;/h2&gt;&lt;/a&gt;</span><br><span class="line">                    &lt;span class=&quot;fl&quot;&gt;课时：&lt;i class=&quot;key&quot;&gt;&#123;&#123; course.learn_times &#125;&#125;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;fr&quot;&gt;参加人数：&#123;&#123; course.students &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;fl&quot;&gt;&#123;&#123; course.course_org.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;star fr  notlogin</span><br><span class="line">                            &quot; data-favid=&quot;13&quot; data-fav-type=&quot;4&quot;&gt;</span><br><span class="line">                            &#123;&#123; course.fav_nums &#125;&#125;</span><br><span class="line">                        &lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p><strong>然后三部曲走一下，这里就不详细说明了。</strong></p><p>接着打开org_list页面，配置跳转链接：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e4fd915397ee3229.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; course_org.id %&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>记住因为之前我们的org_home配置的不是普通的path,所以你如果写成普通的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &apos;org:org_home&apos; %&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>那是会报错的，我们需要在此后空一格，然后带上我们在path中定义的id,因为是跳转到课程机构首页，所以写上它的id。</p><p>然后运行一下我们的项目：发现课程机构显示不同步，那我们把刚才获取到的数据返回到页面显示一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-87bf1141a41b86a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>那我们就打开我们的organization/views.py文件，在底部修改为如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 机构首页</span><br><span class="line">class OrgHomeView(View):</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id来获取课程机构</span><br><span class="line">        course_org = CourseOrg.objects.get(id=int(org_id))</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有课程，我们取3个</span><br><span class="line">        all_courses = course_org.course_set.all()[:3]</span><br><span class="line"></span><br><span class="line">        # 根据取到的课程机构直接获取它的所有讲师，我们取1个</span><br><span class="line">        all_teachers = course_org.teacher_set.all()[:1]</span><br><span class="line"></span><br><span class="line">        render(request, &quot;org-detail-homepage.html&quot;, &#123;</span><br><span class="line">            &quot;all_courses&quot;: all_courses,</span><br><span class="line">            &quot;all_teachers&quot;: all_teachers,</span><br><span class="line">            &quot;course_org&quot;: course_org,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>接着返回org_base页面,我们修改如下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-7a7e753f067693ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这里的数据会向上传递，所以后面的那些org页面都是可以用到的。完成以后就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-2297c184e2ddedc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着运行一下我们的项目，发现显示没有问题：<img src="https://upload-images.jianshu.io/upload_images/8964398-c2511b102dd1954f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>下面继续完成它的其余两个：机构教师和机构介绍。<br>机构教师：打开org_homepage页面，将信息修改成图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-b6c2c47dbad6680c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>机构介绍：还是在org_homepage页面，将信息修改成图示：<img src="https://upload-images.jianshu.io/upload_images/8964398-53aa3cbc7308ad5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着运行一下我们的项目，发现显示没有问题。</p><p>至此，第一个机构首页的信息就全部配置完全了，其余几个很类似，所以介绍的就比较快了，当做复习一下。</p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><p>至此，本篇关于机构详情页面的配置以及用户收藏的介绍就到此为止了，感谢你的赏阅。</p><p>本篇笔记对应于第十八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十七）：我要学习配置</title>
      <link href="/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%88%91%E8%A6%81%E5%AD%A6%E4%B9%A0%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/13/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9A%E6%88%91%E8%A6%81%E5%AD%A6%E4%B9%A0%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍我要学习小页面的配置，为什么需要单独介绍，是因为这个和其他页面的耦合度不是很高，单独写一篇便于今后学习的需要。</p><p>本篇笔记对应于第十七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="配置我要学习"><a href="#配置我要学习" class="headerlink" title="配置我要学习"></a>配置我要学习</h2><p>这就是我要学习的页面，它是通过Ajax来控制的，也就是异步的javascript和xml。它可以在保证当前页面不被重新刷新的条件下，提交表单向后台传送数据。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a114b34dcbb10a7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>正如你在前面所学习的那样，但凡涉及到了表单的提交都会有一个form验证。我们仿照前面的逻辑在operation应用下面新建一个forms.py文件，用于此处表单的验证。</p><p>然后在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAskForm(forms.Form):</span><br><span class="line">    name = forms.CharField(required=True, min_length=2, max_length=20)</span><br><span class="line">    mobile = forms.CharField(required=True, min_length=11, max_length=11)</span><br><span class="line">    course_name = forms.CharField(required=True, min_length=5, max_length=50)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-5270ca8e5e39ba90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着打开operation/models.py文件,发现这两个函数定义的字段信息非常相似，连要求都是一样的：<img src="https://upload-images.jianshu.io/upload_images/8964398-7d073f0ef09124d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>那么我们就有一个疑问，如何让代码重复利用，不需要再次重新造轮子呢？我们可以利用Django自带的ModelForm,这比form强大多了，除了继承现有的字段还可以新增字段！新增代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进阶版的函数</span><br><span class="line">class AnotherUserAskForm(forms.ModelForm):</span><br><span class="line">    # 除了继承现有的字段还可以新增字段</span><br><span class="line">    class Meta:</span><br><span class="line">        model = UserAsk</span><br><span class="line">        # 自定义需要验证的字段</span><br><span class="line">        fields = [&quot;name&quot;, &quot;mobile&quot;, &quot;course_name&quot;]</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ce41dced520d6f5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来的一步就是path的配置了，现在有一个疑问，就是我们的项目url文件，已经存放了很多url，如果我们再往里面新增url就很容易造成管理上的混乱：<img src="https://upload-images.jianshu.io/upload_images/8964398-95190512407fc3cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们在思考能不能像高考考场一样，有许多分考场，学生在各个分考场的试卷会送到省里，在保证考试有效的情况下，避免人员来往市区的麻烦。Django里面其实也是有的，所以我们就采用include的机制，来达到这个目的：在保证path的有效情况下，将各个app应用的path分开放置，最后将app的path引入项目的path就可以了。下面我们开始在organization应用下面，新建urls.py文件，里面增加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path, include, re_path</span><br><span class="line">from .views import OrgView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    # 课程机构列表页url</span><br><span class="line">    path(&quot;list/&quot;, OrgView.as_view(), name=&quot;org_list&quot;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后回到我们的eduline/urls.py文件，我们将刚才的那行path用下面的一行include代码替换掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 继续Ajax配置</span><br><span class="line">前面说到我要学习的页面，它是通过Ajax来控制的，是一种异步加载方式，所以我们此时不能在view里面直接render一个页面回来，应该是给前端返回json数据，而不是页面。这里我们就要用到HttpResponse这个类，它指明了给用户返回哪种类型的数据。</span><br><span class="line"></span><br><span class="line">打开organization/views.py文件，在里面添加如下代码：</span><br></pre></td></tr></table></figure></p><p>from operation.forms import AnotherUserAskForm</p><h1 id="我要学习功能实现"><a href="#我要学习功能实现" class="headerlink" title="我要学习功能实现"></a>我要学习功能实现</h1><p>class AddUserAskView(View):<br>    def post(self, request):<br>        userask_form = AnotherUserAskForm(request.POST)</p><pre><code># 判断form是否有效if userask_form.is_valid():    #  注意modelform和form的区别，modelform它有model的属性，而且有个参数commit，当它为真时会把数据存入到数据库    user_ask = userask_form.save(commit=True)    # 如果保存成功,则返回json,不过后面必须有content_type用于告诉浏览器返回的类型    return HttpResponse(&quot;{&apos;status&apos;: &apos;success&apos;}&quot;, content_type=&apos;application/json&apos;)else:    # 如果保存失败，则返回json,并将form的错误信息通过msg传递到前端进行显示    return HttpResponse(&quot;{&apos;status&apos;: &apos;fail&apos;, &apos;msg&apos;:{0}}&quot;.format(userask_form.errors),  content_type=&apos;application/json&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*****</span><br><span class="line">**由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！**</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">打开我们的operation/forms.py文件，里面加上如下代码：</span><br></pre></td></tr></table></figure><p>import re</p><h1 id="验证手机号码是否合法"><a href="#验证手机号码是否合法" class="headerlink" title="验证手机号码是否合法"></a>验证手机号码是否合法</h1><pre><code>def clean_mobile(self):    mobile = self.cleaned_data[&quot;mobile&quot;]    REGEX_MOBILE = &quot;^1[358]\d{9}$|^147\d{8}$|^176\d{8}$&quot;    p = re.compile(REGEX_MOBILE)    if p.match(mobile):        return mobile    else:        raise forms.ValidationError(&quot;手机号码非法&quot;, code=&quot;mobile_invalid&quot;)</code></pre><p><code>`</code><br>关于正则表达式的用法，大家可以关注我的另一个专题《趣玩Python爬虫》，我目前在筹划中，预计9月份就会更新了。</p><p>接下来你可以重复刚才的测试操作，看手机号码验证是否生效了，这里就不一一演示了。</p><p>至此，我们关于我要学习的小页面的配置就到此为止了，感谢你的赏阅。下一篇笔记，我们就介绍课程机构的详情页面的配置了。</p><p>本篇笔记对应于第十七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十六）：列表分页功能</title>
      <link href="/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%97%E8%A1%A8%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E5%88%97%E8%A1%A8%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将介绍列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的实现。</p><p>本篇笔记对应于第十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="列表分页"><a href="#列表分页" class="headerlink" title="列表分页"></a>列表分页</h2><p>各位小伙伴们看下面的图片，这就是列表分页，怎么样是不是觉得很简单，其实它挺复杂的，下面介绍如何实现这个功能：<img src="https://upload-images.jianshu.io/upload_images/8964398-63c91a8ad1275f54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们是通过django-pure-pagination这个库来实现的，所以首先进入到我们的虚拟环境，安装这个库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\YC&gt;F:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd envs</span><br><span class="line"></span><br><span class="line">F:\Envs&gt;cd eduline</span><br><span class="line"></span><br><span class="line">F:\Envs\eduline&gt;workon eduline</span><br><span class="line">(eduline) F:\Envs\eduline&gt;pip install django-pure-pagination -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting django-pure-pagination</span><br><span class="line">Installing collected packages: django-pure-pagination</span><br><span class="line">Successfully installed django-pure-pagination-0.3.0</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs\eduline&gt;</span><br></pre></td></tr></table></figure></p><p>然后去settings.py文件里，注册这个app:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;pure_pagination&apos;,</span><br></pre></td></tr></table></figure></p><p>接下来点击github上的项目地址<a href="https://github.com/jamespacileo/django-pure-pagination" target="_blank" rel="noopener">django-pure-pagination</a>，然后下拉至settings：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-45475f6ed807d260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们看一下可设置的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PAGINATION_SETTINGS = &#123;</span><br><span class="line">    &apos;PAGE_RANGE_DISPLAYED&apos;: 10,</span><br><span class="line">    &apos;MARGIN_PAGES_DISPLAYED&apos;: 2,</span><br><span class="line"></span><br><span class="line">    &apos;SHOW_FIRST_PAGE_WHEN_INVALID&apos;: True,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解释一下上面参数的意义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PAGE_RANGE_DISPLAYED:  表示总共会显示多少个页数。(包括省略号，两边和中间)</span><br><span class="line">MARGIN_PAGES_DISPLAYED:  表示旁边会显示多少个。</span><br><span class="line">SHOW_FIRST_PAGE_WHEN_INVALID:  表示当输入页数不合法是否要跳到第一页</span><br></pre></td></tr></table></figure></p><p>我们继续下拉，看一下官方给的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># views.py</span><br><span class="line">from django.shortcuts import render_to_response</span><br><span class="line"></span><br><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    # 尝试获取页数参数</span><br><span class="line">    try:</span><br><span class="line">        page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">    except PageNotAnInteger:</span><br><span class="line">        page = 1</span><br><span class="line">    # objects是取到的数据</span><br><span class="line">    objects = [&apos;john&apos;, &apos;edward&apos;, &apos;josh&apos;, &apos;frank&apos;]</span><br><span class="line"></span><br><span class="line">    # 对取到的数据进行分页</span><br><span class="line">    p = Paginator(objects, request=request)</span><br><span class="line">    # 此时前台显示的就是我们此前获取的第几页的数据</span><br><span class="line">    people = p.page(page)</span><br><span class="line"></span><br><span class="line">    return render_to_response(&apos;index.html&apos;, &#123;</span><br><span class="line">        &apos;people&apos;: people,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们尝试对照实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 课程机构列表功能</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 查找所有的城市信息</span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line">        # 查找所有的课程机构信息</span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        # 统计课程机构的数量</span><br><span class="line">        org_nums = all_orgs.count()</span><br><span class="line">        # 对课程机构进行分页,尝试获取前端get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数则默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page = request.GET.get(&apos;page&apos;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page = 1</span><br><span class="line">        # 这里指从all_org中取五个出来，每页显示6个,这个字段必填</span><br><span class="line">        p = Paginator(all_orgs, 6, request=request)</span><br><span class="line"></span><br><span class="line">        orgs = p.page(page)</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_citys&quot;: all_citys,</span><br><span class="line">            &quot;all_orgs&quot;: orgs,</span><br><span class="line">            &quot;org_nums&quot;: org_nums,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>继续看我们的官方文档：<img src="https://upload-images.jianshu.io/upload_images/8964398-1d5824bdbe8cd9c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们知道，因为我们返回给后端的是QueryDict，所以在前端页面可以使用for循环进行遍历显示，但是这里的orgs却不一定可以，查看文档，果真不能那样遍历，而是遍历其object_list,这一点很容易出错，需要格外注意。我们在前端页面配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for course_org in all_orgs.object_list %&#125;</span><br></pre></td></tr></table></figure></p><p>也就是这个地方：<img src="https://upload-images.jianshu.io/upload_images/8964398-dc666a3a0e1eb63d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在考虑如何在前端页面显示分页：<br>如果使用默认的render:<img src="https://upload-images.jianshu.io/upload_images/8964398-8c613223e664ba39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>前端页面配置如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a8c2b6575aad41ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>运行项目结果：<img src="https://upload-images.jianshu.io/upload_images/8964398-6776d9198f9a20d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这有点丑，所以我们还是自定义html页面的代码吧！怎么定义呢，还是查阅官方文档吧！</p><p>往下拉，可以看到这段代码，这就是官方文档告诉我们如何自定义分页样式的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load i18n %&#125;</span><br><span class="line">&lt;div class=&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;% if page_obj.has_previous %&#125;</span><br><span class="line">        &lt;a href=&quot;?&#123;&#123; page_obj.previous_page_number.querystring &#125;&#125;&quot; class=&quot;prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/a&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &lt;span class=&quot;disabled prev&quot;&gt;&amp;lsaquo;&amp;lsaquo; &#123;% trans &quot;previous&quot; %&#125;&lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% for page in page_obj.pages %&#125;</span><br><span class="line">        &#123;% if page %&#125;</span><br><span class="line">            &#123;% ifequal page page_obj.number %&#125;</span><br><span class="line">                &lt;span class=&quot;current page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                &lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot; class=&quot;page&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;</span><br><span class="line">            &#123;% endifequal %&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            ...</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% if page_obj.has_next %&#125;</span><br><span class="line">        &lt;a href=&quot;?&#123;&#123; page_obj.next_page_number.querystring &#125;&#125;&quot; class=&quot;next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/a&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &lt;span class=&quot;disabled next&quot;&gt;&#123;% trans &quot;next&quot; %&#125; &amp;rsaquo;&amp;rsaquo;&lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>注意：这里面的page_obj其实就是我们的all_orgs！</strong></p><p>下面我们继续尝试对照实现，打开org-list.html页面，找到对应位置，复制官方文档内容，然后进行替换（代码格式化ctrl+alt+L）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;pageturn&quot;&gt;</span><br><span class="line">               &lt;ul class=&quot;pagelist&quot;&gt;</span><br><span class="line">                   &#123;% if all_orgs.has_previous %&#125;</span><br><span class="line">                       &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.previous_page_number.querystring &#125;&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                   &#123;% endif %&#125;</span><br><span class="line">                   &#123;% for page in all_orgs.pages %&#125;</span><br><span class="line">                       &#123;% if page %&#125;</span><br><span class="line">                           &#123;% ifequal page all_orgs.number %&#125;</span><br><span class="line">                               &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &#123;% else %&#125;</span><br><span class="line">                               &lt;li&gt;&lt;a href=&quot;?&#123;&#123; page.querystring &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                           &#123;% endifequal %&#125;</span><br><span class="line">                       &#123;% else %&#125;</span><br><span class="line">                           &lt;li class=&quot;none&quot;&gt;&lt;a href=&quot;&quot;&gt;...&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                       &#123;% endif %&#125;</span><br><span class="line">                   &#123;% endfor %&#125;</span><br><span class="line">                   &#123;% if all_orgs.has_next %&#125;</span><br><span class="line">                       &lt;li class=&quot;long&quot;&gt;&lt;a href=&quot;?&#123;&#123; all_orgs.next_page_number.querystring &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                   &#123;% endif %&#125;</span><br><span class="line">               &lt;/ul&gt;</span><br><span class="line">           &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-2d4bb44659a2a537.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>刷新一下我们的页面，出现了分页：<img src="https://upload-images.jianshu.io/upload_images/8964398-0044abf27c0ae300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>因为只有10个课程机构，每页只显示6个所以最多只有2页！</p><h2 id="城市分类的筛选"><a href="#城市分类的筛选" class="headerlink" title="城市分类的筛选"></a>城市分类的筛选</h2><p>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">city_id = request.GET.get(&apos;city&apos;, &apos;&apos;)</span><br><span class="line">        # 选中了某个城市之后，根据城市Id与数据库中的city_id进行判断（外键city在数据库中名为city_id且为字符串类型）</span><br><span class="line">        if city_id:</span><br><span class="line">            all_orgs = all_orgs.filter(city_id=int(city_id))</span><br><span class="line"></span><br><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;city_id&quot;: city_id,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-b4f10fa731023ca2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开org-list.html页面，我们需要回传我们的city_id并加以显示出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;?ct=&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;   # 判断是否选择城市，如果没有则显示全部，并显示加绿状态</span><br><span class="line">           &#123;% for city in all_citys %&#125;</span><br><span class="line">           &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt; # 判断是否选择城市并显示加绿状态</span><br><span class="line">           &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>解释一下这行代码的意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>这行代码的意思是说，如果所选城市的city_id与数据库中的city_id（其实就是city,不过在数据库中自动变成了字符串类型的city_id）相等，就是选择了当前城市，并且为加绿状态。<code>city.id|stringformat:&quot;i&quot;</code>就是把数据库中的字符串类型的city_id转换成整型值并加以比对，此处city.id中的id对象其实就是刚才转换成的整型值！</p><p>变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-bb998a91cc580e98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可以刷新一下页面后，切换几个城市试试看，没有问题的！接下来我们仿照上面的操作，对机构的类别也进行一下分类筛选。</p><h2 id="机构类别的筛选"><a href="#机构类别的筛选" class="headerlink" title="机构类别的筛选"></a>机构类别的筛选</h2><p>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 机构类别的筛选</span><br><span class="line"># ct是我们前端页面用于判断机构类别用的</span><br><span class="line">category = request.GET.get(&apos;ct&apos;, &apos;&apos;)</span><br><span class="line"># 选中了类别之后，根据category与数据库中的category进行判断，从而显示授课机构</span><br><span class="line"> if category:</span><br><span class="line">    all_orgs = all_orgs.filter(category=category)</span><br><span class="line"></span><br><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;category&quot;: category,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-8b4a72d2329878dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后打开org-list.html页面，我们需要回传我们的category并加以显示出来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">&lt;a href=&quot;?city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;?ct=pxjg&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"> &lt;a href=&quot;?ct=gx&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;a href=&quot;?ct=gr&amp;city=&quot;&gt;&lt;span class=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-dcd1350caccdb50e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后去数据库里修改几个课程机构的类别，便于我们后续的进行：<img src="https://upload-images.jianshu.io/upload_images/8964398-6ac1db48b2b65f74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不过这样还是不行的，我们需要对城市信息与机构分类进行联动，也就是说可以进行二次选择，可以选择所有在北京市的培训机构，而不是只能显示全北京市的机构（包括培训机构，个人和高校），下面我们在org-list.html页面进行修改代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> &lt;a href=&quot;?city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">    class=&quot;&#123;% ifequal category &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">     &lt;a href=&quot;?ct=pxjg&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">      class=&quot;&#123;% ifequal category &apos;pxjg&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;培训机构&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;?ct=gx&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">   class=&quot;&#123;% ifequal category &apos;gx&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;高校&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> &lt;a href=&quot;?ct=gr&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;&lt;span</span><br><span class="line">class=&quot;&#123;% ifequal category &apos;gr&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;个人&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id &apos;&apos; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;全部&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">   &#123;% for city in all_citys %&#125;</span><br><span class="line">    &lt;a href=&quot;?city=&#123;&#123; city.id &#125;&#125;&amp;ct=&#123;&#123; category &#125;&#125;&quot;&gt;&lt;span class=&quot;&#123;% ifequal city_id city.id|stringformat:&quot;i&quot; %&#125;active2&#123;% endifequal %&#125;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">  &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-7786551b09c6dce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们刷新一下我们的页面，可以发现已经可以联动了：<img src="https://upload-images.jianshu.io/upload_images/8964398-b8a42851a3a57ad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不过右边的机构数量统计错了，我们刚才统计机构数目过早，应该移到后面，在已经筛选过后，才能开始统计，所以只需要把刚才用于统计的那行代码挪到筛选代码的后面即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 统计课程机构的数量</span><br><span class="line">org_nums = all_orgs.count()</span><br></pre></td></tr></table></figure></p><p>就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-417ee84c809220b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>再来刷新一下我们的页面，发现课程机构数量统计没有问题！</p><h3 id="授课机构排名"><a href="#授课机构排名" class="headerlink" title="授课机构排名"></a>授课机构排名</h3><p>授课机构排名就是图片中右边的那个，我们根据课程机构的点击数来进行排名：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9c7e1f77fee30cab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 授课机构的排名</span><br><span class="line">       hot_orgs = all_orgs.order_by(&quot;click_nums&quot;)[:3]  # 返回的是一个QueryDict我们取前三个</span><br></pre></td></tr></table></figure></p><p>然后我们在org-list.html页面进行修改代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;right companyrank layout&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;head&quot;&gt;授课机构排名&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &#123;% for current_org in hot_orgs %&#125;</span><br><span class="line">                &lt;dl class=&quot;des&quot;&gt;</span><br><span class="line">                    &lt;dt class=&quot;num fl&quot;&gt;&#123;&#123; forloop.counter &#125;&#125;&lt;/dt&gt;</span><br><span class="line">                    &lt;dd&gt;</span><br><span class="line">                        &lt;a href=&quot;/company/2/&quot;&gt;&lt;h1&gt;&#123;&#123; current_org.name &#125;&#125;&lt;/h1&gt;&lt;/a&gt;</span><br><span class="line">                        &lt;p&gt;&#123;&#123; current_org.address &#125;&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/dd&gt;</span><br><span class="line">                &lt;/dl&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>其中<strong></strong>是Django内置的用于统计循环变量循环到第几次的次数。</p><p>完成以后，我们再来刷新一下我们的页面，发现授课机构排名没有问题！</p><h3 id="学习人数和课程人数排名"><a href="#学习人数和课程人数排名" class="headerlink" title="学习人数和课程人数排名"></a>学习人数和课程人数排名</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5dbfcd8450656ea6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>其实这个功能和前面介绍的几个功能很相似，这里就简单介绍一下(步骤和前面的类似)</p><p>首先打开我们的organization/views.py文件，在里面添加如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> # 学习人数和课程人数排名</span><br><span class="line">        sort = request.GET.get(&apos;sort&apos;, &apos;&apos;)</span><br><span class="line">        if sort:</span><br><span class="line">            if sort == &quot;students&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-students&quot;)</span><br><span class="line">            elif sort == &quot;courses&quot;:</span><br><span class="line">                all_orgs = all_orgs.order_by(&quot;-course_nums&quot;)</span><br><span class="line"></span><br><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;sort&quot;: sort,</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后我们在org-list.html页面进行修改代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;tab_header&quot;&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% if sort == &apos;&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;全部&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% if sort == &apos;students&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=students&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;学习人数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;&#123;% if sort == &apos;courses&apos; %&#125;active&#123;% endif %&#125;&quot;&gt;&lt;a href=&quot;?sort=courses&amp;ct=&#123;&#123; category &#125;&#125;&amp;city=&#123;&#123; city_id &#125;&#125;&quot;&gt;课程数 &amp;#8595;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p><code>sort=students&amp;ct=&amp;city=</code>和<code>sort=courses&amp;ct=&amp;city=</code>也是为了和前面的保持联动状态。</p><p>完成以后刷新一下我们的页面，看上面的各个功能是不是都实现了。</p><p>至此本篇关于列表分页，分类筛选，课程机构排序以及学习人数和课程人数排名等功能的介绍就到此为止了，感谢你的赏阅。</p><p>本篇笔记对应于第十六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十五）：模板继承应用</title>
      <link href="/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%BA%94%E7%94%A8/"/>
      <url>/2018/04/12/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将开始进入课程机构前端页面的配置，你会了解到模板继承，城市筛选，数量统计等功能的实现。</p><p>本篇笔记对应于第十五篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p>通过观察，我们发现很多页面都是有相同的结构，例如header和footer都是一样的，我们是不是可以考虑单独给它们分别放在2个HTML页面里面，然后当需要用到的时候，可以include进来，这就是早期的模板继承原理。不过这个只能用于那些页面是固定的内容，也就是说如果要根据自己的想法随意对include进来的页面进行修改这是不可能的。鉴于此，人们在吸收了挖坑填坑的思想之后，提出了一种新的方法：子本继承父本，将需要修改的地方挖坑，然后采用不同的方式来填坑，这样就解决了这个问题（类似于子类继承父类的方法）。这就是模板继承的原理！</p><h3 id="新建父本base-html页面"><a href="#新建父本base-html页面" class="headerlink" title="新建父本base.html页面"></a>新建父本base.html页面</h3><p>在templates文件夹中新建base.html，同时将前端页面org-list.html拷贝到我们的templates里面，然后把org-list.html的全部内容复制粘贴到base.html页面中来，然后收起标签，成了下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-951378b0913cde32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后配置静态的文件相对路径，只需要修改图中的即可：<img src="https://upload-images.jianshu.io/upload_images/8964398-f520be33b0d7d8aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="开始定义父本挖坑操作"><a href="#开始定义父本挖坑操作" class="headerlink" title="开始定义父本挖坑操作"></a>开始定义父本挖坑操作</h3><p><strong>1、</strong>每个org-list网页的标题会发生变化，所以修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;&#123;% block title%&#125;课程机构列表 - 慕海学习网&#123;% endblock %&#125;&lt;/title&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、</strong>每个页面都具有公共的js和css，但又具有各自特殊的js和css,所以修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block custom_css %&#125;&#123;% endblock %&#125;</span><br><span class="line">   </span><br><span class="line">&#123;% block custom_js %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p><p>公共的js和css都不变，允许自定义样式,12步就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-1aa029676ec8970d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>3、</strong>面包屑和内容的修改如下：<img src="https://upload-images.jianshu.io/upload_images/8964398-9866905c7c073e7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>至此，我们的base.html的配置就差不多完成了，接下来是对它的引用！</p><hr><p><strong>非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>页面的继承关系可以让我们直接使用变量，比如user中的表单数据传递到register页面当中（register页面继承了base页面）那么你在base页面当中也是可以使用这些数据的。这就是参数的向上传递！</p><h2 id="课程机构列表页面数据显示"><a href="#课程机构列表页面数据显示" class="headerlink" title="课程机构列表页面数据显示"></a>课程机构列表页面数据显示</h2><p>通过观察页面，我们确定哪些数据是动态的，哪些是静态的，动态的需要从后台来显示，静态的可以通过HTML代码直接实现：（红色为动态，蓝色为静态）<img src="https://upload-images.jianshu.io/upload_images/8964398-c7ab19fbc71b15ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>登录xadmin后台管理系统，新增10个城市信息，10门课程信息数据：<img src="https://upload-images.jianshu.io/upload_images/8964398-b2d5fb55ac4964ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在新建课程信息之前，我们需要配置文件的上传路径，打开eduline/settings.py文件，在里面加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置我们上传文件的路径</span><br><span class="line">MEDIA_URL = &apos;/media/&apos;</span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;media&apos;)</span><br></pre></td></tr></table></figure></p><p>然后在主目录下新建media文件夹，用于存放上传文件：<img src="https://upload-images.jianshu.io/upload_images/8964398-d4bcf4b7e59d7292.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>完成上面2步之后就可以增加10门课程信息数据了：<img src="https://upload-images.jianshu.io/upload_images/8964398-cc53a401c45686bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看media 文件夹，里面10张图片，就是10个课程机构的logo:<img src="https://upload-images.jianshu.io/upload_images/8964398-a1b15d6beccc000e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后继续完善我们的organization/views.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from .models import CityDict, CourseOrg</span><br><span class="line"></span><br><span class="line"># 课程机构列表功能</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 查找所有的城市信息</span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line">        # 查找所有的课程机构信息</span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_citys&quot;: all_citys,</span><br><span class="line">            &quot;all_orgs&quot;: all_orgs</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-73a77d4bbbd44c5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在是回填动态的城市信息：在org_list页面，找到如下代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-dce4379331b73317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们使用Django自带的for循环来从刚才获取到的城市信息中回填城市，并显示出来,修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for city in all_citys %&#125;</span><br><span class="line"> &lt;a href=&quot;?city=1&amp;ct=&quot;&gt;&lt;span class=&quot;&quot;&gt;&#123;&#123; city.name &#125;&#125;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>就是下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-285303ded183631a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>运行一下我们的项目：<img src="https://upload-images.jianshu.io/upload_images/8964398-5eab727aec52c11b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在城市就是动态的信息了，不再是被前端人员写死的页面了。同理我们现在把课程信息也给显示出来：<img src="https://upload-images.jianshu.io/upload_images/8964398-6e23e22834aec557.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>通过折叠代码分析发现，每一个des 就是一个课程，所以我们继续刚才的操作，把多余的删掉，保留一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for course_org in all_orgs %&#125;</span><br><span class="line">               &lt;dl class=&quot;des difdes&quot;&gt;</span><br><span class="line">       </span><br><span class="line">               &lt;/dl&gt;  </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>接下来对<code>&lt;dl class=&quot;des difdes&quot;&gt; &lt;/dl&gt;</code>里面的内容进行分析：<img src="https://upload-images.jianshu.io/upload_images/8964398-938ce441597a6c66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们尝试利用对象的属性来获取图片的地址，也就是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-url=&quot;&#123;&#123; course_org.image &#125;&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>对，正如你想的那样，这其实获得只是图片的相对路径，系统根本找不到我们前面定义的路径。而且我们在数据库中的图片地址其实是字符串类型，也更加证明了这一点：<img src="https://upload-images.jianshu.io/upload_images/8964398-4c8626f632025173.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>因此，我们需要补全地址，变成下面这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data-url=&quot;&#123;&#123; MEDIA_URL &#125;&#125;&#123;&#123; course_org.image &#125;&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>不过这样还不够，我们需要配置图片处理器,打开eduline/settings.py文件，找到TEMPLATES，在后面添加一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 图片处理器，可以使&#123;&#123; MEDIA_URL &#125;&#125;产生作用</span><br><span class="line"> &apos;django.template.context_processors.media&apos;,</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-48130398902facc9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后刷新一下我们的页面，发现图片还是没有加载出来，那是因为path中没有处理图片相应路径的url，我们需要配置一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.views.static import serve</span><br><span class="line">from eduline.settings import MEDIA_ROOT</span><br><span class="line"></span><br><span class="line"> # 配置文件上传的访问处理url</span><br><span class="line"> re_path(&apos;media/(?P&lt;path&gt;.*)&apos;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT &#125;),</span><br></pre></td></tr></table></figure></p><p>然后再来刷新一下:<img src="https://upload-images.jianshu.io/upload_images/8964398-30b11d8e90c020c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>成功了！</p><p>接下来，我们来统计课程机构的数量，打开organization/views.py文件，我们修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构列表功能</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 查找所有的城市信息</span><br><span class="line">        all_citys = CityDict.objects.all()</span><br><span class="line">        # 查找所有的课程机构信息</span><br><span class="line">        all_orgs = CourseOrg.objects.all()</span><br><span class="line">        # 统计课程机构的数量</span><br><span class="line">        org_nums = all_orgs.count()</span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_citys&quot;: all_citys,</span><br><span class="line">            &quot;all_orgs&quot;: all_orgs,</span><br><span class="line">            &quot;org_nums&quot;: org_nums</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>然后在org_list页面找到共的位置，填写这个变量：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c16d4ae5f7939a55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>至此，本篇关于模板继承，城市筛选，数量统计等功能的实现就介绍到这里，感谢你的赏阅。</p><p>本篇笔记对应于第十五篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十四）：用户密码找回</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记我们将实现用户的激活，用户密码找回，重置密码，修改密码等功能，前面所介绍的知识大家没事可以复习一下，加深对知识的理解和应用，后面很多东西就是前面讲过的知识的应用。</p><p>本篇笔记对应于第十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="用户激活的操作"><a href="#用户激活的操作" class="headerlink" title="用户激活的操作"></a>用户激活的操作</h2><p>打开我们的Navicat，去数据库中找到我们的用户信息表：<img src="https://upload-images.jianshu.io/upload_images/8964398-689a06f410addd9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这里面有个字段<strong>is_active</strong>，它是用来判别用户是否激活的，默认是未激活也就是0，这里都是1肯定是不行的，所以我们需要定义激活用户的函数，来完成用户的激活操作。</p><p>先配置一下路径path，打开eduline/urls.py文件，在里面添加一行代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import  re_path</span><br><span class="line">from users.views import ActiveUserView  #ActiveUserView目前未定义，后面马上定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 激活用户url</span><br><span class="line">re_path(&apos;active/(?P&lt;active_code&gt;.*)/&apos;, ActiveUserView.as_view(), name=&quot;user_active&quot;)</span><br></pre></td></tr></table></figure></p><p><code>&#39;active/(?P&lt;active_code&gt;.*)/&#39;</code>是正则表达式模式，用于匹配验证码！</p><p>打开users/views.py文件，我们设置默认未激活：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认激活状态为False，也就是未激活</span><br><span class="line">user_profile.is_active = False</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ff871e44a48a1a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>并且在下面新增代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line"># 用于实现用户激活操作的函数</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line"> </span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                user = UserProfile.objects.filter(email=email)</span><br><span class="line">                user.is_active = True #激活用户</span><br><span class="line">                user.save()</span><br><span class="line">                # 激活成功跳转到登录页面</span><br><span class="line">            return render(request, &quot;login.html&quot;)</span><br></pre></td></tr></table></figure></p><p>现在回到我们的LoginView函数，我们当时没有判断用户是否激活，现在需要判断，修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if user is not None:</span><br><span class="line">               if user.is_active:</span><br><span class="line">                   # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                   login(request, user)</span><br><span class="line">                   # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                   return render(request, &quot;index.html&quot;)</span><br><span class="line">               else:</span><br><span class="line">                   return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户未激活！&apos;&#125;)</span><br><span class="line">           else:</span><br><span class="line">               # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回</span><br><span class="line">               return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9a7583795e3c7256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>将数据表中的<a href="mailto:licheetools@sina.cn" target="_blank" rel="noopener">licheetools@sina.cn</a>    用户的is_active修改为0，我们来测试一下，在图中所示位置打上断点，开始调试：<img src="https://upload-images.jianshu.io/upload_images/8964398-0d1caf9841f6cadc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们的用户测试激活调试没有问题，再来看一下验证码激活：我们去新浪邮箱，将获取到的链接访问一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请点击下面的链接激活你的账号: http://127.0.0.1:8000/active/HekaM6EfZfeKy1Zc</span><br></pre></td></tr></table></figure></p><p>按图示来测试一下，也没有问题！</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-9b8d2ed7e01b277c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，我们完成了邮箱验证码的激活以及用户的激活。</p><p>不过我们还有两个问题，一个就是前面没有判断邮箱是否已经存在，我们不能用旧的邮箱来注册，所以我们需要配置一下，打开users/views.py文件，修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request):</span><br><span class="line">    # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的信息</span><br><span class="line">    register_form = RegisterForm(request.POST)</span><br><span class="line">    if register_form.is_valid():</span><br><span class="line">        user_name = request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">        if UserProfile.objects.filter(email=user_name):</span><br><span class="line">            # register_form回填信息必须有，msg是信息提示</span><br><span class="line">            return render(request, &apos;register.html&apos;, &#123;&apos;register_form&apos;: register_form&#125;, &#123;&apos;msg&apos;: &apos;该邮箱已被注册过了&apos;&#125;)</span><br><span class="line">        else:</span><br><span class="line">            # password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            pass_word = request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line">            # 实例化一个user_profile对象，存入前端页面获取的值</span><br><span class="line">            user_profile = UserProfile()</span><br><span class="line">            user_profile.username = user_name</span><br><span class="line">            user_profile.email = user_name</span><br><span class="line"></span><br><span class="line">            # 默认激活状态为False，也就是未激活</span><br><span class="line">            user_profile.is_active = False</span><br><span class="line"></span><br><span class="line">            # 对password进行加密并保存</span><br><span class="line">            user_profile.password = make_password(pass_word)</span><br><span class="line">            user_profile.save()</span><br><span class="line">            send_register_eamil(user_name, &apos;register&apos;)</span><br><span class="line">            pass</span><br></pre></td></tr></table></figure></p><p>另一个就是我们对于链接的处理不够完善，正如你所了解的那样，链接肯定有有效时间，在这个规定的时间内点击才有用，过了规定时间就没有用，所以我们需要新建一个链接超时的html文件：新建<strong>active_fail.html</strong>文件，里面就几行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;链接失效&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;对不起，链接失效了&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>然后我们来users/views.py文件，修改一下激活的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户激活操作的函数</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                user = UserProfile.objects.filter(email=email)</span><br><span class="line">                user.is_active = True</span><br><span class="line">                user.save()</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;active_fail.html&quot;)</span><br><span class="line">        # 激活成功跳转到登录页面</span><br><span class="line">        return render(request, &quot;login.html&quot;)</span><br></pre></td></tr></table></figure></p><p>按照图示打上断点并开始调试：<img src="https://upload-images.jianshu.io/upload_images/8964398-c2e97efa56488de3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>调试没有问题！</p><p>好，解决了上面两个问题之后，下面我们来进行忘记密码，找回密码的操作。</p><h2 id="忘记密码的操作"><a href="#忘记密码的操作" class="headerlink" title="忘记密码的操作"></a>忘记密码的操作</h2><h3 id="拷贝forgetpwd页面"><a href="#拷贝forgetpwd页面" class="headerlink" title="拷贝forgetpwd页面"></a>拷贝forgetpwd页面</h3><p>将<strong>forgetpwd.html</strong>页面拷贝到我们的templates文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-2cf4e7d30eb40eea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="定义（忘记）找回密码的视图"><a href="#定义（忘记）找回密码的视图" class="headerlink" title="定义（忘记）找回密码的视图"></a>定义（忘记）找回密码的视图</h3><p>打开users/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户忘记码（找回密码）的函数</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>然后在eduline/urls.py文件里面配置url信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import  ForgetPwdView</span><br><span class="line"></span><br><span class="line"># 找回密码url，注意是普通的url</span><br><span class="line">path(&quot;forget/&quot;, ForgetPwdView.as_view(), name=&quot;forget_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>接下来配置跳转路径，首先ctrl+F 搜索<strong>login.html</strong>,找到忘记密码，修改href属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;fr&quot; href=&quot;forgetpwd.html&quot;&gt;忘记密码？&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-5dbefe1d42ea6315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;fr&quot; href=&quot;&#123;% url &apos;forget_pwd&apos; %&#125;&quot;&gt;忘记密码？&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><strong>注意外部有双引号，里面就只能使用单引号。</strong></p><p>接着继续修改<strong>forgetpwd.html</strong>页面的跳转链接，一样的操作，这里就不演示了！</p><p>现在运行一下我们的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/forget/，出现了：![](https://upload-images.jianshu.io/upload_images/8964398-37f7bdbd37ebfc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/forget/，出现了：![](https://upload-images.jianshu.io/upload_images/8964398-37f7bdbd37ebfc15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：<a href="https://www.jianshu.com/p/9019d6de27ae" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、页面第三行加上&#123;% load staticfiles %&#125;</span><br><span class="line">2、修改全部类型文件的static相对路径</span><br><span class="line">3、修改其中的url，配置跳转链接</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-577753e9e07b4f51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>配置完刷新一下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-b378d9c411266bcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用户找回密码时的表单，注意字段与前端页面保持一致</span><br><span class="line">class ForgetForm(forms.Form):</span><br><span class="line">    email = forms.CharField(required=True)  # 用户名不能为空</span><br><span class="line">    captcha = CaptchaField(error_messages=&#123;&quot;invalid&quot;: &quot;验证码错误&quot;&#125;)</span><br></pre></td></tr></table></figure></p><p>接着回到我们的views.py文件，继续完善ForgetPwdView：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from users.forms import  ForgetForm</span><br><span class="line"></span><br><span class="line"># 用于实现用户忘记码（找回密码）的函数</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        forget_form = ForgetForm()</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;)</span><br></pre></td></tr></table></figure></p><p>然后回到我们的forgetpwd.html页面，我们删除captcha那一行，并修改为：<img src="https://upload-images.jianshu.io/upload_images/8964398-770faa6555d646d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group captcha1 marb38&quot;&gt;</span><br><span class="line">                        &lt;label&gt;验&amp;nbsp;证&amp;nbsp;码&lt;/label&gt;</span><br><span class="line">                        &#123;&#123; forget_form.captcha &#125;&#125;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>我们再来刷新一下我们的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-dba85389b2810052.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>页面正常显示了！</p><p>既然我们是找回密码，那么我们肯定需要发送邮件，我们前面新建了发送失败的html页面，那我们肯定也需要新建一个发送成功的html页面吧,新建<strong>send_success.html</strong>文件：<img src="https://upload-images.jianshu.io/upload_images/8964398-0700d1c263d79d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;邮件发送成功&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;邮件已发送，请注意查收！&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>还是回到我们的views.py文件，继续完善ForgetPwdView的post方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户忘记码（找回密码）的函数</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        forget_form = ForgetForm()</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;)</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        forget_form = ForgetForm(request.POST)</span><br><span class="line">        if forget_form.is_valid():</span><br><span class="line">            email = request.POST.get(&apos;email&apos;, &apos;&apos;)</span><br><span class="line">            # 发送找回密码的邮件</span><br><span class="line">            send_register_eamil(email, &apos;forget&apos;)</span><br><span class="line">            return render(request, &apos;send_success.html&apos;)</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;forgetpwd.html&quot;, &#123;&apos;forget_form&apos;: forget_form&#125;)</span><br></pre></td></tr></table></figure></p><p>再回到前端页面，看看这些是不是都修改完了：<img src="https://upload-images.jianshu.io/upload_images/8964398-6a6e6f7a1bf8b13c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>还有页面的提示信息也要修改（参考前面的介绍）：<img src="https://upload-images.jianshu.io/upload_images/8964398-63fb69409a287ab3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，我们密码找回就已经完成了，我们来测试一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f40edd5a85d88efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-f7baf6b767bf6f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-eb392ec907dc3a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>测试成功了！</p><p>下面完成重置密码和修改密码的操作！</p><h2 id="重置密码的操作"><a href="#重置密码的操作" class="headerlink" title="重置密码的操作"></a>重置密码的操作</h2><h3 id="拷贝password-reset-html页面"><a href="#拷贝password-reset-html页面" class="headerlink" title="拷贝password_reset.html页面"></a>拷贝password_reset.html页面</h3><p>将<strong>password_reset.html</strong>页面拷贝到我们的templates文件夹里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-c0160afd89704377.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="定义重置密码的视图"><a href="#定义重置密码的视图" class="headerlink" title="定义重置密码的视图"></a>定义重置密码的视图</h3><p>打开users/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户重置密码的函数</span><br><span class="line">class ResetView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 用于查询邮箱验证码是否存在</span><br><span class="line">        all_record = EmailVerifyRecord.objects.filter(code=active_code)</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email = record.email</span><br><span class="line">                # 查找到邮箱对应的用户</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email&#125;)   # 告诉页面是哪个用户在重置密码</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;active_fail.html&quot;)</span><br><span class="line">        # 激活成功跳转到登录页面</span><br><span class="line">        return render(request, &quot;login.html&quot;)</span><br></pre></td></tr></table></figure></p><p>然后在eduline/urls.py文件里面配置url信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import  ResetView</span><br><span class="line"></span><br><span class="line"> # 密码重置url</span><br><span class="line">    re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>接下来我们在页面隐式回填刚才的email，在<strong>password_reset.html</strong>页面，添加下面一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;&#123;&#123; email &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-bc1cb52f0b368592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在调试一下我们的项目，在图示位置打上断点：<img src="https://upload-images.jianshu.io/upload_images/8964398-310aae9aade6db7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着我们登录新浪邮箱（前面是QQ邮箱就用QQ邮箱），查找我们的之前的重置密码邮件：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-44ed0d322f3398f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着将重置密码链接复制到浏览器地址栏打开，页面进入到Pycharm出现了：<img src="https://upload-images.jianshu.io/upload_images/8964398-1e212ddba3a46e51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后step out结束：<img src="https://upload-images.jianshu.io/upload_images/8964398-57a40adbebe992e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>还记得我们刚才在里面加的那个input么，它的作用是告知页面哪个用户此时此刻正在重置密码，我们点击查看网页源代码，看是不是input起了作用：<img src="https://upload-images.jianshu.io/upload_images/8964398-58227cfa325da20c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，确实起了作用，不过我们除非查看了源码，否则是看不到的！</p><p>不过样式没有加载出来，我们需要和前面的一样，加上静态相对路径，忘记的小伙伴可以查看第十一篇笔记：<a href="https://www.jianshu.com/p/9019d6de27ae" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、页面第三行加上&#123;% load staticfiles %&#125;</span><br><span class="line">2、修改全部类型文件的static相对路径</span><br><span class="line">3、修改其中的url，配置跳转链接</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-a8daf97ac6ab3696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>配置完以后我们刷新页面会出错，这是正常现象，因为我们在url跳转时缺少参数，这个先放在这里（如果你为了不影响心情，可以不刷新页面）！</p><p>刚才那个页面其实也是一个表单，所以需要定义form表单，我们可以仿照注册的表单来书写，打开我们的users/forms.py文件，在里面添加一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 用户修改密码时的表单，注意字段与前端页面保持一致</span><br><span class="line">class ModifyPwdForm(forms.Form):</span><br><span class="line">    password1 = forms.CharField(required=True, min_length=5)  # 新密码不能为空</span><br><span class="line">    password2 = forms.CharField(required=True, min_length=5)  # 确认密码不能为空</span><br></pre></td></tr></table></figure></p><p>记得与前端页面字段一致：<img src="https://upload-images.jianshu.io/upload_images/8964398-74dd66ddb34d19a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着回到我们的views.py文件，继续完善ResetView：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from users.forms import  ModifyPwdForm</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        modify_form = ModifyPwdForm(request.POST)</span><br><span class="line">        if modify_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;)</span><br><span class="line">            pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;)</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            # 如果前后两次密码不相等，那么回填信息并返回错误提示</span><br><span class="line">            if pwd1 != pwd2:</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;)</span><br><span class="line">            # 如果前后两次密码相等，那么进入我们的密码修改保存</span><br><span class="line">            # 取出用户信息</span><br><span class="line">            user = UserProfile.objects.get(email=email)</span><br><span class="line">            # 随意取出一个密码并将其进行加密</span><br><span class="line">            user.password = make_password(pwd1)</span><br><span class="line">            # 将更新后的用户信息保存到数据库里面</span><br><span class="line">            user.save()</span><br><span class="line">            # 密码重置成功以后，跳转到登录页面</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;)</span><br><span class="line">        else:</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;)</span><br></pre></td></tr></table></figure></p><p>我们现在来解决刚才url出错的问题，我们在path中的配置是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(&apos;reset/(?P&lt;active_code&gt;.*)/&apos;, ResetView.as_view(), name=&quot;reset_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>它和我们普通的path不一样，里面有一个匹配active_code的正则表达式，所以在前端页面不能和普通的url那样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=&quot;&#123;% url &apos;reset_pwd&apos; %&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>既然不能这样写，那我们可以用一个普通的path来定义它，作用是修改密码即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import  ModifyPwdView</span><br><span class="line"></span><br><span class="line"># 修改密码url</span><br><span class="line">path(&quot;modify/&quot;, ModifyPwdView.as_view(), name=&quot;modify_pwd&quot;),</span><br></pre></td></tr></table></figure></p><p>这里面的ModifyPwdView是我们新建的视图函数，可以将前面的ResetView中的post方法脱离出来，成为ModifyPwdView的一部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 用于实现用户修改密码的函数</span><br><span class="line">class ModifyPwdView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        modify_form = ModifyPwdForm(request.POST)</span><br><span class="line">        if modify_form.is_valid():</span><br><span class="line">            pwd1 = request.POST.get(&quot;password1&quot;, &apos;&apos;)</span><br><span class="line">            pwd2 = request.POST.get(&quot;password2&quot;, &apos;&apos;)</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            # 如果前后两次密码不相等，那么回填信息并返回错误提示</span><br><span class="line">            if pwd1 != pwd2:</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;对不起，前后密码不一致&quot;&#125;)</span><br><span class="line">            # 如果前后两次密码相等，那么进入我们的密码修改保存</span><br><span class="line">            # 取出用户信息</span><br><span class="line">            user = UserProfile.objects.get(email=email)</span><br><span class="line">            # 随意取出一个密码并将其进行加密</span><br><span class="line">            user.password = make_password(pwd1)</span><br><span class="line">            # 将更新后的用户信息保存到数据库里面</span><br><span class="line">            user.save()</span><br><span class="line">            # 密码重置成功以后，跳转到登录页面</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;恭喜您，您的密码修改成功，请登录&quot;&#125;)</span><br><span class="line">        else:</span><br><span class="line">            email = request.POST.get(&quot;email&quot;, &apos;&apos;)</span><br><span class="line">            return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modify_form&quot;: modify_form&#125;)</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-93104c4150de4e03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后修改前端页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;reset_password_form&quot; action=&quot;&#123;% url &apos;modify_pwd&apos; %&#125;&quot; method=&quot;post&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>也就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-c7cf843ced54c659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在图示位置打上断点,开始调试我们的项目，具体操作和前面类似，这里就不介绍了。<img src="https://upload-images.jianshu.io/upload_images/8964398-460688e374b3afe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>复制密码重置链接去浏览器地址栏打开，输入新的密码：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-b4d17a5ce747ad8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>然后点击提交按钮，就进入下面的Pycharm页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f495897e541f5a28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>注意：如果点击提交按钮没有反应，页面没有进入view.py里面的方法，可能是按钮的类型错了，type=”submit”而不是type=”button”，也就是这个样子：</strong><img src="https://upload-images.jianshu.io/upload_images/8964398-76b3224e0ce4817c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>最后，修改<strong>password_reset.html</strong>的错误信息的提示：<img src="https://upload-images.jianshu.io/upload_images/8964398-70c9aca9f3044fe0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>前面说了这么多调试命令，小伙伴们可能会不太明白其中的意思，下面我详细介绍一下Pycharm是如何调试代码的！</p><h2 id="Pycharm中的调试"><a href="#Pycharm中的调试" class="headerlink" title="Pycharm中的调试"></a>Pycharm中的调试</h2><p>如果你熟悉Eclipse，那你肯定知道它的快捷键：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F5：跳入方法</span><br><span class="line">F6：向下逐行调试</span><br><span class="line">F7：跳出方法</span><br><span class="line">F8：直接跳转到下一个断点</span><br></pre></td></tr></table></figure></p><p>当然Pycharm也是可以采用Eclipse的快捷键来调试代码的，具体设置方法如下：</p><p>点击File–&gt; Settings–&gt; Apperance–&gt; Keymap–&gt; 右侧下拉选Eclipse–&gt; Apply –&gt; OK这几步就完成了，没看懂的可以看下面的图片（记得按照序号的顺序来操作哈）</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-69b4a5a2982797df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>当然如果你没用过Eclipse，也不想记那些快捷键，这也是可以的，那看下面的图片：<img src="https://upload-images.jianshu.io/upload_images/8964398-b62f2965bd305534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这个页面你总是经常看到吧，下面分别解释一下各个键的名称及功能作用（括号内是默认的快捷键，也就是Pycharm自己设定的）：</p><hr><ul><li>1、step over（F8）作用是在同一个调用栈层中移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将在函数调用之后的下一条语句停止。调试器不会进入函数体。如果当前行是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。</li></ul><hr><hr><ul><li>2、step into（F7）作用是移动到下一个可执行的代码行。如果当前行是一个函数调用，则调试器将进入函数，并停止在函数体的第一行。step-into可以帮助初步揭开代码位置的谜团。例如，函数调用和函数本身可能在不同的文件中是函数的最后一行，则step-over将进入下一个栈层，并在调用函数的下一行停止。</li></ul><hr><hr><ul><li>3、Force step into（Ctrl+shift+F7）可以看做是step into的升级版本，可以越过代码，强力执行。</li></ul><hr><hr><ul><li>4、step-out（shift+F8）作用是在栈中前进到下一层，并在调用函数的下一行停止。</li></ul><hr><p>还有，如果你有多个断点，如何在pycharm中从第一个断点跳转至第二个断点呢？<br>例如第一个断点在第一行，第二个断点在第五十行，那么开始debug后，你首先停在第一行，随后点击菜单栏的Run-&gt; Resume Program即可跳转至第二个断点了，是不是很简单!</p><p>至此，关于用户的激活，用户密码找回，重置密码，修改密码，调试代码等功能的介绍就到此为止，感谢你的赏阅！</p><p>本篇笔记对应于第十四篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十三）：邮箱验证码实现</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9A%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要解决用户注册，验证码的实现，邮箱验证码的发送这3个问题。</p><p>本篇笔记对应于第十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><hr><p><strong>非常抱歉，由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><p>至此，本篇关于用户注册，验证码的实现，邮箱验证码的发送这3个问题的介绍就到此结束了，下一篇我们将实现用户的激活，用户密码找回等功能的实现，感谢你的赏阅。</p><p>本篇笔记对应于第十三篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十二）：错误信息提示</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E6%8F%90%E7%A4%BA/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E6%8F%90%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题。</p><p>本篇笔记对应于第十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="基于类的用户登录实现"><a href="#基于类的用户登录实现" class="headerlink" title="基于类的用户登录实现"></a>基于类的用户登录实现</h2><p>在前面我们实现用户登录是基于视图函数来实现的，也就是下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 当我们配置的url被这个view处理时，将会自动传入request对象.</span><br><span class="line">def user_login(request):</span><br><span class="line">    # 前端向后端发送的请求方式有两种: get和post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单时为post</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">        # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">        user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">        pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">        # 取值成功返回user对象,失败返回null</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录。</span><br><span class="line">            login(request, user)</span><br><span class="line">            # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">            return render(request, &apos;index.html&apos;)</span><br><span class="line">        else:</span><br><span class="line">            # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">    # 获取登录页面时为get</span><br><span class="line">    elif request.method == &quot;GET&quot;:</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>同时在eduline/urls.py文件的路径配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from users.views import user_login</span><br><span class="line"></span><br><span class="line">path(&apos;login/&apos;, user_login, name=&quot;login&quot;)</span><br></pre></td></tr></table></figure></p><p>现在我们采用<strong>基于类的方法来实现用户的登录</strong>，因为基于类可以便于重载和调用。下面是基于类的代码，小伙伴们试着体验一下两者的不同之处吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#  基于类实现用户的登录，它需要继承view</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 不需要判断，直接调用get方法</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    # 不需要判断，直接调用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">        user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">        pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">        # 取值成功返回user对象,失败返回null</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                login(request, user)</span><br><span class="line">            # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                return render(request, &quot;index.html&quot;)</span><br><span class="line">        else:</span><br><span class="line">            # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p>同时在eduline/urls.py文件的路径配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # 基于类的用户登录path配置</span><br><span class="line">path(&apos;login/&apos;, LoginView.as_view(), name=&quot;login&quot;)</span><br></pre></td></tr></table></figure></p><p>你是不是觉得很方便了，不用判断请求的方法类型，直接就可以调用了！不过现在有个疑问，如果用户在提交表单的时候，都不满足我们表单的要求，比方说我们要求密码不得少于5位数，不能为空等，那样我们还需要用刚才的方法去验证么，其实根本就可以不用验证，这就是非法的字符。因此，我们有必要在表单提交时就定义一个可以检查是否需要继续后续操作的验证方法。</p><p>我们继续往下进行：</p><p>我们打开users这个应用，在里面新建forms.py文件,然后在里面输入如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户登录表单的验证</span><br><span class="line">class LoginForm(forms.Form):</span><br><span class="line">    username = forms.CharField(required=True)  # 用户名不能为空</span><br><span class="line">    password = forms.CharField(required=True, min_length=5)  # 密码不能为空，而且最小6位数</span><br></pre></td></tr></table></figure></p><p>既然我们写好了表单的验证条件，接下来我们就把它用起来，继续回到我们的users/views.py文件，我们对登录函数做一个修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#  基于类实现用户的登录，它需要继承view</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 不需要判断，直接调用get方法,因为是获取信息，故这里不需要验证</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">    # 不需要判断，直接调用post方法</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 类的实例化需要一个字典dict参数，而前面我们就知道request.POST是一个QueryDict，所以可以直接传入POST中的username，password等信息</span><br><span class="line">        login_form = LoginForm(request.POST)</span><br><span class="line">        # is_valid()方法，用来判断我们所填写的字段信息是否满足我们在LoginForm中所规定的要求，验证成功则继续进行，失败就跳回login页面并重新输入信息</span><br><span class="line">        if login_form.is_valid():</span><br><span class="line">            # username，password为前端页面name的返回值，取到用户名和密码我们就开始进行登录验证;取不到时为空。</span><br><span class="line">            user_name = request.POST.get(&apos;username&apos;, &apos;&apos;)</span><br><span class="line">            pass_word = request.POST.get(&apos;password&apos;, &apos;&apos;)</span><br><span class="line">            # 取值成功返回user对象,失败返回null</span><br><span class="line">            user = authenticate(username=user_name, password=pass_word)</span><br><span class="line"></span><br><span class="line">            if user is not None:</span><br><span class="line">                # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">                login(request, user)</span><br><span class="line">                # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">                return render(request, &quot;login.html&quot;)</span><br><span class="line">            else:</span><br><span class="line">                # 说明里面的值是None，再次跳转回主页面并报错</span><br><span class="line">                return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p>现在我们又有一个疑问，假定你密码输入错误以后，你是不是只需要重新输入密码即可，用户名还是存在的，我们不希望还要去重新输入用户名。因此，我们的错误提示信息需要修改，继续完善我们的views.py文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if user is not None:</span><br><span class="line">               # login 有两个参数：request和user。我们在请求的时候，request实际上是写进了一部分信息，然后在render的时候，这些信息也被返回前端页面从而完成用户登录</span><br><span class="line">               login(request, user)</span><br><span class="line">               # 页面跳转至网站首页 user request也会被带回到首页，显示登录状态</span><br><span class="line">               return render(request, &quot;login.html&quot;)</span><br><span class="line">           else:</span><br><span class="line">               # 说明里面的值是None，再次跳转回主页面并报错，这里仅当用户密码出错时才返回</span><br><span class="line">               return render(request, &quot;login.html&quot;, &#123;&apos;msg&apos;: &apos;用户名或者密码错误！&apos;&#125;)</span><br><span class="line">       # 所填写的字段信息不满足我们在LoginForm中所规定的要求，验证失败跳回login页面并重新输入信息</span><br><span class="line">       else:</span><br><span class="line">           return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;)</span><br></pre></td></tr></table></figure></p><p>就是下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f0922a3d8665dd61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>注意：forms.py文件中的username和password必须和html中的保持一致，因为它是我们从request.POST中得到的（request.POST也是从前端页面获取到的）。</strong></p><h3 id="Debug测试一下"><a href="#Debug测试一下" class="headerlink" title="Debug测试一下"></a>Debug测试一下</h3><p>我们在views.py文件的<code>if login_form.is_valid():</code>处打上一个断点，开启调式模式：<br>我们不输入用户名，密码输ad这2个数，然后回车，页面进入Pycharm，单击一步步调试按钮，可以出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-37ddb4374e4425cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>放大一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-52ed0fcd97d236de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们知道，这个errors其实是一个ErrorDict,我们可以通过这个来获取错误信息的提示，然后把它放在前端页面即可，还记得我们说过如果表单提交验证不通过直接刷新返回到登录页面，就是这段代码起的作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">else:</span><br><span class="line">    return render(request, &quot;login.html&quot;, &#123;&quot;login_form&quot;: login_form&#125;)</span><br></pre></td></tr></table></figure></p><p>现在我们在前端登录页面<strong>login.html</strong>配置错误提示信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-19bbd93a187ad8b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>加上错误提示代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group marb20 &#123;% if login_form.errors.username %&#125;errorput&#123;% endif %&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;form-group marb8 &#123;% if login_form.errors.password %&#125;errorput&#123;% endif %&#125;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-8a69021b892bcf7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>仅仅这样还不够，我们需要将forms.py文件里定义的错误信息给显示出来，那需要修改并添加一下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;error btns login-form-tips&quot; id=&quot;jsLoginTips&quot;&gt;</span><br><span class="line">                        &#123;% for key,error in login_form.errors.items %&#125;</span><br><span class="line">                            &#123;&#123; error &#125;&#125;</span><br><span class="line">                        &#123;% endfor %&#125;</span><br><span class="line">                        &#123;&#123; msg &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-0a4189a14f305825.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们现在运行一下我们的项目：runserver一下，不写任何信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-c9a416899bb5b626.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="cookie和session自动登录"><a href="#cookie和session自动登录" class="headerlink" title="cookie和session自动登录"></a>cookie和session自动登录</h2><h3 id="cookie的用途"><a href="#cookie的用途" class="headerlink" title="cookie的用途"></a>cookie的用途</h3><p>正如你所知道的http请求是一种无状态的请求，也就是说每次请求是独立的。假如用户向服务器发起两次请求，那么这两次请求是没有状态的，服务器不知道这两次请求都是同一个用户发起的。</p><p>所以为了解决这个无状态请求，人们引入了cookie这个概念，这使得每次请求变得有状态起来：<img src="https://upload-images.jianshu.io/upload_images/8964398-b0c66867c3766c51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><strong>记住cookie是不能跨域访问的！</strong><br>我们以chrome浏览器为例，打开百度的首页，并按键盘上的F12（或者ctrl+shift+I），开启监控模式：<img src="https://upload-images.jianshu.io/upload_images/8964398-f12f77c558e25229.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后我们尝试清空一下cookies,重新刷新一下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-7c371503fee8cb09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>cookie又出现了，所以cookie可以把你的用户名和密码保存在浏览器本地。</p><p>不过这样做有个坏处，那就是你的密码和用户名都是缓存在本地的，一旦别人拿到你的电脑，那你的信息将被剽窃，非常不安全。</p><p>那么我们在想有没有一种可以把数据缓存在服务器，然后发给用户的只是类似于钥匙的东西，而且这个钥匙最好是有过期时间，这样人家就算拿到你的电脑，也只是知道类似于钥匙的东西还必须在规定的时间内才能打开，这样一来安全得到了非常好的保证，session就是在满足这些条件下诞生的。</p><h3 id="session的安全护航"><a href="#session的安全护航" class="headerlink" title="session的安全护航"></a>session的安全护航</h3><p>用户在向服务器发起第一次请求后，服务器会给用户随机地分派一个id（可以是用户的user id，也可以一段任意的字符串），我们把它叫做session id。这个session id是服务器采用自己的规则生成，它保存在本地cookie里面。当用户再次发起请求时，这个session id会上传至服务器，服务器接收后会识别它，并返回相关的信息。</p><p>我们登录的session就是这样：<br>1、用户输入用户名 &amp;和密码，点击提交；<br>2、调用 login()命令, 后端程序会根据用户名密码生成session id并保存在数据库中；<br>3、用户登录之后，需要通过这个session id取出相关的基本信息。</p><p>我们打开我们的navicat,去我们的数据库中找到我们Django自带的session表：<img src="https://upload-images.jianshu.io/upload_images/8964398-d30f9f6454a9e296.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个表中是登录后才有的，如果你此刻没有登录，请先登录一下我们的后台管理系统：<img src="https://upload-images.jianshu.io/upload_images/8964398-7a75c875620a1e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你还可以清空我们这张表，然后重新登录试试，这里就不一一演示了（结果都是一样）。这个表中包含：session_key（钥匙）, session_data（数据）,expire_date（过期时间）。</p><p>我们运行一下我们的项目，用户先登录，然后我们按键盘上的F12（或者ctrl+shift+I），开启监控模式，查看cookie里面的信息是不是包含session id,而且主要检查数据是不是一样的：<img src="https://upload-images.jianshu.io/upload_images/8964398-aba2ba3c21c9a8cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，和我们刚才数据库中看到的一模一样，不过session_key 在浏览器就叫做session id了，名字不同而已。这主要归功于django自带的session功能：<img src="https://upload-images.jianshu.io/upload_images/8964398-32ba2ef208800b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>如果你对cookie和session的原理感兴趣，可以浏览这篇文章：<a href="http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">django从请求到返回都经历了什么?</a></p><p>至此，本篇关于解决登录页面时的另一种验证方法，错误信息提示，cookie和session介绍这3个问题的介绍就到此结束了，感谢你的赏阅！</p><p>本篇笔记对应于第十二篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十一）：登录页面实现</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从本篇笔记开始，我们就正式进入到前端页面的配置了，里面包含的信息很多，主要解决网站首页显示，发送接收验证码，用户注册，登录，密码找回，修改密码等问题。鉴于篇幅可能有点长，所以这里分3篇进行介绍，分别是第十一，十二，十三篇笔记。本篇笔记主要解决网站首页显示和登录页面的配置以及登录方式的自定义这3个问题。</p><p>本篇笔记对应于第十一篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="网站首页显示和登录页面的配置"><a href="#网站首页显示和登录页面的配置" class="headerlink" title="网站首页显示和登录页面的配置"></a>网站首页显示和登录页面的配置</h2><h3 id="放置前端网站首页index-html"><a href="#放置前端网站首页index-html" class="headerlink" title="放置前端网站首页index.html"></a>放置前端网站首页<strong>index.html</strong></h3><p>正如大家平时所看到的那样，一般网站首页都是直接在根目录下显示的，所以我们就要在我们的初始前端资料里面，把我们的<strong>index.html</strong>文件放在templates目录里面，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-423763d358b99931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="新建静态文件夹static"><a href="#新建静态文件夹static" class="headerlink" title="新建静态文件夹static"></a>新建静态文件夹<strong>static</strong></h3><p>在主项目树里面新建静态文件夹<strong>static</strong>，再在里面新建5个文件夹，用于放置css，img，images，js，media等文件。就是这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-4ae0006cb7b7eba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>前面说过Django的web开发是采用MTV模式的，现在如果我们想在浏览器中显示前端页面，我们只需要配置一下url就可以了。</p><h3 id="前端静态页面的URL的配置"><a href="#前端静态页面的URL的配置" class="headerlink" title="前端静态页面的URL的配置"></a>前端静态页面的URL的配置</h3><p>打开我们的eduline/urls.py文件，修改为如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from django.views.generic import TemplateView</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">    # 用&apos;&apos;指代根目录，TemplateView.as_view可以将template转换为view</span><br><span class="line">    path(&apos;&apos;, TemplateView.as_view(template_name=&apos;index.html&apos;), name=&apos;index&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接下来我们运行一下我们的项目:runserver,直接在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/或者http://127.0.0.1回车一下，出现：![](https://upload-images.jianshu.io/upload_images/8964398-0ba43f22a440a851.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/或者http://127.0.0.1回车一下，出现：![](https://upload-images.jianshu.io/upload_images/8964398-0ba43f22a440a851.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>我们的index页面已经成功加载出来了，但是很丑，因为样式还没有加载出来，我们需要配置一下路径。</p><h3 id="配置静态static文件的路径"><a href="#配置静态static文件的路径" class="headerlink" title="配置静态static文件的路径"></a>配置静态static文件的路径</h3><p>打开我们的eduline/settings.py文件，拉到最底下，添加修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &quot;static&quot;),  </span><br><span class="line"># 说明静态文件放在哪个目录,记住这里只能用列表或者元组，单一一个元组需要用,结尾</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>静态文件路径修改了，所以我们需要在前端页面代码里面对其引用路径都作修改：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-3c2d70b64446c2b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>将所有的<strong>../</strong>,全部替换为<strong>/static/</strong>，你可以使用ctrl+f，先查找出所有再替换也可以的：<img src="https://upload-images.jianshu.io/upload_images/8964398-44a93e401533e4ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-a6623ea8262c48da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接着，把我们前端资料里的文件都放在指定的文件夹里面（资料里都有文件夹名，而且都是和你刚才创建的名字一样）</p><p>偷懒的话可以直接复制粘贴相关文件。</p><p>现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-d2a1b75a13d632ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>说明我们的前端网站页面已经成功显示了。（如果出现页面残缺问题，可以使用本篇笔记上传的旧版前端资料。）</p><h2 id="登录页面的配置"><a href="#登录页面的配置" class="headerlink" title="登录页面的配置"></a>登录页面的配置</h2><h3 id="放置前端登录页面login-html"><a href="#放置前端登录页面login-html" class="headerlink" title="放置前端登录页面login.html"></a>放置前端登录页面<strong>login.html</strong></h3><p>在前端资料里面把我们的<strong>login.html</strong>文件放在templates目录里面，就是这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-306e252388da75b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="替换路径"><a href="#替换路径" class="headerlink" title="替换路径"></a>替换路径</h3><p>同样将所有的<strong>../</strong>,全部替换为<strong>/static/</strong>，你可以使用ctrl+f，先查找出所有再替换也可以的，这里就不细说了。</p><h3 id="登录页面的URL的配置"><a href="#登录页面的URL的配置" class="headerlink" title="登录页面的URL的配置"></a>登录页面的URL的配置</h3><p>打开我们的eduline/urls.py文件，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 登录url</span><br><span class="line">path(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot;</span><br></pre></td></tr></table></figure></p><h3 id="取消注释并修改登录路径"><a href="#取消注释并修改登录路径" class="headerlink" title="取消注释并修改登录路径"></a>取消注释并修改登录路径</h3><p>打开我们的<strong>index.html</strong>页面，找到第27,28行，取消注释（删除注释符号），再将里面的<strong>href=”login.html”</strong>修改为：<strong>href=”/login/“</strong>，再找到第30行代码，将一对<code>&lt;div class=&quot;personal&quot;&gt;   &lt;/div&gt;</code>给收起来，并注释掉，因为我们目前还用不到它。就是下面的一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--&lt;div class=&quot;personal&quot;&gt;</span><br><span class="line">                           &lt;dl class=&quot;user fr&quot;&gt;</span><br><span class="line">                               &lt;dd&gt;bobby&lt;img class=&quot;down fr&quot; src=&quot;/static/images/top_down.png&quot;/&gt;&lt;/dd&gt;</span><br><span class="line">                               &lt;dt&gt;&lt;img width=&quot;20&quot; height=&quot;20&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt;</span><br><span class="line">                           &lt;/dl&gt;</span><br><span class="line">                           &lt;div class=&quot;userdetail&quot;&gt;</span><br><span class="line">                           &lt;dl&gt;</span><br><span class="line">                                &lt;dt&gt;&lt;img width=&quot;80&quot; height=&quot;80&quot; src=&quot;/static/media/image/2016/12/default_big_14.png&quot;/&gt;&lt;/dt&gt;</span><br><span class="line">                                &lt;dd&gt;</span><br><span class="line">                                    &lt;h2&gt;django&lt;/h2&gt;</span><br><span class="line">                                    &lt;p&gt;bobby&lt;/p&gt;</span><br><span class="line">                                &lt;/dd&gt;</span><br><span class="line">                               &lt;/dl&gt;</span><br><span class="line">                               &lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">                                &lt;a class=&quot;personcenter fl&quot; href=&quot;usercenter-info.html&quot;&gt;进入个人中心&lt;/a&gt;</span><br><span class="line">                                &lt;a class=&quot;fr&quot; href=&quot;/logout/&quot;&gt;退出&lt;/a&gt;</span><br><span class="line">                               &lt;/div&gt;</span><br><span class="line">                           &lt;/div&gt;</span><br><span class="line">                       &lt;/div&gt;</span><br><span class="line">  --&gt;</span><br></pre></td></tr></table></figure></p><p>现在，我们刷新一下我们的页面（如果你停止了项目的运行就运行一下），出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-366d9a69539727d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后点击登录按钮，跳转到如下地址：<a href="http://127.0.0.1:8000/login/，页面成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-3786426fe6c9e08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/login/，页面成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-3786426fe6c9e08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>恭喜你，我们登录页面也已经正常显示出来了，下面是如何实现登录的交互功能。</p><h2 id="登录页面的交互实现"><a href="#登录页面的交互实现" class="headerlink" title="登录页面的交互实现"></a>登录页面的交互实现</h2><p>Django的MTV模式你还差一个V，也就是view你还没用到过，这里就到了它大显身手的时候了。尽管前面我们已经把网站首页和登录页面在浏览器中显示了，但是那些信息都是固定的，也就是说当初前端人员在设计网页的时候就确定了，我们现在所要做的就是更改它们的信息，使满足自己的信息得到显示。</p><p>接下来我们就通过编写视图函数，来实现这个，不过前提是需要挖坑与填坑操作，这里先不介绍，后面会具体说明。</p><h3 id="视图函数View的创建"><a href="#视图函数View的创建" class="headerlink" title="视图函数View的创建"></a>视图函数View的创建</h3><p>我们打开，apps/users/views.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 当我们配置的url被这个view处理时，将会自动传入request对象.</span><br><span class="line">def user_login(request):</span><br><span class="line">    # 前端向后端发送的请求方式有两种: get和post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单时为post</span><br><span class="line">    if request.method == &quot;POST&quot;:</span><br><span class="line">        pass</span><br><span class="line">    # 获取登录页面时为get</span><br><span class="line">    elif request.method == &quot;GET&quot;:</span><br><span class="line">        # render的作用是渲染html并返回给用户</span><br><span class="line">        # render三要素: request ，模板名称 ，一个字典用于传给前端并在页面显示</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p><p>然后打开eduline/urls.py文件，将login的登录路径修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from users.views import login</span><br><span class="line"></span><br><span class="line"> # 登录url</span><br><span class="line">    # path(&apos;login/&apos;, TemplateView.as_view(template_name=&quot;login.html&quot;), name=&quot;login&quot;)</span><br><span class="line">    path(&apos;login/&apos;, login, name=&quot;login&quot;)</span><br></pre></td></tr></table></figure></p><p>现在我们准备测试一下，我们获取登录页面时的method是不是为get，在两行返回语句的位置打上断点：<img src="https://upload-images.jianshu.io/upload_images/8964398-2c7f1dd6c69472a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后开启debug模式，待网站首页显示出来以后点击登录按钮，可以看到蓝色行跳到render那一行了，并发现Method就是GET:<img src="https://upload-images.jianshu.io/upload_images/8964398-af9e9c8f1b50c530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><hr><p>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</p><hr><p>至此，我们本篇关于网站首页显示和登录页面的配置以及登录方式的自定义这3个问题的介绍，就到此结束了，感谢你的赏阅。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（十）：后台管理配置</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要完善上篇笔记中遗留的其余3个apps的注册，还有xadmin的全局配置，让你打造一个属于自己的网站后台管理系统。</p><p>本篇笔记对应于第十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p><h2 id="其余3个apps的注册"><a href="#其余3个apps的注册" class="headerlink" title="其余3个apps的注册"></a>其余3个apps的注册</h2><h3 id="courses的注册"><a href="#courses的注册" class="headerlink" title="courses的注册"></a>courses的注册</h3><p>我们打开eduline/apps/courses这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始进行app的注册,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import Course, Lesson, Video, CourseResource</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                    &apos;add_time&apos;, &apos;get_zj_nums&apos;, &apos;go_to&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;,</span><br><span class="line">                     &apos;click_nums&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;detail&apos;, &apos;degree&apos;, &apos;learn_times&apos;, &apos;students&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;click_nums&apos;,</span><br><span class="line">                   &apos;add_time&apos;]  # 过滤器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LessonAdmin(object):</span><br><span class="line">    list_display = [&apos;course&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;course&apos;, &apos;name&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;course__name&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VideosAdmin(object):</span><br><span class="line">    list_display = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;lesson&apos;, &apos;name&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;lesson&apos;, &apos;name&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseResourceAdmin(object):</span><br><span class="line">    list_display = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;course&apos;, &apos;name&apos;, &apos;download&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(Course, CourseAdmin)</span><br><span class="line">xadmin.site.register(Lesson, LessonAdmin)</span><br><span class="line">xadmin.site.register(Video, VideosAdmin)</span><br><span class="line">xadmin.site.register(CourseResource, CourseResourceAdmin)</span><br></pre></td></tr></table></figure></p><p>运行一下你的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-f01e68630a744bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-f01e68630a744bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><h3 id="organization的注册"><a href="#organization的注册" class="headerlink" title="organization的注册"></a>organization的注册</h3><p>我们打开eduline/apps/organization这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始进行app的注册,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import CityDict, CourseOrg, Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CityDictAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseOrgAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;desc&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;image&apos;, &apos;address&apos;, &apos;city&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TeacherAdmin(object):</span><br><span class="line">    list_display = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;org&apos;,&apos;name&apos;, &apos;work_years&apos;, &apos;work_company&apos;, &apos;work_position&apos;, &apos;points&apos;, &apos;click_nums&apos;, &apos;fav_nums&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(CityDict, CityDictAdmin)</span><br><span class="line">xadmin.site.register(CourseOrg, CourseOrgAdmin)</span><br><span class="line">xadmin.site.register(Teacher, TeacherAdmin)</span><br></pre></td></tr></table></figure></p><p>运行一下你的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-d11e1dfd1f6be110.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-d11e1dfd1f6be110.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><h3 id="operation的注册"><a href="#operation的注册" class="headerlink" title="operation的注册"></a>operation的注册</h3><p>我们打开eduline/apps/operation这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始进行app的注册,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import UserAsk,CourseComments,UserFavorite,UserMessage,UserCourse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAskAdmin(object):</span><br><span class="line">    list_display = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;name&apos;, &apos;mobile&apos;, &apos;course_name&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseCommentsAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;, &apos;course&apos;, &apos;comments&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavoriteAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;, &apos;fav_id&apos;, &apos;fav_type&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserMessageAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;, &apos;message&apos;, &apos;has_read&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserCourseAdmin(object):</span><br><span class="line">    list_display = [&apos;user&apos;,  &apos;course&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;user&apos;,  &apos;course&apos;]  # 查询你想要的数据，记住尽量不要把时间放进去</span><br><span class="line">    list_filter = [&apos;user&apos;,  &apos;course&apos;, &apos;add_time&apos;]  # 过滤器,__name是外键的name字段，只写course则无法在过滤器中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserAsk, UserAskAdmin)</span><br><span class="line">xadmin.site.register(CourseComments, CourseCommentsAdmin)</span><br><span class="line">xadmin.site.register(UserFavorite, UserFavoriteAdmin)</span><br><span class="line">xadmin.site.register(UserMessage, UserMessageAdmin)</span><br><span class="line">xadmin.site.register(UserCourse, UserCourseAdmin)</span><br></pre></td></tr></table></figure></p><p>运行一下你的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-e162226c8ebcb58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin，回车一下：![](https://upload-images.jianshu.io/upload_images/8964398-e162226c8ebcb58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>至此，我们所有的apps都已经注册完了。接下来我们就开始定制属于自己的后台管理系统吧。</p><h2 id="xadmin的全局配置"><a href="#xadmin的全局配置" class="headerlink" title="xadmin的全局配置"></a>xadmin的全局配置</h2><h3 id="开启主题功能"><a href="#开启主题功能" class="headerlink" title="开启主题功能"></a>开启主题功能</h3><p>打开users/adminx.py文件，在里面添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from xadmin import views</span><br><span class="line"># 创建xadmin的全局管理器并与view进行绑定</span><br><span class="line">class BaseSetting(object):</span><br><span class="line">    enable_themes = True  # 修改主题</span><br><span class="line">    use_bootswatch = True    # 增加主题的可选内容</span><br><span class="line"></span><br><span class="line"># 将全局配置管理与view进行绑定注册</span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br></pre></td></tr></table></figure></p><p>看到没，已经出现更换主题按钮了，你可以自定义喜欢的主题了：<img src="https://upload-images.jianshu.io/upload_images/8964398-449c80187a937964.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="后台管理名称配置"><a href="#后台管理名称配置" class="headerlink" title="后台管理名称配置"></a>后台管理名称配置</h3><p>如图，我们需要修改站点标题，站点尾注，折叠菜单等以下内容：<img src="https://upload-images.jianshu.io/upload_images/8964398-2442e83e5776f4a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-b55cce406b314f83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>为了更好地管理这些不变动的信息，我们依旧放在users/adminx.py文件里面。我们打开它，并在其中加入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &apos;慕学后台管理系统&apos;  # 站点标题</span><br><span class="line">    site_footer = &apos;慕海学习网&apos;   # 站点尾注</span><br><span class="line">    menu_style = &apos;accordion&apos;   # 折叠收起菜单</span><br><span class="line"># 将站点标题与站点尾注进行注册:</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的网页，就变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-f05446a8d694cbac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不知你发现没有，还有一个问题就是折叠后apps还是显示英文：<img src="https://upload-images.jianshu.io/upload_images/8964398-1a0566f043f7c68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们想变成中文，可以吗？答案是当然可以的！</p><h3 id="配置apps的后台显示"><a href="#配置apps的后台显示" class="headerlink" title="配置apps的后台显示"></a>配置apps的后台显示</h3><p>打开每个app下面的apps.py文件，追加verbose_name信息。我们以users/apps.py为例,修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UsersConfig(AppConfig):</span><br><span class="line">    name = &apos;users&apos;</span><br><span class="line">    verbose_name = &apos;用户信息&apos;</span><br></pre></td></tr></table></figure></p><p>就是这个样子：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-fa5cd2b75f103c5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其余apps的apps.py文件修改如下：<br><strong>courses/apps.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class CoursesConfig(AppConfig):</span><br><span class="line">    name = &apos;courses&apos;</span><br><span class="line">    verbose_name = &apos;课程管理&apos;</span><br></pre></td></tr></table></figure></p><p><strong>operation/apps.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class OperationConfig(AppConfig):</span><br><span class="line">    name = &apos;operation&apos;</span><br><span class="line">    verbose_name = &apos;用户操作&apos;</span><br></pre></td></tr></table></figure></p><p><strong>organization/apps.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line">class OrganizationConfig(AppConfig):</span><br><span class="line">    name = &apos;organization&apos;</span><br><span class="line">    verbose_name = &apos;机构管理&apos;</span><br></pre></td></tr></table></figure></p><p>再来刷新一下我们的页面，我们发现页面还是老样子，并没有出现与我们设想的页面，那是因为我们还没有配置信息，我们需要在每个app应用的–init–.py文件里加上引用apps的配置信息，就一行代码：<code>default_app_config = &quot;appname.apps.AppnameConfig&quot; # 注意第二个Appname首字母大写</code>。我们设置如下：<br>以<strong>users/–init–.py:</strong>为例，<strong>记住是箭头2不是箭头1（箭头1是apps这个文件的）！！！</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-89d0a2c0da853850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>添加如下一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;users.apps.UsersConfig&apos;</span><br></pre></td></tr></table></figure></p><p><strong>courses/–init–.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;courses.apps.CoursesConfig&apos;</span><br></pre></td></tr></table></figure></p><p><strong>operation/–init–.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;operation.apps.OperationConfig&apos;</span><br></pre></td></tr></table></figure></p><p><strong>organization/–init–.py:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_app_config = &apos;organization.apps.OrganizationConfig&apos;</span><br></pre></td></tr></table></figure></p><p>现在我们刷新一下我们的页面，成功了：<img src="https://upload-images.jianshu.io/upload_images/8964398-8db8f42e19692a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="自定义菜单显示顺序"><a href="#自定义菜单显示顺序" class="headerlink" title="自定义菜单显示顺序"></a>自定义菜单显示顺序</h3><p>上面菜单的显示是根据我们注册的时间来显示的，我们可以自定义我们的菜单显示顺序：在users/adminx.py文件加上以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from users.models import EmailVerifyRecord, Banner, UserProfile</span><br><span class="line">from courses.models import Course, CourseResource, Lesson, Video</span><br><span class="line">from organization.models import CourseOrg, CityDict, Teacher</span><br><span class="line">from operation.models import CourseComments, UserMessage, UserFavorite, UserCourse, UserAsk</span><br><span class="line">from django.contrib.auth.models import Group, Permission</span><br><span class="line">from xadmin.models import Log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title = &apos;慕学后台管理系统&apos;</span><br><span class="line">    site_footer = &apos;慕海学习网&apos;</span><br><span class="line">    menu_style = &apos;accordion&apos;</span><br><span class="line"></span><br><span class="line">    def get_site_menu(self):</span><br><span class="line">        return (</span><br><span class="line">                &#123;&apos;title&apos;: &apos;课程管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;课程信息&apos;, &apos;url&apos;: self.get_model_url(Course, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;章节信息&apos;, &apos;url&apos;: self.get_model_url(Lesson, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;视频信息&apos;, &apos;url&apos;: self.get_model_url(Video, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;课程资源&apos;, &apos;url&apos;: self.get_model_url(CourseResource, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;课程评论&apos;, &apos;url&apos;: self.get_model_url(CourseComments, &apos;changelist&apos;)&#125;,</span><br><span class="line">                )&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;机构管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;所在城市&apos;, &apos;url&apos;: self.get_model_url(CityDict, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;机构讲师&apos;, &apos;url&apos;: self.get_model_url(Teacher, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;机构信息&apos;, &apos;url&apos;: self.get_model_url(CourseOrg, &apos;changelist&apos;)&#125;,</span><br><span class="line">                )&#125;,</span><br><span class="line">                &#123;&apos;title&apos;: &apos;用户管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户信息&apos;, &apos;url&apos;: self.get_model_url(UserProfile, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户验证&apos;, &apos;url&apos;: self.get_model_url(EmailVerifyRecord, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户课程&apos;, &apos;url&apos;: self.get_model_url(UserCourse, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户收藏&apos;, &apos;url&apos;: self.get_model_url(UserFavorite, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户消息&apos;, &apos;url&apos;: self.get_model_url(UserMessage, &apos;changelist&apos;)&#125;,</span><br><span class="line">                )&#125;,</span><br><span class="line"></span><br><span class="line">                &#123;&apos;title&apos;: &apos;系统管理&apos;, &apos;menus&apos;: (</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户咨询&apos;, &apos;url&apos;: self.get_model_url(UserAsk, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;首页轮播&apos;, &apos;url&apos;: self.get_model_url(Banner, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户分组&apos;, &apos;url&apos;: self.get_model_url(Group, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;用户权限&apos;, &apos;url&apos;: self.get_model_url(Permission, &apos;changelist&apos;)&#125;,</span><br><span class="line">                    &#123;&apos;title&apos;: &apos;日志记录&apos;, &apos;url&apos;: self.get_model_url(Log, &apos;changelist&apos;)&#125;,</span><br><span class="line">            )&#125;,)</span><br><span class="line"></span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br></pre></td></tr></table></figure></p><p><strong>记住这段代码是和我们之前定义全局配置放在同一个函数里面的</strong><br>注意：是<code>from users.models import EmailVerifyRecord, Banner, UserProfile</code>而不是：<code>from apps.users.models import EmailVerifyRecord, Banner, UserProfile</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError: Model class apps.users.models.UserProfile doesn&apos;t declare an explicit app_label and isn&apos;t in an application in INSTALLED_APPS.</span><br></pre></td></tr></table></figure></p><p>也就是说直接from users.models，不用再写上from apps.users.models。</p><p>最后我们运行一下我们的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin,然后回车，就成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-b129d1c498227dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin,然后回车，就成了这个样子：![](https://upload-images.jianshu.io/upload_images/8964398-b129d1c498227dda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>说明一下，这个日志记录就是用来记录我们之前进行过什么操作的文件。</p><p>你可能会问，这些apps的图片都是圆圈，我们可以自定义图标么？答案是当然了！<br>这里我就不介绍了，有兴趣的小伙伴们可以自己设置，这里我开启传送大门：<a href="https://www.cnblogs.com/adc8868/p/7506973.html" target="_blank" rel="noopener">xadmin管理员详情页面布局，导航图标设置</a></p><p>至此，我们自己专属的网站后台就搭建成功了，感谢你的赏阅！下一篇我们就正式进入到前端页面的配置了，主要解决用户注册，登录的问题。</p><p>本篇笔记对应于第十篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline。" target="_blank" rel="noopener">https://github.com/licheetools/eduline。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（九）：初识后台管理</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在前面的笔记中我们进行了需求分析和数据库的设计，本篇笔记主要介绍Django自带的用于后台管理的admin，并在此基础上介绍另一个插件xadmin的使用。</p><p>本篇笔记对应于第九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="django自带的admin介绍"><a href="#django自带的admin介绍" class="headerlink" title="django自带的admin介绍"></a>django自带的admin介绍</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<code>runserver</code>再回车：<img src="https://upload-images.jianshu.io/upload_images/8964398-c332955dd793cd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在浏览器地址栏中输入<strong><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></strong>出现：<img src="https://upload-images.jianshu.io/upload_images/8964398-861580511e2f1b76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>恭喜你，你已经进入到Django admin的后台管理网页了。</p><p>你可能会问，为什么会有这个页面，我可是什么操作也没干啊（一脸无辜）。对的，你确实什么也不用干，因为Django已经帮你做好了。</p><p>打开eduline/settings.py文件，找到第34行代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-2b7c4081875c7329.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，admin它其实也是一个app，不过在我们新建项目时就已经创建好了，不用你去动手，是不是很人性化。</p><p>我们现在再来打开eduline/urls.py文件，找到第19行代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-f278038ce7547ae4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没，admin竟然已经自动在url中进行了配置（整个项目就它一个配置了url，可见重要性不一般），所以你前面访问<strong><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></strong>才会有响应。</p><p>我们回到后台页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-861580511e2f1b76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>有登录按钮，所以我们需要先注册一个账号，Django默认是不会给你创建账号的。</p><h3 id="注册超级管理员"><a href="#注册超级管理员" class="headerlink" title="注册超级管理员"></a>注册超级管理员</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createsuperuser</span><br></pre></td></tr></table></figure></p><p>然后系统会提示你输入以下信息：Username，Email address，Password：<img src="https://upload-images.jianshu.io/upload_images/8964398-318068326946d5a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来进行数据库的生成和迁移操作（因为users应用中多了一个名为NewBee的超级管理员），我们只需要对users 这个应用进行相关操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-001d6cac2dace839.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="登入admin后台"><a href="#登入admin后台" class="headerlink" title="登入admin后台"></a>登入admin后台</h3><p>运行一下我们的项目，在浏览器地址栏输入：<strong><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></strong>，并在登录页面输入刚才注册的账号信息(默认登录方式是用户名 + 密码,后面会教你如何实现用户名或邮箱+密码登录的登录形式)，点击登录，就进入后台了：<img src="https://upload-images.jianshu.io/upload_images/8964398-d28ab8abe20d77e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>全是英文，我们去设置里配置一下：打开eduline/settings.py文件，找到第117行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;en-us&apos;</span><br><span class="line"></span><br><span class="line">TIME_ZONE = &apos;UTC&apos;</span><br></pre></td></tr></table></figure></p><p>我们修改为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 将语言修改为中文</span><br><span class="line">LANGUAGE_CODE = &apos;zh-hans&apos;</span><br><span class="line"></span><br><span class="line"># 将时区修改为上海</span><br><span class="line">TIME_ZONE = &apos;Asia/Shanghai&apos;</span><br><span class="line"></span><br><span class="line"># 数据库存储使用时间，True时间会被存为UTC的时间。所以采用False</span><br><span class="line">USE_TZ = False</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的后台网页：<img src="https://upload-images.jianshu.io/upload_images/8964398-29c76784bdca8b9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>恭喜你，admin被汉化成功了。接下来就是把我们前面定义的数据库字段都显示出来，首先把我们的UserProfile注册进来。</p><h2 id="注册UserProfile"><a href="#注册UserProfile" class="headerlink" title="注册UserProfile"></a>注册UserProfile</h2><p>打开eduline/apps/users/admin.py文件，添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line"></span><br><span class="line"># Register your models here.</span><br><span class="line"># 因为处于同一个目录之下，所以可以直接使用.models代替当前目录</span><br><span class="line">from .models import UserProfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写一个管理器，命名规则：Model+Admin</span><br><span class="line">class UserProfileAdmin(admin.ModelAdmin):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将UserProfile注册进我们的admin中, 并为它选择管理器UserProfileAdmin</span><br><span class="line">admin.site.register(UserProfile, UserProfileAdmin)</span><br></pre></td></tr></table></figure></p><p>刷新一下我们的后台网页：<img src="https://upload-images.jianshu.io/upload_images/8964398-cb0704f8904b6d98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>Users 是用户所在表的名称：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3d566afa1275d6c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>点击右侧的增加用户信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-a72494f0844da55e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们看到一下信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-151e579951bcdf29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们尝试再次新建一个用户：<strong>NewBai</strong>：<img src="https://upload-images.jianshu.io/upload_images/8964398-1655e4ea2562c4f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>新建成功了，同时注意Django会自动帮我们把密码进行加密，而且不能反解，也就是说单向密码加密。</p><h2 id="xadmin的安装"><a href="#xadmin的安装" class="headerlink" title="xadmin的安装"></a>xadmin的安装</h2><p>还记得前面的一篇笔记吗，我让你新建一个文件夹A，把下载的xadmin文件放在里面，不记得请查阅这篇笔记：<a href="https://www.jianshu.com/p/b40f4a3b02fb" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置</a>（更新一下，那个版本里面有太多的坑需要自己填，这里我就把已经填完坑的版本贴一下，大家在本篇笔记对应的Github上下载包，亲测有用）。<br>现在，我们新建一个名为extra_apps的Python package ,用来存放我们的第三方插件，并将前面下载的xadmin文件（解压之后）移入其中：<img src="https://upload-images.jianshu.io/upload_images/8964398-1dce8025e0ed8949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>同时需要对路径进行配置：打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os, sys</span><br><span class="line"></span><br><span class="line"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))</span><br><span class="line">sys.path.insert(0,os.path.join(BASE_DIR, &apos;extra_apps&apos;))</span><br></pre></td></tr></table></figure></p><p>接下来是xadmin的安装:在确保前面的操作完成以后，我们打开eduline/settings.py文件，找到里面的第35行代码，在后面修改为如下：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">    &apos;courses&apos;,</span><br><span class="line">    &apos;organization&apos;,</span><br><span class="line">    &apos;operation&apos;,</span><br><span class="line">    &apos;xadmin&apos;,</span><br><span class="line">    &apos;crispy_forms&apos;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后打开eduline/urls.py文件，把urls中默认的admin修改为xadmin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;xadmin/&apos;, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后进行我们数据库的生成和迁移操作：<code>makemigrations</code>和<code>migrate</code>：<img src="https://upload-images.jianshu.io/upload_images/8964398-38817e4fcb6c32a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你会发现执行第一个命令就报错了，那是因为我们缺少一些库的支持，我们依次按照如下库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br><span class="line">pip install django-crispy-forms</span><br><span class="line">pip install django-formtools==2.1   # 记住一定是2.1的版本，否则会出错</span><br></pre></td></tr></table></figure></p><p>使用的命令为：<strong>pip install package -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></strong><br>之后会安装一大堆库，我们使用pip list命令查看一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-f1bac706138f7baa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>为了便于你查看自己是否缺少某个库，我这里贴一下我的各个库的版本（你各个库的版本不能低于我的版本，否则就可能会出错）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(eduline) F:\Envs\eduline&gt;pip list</span><br><span class="line">Package                          Version</span><br><span class="line">-------------------------------- --------</span><br><span class="line">confusable-homoglyphs            3.1.1</span><br><span class="line">diff-match-patch                 20121119</span><br><span class="line">Django                           2.0.1</span><br><span class="line">django-crispy-forms              1.7.2</span><br><span class="line">django-crispy-forms-registration 0.1.3</span><br><span class="line">django-formtools                 2.1</span><br><span class="line">django-import-export             1.0.1</span><br><span class="line">django-registration              2.4.1</span><br><span class="line">django-reversion                 3.0.0</span><br><span class="line">et-xmlfile                       1.0.1</span><br><span class="line">future                           0.16.0</span><br><span class="line">httplib2                         0.11.3</span><br><span class="line">jdcal                            1.4</span><br><span class="line">mysqlclient                      1.3.13</span><br><span class="line">odfpy                            1.3.6</span><br><span class="line">openpyxl                         2.5.4</span><br><span class="line">Pillow                           5.2.0</span><br><span class="line">pip                              18.0</span><br><span class="line">pytz                             2018.5</span><br><span class="line">PyYAML                           3.13</span><br><span class="line">setuptools                       40.0.0</span><br><span class="line">six                              1.11.0</span><br><span class="line">tablib                           0.12.1</span><br><span class="line">unicodecsv                       0.14.1</span><br><span class="line">wheel                            0.31.1</span><br><span class="line">xlrd                             1.1.0</span><br><span class="line">xlwt                             1.3.0</span><br></pre></td></tr></table></figure></p><p>接下来，我们重新进行数据库的生成和迁移操作：<code>makemigrations</code>和<code>migrate</code>：<img src="https://upload-images.jianshu.io/upload_images/8964398-6fc3cb4df774f5d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt>,<br>看到没有，它也生成了几个数据表，我们打开Navicat，去数据库里看一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-2c2cf86aa427503d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在我们运行一下我们的项目，在浏览器地址中输入<a href="http://127.0.0.1/xadmin,然后看到：![](https://upload-images.jianshu.io/upload_images/8964398-1b7b25d8b012310f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1/xadmin,然后看到：![](https://upload-images.jianshu.io/upload_images/8964398-1b7b25d8b012310f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>恭喜你，xadmin的配置已经完成了，xadmin的页面是不是比admin的页面好看多了。</p><p>Xadmin使用Bootstrap3.0框架精心打造。基于Bootstrap3，Xadmin天生就支持在多种屏幕上无缝浏览，并完全支持Bootstrap主题模板，让您的管理后台也动感、多样起来。，这是它的的<a href="http://sshwsfc.github.io/xadmin/" target="_blank" rel="noopener">官方网站</a>:<img src="https://upload-images.jianshu.io/upload_images/8964398-5e318b09a7544317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可以去看一下它的示例和文档，可能需要翻墙，不过这对你以后的运用确实帮助很大的。</p><h2 id="Xadmin的使用介绍"><a href="#Xadmin的使用介绍" class="headerlink" title="Xadmin的使用介绍"></a>Xadmin的使用介绍</h2><p>正如前面你所知道的，Xadmin是基于Django的admin来开发的，所以Xadmin也继承了许多admin的用法，下面就分别介绍一下它们的使用情况：</p><p>因为我们之前在admin里面已经注册了UserProfile，所以xadmin里面也就有了这个信息，那我们接下来就设置一下我们文件的格式，让系统默认去寻找我们<strong>xadmin</strong>的<strong>adminx.py</strong>文件，而不是去寻找原来<strong>admin的admin.py</strong>文件。</p><h3 id="验证码功能的实现"><a href="#验证码功能的实现" class="headerlink" title="验证码功能的实现"></a>验证码功能的实现</h3><p>我们打开eduline/apps/users这个文件夹，在里面新建一个名为<code>adminx.py</code>的文件，我们准备开始验证码功能的实现,在其中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># @Time: 2018/3/26 10:05</span><br><span class="line"># @Author: Envse</span><br><span class="line"># @File: adminx.py</span><br><span class="line"></span><br><span class="line"># 导入xadmin，如果出现字体底下出现红色属于正常现象（实际上环境已经配置过）</span><br><span class="line">import xadmin</span><br><span class="line"># 因为处于同一个目录之下，所以可以直接使用.models代替当前目录</span><br><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将EmailVerifyRecord注册进我们的admin中, 并为它选择管理器EmailVerifyRecordAdmin</span><br><span class="line">xadmin.site.register(EmailVerifyRecord, EmailVerifyRecordAdmin)</span><br></pre></td></tr></table></figure></p><p>现在我们重新运行一下我们的项目，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/xadmin回车，出现：![](https://upload-images.jianshu.io/upload_images/8964398-96113eee67682a4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/xadmin回车，出现：![](https://upload-images.jianshu.io/upload_images/8964398-96113eee67682a4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a></p><p>你可能会好奇这个是怎样实现的，其实这就是你数据库设计的字段啊：你打开users/models.py文件，看到第30行代码：<img src="https://upload-images.jianshu.io/upload_images/8964398-cebc6d5713e28736.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>Meta信息就是用于后台显示的，其中verbose_name定义的是后台主页面显示字段，verbose_name_plural是verbose_name的复数形式，如果这两者不相等，那么verbose_name_plural就是在verbose_name后面加个s字母而已，所以我们尽量一样，便于管理和查看。</p><p>我们现在尝试添加一个邮箱验证码，点击右侧的增加邮箱验证码按钮，输入相关信息，可以看到添加成功了：<img src="https://upload-images.jianshu.io/upload_images/8964398-3b399581d49ae062.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>接下来，我们看一下右侧的显示列，点击一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-960065424572cfb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>里面可以选择显示的内容，我们现在想在刚才的页面同时显示这些全部信息，所以需要配置一下:我们打开users/adminx.py文件，在里面的管理器中设置list_display字段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 配置后台显示的列信息</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]  # 一次显示你想出现的多行数据，</span><br><span class="line"># 这里面的字段都是你在前面数据库中定义的，请保持数据的一致</span><br></pre></td></tr></table></figure></p><p>然后还可以配置过滤器，搜索框等，这里就不一一说明，直接贴上代码了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 写一个管理器，命名规则：Model+Admin,注意这里不再是继承admin，而是继承object这个最高类</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 配置后台显示的列信息</span><br><span class="line">    list_display = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;]  # 查询你想要的数据,一般不依据时间进行查询</span><br><span class="line">    list_filter = [&apos;code&apos;, &apos;email&apos;, &apos;send_type&apos;, &apos;send_time&apos;]  # 过滤器</span><br></pre></td></tr></table></figure></p><p>之后刷新一下你的网页，成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-c7cd6da15d50eb7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>细心的小伙伴们可能发现，这里竟然可以导出操作，是的，这样变得很方便了：<img src="https://upload-images.jianshu.io/upload_images/8964398-689090eb8c18f58b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你可以根据自己的喜好来导出不同的文件格式，比如xml:<img src="https://upload-images.jianshu.io/upload_images/8964398-d5a13eff7c81f618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="admin-xadmin和其他后台管理系统的区别"><a href="#admin-xadmin和其他后台管理系统的区别" class="headerlink" title="admin, xadmin和其他后台管理系统的区别"></a>admin, xadmin和其他后台管理系统的区别</h3><p>像PHP，JAVA等其他语言，它们是按照一个功能模块来进行一个功能设计的。而admin和 xadmin就不一样了，它们是对于每张表都可以进行增删改查的管理器，因此我们还可以在增删改查的基础上加上我们自己的后台逻辑，完成我们自定义的功能。因此，从某种程度可以说它是不依赖于具体业务的，不管什么系统后台都是由表组成。</p><p>既然这样，我们可以在其余的各个表中，都加上这些个功能。</p><p>打开users/adminx.py文件，我们来实现轮播图的注册，和前面验证码的操作类似，这里就不细说，直接贴上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from .models import Banner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BannerAdmin(object):</span><br><span class="line">    list_display = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;]  # 一次显示你想出现的多行数据</span><br><span class="line">    search_fields = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;]  # 查询你想要的数据</span><br><span class="line">    list_filter = [&apos;title&apos;, &apos;image&apos;, &apos;url&apos;, &apos;index&apos;, &apos;add_time&apos;]  # 过滤器</span><br><span class="line"></span><br><span class="line">xadmin.site.register(Banner, BannerAdmin)</span><br></pre></td></tr></table></figure></p><p><strong>再次强调一下：这里面的字段都是你前面在数据库中定义的，请保持数据库字段定义的一致性，不要乱写，否则后面会出很大的BUG！</strong></p><p>刷新一下你的页面，就变成了这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-ab24ba5f7ca9963c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>好了小伙伴们，你现在可以照葫芦画瓢了，尝试着把其余3个apps都注册到后台吧。那些，我们下一篇笔记再介绍，接下来教你一个自定义文件信息的技能。</p><h3 id="自定义文件信息"><a href="#自定义文件信息" class="headerlink" title="自定义文件信息"></a>自定义文件信息</h3><p>打开Pycharm,点击一下主菜单的File,选择下拉的Settings,选择Editor，再选择Code Style，选择文件模板：<img src="https://upload-images.jianshu.io/upload_images/8964398-860e82d7a0f74a1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到5的信息了么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#！/user/bin/python </span><br><span class="line"># -*- coding:utf-8 -*-  # 编码格式</span><br><span class="line"># @Time: $&#123;DATE&#125; $&#123;TIME&#125;   # 文件生成时间</span><br><span class="line"># @Author: Envse   # 作者</span><br><span class="line"># @File: $&#123;NAME&#125;.py   # 文件名</span><br></pre></td></tr></table></figure></p><p>你可以自定义这些信息，当然还可以根据4的选择不同来添加不同的信息。然后点击apply,最后是ok,这样你每次创建新的py文件以后，这些信息就都会出现在文件的头部了。怎么样，新技能Get了没有？</p><p>至此，关于初识后台管理这一部分就先说这么多，下一篇笔记就完善其余3个apps的注册，还有xadmin的全局配置，打造一个属于自己的网站后台管理系统。</p><p>本篇笔记对应于第九篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline，另外xadmin的原始安装包我也上传了，大家可以前往下载，有空的话，可以给项目一个star,感谢你的赏阅。" target="_blank" rel="noopener">https://github.com/licheetools/eduline，另外xadmin的原始安装包我也上传了，大家可以前往下载，有空的话，可以给项目一个star,感谢你的赏阅。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（八）：数据库字段的定义(下)</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要完善其余3个apps应用的数据库字段的定义，在此之前希望小伙伴们好好回忆之前关于users应用的数据库字段定义的方法，这对接下来的其余apps应用的创建有很大帮助（可以照葫芦画瓢）。</p><p>本篇笔记对应于第八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="3个apps应用的创建"><a href="#3个apps应用的创建" class="headerlink" title="3个apps应用的创建"></a>3个apps应用的创建</h2><h2 id="1、课程版块-course"><a href="#1、课程版块-course" class="headerlink" title="1、课程版块(course)"></a>1、课程版块(course)</h2><h3 id="a、创建courses应用"><a href="#a、创建courses应用" class="headerlink" title="a、创建courses应用"></a>a、创建courses应用</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp courses</span><br></pre></td></tr></table></figure></p><h3 id="b、确定数据库中的数据表数量"><a href="#b、确定数据库中的数据表数量" class="headerlink" title="b、确定数据库中的数据表数量"></a>b、确定数据库中的数据表数量</h3><p>首先，课程本身需要一张表用于保存自身信息：<img src="https://upload-images.jianshu.io/upload_images/8964398-7d972d4e559d35e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>随意点开一门课程，你会发现以下内容：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1c1d58ee2b5bec2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>点击右侧的开始学习，你会进入章节信息详情：<img src="https://upload-images.jianshu.io/upload_images/8964398-7b17b3819c134d8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>每个课程包含多个章节，每个章节下面又包含多个视频和右侧的课程资料。其中：<br>课程和章节是一对多的映射关系；章节和视频也是一对多的映射关系；课程和资料也是一对多的映射关系。所以通过分析，我们需要新建4个表，用于信息的存取：<img src="https://upload-images.jianshu.io/upload_images/8964398-be1c04c80fcf39ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="c、开始数据库字段的定义"><a href="#c、开始数据库字段的定义" class="headerlink" title="c、开始数据库字段的定义"></a>c、开始数据库字段的定义</h3><p>打开我们的courses/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"># 课程信息</span><br><span class="line">class Course(models.Model):</span><br><span class="line">    name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;)</span><br><span class="line">    # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式</span><br><span class="line">    desc = models.CharField(max_length=300, verbose_name=&quot;课程描述&quot;)</span><br><span class="line">    detail = models.TextField(max_length=500, verbose_name=&quot;课程详情&quot;)</span><br><span class="line">    is_banner = models.BooleanField(default=False, verbose_name=&quot;是否轮播&quot;)</span><br><span class="line">    degree = models.CharField(max_length=2, </span><br><span class="line">choices=((&apos;cj&apos;, &apos;初级&apos;), (&apos;zj&apos;, &apos;中级&apos;), (&apos;gj&apos;, &apos;高级&apos;)), verbose_name=&quot;难度等级&quot;)</span><br><span class="line">    # 学习数这里使用分钟数作计量单位，便于后台记录(存储最小单位)和前台转换</span><br><span class="line">    learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;)</span><br><span class="line">    # 学习人数从点击开始学习算起</span><br><span class="line">    students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;)</span><br><span class="line">    # 收藏人数从点击收藏按钮算起</span><br><span class="line">    fav_nums = models.IntegerField(default=0, verbose_name=&quot;收藏人数&quot;)</span><br><span class="line">    image = models.ImageField(upload_to=&apos;courses/%Y/%m&apos;, max_length=100, verbose_name=&quot;封面图片&quot;)</span><br><span class="line">    # 点击数从点击页面算起</span><br><span class="line">    click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;)</span><br><span class="line">    category = models.CharField(default=&quot;后端开发&quot;, max_length=20, verbose_name=&quot;课程类别&quot;)</span><br><span class="line">    tag = models.CharField(default=&apos;&apos;, max_length=10, verbose_name=&quot;课程标签&quot;)</span><br><span class="line">    youneeded_know = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;课程须知&quot;)</span><br><span class="line">    teacher_tell = models.CharField(default=&apos;&apos;, max_length=300, verbose_name=&quot;老师告诉你&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;课程&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name</span><br></pre></td></tr></table></figure></p><p>接着刚才的代码，我们在下面添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 章节信息</span><br><span class="line">class Lesson(models.Model):</span><br><span class="line">    # 前面知道一个课程对应多个章节，所以在章节表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个章节属于哪个课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;章节名&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;章节&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        # 采用了字符串的格式化方式来同时引用多个数据</span><br><span class="line">        return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的章节》&#123;1&#125;&apos;.format(self.course, self.name)  </span><br><span class="line">        # return self.name也是可以</span><br></pre></td></tr></table></figure></p><p>在上面的外键字<code>course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</code>，这其实就是一个用于告知信息的字段，包含3个参数：Course是指你与哪个对象存在外键关系（记住是表的名称，不是字段的名称）；on_delete=models.CASCADE是指主外关系键中，级联删除，也就是当删除主表的数据时候从表中的数据也随着一起删除；verbose_name就是你定义字段的别称（后台管理中显示）</p><p>我们继续接着刚才的代码，我们在下面添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 视频信息</span><br><span class="line">class Video(models.Model):</span><br><span class="line">    # 前面知道一个章节对应多个视频，所以在视频表中将章节设置为外键。</span><br><span class="line">    # 此处的lesson其实就是一个用来告诉我们这个视频属于哪个章节的字段</span><br><span class="line">    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, verbose_name=&quot;章节&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;视频名称&quot;)</span><br><span class="line">    url = models.URLField(max_length=200, default=&apos;&apos;, verbose_name=&quot;访问地址&quot;)</span><br><span class="line">    learn_times = models.IntegerField(default=0, verbose_name=&quot;学习时长（分钟数）&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;视频&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;章节的视频》&#123;1&#125;&apos;.format(self.lesson, self.name)   # return self.name也是可以</span><br><span class="line"></span><br><span class="line"># 课程资料信息</span><br><span class="line">class CourseResource(models.Model):</span><br><span class="line">    # 前面知道一个课程对应多个课程资料，所以在课程资料表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个课程资料属于哪个课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</span><br><span class="line">    name = models.CharField(max_length=100, verbose_name=&quot;名称&quot;)</span><br><span class="line">    download = models.FileField(max_length=100, upload_to=&apos;course/resource/%Y/%m&apos;, </span><br><span class="line">verbose_name=&quot;资源文件&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;课程资源&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line">        </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &apos;&lt;&lt;&#123;0&#125;&gt;&gt;课程的课程资料》&#123;1&#125;&apos;.format(self.course, self.name)   # return self.name也行</span><br></pre></td></tr></table></figure></p><p>点击左侧的structure，我们可以看到如下的4个函数（数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-b5a2a51fd597f86a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，我们course应用的数据库字段的定义到此告一段落，不过以后可能会有新的字段加入，所以我们就先不进行数据库生成和迁移操作。</p><h2 id="2、授课教师与授课机构板块-organization"><a href="#2、授课教师与授课机构板块-organization" class="headerlink" title="2、授课教师与授课机构板块(organization)"></a>2、授课教师与授课机构板块(organization)</h2><h3 id="a、创建organization应用"><a href="#a、创建organization应用" class="headerlink" title="a、创建organization应用"></a>a、创建organization应用</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp organization</span><br></pre></td></tr></table></figure></p><h3 id="b、确定数据库中的数据表数量-1"><a href="#b、确定数据库中的数据表数量-1" class="headerlink" title="b、确定数据库中的数据表数量"></a>b、确定数据库中的数据表数量</h3><p>顾名思义授课教师与授课机构板块，里面肯定有授课教师和授课机构这2个表吧。然后我们来观察一下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-f7f3bb7307de9aab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>看到没有，里面有一个用于筛选的城市列表，所以这个内容我们也是要单独放在一张表里面的。</p><p>也就是说，我们需要新建3张表：<img src="https://upload-images.jianshu.io/upload_images/8964398-2402b2a2d4535456.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其中，课程是属于课程机构的, 课程机构又有机构类别，城市，授课讲师等字段。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-929f5c58463317ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>上面则是教师信息表应当具有的一些字段。</p><h3 id="c、开始数据库字段的定义-1"><a href="#c、开始数据库字段的定义-1" class="headerlink" title="c、开始数据库字段的定义"></a>c、开始数据库字段的定义</h3><p>打开我们的organization/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 城市信息</span><br><span class="line">class CityDict(models.Model):</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name=&quot;城市&quot;)</span><br><span class="line">    # 描述这一块，我们先用TextField，因为它允许我们不输入长度,而且可以输入值无范围，之后再更新为富文本形式</span><br><span class="line">    desc = models.CharField(max_length=200, verbose_name=&quot;描述&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;城市&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程机构</span><br><span class="line">class CourseOrg(models.Model):</span><br><span class="line">    name = models.CharField(max_length=50, verbose_name=&quot;机构名称&quot;)</span><br><span class="line">    desc = models.TextField(verbose_name=&quot;机构描述&quot;)</span><br><span class="line">    tag = models.CharField(max_length=10, default=&quot;全国知名&quot;, verbose_name=&quot;机构标签&quot;)</span><br><span class="line">    category = models.CharField(max_length=20, default=&apos;pxjg&apos;, </span><br><span class="line">choices=((&apos;pxjg&apos;, &apos;培训机构&apos;), (&apos;gr&apos;, &apos;个人&apos;), (&apos;gx&apos;, &apos;高校&apos;)), verbose_name=&quot;机构类别&quot;)</span><br><span class="line">    click_nums = models.IntegerField(default=0, verbose_name=&apos;点击数&apos;)</span><br><span class="line">    fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;)</span><br><span class="line">    image = models.ImageField(max_length=50, upload_to=&quot;org/%Y/%m&quot;, verbose_name=&quot;logo&quot;)</span><br><span class="line">    address = models.CharField(max_length=150, verbose_name=&quot;机构地址&quot;)</span><br><span class="line">    # 前面知道一个城市对应多个课程机构，所以在课程机构表中将城市设置为外键。</span><br><span class="line">    # 此处的city其实就是一个用来告诉我们这个课程机构属于哪个城市的字段</span><br><span class="line">    city = models.ForeignKey(CityDict, on_delete=models.CASCADE, verbose_name=&quot;所在城市说明&quot;)</span><br><span class="line">    students = models.IntegerField(default=0, verbose_name=&quot;学习人数&quot;)</span><br><span class="line">    course_nums = models.IntegerField(default=0, verbose_name=&quot;课程数&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;课程机构&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 教师信息</span><br><span class="line">class Teacher(models.Model):</span><br><span class="line">    # 前面知道一个课程机构对应多个教师，所以在教师信息表中将授课机构设置为外键。</span><br><span class="line">    # 此处的org其实就是一个用来告诉我们这个教师属于哪个课程机构的字段</span><br><span class="line">    org = models.ForeignKey(CourseOrg, on_delete=models.CASCADE, verbose_name=&quot;所属教师&quot;)</span><br><span class="line">    name = models.CharField(max_length=50, verbose_name=&quot;教师名&quot;)</span><br><span class="line">    work_years = models.IntegerField(default=0, verbose_name=&quot;工作年限&quot;)</span><br><span class="line">    work_position = models.CharField(max_length=50, verbose_name=&quot;公司职位&quot;)</span><br><span class="line">    work_company = models.CharField(max_length=50, verbose_name=&quot;就职公司&quot;)</span><br><span class="line">    points = models.CharField(max_length=50, verbose_name=&quot;教学特点&quot;)</span><br><span class="line">    click_nums = models.IntegerField(default=0, verbose_name=&quot;点击数&quot;)</span><br><span class="line">    fav_nums = models.IntegerField(default=0, verbose_name=&apos;收藏数&apos;)</span><br><span class="line">    age = models.IntegerField(default=18, verbose_name=&apos;年龄&apos;)</span><br><span class="line">    image = models.ImageField(default=&apos;&apos;, upload_to=&apos;teacher/%Y/%m&apos;, </span><br><span class="line">verbose_name=&apos;头像&apos;, max_length=100)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;教师&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name   # 这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><p>点击左侧的structure，我们可以看到如下的3个函数（数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-c6b4e6a6e8ba7ee6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="3、用户操作板块-operation"><a href="#3、用户操作板块-operation" class="headerlink" title="3、用户操作板块(operation)"></a>3、用户操作板块(operation)</h2><h3 id="a、创建operation应用"><a href="#a、创建operation应用" class="headerlink" title="a、创建operation应用"></a>a、创建operation应用</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp operation</span><br></pre></td></tr></table></figure></p><h3 id="b、确定数据库中的数据表数量-2"><a href="#b、确定数据库中的数据表数量-2" class="headerlink" title="b、确定数据库中的数据表数量"></a>b、确定数据库中的数据表数量</h3><p>这个app应用主要用于用户操作信息的记录，主要包括：</p><blockquote><p>1、用户提交我要学习的个人需求记录；<br>2、用户的课程评论信息记录；<br>3、用户用于收藏公开课, 授课讲师, 授课机构以及用户消息提醒的记录；<br>4、用户个人中心里面我的课程说明，用户和课程之间的学习信息记录；<br>5、用户咨询消息的记录等。</p></blockquote><p>如下图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-ef25b5f919654ffd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="c、开始数据库字段的定义-2"><a href="#c、开始数据库字段的定义-2" class="headerlink" title="c、开始数据库字段的定义"></a>c、开始数据库字段的定义</h3><p>打开我们的operation/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">from users.models import UserProfile</span><br><span class="line">from courses.models import Course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户我要学习信息</span><br><span class="line">class UserAsk(models.Model):</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name=&quot;姓名&quot;)</span><br><span class="line">    mobile = models.CharField(max_length=11, verbose_name=&quot;手机&quot;)</span><br><span class="line">    course_name = models.CharField(max_length=50, verbose_name=&quot;课程名&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户咨询&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.name    # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程评论</span><br><span class="line">class CourseComments(models.Model):</span><br><span class="line">    # 前面知道一个用户发表多个课程评论，所以在课程评论表中将用户设置为外键。</span><br><span class="line">    # 此处的user其实就是一个用来告诉我们这个课程评论属于哪个用户的字段</span><br><span class="line">    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;)</span><br><span class="line">    # 前面知道一门课程具有多个课程评论，所以在课程评论表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个课程评论属于哪个课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&quot;课程&quot;)</span><br><span class="line">    comment = models.CharField(max_length=200, verbose_name=&quot;评论&quot;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;课程评论&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.comment   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户收藏信息</span><br><span class="line">class UserFavorite(models.Model):</span><br><span class="line">    # 前面知道一个用户可以收藏多个内容，所以在用户收藏表中将用户设置为外键。</span><br><span class="line">    # 此处的user其实就是一个用来告诉我们这个用户收藏属于哪个用户的字段</span><br><span class="line">    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&quot;用户名&quot;)</span><br><span class="line">    fav_id = models.IntegerField(default=0, verbose_name=&apos;数据Id&apos;)</span><br><span class="line">    fav_type = models.CharField(choices=((&apos;1&apos;, &apos;课程&apos;), (&apos;2&apos;, &apos;课程机构&apos;), (&apos;3&apos;, &apos;讲师&apos;)), default=1, </span><br><span class="line">verbose_name=&apos;收藏类型&apos;,max_length=2)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户收藏&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.user   # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户消息信息</span><br><span class="line">class UserMessage(models.Model):</span><br><span class="line">    # 我们的消息有两种:一种是发给全员，另一种则是发给特定某一个用户。</span><br><span class="line">    # 所以如果使用外键，那么每个消息就要对应一个用户，比较难以实现全员消息的通知。</span><br><span class="line">    # 因此我们设置用户id,如果为0就发给所有用户，不为0就是发给特定Id的用户。</span><br><span class="line">    user = models.IntegerField(default=0, verbose_name=&quot;接收用户&quot;)</span><br><span class="line">    message = models.CharField(max_length=500, verbose_name=&apos;消息内容&apos;)</span><br><span class="line">    # 设置消息是否已读，采用布尔类型 BooleanField： False表示未读,True表示已读。</span><br><span class="line">    has_read = models.BooleanField(default=False, verbose_name=&apos;是否已读&apos;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户消息&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.message  # 这里很重要，否则在后台就显示不出Meta信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户课程信息</span><br><span class="line">class UserCourse(models.Model):</span><br><span class="line">    # 前面知道一个用户可以学习多门课程，所以在用户课程表中将用户设置为外键。</span><br><span class="line">    # 此处的user其实就是一个用来告诉我们这个课程属于哪个用户的字段</span><br><span class="line">    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name=&apos;用户名&apos;)</span><br><span class="line">    # 前面知道一门课程可以有多个课程的信息，所以在用户课程表中将课程设置为外键。</span><br><span class="line">    # 此处的course其实就是一个用来告诉我们这个课程信息属于哪门课程的字段</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE, verbose_name=&apos;课程&apos;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;学习时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &apos;用户课程&apos;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">        def __str__(self):</span><br><span class="line">            return self.user  # 这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><p>点击左侧的structure，我们可以看到如下的5个函数（数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-2ede72a271117733.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>至此，我们所有apps都已经创建完成，它们所包含的数据库字段的定义也都完成。</p><h2 id="注册我们的4个apps"><a href="#注册我们的4个apps" class="headerlink" title="注册我们的4个apps"></a>注册我们的4个apps</h2><p>打开eduline/settings.py文件，找到第33行代码，在其中加入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">    &apos;courses&apos;,</span><br><span class="line">    &apos;organization&apos;,</span><br><span class="line">    &apos;operation&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>如图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-97e3db17470ea2d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="数据库生成和迁移操作"><a href="#数据库生成和迁移操作" class="headerlink" title="数据库生成和迁移操作"></a>数据库生成和迁移操作</h3><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemirgration</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure></p><p>上面是对所有apps都进行数据库生成和迁移操作，如果你想对某个app操作，你可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemirgration appname</span><br><span class="line">migrate appname</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-c6e04b58eef2e740.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-11c7fca389468d18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>上图分别为makemirgrations和migrate过程中输出的信息。下图是由于我们做的改动导致文件的变动记录：<img src="https://upload-images.jianshu.io/upload_images/8964398-f18b45e53ebbba04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>courses/migrations/0001_initial.py:</strong>这个文件是我们migrations时生成的新initial文件，这是很重要的变动文件，不能随意删除。</p><h3 id="打开Navicat，查看数据表"><a href="#打开Navicat，查看数据表" class="headerlink" title="打开Navicat，查看数据表"></a>打开Navicat，查看数据表</h3><p>我们看到许多自定义的表都已经有了，而且命名规则都是 <strong>app名称 + 我们的类名转变为小写</strong>：<img src="https://upload-images.jianshu.io/upload_images/8964398-af6e309a1d76e254.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>现在我们打开django_migrations表去查看一下我们的migration记录：<img src="https://upload-images.jianshu.io/upload_images/8964398-be3ab0c7af5b6569.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-77d59afd7f972b55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>0001_inital是初始文件，其他的表明该应用已经在运行了。</p><h2 id="新建管理文件夹"><a href="#新建管理文件夹" class="headerlink" title="新建管理文件夹"></a>新建管理文件夹</h2><p>现在你看我们的目录树结构已经变成了这样：<img src="https://upload-images.jianshu.io/upload_images/8964398-8b15afbe06a960bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所有的应用apps都是直接裸露在树干上，如果有10个，甚至更多100个呢？这样的管理方式就显得很混乱，业务逻辑分离不够明显。这时，我们可以新建一个文件夹，专门用于apps的管理。</p><p>新建一个Python package,名字叫apps，把我们之前的4个apps都拖进去：<br><strong>不要勾选search for references,直接点击确定即可。</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ec7ac7c9faa7b84a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在就变成了这个结构，是不是好看多了：<img src="https://upload-images.jianshu.io/upload_images/8964398-f07d596005d77736.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>不过上面那种操作会出问题，系提示找不到那些import的模块：<img src="https://upload-images.jianshu.io/upload_images/8964398-1d9d2e84f3db3cb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>还得我们前面在回顾Django基础知识的时候，也出现过类似的情况，忘了的话可以查看这篇笔记：<a href="https://www.jianshu.com/p/0601eb221f04" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾</a></p><p>这里我们就直接设置文件查找路径了。<br>打开eduline/settings.py文件，找到里面的第16行代码，我们加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os, sys</span><br><span class="line"></span><br><span class="line"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(0, os.path.join(BASE_DIR, &apos;apps&apos;))</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-3563e76364f89cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数，将项目的绝对路径与apps进行拼接，返回一个新的地址,插入第0是希望它首先在apps下面搜索我们的内容。</p><h2 id="测试运行一下项目"><a href="#测试运行一下项目" class="headerlink" title="测试运行一下项目"></a>测试运行一下项目</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<code>runserver</code>再回车：<img src="https://upload-images.jianshu.io/upload_images/8964398-c332955dd793cd2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在浏览器地址栏中输入<a href="http://127.0.0.1:8000/或者http://127.0.0.1，出现：![](https://upload-images.jianshu.io/upload_images/8964398-d7faf520cd534d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/或者http://127.0.0.1，出现：![](https://upload-images.jianshu.io/upload_images/8964398-d7faf520cd534d34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>恭喜你，我们的Django网页已经跑起来了。</p><p>至此，我们关于在线教育网站项目的app应用的创建和数据库字段的定义就到此结束了，感谢你的赏阅！</p><p>下一篇笔记，我们就开始进行后台的管理和配置了！</p><p>本篇笔记对应于第八篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（七）：数据库字段的定义(上)</title>
      <link href="/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/"/>
      <url>/2018/04/11/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E7%9A%84%E5%AE%9A%E4%B9%89-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要就是对上篇遗留的2个问题的解决：4个app项目的创建和数据库字段的定义，鉴于篇幅的原因，这里分上下两篇进行介绍。</p><p>本篇笔记对应于第七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="4个app项目的创建"><a href="#4个app项目的创建" class="headerlink" title="4个app项目的创建"></a>4个app项目的创建</h2><h2 id="users-app的创建"><a href="#users-app的创建" class="headerlink" title="users app的创建"></a>users app的创建</h2><p>先点击菜单下的Tools按钮 ，然后点击下拉的 Run manage.py Task按钮，在命令行中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp users</span><br></pre></td></tr></table></figure></p><p>然后在Navicat中打开我们的数据库eduline，会发现生成了很多表，我们打开其中的auth_user这个表：<img src="https://upload-images.jianshu.io/upload_images/8964398-96b5cf3eb016cecd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-1fd4d44168358a2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>下面我简要说明一下表中个字段的含义：</p><blockquote><p>id代表主键, password是密码, last_login 这是Django用于自动记录用户最后登录时间的字段。<br>is_superuser 表明用户是否是超级用户(后台管理中会用到)，<br>username 表示用户名（该字段不要随便修改），<br>last_name和first_name分别是姓和名，<br>email 表示邮箱,<br>is_staff 表示是否是员工(后台管理中会用到)，<br>is_active 表示用户是否是激活状态,<br>date_joined 表示注册时间。</p></blockquote><p>这其实是满足不了我们的需求的，因为我们的个人中心通常包括：昵称，性别，生日，地址，手机号，邮箱等信息，所以我们要扩展这些字段来满足我们的需求。</p><p>user表的自定义方法官方文档已经给出了，这里开启传送大门<a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/" target="_blank" rel="noopener">https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/</a><br>我们是希望既可以保留原来的字段，又可以新增我们的自定义字段，所以我们需要引入继承我们的AbstractUser这个类。</p><p>打开我们的users/models.py文件，添加并修改如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line">from django.contrib.auth.models import AbstractUser  # 导入需要的类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    # 昵称</span><br><span class="line">    nick_name=models.CharField(max_length=50,verbose_name=&apos;昵称&apos;,default=&apos;&apos;)</span><br><span class="line">     # 生日，可以为空</span><br><span class="line">    birday=models.DateTimeField(verbose_name=&apos;生日&apos;,null=True,blank=True)</span><br><span class="line">     # 性别，默认为女</span><br><span class="line">    gender=models.CharField(max_length=6, choices=((&apos;male&apos;,&apos;男&apos;),(&apos;female&apos;,&apos;女&apos;)),default=&apos;female&apos;,verbose_name=&apos;性别&apos;)</span><br><span class="line">    # 地址</span><br><span class="line">    address=models.CharField(max_length=100,default=&apos;&apos;, verbose_name=&apos;地址&apos;)</span><br><span class="line">   # 手机号，可以为空</span><br><span class="line">    mobile=models.CharField(max_length=11,null=True,blank=True, verbose_name=&apos;手机号&apos;)</span><br><span class="line">     # 图片，默认为default.png,upload_to为上传路径，记住图片字段必须有字段最大值</span><br><span class="line">  image=models.ImageField(upload_to=&apos;image/%Y/%m&apos;,default=&apos;image/default.png&apos;,max_length=100,verbose_name=&apos;图片&apos;)</span><br><span class="line">     # meta信息，即后台管理中的名称</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name= &apos;用户信息&apos;</span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line">     # 重载str方法，打印实例会打印username，username为继承自Abstractuser这个类</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.username</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br><strong>1、</strong>按住ctrl然后单击我们的AbstractUser，就可以进入到这个类的定义文件：auth/models.py,这也就是我们之前导入的位置：<img src="https://upload-images.jianshu.io/upload_images/8964398-2afc42aee978ce90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，我们之前保留的字段它都有，所以我们只需要继承它就可以了。<br><strong>2、</strong>前面说过CharField必须有max_length, 但实际上Imagefield也是Charfield，所以也要有max_length。<br><strong>3、</strong>因为使用到了Imagefield字段，所以需要用到Pillow这个库，我们可以通过<strong>Pycharm</strong>或者<strong>pip</strong>安装它。</p><h2 id="注册APP和重载AUTH-USER-MODEL"><a href="#注册APP和重载AUTH-USER-MODEL" class="headerlink" title="注册APP和重载AUTH_USER_MODEL"></a>注册APP和重载AUTH_USER_MODEL</h2><h3 id="注册APP"><a href="#注册APP" class="headerlink" title="注册APP"></a>注册APP</h3><p>打开eduline/settings.py文件，找到第30行代码，最底下加上我们的app名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="重载AUTH-USER-MODEL"><a href="#重载AUTH-USER-MODEL" class="headerlink" title="重载AUTH_USER_MODEL"></a>重载AUTH_USER_MODEL</h3><p>打开eduline/settings.py文件，在刚才代码的底下加上重载我们的UserProfile代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;users&apos;,</span><br><span class="line">]</span><br><span class="line"># 重载UserProfile使其生效</span><br><span class="line">AUTH_USER_MODEL=&apos;users.UserProfile&apos;</span><br></pre></td></tr></table></figure></p><h3 id="数据库更新"><a href="#数据库更新" class="headerlink" title="数据库更新"></a>数据库更新</h3><p>点击<strong>Tools</strong> 菜单下 <strong>Run manage.py Task</strong>，运行我们的<strong>makemigrations users</strong>和<strong>migrate users</strong>命令。你会发现运行前者没问题，运行后者却出了问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin.0001_initial is applied before its dependency users.0001_initial on database &apos;default&apos;.</span><br></pre></td></tr></table></figure></p><p>其实这个问题就是你之前已经定义了userProfile并且还设置了重载它的语句，现在又来定义它，它是不会再给你提供那么多的初始表的：<img src="https://upload-images.jianshu.io/upload_images/8964398-b0f62064a092c5cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>所以我们需要删除除了auth_user以外的其他表，如果一次删除不了（那是因为表与表之间存在外键联系）就一个个的删除：<img src="https://upload-images.jianshu.io/upload_images/8964398-6d0155cae6f5a6e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在再来点击<strong>Tools</strong> 菜单下 <strong>Run manage.py Task</strong>，按顺序运行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>只运行后面那2个命令是不可以的，会缺少部分表！！！</p><p>看到没，这次没有问题出现了：<img src="https://upload-images.jianshu.io/upload_images/8964398-1ed8fbc0ef20961d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开数据库，看一下我们的表，一共有11个表：<img src="https://upload-images.jianshu.io/upload_images/8964398-fa14c091fd52ea11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>打开这个自定义表（users_usersprofile）,你会发现我们需要的字段都有了：<img src="https://upload-images.jianshu.io/upload_images/8964398-3c5035b877570d6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="注意一下"><a href="#注意一下" class="headerlink" title="注意一下"></a>注意一下</h2><p>我们以后不要在初始化的时候就执行makemigrations &amp; migrate操作，应当在我们设计完userProfile（自定义字段）之后再执行该操作，那样就不会报错了。</p><p>至此我们完成了第一个app的配置和其自定义字段的设计！</p><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>看下面这个图：<img src="https://upload-images.jianshu.io/upload_images/8964398-835aba8e7d10d47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们通常会在user中定义userCourse这个字段，用来记录用户学习的课程，它会有两个外键：user和course。所以在用到的时候，我们需要import Courses.models。</p><p>同样，如果用户对于某个课程需要评论，那么我们需要定义CourseComment这个字段，而且它肯定会放在 Courses.models当中。所以在用到的时候，我们又需要import User.models。</p><p>这是只有2个app的情况，当还有更多的情况：3个，4个，5个…apps时，循环调用import会出错导致系统不能正确识别，而且最起码会造成时间上的等待。那么有没有好的方法来解决这个问题呢？答案是有的！可以采用分层设计的思想来解决这个难题。</p><h3 id="分层设计"><a href="#分层设计" class="headerlink" title="分层设计"></a>分层设计</h3><p>在前面的第六篇笔记中我们已经说过，准备新建4个app,其中的3个apps:<br> <strong>(users)用户版块</strong>,<strong>(course)课程版块</strong>,<strong>(organization)授课教师与授课机构板块</strong>, 就是一些常规的信息存储，而第4个<strong>(operation)用户操作板块</strong>就是采用分层设计的思想来设计的，而且我们保证<strong>operation</strong>这个app的优先级高于其他3个，所以可以随时import这些底层的apps。各个apps的层级关系如下图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-566259e9e81f019b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ec0bdec837adaecf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在users这个app中，我们自定义了UserProfile这个表用来覆盖系统默认的user表。这样其实我们这个users应用已经设计完了。不过呢，通过研究我们发现有些功能是非常独立的，我们为了平衡一些app的代码量，可以将它们放在这个users项目里面。</p><blockquote><p>EmailVerifyRecord - 邮箱验证码<br>Banner - 轮播图</p></blockquote><h3 id="邮箱验证码的设计"><a href="#邮箱验证码的设计" class="headerlink" title="邮箱验证码的设计"></a>邮箱验证码的设计</h3><p>验证码分三种类型，分别用于不同的功能：注册；找回密码；修改邮箱，所以在设计验证码类型的时候注意选择的条件，通常验证码包括这些字段：<code>code</code>,<code>email</code>,<code>send_type</code>,<code>send_time</code>。</p><p>我们打开users/models.py文件，接着之前的代码在后面添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class EmailVerifyRecord(models.Model):</span><br><span class="line">    code = models.CharField(max_length=20, verbose_name=&quot;验证码&quot;)</span><br><span class="line">    email = models.EmailField(max_length=50, verbose_name=&quot;邮箱&quot;)</span><br><span class="line">    send_type = models.CharField(verbose_name=&quot;验证码类型&quot;, </span><br><span class="line">choices=((&apos;register&apos;, &apos;注册&apos;), (&apos;forget&apos;, &apos;找回密码&apos;), (&apos;update_email&apos;, &apos;修改邮箱&apos;)), max_length=30)</span><br><span class="line"></span><br><span class="line"># 这里的now得去掉(),如果不去掉则会根据编译时间，而不是我们要的实例化时间。</span><br><span class="line">    send_time = models.DateTimeField(verbose_name=&quot;发送时间&quot;, default=datetime.now)   </span><br><span class="line"> </span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;邮箱验证码&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.email   #这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><h3 id="轮播图的设计"><a href="#轮播图的设计" class="headerlink" title="轮播图的设计"></a>轮播图的设计</h3><p>轮播图是一个可以自动切换图片的效果，它包括标题，具体的图片，点击图片后的跳转地址，图片的轮播顺序，添加时间等要素：<code>title</code>,<code>image</code>,<code>url</code>,<code>index</code>,<code>add_time</code>。<br>我们打开users/models.py文件，接着之前的代码在后面添加如下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Banner(models.Model):</span><br><span class="line">    title = models.CharField(max_length=100, verbose_name=&quot;标题&quot;)</span><br><span class="line">    image = models.ImageField(max_length=100, upload_to=&apos;banneer/%Y/&amp;m&apos;,verbose_name=&quot;轮播图&quot;)</span><br><span class="line">    url = models.URLField(max_length=200, verbose_name=&apos;访问地址&apos;)</span><br><span class="line"></span><br><span class="line">    # index的值默认越大越靠后，可以自定义修改index值。</span><br><span class="line">    index = models.IntegerField(default=100, verbose_name=&apos;轮播顺序&apos;)</span><br><span class="line">    add_time = models.DateTimeField(default=datetime.now, verbose_name=&apos;添加时间&apos;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;轮播图&quot;</span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title  # 这里很重要，否则在后台就显示不出Meta信息</span><br></pre></td></tr></table></figure></p><p>你可能会问，为什么不把与用户相关的评论，点赞，学习的课程，课程进度等信息也放到这个app中呢？其实是因为那些信息的相关性很大，经常是循环引用，所以我们把那些信息都放到operation这个app中。</p><p>我们把鼠标移至models.py这个文件上，再点击右侧的structure，可以发现我们刚才新创建的3个类（其实就是数据库里的数据表）：<img src="https://upload-images.jianshu.io/upload_images/8964398-6e0a1d4587bc3505.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-36061b35c125ea43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此第一个app应用的数据库字段定义算是完成了，下面大家可以思考一下其他3个应用的数据库字段的定义应该是怎样的，给大家留点时间思考一下，我们下一篇笔记再来介绍！下面介绍一个Python的规范，可以让你的代码更具有可读性和维护性。</p><h2 id="PEP8规范"><a href="#PEP8规范" class="headerlink" title="PEP8规范"></a>PEP8规范</h2><h3 id="（一）-代码的编排"><a href="#（一）-代码的编排" class="headerlink" title="（一） 代码的编排"></a>（一） 代码的编排</h3><p><strong>1、 缩进</strong>。每行需要4个空格的缩进，不要使用Tap键，更不能混合使用Tap键和空格。<br><strong>2 、</strong>每行最大长度79，换行可以使用反斜杠，但最好使用圆括号。换行点要在操作符的后边敲回车。<br><strong>3 、</strong>类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。</p><h3 id="（二-）文档的编排"><a href="#（二-）文档的编排" class="headerlink" title="（二 ）文档的编排"></a>（二 ）文档的编排</h3><p><strong>1、</strong> 模块内容的顺序：模块说明和docstring—import—globals&amp;constants—其他定义。其中import部分，又按标准、第三方和自己编写顺序依次排放，之间空一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from datetime import datetime</span><br><span class="line"># Create your models here.</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line"># 自己定义代码放置处</span><br></pre></td></tr></table></figure></p><p><strong>2 、</strong>不要在一行import多个库，比如import os, sys，虽说没有错误但是并不推荐。<br><strong>3、</strong> 如果采用from xx import xx的方式来引用某个库，可以省略<code>module.</code>，但是可能会出现命名的冲突，所以这时就要采用import xx的方式。</p><h3 id="（三）空格的使用"><a href="#（三）空格的使用" class="headerlink" title="（三）空格的使用"></a>（三）空格的使用</h3><p>总体原则，避免不必要的空格。<br><strong>1、</strong> 各种右括号前不要加空格。<br><strong>2、</strong> 逗号、冒号、分号前不要加空格。<br><strong>3 、</strong>函数的左括号前不要加空格。如function(1)。<br><strong>4 、</strong>序列的左括号前不要加空格。如list[2]。<br><strong>5、</strong>操作符左右各加一个空格，不要为了对齐增加空格。<br><strong>6 、</strong>函数默认参数使用的赋值符左右省略空格。<br><strong>7、</strong>不要将多句语句写在同一行，尽管使用<code>；</code>允许。<br><strong>8、</strong> if/for/while语句中，即使执行语句只有一句，也必须另起一行。</p><h3 id="（四）命名的规范"><a href="#（四）命名的规范" class="headerlink" title="（四）命名的规范"></a>（四）命名的规范</h3><p>总体原则，新编代码必须按下面命名风格进行，现有库的编码尽量保持风格。<br><strong>1 、</strong>尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。<br><strong>2、</strong> 模块命名尽量短小，使用全部小写的方式，可以使用下划线。<br><strong>3、</strong> 包命名尽量短小，使用全部小写的方式，不可以使用下划线。<br><strong>4、</strong> 类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。<br><strong>5、</strong> 异常命名使用CapWords+Error后缀的方式。<br><strong>6 、</strong>全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是<strong>all</strong>机制;二是前缀一个下划线。<br><strong>7 、</strong>函数命名使用全部小写的方式，可以使用下划线。<br><strong>8 、</strong>常量命名使用全部大写的方式，可以使用下划线。<br><strong>9 、</strong>类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。<br><strong>10、</strong>类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。<br><strong>11 、</strong>类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。<br><strong>12 、</strong>为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明<strong>a,访问时，只能通过Foo._Foo</strong>a，避免歧义。如果子类也叫Foo，那就无能为力了。<br><strong>13 、</strong>类的方法第一个参数必须是<strong>self</strong>，而静态方法第一个参数必须是<strong>cls</strong>。</p><h3 id="（五）编码的建议"><a href="#（五）编码的建议" class="headerlink" title="（五）编码的建议"></a>（五）编码的建议</h3><p><strong>1、</strong>编码中考虑到其他python实现的效率等问题，比如运算符‘+’在CPython（Python）中效率很高，都是Jython中却非常低，所以应该采用.join()的方式。<br><strong>2 、</strong>尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。<br><strong>3 、</strong>使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。<br><strong>4 、</strong>异常中不要使用裸露的except，except后跟具体的exceptions。<br><strong>5 、</strong>异常中try的代码尽可能少。比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">value = collection[key]</span><br><span class="line">except KeyError:</span><br><span class="line">return key_not_found(key)</span><br><span class="line">else:</span><br><span class="line">return handle_value(value)</span><br></pre></td></tr></table></figure></p><p>要优于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line"># Too broad!</span><br><span class="line">return handle_value(collection[key])</span><br><span class="line">except KeyError:</span><br><span class="line"># Will also catch KeyError raised by handle_value()</span><br><span class="line">return key_not_found(key)</span><br></pre></td></tr></table></figure></p><p><strong>6 、</strong>使用startswith() and endswith()代替切片进行序列前缀或后缀的检查。比如:<br><code>Yes: if foo.startswith(‘bar’):</code>优于<code>No: if foo[:3] == ‘bar’:</code><br><strong>7 、</strong>使用isinstance()比较对象的类型。比如:<br><code>Yes: if isinstance(obj, int):</code>优于<code>No: if type(obj) is type(1):</code><br><strong>8、</strong> 判断序列空或不空，有如下规则:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes: if not seq:</span><br><span class="line">if seq:</span><br></pre></td></tr></table></figure></p><p>优于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No: if len(seq)</span><br><span class="line">if not len(seq)</span><br></pre></td></tr></table></figure></p><p><strong>9 、</strong>字符串不要以空格收尾。<br><strong>10、</strong>二进制数据判断使用 if boolvalue的方式。</p><p>如果你想获得更多关于PEP8的信息，可以查阅这篇信息<a href="http://blog.sae.sina.com.cn/archives/4781" target="_blank" rel="noopener">PEP8 Python 编码规范整理</a>或者官方文档<a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP8的官方文档</a></p><p>至此，我们第七篇：在线教育网站的数据库字段的定义(上)就到此结束了，感谢你的赏阅。下一篇，我们就完善其余3个apps应用的数据库字段的定义。</p><p>本篇笔记对应于第七篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（六）：教育网站开发配置</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>小伙伴们，今天终于进入了我们在线教育网站的项目开发阶段，这是这个项目的第一篇，主要给大家创建我们的虚拟环境和相关软件的安装（可能部分软件的安装在前面已经介绍了，这里就不再赘述了，必要的时候会开启传送大门。）</p><p>本篇笔记对应于第六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p><h2 id="虚拟环境配置"><a href="#虚拟环境配置" class="headerlink" title="虚拟环境配置"></a>虚拟环境配置</h2><p>首先请大家回顾阅读一下我们之前写的第二篇：<a href="https://www.jianshu.com/p/6b007bc61f5c" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</a>，然后我会给大家演示这个项目的虚拟环境配置，作用就是加深大家对虚拟环境搭建的印象。</p><h3 id="1、创建虚拟环境eduline（名字可以随意取）"><a href="#1、创建虚拟环境eduline（名字可以随意取）" class="headerlink" title="1、创建虚拟环境eduline（名字可以随意取）"></a>1、创建虚拟环境eduline（名字可以随意取）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\YC&gt;F:  # 进入F盘</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Envs  # 进入到Envs这个文件夹（系统默认在C盘，我自定义在F盘）</span><br><span class="line"></span><br><span class="line">F:\Envs&gt;mkvirtualenv eduline   # 创建虚拟环境eduline</span><br><span class="line">Using base prefix &apos;f:\\python\\pystall&apos;</span><br><span class="line">New python executable in F:\Envs\eduline\Scripts\python.exe</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs&gt;   # 表示已经进入到eduline这个虚拟环境中</span><br></pre></td></tr></table></figure><h3 id="2、安装Django2-0-1"><a href="#2、安装Django2-0-1" class="headerlink" title="2、安装Django2.0.1"></a>2、安装Django2.0.1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(eduline) F:\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple     # 采用清华镜像源安装django</span><br><span class="line"></span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting django==2.0.1</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB)</span><br><span class="line">    100% |████████████████████████████████| 7.1MB 2.9MB/s</span><br><span class="line">Collecting pytz (from django==2.0.1)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB)</span><br><span class="line">    100% |████████████████████████████████| 512kB 1.5MB/s</span><br><span class="line">Installing collected packages: pytz, django</span><br><span class="line">Successfully installed django-2.0.1 pytz-2018.5     # 提示已经安装成功了，新版本会自动安装pytz这个库</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs&gt;     # 然后就可以开始pip安装库和包了</span><br></pre></td></tr></table></figure><h3 id="3、创建我们的django项目"><a href="#3、创建我们的django项目" class="headerlink" title="3、创建我们的django项目"></a>3、创建我们的django项目</h3><p>打开Pycharm，新建django项目，各步骤如下（这里演示的是没有虚拟环境的版本，已经有虚拟环境的直接点击<code>Existing interpreter</code>，选择已有的虚拟环境即可）：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-d0c260c9c4be01cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至于各个箭头所填内容的原因，我这里就不再说明了，如果忘记了可以翻看之前的第二篇笔记。最后点击确定按钮即可，进入到如下页面：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-610fbd6ac3b5fdde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>至此，虚拟环境以及项目的搭建就完成了。</p><h3 id="mysqlclient的安装"><a href="#mysqlclient的安装" class="headerlink" title="mysqlclient的安装"></a>mysqlclient的安装</h3><p>正如你前面所看到的，因为我们后面需要连接数据库，所以数据库驱动mysqlclient的安装是必不可少的，这里就先安装一下。（<a href="https://www.jianshu.com/p/3eba0cbb172f" target="_blank" rel="noopener">零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发</a>，前面已经介绍过了，所以这里简单演示一下即可）<br><strong>这里就采用网上下载到本地的方式来安装一下：</strong><br><strong>1、</strong>点击下面的蓝色字，即可跳转到下载地址：<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a>，点击这个网站，然后按住Ctrl+F键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。<img src="https://upload-images.jianshu.io/upload_images/8964398-c55482a686d9d4bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！<br><strong>2、</strong>将下载好的mysqlclient放置到虚拟环境eduline里面：<img src="https://upload-images.jianshu.io/upload_images/8964398-68a937bb55e1fcda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>3、</strong>在虚拟环境中安装mysqlclient，如图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\YC&gt;F:</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Envs    </span><br><span class="line"></span><br><span class="line">F:\Envs&gt;workon eduline</span><br><span class="line">(eduline) F:\Envs&gt;cd eduline    # 必须进入到你的项目中才能开始安装，否则会出错</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs\eduline&gt;pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Processing f:\envs\eduline\mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</span><br><span class="line">Installing collected packages: mysqlclient</span><br><span class="line">Successfully installed mysqlclient-1.3.13</span><br><span class="line"></span><br><span class="line">(eduline) F:\Envs\eduline&gt;</span><br></pre></td></tr></table></figure></p><p><strong>4、</strong>配置settings.py文件<br>打开eduline/eduline/settings.py文件，找到第77行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改为如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;eduline&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;密码&apos;,  </span><br><span class="line">        &apos;HOST&apos;:&apos;127.0.0.1&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5、新建数据库eduline</strong><br>打开Navicat，新建数据库eduline:<img src="https://upload-images.jianshu.io/upload_images/8964398-7d2127abd84ed428.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后点击<strong>Tools</strong> 菜单下 <strong>Run manage.py Task</strong>，运行我们的<strong>makemigrations</strong>和<strong>migrate</strong>命令，最后运行一下我们的项目：<strong>runserver</strong>，在浏览器地址栏中输入：<a href="http://127.0.0.1:8000/或者（http://127.0.0.1）出现：![](https://upload-images.jianshu.io/upload_images/8964398-dcc125590f7a79d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">http://127.0.0.1:8000/或者（http://127.0.0.1）出现：![](https://upload-images.jianshu.io/upload_images/8964398-dcc125590f7a79d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>表明我们的项目初始搭建完成了。</p><h3 id="Xadmin的安装"><a href="#Xadmin的安装" class="headerlink" title="Xadmin的安装"></a>Xadmin的安装</h3><p>尽管Django自带了admin用于后台的管理，但是我们觉得它的可支配性不是很大，所以这里推荐采用Xadmin来对后台进行管理。（还有一个叫做django-suit的插件，它其实只是美化了admin，功能上并没有做过多的拓展，这里开启传送大门，有兴趣的可以了解一下：<a href="http://djangosuit.com/" target="_blank" rel="noopener">django-suit官网</a>）<br>大家可以点击这里下载<a href="https://github.com/liyaopinner/mxonline_resources/tree/master/xadmin" title="xadmin" target="_blank" rel="noopener">xadmin</a>（<strong>下载后的文件放置位置，后面会介绍，这里你先新建一个文件夹A临时存放一下！</strong>）</p><h3 id="DjangoUeditor的安装"><a href="#DjangoUeditor的安装" class="headerlink" title="DjangoUeditor的安装"></a>DjangoUeditor的安装</h3><p>因为后面课程的添加需要富文本的支持，所以需要用到富文本插件，这里依旧开启传送大门：大家可以点击这里下载<a href="https://github.com/liyaopinner/mxonline_resources/tree/master/DjangoUeditor" title="DjangoUeditor" target="_blank" rel="noopener">DjangoUeditor</a>（<strong>下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！</strong>）</p><h3 id="课程的前端初始代码"><a href="#课程的前端初始代码" class="headerlink" title="课程的前端初始代码"></a>课程的前端初始代码</h3><p>因为我们这里主要说的是前端，所以这个在线教育网站的前端页面源代码就直接给大家了，大家自行下载，开启传送大门：<a href="https://github.com/liyaopinner/mxonline_resources/blob/master/%E5%88%9D%E5%A7%8B%E5%89%8D%E7%AB%AF%E6%BA%90%E7%A0%81.rar" title="初始前端源码.rar" target="_blank" rel="noopener">初始前端源码.rar</a>（<strong>下载后的文件放置位置，后面会介绍，这里你先临时存放在文件夹A一下！</strong>）</p><p>至此，项目开发所需要的额外软件算是准备完全了，接下来则是业务逻辑分析了。</p><h2 id="业务逻辑分析"><a href="#业务逻辑分析" class="headerlink" title="业务逻辑分析"></a>业务逻辑分析</h2><p>其实在第一篇的时候我们就已经介绍完了这个网站的业务逻辑，但是鉴于时间的原因，我这里再次介绍一下，其目的就是让大家更加的熟悉我们的业务逻辑，为接下来数据库的设计做一个铺垫。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。</span><br><span class="line"></span><br><span class="line">点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。</span><br><span class="line"></span><br><span class="line">点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。</span><br><span class="line"></span><br><span class="line">点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。</span><br><span class="line"></span><br><span class="line">点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。</span><br><span class="line"></span><br><span class="line">点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。</span><br><span class="line"></span><br><span class="line">机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。</span><br><span class="line"></span><br><span class="line">点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。</span><br><span class="line"></span><br><span class="line">后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。</span><br><span class="line"></span><br><span class="line">课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。</span><br><span class="line"></span><br><span class="line">课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。</span><br><span class="line"></span><br><span class="line">你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。</span><br><span class="line"></span><br><span class="line">日志记录：它可以记录后台人员的操作情况。</span><br><span class="line"></span><br><span class="line">其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。</span><br></pre></td></tr></table></figure></p><p>所以我们的app一共有4个，用于分别实现不同的功能，具体如下：</p><blockquote><p><strong>(users)用户版块：</strong>负责记录用户的个人信息，轮播图等相关内容,</p></blockquote><hr><blockquote><p><strong>(course)课程版块：</strong>用于记录课程相关的内容,</p></blockquote><hr><blockquote><p><strong>(organization)授课教师与授课机构板块：</strong>用于记录授课讲师，机构相关内容,</p></blockquote><hr><blockquote><p><strong>(operation)用户操作板块：</strong>用于记录用户操作的相关内容。</p></blockquote><hr><p>关于这4个app项目的创建和数据库字段的定义，我们下一篇笔记再介绍。接下来我们介绍如何利用Pycharm来同步更新代码至github，前面那篇介绍了如何利用Pycharm来新建repositories 并把代码上传过去，这次就是介绍如何更新之前上传的代码了。</p><h2 id="利用Pycharm来同步更新代码至github"><a href="#利用Pycharm来同步更新代码至github" class="headerlink" title="利用Pycharm来同步更新代码至github"></a>利用Pycharm来同步更新代码至github</h2><p>其实很简单的，分2个步骤。<br><strong>1、</strong>点击菜单栏下的VCS，下拉找到第三个Commit，点击一下，就会出现下面的页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-b1fd9abf5fb959d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>选择完以后，点击下面的commit按钮，至此第一步就完成了，接下来第二步。<br><strong>2、</strong>还是点击菜单栏下的VCS，下拉找到第八个Git，点击一下，下拉找到那个倒数第四个Push按钮，点击一下，就会出现如下页面：<img src="https://upload-images.jianshu.io/upload_images/8964398-87a4674b71e46c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>如果你第一步Commit的话，这里就有你上传的Commit信息，我这第一步因为没有提交所以就没有了。然后选择你的提交项目，点击下面的Push按钮，等待几分钟，去你的Github仓库看一下，发现出现了：<img src="https://upload-images.jianshu.io/upload_images/8964398-574212f8e939a0e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>那么恭喜你，你已经Get了这个技能。</p><p>至此本篇关于‘’教育网站开发配置‘’的笔记就到此为止了，下一篇就开始4个app项目的创建和数据库字段的定义的介绍了，感谢你的赏阅。</p><p>本篇笔记对应于第六篇代码，对应于github的位置是<a href="https://github.com/licheetools/eduline" target="_blank" rel="noopener">https://github.com/licheetools/eduline</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（五）：简易留言簿交互实现</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E4%BA%A4%E4%BA%92%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E4%BA%A4%E4%BA%92%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要是简易留言簿的交互实现，笔记中本篇（第五篇）对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第五篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第五篇截止代码。</a></p><p>好了，我们先来看一下我们上篇笔记的最终效果：<img src="https://upload-images.jianshu.io/upload_images/8964398-269aa0238b512f88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h2 id="交互实现"><a href="#交互实现" class="headerlink" title="交互实现"></a>交互实现</h2><h3 id="对象关系映射ORM"><a href="#对象关系映射ORM" class="headerlink" title="对象关系映射ORM"></a>对象关系映射ORM</h3><p>通常而言，为了实现我们数据意义上的增删改查，你可能会选择使用原生的数据库查询语句如:<code>select * from database  where id =8;</code>又比如下面一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import MySQLdb  # 导入数据库驱动模块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def book_list(request):  # 使用原生sql获取书的列表</span><br><span class="line">    # 创建一个数据库的连接: 指明用户名，数据库名，密码，服务器名</span><br><span class="line">    db = MySQLdb.connect(user = &apos;me&apos;, db=&apos;mydb&apos;, passwd=&apos;secret&apos;, host=&apos;localhost&apos;)</span><br><span class="line">    # 创建一个游标对象执行器</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    # 书写我们需要的sql语句，可以在Navicat中执行</span><br><span class="line">    cursor.execute(&apos;SELECT name FROM books ORDER BY name&apos;)</span><br><span class="line">    # 对于fetchall()的结果做遍历，并将遍历回来的结果当做数组，再取出第0个值name（必须一一对应）。</span><br><span class="line">    names = [row[0] for row in cursor.fetchall()]</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure></p><p>尽管这种方法可以对数据进行操作，但是一旦需要进行操作的数据过多而且不仅仅是查询操作，这种方法就显得很捉襟见肘了。那么有没有一种简便的方法呢？答案是有的！这就用到了我们的ORM了。</p><hr><p>对象关系映射（英语：<strong>(Object Relational Mapping</strong>，简称<strong>ORM</strong>，或<strong>O/RM</strong>，或<strong>O/R mapping</strong>），是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换 。从效果上说，它其实是创建了一个可在编程语言里使用的–“虚拟对象数据库”。</p><hr><p>你可以借鉴面向对象编程的思想这么理解，把数据当做对象（事实上在面向对象编程的思想里，一切都是对象，别忘了Python也就是面向对象编程语言），那么它就有方法和属性了。举个例子来说：<code>car</code>，它的属性可以是颜色（color），大小（size），长度（length）等，可以这么表示为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">car.color      car.size       car.length</span><br></pre></td></tr></table></figure></p><p>；它的方法可以是启动（start），运行（run），停车（stop）等,也可以这样表示为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">car.start()         car.run()       car.stop()</span><br></pre></td></tr></table></figure></p><h3 id="创建我们的models-数据库信息"><a href="#创建我们的models-数据库信息" class="headerlink" title="创建我们的models(数据库信息)"></a>创建我们的models(数据库信息)</h3><p>从前面的描述中你就知道了，<strong>models.py</strong>这个文件就是用于数据库的操作，包括连接，访问，数据定义，修改等，接下来我们就开始定义数据，写我们的代码了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1ab081d168c493bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在空白处输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class UserMessage(models.Model):   # 继承于django.db.models.Model</span><br><span class="line"># max_length设置最大长度，verbose_name在后台显示字段会用到，也就是中文显示文本内容</span><br><span class="line">    name = models.CharField(max_length=20, verbose_name=&quot;昵称&quot;)  </span><br><span class="line">    email = models.EmailField(verbose_name=&quot;邮箱&quot;)</span><br><span class="line">    address = models.CharField(max_length=100 ,verbose_name=&quot;联系地址&quot;)</span><br><span class="line">    message = models.CharField(max_length=500, verbose_name=&quot;你的轨迹&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name = &quot;用户留言信息&quot;</span><br><span class="line"># class Meta，内嵌于 UserMessage 这个类的定义中，主要是用于后台管理显示中文信息</span><br></pre></td></tr></table></figure></p><p>前面说到，一旦数据发现变动就必须执行我们的<code>makemigrations</code>和<code>migrate</code>操作，我们运行一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-58d9e73e3d0bca55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>为什么会这样呢，怎么一点反应也没有，其实因为你还没有把新创建的apps在setting中注册，所以才会出现这样的情况。</p><h3 id="在settings-py中注册我们新创建的apps"><a href="#在settings-py中注册我们新创建的apps" class="headerlink" title="在settings.py中注册我们新创建的apps"></a>在settings.py中注册我们新创建的apps</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-ff97e9b26776f1d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在djangoTest/settings.py 第33行的INSTALLED_APPS:的尾部加上一行代码<code>&#39;liuyan&#39;,</code>如下图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;liuyan&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这时候我们再来重新运行Tools 菜单下 Run manage.py Task然后输入<code>makemigrations</code>或者<code>makemigrations liuyan</code>,因为这里只有一个app所以我就直接<code>makemigrations</code>，多个可以根据自己的需要来选择<code>makemigrations</code>的对象，如下图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-f69dcd7c75cc96b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接着运行<code>migrate</code>命令：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-d3e5f82db83e3da1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>提示生成了一些文件信息，我们打开Navicat去看一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-fdafb2be4a5edf82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，我们的数据信息在数据库成功显示了。默认数据表的名称为app名称_类名（转换为小写），自动生成的id作为主键（数据查询必备，这里系统给我们自己添加了）。</p><h3 id="关于Models的一些说明"><a href="#关于Models的一些说明" class="headerlink" title="关于Models的一些说明"></a>关于Models的一些说明</h3><p>前面我们用到了一些字段如CharField，EmailField等，还有一些这里没用到但是今后会用到的字段，我列举了一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">models.TextField    # 文本注意与CharField的区别，范围大小不一样</span><br><span class="line">models.ForeignKey     # 外键</span><br><span class="line">models.DateTimeField  # 时间</span><br><span class="line">models.IntegerField   # 整型</span><br><span class="line">models.IPAddressField # IP地址</span><br><span class="line">models.FileField      # 文件</span><br><span class="line">models.ImageField     # 图片</span><br></pre></td></tr></table></figure></p><p>如果你想看全部的信息可以，将光标放在models上面，按住ctrl+然后单击，进入models/–init–.py文件，之后以同样的操作点击任意一个fields单词，就可以打开fields/–init–.py文件了，在最前面就可以看到所有字段：<img src="https://upload-images.jianshu.io/upload_images/8964398-df00d7c92146e26b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="字段参数的说明"><a href="#字段参数的说明" class="headerlink" title="字段参数的说明"></a>字段参数的说明</h3><p>1、<strong>CharField必须指明默认的最大长度（max_length）</strong>。null=True,blank=True指明字段可以为空,defalut = “ “指定默认值为空。通常我们地址这一栏可以为空，所以修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address = models.CharField(max_length=100 ,null=True,blank=True,verbose_name=&quot;联系地址&quot;)</span><br></pre></td></tr></table></figure></p><p>2、表的id是自动生成的，如果需要自定义主键,那么需要在models.py中添加字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True,max_length=100 ,verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure></p><p>再来<code>makemigrations</code>和<code>migrate</code>一下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c0ceb848e07024c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们发现出错了，其实是要求我们需要给object_id添加默认值，那我们默认为空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id = models.CharField(primary_key=True,max_length=100,default=&quot;&quot; ,verbose_name=&quot;主键&quot;)</span><br></pre></td></tr></table></figure></p><p>重新运行一下，<code>makemigrations</code>和<code>migrate</code>：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-cc5a397027c99836.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们现在再次刷新一下Navicat，发现系统默认生成的主键id没了,主键变成了我们自定义的object_id。右键liuyan_usermessage这个表，选择设计表打开：<img src="https://upload-images.jianshu.io/upload_images/8964398-ed0759e2403cabbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="Meta的说明"><a href="#Meta的说明" class="headerlink" title="Meta的说明"></a>Meta的说明</h3><p>1、在Meta信息中我们可以指定表的名称，如db_table：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_table = &quot;user_liuyan&quot;</span><br></pre></td></tr></table></figure></p><p>2、可以指定排序的字段，如ordering：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ordering = &apos;object_id&apos;</span><br></pre></td></tr></table></figure></p><p>这是以其升序的，倒序的话只需要这样<code>ordering = &#39;-object_id&#39;</code>即可。<br>3、可以更改后台信息，如verbose_name_plural：<br>verbose_name_plural是verbose_name的复数形式，如果不改则会在其后面加s。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">verbose_name = &quot;用户留言信息&quot;</span><br><span class="line">则verbose_name_plural 会显示 &quot;用户留言信息s&quot;，所以一般这2个的值都是相同的</span><br><span class="line">即</span><br><span class="line">verbose_name =verbose_name_plural=&quot;用户留言信息&quot;</span><br></pre></td></tr></table></figure></p><hr><p><strong>由于格式存在一定问题，本篇后续内容无法上传，因此后续内容请搜索微信公众号：啃饼思录，进行阅读！！！</strong></p><hr><p>至此，所有Django的基础知识我们就回顾完了，下一篇正式开始在线教育网站的项目开发！</p><p>笔记中本篇（第五篇）对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第五篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第五篇截止代码。</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（四）：简易留言簿基础开发</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E7%AE%80%E6%98%93%E7%95%99%E8%A8%80%E7%B0%BF%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇笔记主要是简易留言簿的基础开发，接下来的一篇才是开发的重点，但是这样为了缓冲一下大家，希望大家不要有大大的鸭梨。。。笔记中上篇（第三篇）对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第三篇截止代码。我们从这开始正式进入到简易留言簿的基础开发。（前面的必要工作已经做完，如果没跟上节奏，请回头补上，这里就不细说了。）" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第三篇截止代码。我们从这开始正式进入到简易留言簿的基础开发。（前面的必要工作已经做完，如果没跟上节奏，请回头补上，这里就不细说了。）</a></p><h3 id="页面介绍"><a href="#页面介绍" class="headerlink" title="页面介绍"></a>页面介绍</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-25d5b8c405504cac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个页面就是我们即将开发的简易留言簿，初始页面就是这样，关于这个页面的实现是html和css搭建的，这是前端的部分，有兴趣的小伙伴自己去查找资料学习一下，这里因为只讲后端，就不介绍了哈。</p><p>这里主要是介绍Django从请求到响应的整个完整流程，为我们后面开发在线教育平台打下基础。本篇笔记所要用到的静态html页面请前往Github下载：<strong>start.html</strong></p><h3 id="业务逻辑介绍"><a href="#业务逻辑介绍" class="headerlink" title="业务逻辑介绍"></a>业务逻辑介绍</h3><p>用户填写信息和留言 –&gt; 点击提交 –&gt;数据被存储到数据库（我们可以去数据库查询的到）。</p><h3 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h3><p>1、将下载的<strong>start.html</strong>文件拖到前面创建的templates文件夹里，如下图：<img src="https://upload-images.jianshu.io/upload_images/8964398-e35d79330ec06dca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>2、通过观察我们发现，这个页面里面把所需的css样式都写进去了，不利于我们对其样式的个性化管理，所以我打算新建一个css文件，用于存放css样式表单。</p><p>在static的下面新创建css和js文件夹，可能js文件夹用不上，但是这也是为后面的开发在线教育平台打下基础，你最好也试着创建一下，一般这些文件都是经常用到的。（这里因为功能的原因用不上。）然后在css这个文件夹下面新建一个<strong>style.css</strong>的文件。<img src="https://upload-images.jianshu.io/upload_images/8964398-67c6eddd1dc25f49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、打开<strong>start.html</strong>，点击<code>&lt;style&gt;</code>标签，将样式收起来，然后将其复制到刚才新建的<strong>style.css</strong>这个样式表中。<img src="https://upload-images.jianshu.io/upload_images/8964398-0c398228cdfd192e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>记得在复制的时候把开头和结尾的<code>&lt;style&gt;</code>标签给去掉，并且可以按键盘上的<code>shift + tab</code>键，格式一下代码。就是下面的样子！<img src="https://upload-images.jianshu.io/upload_images/8964398-34033ea199acbfa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>4、别忘了将你新建的css样式文件引入到我们的html文件里去，否则后面文件的样式可能就加载不出来呀。事实上，我们在html里面已经引入了。<img src="https://upload-images.jianshu.io/upload_images/8964398-e2a9eb007acc04f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="数据库的连接"><a href="#数据库的连接" class="headerlink" title="数据库的连接"></a>数据库的连接</h3><p>5、打开djangoTest这个项目目录下面的settings.py文件，找到下面第80行代码，因为Django自带的数据库是sqlite3，前面说过我们采用的数MySQL数据库，所以需要对其进行修改。<img src="https://upload-images.jianshu.io/upload_images/8964398-136d6211aa93d9e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>也就是说默认的连接是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但我们应当修改成这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;djangoTest&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;密码&apos;,</span><br><span class="line">        &apos;HOST&apos;: &quot;127.0.0.1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们中在Navicat中新建的数据库名字与其中的NAME的名称应设置为一致，否则会出错！！<br>6、在Navicat中新建的数据库djangoTest，如图：<img src="https://upload-images.jianshu.io/upload_images/8964398-9e90d1ca46854b9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="安装-mysqlclient和配置seeting文件。"><a href="#安装-mysqlclient和配置seeting文件。" class="headerlink" title="安装 mysqlclient和配置seeting文件。"></a>安装 mysqlclient和配置seeting文件。</h3><p>7、点击主页面Tools 菜单下的 Run manage.py Task，我们会发现系统报了下面的错误：<img src="https://upload-images.jianshu.io/upload_images/8964398-fa13bdd18c9fb7d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>上面的错误提示我们没有安装MySQLdb模块，既然出了问题，我们就解决问题。</p><p>还记的在Pycharm里面安装第三方库么？如果不记得请翻看前面的笔记。这里简单说明一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-98ddd19b78cb5f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>点击4中的绿色+号，就可以搜索第三方库，然后点击install即可，是不是很简单，但有时候会出现安装失败的情况，所以最好的方法是去其官方网站下载包，然后在本地安装即可。这里开启传送大门，<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住`Ctrl+F`键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。![](https://upload-images.jianshu.io/upload_images/8964398-20977829a37ddad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python，点击这个网站，然后按住`Ctrl+F`键，调出搜索框，在里面输入mysqlclient，然后回车即可，因为我的电脑是64位，所以下载64位的。![](https://upload-images.jianshu.io/upload_images/8964398-20977829a37ddad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</a><br>上面的cp36代表Python3.6的版本，cp37代表Python3.7 的版本！</p><p>8、在虚拟环境中安装mysqlclient，如图所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-4a81975aef14b950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>注意安装的命令是：<code>pip install mysqlclient-1.3.13-cp36-cp36m-win_amd64.whl</code>（后面的是你刚才下载的版本名称，带whl）<br>9、接下来我们再次点击Tools 菜单下 Run manage.py Task，我们会发现刚才的错误不再出现了。<img src="https://upload-images.jianshu.io/upload_images/8964398-f5133e8116479a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="makemigrations和migrate"><a href="#makemigrations和migrate" class="headerlink" title="makemigrations和migrate"></a>makemigrations和migrate</h3><p>10、现在介绍一下我们前面讲到用于数据迁移的两个命令：makemigrations和<br>migrate，下面我们分别运行这两个命令，看有什么大的变化。<br>在调用makemigrations这个命令之后，结果是这样的：<img src="https://upload-images.jianshu.io/upload_images/8964398-df631b352ce0acdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>紧接着，在调用migrate这个命令之后，结果变成这样了：<img src="https://upload-images.jianshu.io/upload_images/8964398-ebbd650db7dab9e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>我们会发现它生成了好多文件，我们打开Navicat中新建的数据库djangoTest，发现了很多表：<img src="https://upload-images.jianshu.io/upload_images/8964398-dfd4f9fd993bb96b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这些都是Django系统默认的内置数据表，我们在后面会用到它们。<br>11、运行一下我们的项目：runserver，然后到<a href="http://127.0.0.1:8000/来访问看是否运行成功。如果成功，则页面显示It" target="_blank" rel="noopener">http://127.0.0.1:8000/来访问看是否运行成功。如果成功，则页面显示It</a> worked。<img src="https://upload-images.jianshu.io/upload_images/8964398-ee31d60957b16974.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>最后结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-d9ca43e104459032.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>你可能会问，为什么显示的不是留言这个页面，而是原始页面呢？那是因为我们还没有配置app的信息，下面开始配置。</p><h3 id="展示留言页面"><a href="#展示留言页面" class="headerlink" title="展示留言页面"></a>展示留言页面</h3><p>12、将djangoTest/urls.py修改如下:<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f86e1867a6503c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(&apos;admin/&apos;, admin.site.urls),</span><br><span class="line">    path(&apos;start/&apos;, getstart),  # 新增加的一行</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这里新增加path(‘start/‘, getstart),是代表以start为开头的地址。getstart 是这个url相对应连接（映射）的view。我们先去创建一个视图函数，其名字就是getstart。<br>13、在apps/liuyan/views.py添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def getstart(request):</span><br><span class="line">    return render(request, &apos;start.html&apos;)</span><br></pre></td></tr></table></figure></p><p>request 这个参数是django的一个httpRequest对象，关于它的用法你可以按住ctrl + 左键 跟踪到我们的render函数里面。Alt + 左箭头返回原位。<img src="https://upload-images.jianshu.io/upload_images/8964398-98553b0413831e1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>一般来说，render函数，我常用的就是它的2个参数：request和template-name。上图中<strong>start.html</strong>就是我们的原始页面名称。<br>14、回过头，对我们之前的urls.py进行重新配置完善：<img src="https://upload-images.jianshu.io/upload_images/8964398-00e5242fb612f2b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>也就是12步中的urls.py，增加一行包的引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from liuyan.views import getstart</span><br></pre></td></tr></table></figure></p><p>变成了这个样子：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-20dcb23398995a1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>15、重新启动运行一下我们的项目：runserver，发现报错了：<img src="https://upload-images.jianshu.io/upload_images/8964398-d81f7ca934da278c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>其实并没有报错，只是因为我们在path中加入了自己的配置’start/‘,它就不会采用默认配置了，所以我们的IP地址应该是：<a href="http://127.0.0.1:8000/start/。你点进去看看：" target="_blank" rel="noopener">http://127.0.0.1:8000/start/。你点进去看看：</a><br><img src="https://upload-images.jianshu.io/upload_images/8964398-d486786dcd9cbc95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>现在页面出来了但是样式却没有加载成功，也就是说static/css/style.css文件没有找到。那是因为setting.py中静态文件的配置出了问题，第124行代码需要修改。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c2458a00c08634fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>它只说明了目录的名称，并没有指明查找的根路径，所以需要添加下面代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = &apos;/static/&apos;</span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, &apos;static&apos;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>16、我们再次运行一下:runserver。如果你前面没有按ctrl+v停止，那你只需要ctrl+s 即可重新刷新运行。最后运行结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-aeee768b6356cf57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>成功了，这就是今天最基本的页面信息配置了，把页面动态加载出来了。下一篇笔记将给这个动态的留言板加交互特效了。</p><p>不过很多小伙伴说，自己看的是云里雾里，对这个过程不熟悉，自己没有接触过MVC、MVVC等网页设计模式，所以我总结一下这个项目的配置流程。</p><h2 id="项目配置流程图"><a href="#项目配置流程图" class="headerlink" title="项目配置流程图"></a>项目配置流程图</h2><h3 id="刚才的流程顺序"><a href="#刚才的流程顺序" class="headerlink" title="刚才的流程顺序"></a>刚才的流程顺序</h3><p>1、把html文件导入进来；<br>2、通过简单的url配置来访问这个html；<br>3、发现找不到页面，所以我们就设置setting中DIRS路径；<br>4、页面可以正常显示，但css样式不能正常加载，我们设置了STATICFILES_DIRS；<br>。。。这样一步的，我们发现经常遇到错误，其实我们是从倒的顺序来执行的，目的就是让大家能通过很多的错误来加深自己对Django开发流程的熟悉程度。</p><h3 id="正常的开发流程"><a href="#正常的开发流程" class="headerlink" title="正常的开发流程"></a>正常的开发流程</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6dce157937216119.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没有，这样做的好处就是避免少犯错误。你可以尝试以顺的顺序来创建一个新的项目，试着体会一下这2种开发顺序的感觉。</p><p>后面我们的开发会从migration生成数据表这里开始往下编辑内容。本篇笔记中对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第四篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第四篇截止代码。</a></p><p>至此，简易静态留言簿的基础开发就到这里了，感谢你的赏阅。下一篇将实现留言簿的交互功能。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（三）：Django基础知识回顾</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ADjango%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ADjango%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在前面的第二篇里，我们创建了一个名为djangoTest的项目，现在我们通过利用这个项目制作一个简单的留言簿来对django的基础知识进行一个回顾。<br>笔记中本篇对应上传的仓库为:<a href="https://github.com/licheetools/djangoTest对应第三篇截止代码。" target="_blank" rel="noopener">https://github.com/licheetools/djangoTest对应第三篇截止代码。</a></p><h3 id="知识目录"><a href="#知识目录" class="headerlink" title="知识目录"></a>知识目录</h3><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b33bc77f13e0223f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在前面创建Django的时候，你会出现这样的目录结构，但是在运行命令manage.py runserver 8000之后，你会发现变成了下面这个样子：<img src="https://upload-images.jianshu.io/upload_images/8964398-4782b67ae8fa6a11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>看到没，是不是多了一个<strong>db.sqlite3</strong>文件，这是因为你在运行的时候联接了已经存在的数据库，从而自动生成了一个<strong>sqlite3</strong>文件。</p><p>好，接下来介绍一下该目录树的结构以及各个节点文件的作用（为了更加清楚准确的介绍，我把这个结构树分为了6个部分）：<img src="https://upload-images.jianshu.io/upload_images/8964398-6556357b5c187b63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>1、<strong>djangoTest</strong>: 这个<strong>djangoTest</strong>与2中的不一样，这是树的开始，也就是主目录；</p><p>2、djangoTest: 这个djangoTest与1中的不一样，这是项目目录，记住主目录和项目目录名称是一样的，且在创建Django项目的开始时候确定；对于2中的文件介绍如下：</p><blockquote><p>–init–.py: 一个空文件，用于告诉计算机这是一个Python包;<br>settings.py: 用于对项目的全局进行配置的文件（该 Django 项目的设置/配置）；<br>urls.py:  主要的urls配置入口（该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”）;<br>wsgi.py:  是Django启动的必须文件（一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目）；</p></blockquote><p>3、templates：它的作用是放置静态的html文件</p><p>4、db.sqlite3: 用于保存数据，开始没有，必须运行之后才有，且不固定，Django默认是sqlite数据库，但你也可以用MySQL，自然文件类型就发生改变了，但都是数据库文件。</p><p>5、manage.py： 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互（启动Django需要的主要文件，主要的Django命令都通过manage.py来运行)</p><p>6、External Libraries：这是扩展包的入口（外部库存放地址）。</p><p><strong>上面只是project（项目），但是真正来实现各种不同功能的却是各种app（应用）,下面我们来利用pycharm创建app。</strong></p><h3 id="项目与应用"><a href="#项目与应用" class="headerlink" title="项目与应用"></a>项目与应用</h3><p>你可能会有疑惑，我们之前都已经创建了djangoTest这个项目，为什么还要创建各种app应用呢？别急，我来告诉你其中的原因，我们以常用的手机软件<strong>微信</strong>来说明这个道理。你知道微信这个手机软件的名字对吧，其实这个名字就是一个项目，而且你还知道微信可以用来语音聊天，视频聊天，发图片，文字。。。等，这些不同的功能我们就称之为应用。现在明白了吧，不同功能的应用构成了项目。那么问题来了，我们如何利用Pycharm来创建app呢？</p><h3 id="利用Pycharm创建app"><a href="#利用Pycharm创建app" class="headerlink" title="利用Pycharm创建app"></a>利用Pycharm创建app</h3><p>第一步：在 Tools -&gt; Run manage.py Task进入创建app的命令入口；<br><img src="https://upload-images.jianshu.io/upload_images/8964398-c5d96b6dfeb5e080.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-ef7bc42eaadce829.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>第二步：在命令入口输入创建命令<strong>startapp appname</strong>,然后回车即可。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-718f27d622a86fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>你会发现生产了一个新的应用，而且目录树的结构发生了变化，多了这么一个东西：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-a2465e0a7de704d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>这个红色框里面的都是我们刚才创建liuyan这个app里面的文件，下面继续给大家介绍一下新目录树的结构和节点文件。</p><blockquote><p>1、migrations:它是一个Python包，里面目前只有–init–.py这个用于计算机识别这个包的空文件，这个包是用来存放数据迁移文件的，每次数据的变动，我们都需要更新数据库，否则会出错，更新的命令是makemigrations和migrate而且顺序不能对换！关于这一点，我后面还会继续说明，这里你只需要有一个大概的认识即可;<br>2、admin.py: 用于身份验证；<br>3、apps.py: app信息；<br>4、models.py： 用于数据定义；<br>5、tests.py： 用于app测试；<br>6、views.py： 用于视图的创建。</p></blockquote><h3 id="创建static文件夹"><a href="#创建static文件夹" class="headerlink" title="创建static文件夹"></a>创建static文件夹</h3><p>当然我们的项目肯定不只有html,肯定还有javascript,css，图片等文件，所以我们需要创建一个static文件用于存放静态的文件。将鼠标移至djangoTest这个主目录上，右键new–&gt; python package–&gt;写入名字static回车即可！如图：<img src="https://upload-images.jianshu.io/upload_images/8964398-140217003fbfac6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><h3 id="创建log文件夹"><a href="#创建log文件夹" class="headerlink" title="创建log文件夹"></a>创建log文件夹</h3><p>当然，我们还需要创建log文件夹，用来存放网站的日志文件，这是必不可少的。</p><h3 id="创建media文件夹"><a href="#创建media文件夹" class="headerlink" title="创建media文件夹"></a>创建media文件夹</h3><p>与此同时，因为是Web应用，就必须有一个用于存放用户上传的图片，视频等资源文件夹。</p><p>至此，web的文件夹都已经创建完成了。</p><h3 id="创建apps文件夹"><a href="#创建apps文件夹" class="headerlink" title="创建apps文件夹"></a>创建apps文件夹</h3><p>但是还有一个问题，正如你所知道的一个项目是由很多个app构成的，我们不可能每个app都直接放在项目根目录下，这样会导致我们的文件夹太多了，不利于管理，所以我们可以新建一个apps文件夹，用于存放各个app，这样就好看多了。然后将我们刚才新建的liuyan这个app拖入到apps这个文件夹里面，会自动生成一个<strong>init</strong>文件。</p><p>不过这样做就是有一个坏处，就是我们在导入包的时候可能会出错误，我们需要每次在导入的时候前面加上<strong>apps.</strong>,这样太麻烦了，<img src="https://upload-images.jianshu.io/upload_images/8964398-6c9ded5baf2ee9aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>但是我有方法可以解决这个问题，往下看：<br>我们可以在apps这个文件夹上面，右键拉到底部，看到Mark Directory as以后单击Sources Root即可，你会发现apps这个文件夹变成了蓝色（前面第一篇有介绍）。<img src="https://upload-images.jianshu.io/upload_images/8964398-f299b3e1a9cc783a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>其实这个方法不是很靠谱，因为你这样做只是让Pycharm知道文件放在哪了，要的时候去哪里找，但是如果你用dos命令去运行，还是因为找不到文件地址而报错的，因为它是根据settings.py来查找文件的。下面介绍另一种更完善的方法。<img src="https://upload-images.jianshu.io/upload_images/8964398-e7195185d50e3aca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-9c3926649345bc41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>在上面，os是用于输入输出的库，前面输出的是当前的项目主目录，后面输出的则是apps这个目录，我们这里采用os.path.join()函数来，将项目的绝对路径与apps进行拼接，返回一个新的地址。</p><p>至此，前期准备我们做完了，接下来便是开始敲我们的留言簿代码了。有朋友问我如何利用Pycharm把代码直接分享（上传）到github 仓库，这里我简单介绍一下。</p><h2 id="利用Pycharm把代码直接上传到github-仓库"><a href="#利用Pycharm把代码直接上传到github-仓库" class="headerlink" title="利用Pycharm把代码直接上传到github 仓库"></a>利用Pycharm把代码直接上传到github 仓库</h2><p>在此之前，你的电脑需要安装git和你必须要有一个github账号，在这里我就不详细介绍这些了，直接开启传送大门，点这里。<br><a href="https://blog.csdn.net/p10010/article/details/51336332" target="_blank" rel="noopener">GitHub的注册与使用（详细图解)</a>或者这个 <a href="https://www.cnblogs.com/Amedeo/p/7664224.html" target="_blank" rel="noopener">GitHub账户注册</a>;<a href="https://jingyan.baidu.com/article/9f7e7ec0b17cac6f2815548d.html" target="_blank" rel="noopener">git的安装和配置</a>。</p><p>接下来的步骤看仔细了，前方高能，请坐好扶稳。<br>1、点击左上角的File,选择Settings，然后选择Version Control，点击出现的GitHub，在出现的页面右上角选择Auth Type,选择password，然后输入你的github账号和密码，再点击下面的Test按钮Test连接是否正常，下面的Clone git repositories using ssh可以勾选一下，最后点击右下角的apply,然后ok一下就可以了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-ba53dd77e88f34d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>2、将鼠标移至左侧的Git，单击一下，然后选择git的路径之后，基本上点击右下角的apply,然后ok一下就可以了。<img src="https://upload-images.jianshu.io/upload_images/8964398-a3a6416adf50255f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>放大一下，每个人的不一样，这是我的git安装地址：<img src="https://upload-images.jianshu.io/upload_images/8964398-59d0ce57b4c3bf50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>3、点击开始页面顶部的VCS，<img src="https://upload-images.jianshu.io/upload_images/8964398-7fb5142c57f7481e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>然后再点击出现的倒数第三个import into Version Control，再选择出现的最后一个Share project on github，再点击就出现一个窗口，填写你的项目名称，描述，点击share。弹窗让你选择需要上传的项目文件与commit信息输入之后，项目将会上传至github。登录你的github账号，你就会发现你的项目已经上传成功了。<img src="https://upload-images.jianshu.io/upload_images/8964398-7d93e6db861109b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>至此，关于Django的基本知识就先介绍到这里，下篇我将开始利用代码对留言簿这个小应用进行开发</strong></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（一）：项目介绍</title>
      <link href="/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/04/10/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嘿，小伙伴们你们好，很高兴你能看到这套教程，这是我在学习慕课网时的一些笔记，希望对即将学习Django的你们，能提供一些帮助。在每篇文章的后面，我会把我在这部分出现的BUG以及解决方法附上，以供大家参考，大家有什么问题可以在评论下方留言。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="Django介绍"><a href="#Django介绍" class="headerlink" title="Django介绍"></a>Django介绍</h3><p>Django是目前Python Web开发中的主流框架，因为它有许多功能强大的第三方插件，你可以很方便的开发出自己的工具包，这使得它具有很强的可扩展性，被许多大型公司使用，如Google，豆瓣，YouTube，知乎，instagram等。</p><h3 id="在线网站介绍"><a href="#在线网站介绍" class="headerlink" title="在线网站介绍"></a>在线网站介绍</h3><p>我们这个网站功能强大，具有完整的个人中心，用户登录，注册以及找回密码等功能。下面分别介绍各个部分的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">点击个人中心: 你可以修改头像，密码，邮箱，可以看到我的课程以及我的收藏。还可以删除我的收藏，消息。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到公开课，授课讲师，授课机构和全局搜索。</span><br><span class="line"></span><br><span class="line">点击公开课：你可以看到课程列表，排序-搜索。热门课程推荐和课程的分页。</span><br><span class="line"></span><br><span class="line">点击课程：你可以在课程详情页中对课程进行收藏和取消收藏。同时可以采用富文本对课程内容进行展示。</span><br><span class="line"></span><br><span class="line">点击开始学习：你可以看到课程的章节信息和评论信息以及课程资源的下载链接。</span><br><span class="line"></span><br><span class="line">点击授课讲师：你可以看到授课讲师的列表页，可以对讲师进行人气排序以及分页，右侧还有讲师排行榜。</span><br><span class="line"></span><br><span class="line">点击讲师的详情页面：你可以对讲师进行收藏和分享，以及看到该讲师的全部课程。</span><br><span class="line"></span><br><span class="line">点击导航栏: 你可以看到授课机构，它有分页，排序和筛选功能。</span><br><span class="line"></span><br><span class="line">机构列表页右侧有快速提交我要学习的表单，之后你便可以开始学习了。</span><br><span class="line"></span><br><span class="line">点击机构：它的左侧会呈现：机构首页,机构课程，机构介绍，机构讲师这四部分。</span><br><span class="line"></span><br><span class="line">后台管理系统可以切换主题。左侧每一个功能都有列表显示,具有增删改查，筛选功能。</span><br><span class="line"></span><br><span class="line">课程列表页可以对不同字段进行排序。你可以选择多条记录进行删除操作。</span><br><span class="line"></span><br><span class="line">课程列表页：点击过滤器，选择字段范围开始搜索,结果可以导出csv，xml，json等格式文本。</span><br><span class="line"></span><br><span class="line">你可以在课程新增页面上传图片，和进行富文本的编辑，时间选择，添加章节，添加课程资源等。</span><br><span class="line"></span><br><span class="line">日志记录：它可以记录后台人员的操作情况。</span><br><span class="line"></span><br><span class="line">其他的大家可以在后期的学习过程中慢慢体会，这里就不一一而足了。</span><br></pre></td></tr></table></figure></p><h3 id="学完过后"><a href="#学完过后" class="headerlink" title="学完过后"></a>学完过后</h3><p>你不仅对Django的基础知识有了一个比较深刻的印象，还对MTV，MVC模式有了一个更加全面的了解，举一反三，你可以利用它开发各种类型的网站，如电商购物,在线旅游，公司官网，个人博客等其他网站。具体可以点击查看这个<a href="https://www.djangosites.org/" target="_blank" rel="noopener">基于django的网站</a>（可能要翻墙的哈）。</p><h2 id="开发环境介绍"><a href="#开发环境介绍" class="headerlink" title="开发环境介绍"></a>开发环境介绍</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>网站是在windows下通过pycharm和virtualenv搭建的开发环境下进行的开发.</p><h3 id="后台介绍"><a href="#后台介绍" class="headerlink" title="后台介绍"></a>后台介绍</h3><p>采用xadmin进行开发。之前用过django-suit，发现它只是单纯的对admin进行了美化，并没有更高级的功能。鉴于此，我们推荐使用xadmin进行后台管理。它有许多的拓展功能，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xadmin常用插件</span><br><span class="line">自定义xadmin插件</span><br><span class="line">xadmin的富文本编辑</span><br><span class="line">xadmin的excel导入功能。</span><br><span class="line">一些开源的django开发库。</span><br></pre></td></tr></table></figure></p><p>到此，项目的所有介绍结束，但为了你对后面的开发有一个提前的认识，这里传送一些资料。</p><h2 id="补充资料"><a href="#补充资料" class="headerlink" title="补充资料"></a>补充资料</h2><p>1、<strong>[入门]</strong> <a href="http://www.runoob.com/django/django-tutorial.html" target="_blank" rel="noopener">菜鸟Django 教程</a>，非常简短的教程，可以快速让你有一个清楚的认识。<br>2、<strong>[基础]</strong> <a href="https://code.ziqiangxuetang.com/django/django-tutorial.html" target="_blank" rel="noopener">自强学堂Django</a>，非常不错的教程，可以没事看一看。<br>3、<strong>[基础]</strong> <a href="http://www.liujiangblog.com/course/django/2" target="_blank" rel="noopener">刘江的Django教程</a>，非常适合入门的小白阅读，还有2个例子供你练习。<br>4、<strong>[入门]</strong> <a href="http://dwz.cn/VHRVxWfC" target="_blank" rel="noopener">1元学习《Django零基础到项目实战》</a>，非常不错的基础入门<strong>视频</strong>教程。<br>5、<strong>[基础]</strong><a href="http://edu.51cto.com/course/2787.html" target="_blank" rel="noopener">用Python Django快速做出高大上的BBS论坛网站</a>，这是免费的<strong>视频</strong>教程，大家可以试着去练手。</p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础使用Django2.0.1打造在线教育网站（二）：开发环境配置</title>
      <link href="/2018/04/09/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/04/09/%E9%9B%B6%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8Django2-0-1%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%BD%91%E7%AB%99%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>俗话说得好，工欲善其事，必先利其器！开发环境的搭建是你进行程序开发的基础，也是关键所在。网站开发过程中主要用到的软件有Pycharm ，Mysql ，Navicat ， Python下面结合我的版本给大家一一演示如何安装。</p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><h3 id="我的软件版本"><a href="#我的软件版本" class="headerlink" title="我的软件版本"></a>我的软件版本</h3><blockquote><p>Pycharm 我这里没有升级，采用的是JetBrains PyCharm 2017.3.4 x64</p></blockquote><blockquote><p>Mysql ，这里我采用了比较好用的mysql-5.7.21-winx64</p></blockquote><blockquote><p>Navicat ，这里采用了Navicat Premium ，当然其他如 Navicat for Mysql也可以</p></blockquote><blockquote><p>Python，写文章的时候Python3.7.0刚刚发布，鉴于其他插件还没有进行适配，我采用Python3.6.4这个版本进行开发。</p></blockquote><h3 id="Pycharm-的安装"><a href="#Pycharm-的安装" class="headerlink" title="Pycharm 的安装"></a>Pycharm 的安装</h3><p><strong>1、</strong>软件位置<br>PyCharm2017/64位下载地址：<br>链接：<a href="https://pan.baidu.com/s/1nwhmx2D" target="_blank" rel="noopener">https://pan.baidu.com/s/1nwhmx2D</a><br>密码：pc61<br><strong>2、</strong>右击软件压缩包选择解压到pycharm2017<br><a href="https://storage7.cuntuku.com/2018/03/22/D2OdM.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6bd9455d6585c059.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>3、</strong>在解压文件夹里面找到pycharm-professional-171.3780.47，右击打开。<br><a href="https://storage1.cuntuku.com/2018/03/22/D2Xuy.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-d090d018e228ecbe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>4、</strong>点击Next。<br><a href="https://storage1.cuntuku.com/2018/03/22/DB4xD.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-401daecf0b5be5fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>5、</strong>点击Browse更改安装路径，建议安装到除C盘以外的磁盘，可在D盘或者其它盘创建一个PyCharm 2017文件夹，然后点击Next。<br><a href="https://storage6.cuntuku.com/2018/03/22/D2HTp.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-39f20d1ff12a619f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>6、</strong>64位系统勾选64-bit launcher，32位系统勾选32-bit launcher，然后点击Next。<br><a href="https://storage7.cuntuku.com/2018/03/22/D2eS0.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6e86f6e001886a6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>7、</strong>点击Install。<br><a href="https://storage1.cuntuku.com/2018/03/22/D25Iz.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-e681b6dbb4654373.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>8、</strong>安装中（等待5分钟左右）。<br><a href="https://storage6.cuntuku.com/2018/03/22/DBgvW.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-4d03159b02db1227.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>9、</strong>点击Finish。<br><a href="https://storage6.cuntuku.com/2018/03/22/D2nbl.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6485a9f766504a6b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>10、</strong>找到安装包解压后的PyCharm 2017文件夹，右击打开。<br><a href="https://storage7.cuntuku.com/2018/03/22/DBNg3.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-544e15ae5eeac9a0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a></p><p><strong>11、</strong>找到lib文件夹，右击打开。<br><a href="https://storage6.cuntuku.com/2018/03/22/DBvVR.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-c32ad54468b4b51b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>12、</strong>选中其中的resource.cn.jar，右击复制。<br><a href="https://storage7.cuntuku.com/2018/03/22/DBC5y.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-73b4f131c1b36a4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>13、</strong>打开安装文件夹PyCharm 2017里的lib文件夹，然后在空白处鼠标右击选择粘贴。<br><a href="https://storage6.cuntuku.com/2018/03/22/D2Gue.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-ec1fdb371f768f9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>14、</strong>在桌面找到JetBrainsPyCharm 2017.1 x64，右击打开。<br><a href="https://storage7.cuntuku.com/2018/03/22/D2ReB.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-7c125f41609a2d9c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>15、</strong>点击确定。<br><a href="https://storage1.cuntuku.com/2018/03/22/DBUvT.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-afaa4159c529fd60.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>16、</strong>点击Accept。<br><a href="https://storage1.cuntuku.com/2018/03/22/DB1M6.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-f91ef28ad95f934f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>17、</strong>勾选License server，在License server address：处填入<a href="http://intellij.mandroid.cn/" target="_blank" rel="noopener">http://intellij.mandroid.cn/</a> （或<a href="http://idea.imsxm.com/" target="_blank" rel="noopener">http://idea.imsxm.com/</a> 或<a href="http://idea.iteblog.com/key.php%EF%BC%89%E4%B8%89%E8%80%85%E4%B8%AD%E7%9A%84%E4%BB%BB%E6%84%8F%E4%B8%80%E4%B8%AA%E5%8D%B3%E5%8F%AF%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BBActivate%E3%80%82" target="_blank" rel="noopener">http://idea.iteblog.com/key.php）三者中的任意一个即可，然后点击Activate。</a><br><a href="https://storage6.cuntuku.com/2018/03/22/DBfMC.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-3e289ec77aafd95a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="16"></a> </p><p><strong>18、</strong>点击确定。<br><a href="https://storage7.cuntuku.com/2018/03/22/DB8Yf.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-6aba44c894ff9948.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a> </p><p><strong>19、</strong>安装完成。<br><a href="https://storage1.cuntuku.com/2018/03/22/DB9b7.jpg" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/8964398-251bc702b8cd162e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></a><br><strong>这个破解版的验证码可能在今年10月份左右就要过期，你到时候告诉我，我给你找一个新的破解码。</strong></p><h3 id="Mysql的安装"><a href="#Mysql的安装" class="headerlink" title="Mysql的安装"></a>Mysql的安装</h3><p><strong>1、下载压缩包</strong></p><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载地址</a><br><img src="https://upload-images.jianshu.io/upload_images/8964398-5ca6a4d9a1aba8e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>2、解压到文件夹目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-f2f4b7ff1541738c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>3、新建txt文件内容如下：</strong>设置mysql客户端默认字符集**</p><p>default-character-set=utf8</p><p><strong>设置3306端口</strong></p><p>port = 3306</p><p><strong>设置mysql的安装目录</strong></p><p>basedir=D:\Program Files\mysql-5.7.21-winx64</p><p><strong>设置mysql数据库的数据的存放目录</strong></p><p>datadir=D:\Program Files\mysql-5.7.21-winx64\data</p><p><strong>允许最大连接数</strong></p><p>max_connections=200</p><p><strong>服务端使用的字符集默认为8比特编码的latin1字符集</strong></p><p>character-set-server=utf8</p><p><strong>创建新表时将使用的默认存储引擎</strong></p><p>default-storage-engine=INNODB</p><p>注：basedir和datadir的路径为自己的mysql存放的路径，文件名改成my.ini</p><p><strong>4  添加bin目录到path环境变量</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-cd834e29d47e9d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>5 安装 MySQL服务，以管理员身份运行cmd</strong></p><p>执行 mysqld install 命令</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-643f118e3fae68c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>若出现“缺少xxx.dll，请安装微软运行库</p><p><a href="http://www.pc6.com/softview/SoftView_104246.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_104246.html</a></p><p><strong>6 生成data目录（MySQL 5.7.16往后默认是不提供data目录的）,先要进入bin目录下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-b7a4895d4e32d205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><img src="https://upload-images.jianshu.io/upload_images/8964398-73b726ce792763b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>运行 mysqld –initialize-insecure –user=mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-1448a95597d04114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data文件夹</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-e4735c229dfc43fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>查看data目录内容是否正确</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-6b6fb91b6926e8f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>7  运行MySQL服务</strong></p><p>net start mysql</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-2f39b42622e911be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>关闭MySQL服务的命令是net stop mysql</p><p>8  登陆MySQL</p><p>mysql -u root –p</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-67df9096636696cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>所有命令：安装服务 mysqld install</p><pre><code>进入bin目录 cd E:\mysql-5.7.21-winx64\bin生成data文件夹 mysqld --initialize-insecure --user=mysql启动服务   net start mysql登录 mysql -u root –p</code></pre><p>修改密码：</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7142b21a0458a91b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>在忘记root密码的时候，可以这样</strong></p><p><strong>以windows为例：</strong></p><p>1. 关闭正在运行的MySQL服务。</p><p>2. 打开DOS窗口，转到mysql\bin目录。</p><p>3. 输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</p><p>4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</p><p>5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</p><p>6. 连接权限数据库： use mysql; 。</p><p>6. 改密码：update user set authentication_string=password(“你的密码”) where User=”root”;（别忘了最后加分号） 。</p><p>7. 刷新权限（必须步骤）：flush privileges;　。</p><p>8. 退出 quit。</p><p>9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</p><h3 id="Navicat的安装"><a href="#Navicat的安装" class="headerlink" title="Navicat的安装"></a>Navicat的安装</h3><p>步骤一 打开Navicat应用程序.exe文件。或将Navicat CD安装光盘插入CD-ROM驱动器，打开Navicat.exe 文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-7e93d6a71e62666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0"></p><p>步骤二 在欢迎画面点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b59309f71e5159e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤三 阅读许可协议，接受并点击“下一步”。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-b3c41f29a829c78c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤四 选择安装位置。点击“浏览”自定义安装路径，设定完成后点击“下一步”。考虑到运行速度，尽量不要安装在C盘。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-be9ca29a49189112.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤五 运行其余的步骤。</p><p><img src="https://upload-images.jianshu.io/upload_images/8964398-88d1948d0c99bddc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤六 点击“完成”，结束安装进程。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-fd49020988775b4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>步骤七 点击帮助-&gt;注册，在弹出的注册对话框内输入Navicat注册码（16 位数）并点击“激活”按钮进行在线激活注册码。</p><p><img src="http://upload-images.jianshu.io/upload_images/8964398-a359883e5fd81315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>Navicat Premium注册码：NUYJ-W56S-3YUU-MVHV</strong><br>其余版本的可以参考这个<a href="https://www.jianshu.com/p/42a33b0dda9c" target="_blank" rel="noopener">链接</a></p><h3 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h3><p><a href="https://www.python.org/downloads/release/python-364/" target="_blank" rel="noopener">官网传送Python3.6.4版本下载链接</a><br>由于Python的安装非常简单，我这里就不演示了。你可以参考这个链接<a href="https://jingyan.baidu.com/article/3ea51489bebde652e61bbad3.html" target="_blank" rel="noopener">python3.6.3安装教程</a>。</p><h2 id="virtualenv的安装和配置"><a href="#virtualenv的安装和配置" class="headerlink" title="virtualenv的安装和配置"></a>virtualenv的安装和配置</h2><h3 id="使用虚拟环境的好处"><a href="#使用虚拟环境的好处" class="headerlink" title="使用虚拟环境的好处"></a>使用虚拟环境的好处</h3><p>我们希望每个应用都有属于自己的一套独立Python运行环境，这样可以不被其他应用所影响。virtualenv就是用来为一个应用创建一套隔离的Python运行环境，它很好的解决了各种包的管理和升级问题，使开发具有很大的自由性。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>我们同样需要在Python的官网上去下载，下载完成之后，解压到一个文件夹<code>(记住要和Python放在同一目录下)</code>，采用添加环境变量的方法<code>（我的电脑，右键--&gt;属性,单击--&gt;高级系统环境设置，单击--&gt;高级，单击--&gt;环境变量，单击--&gt;系统变量下的Path）</code>，我们在PATH最后添加上Python中的scripts的地址，再用CMD控制台进入解压目录<code>(举个例子：你当前在C盘要进入F盘只需要输入F:，回车即可。cd用于进入子目录，比如)进入F盘下的Python目录， 只需输入cd Python回车即可，cd与Python之间空一格</code>，</p><blockquote><p>C:\Users\YC-Jiang&gt;F:<br>F:&gt;cd Python<br>F:\Python&gt;cd pystall<br>F:\Python\pystall&gt;</p></blockquote><p>然后输入：<code>python setup.py install</code>回车，等待几分钟即可。</p><p>最后，确认你的 pip 是否成功安装，在命令行输入 cmd （ windows 桌⾯面–&gt;快速启动–&gt;附件<br>–&gt;cmd，看到以管理员身份运行类似的话，点击确定）或者<code>Windows徽标+R</code>中输入</p><blockquote><p>pip -—version</p></blockquote><p>小白请注意：需要输入空格，注意有两条-，注意需要直接在命令行执行而不是输入<br>python 之后再执行（这一段中文是写给你的提醒，不是你要敲到终端里执行的语句）</p><p>如果已经成功<strong>安装 pip</strong>，会提示类似下面的：</p><blockquote><p>pip 1.5.6 from C:\Python35\lib\site-packages\pip-1.5.6-py3.5.egg</p></blockquote><p>pip 后面的数字是版本号，from后面的是pip的安装路径，具体的版本号和路径是什么<br>每个人都会不同，但只要电脑返回类似这样的提示就说明 pip 安装成功了。</p><p>如果你的电脑没有返回类似上的提示，而是有报错提示你 pip 没有被定义，请参考<br>这个方法为你的 Windows电脑安装pip: <a href="https://taizilongxu.gitbooks.io/stackoverflowabout-python/content/8/README.html" target="_blank" rel="noopener">pip安装问题</a><br><a href="https://jingyan.baidu.com/article/ff42efa9d630e5c19e220207.html" target="_blank" rel="noopener">windows安装pip</a></p><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><p>在终端输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br><span class="line">virtualenv testvir  # 在当前用户目录(win+r %HOMEPATH%可查看)生成</span><br><span class="line">cd %homepath%</span><br><span class="line">cd testvir</span><br><span class="line">cd Scripts</span><br><span class="line">activate.bat  # 激活</span><br><span class="line">pip list </span><br><span class="line">deactivate.bat</span><br></pre></td></tr></table></figure></p><p>其实这种方法挺麻烦的，这里我推荐一种简单方法，<strong>安装virtualenvwrapper</strong></p><h3 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h3><p>在终端输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p><p>接下来便是创建虚拟环境了，同样采用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv djangoTest  # djangoTest为你新建虚拟环境的名称</span><br></pre></td></tr></table></figure></p><p>它会创建在C:\Users\YC\Envs当前用户目录下的Envs目录。</p><p>你可以自定义修改mkvirtualenv创建的目录：新增环境变量WORKON_HOME<br><img src="https://upload-images.jianshu.io/upload_images/8964398-4f6aefde07e8c27b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>退出激活状态命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><p><strong>知道有哪些虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure></p><p><strong>直接进入虚拟环境命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon djangoTest</span><br></pre></td></tr></table></figure></p><p>如果出现这种情况，表示你已经进入到虚拟环境中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Envs\Test\django(djangoTest)</span><br></pre></td></tr></table></figure></p><p>再次说明，出现前面的(djangoTest)就代表进入了虚拟环境，之后就可以进行包和库的安装了。</p><h3 id="使用镜像安装库"><a href="#使用镜像安装库" class="headerlink" title="使用镜像安装库"></a>使用镜像安装库</h3><p>有的时候，由于一些包的安装地址在外国，所以国内的下载速度很慢，甚至可能会出现链接不上的问题。鉴于此，我推荐使用镜像加速下载，速度真的很快。这里推荐清华园的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">镜像</a>,并简单介绍一下如何使用。正常我们下载Django的命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0.1</span><br></pre></td></tr></table></figure></p><p>(请指定django的下载版本，否则将会是最新版的django)，使用镜像以后，我们的命令如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><p>(注：上面命令的空格和顺序都是不能随意变得，否则就会出错，特别是空格！)</p><h2 id="简单介绍一下各个软件的基本使用"><a href="#简单介绍一下各个软件的基本使用" class="headerlink" title="简单介绍一下各个软件的基本使用"></a>简单介绍一下各个软件的基本使用</h2><h3 id="Pycharm安装第三方库"><a href="#Pycharm安装第三方库" class="headerlink" title="Pycharm安装第三方库"></a>Pycharm安装第三方库</h3><p>File–&gt;Default Settings–&gt;Version Control–&gt;Project InterPreter–&gt;<br>右边绿色的+ –&gt;搜索库名–&gt;install package  ，不懂的童鞋可以点击下面的示例：<a href="http://blog.csdn.net/fx677588/article/details/56830929" target="_blank" rel="noopener">Pycharm安装第三库</a>，Django也是可以利用这样的方式进行安装，但是速度不及使用pip安装的快。</p><h3 id="Pycharm新建Django项目"><a href="#Pycharm新建Django项目" class="headerlink" title="Pycharm新建Django项目"></a>Pycharm新建Django项目</h3><p>首先如果你已经打开了其他项目，你需要File–&gt;Close project，然后和没有项目的步骤一样如下：<br>1、点击出现的Create New Project按钮；<br><img src="https://upload-images.jianshu.io/upload_images/8964398-ce56513f6ac9c901.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1"><br>2、安装过程如下顺序；<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f96afd5efa1e24cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2"><br><strong>顺序解读</strong></p><blockquote><p>1、选择使用的是django项目，即可进入右侧页面；</p></blockquote><blockquote><p>2、Location: F:\Django\untitled ,它表示你创建的Django项目的存放地址，以后各个文件就在这里，我这里是untitled文件夹下，这个名称是默认的，你可以自行修改。</p></blockquote><blockquote><p>3、Project interpreter：表示的是你这个项目的Python解释器，下面7那个则是已经存在的Python解释器，我们推荐自己使用独立的解释器。所以点击3以后，再点击4 ，下拉4你会发现还有一个Conda，但是我们不选这个，选用Virtualenv这个，也就是第一个。</p></blockquote><blockquote><p>4、接下来我们看5这步，此处的Location是指你这个项目虚拟环境存放的位置文件夹，一般情况下，我们都取和项目一样的名称（前提是你前面没有创建虚拟环境，这里Pycharm自动帮你创建了，如果之前已经创建了，那么选择已经存在的虚拟环境即可）。6这一步是具体到你这个项目用的是哪个Python.exe程序，它一般在你虚拟环境下面的Scripts\pyhton.exe这个程序。</p></blockquote><blockquote><p>5、最后7这步你不用考虑，因为我们开发都是采用独立的开发环境，不会用到已经存在的环境，当然特殊情况除外。</p></blockquote><p>然后就出现</p><h2 id="完整过程演示"><a href="#完整过程演示" class="headerlink" title="完整过程演示"></a>完整过程演示</h2><h3 id="1、创建虚拟环境djangoTest"><a href="#1、创建虚拟环境djangoTest" class="headerlink" title="1、创建虚拟环境djangoTest"></a>1、创建虚拟环境djangoTest</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 10.0.14393]</span><br><span class="line">(c) 2016 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\YC&gt;F:  # 进入F盘</span><br><span class="line"></span><br><span class="line">F:\&gt;cd Envs   # 进入到Envs这个文件夹</span><br><span class="line"></span><br><span class="line">F:\Envs&gt;mkvirtualenv djangoTest     # 创建虚拟环境djangoTest</span><br><span class="line">Using base prefix &apos;f:\\python\\pystall&apos;</span><br><span class="line">New python executable in F:\Envs\djangoTest\Scripts\python.exe       # 看到没，新的解释器位置</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line"></span><br><span class="line">(djangoTest) F:\Envs&gt;    # 表示已经进入到djangoTest这个虚拟环境中</span><br></pre></td></tr></table></figure><h3 id="2、安装Django2-0-1"><a href="#2、安装Django2-0-1" class="headerlink" title="2、安装Django2.0.1"></a>2、安装Django2.0.1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(djangoTest) F:\Envs&gt;pip install django==2.0.1 -i https://pypi.tuna.tsinghua.edu.cn/simple     # 采用清华镜像源安装django</span><br><span class="line"></span><br><span class="line">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Collecting django==2.0.1</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/21/2a/3a0ec97b18d6e8d295142228f03604ac78ea6de05cf9bc3773a74f0b58bb/Django-2.0.1-py3-none-any.whl (7.1MB)</span><br><span class="line">    100% |████████████████████████████████| 7.1MB 2.9MB/s</span><br><span class="line">Collecting pytz (from django==2.0.1)</span><br><span class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/30/4e/27c34b62430286c6d59177a0842ed90dc789ce5d1ed740887653b898779a/pytz-2018.5-py2.py3-none-any.whl (510kB)</span><br><span class="line">    100% |████████████████████████████████| 512kB 1.5MB/s</span><br><span class="line">Installing collected packages: pytz, django</span><br><span class="line">Successfully installed django-2.0.1 pytz-2018.5     # 提示已经安装成功了，新版本会自动安装pytz这个库</span><br><span class="line"></span><br><span class="line">(djangoTest) F:\Envs&gt;     # 然后就可以开始pip安装库和包了</span><br></pre></td></tr></table></figure><h3 id="3、创建我们的django项目"><a href="#3、创建我们的django项目" class="headerlink" title="3、创建我们的django项目"></a>3、创建我们的django项目</h3><p>打开Pycharm，新建django项目，个步骤如下：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-997299e8cdc999cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="djangotest.png"><br>最后点击确定按钮即可，进入到如下页面：<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f7650c5beb3fc7ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tt.png"><br>放大一下：<img src="https://upload-images.jianshu.io/upload_images/8964398-b33bc77f13e0223f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="qq.png"><br>这里面各个目录和文件的具体意思，下篇文章介绍，这里我就不详细说明了。</p><p>然后单击运行按钮运行一下。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-f6b06d87bcb02ab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="uuu.png"><br><img src="https://upload-images.jianshu.io/upload_images/8964398-bfcbef10635b01b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cc.png"><br>出现这个界面以后，在浏览器导航栏中输入<strong><a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a></strong> 然后回车，如果出现下面的界面，表明你的djangoTest项目可以正常使用了！<br><img src="https://upload-images.jianshu.io/upload_images/8964398-be26a5132d9efa11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>在pycharm中按Ctrl+C即可停止运行！</strong></p><p>不知道你注意没有，这个dajngoTest是灰色的，<img src="https://upload-images.jianshu.io/upload_images/8964398-e6290ca087b0abbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>我们可以右键mark为source Root目录，就变成了蓝色，<img src="https://upload-images.jianshu.io/upload_images/8964398-ec848017b015f7bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>这样做的好处就是可以避免包的导入问题，我们在import模块时pycharm会根据设置从而智能提示。如果不mark可能会出现很多我们在pycharm中报红色，但是cmd可以运行的情况。<br><strong>至此，关于djangoTest项目的介绍就先到这里。下面介绍navicat基本使用</strong></p><h3 id="navicat基本使用"><a href="#navicat基本使用" class="headerlink" title="navicat基本使用"></a>navicat基本使用</h3><p><strong>1、新建连接</strong><br><img src="https://upload-images.jianshu.io/upload_images/8964398-7d5453b515d49067.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>在出现的下拉菜单里，选择MySQL，其他的类似。<img src="https://upload-images.jianshu.io/upload_images/8964398-cc65ce0e5dd4754e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>连接名和主机名一般写本地地址127.0.0.1或者localhost，端口默认3306，这里用户名和密码我均设置为root，然后点击左边的连接测试，如果出现连接成功的提示框，便点击确定，和这个框的确定。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-9cb79140373159f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>双击这个连接，如果该连接由灰色变为绿色的时候，就可以开始右键它，出现新建数据库，然后如下所示：<img src="https://upload-images.jianshu.io/upload_images/8964398-0b8487bffbf9766f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p>数据库名可以随便写，这里我写的是djangoTest这个项目名称，字符集选择图上所示那个，不要选择其他类型，这个很重要！排序规则选择第一个即可，也就是图上所示，这个也很重要，请按照图上要求，否则后期中文编码会出现编码错误。</p><p><strong>2、新建数据表</strong><br>双击数据库testdjango使它变绿，然后选中表，再右键新建表。或使用右侧新建表按钮也可以。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-1203407193d01fe7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>接下来就是正常的增加数据了。<br><img src="https://upload-images.jianshu.io/upload_images/8964398-bd265ce09fa02706.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br>点击右侧上方的查询按钮，再点击下面的新建查询按钮，输入查询语句就可开始查询！<img src="https://upload-images.jianshu.io/upload_images/8964398-2dfebd3ec331f6f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>3、表的复制粘贴与数据库传输以及数据库导入导出</strong><br>Navicat支持我们把不同数据库的表进行复制粘贴操作同时还支持数据传输，你可以点击工具数据传输即可，是不是很简单。</p><p><strong>导入</strong>：右键点击运行SQL文件。<br><strong>导出</strong>：在需要导出的数据库上右键，可以转储SQL文件也可以选择只转存结构或连带数据一起转存。</p><p><strong>至此，关于项目开发环境的搭建就先介绍到这里，下篇我将利用之前建立的djangoTest项目来简单回顾一下django的基础知识</strong></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博主</title>
      <link href="/2017/03/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E4%B8%BB/"/>
      <url>/2017/03/04/%E5%85%B3%E4%BA%8E%E5%8D%9A%E4%B8%BB/</url>
      
        <content type="html"><![CDATA[<p>我，一个正在进击的技术控，相信越努力，越自由。<br><br>非常高兴能和大家在这里相遇。这是我的个人博客，搭建的初衷是广交朋友，广学知识。<br><br>那么你肯定觉得我是一个技术大牛（哈哈），其实我只是一个技术控，对那些有趣的技术非常好奇罢了，<br>离真正的大神还差一个”地中海”式的发型。<br><br>目前主要从事前端工作，但是非常喜欢java， python， kotlin等编程语言，所以你如果也有此爱好的话，<br>我们不妨交流一下学习心得。<br><br>今后我会在这个博客上更新一些有趣的技术和分享我学习，工作，生活上的点滴瞬间。<br><br>你不努力一下，你就体会不到被人追赶的滋味.<br><br>生活不只有<strong>Coding</strong>还有诗和远方~~~<br><br>喜欢旅游，看电影，偶尔还玩会游戏（最近在玩王者荣耀，尽管队友坑，但我也坑。。。）<br><br>对了，有一些技术上的问题可以给我发微信消息（事情多，不能立即回复，甚至忘记回复，还请不要生气）。<br><br>我在很多社区都有账号，需要联系我的朋友可以关注并加好友呃……<br></p><p><i class="icon-envelope"></i> 邮箱: <a href="mailto:2810706745@qq.com" target="_blank" rel="noopener">2810706745@qq.com</a><br><i class="icon-comment"></i>  QQ:  2810706745<br><i class="icon-comments"></i> 微信: ZY20160801<br><i class="icon-weibo"></i> 新浪微博: <a href="https://weibo.com/2809144261/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo&amp;is_all=1" target="_blank" rel="noopener">点击这里</a><br><i class="icon-github"></i> GitHub: <a href="https://github.com/licheetools" target="_blank" rel="noopener">点击这里</a><br><br></p><blockquote><ul><li style="list-style: none"><input type="checkbox"> <strong>声明</strong>：</li><li style="list-style: none"><input type="checkbox" checked> <strong>1.</strong>本博客文章只是为了个人学习以及在一些技术型社区发表，不做商业使用;</li><li style="list-style: none"><input type="checkbox" checked> <strong>2.</strong>如其中引用到其他文章经典的部分，本人大部分都会加上引用或者在文章底部的参考文献中注明，如果不慎引用了你的文章但是却没有注明的请联系我;</li><li style="list-style: none"><input type="checkbox" checked> <strong>3.</strong>博客内文章欢迎转载，但转载前请联系我，保留出处和作者，不做商业使用，谢谢~~~ </li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> about </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于博主 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你有什么话，想对我说嘛？</title>
      <link href="/2017/03/03/%E4%BD%A0%E6%9C%89%E4%BB%80%E4%B9%88%E8%AF%9D%EF%BC%8C%E6%83%B3%E5%AF%B9%E6%88%91%E8%AF%B4%E5%98%9B%EF%BC%9F/"/>
      <url>/2017/03/03/%E4%BD%A0%E6%9C%89%E4%BB%80%E4%B9%88%E8%AF%9D%EF%BC%8C%E6%83%B3%E5%AF%B9%E6%88%91%E8%AF%B4%E5%98%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> liuyan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 留言板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战系列：（二）猫途鹰(tripadvisor)旅游景点信息爬取</title>
      <link href="/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E7%8C%AB%E9%80%94%E9%B9%B0(tripadvisor)%E6%97%85%E6%B8%B8%E6%99%AF%E7%82%B9%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
      <url>/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E7%8C%AB%E9%80%94%E9%B9%B0(tripadvisor)%E6%97%85%E6%B8%B8%E6%99%AF%E7%82%B9%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>在上一篇中，我们说到某个内容从属于多个分类(即它有多个标签)，应该如何把它所属的全部标签都爬取下来呢？这一期博主就将教你如何实现这一功能。我们以<a href="https://www.tripadvisor.cn/Attractions-g60763-Activities-New_York_City_New_York.html" target="_blank" rel="noopener">猫途鹰</a>这个网站为例，向大家演示一下。</p><h2 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容"></a>爬取内容</h2><p>如下图所示，我们需要爬取该图中所示景点的信息，具体包括：标题，封面图片，分类等信息。</p><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><h3 id="get-方法的使用"><a href="#get-方法的使用" class="headerlink" title="get()方法的使用"></a>get()方法的使用</h3><p>我们在上一篇中，获取标题，地址，单标签的文本信息采用了get_text()方法，但是如果要获取图片呢？我们是不能和之前一样，要采用一种新的方法：get(‘attr’)。这么说你可能有些困惑，举个简单的例子，看下面的代码:<br><code>&lt;a href=http://licheetools.top&gt; share my life with you &lt;/a&gt;</code><br>如果你只想获取网站信息，只需要.get(‘href’)即可。获取图片只需要.get(‘src’)因为图片的格式一般是这样的：<code>&lt;img src=&quot;http://licheetools.top/index.html/first.jpg&quot; alt=&quot;第一张图片&quot;&gt;</code></p><h3 id="stripped-strings的用法"><a href="#stripped-strings的用法" class="headerlink" title="stripped_strings的用法"></a>stripped_strings的用法</h3><p>在这里你可以认为是高级的get_text(),它这个可以同时取出多个文本，待会就采用这个来爬取多个标签。</p><h3 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h3><p>字符串的格式化通常采用{}和:来代替传统的%方式，具体如下：<br><strong>1、使用位置参数</strong><br>从下面的例子可以看出位置参数不受顺序约束，且可以为{},只要format里有相对应的参数值即可,参数索引从0开，传入位置参数列表可用*列表；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'my name is &#123;&#125; ,age &#123;&#125;'</span>.format(<span class="string">'joe'</span>,<span class="number">18</span>)</span><br><span class="line">print(a)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">18</span></span><br><span class="line"></span><br><span class="line">b=<span class="string">'my name is &#123;1&#125; ,age &#123;0&#125;'</span>.format(<span class="number">10</span>,<span class="string">'joe'</span>)</span><br><span class="line">print(b)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">10</span></span><br><span class="line"></span><br><span class="line">c=<span class="string">'my name is &#123;1&#125; ,age &#123;0&#125; &#123;1&#125;'</span>.format(<span class="number">10</span>,<span class="string">'joe'</span>)</span><br><span class="line">print(c)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">10</span> joe</span><br><span class="line"></span><br><span class="line">data=[<span class="string">'joe'</span>,<span class="number">18</span>]</span><br><span class="line">d=<span class="string">'my name is &#123;&#125; ,age &#123;&#125;'</span>.format(*data)</span><br><span class="line">print(d)</span><br><span class="line">my name <span class="keyword">is</span> joe ,age <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p><strong>2、使用关键字参数</strong><br>采用字典当关键字参数传入值，不过关键字参数值要对得上，可以在字典前加**<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="string">'my name is &#123;name&#125;,age is &#123;age&#125;'</span>.format(name=<span class="string">'joe'</span>,age=<span class="number">19</span>)</span><br><span class="line">print(e)</span><br><span class="line">my name <span class="keyword">is</span> joe,age <span class="keyword">is</span> <span class="number">19</span></span><br><span class="line"></span><br><span class="line">data=&#123;<span class="string">'name'</span>:<span class="string">'joe'</span>,<span class="string">'age'</span>:<span class="number">19</span>&#125;</span><br><span class="line">f=<span class="string">'my name is &#123;name&#125;,age is &#123;age&#125;'</span>.format(**data)</span><br><span class="line">print(f)</span><br><span class="line">my name <span class="keyword">is</span> joe,age <span class="keyword">is</span> <span class="number">19</span></span><br></pre></td></tr></table></figure></p><p>其他参数我在这里就不介绍了，你可以看这篇文章<a href="http://www.cnblogs.com/benric/p/4965224.html" target="_blank" rel="noopener">python之字符串格式化(formate)</a></p><h2 id="代码内容"><a href="#代码内容" class="headerlink" title="代码内容"></a>代码内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/user/bin/pytthon</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2017/04/15 20:15</span></span><br><span class="line"><span class="comment"># @Author: lichexo</span></span><br><span class="line"><span class="comment"># @File: test_05.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://www.tripadvisor.cn/Attractions-g60763-Activities-New_York_City_New_York.html'</span></span><br><span class="line">urls=[<span class="string">'https://www.tripadvisor.cn/Attractions-g60763-Activities-oa&#123;&#125;-New_York_City_New_York.html#FILTERED_LIST'</span>.format(str(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>,<span class="number">1140</span>,<span class="number">30</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_attraction</span><span class="params">(url,data=None)</span>:</span></span><br><span class="line">    web_data = requests.get(url)</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    soup = BeautifulSoup(web_data.text, <span class="string">'lxml'</span>)</span><br><span class="line">    titles = soup.select(<span class="string">'div.listing_title &gt; a[target="_blank"]'</span>)</span><br><span class="line">    images = soup.select(<span class="string">'img[width="180"]'</span>)</span><br><span class="line">    cates = soup.select(<span class="string">'div.tag_line &gt; div'</span>)</span><br><span class="line">    <span class="keyword">for</span> title,image,cate <span class="keyword">in</span> zip(titles,images,cates):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'title'</span>:title.get_text(),</span><br><span class="line">            <span class="string">'image'</span>:image.get(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'cate'</span>:list(cate.stripped_strings),</span><br><span class="line">        &#125;</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line">get_attraction(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> single_url <span class="keyword">in</span> urls:</span><br><span class="line">    get_attraction(single_url)</span><br><span class="line"></span><br><span class="line">print(urls)</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>由于抓取的内容太多，这里只呈现部分信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'曼哈顿天际线'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'大都会艺术博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'艺术博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'中央公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'公园'</span>, <span class="string">','</span>, <span class="string">'景观步行区'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'9/11纪念馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'特色博物馆'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'纪念碑与雕像'</span>, <span class="string">','</span>, <span class="string">'古迹'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'峭石之巅观景台'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'观景台'</span>, <span class="string">','</span>, <span class="string">'瞭望台'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'布鲁克林大桥'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'桥梁'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'圣帕提克大教堂'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'教堂'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'百老汇'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'大中央车站'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'建筑'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'布莱恩公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'公园'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'纽约公共图书馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'特色博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'世贸一号观景台'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'观景台'</span>, <span class="string">','</span>, <span class="string">'建筑'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'史泰登岛渡轮'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'轮渡'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'高线公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景观步行区'</span>, <span class="string">','</span>, <span class="string">'公园'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'帝国大厦'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'建筑'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'观景台'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'自由女神像'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'纪念碑与雕像'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'洛克菲勒中心'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'建筑'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'现代艺术博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'艺术博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'The Oculus'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'景点与地标'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'无畏海空宇宙博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'剧院'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'阿波罗剧院'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'纪念碑与雕像'</span>, <span class="string">','</span>, <span class="string">'建筑'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'华盛顿广场公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'特色博物馆'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'圣保罗教堂'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'剧院'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'圣约翰教堂'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'公园'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'周边'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'河滨公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: []&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'Studio 54'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'教堂'</span>, <span class="string">','</span>, <span class="string">'圣地与宗教景点'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'埃利斯岛'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'圣地与宗教景点'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'切尔西市场'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: []&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'商人之家博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'公园'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'哈德逊河公园'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: []&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'艾利斯岛移民博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'剧院'</span>]&#125;</span><br><span class="line">&#123;<span class="string">'title'</span>: <span class="string">'犹太遗产博物馆'</span>, <span class="string">'image'</span>: <span class="string">'https://cc.ddcdn.com/img2/x.gif'</span>, <span class="string">'cate'</span>: [<span class="string">'历史博物馆'</span>, <span class="string">','</span>, <span class="string">'景点与地标'</span>, <span class="string">','</span>, <span class="string">'古迹'</span>]&#125;</span><br><span class="line"></span><br><span class="line">。。。。。。</span><br></pre></td></tr></table></figure></p><h2 id="下期说明"><a href="#下期说明" class="headerlink" title="下期说明"></a>下期说明</h2><p>哈哈，今天总的来说还是比较简单的，容易操作，下期我们准备爬点不一样的东西。。。</p><p>今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。</p>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫实战系列：（一）58同城-转转商品信息爬取</title>
      <link href="/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%8958%E5%90%8C%E5%9F%8E-%E8%BD%AC%E8%BD%AC%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/"/>
      <url>/2017/03/02/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%8958%E5%90%8C%E5%9F%8E-%E8%BD%AC%E8%BD%AC%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本系列教程记录了博主的爬虫之路，可谓是有苦又累，有甜有笑，如果你在看过本系列教程之后，对爬虫<br>有独到的见解或者浓厚的兴趣，不妨留言和博主进行交流学习呢，我在这里等你来玩~~~</p><h2 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容"></a>爬取内容</h2><p>如下图所示，我们需要爬取该图中所示商品的信息，具体包括：类目，标题，价格，浏览量，所在区域<br>等信息。<br><img src="https://storage6.cuntuku.com/2018/03/31/DBHP3.png" alt="DBHP3.png"></p><h2 id="代码内容"><a href="#代码内容" class="headerlink" title="代码内容"></a>代码内容</h2><h3 id="字典属性法"><a href="#字典属性法" class="headerlink" title="字典属性法"></a>字典属性法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/user/bin/pytthon</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2017/4/10 15:15</span></span><br><span class="line"><span class="comment"># @Author: lichexo</span></span><br><span class="line"><span class="comment"># @File: zhuanzhuan.py</span></span><br><span class="line"><span class="comment"># @Website：http：//licheetools.top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment">#导入需要的包和模块</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time   <span class="comment">#用于控制每次爬取的时间间隔</span></span><br><span class="line"></span><br><span class="line">user_agent=<span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) </span></span><br><span class="line"><span class="string">AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'User_Agent'</span>:<span class="string">'user_agent'</span></span><br><span class="line">&#125;</span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_attrition</span><span class="params">(url)</span>:</span>   <span class="comment">#定义函数，便于调用</span></span><br><span class="line">    <span class="comment">#url = 'http://zhuanzhuan.58.com/detail/967678151307198471z.shtml</span></span><br><span class="line">    ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp;metric=null&amp;</span><br><span class="line">    PGTID=<span class="number">0</span>d305a36<span class="number">-0000</span><span class="number">-1792</span>-ee6b<span class="number">-8</span>d43de6b3765&amp;ClickID=<span class="number">7</span><span class="string">'    </span></span><br><span class="line"><span class="string">#此处URL前面的(#)不可删除，否则就出现函数调用错误，因为后面调用的link已经替换此处的url</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    web_data=requests.get(url,headers=headers)  </span></span><br><span class="line"><span class="string">    soup=BeautifulSoup(web_data.text,'</span>lxml<span class="string">')</span></span><br><span class="line"><span class="string">    casses=soup.select('</span><span class="comment">#nav &gt; div &gt; span &gt; a')</span></span><br><span class="line">    titles=soup.select(<span class="string">'div.box_left_top &gt; h1'</span>)</span><br><span class="line">    moneys=soup.select(<span class="string">'div.price_li &gt; span[class="price_now"] &gt; i'</span>)</span><br><span class="line">    addresses=soup.select(<span class="string">'div.palce_li &gt; span &gt; i'</span>)</span><br><span class="line">    <span class="keyword">for</span> cass,title,money,address <span class="keyword">in</span> zip(casses,titles,moneys,addresses):</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'cass'</span>:cass.get_text(),   <span class="comment">#文字调用get_text()方法</span></span><br><span class="line">            <span class="string">'title'</span>:title.get_text(),</span><br><span class="line">            <span class="string">'money'</span>:money.get_text(),</span><br><span class="line">            <span class="string">'address'</span>:address.get_text(),</span><br><span class="line">        &#125;</span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_item_info</span><span class="params">()</span>:</span></span><br><span class="line">    url=<span class="string">'http://bj.58.com/pbdn/'</span></span><br><span class="line">    web_data=requests.get(url)</span><br><span class="line">    soup=BeautifulSoup(web_data.text,<span class="string">'lxml'</span>)</span><br><span class="line">    href_list=soup.select(<span class="string">'a.t'</span>)</span><br><span class="line">    <span class="keyword">for</span> href <span class="keyword">in</span> href_list:</span><br><span class="line">        link=href.get(<span class="string">'href'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'zhuanzhuan'</span> <span class="keyword">in</span> link:   <span class="comment">#除去网页中不需要的精准推广部分</span></span><br><span class="line">            get_attrition(link)</span><br><span class="line"></span><br><span class="line">get_all_item_info()</span><br></pre></td></tr></table></figure><h3 id="列表索引法"><a href="#列表索引法" class="headerlink" title="列表索引法"></a>列表索引法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/user/bin/pytthon</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2017/4/10 15:15</span></span><br><span class="line"><span class="comment"># @Author: lichexo</span></span><br><span class="line"><span class="comment"># @File: zhuanzhuan.py</span></span><br><span class="line"><span class="comment"># @Website：http：//licheetools.top</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">user_agent=<span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X)</span></span><br><span class="line"><span class="string">AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1'</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'User_Agent'</span>:<span class="string">'user_agent'</span></span><br><span class="line">&#125;</span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_item_info</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#url='http://zhuanzhuan.58.com/detail/835458751461588996z.shtml</span></span><br><span class="line">    ?fullCate=5%2C38484%2C23094&amp;fullLocal=1&amp;from=pc&amp;</span><br><span class="line">    metric=null&amp;PGTID=<span class="number">0</span>d305a36<span class="number">-0000</span><span class="number">-123</span>c<span class="number">-630</span>d-da6c51789948&amp;ClickID=<span class="number">1</span><span class="string">'</span></span><br><span class="line"><span class="string">    web_data=requests.get(url,headers=headers)</span></span><br><span class="line"><span class="string">    soup=BeautifulSoup(web_data.text,'</span>lxml<span class="string">')</span></span><br><span class="line"><span class="string">    title_list=soup.select('</span>h1.info_titile<span class="string">')</span></span><br><span class="line"><span class="string">    title=title_list[0].text   #该列表有且仅有唯一一个元素，采用get_text()将其取出</span></span><br><span class="line"><span class="string">    price_list=soup.select('</span>span.price_now &gt; i<span class="string">')</span></span><br><span class="line"><span class="string">    price=price_list[0].text</span></span><br><span class="line"><span class="string">    views_list=soup.select('</span>span.look_time<span class="string">')</span></span><br><span class="line"><span class="string">    view=views_list[0].text</span></span><br><span class="line"><span class="string">    area_list=soup.select('</span>div.palce_li &gt; span &gt; i<span class="string">')</span></span><br><span class="line"><span class="string">    area=area_list[0].text</span></span><br><span class="line"><span class="string">    cate_list=soup.select('</span>span.crb_i &gt; a<span class="string">')</span></span><br><span class="line"><span class="string">    cate=cate_list[-1].text.strip()  #使用strip()函数来消除换行和空格的影响</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    data=&#123;</span></span><br><span class="line"><span class="string">        '</span>title<span class="string">':title,</span></span><br><span class="line"><span class="string">        '</span>price<span class="string">':price,</span></span><br><span class="line"><span class="string">        '</span>view<span class="string">':view,</span></span><br><span class="line"><span class="string">        '</span>area<span class="string">':area,</span></span><br><span class="line"><span class="string">        '</span>cate<span class="string">':cate,</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    print(data)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def get_all_item_info():</span></span><br><span class="line"><span class="string">    url='</span>http://bj<span class="number">.58</span>.com/pbdn/<span class="string">'</span></span><br><span class="line"><span class="string">    web_data=requests.get(url,headers=headers)</span></span><br><span class="line"><span class="string">    soup=BeautifulSoup(web_data.text,'</span>lxml<span class="string">')</span></span><br><span class="line"><span class="string">    href_list=soup.select('</span>a.t<span class="string">')</span></span><br><span class="line"><span class="string">    for href in href_list:</span></span><br><span class="line"><span class="string">        link=href.get('</span>hre<span class="string">f')   #获取元素的某个属性采用get()方法来实现</span></span><br><span class="line"><span class="string">        if '</span>zhuanzhuan<span class="string">' in link:</span></span><br><span class="line"><span class="string">            get_item_info(link)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">get_all_item_info()</span></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://storage7.cuntuku.com/2018/03/31/DBe6D.png" alt="DBe6D.png"></p><h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><h3 id="soup-select-选择标签问题"><a href="#soup-select-选择标签问题" class="headerlink" title="soup.select ( )选择标签问题"></a>soup.select ( )选择标签问题</h3><p>你只需要在浏览器中鼠标右键点击审查(<code>Ctrl+Shift+I</code>) –&gt; 找到字段的具体代码 –&gt; 右键选择Copy –&gt; Copy selector即可得到你想要的代码字段。为保证你是否正确捕抓到相关信息，你可以鼠标右键点击查看网页源代码(<code>Ctrl+U</code>) –&gt;然后再按<code>Ctrl+F</code>调出搜索框 –&gt; 将你刚才捕抓到的信息进行复制黏贴并回车 –&gt; 看右侧的黄色代码区是否是包括你所需信息的最小高亮区，不是则往上一级父级标签查询。</p><h3 id="get-text-和-get-的使用问题"><a href="#get-text-和-get-的使用问题" class="headerlink" title="get_text 和 get()的使用问题"></a>get_text 和 get()的使用问题</h3><p>get_text()，是返回选择的标签文本，具体可以查看<a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/#get-text" target="_blank" rel="noopener">参考文档</a>;而get(‘’)，这是选择标签中的属性(也就是里面有=符号的左边)，<br>比如在<code>&lt;li&gt;&lt;a class=&quot;rrence intnal&quot; href=&quot;#next-siblings-previous-siblings&quot;&gt;&lt;/li&gt;</code>之中，选择li &gt; a这个标签之后，则可以用get(‘href’)获取其中的链接。</p><h2 id="下期说明"><a href="#下期说明" class="headerlink" title="下期说明"></a>下期说明</h2><p>哈哈，今天的内容是不是很简单，不过你是不是有一个疑问，就是如果某个内容从属于多个分类(即它有多个标签)我们应该如何把它所属的全部标签都爬取下来呢？那么下期博主将教你如何实现这一功能。</p><p><strong>本教程适合有一部分Python基础的同学，小白童鞋很抱歉。。。</strong></p><p>今天的分享就到这里了，如果你有任何不懂的问题，可以发信息或者留言喽。</p>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行者有梦，千里亦趋</title>
      <link href="/2017/03/01/%E8%A1%8C%E8%80%85%E6%9C%89%E6%A2%A6%EF%BC%8C%E5%8D%83%E9%87%8C%E4%BA%A6%E8%B6%8B/"/>
      <url>/2017/03/01/%E8%A1%8C%E8%80%85%E6%9C%89%E6%A2%A6%EF%BC%8C%E5%8D%83%E9%87%8C%E4%BA%A6%E8%B6%8B/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="对不起，此文章为加密内容，只有管理员才能查看." />    <label for="pass">对不起，此文章为加密内容，只有管理员才能查看.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
